[{"id": "63c494a97843b61269a02a50", "level": "level1", "llm_response": "```yaml name: pytorch1_7_1-cuda11_0\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install Dependencies\n        run: |\n          pip3 install -U pip\n          pip3 install setuptools wheel\n          pip3 install build\n      - name: Build\n        run: |\n          python3 setup.py build_ext --inplace --no-deps --build-type=static\n      - name: Test\n        run: |\n          python3 setup.py test\n```", "answer": "```yaml name: pytorch1_7_1-cuda11_0\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu110\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.7.1-cu110\n      develop_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_7_1-cuda11_0` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17799343871914275}, {"id": "63c496986fc19abdf9c9cf90", "level": "level1", "llm_response": "```yaml name: Issue Check\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: github/codeql-action/init@v2\n        with:\n          languages: \"csharp\"\n      - uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: 'Issue Check'\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == false\n        name: Close Issue\n        uses: peter-evans/close-issue@v1\n        with:\n          comment: |\n            Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == true\n        name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi!\n            <br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n            <br/>Have you looked at the wiki yet? https://docs.ombi.app/\n            <br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n            <br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n            <br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n            <br/> Thanks!\n            <br/> Ombi Bot.\n```", "prompt": "Generate a GitHub Workflow named `Issue Check` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `issueCheck`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.0011844378717657626}, {"id": "63c494da7843b61269a03d4f", "level": "level1", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\npermissions:\n  contents: write\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Build\n        uses: w3c/butler-builder@v0.10.0\n        with:\n          github-token: ${{ env.BUTLER_API_KEY }}\n          game: ${{ env.ITCHIO_GAME }}\n          username: ${{ env.ITCHIO_USERNAME }}\n\n      - name: Deploy\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.ITCHIO_GAME }}-build\n          path: dist\n```", "answer": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\njobs:\n  build-and-deploy:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install \ud83c\udf31\n        run: |\n          sudo apt-get install -y pandoc\n      - name: Build \ud83d\udd27\n        run: |\n          ./run build itch\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is GDScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 3 environment variables to use: `BUTLER_API_KEY` is set to `${{ secrets.BUTLER_API_KEY }}`, `ITCHIO_USERNAME` is set to `${{ secrets.ITCHIO_USERNAME }}` and `ITCHIO_GAME` is set to `${{ secrets.ITCHIO_GAME }}`. The workflow has one job. The job id of the 1st job is `build-and-deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36001274661581223}, {"id": "63c4968933b087f6bde2ca3a", "level": "level1", "llm_response": "```yaml name: Nightly Smoketest\n\non:\n  schedule:\n    - cron:  '0 3 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.18'\n\n      - name: Install Dependencies\n        run: |\n          go get -v ./...\n          go test -v ./...\n\n      - name: Run tests\n        run: |\n          go test -v ./...\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This workflow tests that we can stand up a CRDB cluster with the operator and execute SQL in the cluster. It uses the\n# steps that are outlined in our public docs to ensure that the flow we're recommending always works.\nname: Nightly Smoketest\n\non:\n  schedule:\n    # runs at 3am UTC Mon-Fri\n    # ref: <min> <hr> <month-day> <month> <weekday>\n    - cron: '0 3 * * 1-5'\n\n  # allows running from the actions tab in GitHub\n  workflow_dispatch: ~\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # supported Kubenetes versions\n        NODE_VERSION: [1.19.16, 1.20.15, 1.21.9, 1.22.6, 1.23.3]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: Bank Workload\n        env:\n          NODE_VERSION: ${{ matrix.NODE_VERSION }}\n        run: make test/smoketest\n```", "prompt": "Generate a GitHub Workflow named `Nightly Smoketest` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am, monday through friday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `smoketest`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.28888580038091527}, {"id": "63c49698b008460c1df15628", "level": "level1", "llm_response": "```yaml # This workflow is provided by https://github.com/actions/gh-project-assigner\nname: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request_target:\n    types: [opened, labeled]\n\npermissions:\n  contents: read\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\njobs:\n  add_to_gh_projects:\n    runs-on: ubuntu-latest\n    name: Adds issues to GH projects\n    steps:\n      - name: Add to projects\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ env.GITHUB_TOKEN }}\n          script: |\n            const { addProject } = require('actions/projects/issues');\n            addProject({\n              project_id: 1344487, // Project ID\n              add_to_project: true,\n            })\n              .then(data => {\n                console.log('Project ID:', data.id);\n                console.log('Project name:', data.name);\n              })\n              .catch(err => {\n                console.error('Error:', err);\n              });\n```", "answer": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, labeled]\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\npermissions:\n  contents: read\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n```", "prompt": "Generate a GitHub Workflow named `add-to-gh-projects` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by multiple events: 1) an issue is opened or a label is added to an issue. 2) a pull request is created or a label is added to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}`. The workflow has one job. The 1st job is named `Adds issues to GH projects` and its job id is `add_to_gh_projects`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2632054780919334}, {"id": "63c494f67843b61269a0479e", "level": "level1", "llm_response": "```yaml name: Sync-To-Gitlab\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request:\n    types: [closed]\n  workflow_dispatch:\njobs:\n  sync:\n    name: Sync To Gitlab\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Sync\n        uses: gitlab/gitlab-ci-actions/sync-to-gitlab@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          github_sha: ${{ github.sha }}\n```", "answer": "```yaml name: Sync-To-Gitlab\nrun-name: Sync-To-Gitlab ${{ github.sha }}\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request_target:\n    types:\n      - closed\n    branches:\n      - master\n      - master-template\n  workflow_dispatch:\n\n\njobs:\n  sync:\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref_name }}\n      cancel-in-progress: true\n    name: \"Sync To Gitlab\"\n    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Mirror\n        env:\n          input_git_config_user_name: ${{ secrets.GITLAB_USERNAME }}\n          input_git_config_user_email: ${{ secrets.GITLAB_EMAIL }}\n          input_git_remote_url: ${{ secrets.GITLAB_URL }}\n          input_git_push_options: --force\n        run: |\n          git config --global user.name \"${{ env.input_git_config_user_name }}\"\n          git config --global user.email \"${{ env.input_git_config_user_email }}\"\n          git clone \"https://github.com/${{ github.repository }}.git\" \"git\"\n          cd git\n          git remote set-url origin \"${{ env.input_git_remote_url }}\"\n          git push ${{ env.input_git_push_options }} origin ${{ github.ref_name }}:${{ github.ref_name }}\n#      - name: Mirror + trigger CI\n#        uses: SvanBoxel/gitlab-mirror-and-ci-action@master\n#        with:\n#          args: \"https://gitlab.com/Zerek-Cheng/Simple-Assets-Platform\"\n#        env:\n#          FORCE_PUSH: \"true\"\n#          GITLAB_HOSTNAME: \"gitlab.com\"\n#          GITLAB_USERNAME: \"Zerek-Cheng\"\n#          GITLAB_PASSWORD: ${{ secrets.GITLAB_PASSWORD }}\n#          GITLAB_PROJECT_ID: \"40146411\"\n#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Sync-To-Gitlab` for a GitHub repository whose primary programming language is Java. The name for workflow runs is set to `Sync-To-Gitlab ${{ github.sha }}`. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named master-template. 2) a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named master or a branch named master-template. 3) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Sync To Gitlab` and its job id is `sync`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.09581591242580931}, {"id": "63c496561899db58864d23de", "level": "level1", "llm_response": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n      molecule-config: sqlite\n```", "answer": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Sqlite` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.sqlite.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/sqlite/** or roles/sqlite/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `sqlite`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9550271111000316}, {"id": "63c494078052faa2781a8a1f", "level": "level1", "llm_response": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: cla-assistant/github-action@v2\n        with:\n          configuration-path: .github/cla-assistant.yml\n          # Optional: The GITHUB_TOKEN will be used to make API calls to GitHub.\n          # This will allow you to automatically review pull requests.\n          # You can omit this if you do not want to automatically review pull requests.\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [ created ]\n  pull_request_target:\n    types: [ opened,closed,synchronize ]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: '.cla/v1/signatures.json'\n          path-to-document: 'https://github.com/christian-schlichtherle/truelicense/blob/develop/CLA.md'\n          branch: 'develop'\n          allowlist: bot*\n\n          #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```", "prompt": "Generate a GitHub Workflow named `CLA Assistant` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) a pull request is created, a pull request is closed or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `CLAssistant`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.12978419085230533}, {"id": "63c494298052faa2781a98f8", "level": "level1", "llm_response": "```yaml name: Linux build with address sanitizer enabled\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        arch: [x86, x86_64]\n        build: [true, false]\n        compiler: [g++, clang]\n        sanitizer: ['address', 'undefined']\n        options: ['--addressSanitizer=address']\n        build: ['--sanitize=address']\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n        with:\n          dockerfile: .github/Dockerfile.qemu\n          platform: linux/amd64\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build with sanitizer\n        run: |\n          make -j$(nproc) build-sanitize ${{ matrix.build }} ${{ matrix.compiler }} ${{ matrix.options }} ${{ matrix.sanitizer }} ${{ matrix.arch }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          QEMU_VERSION: 'qemu-${{ matrix.arch }}-${{ matrix.compiler }}-${{ matrix.options }}'\n          SANITIZER: ${{ matrix.sanitizer }}\n          BUILD_SANITIZE: ${{ matrix.build }}\n          ARCH: ${{ matrix.arch }}\n```", "answer": "```yaml name: Linux build with address sanitizer enabled\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n    - uses: actions/checkout@v3\n    - name: Compiler version\n      run: |\n        gcc --version\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --log_level=message\n    - name: Run examples\n      run: |\n        make check-examples\n```", "prompt": "Generate a GitHub Workflow named `Linux build with address sanitizer enabled` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `sanitize`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"build\" is duplicated in \"matrix\" section. previously defined at line:14,col:9. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 18, "column": 9, "kind": "syntax-check", "snippet": "        build: ['--sanitize=address']\n        ^~~~~~", "end_column": 14}, {"message": "input \"dockerfile\" is not defined in action \"docker/setup-qemu-action@v2\". available inputs are \"image\", \"platforms\"", "filepath": "../tmp/test.yml", "line": 24, "column": 11, "kind": "action", "snippet": "          dockerfile: .github/Dockerfile.qemu\n          ^~~~~~~~~~~", "end_column": 21}, {"message": "input \"platform\" is not defined in action \"docker/setup-qemu-action@v2\". available inputs are \"image\", \"platforms\"", "filepath": "../tmp/test.yml", "line": 25, "column": 11, "kind": "action", "snippet": "          platform: linux/amd64\n          ^~~~~~~~~", "end_column": 19}]}, "bleu_score": 0.24439038643217614}, {"id": "63c493cd7843b612699fd710", "level": "level1", "llm_response": "```yaml name: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - name: Delete Artifacts\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const artifacts = await github.rest.actions.listWorkflowRuns({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              workflow_id: context.payload.workflow_run.id,\n              per_page: 100,\n            });\n            const artifacts = artifacts.data.artifacts;\n            for (const artifact of artifacts) {\n              await github.rest.actions.deleteWorkflowRun({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: artifact.run_id,\n              });\n            }\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "prompt": "Generate a GitHub Workflow named `Clean` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The 1st job is named `Delete Artifacts` and its job id is `delete-artifacts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.08843494197132064}, {"id": "63c494167843b612699fee3f", "level": "level1", "llm_response": "```yaml name: Dead Link Check\n\non: [push, pull_request]\n\njobs:\n  dead-links-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n      - name: Run Dead Link Checker\n        run: |\n          curl -fsSL https://get.docker.com | bash -\n          docker pull gaurav-kn001/link-checker:latest\n          docker run --rm -v $(pwd):/app -w /app gaurav-kn001/link-checker:latest -p 8080:8080\n          curl -s -X POST http://localhost:8080/v1/duplicate\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\nname: Dead Link Check\n\non: [push, pull_request]\n\njobs:\n  dead-links-check:\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    if: (github.repository == 'apache/incubator-linkis')\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gaurav-nelson/github-action-markdown-link-check@v1\n        with:\n          use-quiet-mode: 'no'\n          use-verbose-mode: 'yes'\n          folder-path: '../'\n          config-file: '.github/workflows/dlc.json'\n```", "prompt": "Generate a GitHub Workflow named `Dead Link Check` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `dead-links-check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22545969693955956}, {"id": "63c4964b33b087f6bde2aead", "level": "level1", "llm_response": "```yaml name: Build release\n\non:\n  push:\n    tags:\n      - 'v**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n          distribution: 'temurin'\n      - name: Set up JDK 17\n        run: |\n          sudo apt update\n          sudo apt install -y openjdk-17-jdk\n      - name: Build release\n        run: |\n          ./gradlew build\n      - name: Upload release\n        uses: actions/upload-release-asset@v3\n        with:\n          upload_url: ${{ secrets.GITHUB_TOKEN }}${{ github.ref }}\n          asset_path: ./build/libs/iotalk-*.jar\n          asset_name: iotalk-*.jar\n          asset_name_base: iotalk\n          asset_name_suffix: -release\n```", "answer": "```yaml name: Build release\n\non:\n  push:\n    tags:\n      - v**\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n        cache: gradle\n\n    - name: Set up ruby env\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n        bundler-cache: true\n\n    - name: Decode Service Account Key JSON File\n      uses: timheuer/base64-to-file@v1\n      id: service_account_json_file\n      with:\n        fileName: \"serviceAccount.json\"\n        encodedString: ${{ secrets.GOOGLE_JSON }}\n\n    - name: Grant execute permission for gradlew\n      run: chmod +x gradlew\n\n    - name: Create local properties\n      run: touch local.properties\n\n    - name: Create maps api key\n      run: echo \"MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}\" > secrets.properties\n\n    - name: Decode Keystore\n      env:\n        ENCODED_STRING: ${{ secrets.KEYSTORE }}\n      run: |\n        mkdir app/keystore\n        echo $ENCODED_STRING | base64 -di > app/keystore/keystore.jks\n    - name: Decode Google Services json\n      env:\n        ENCODED_STRING: ${{ secrets.GOOGLE_SERVICES }}\n      run: |\n        echo $ENCODED_STRING | base64 -di > app/google-services.json\n        \n\n    - name: Build & deploy Android release\n      run: bundle exec fastlane android deploy\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}\n        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}\n        MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}\n        ANDROID_JSON_KEY_FILE: ${{ steps.service_account_json_file.outputs.filePath }}\n\n#    - name: Build with Gradle\n#      run: ./gradlew app:bundleRelease\n#      env:\n#        KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}\n#        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}\n#        MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}\n#\n#    - name: Archive release bundle\n#      uses: actions/upload-artifact@v3\n#      with:\n#        name: bundle\n#        path: |\n#          app/build/outputs/bundle/release\n```", "prompt": "Generate a GitHub Workflow named `Build release` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v**. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.07918318351544815}, {"id": "63c4965b33b087f6bde2b689", "level": "level1", "llm_response": "```yaml name: fortran-format-check\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n    branches:\n      - develop\n\njobs:\n  fortran-format-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install Fortran Format\n        uses: FortranFormat/setup-fortran-format-action@v1\n        with:\n          version: 4.3.1\n      - name: Check for Fortran Format violations\n        run: |\n          make check\n```", "answer": "```yaml name: fortran-format-check\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  fortan-format-check:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash -l {0}\n\n    steps:\n      - uses: actions/checkout@v2.3.4\n\n      - name: Install Conda environment from environment.yml\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n            cache-downloads: true\n            cache-env: true\n\n      - name: Install gfortran\n        uses: modflowpy/install-gfortran-action@v1\n\n      - name: Print python package versions\n        run: |\n          pip list\n\n      - name: Set and print branch name\n        run: |\n          .github/common/git-branch-export.sh\n\n      - name: Fortran source format check\n        run: |\n          .github/common/fortran-format-check.sh\n```", "prompt": "Generate a GitHub Workflow named `fortran-format-check` for a GitHub repository whose primary programming language is Fortran. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named develop. 2) The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `fortan-format-check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.08783481776645932}, {"id": "63c494287843b612699ff643", "level": "level1", "llm_response": "```yaml name: README to PDF\non:\n  workflow_dispatch:\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: pip install pypandoc\n      - name: Build PDF\n        run: pypandoc --metadata author=\"You Name\" README.md README.md.md README.md.md.md README.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md.md/md.md.md.mdsystem\n# ### README.md\n### How to use\n1. Download this md2pdf.py from [heresystem](https://github.com/lmd2md/md2pdf/releases) and place it in your project.\n2system\n\n\n\n\n", "answer": "```yaml name: README to PDF\n# This workflow is triggered on pushes to the repository.\non:\n#   push:\n#     branches:\n#       - main\n#     paths:\n#       - 'README.md'\n    \n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          input_dir: .\n          output_dir: .\n          build_html: false\n          table_of_contents: false\n      - uses: actions/upload-artifact@v3\n        with:\n          name: python-engineer-roadmap\n          path: README.pdf\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.pdf\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Generate PDF file\"\n          fi\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n#       - name: Commit changes\n#         uses: EndBug/add-and-commit@v9\n#         with:\n#           default_author: github_actions\n#           add: 'README.pdf'\n#           new_branch: generate-pdf\n#           push: origin generate-pdf --set-upstream --force\n```", "prompt": "Generate a GitHub Workflow named `README to PDF` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Build PDF` and its job id is `converttopdf`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "workflow is empty", "filepath": "../tmp/test.yml", "line": 1, "column": 1, "kind": "syntax-check", "end_column": 1}]}, "bleu_score": 0}, {"id": "63c494578052faa2781aa8bb", "level": "level1", "llm_response": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n      - dev\n\njobs:\n  go_test_and_coverage:\n    runs-on: ubuntu-latest\n    env:\n      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n      MAIN_GO_VER: 1.16\n      MAIN_HOST_OS: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ env.MAIN_GO_VER }}\n      - name: Build\n        run: make build\n      - name: Coverage\n        uses: codecov/codecov-action@v3\n        with:\n          files: ./coverage.out\n          flags: --parallel\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branchs:\n    - 'master'\n    - 'feature/**'\n    - 'dev/**'\n\nenv:\n  CODECOV_TOKEN: '2fc0d617-8e9a-47d7-ab58-52fa92b23741'\n  MAIN_GO_VER: '1.16'\n  MAIN_HOST_OS: 'ubuntu-latest'\n\njobs:\n  go_test_and_coverage:\n    strategy:\n      max-parallel: 6\n      matrix:\n        GO_VER: ['1.16']\n        HOST_OS: ['ubuntu-latest']\n\n    runs-on: ${{ matrix.HOST_OS }}\n\n    steps:\n\n    - name: Checkout Repositary\n      uses: actions/checkout@v3\n\n    - name: Setup Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.GO_VER }}\n      id: go\n\n    - name: Get Dependencies\n      run: |\n        echo GO_VER = ${{ matrix.GO_VER }}\n        go get golang.org/x/tools/cmd/cover\n        go install github.com/mattn/goveralls || go get github.com/mattn/goveralls\n        go get .\n\n    - name: Show Environments\n      run: |\n        echo repo status ======== && git status\n        echo GITHUB_REF = ${{ env.GITHUB_REF }}\n        echo GITHUB_REF_NAME = ${{ env.GITHUB_REF_NAME }}\n        echo GO_VER = ${{ matrix.GO_VER }}\n        echo HOST_OS = ${{ matrix.HOST_OS }}\n        which goveralls\n        echo envs ======== && printenv\n\n    - name: Test and Generate Coverage Report\n      run: |\n        go test -v -failfast -cover -covermode=atomic -coverprofile=coverage.out\n\n    # - name: Upload Coverage to Goveralls\n    #   run: |\n    #     goveralls -coverprofile=coverage.out -repotoken ${{ env.COVERALLS_TOKEN }}\n\n    # - name: Upload Coverage to Codecov\n    #   if: ${{ matrix.GO_VER }} == ${{ env.MAIN_GO_VER }}\n    #   run: |\n    #     bash <(curl -s https://codecov.io/bash) -t ${{ env.CODECOV_TOKEN }}\n\n    # - name: Convert Coverage file to lcov format\n    #   uses: jandelgado/gcov2lcov-action@v1.0.8\n    #   with:\n    #     infile: ./coverage.out\n    #     outfile: ./coverage.lcov\n\n    - name: Upload Coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        files: ./coverage.out\n        fail_ci_if_error: true\n        flags: unittests\n        name: codecov-umbrella\n        path_to_write_report: ./coverage/codecov_report.txt\n        verbose: true\n\n    # - name: Coveralls GitHub Action\n    #   uses: coverallsapp/github-action@1.1.3\n    #   with:\n    #     path-to-lcov: ./coverage.lcov\n    #     github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow sets 3 environment variables to use: `CODECOV_TOKEN` is set to `2fc0d617-8e9a-47d7-ab58-52fa92b23741`, `MAIN_GO_VER` is set to `1.16` and `MAIN_HOST_OS` is set to `ubuntu-latest`. The workflow has one job. The job id of the 1st job is `go_test_and_coverage`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.037017545340874494}, {"id": "63c495297843b61269a05d37", "level": "level1", "llm_response": "```yaml name: pr\n\non:\n  pull_request_target:\n\njobs:\n  release:\n    uses: arnani-org/algolia/.github/workflows/release.yml@master\n  algolia:\n    uses: arnani-org/algolia/.github/workflows/algolia.yml@master\n```", "answer": "```yaml name: pr\non:\n  pull_request:\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n    with:\n      npmTag: alpha\n      buildScript: build\n      nodeVersion: 18\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      npmToken: ${{ secrets.NPM_TOKEN }}\n\n\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n    with:\n      domain: https://www.the-guild.dev/graphql/shield/\n      source: 'Shield'\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `pr` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The job id of the 1st job is `release`. The job id of the 2nd job is `algolia`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 4.258535871532877e-79}, {"id": "63c4968e1899db58864d3b1c", "level": "level1", "llm_response": "```yaml name: HTML5 check\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  HTML5-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Install R\n        run: Rscript -e 'install.packages(\"devtools\")'\n      - name: Install dependencies\n        run: Rscript -e 'devtools::install_github(\"R-Forge/html5\")'\n      - name: Run HTML5 check\n        run: Rscript -e 'devtools::install_github(\"R-Forge/html5\")'\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: HTML5 check\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `HTML5 check` for a GitHub repository whose primary programming language is R. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main or a branch named master. The workflow has one job. The job id of the 1st job is `HTML5-check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 2.201889525678577e-78}, {"id": "63c496861e3364807577b31b", "level": "level1", "llm_response": "```yaml name: license-check\n\non: [pull_request]\n\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v1\n        with:\n          components: rustfmt\n      - name: Check licenses\n        run: |\n          cargo +nightly-2021-03-13 check --all --all-features --package rustfmt\n```", "answer": "```yaml name: license-check\non: pull_request\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Check License Header\n      uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff\n```", "prompt": "Generate a GitHub Workflow named `license-check` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `license`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2684180841943464}, {"id": "63c4962c6fc19abdf9c9a4e3", "level": "level1", "llm_response": "```yaml name: Continuous integration\n\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ruby-version: [ '2.6', '2.7', '3.0', '3.1' ]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Ruby ${{ matrix.ruby-version }}\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby-version }}\n      - name: Install dependencies\n        run: bundle install\n      - name: Test\n        run: bundle exec rake test\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: test\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Ruby ${{ matrix.ruby-version }}\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby-version }}\n      - name: Install dependencies\n        run: bundle install\n      - name: Deploy\n        run: bundle exec rake deploy\n```", "answer": "```yaml name: Continuous integration\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:14-alpine\n        ports: [\"5432:5432\"]\n        env:\n          POSTGRES_PASSWORD: postgres\n\n      redis:\n        image: redis:alpine\n        ports: [\"6379:6379\"]\n\n      opensearch:\n        image: opensearchproject/opensearch:latest\n        ports: [\"9200:9200\"]\n        env:\n          discovery.type: single-node\n          plugins.security.disabled: true\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          bundler-cache: true\n\n      - name: Lint with RuboCop\n        run: bundle exec rubocop --parallel\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3.5.1\n        with:\n          cache: yarn\n\n      - name: Install Node modules\n        run: bin/yarn install --frozen-lockfile\n\n      - name: Run ESLint\n        run: bin/yarn lint\n\n      - name: Run Tests\n        env:\n          DB_HOST: localhost\n          DB_USER: postgres\n          DB_PASSWORD: postgres\n          RAILS_ENV: test\n          SECRET_KEY_BASE: we-dont-need-a-secret-here\n          APP_ADMIN_EMAIL: admin@example.org\n          APP_ADMIN_PASSWORD: secret\n          APP_EMAIL: reply@example.org\n          APP_HOST: example.org\n          AWS_ACCESS_KEY_ID: my-access-key\n          AWS_SECRET_ACCESS_KEY: my-secret\n          AWS_BUCKET: my-bucket\n          AWS_REGION: eu-central-1\n          CI: true\n        run: |\n          bundle exec rake assets:precompile\n          bundle exec rake db:create db:schema:load\n          bundle exec rake spec\n\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build, push and deploy the LATEST image\n        if: github.ref == 'refs/heads/develop'\n        run: |\n          export COMMIT_TIME=$(git show -s --format=%cD ${GITHUB_SHA})\n          export COMMIT_SHA=${GITHUB_SHA}\n          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_SHA -t ghcr.io/ledermann/docker-rails/docker-rails:latest .\n          docker push ghcr.io/ledermann/docker-rails/docker-rails:latest\n          curl -X POST ${{ secrets.DEPLOY_HOOK_APP }}\n          curl -X POST ${{ secrets.DEPLOY_HOOK_WORKER }}\n\n      - name: Build and push the STABLE image\n        if: github.ref == 'refs/heads/master'\n        run: |\n          docker buildx build -t ghcr.io/ledermann/docker-rails/docker-rails:stable .\n          docker push ghcr.io/ledermann/docker-rails/docker-rails:stable\n```", "prompt": "Generate a GitHub Workflow named `Continuous integration` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has 2 jobs. The job id of the 1st job is `test`. The job id of the 2nd job is `deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"ruby-version\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 31, "column": 31, "kind": "expression", "snippet": "      - name: Set up Ruby ${{ matrix.ruby-version }}\n                              ^~~~~~~~~~~~~~~~~~~", "end_column": 49}, {"message": "property \"ruby-version\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 34, "column": 29, "kind": "expression", "snippet": "          ruby-version: ${{ matrix.ruby-version }}\n                            ^~~~~~~~~~~~~~~~~~~", "end_column": 47}]}, "bleu_score": 0.1007043553400744}, {"id": "63c4969e1899db58864d41ef", "level": "level1", "llm_response": "```yaml name: Auto message on pr merge\n\non:\n  pull_request_target:\n    types: [closed]\n\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: git-auto-reply/github-action@v2.0.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          message: |\n            This PR has been merged into master and the comment below was added to the PR. It is a suggestion to add the PR to the main branch.\n            Please comment on this PR to add the PR to the main branch. Thank you for your contribution.\n          add_author: false\n```", "answer": "```yaml name: Auto message on pr merge\n\non:\n\n  pull_request_target:\n\n    types: [closed]\n\njobs:\n\n  auto-response:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - uses: derekprior/add-autoresponse@master\n\n      env:\n\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      with:\n\n        respondableId: ${{ github.event.pull_request.node_id }}\n\n        response: \"Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).\"\n\n        author: ${{ github.event.pull_request.user.login }}\n\n        exemptedAuthors: \"Amit366\"\n```", "prompt": "Generate a GitHub Workflow named `Auto message on pr merge` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a pull request is closed. The workflow has one job. The job id of the 1st job is `auto-response`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.25530365216236983}, {"id": "63c495c88052faa2781b42d4", "level": "level1", "llm_response": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n    paths-ignore:\n      - '**/*.json'\n      - '**/*.md'\n      - '**/*.properties'\n      - '**/*.txt'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: java\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n    paths-ignore:\n      - '**/*.json'\n      - '**/*.md'\n      - '**/*.properties'\n      - '**/*.txt'\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        queries: security-and-quality,security-extended\n\n    # Autobuild failed (OOM)\n    # Hence, supply memory args for gradle build\n    - run: |\n        JAVA_OPTS=\"-Xmx1000M\" ./gradlew --no-scan compileJava\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `CodeQL` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. When all the path names of pull_request event match patterns in the paths-ignore filter(**/*.json, **/*.md, **/*.properties or **/*.txt), the workflow will not run. The workflow has one job. The 1st job is named `Analyze` and its job id is `analyze`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6684019893518274}, {"id": "63c495e48052faa2781b4f0b", "level": "level1", "llm_response": "```yaml name: Generate a changelog\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'generate from this release/commit (defaults to the latest release)'\n        required: false\n        default: ${{ github.event.inputs.from || github.event.release }}\n      to:\n        description: 'generate until this release/commit (defaults to latest development)'\n        required: false\n        default: 'HEAD'\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Set up QEMU\n        uses: docker://docker:27.0.1-ce/qemu-kvm\n      - name: Set up Docker Buildx\n        uses: docker://docker:27.0.1-ce/buildx-action\n      - name: Build and push Docker image\n        uses: docker://docker:27.0.1-ce/build-push-action\n        with:\n          context: .\n          file: docker/Dockerfile\n          push: true\n          tags: ${{ github.event.inputs.to }}\n          tags-ignore: ${{ github.event.inputs.from }}\n      - name: Generate changelog\n        uses: ./.github/actions/generate-changelog\n        with:\n          from: ${{ github.event.inputs.from }}\n          to: ${{ github.event.inputs.to }}\n          version: ${{ github.event.inputs.to }}\n          changelog: CHANGELOG.md\n```", "answer": "```yaml name: Generate a changelog\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'Generate from this release/commit (defaults to the latest release)'\n        required: false\n        # default is calculated dynamically\n      to:\n        description: 'Generate until this release/commit (defaults to latest development)'\n        required: false\n        default: 'HEAD'\n\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository_owner == 'Mudlet' }}\n\n    steps:\n    - name: Checkout Mudlet repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Install Lua 5.1.5\n      uses: leafo/gh-actions-lua@v9\n      with:\n        luaVersion: \"5.1.5\"\n\n    - name: Install Luarocks\n      uses: leafo/gh-actions-luarocks@v4\n\n    - name: Install Lua dependencies\n      run: |\n        luarocks install argparse\n        luarocks install lunajson\n\n    - name: Calculate from and to releases\n      run: |\n        if [[ -z \"${{ github.event.inputs.from }}\" ]] ; then\n            FROM_RELEASE=$(git tag --sort=committerdate | tail -1)\n        else\n            FROM_RELEASE=${{ github.event.inputs.from }}\n        fi\n\n        if [[ -z \"${{ github.event.inputs.to }}\" ]] ; then\n            TO_RELEASE=\"HEAD\"\n        else\n            TO_RELEASE=${{ github.event.inputs.to }}\n        fi\n\n        echo \"Generating a changelog from $FROM_RELEASE until $TO_RELEASE\"\n\n        echo \"FROM_RELEASE=$FROM_RELEASE\" >> $GITHUB_ENV\n        echo \"TO_RELEASE=$TO_RELEASE\" >> $GITHUB_ENV\n\n    - name: Generate changelog\n      run: |\n        changelog=$(lua CI/generate-changelog.lua -m release --start-commit $FROM_RELEASE --end-commit $TO_RELEASE)\n        echo \"$changelog\" >> changelog.html\n\n        echo \"[INFO] Changelog generated (from $FROM_RELEASE to $TO_RELEASE). If it's too big, Github won't show it, so it's available as an artifact as well at: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#artifacts\"\n        echo \"[INFO] Changelog is:\"\n        echo $changelog\n\n    - name: Upload changelog as html\n      uses: actions/upload-artifact@v3\n      with:\n        name: changelog.html\n        path: changelog.html\n```", "prompt": "Generate a GitHub Workflow named `Generate a changelog` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am. 2) someone manually triggers the workflow. This workflow receives 2 inputs: from-this input represents generate from this release/commit (defaults to the latest release) and it is optional; to-this input represents generate until this release/commit (defaults to latest development), it is optional and its default value is HEAD. The workflow has one job. The job id of the 1st job is `generate-changelog`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.20878220990648458}, {"id": "63c494347843b612699ffa9f", "level": "level1", "llm_response": "```yaml name: Release Charts\n\non:\n  push:\n    tags:\n      - chart-v*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Install chartsmith\n        run: |\n          go install ./cmd/chartsmith\n      - name: Chartsmith\n        run: |\n          ./cmd/chartsmith -version\n          ./cmd/chartsmith build -t chart-v* -o charts\n  publish:\n    name: Publish charts on GitHub Pages\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install dependencies\n        run: npm install\n      - name: Publish charts on GitHub Pages\n        run: |\n          cd charts\n          git config --global user.email \"github-actions@github.com\"\n          git config --global user.name \"GitHub Actions\"\n          npm run publish:gh-pages\n```", "answer": "```yaml name: Release Charts\n\non:\n  push:\n    tags:\n      - 'chart-v*'\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Helm\n        uses: azure/setup-helm@v1\n        with:\n          version: v3.6.3\n\n      - name: Check chart version\n        run: |\n          tag_version=${GITHUB_REF##*/chart-v}\n          chart_version=$(cat charts/moco/Chart.yaml | grep 'version:' | sed 's/version:\\s//')\n          if [ \"$tag_version\" != \"$chart_version\" ]; then\n            echo \"Different versions: tag \\\"$tag_version\\\", chart \\\"$chart_version\\\"\"\n            exit 1\n          fi\n      - name: Packaging the chart\n        run: helm package ./charts/moco/\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: helm-charts\n          path: ./moco-*.tgz\n          retention-days: 1\n\n  publish:\n    name: Publish charts on GitHub Pages\n    runs-on: ubuntu-20.04\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: gh-pages\n\n      - name: Set up Helm\n        uses: azure/setup-helm@v1\n        with:\n          version: v3.6.3\n\n      - uses: actions/download-artifact@v3\n        with:\n          name: helm-charts\n\n      - name: Update charts index\n        run: helm repo index --url https://cybozu-go.github.io/moco/ --merge index.yaml .\n\n      - run: git add .\n\n      - name: Check diffs\n        run: |\n          diffs=$(git status -s)\n          if [ \"$diffs\" = \"\" ]; then\n            echo \"NO_DIFF=1\" >> $GITHUB_ENV\n          else\n            printf \"%s\\n\" \"$diffs\"\n          fi\n      - name: Commit changes\n        if: env.NO_DIFF != '1'\n        run: |\n          git config --global user.name 'Cybozu Neco'\n          git config --global user.email 'cybozu-neco@users.noreply.github.com'\n          git commit -m 'update'\n      - name: Push to gh-pages\n        if: env.NO_DIFF != '1'\n        run: git push origin gh-pages\n```", "prompt": "Generate a GitHub Workflow named `Release Charts` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches chart-v*. The workflow has 2 jobs. The job id of the 1st job is `build`. The 2nd job is named `Publish charts on GitHub Pages` and its job id is `publish`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.11304530806538518}, {"id": "63c495ca8052faa2781b43be", "level": "level1", "llm_response": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - run: pip install setuptools wheel twine\n      - run: python setup.py sdist bdist_wheel\n      - run: twine check dist/*\n      - run: twine upload dist/*\n```", "answer": "```yaml name: Release\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n      - name: Bump version and push tag\n        id: tagging\n        uses: anothrNick/github-tag-action@1.52.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          INITIAL_VERSION: 1.0.0\n          DEFAULT_BUMP: none\n      -\n        name: \"Set up QEMU\"\n        if: steps.tagging.outputs.part\n        uses: docker/setup-qemu-action@v2\n      -\n        name: \"Set up Docker Buildx\"\n        if: steps.tagging.outputs.part\n        uses: docker/setup-buildx-action@v2\n      -\n        name: \"Login to DockerHub\"\n        if: steps.tagging.outputs.part\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      -\n        name: \"Login to Quay.io\"\n        if: steps.tagging.outputs.part\n        uses: docker/login-action@v2\n        with:\n          registry: quay.io\n          username: ${{ secrets.QUAY_BOT_USERNAME }}\n          password: ${{ secrets.QUAY_BOT_PASSWORD }}\n      -\n        name: \"Build and push\"\n        if: steps.tagging.outputs.part\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x\n          tags: |\n            docker.io/kiwigrid/k8s-sidecar:latest\n            docker.io/kiwigrid/k8s-sidecar:${{ steps.tagging.outputs.tag }}\n            quay.io/kiwigrid/k8s-sidecar:latest\n            quay.io/kiwigrid/k8s-sidecar:${{ steps.tagging.outputs.tag }}\n      - name: \"Build Changelog\"\n        if: steps.tagging.outputs.part\n        id: build_changelog\n        uses: mikepenz/release-changelog-builder-action@v3\n        with:\n          configuration: \".github/workflows/release-notes-config.json\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: \"Create Github Release\"\n        if: steps.tagging.outputs.part\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token\n        with:\n          tag_name: ${{ steps.tagging.outputs.tag }}\n          release_name: v${{ steps.tagging.outputs.tag }}\n          body: ${{ steps.build_changelog.outputs.changelog }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.013822720351555509}, {"id": "63c494007843b612699fe516", "level": "level1", "llm_response": "```yaml name: Test\n\non: push\n\npermissions:\n  contents: read\n\njobs:\n  make:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Build\n        run: make build\n      - name: Run tests\n        run: make test\n      - name: Run tests (with bazel)\n        run: make test_bazel\n  bazel:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Build\n        run: bazel build //...\n      - name: Run tests\n        run: bazel test //...\n      - name: Run tests (with bazel)\n        run: bazel test //...\n```", "answer": "```yaml name:\n  Test\n\non:\n  push\n\npermissions:\n  contents: read\n\njobs:\n  make:\n    runs-on: ubuntu-20.04\n    strategy:\n      matrix:\n        py: [\"3.7\"]\n        pylint: [\"==2.9.6\"]\n        go: [ \"1.18\", \"1.19\" ]\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.py }}\n    - name: Install pylint\n      run: pip install --user pylint${{ matrix.pylint }}\n    - name: pylint\n      run: |\n        pylint adapters/python/martian_shell.py\n        pylint adapters/python/martian.py\n        pylint test/martian_test.py\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n    - uses: actions/setup-node@v3\n      with:\n        node-version: \"lts/*\"\n        cache: \"npm\"\n        cache-dependency-path: |\n          web/martian/yarn.lock\n          tools/syntax/vscode/yarn.lock\n    - name: make all\n      run: make all tarball\n    - name: darwin build\n      run: GOOS=darwin go build ./cmd/...\n    - name: Integration tests\n      run: make longtests\n\n  bazel:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n      with:\n        python-version: \"3.x\"\n    - uses: actions/setup-go@v3\n      id: setup_go\n      with:\n        go-version: \">=1.19\"\n    - name: Show bazel variables\n      run: |\n        bazel info\n        echo \"bazel_repository_cache=$(bazel info repository_cache)\" >> $GITHUB_ENV\n        echo \"bazel_output_base=$(bazel info output_base)\" >> $GITHUB_ENV\n    - name: Cache bazel build of external repositories\n      uses: actions/cache@v3\n      with:\n        path: |\n          ${{ env.bazel_output_base }}/external\n        key: bazel-build-cache-${{steps.setup_go.outputs.go-version}}-${{hashFiles('deps.bzl', 'WORKSPACE')}}\n        restore-keys: |\n          bazel-build-cache-${{steps.setup_go.outputs.go-version}}\n          bazel-build-cache-\n    - name: Cache bazel external repositories\n      uses: actions/cache@v3\n      with:\n        path: |\n          ${{ env.bazel_repository_cache }}\n        key: bazel-repo-cache-${{hashFiles('deps.bzl', 'WORKSPACE', 'web/martian/yarn.lock')}}\n        restore-keys: |\n          bazel-repo-cache-\n    - name: test\n      run: |\n        bazel test --nobuild_tests_only \\\n                   --verbose_failures \\\n                   --discard_analysis_cache \\\n                   --notrack_incremental_state \\\n                   --nokeep_state_after_build \\\n                   //...\n    - name: Show build timing summary\n      run: bazel analyze-profile ${{ env.bazel_output_base }}/command.profile.gz\n```", "prompt": "Generate a GitHub Workflow named `Test` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The job id of the 1st job is `make`. The job id of the 2nd job is `bazel`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.08336109376971192}, {"id": "63c4967e33b087f6bde2c5c4", "level": "level1", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install dependencies\n        run: yarn\n\n      - name: Build\n        run: yarn build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          cname: alpine\n```", "answer": "```yaml name: Build and Deploy\non:\n  push:\n    branches:\n    - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n        \n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist #  The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build-and-deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1852601791020147}, {"id": "63c496926fc19abdf9c9cd93", "level": "level1", "llm_response": "```yaml name: Contributor License Agreement (CLA)\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - synchronize\n  issue_comment:\n    types:\n      - created\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.0\n      - name: Run CLA check\n        run: |\n          git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"GitHub Actions\"\n          git pull --unshallow\n          git fetch --prune --prune-submodules\n          git checkout $GITHUB_SHA\n          git merge origin/main\n          git commit -am \"CLA check\"\n          git push\n      - name: Report CLA\n        if: failure()\n        uses: dawidd6/github-action-report-contributor-license-agreement@v2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Contributor License Agreement (CLA)\n\non:\n  pull_request_target:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          cla-token: ${{ secrets.CLA_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Contributor License Agreement (CLA)` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) a pull request is created or a pull request's head branch is updated. 2) a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `cla`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.15089276314473915}, {"id": "63c496836fc19abdf9c9c720", "level": "level1", "llm_response": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `TagBot`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496741e3364807577abc2", "level": "level1", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495f37843b61269a0b108", "level": "level1", "llm_response": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types: [closed]\n    branches: [main]\n\npermissions:\n  pull-requests: read\n\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Approve PR\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            await github.rest.pulls.approve({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              pull_number: context.payload.pull_request.number,\n              approving_user: context.payload.sender.login,\n            })\n```", "answer": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types:\n      - closed\n    branches:\n      - main\npermissions:\n  pull-requests: read\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: ${{ github.event.pull_request.merged }}\n        env:\n          AUTH_HEADER: 'Authorization: token ${{ secrets.GITHUB_TOKEN }}'\n          JSON_HEADER: 'Content-Type: application/json'\n          REVIEWS_URL: 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews'\n        run: |\n          curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n            | jq -e '. | map({user: .user.login, state: .state})\n                       | reduce .[] as $x ({}; .[$x.user] = $x.state)\n                       | to_entries | map(.value)\n                       | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n      - name: Slack Notification\n        if: ${{ failure() }}\n        run: |\n          jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n```", "prompt": "Generate a GitHub Workflow named `PR Approval Bypass Notifier` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `approval`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.05929421956943836}, {"id": "63c4959f7843b61269a08d83", "level": "level1", "llm_response": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: CompatHelper\n        uses: JuliaRegistries/CompatHelper@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPILE_TESTS: true\n```", "answer": "```yaml name: CompatHelper\n\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.2.0]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "prompt": "Generate a GitHub Workflow named `CompatHelper` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `CompatHelper`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2639033019282898}, {"id": "63c494298052faa2781a98fa", "level": "level1", "llm_response": "```yaml name: Check test times\n\non: [push, pull_request]\n\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n          fetch-depth: 0\n\n      - name: Check if tests are run\n        run: |\n          git log --oneline --format=\"%s\" --no-merges HEAD^..HEAD | grep -q \"tests/.*test_main.cpp\"\n\n      - name: Check if test times are correct\n        run: |\n          git log --oneline --format=\"%s\" --no-merges HEAD^..HEAD | grep -E -vE '^\\s*tests/.*test_main\\.cpp|^\\s*tests/.*test_main\\.cpp$|^\\s*tests/.*test_main\\.cpp:.*\\d+ ms|^\\s*tests/.*test_main\\.cpp:.*\\d+ ms$'\n```", "answer": "```yaml name: Check test times\non: [push, pull_request]\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Cache\n      uses: hendrikmuhs/ccache-action@v1.2\n      with:\n        key: linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}\n        restore-keys: |\n          linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-\n          linux-ci-build-times-${{ github.ref }}-\n          linux-ci-build-times-refs/heads/master-\n          linux-ci-build-times-\n    - name: Setup\n      run: |\n        sudo apt update\n        sudo apt install -y libboost-dev autoconf automake libtool ccache\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n    - name: Save test times\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-reports\n        path: ./all.xml\n    - name: Check test times\n      run: |\n        python ./tools/check_test_times.py\n```", "prompt": "Generate a GitHub Workflow named `Check test times` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check-test-times`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.12857536708467907}, {"id": "63c496981899db58864d3f6f", "level": "level1", "llm_response": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\n  pull_request:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    # Runs every 30 minutes, at 30 minutes past the hour.\n    - cron: '30 0 */3 * *'\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.pull_request.user.login == 'github-actions[bot]' }}\n    steps:\n      - name: 'rerun workflow'\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          ref: ${{ github.event.workflow_run.head_sha }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows:\n      - CI\n    types:\n      - completed\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    - cron: '30 */3 * * *' # every 3 hours (30 minutes past the hour)\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    if: >\n      startsWith(github.repository, 'Homebrew/') &&\n      (\n        github.event.label.name == 'ci-requeue' ||\n        github.event.label.name == 'ci-retry' ||\n        github.event.label.name == 'ci-skip-appcast' ||\n        github.event.label.name == 'ci-skip-install' ||\n        github.event.label.name == 'ci-syntax-only' ||\n        !github.event.label.name\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          once-label: ci-requeue\n          continuous-label: ci-retry\n          trigger-labels: ci-skip-appcast,ci-skip-install,ci-syntax-only\n          workflow: ci.yml\n```", "prompt": "Generate a GitHub Workflow named `Re-run Workflow` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) the workflow named CI is completed. 2) a pull request is closed, a label is added to a pull request or a label is removed from a pull request. 3) the scheduled time has come: at 30 minutes past the hour, every 3 hours. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `rerun-workflow`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22951439190729392}, {"id": "63c493bc7843b612699fd432", "level": "level1", "llm_response": "```yaml name: CI\n\non: [pull_request, push]\n\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: npm\n      - run: npm ci\n      - run: npm run lint\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: npm\n      - run: npm ci\n      - run: npm run build\n```", "answer": "```yaml env: {}\n\n# FILE GENERATED WITH: npx ghat fregante/ghatemplates/node\n# SOURCE: https://github.com/fregante/ghatemplates\n# OPTIONS: {\"exclude\":[\"jobs.Test\"]}\n\nname: CI\non:\n  - pull_request\n  - push\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci || npm install\n      - name: XO\n        run: npx xo\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci || npm install\n      - name: build\n        run: npm run build\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) a commit or tag is pushed, or a repository is cloned. The workflow has 2 jobs. The job id of the 1st job is `Lint`. The job id of the 2nd job is `Build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.43964059938803085}, {"id": "63c493f47843b612699fe037", "level": "level1", "llm_response": "```yaml name: Update list of images\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * *'\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update list of images\n        uses: w3c/gh-actions/update-image-list@master\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          image-name: 'docker.io/w3c/w3c-docker-images'\n          image-registry: 'docker.io'\n```", "answer": "```yaml name: Update list of images\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 10 * * *\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        include:\n          - { branch: master, channel: latest/edge }\n          - { branch: 1.24, channel: 1.24 }\n          - { branch: 1.23, channel: 1.23 }\n          - { branch: 1.22, channel: 1.22 }\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3.1.0\n        with:\n          ref: ${{ matrix.branch }}\n      - name: Update image list\n        run: |\n          ./build-scripts/update-images.sh ${{ matrix.channel }} build-scripts/images.txt\n      - name: Create pull request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: update list of images used by ${{ matrix.channel }}\n          title: \"[${{ matrix.channel }}] Update MicroK8s images\"\n          body: update list of images used by ${{ matrix.channel }}\n          reviewers: neoaggelos,ktsakalozos\n          branch: auto-update-images/${{ matrix.branch }}\n          delete-branch: true\n          base: ${{ matrix.branch }}\n```", "prompt": "Generate a GitHub Workflow named `Update list of images` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 10:00 am. The workflow has one job. The job id of the 1st job is `update`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.05831281475790049}, {"id": "63c494368052faa2781a9e20", "level": "level1", "llm_response": "```yaml name: build\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  pull_request:\n\npermissions:\n  contents: write\n  id-token: write\n  packages: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n\n      - name: Build\n        run: make build\n\n      - name: Test\n        run: make test\n```", "answer": "```yaml name: build\n\non:\n  push:\n    branches:\n      - 'main'\n    tags:\n      - 'v*'\n  pull_request:\n\npermissions:\n   contents: write\n   id-token: write\n   packages: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      -\n        name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n      -\n        name: Cache Go modules\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      -\n        name: CI\n        run: |\n          go mod tidy\n          go test -v ./...\n          go build -o tt .\n      - uses: sigstore/cosign-installer@v2.8.1\n      -\n        name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        if: success() && startsWith(github.ref, 'refs/tags/')\n        with:\n          distribution: goreleaser-pro\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_PAT }}\n          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}\n          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n          COSIGN_PWD: ${{ secrets.COSIGN_PWD }}\n          AUR_KEY: ${{ secrets.AUR_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a tag whose name matches v*. 2) there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope, write access is granted to the GITHUB_TOKEN in the `id-token` scope and write access is granted to the GITHUB_TOKEN in the `packages` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.09334497164095243}, {"id": "63c493b77843b612699fd355", "level": "level1", "llm_response": "```yaml name: docs\n\non:\n  push:\n    branches:\n      - develop\n      - release\n    paths:\n      - 'docs/**'\n      - 'mkdocs.yml'\n      - '.github/workflows/docs.yml'\n  pull_request:\n\nconcurrency:\n  group: docs\n  cancel-in-progress: true\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install mkdocs-material\n      - name: Build site\n        run: mkdocs build\n      - name: Deploy to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH: gh-pages\n          FOLDER: site\n```", "answer": "```yaml name: docs\n\nconcurrency: docs\n\non:\n  push:\n    branches: [ develop, release ]\n    paths:\n      - docs/**\n      - mkdocs.yml\n      - .github/workflows/docs.yml\n  pull_request:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Track Docs Branch\n      run: git branch docs -t origin/docs\n    - uses: actions/setup-python@v4\n      with:\n        python-version: 3.x\n    - uses: actions/cache@v3\n      with:\n        key: ${{ github.ref }}\n        path: .cache\n    - uses: pnpm/action-setup@v2.2.2\n      with:\n        version: 7\n    - name: Lint Docs\n      run: |\n        pnpm i\n        pnpm lint\n    - name: Update pip\n      run: python -m pip install -U pip setuptools\n    - name: Set Git author\n      run: |\n        git config user.name \"github-actions[bot]\"\n        git config user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n    - name: Install native dependencies\n      run: sudo apt-get install libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev\n    - name: Install wheel\n      run: pip install wheel\n    - name: Install Material for MkDocs Insiders\n      run: pip install git+https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git\n      if: ${{ github.repository_owner == 'mastercomfig' && github.event_name != 'pull_request' }}\n      env:\n        GH_TOKEN: ${{secrets.PRIVATE_REPO_TOKEN}}\n    - name: Install dependencies\n      run: pip install -r docs/requirements.txt\n    - name: Update from Remote\n      run: git fetch --tags -f\n    - name: Build docs (latest)\n      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/release' }}\n      run: mike deploy --alias-type copy -b docs -up $(git describe --tags --abbrev=0) latest page\n      env:\n        GH_TOKEN: ${{secrets.PRIVATE_REPO_TOKEN}}\n    - name: Build docs (develop)\n      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}\n      run: mike deploy --alias-type copy -b docs -p dev\n      env:\n        GH_TOKEN: ${{secrets.PRIVATE_REPO_TOKEN}}\n    - name: Build docs\n      if: ${{ github.event_name == 'pull_request' }}\n      run: mike deploy --config-file mkdocs.base.yml -u $(git describe --tags) latest\n```", "prompt": "Generate a GitHub Workflow named `docs` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named develop or a branch named release. Only if at least one path of push event matches a pattern in the paths filter(docs/**, mkdocs.yml or .github/workflows/docs.yml), the workflow runs. 2) there is activity relating to a pull request. Only a single workflow using the docs concurrency group will run at a time. The workflow has one job. The job id of the 1st job is `deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.028863543423662947}, {"id": "63c495a68052faa2781b342a", "level": "level1", "llm_response": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches:\n      - master\n      - 1.x\n      - release\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 11\n      - name: Set up Maven\n        uses: actions/setup-maven@v3\n      - name: Build\n        run: mvn -B -Dmaven.test.skip clean install\n      - name: Release\n        run: mvn -B -Dmaven.test.skip release:prepare release:perform --no-transfer-progress\n```", "answer": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches: [master, 1.x, release]\n\njobs:\n  release:\n    if: github.repository == 'jdbc-observations/datasource-proxy'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: 8\n          distribution: temurin\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}\n          gpg-passphrase: MAVEN_GPG_PASSPHRASE\n      - name: Publish package\n        run: ./mvnw --batch-mode deploy -DskipTests=true -Pgithub-ossrh\n        env:\n          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n\n```", "prompt": "Generate a GitHub Workflow named `Release to Maven Central (Deploy Snapshot or Stage Release)` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master, a branch named 1.x or a branch named release. The workflow has one job. The job id of the 1st job is `release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.31557976516247327}, {"id": "63c495167843b61269a0553c", "level": "level1", "llm_response": "```yaml name: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jessrussell/add-to-project@v2\n        with:\n          project: DEPR\n          projectKey: DEPR\n          repoToken: ${{ secrets.GITHUB_TOKEN }}\n          issueNumber: ${{ github.event.issue.number }}\n```", "answer": "```yaml # Run the workflow that adds new tickets that are either:\n# - labelled \"DEPR\"\n# - title starts with \"[DEPR]\"\n# - body starts with \"Proposal Date\" (this is the first template field)\n# to the org-wide DEPR project board\n\nname: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Add newly created DEPR issues to the DEPR project board` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `routeissue`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4398984000722084}, {"id": "63c495e88052faa2781b50cc", "level": "level1", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496876fc19abdf9c9c8bb", "level": "level1", "llm_response": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: main\n          fetch-depth: 0\n\n      - name: Install Dependencies\n        run: pip install -r requirements.txt\n\n      - name: Build\n        run: |\n          pip install --no-cache-dir -r requirements.txt\n          make build\n\n      - name: Push\n        uses: ad-m/github-push-action@v0.11.1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: main\n          push: true\n          force_push: true\n          tags: |\n            v*  # Increment the version number\n            *\n\n```", "answer": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n      - name: Install Dependencies\n        run: yarn\n      - name: Checkout Data Source Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n        with:\n          repository: smartcontractkit/reference-data-directory\n          path: data-source\n          token: ${{ secrets.GH_API_KEY }}\n      # - name: Read Data Source\n      #   run: cat data-source/package.json\n      - name: Process Data\n        run: yarn process\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91\n        with:\n\n          args: -c firebase-addresses.json deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n          PROJECT_ID: cl-docs-addresses\n```", "prompt": "Generate a GitHub Workflow named `Build and Publish Feed Resources` for a GitHub repository whose primary programming language is Solidity. This workflow will be triggered by an event: the scheduled time has come: every 30 minutes. The workflow has one job. The 1st job is named `Update latest feed data from source repo` and its job id is `build-feeds`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4276452604084472}, {"id": "63c494298052faa2781a98f7", "level": "level1", "llm_response": "```yaml name: Microsoft C++ Code Analysis\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\nenv:\n  build: ${{ github.workspace }}/build\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup .NET Core 3.1\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '3.1.x'\n      - name: Setup MSBuild\n        uses: ms-dotnettools/msbuild@v1.0.2\n      - name: Setup CMake\n        uses: ms-dotnettools/cmake@v1.0.1\n      - name: Build\n        run: |\n          cd ${{ env.build }}\n          cmake -G Ninja -B ${{ env.build }} -DCMAKE_BUILD_TYPE=Debug ..\n          ninja -C ${{ env.build }}\n      - name: Run Code Analysis\n        run: |\n          cd ${{ env.build }}\n          dotnet build /p:UseWpf=Release /p:UseWpfDebug=Release /p:RunTests=true\n          dotnet build /p:UseWpf=Release /p:UseWpfDebug=Release /p:RunTests=false\n```", "answer": "```yaml name: Microsoft C++ Code Analysis\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\nenv:\n  # Path to the CMake build directory.\n  build: '${{ github.workspace }}/build'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: windows-2022\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup\n        run: |\n          $Url = \"https://boostorg.jfrog.io/artifactory/main/release/1.75.0/binaries/boost_1_75_0-msvc-14.2-64.exe\"\n          (New-Object System.Net.WebClient).DownloadFile($Url, \"$env:TEMP\\boost.exe\")\n          Start-Process -Wait -FilePath \"$env:TEMP\\boost.exe\" \"/SILENT\",\"/SP-\",\"/SUPPRESSMSGBOXES\",\"/DIR=C:\\local\\boost-1.75.0\"\n\n      - name: Configure CMake\n        env:\n          BOOST_ROOT: C:\\local\\boost-1.75.0\n        run: cmake -B ${{ env.build }} -DQL_USE_STD_CLASSES=ON\n\n      - name: Initialize MSVC Code Analysis\n        uses: microsoft/msvc-code-analysis-action@v0.1.1\n        # Provide a unique ID to access the sarif output path\n        id: run-analysis\n        env:\n          CAExcludePath: C:\\local\\boost-1.75.0\n        with:\n          cmakeBuildDirectory: ${{ env.build }}\n          buildConfiguration: Release\n          ruleset: '${{ github.workspace }}/.msvc-analysis.ruleset'\n\n      - name: Upload SARIF to GitHub\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{ steps.run-analysis.outputs.sarif }}\n\n      - name: Upload SARIF as an Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: sarif-file\n          path: ${{ steps.run-analysis.outputs.sarif }}\n\n```", "prompt": "Generate a GitHub Workflow named `Microsoft C++ Code Analysis` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow sets an environment variable to use: `build` is set to `${{ github.workspace }}/build`. The workflow has one job. The 1st job is named `Analyze` and its job id is `analyze`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2920186807093931}, {"id": "63c494a48052faa2781ac54a", "level": "level1", "llm_response": "```yaml name: cspell-action\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Run cspell\n        run: npm run cspell\n```", "answer": "```yaml name: cspell-action\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: streetsidesoftware/cspell-action@v2\n```", "prompt": "Generate a GitHub Workflow named `cspell-action` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `cspell`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.43918253374599386}, {"id": "63c495197843b61269a056bc", "level": "level1", "llm_response": "```yaml name: 'Code Scanning - Action'\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  pull_request:\n    branches: [dev, master]\n    types: [opened, synchronize]\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      # - name: Autobuild\n      #   uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `Code Scanning - Action` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created or a pull request's head branch is updated. The workflow would run whenever there is a pull_request event targeting: a branch named dev or a branch named master. The workflow has one job. The job id of the 1st job is `CodeQL-Build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5159263798608696}, {"id": "63c495547843b61269a06e8e", "level": "level1", "llm_response": "```yaml name: Build and Release [Manual]\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Build\n        run: yarn build\n\n      - name: Release\n        uses: ./.github/actions/release\n        with:\n          version: '0.1.0'\n          tag: 'v0.1.0'\n          create-release: true\n```", "answer": "```yaml name: Build and Release [Manual]\n\non: [workflow_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    if: github.actor == 'ayuhito'\n\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: \"0\"\n\n      - name: Enable PNPM\n        uses: pnpm/action-setup@v2\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"pnpm\"\n\n      - name: Install\n        run: pnpm install --frozen-lockfile\n\n      - name: Install\n        run: pnpm i\n\n      - name: Fetch API # Calls Google Font Metadata to fetch the latest data from Google's Developer API\n        run: pnpm --filter scripts exec gfm generate $GOOGLE_API_KEY\n        env:\n          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}\n\n      - name: Parse API # Process generated API data\n        run: pnpm --filter scripts exec gfm parse\n\n      - name: Build fonts # Build all updated Google Fonts in repository\n        run: pnpm run build:google\n\n      - name: Generate fontlist # Generate FONTLIST.json and FONTLIST.md\n        run: pnpm run util:fontlist\n\n      - name: Generate Algolia index # Generate Algolia search index for website\n        run: pnpm run util:algolia\n        env:\n          ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}\n\n      - name: Lint files\n        run: pnpm run lint\n\n      - name: Format files\n        run: pnpm run format\n\n      - name: Stage, commit and push files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_user_name: \"fontsource-bot\"\n          commit_user_email: \"83556432+fontsource-bot@users.noreply.github.com\"\n          commit_author: \"fontsource-bot <83556432+fontsource-bot@users.noreply.github.com>\"\n          commit_message: \"chore(build): update packages [Manual]\"\n        continue-on-error: true\n\n      - name: Check font files # Detects if all binaries are downloaded successfully and in the right place\n        run: pnpm run util:run-check\n\n      - name: If error, commit again before publishing\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_user_name: \"fontsource-bot\"\n          commit_user_email: \"83556432+fontsource-bot@users.noreply.github.com\"\n          commit_author: \"fontsource-bot <83556432+fontsource-bot@users.noreply.github.com>\"\n          commit_message: \"chore(build): resolve file check errors [Manual]\"\n        continue-on-error: true\n\n      - name: Configure CI Git\n        run: |\n          git config --global user.email \"83556432+fontsource-bot@users.noreply.github.com\"\n          git config --global user.name \"fontsource-bot\"\n\n      - name: Publish package # Call mass-publish\n        run: pnpm run deploy:ci\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Build and Release [Manual]` for a GitHub repository whose primary programming language is CSS. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.004347932811783344}, {"id": "63c494ee8052faa2781ae44b", "level": "level1", "llm_response": "```yaml name: Add PR Deploy Badge\n\non:\n  # See https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#deployment-status\n  # Only deploy to the \"master\" branch\n  # and only if the status was created by a deployment of a release\n  # using the release action\n  # (https://github.com/actions/stale)\n  release:\n    types: [created]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add PR Deploy Badge\n        uses: bestoftimes/action-deploy-badge@v1\n        with:\n          # The repo where the badge should be added\n          repo: \"org/repo\"\n          # The branch where the badge should be added\n          branch: \"gh-pages\"\n          # The token to use to get the GitHub App ID\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          # The token to use to add the badge to the PR\n          pr-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          # The label that will be added to the PR\n          label: \"Deploy\"\n```", "answer": "```yaml name: Add PR Deploy Badge\n# https://docs.github.com/en/actions/reference/events-that-trigger-workflows\non: [deployment_status]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    # only runs this job on successful deploy\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - name: Kb Pull Request Deployment Badges\n      uses: kibibit/kb-badger-action@v2\n      with:\n        github-token: ${{secrets.GITHUB_TOKEN}}\n        badge-left: demo\n        badge-right: application\n        badge-logo: heroku\n        badge-path: api\n        badge2-left: demo\n        badge2-right: api-docs\n        badge2-color: 85EA2D\n        badge2-logo: swagger\n        badge2-path: api/docs\n```", "prompt": "Generate a GitHub Workflow named `Add PR Deploy Badge` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a new deployment status is created. The workflow has one job. The job id of the 1st job is `badge`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.16670723276177513}, {"id": "63c4968b33b087f6bde2caaa", "level": "level1", "llm_response": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n      - name: Build\n        run: dotnet build --configuration Release --no-restore\n      - name: Test\n        run: dotnet test --no-build --configuration Release\n      - name: Publish\n        uses: actions/upload-artifact@v3\n        with:\n          name: dotnet\n          path: ./bin/Release/net6.0/*/*\n```", "answer": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: windows-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.0.2\n        with:\n          submodules: recursive\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v2.1.0\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n      - name: Verify .NET Core\n        run: dotnet --info\n\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore ASFEnhance -p:ContinuousIntegrationBuild=true --nologo\n\n      - name: Publish ASFEnhance on Windows\n        shell: pwsh\n        run: |\n          $script = \"./build.ps1\";\n          Set-Location ${{ github.workspace }};\n          powershell $script;\n\n      - name: Upload ASFEnhance-zh-Hans\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-zh-Hans\n          path: dist/ASFEnhance-zh-Hans.zip\n\n      - name: Upload ASFEnhance-en-US\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-en-US\n          path: dist/ASFEnhance-en-US.zip\n```", "prompt": "Generate a GitHub Workflow named `AutoBuild-Dev` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) a commit or tag is pushed, or a repository is cloned. The workflow sets an environment variable to use: `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `publish`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17307098527896486}, {"id": "63c494b78052faa2781acd9d", "level": "level1", "llm_response": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    workflows: [\"Continuous Integration\"]\n    types:\n      - completed\n\njobs:\n  merge-me:\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/merge-request-automation-script@v2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.event.workflow_run.head_branch }}\n          comment: |\n            Thank you for contributing to the project! \ud83c\udf89\n\n            If you have any questions, issues or pull requests, feel free to ask!\n\n            You can find more details in the [project README](https://github.com/sonatype/oss-fuzz/blob/master/README.md) or in the [issue template](https://github.com/sonatype/oss-fuzz/blob/master/.github/ISSUE_TEMPLATE.md).\n\n            Also, if you are using Sonatype OSS, you can find more information about our [license terms](https://oss.sonatype.org/terms.html).\n```", "answer": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Continuous Integration'\n\njobs:\n  merge-me:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n    timeout-minutes: 5\n```", "prompt": "Generate a GitHub Workflow named `Merge me!` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: the workflow named Continuous Integration is completed. The workflow has one job. The 1st job is named `Merge me!` and its job id is `merge-me`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.13810933242505016}, {"id": "63c494a37843b61269a027ed", "level": "level1", "llm_response": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run tests\n        run: go test -v -race -coverprofile=coverage.out -covermode=atomic -coverpkg=./...\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\n\nname: CI\n\njobs:\n  test:\n    ## We want to define a strategy for our job\n    strategy:\n      ## this will contain a matrix of all the combinations\n      ## we wish to test again:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n\n    ## Defines the platform for each test run\n    runs-on: ${{ matrix.platform }}\n\n    ## the steps that will be run through for each version and platform\n    ## combination\n    steps:\n    ## sets up go based on the version\n    - name: Install Go\n      uses: actions/setup-go@v3.3.0\n      with:\n        go-version: ${{ matrix.go-version }}\n\n    ## checks out our code locally, so we can work with the files\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n\n    ## runs go test ./...\n    - name: Build\n      run: go build ./...\n\n    ## runs go test ./...\n    - name: Test\n      run: go test ./...\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.15277083926693047}, {"id": "63c493b87843b612699fd399", "level": "level1", "llm_response": "```yaml name: release-please\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: run release-please\n        run: npm run release-please\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\nname: release-please\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: node\n          package-name: release-please-action\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34332704063408953}, {"id": "63c4941e7843b612699ff1f7", "level": "level1", "llm_response": "```yaml name: Demo link\non:\n  pull_request_target:\n    types: [opened]\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add demo link to PR description\n        uses: jessfraz/demo-link-action@v1\n        with:\n          link: https://github.com/PrismJS/prism/blob/master/examples/javascript.md\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    permissions:\n      pull-requests: write\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const pullRequestId = context.payload.pull_request.number\n            const pullRequestBranch = context.payload.pull_request.head.ref\n\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: pullRequestId,\n              body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n            });\n```", "prompt": "Generate a GitHub Workflow named `Demo link` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a pull request is created. The workflow has one job. The 1st job is named `Add demo link to PR description` and its job id is `add_demo_link`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.33496804885862386}, {"id": "63c494608052faa2781aabf4", "level": "level1", "llm_response": "```yaml name: go.mod check\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Go mod check\n        uses: golang-modules/go-mod-check-action@v1\n        with:\n          go-version: 1.19.1\n```", "answer": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version: 1.17\n\n      - name: Check go.mod files\n        shell: bash\n        run: |\n          cd gomod-sync\n          go run main.go check\n```", "prompt": "Generate a GitHub Workflow named `go.mod check` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) there is activity relating to a pull request. The workflow has one job. The 1st job is named `go.mod check` and its job id is `check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47343460587465086}, {"id": "63c493c37843b612699fd587", "level": "level1", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        with:\n          tag_name: vNext\n          release_name: vNext\n          draft: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is TSQL. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) a pull request is created, a previously closed pull request is reopened or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `update_release_draft`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47877944575018555}, {"id": "63c495238052faa2781afbf5", "level": "level1", "llm_response": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Thanks for creating a new issue, we will review it as soon as possible!'\n        pr-message: 'Thanks for contributing to OpenCV! We will review the pull request as soon as possible.'\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs'\n        pr-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs'\n```", "prompt": "Generate a GitHub Workflow named `Greetings` for a GitHub repository whose primary programming language is Objective-C. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) activity related to an issue occurs. The workflow has one job. The job id of the 1st job is `greeting`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22482730436254583}, {"id": "63c496956fc19abdf9c9ce1c", "level": "level1", "llm_response": "```yaml name: Licensed\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    name: Check licenses\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: License check\n        uses: ./.github/actions/check-licenses\n        with:\n          license_files: 'LICENSE.md,README.md'\n```", "answer": "```yaml name: Licensed\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    name: Check licenses\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: npm\n      - run: npm ci\n      - name: Install licensed\n        run: |\n          cd $RUNNER_TEMP\n          curl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\n          sudo tar -xzf licensed.tar.gz\n          sudo mv licensed /usr/local/bin/licensed\n      - run: licensed status\n```", "prompt": "Generate a GitHub Workflow named `Licensed` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Check licenses` and its job id is `test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.21578087053166398}, {"id": "63c494937843b61269a02136", "level": "level1", "llm_response": "```yaml name: e2e melange bootstrap + build\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: bootstrap package\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: bootstrap package\n      run: |\n        cd packages/melange\n        go build -o melange\n        cd ..\n        go build -o melange\n```", "answer": "```yaml name: e2e melange bootstrap + build\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n    name: bootstrap package\n    runs-on: ubuntu-latest\n    container:\n      image: alpine:latest\n      options: |\n        --cap-add NET_ADMIN --cap-add SYS_ADMIN --security-opt seccomp=unconfined --security-opt apparmor:unconfined\n\n    steps:\n    - name: Fetch dependencies\n      run: |\n        cat >/etc/apk/repositories <<_EOF_\n        https://dl-cdn.alpinelinux.org/alpine/edge/main\n        https://dl-cdn.alpinelinux.org/alpine/edge/community\n        https://dl-cdn.alpinelinux.org/alpine/edge/testing\n        _EOF_\n\n        apk upgrade -Ua\n        apk add go cosign build-base git bubblewrap\n    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n    - name: Mark workspace as a safe repository\n      run: git config --global --add safe.directory ${GITHUB_WORKSPACE}\n    - name: Build bootstrap melange tool (stage1)\n      run: make melange\n    - name: Generate a package signing keypair\n      run: |\n        ./melange keygen\n        mv melange.rsa.pub /etc/apk/keys\n    - name: Prepare build workspace for stage2\n      run: |\n        git clone . workspace-stage2/x86_64\n    - name: Build stage2 melange package with bootstrap melange\n      run: ./melange build --pipeline-dir=pipelines/ --signing-key=melange.rsa --arch x86_64 --workspace-dir workspace-stage2/\n    - name: Install stage2 melange package\n      run: apk add ./packages/x86_64/melange-*.apk\n    - name: Move stage2 artifacts to stage2 directory\n      run: |\n        mv packages stage2\n    - name: Verify operation of stage2 melange\n      run: melange version\n    - name: Prepare build workspace for stage3\n      run: |\n        git clone . workspace-stage3/x86_64\n    - name: Build stage3 melange package with stage2 melange\n      run: melange build --signing-key=melange.rsa --arch x86_64 --workspace-dir workspace-stage3/\n    - name: Install stage3 melange package\n      run: apk add ./packages/x86_64/melange-*.apk\n    - name: Move stage3 artifacts to stage3 directory\n      run: |\n        mv packages stage3\n    - name: Ensure melange package is reproducible\n      run: |\n        sha256sum stage2/x86_64/*.apk | sed -e 's:stage2/:stage3/:g' | sha256sum -c\n    - name: Verify operation of stage3 melange\n      run: melange version\n```", "prompt": "Generate a GitHub Workflow named `e2e melange bootstrap + build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The 1st job is named `bootstrap package` and its job id is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.0018813397564472513}, {"id": "63c4951f7843b61269a0593c", "level": "level1", "llm_response": "```yaml name: docker-push\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Build\n        run: make docker-build\n      - name: Push\n        run: make docker-push\n```", "answer": "```yaml name: docker-push\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          images: fsouza/fake-gcs-server\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: setup buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2.1.0\n\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```", "prompt": "Generate a GitHub Workflow named `docker-push` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The job id of the 1st job is `build-and-push`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.0934479419008846}, {"id": "63c495407843b61269a06679", "level": "level1", "llm_response": "```yaml name: Tests\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Build\n        run: |\n          python setup.py build\n      - name: Test\n        run: |\n          python -m pytest\n```", "answer": "```yaml name: Tests\n\non:\n- pull_request\n- workflow_dispatch\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11-dev']\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install Linux packages for Qt 5 support\n      run: |\n        sudo apt-get update\n        sudo apt-get install qt5-default\n        sudo apt-get install libxkbcommon-x11-0\n        sudo apt-get install libxcb-icccm4\n        sudo apt-get install libxcb-image0\n        sudo apt-get install libxcb-keysyms1\n        sudo apt-get install libxcb-randr0\n        sudo apt-get install libxcb-render-util0\n        sudo apt-get install libxcb-xinerama0\n      if: matrix.os == 'ubuntu-latest'\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies and local packages\n      run: |\n        python -m pip install .[test]\n    - name: Create clean test directory\n      run: |\n        mkdir testdir\n    - name: Test Traits package\n      uses: GabrielBB/xvfb-action@v1\n      with:\n        working-directory: testdir\n        run: python -m unittest discover -v traits\n```", "prompt": "Generate a GitHub Workflow named `Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `tests`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.048883853124929176}, {"id": "63c495448052faa2781b0abc", "level": "level1", "llm_response": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n      - 'release'\n  pull_request:\n    branches-ignore:\n      - 'release'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install Dependencies\n        run: npm ci\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n    - release\n  pull_request:\n    branches-ignore:\n    - release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n    - uses: actions/checkout@master\n    - name: Launch MongoDB\n      uses: wbari/start-mongoDB@master\n      with:\n        mongoDBVersion: 5\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@master\n      with:\n        node-version: ${{ matrix.node-version }}\n    - name: yarn install, build, and test\n      run: |\n        yarn install\n        yarn run build\n        yarn run test:cov\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@master\n      with:\n        token: ${{secrets.CODECOV_TOKEN}}\n      env:\n        CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node Blog CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event unless the push event is to: a branch named release. 2) The workflow would run whenever there is a pull_request event unless the pull request is targeting: a branch named release. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17667280655374065}, {"id": "63c496561899db58864d23cc", "level": "level1", "llm_response": "```yaml name: Molecule - MySQL\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.mysql.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/mysql/**/*\n      - roles/mysql/**\n      - plugins/filter/mysql_config.py\n      - plugins/filter/staten.py\n      - plugins/lookup/templates_exclusive.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  mysql:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n```", "answer": "```yaml name: Molecule - MySQL\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.mysql.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/mysql.*/**\n      - roles/mysql/**\n      # Plugins\n      - plugins/filter/mysql_config.py\n      - plugins/filter/staten.py\n      - plugins/lookup/templates_exclusive.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  mysql:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: mysql\n      versions: '[5.6, 5.7, \"8.0\", \"galera.3.mysql_wsrep.5.6\", \"galera.4.10.mysql_wsrep.8.0.26\", \"mariadb.10.3\", \"mariadb.10.4\", \"mariadb.10.5\", \"mariadb.10.6\"]'\n```", "prompt": "Generate a GitHub Workflow named `Molecule - MySQL` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.mysql.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/mysql.*/**, roles/mysql/**, plugins/filter/mysql_config.py, plugins/filter/staten.py or plugins/lookup/templates_exclusive.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `mysql`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7361896209690745}, {"id": "63c495a88052faa2781b34fc", "level": "level1", "llm_response": "```yaml name: Build iso from elemental-iso-build as external user\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build iso\n        run: |\n          export PATH=/usr/local/go/bin:$PATH\n          ./build_iso.sh\n```", "answer": "```yaml name: Build iso from elemental-iso-build as external user\n# Test building the iso from an external point of view\n# This tests doesn't clone the repo, just interacts with the script as an external user would do\n# Gets the script only and runs it to see if the building is done properly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Docker\n        uses: docker-practice/actions-setup-docker@v1\n      - name: Install deps\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y mkisofs\n      - name: Build iso from script\n        run: |\n          # Just a simple run to test the build script, no need to upload the generated iso!\n          echo \"TEST\" > config.yaml\n          curl -fsSL https://raw.githubusercontent.com/rancher/elemental/main/.github/elemental-iso-build -o elemental-iso-build\n          chmod +x ./elemental-iso-build\n          ./elemental-iso-build config.yaml\n      - name: Check config was inserted\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Extract config and check against our config\n          isoinfo -x /livecd-cloud-config.yaml -R -i $ISO > livecd-cloud-config.yaml\n          # This checks that the files are the same content\n          cmp config.yaml livecd-cloud-config.yaml\n      - name: Basic sanity checks for ISO\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Check it has eltorito\n          isoinfo -d -i $ISO|grep -q Eltorito\n          # check bootable flag\n          isoinfo -d -i $ISO|grep -q bootable        \n```", "prompt": "Generate a GitHub Workflow named `Build iso from elemental-iso-build as external user` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.06377730603177915}, {"id": "63c495878052faa2781b26e9", "level": "level1", "llm_response": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue closer\n        uses: gaurav-singh-007/issue-closer-action@v1\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          issue-number: \"${{ github.event.issue.number }}\"\n          issue-title: \"Auto close issue\"\n          issue-body: \"This issue has been closed as it has no further activity.\"\n```", "answer": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ignoreLabel: do-not-autoclose\n          rules: |\n            [\n              {\n                \"type\": \"title\",\n                \"regex\": \".*<(Source Name|short description)>*\",\n                \"message\": \"You did not fill out the description in the title\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n                \"message\": \"The acknowledgment section was not removed\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n                \"message\": \"The requested information was not filled out\"\n              }\n            ]\n```", "prompt": "Generate a GitHub Workflow named `Issue closer` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: an issue is opened, the title or body on an issue is edited or a closed issue is reopened. The workflow has one job. The job id of the 1st job is `autoclose`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.13127614369462187}, {"id": "63c495257843b61269a05b78", "level": "level1", "llm_response": "```yaml name: Flatpak dependency updates\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event_name == 'workflow_dispatch' ? 'master' : 'master' }}\n          path: external-data-checker\n      - name: Setup flatpak\n        uses: flatcar/setup-flatpak@v1\n        with:\n          flatpak-version: '3.2.0'\n          flatpak-external-data: true\n          flatpak-external-data-url: 'https://raw.githubusercontent.com/orgname/orgname/master/external-data.json'\n          flatpak-external-data-path: 'external-data.json'\n      - name: Run external-data-checker\n        run: |\n          flatpak run --user --debug external-data-checker\n```", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```", "prompt": "Generate a GitHub Workflow named `Flatpak dependency updates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `flatpak-external-data-checker`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 14: mapping values are not allowed in this context", "filepath": "../tmp/test.yml", "line": 14, "column": 0, "kind": "syntax-check", "snippet": "          ref: ${{ github.event_name == 'workflow_dispatch' ? 'master' : 'master' }}", "end_column": 0}]}, "bleu_score": 0.10750892531632159}, {"id": "63c494a27843b61269a02770", "level": "level1", "llm_response": "```yaml name: Doc Site\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - name: Install Dependencies\n        run: yarn\n      - name: Build Website\n        run: yarn build\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@v4.1.0\n        with:\n          branch: gh-pages\n          folder: dist\n```", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Doc Site\n\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install --legacy-peer-deps\n          npm run docs:build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist/site # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Doc Site` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build-and-deploy-site`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.08187912402907206}, {"id": "63c495bf8052faa2781b3ef6", "level": "level1", "llm_response": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/mol_tree2_lib.yml'\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: npm\n      - name: Install dependencies\n        run: npm ci\n      - name: Build\n        run: npm run build\n      - name: Check\n        run: npm run check\n```", "answer": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches: \n      - master\n    paths:\n      - '.github/workflows/mol_tree2_lib.yml'\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: \"0 7 * * *\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    \n    steps:\n    \n    - uses: hyoo-ru/mam_build@master2\n      with:\n        package: mol\n        modules: tree2/lib\n    \n    - uses: JS-DevTools/npm-publish@v1\n      if: ${{ github.ref == 'refs/heads/master' }}\n      with:\n        token: ${{ secrets.NPM_AUTH_TOKEN }}\n        package: ./mol/tree2/lib/-/package.json\n```", "prompt": "Generate a GitHub Workflow named `mol_tree2_lib` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/mol_tree2_lib.yml or tree2/**), the workflow runs. 3) there is activity relating to a pull request. 4) the scheduled time has come: at 07:00 am. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3775938197889306}, {"id": "63c496361e33648075779191", "level": "level1", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496561899db58864d23d2", "level": "level1", "llm_response": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n      molecule_version: 1\n```", "answer": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Ntp` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.ntp.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/ntp/** or roles/ntp/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `ntp`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9550271111000316}, {"id": "63c4963f1e3364807577960f", "level": "level1", "llm_response": "```yaml name: \"Validate Gradle Wrapper\"\non: [pull_request]\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout Repository\"\n        uses: actions/checkout@v3\n      - name: \"Setup Gradle Wrapper\"\n        uses: gradle/wrapper-validation-action@v1\n```", "answer": "```yaml name: \"Validate Gradle Wrapper\"\n\non: [ pull_request ]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "prompt": "Generate a GitHub Workflow named `Validate Gradle Wrapper` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Validation` and its job id is `validation`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47088140067960077}, {"id": "63c4969cb008460c1df157a0", "level": "level1", "llm_response": "```yaml name: Post-release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Post Release\n        uses: pascalgn/post-release-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          release_name: ${{ github.event.release.name }}\n          github_release_id: ${{ github.event.release.id }}\n```", "answer": "```yaml name: Post-release\non:\n  release:\n    types:\n      - published\n      - edited\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: apexskier/github-release-commenter@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment-template: This is addressed by {release_link}.\n          label-template: released\n```", "prompt": "Generate a GitHub Workflow named `Post-release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published or the details of a release, pre-release, or draft release are edited. The workflow has one job. The job id of the 1st job is `release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.38764491065842993}, {"id": "63c495297843b61269a05d16", "level": "level1", "llm_response": "```yaml name: Lint\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.49.1\n          working-directory: ./packages\n```", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire cosmos-sdk repository\n# This workflow is run on every pull request and push to main\n# The `golangci` will pass without running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 8\n    steps:\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.0\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.47.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        if: env.GIT_DIFF\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The 1st job is named `golangci-lint` and its job id is `golangci`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3573266978857773}, {"id": "63c4951f7843b61269a0593e", "level": "level1", "llm_response": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - '*'\n\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n\n      - name: Setup goreleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n\n      - name: Build\n        run: |\n          make build\n\n      - name: Upload to GitHub Packages\n        uses: actions/upload-release-asset@v3\n        with:\n          upload_url: ${{ github.repository_owner/packages/repos/${{ github.repository }}/actions/releases/${{ github.ref }}/assets }}\n          asset_path: ./packages\n          asset_name: ${{ github.repository }}-${{ github.ref }}-${{ github.sha }}\n          asset_content_type: application/octet-stream\n          asset_name_suffix: ${{ github.sha }}\n          owner: ${{ github.repository_owner }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: goreleaser\non:\n  push:\n    tags:\n      - \"*\"\n\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n\n      - name: fetch tags\n        run: git fetch --tags --force\n\n      - uses: actions/setup-go@v3.3.0\n        with:\n          go-version: 1.19\n\n      - uses: goreleaser/goreleaser-action@v3.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release -f ci/.goreleaser.yml\n```", "prompt": "Generate a GitHub Workflow named `goreleaser` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches *. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "got unexpected character '/' while lexing expression, expecting 'a'..'z', 'A'..'Z', '_', '0'..'9', ''', '}', '(', ')', '[', ']', '.', '!', '<', '>', '=', '&', '|', '*', ',', ' '", "filepath": "../tmp/test.yml", "line": 35, "column": 50, "kind": "expression", "snippet": "          upload_url: ${{ github.repository_owner/packages/repos/${{ github.repository }}/actions/releases/${{ github.ref }}/assets }}\n                                                 ^~~~~~~~~~~~~~~~~~~", "end_column": 68}]}, "bleu_score": 0.20789332640632363}, {"id": "63c4967e33b087f6bde2c5c1", "level": "level1", "llm_response": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Run Dependabot auto-merge\n        uses: dependabot/fetch-people@v1.4.0\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Merge Dependabot PR\n        uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: 'Merge Dependabot PR'\n          title: 'Merge Dependabot PR'\n          body: 'Merge Dependabot PR'\n          branch: 'dependabot/${{ github.ref }}'\n          author: ${{ github.actor }}\n          user: ${{ github.actor }}\n          token: ${{ secrets.GITHUB_TOKEN }}\n          assignees: dependabot[bot]\n```", "answer": "```yaml ---\nname: Dependabot auto-merge\n\"on\": pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: >-\n          ${{\n          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||\n          steps.metadata.outputs.update-type == 'version-update:semver-minor'\n          }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```", "prompt": "Generate a GitHub Workflow named `Dependabot auto-merge` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope and write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `dependabot`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"user\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 29, "column": 11, "kind": "action", "snippet": "          user: ${{ github.actor }}\n          ^~~~~", "end_column": 15}]}, "bleu_score": 0.3076861699555486}, {"id": "63c496326fc19abdf9c9a7c5", "level": "level1", "llm_response": "```yaml name: Test CI\n\non:\n  pull_request:\n  push:\n    paths:\n      - 'lua/**'\n      - 'test/**'\n      - '.github/**'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node-version: [14.x]\n        arch: [x86]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n```", "answer": "```yaml name: Test CI\n\non: \n  pull_request:\n  push:\n    paths:\n      - lua/**\n      - test/**\n      - .github/**\n\njobs:\n  test:\n    runs-on:   ubuntu-latest\n    container: alpine\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Install requirements\n      run: |\n        apk update && apk upgrade \n        apk add make bash coreutils neovim lua5.4\n        # links lua5.4 -> lua\n        ln -sv /usr/bin/lua5.4           /usr/bin/lua\n        ln -sv /usr/lib/lua5.4/liblua.so /usr/lib/liblua5.4.so\n\n    - name: Install Tangerine\n      run:  make install\n\n    - name: Build Runner\n      run:  make runner\n\n    - name: Run Tests\n      run:  yes | make test\n```", "prompt": "Generate a GitHub Workflow named `Test CI` for a GitHub repository whose primary programming language is Fennel. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) Only if at least one path of push event matches a pattern in the paths filter(lua/**, test/** or .github/**), the workflow runs. The workflow has one job. The job id of the 1st job is `test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.21491408314117444}, {"id": "63c495207843b61269a059a2", "level": "level1", "llm_response": "```yaml name: Labeler\n\non: [pull_request]\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler/blob/master/README.md\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8193228857188178}, {"id": "63c494378052faa2781a9e70", "level": "level1", "llm_response": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches: [ main, devnet ]\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies\n        run: cargo install --locked --no-default-features --features rustfmt,clippy --version 1.59.0\n\n      - name: Run rustfmt\n        run: rustfmt --check -- --version\n\n      - name: Run clippy\n        run: cargo clippy -- --version\n\n      - name: Run rustfix\n        run: cargo rustfix -- --version\n\n      - name: Run rustfix\n        run: cargo rustfix -- --version\n```", "answer": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    branches: [ main ]\n    types: [opened, synchronize, reopened, ready_for_review]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          # Full git history isn't needed to get a proper list of changed files within `super-linter`\n          fetch-depth: 0\n\n      - name: Protobuf format\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          clang-format-version: '14'\n  \n      - name: Lint shell, Docker and protobuf\n        uses: github/super-linter/slim@v4\n        env:\n          VALIDATE_ALL_CODEBASE: false\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Select file types to lint. Python and Rust linters are configured separately.\n          VALIDATE_SHELL_SHFMT: true\n          #\n          # disable hadolint \n          # https://github.com/hadolint/hadolint/issues/821\n          # VALIDATE_DOCKERFILE_HADOLINT: true\n          # DOCKERFILE_HADOLINT_FILE_NAME: .github/config/.hadolint.yaml\n          #\n          # Enable after fixing proto lint issues.\n          # VALIDATE_PROTOBUF: true\n```", "prompt": "Generate a GitHub Workflow named `Miscellaneous Lint` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named devnet. 2) a pull request is created, a pull request's head branch is updated, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `lint`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.27905204750535173}, {"id": "63c496561899db58864d23b6", "level": "level1", "llm_response": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n```", "answer": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Docker` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.docker.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/docker/**, roles/docker/**, plugins/filter/json.py, plugins/filter/staten.py or plugins/lookup/docker_applications.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `docker`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9591894571091382}, {"id": "63c496851899db58864d36f3", "level": "level1", "llm_response": "```yaml name: Test with Pre-commit\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n\n      - name: Install pre-commit\n        run: pip install pre-commit\n\n      - name: Pre-commit\n        uses: pre-commit/action@v3.1.0\n        with:\n          config-file: .pre-commit-config.yaml\n          all: true\n          exit: true\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Test with Pre-commit\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n          pre-commit install-hooks\n      - name: Lint with pre-commit\n        run: pre-commit run --all-files\n```", "prompt": "Generate a GitHub Workflow named `Test with Pre-commit` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.31441154035277985}, {"id": "63c495e58052faa2781b4fae", "level": "level1", "llm_response": "```yaml name: Self-assign\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  one:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - uses: jupyterlab/actions-self-assign@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Allow users to automatically tag themselves to issues\n\nname: Self-assign\non:\n  issue_comment:\n    types: created\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: >-\n      (github.event.comment.body == '#take' ||\n       github.event.comment.body == '#self-assign') &&\n       (!github.event.issue.pull_request)\n    steps:\n      - run: |\n          echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\n          curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n```", "prompt": "Generate a GitHub Workflow named `Self-assign` for a GitHub repository whose primary programming language is Jupyter Notebook. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `one`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.11780520368448619}, {"id": "63c496561899db58864d23c2", "level": "level1", "llm_response": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n      vm_image: ubuntu-latest\n      vm_count: 1\n```", "answer": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Java` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.java.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/java/** or roles/java/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `java`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9139263724587916}, {"id": "63c4957c8052faa2781b2239", "level": "level1", "llm_response": "```yaml name: Add Issues/PRs to TF Provider DevEx team board\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: Add Content to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Add content to project\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const github = require('github')\n            const github = github({\n              auth: process.env.GITHUB_TOKEN\n            })\n            const project_id = 25598404\n            const issue_id = context.issue.number\n            const project = await github.projects.get({ project_id })\n            await github.issues.addLabels({ ...project.data, issue_number: issue_id }, ['tf-provider-devex'])\n```", "answer": "```yaml # Based on https://github.com/leonsteinhaeuser/project-beta-automations\n\nname: \"Add Issues/PRs to TF Provider DevEx team board\"\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    # NOTE: The way content is added to project board is equivalent to an \"upsert\".\n    # Calling it multiple times will be idempotent.\n    #\n    # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\n    #\u00a0to see the reasoning behind using `pull_request_target` instead of `pull_request`\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: \"Add Content to project\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Set Issue to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'issues'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.issue.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n      - name: \"Set Pull Request to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'pull_request_target'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.pull_request.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n```", "prompt": "Generate a GitHub Workflow named `Add Issues/PRs to TF Provider DevEx team board` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) an issue is opened or a closed issue is reopened. 2) a pull request is created, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow has one job. The 1st job is named `Add Content to project` and its job id is `add-content-to-project`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2067408572062325}, {"id": "63c49697b008460c1df15590", "level": "level1", "llm_response": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Create release\n        run: npm run release\n      - name: Upload release\n        uses: actions/upload-release-action@v3\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n          body: ${{ github.event.release.body }}\n          files: ./dist\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      # Build\n      - name: Build the file\n        run: |\n          cd /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card\n          npm install\n          npm run build\n\n      # Upload build file to the releas as an asset.\n      - name: Upload zip to release\n        uses: svenstaro/upload-release-action@v1-release\n\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card/dist/thermostat-dark-card.js\n          asset_name: thermostat-dark-card.js\n          tag: ${{ github.ref }}\n          overwrite: true\n      - name: HACS Action\n        uses: \"hacs/action@main\"\n        with:\n          category: \"plugin\"\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow has one job. The 1st job is named `Prepare release` and its job id is `release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3105513632223875}, {"id": "63c4955b8052faa2781b1498", "level": "level1", "llm_response": "```yaml name: CI v2\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Build\n        run: |\n          make\n      - name: Test\n        run: |\n          make test\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```", "prompt": "Generate a GitHub Workflow named `CI v2` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1408608322729688}, {"id": "63c494b87843b61269a03054", "level": "level1", "llm_response": "```yaml name: autoupdate\non:\n  push:\n    branches:\n      - 'version-bump/**'\n      - 'dependabot/**'\n      - 'bot/**'\n      - 'all-contributors/**'\n\njobs:\n  autoupdate-for-bot:\n    name: Autoupdate autoapproved PR created in the upstream\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'npm'\n      - name: Autoupdate\n        run: |\n          npm install\n          npm run autoupdate\n```", "answer": "```yaml # This action is centrally managed in https://github.com/asyncapi/.github/\r\n# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo\r\n\r\n# This workflow is designed to work with:\r\n# - autoapprove and automerge workflows for dependabot and asyncapibot.\r\n# - special release branches that we from time to time create in upstream repos. If we open up PRs for them from the very beginning of the release, the release branch will constantly update with new things from the destination branch they are opened against\r\n\r\n# It uses GitHub Action that auto-updates pull requests branches, whenever changes are pushed to their destination branch.\r\n# Autoupdating to latest destination branch works only in the context of upstream repo and not forks\r\n\r\nname: autoupdate\r\n\r\non:\r\n  push:\r\n    branches-ignore:  \r\n      - 'version-bump/**'\r\n      - 'dependabot/**'\r\n      - 'bot/**'\r\n      - 'all-contributors/**'\r\n\r\njobs:\r\n  autoupdate-for-bot:\r\n    if: startsWith(github.repository, 'asyncapi/')\r\n    name: Autoupdate autoapproved PR created in the upstream\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Autoupdating\r\n        uses: docker://chinthakagodawita/autoupdate-action:v1\r\n        env:\r\n          GITHUB_TOKEN: '${{ secrets.GH_TOKEN_BOT_EVE }}'\r\n          PR_FILTER: \"labelled\"\r\n          PR_LABELS: \"autoupdate\"\r\n          PR_READY_STATE: \"ready_for_review\"\r\n          MERGE_CONFLICT_ACTION: \"ignore\"\r\n```", "prompt": "Generate a GitHub Workflow named `autoupdate` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: The workflow would run whenever there is a push event unless the push event is to: a branch whose name matches version-bump/**, a branch whose name matches dependabot/**, a branch whose name matches bot/** or a branch whose name matches all-contributors/**. The workflow has one job. The 1st job is named `Autoupdate autoapproved PR created in the upstream` and its job id is `autoupdate-for-bot`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4806531884175952}, {"id": "63c496581e3364807577a144", "level": "level1", "llm_response": "```yaml name: Remove ALL artifacts\non: workflow_dispatch\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Remove ALL artifacts\n        run: |\n          npm install -g pm2\n          pm2 list --all\n          pm2 delete all\n```", "answer": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch: # only manually\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          age: '0 days'\n          skip-tags: true\n          skip-recent: 0\n```", "prompt": "Generate a GitHub Workflow named `Remove ALL artifacts` for a GitHub repository whose primary programming language is C. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `remove-all-artifacts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.267861158687514}, {"id": "63c493ea8052faa2781a7e17", "level": "level1", "llm_response": "```yaml name: master\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v1\n      - name: Build\n        run: cargo build --features serde\n      - name: Test\n        run: cargo test\n```", "answer": "```yaml name: master\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0' # 00:00 Sunday\n\njobs:\n\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [1.31.0, stable]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ matrix.rust }}\n      - run: cargo build\n      - run: ./ci/test_full.sh\n```", "prompt": "Generate a GitHub Workflow named `master` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The 1st job is named `Test` and its job id is `test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5169685378854395}, {"id": "63c495668052faa2781b18dd", "level": "level1", "llm_response": "```yaml name: release management\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out the repository\n        uses: actions/checkout@v3\n\n      - name: Set up Rust toolchain\n        uses: actions/setup-rust@v3\n        with:\n          toolchain: stable\n\n      - name: Update release draft\n        run: |\n          curl -s https://api.github.com/repos/hyperium/hyper/releases | jq -r '.[].draft_url' | xargs curl -s -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" -H \"Content-Type: application/json\" -d '{\"draft\": true}'\n```", "answer": "```yaml name: release management\non:\n  push:\n    branches: [master]\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `release management` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `update-draft-release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.14404668832648523}, {"id": "63c494608052faa2781aac1c", "level": "level1", "llm_response": "```yaml name: ASF-ci\n\non: [push, pull_request]\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: \"6.0.x\"\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n          cache: \"npm\"\n      - run: npm install\n      - run: dotnet build --configuration Release --no-restore\n      - run: dotnet test --no-build --no-restore --configuration Release\n```", "answer": "```yaml name: ASF-ci\n\non: [push, pull_request]\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  main:\n    strategy:\n      fail-fast: false\n      matrix:\n        configuration: [Debug, Release]\n        os: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n      with:\n        submodules: recursive\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n    - name: Verify .NET Core\n      run: dotnet --info\n\n    - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n      run: dotnet build -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n      run: dotnet test ArchiSteamFarm.Tests -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Upload latest strings for translation on Crowdin\n      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.configuration == 'Release' && startsWith(matrix.os, 'ubuntu-') }}\n      uses: crowdin/github-action@1.4.16\n      with:\n        crowdin_branch_name: main\n        config: '.github/crowdin.yml'\n        project_id: ${{ secrets.ASF_CROWDIN_PROJECT_ID }}\n        token: ${{ secrets.ASF_CROWDIN_API_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `ASF-ci` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow sets 3 environment variables to use: `DOTNET_CLI_TELEMETRY_OPTOUT` is set to `True`, `DOTNET_NOLOGO` is set to `True` and `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.060154122481794164}, {"id": "63c495da7843b61269a0a66e", "level": "level1", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  main:\n    strategy:\n      matrix:\n        go:\n          - 1.19\n        os:\n          - ubuntu-20.04\n          - ubuntu-22.04\n          - macos-11\n          - macos-12\n          - windows-2019\n          - windows-2022\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3260794487890566}, {"id": "63c494247843b612699ff48a", "level": "level1", "llm_response": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v1\n        with:\n          rust-version: 1.54\n      - run: cargo build\n      - run: cargo test\n```", "answer": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n      - name: Build without default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n      - name: Build with default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n```", "prompt": "Generate a GitHub Workflow named `Rust` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.10921185930950092}, {"id": "63c4957d8052faa2781b22ad", "level": "level1", "llm_response": "```yaml name: nix-build\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-v**\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-nix@v1\n      - name: nix-build\n        run: nix-build\n```", "answer": "```yaml name: nix-build\non:\n  pull_request:\n  push:\n    branches: [main, 'release-v**']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Nix Flakes doesn't work on shallow clones\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v17\n        with:\n          install_url: https://releases.nixos.org/nix/nix-2.10.3/install\n      - uses: cachix/cachix-action@v10\n        with:\n          name: centrifuge-chain\n          authToken: \"${{ secrets.CACHIX_AUTH_TOKEN }}\"\n      - name: Build centrifuge-chain\n        run: nix build --no-allow-dirty -L```", "prompt": "Generate a GitHub Workflow named `nix-build` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main or a branch whose name matches release-v**. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.25014019579035096}, {"id": "63c4968a6fc19abdf9c9ca16", "level": "level1", "llm_response": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - conda-environment.yml\n      - .github/workflows/test_conda-build.yml\n  schedule:\n    - cron: '17 22 * * 6'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Install Conda\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.9'\n      - name: Install conda\n        run: |\n          conda install -c conda-forge conda-build\n      - name: Install conda-build\n        run: |\n          conda install -c conda-forge conda-build\n      - name: Build conda package\n        run: |\n          conda build conda-environment.yml\n      - name: Test conda package\n        run: |\n          conda install --name conda-test conda-build\n          conda build conda-environment.yml --name conda-test --hash-type sha256\n```", "answer": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 22 * * 6'  # Every Saturday at 22:17\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n\n      - name: build conda env\n        run: |\n          # write environment file\n          env_file='conda-environment.yml'\n          echo \"  - pip\"  >> \"$env_file\"  # list pip as a dependency\n          echo \"  - pip:\" >> \"$env_file\"  # add a pip section\n          echo \"    - .\"  >> \"$env_file\"  # install cylc-flow (pip install .)\n          cat \"$env_file\"\n          # install environment\n          conda env create \\\n            -f \"$env_file\" \\\n            --prefix cylc-dev\n          . /usr/share/miniconda/etc/profile.d/conda.sh\n          # check cylc-flow was installed correctly\n          conda run --prefix cylc-dev cylc version --long\n\n      - name: check for activate scripts\n        run: |\n          # https://github.com/cylc/cylc-flow/issues/3704#issuecomment-897442365\n          # locate all activate scripts\n          find ./cylc-dev/ -name \"activate.d\" | tee > activates.txt\n          # ignore the conda activate script itself\n          sed -i '/cylc-dev\\/etc\\/conda\\/activate.d/d' activates.txt\n          # check to make sure no packages have contributed new activate scripts\n          # (we rely on having a conda activate-less environment)\n          if [[ $(cat activates.txt | wc -l) -ne 0 ]]; then\n              echo '::error::Found activate scripts in installation.'\n              cat activates.txt >&2\n              exit 1\n          fi\n```", "prompt": "Generate a GitHub Workflow named `conda builds` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(conda-environment.yml or .github/workflows/test_conda-build.yml), the workflow runs. 2) the scheduled time has come: at 10:17 pm, only on saturday. 3) someone manually triggers the workflow. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `test_conda_install`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2038774894849525}, {"id": "63c496411e3364807577968e", "level": "level1", "llm_response": "```yaml name: Add to project\non:\n  issues:\n    types: [opened, transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@v0.2.0\n        with:\n          project-url: https://github.com/orgs/hamlet-team/projects/1\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened,transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n      - name: Set Team\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN_PROJECT }}\n        run: |\n          gh api graphql -f query='\n          mutation(\n              $project: ID!\n              $item: ID!\n              $status_field: ID!\n              $status_value: String!\n            )  {\n            updateProjectV2ItemFieldValue(\n              input: {\n               projectId: $project\n                itemId: $item\n                fieldId: $status_field\n                value: { \n                  singleSelectOptionId: $status_value\n                  }\n              }\n            ) {\n              projectV2Item {\n                id\n              }\n            }\n          }' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent```", "prompt": "Generate a GitHub Workflow named `Add to project` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: an issue is opened or an issue is transferred to another repository. The workflow has one job. The 1st job is named `Add issue to project` and its job id is `add-to-project`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.06024637163598023}, {"id": "63c496861e3364807577b319", "level": "level1", "llm_response": "```yaml name: documentation\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    if: github.repository == 'github/hello-world'\n\n    steps:\n      - name: Skip duplicate jobs\n        uses: andymckay/skip-duplicate-jobs@v0.5.0\n        with:\n          jobs-to-run: 'skip_duplicate_jobs'\n          concurrency-group-by: 'job'\n          concurrency-group-by-unique: 'github.event.repository.name'\n\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.repository == 'github/hello-world'\n\n    steps:\n      - name: Deploy\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCS_BRANCH: 'gh-pages'\n          DOCS_DIR: 'docs'\n          DOCS_VERSION: 'v1'\n```", "answer": "```yaml # adapted from:\n#\n# * base code: https://peterevans.dev/posts/github-actions-how-to-automate-code-formatting-in-pull-requests/\n# * fix push auth: https://github.com/ad-m/github-push-action\n# * checkout PR head commit https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit\nname: documentation\non:\n  push:\n    branches:\n      - master\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    outputs:\n      should_skip: ${{ steps.skip_check.outputs.should_skip }}\n    steps:\n      - id: skip_check\n        uses: fkirc/skip-duplicate-actions@master\n        with:\n          concurrent_skipping: 'same_content'\n          skip_after_successful_duplicate: 'true'\n          paths: '[\"doc/**\"]'\n  deploy:\n    needs: skip_duplicate_jobs\n    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.1\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - name: Create output directories\n        run: mkdir -p output/reference\n\n      - name: Copy index.html\n        run: cp website/index.html output/index.html\n\n      - name: Generate reference\n        id: adocbuild\n        uses: tonynv/asciidoctor-action@master\n        with:\n            program: asciidoctor doc/index.adoc -o output/reference/index.html\n\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.7\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: output # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `documentation` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has 2 jobs. The job id of the 1st job is `skip_duplicate_jobs`. The job id of the 2nd job is `deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.10496543183733595}, {"id": "63c496496fc19abdf9c9b198", "level": "level1", "llm_response": "```yaml name: Run checks\n\non:\n  pull_request:\n\njobs:\n  go-checks:\n    name: Run go checks\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - run: go test ./...\n\n  action-checks:\n    name: Run action checks\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: npm install\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}\n      - run: npm run build\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}\n```", "answer": "```yaml on: pull_request\nname: Run checks\njobs:\n  go-checks:\n    name: Run go checks\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Test Go Modules Vendor\n      uses: ./\n      env:\n        IMPORT: cedrickring/golang-action\n        PROJECT_PATH: ./tests/projects/go_modules_vendored\n    - name: Test Go Modules\n      uses: ./\n      env:\n        IMPORT: cedrickring/golang-action\n        PROJECT_PATH: ./tests/projects/go_modules\n    - name: Test Go Standard\n      uses: ./\n      env:\n        IMPORT: cedrickring/golang-action\n        PROJECT_PATH: ./tests/projects/go_standard\n  action-checks:\n    permissions:\n      contents: read\n    name: Run action checks\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dockerfile_lint\n      run: sudo npm i -g dockerfile_lint\n    - name: Lint\n      run: make lint\n    - name: Test\n      run: make test\n    - name: Docker Build\n      run: make build\n    - name: Check all versions\n      run: make docker-check\n```", "prompt": "Generate a GitHub Workflow named `Run checks` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The 1st job is named `Run go checks` and its job id is `go-checks`. The 2nd job is named `Run action checks` and its job id is `action-checks`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1783132625805757}, {"id": "63c495c68052faa2781b4230", "level": "level1", "llm_response": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    name: Issue Handler\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { issue, context } = context;\n            console.log('Issue', issue);\n            console.log('Context', context);\n            console.log('Is this issue a bug report?', context.issue.body.includes('fix issue'));\n            if (context.issue.body.includes('fix issue')) {\n              console.log('Fixing issue');\n              const { body } = context.issue;\n              const { issues } = await github.rest.issues.listIssuesByAssignee({\n                assignee: issue.user.login,\n                state: 'open',\n                labels: ['bug']\n              });\n              const firstIssue = issues[0];\n              const issueBody = await github.rest.issues.createComment({\n                issue_number: firstIssue.number,\n                body: `This issue was created as a bug report for [${firstIssue.title}](${firstIssue.html_url}). The issue will be closed once the issue has been fixed or a new issue is created.` + context.issue.body,\n                owner: firstIssue.owner,\n                repo: firstIssue.repo,\n                assignees: [firstIssue.user.login]\n              });\n              console.log('Issue body', issueBody.data.body);\n              issue.body = issueBody.data.body;\n            } else {\n              console.log('Issue is not a bug report');\n            }\n```", "answer": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    runs-on: windows-latest\n    name: Issue Handler\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: github.event.action == 'opened' || (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'verify'))\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Issues` for a GitHub repository whose primary programming language is PowerShell. This workflow will be triggered by an event: an issue is opened or a label is added to an issue. The workflow has one job. The 1st job is named `Issue Handler` and its job id is `issueHandler`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.10118246427287075}, {"id": "63c494c78052faa2781ad471", "level": "level1", "llm_response": "```yaml name: cla\n\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: tibdex/github-cla-action@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"cla\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened, closed, synchronize]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get Team Members\"\n        id: team\n        # github-script, v6.1.0\n        uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da\n        with:\n          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n          result-encoding: string\n          script: |\n            const members = await github.paginate(\n              github.rest.orgs.listMembers,\n              { org: \"skalenetwork\" },\n            );\n            return members.map(m => m.login).join(\",\");\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release, v2.1.3-beta\n        uses: cla-assistant/github-action@ba066dbae3769e2ce93ec8cfc4fdc51b9db628ba\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://skale.network/cla.txt'\n          remote-organization-name: 'skalenetwork'\n          remote-repository-name: cla-sigs\n          allowlist: '${{ steps.team.outputs.result }},*[bot]'\n```", "prompt": "Generate a GitHub Workflow named `cla` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) a pull request is created, a pull request is closed or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `cla`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.023759911842501986}, {"id": "63c495f07843b61269a0af74", "level": "level1", "llm_response": "```yaml name: Acquire activation file\n\non:\n  workflow_dispatch:\n\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        uses: ./.github/actions/activation\n```", "answer": "```yaml \ufeffname: Acquire activation file\non:\n  workflow_dispatch: {}\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ steps.getManualLicenseFile.outputs.filePath }}\n          path: ${{ steps.getManualLicenseFile.outputs.filePath }}\n```", "prompt": "Generate a GitHub Workflow named `Acquire activation file` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Request manual activation file` and its job id is `activation`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3683779919470511}, {"id": "63c4967d33b087f6bde2c593", "level": "level1", "llm_response": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - 'assets/**'\n      - '.vscode/**'\n\njobs:\n  check:\n    name: Run checks\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Run tests\n        run: yarn test\n\n  deploy-site:\n    name: Deploy site\n    needs: check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Build site\n        run: yarn build\n\n      - name: Deploy\n        uses: JamesIves/github-pages-deploy-action@v4.4.2\n        with:\n          branch: gh-pages\n          folder: ./dist\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    paths-ignore:\n      - 'assets/**'\n      - '.vscode/**'\n    branches:\n      - master\n\njobs:\n  check:\n    name: Run checks\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install\n        uses: ./.github/actions/install\n\n      - name: Check\n        run: yarn check\n\n      - name: Lint\n        run: yarn lint\n\n      - name: Test\n        run: yarn test\n\n  deploy-site:\n    name: Deploy site\n    runs-on: ubuntu-latest\n    environment: github-pages\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install\n        uses: ./.github/actions/install\n\n      - name: Build Site\n        shell: bash\n        run: |\n          yarn --cwd apps/site ci:build\n\n      - name: Deploy Website\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./apps/site/out\n          cname: tamagui.dev\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. When all the path names of push event match patterns in the paths-ignore filter(assets/** or .vscode/**), the workflow will not run. The workflow has 2 jobs. The 1st job is named `Run checks` and its job id is `check`. The 2nd job is named `Deploy site` and its job id is `deploy-site`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3209676420174843}, {"id": "63c494318052faa2781a9bf5", "level": "level1", "llm_response": "```yaml name: Test a branch on canary\n\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: \"Commit sha to be tested\"\n        required: true\n\npermissions:\n  contents: read\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: canary\n\n      - name: Update the rc tag\n        run: |\n          git checkout master\n          git checkout rc\n          git merge ${{ github.event.inputs.COMMIT_SHA }}\n          git commit -m \"Merge ${{ github.event.inputs.COMMIT_SHA }}\"\n          git push origin canary\n          git push origin rc\n```", "answer": "```yaml name: Test a branch on canary\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: 'Commit SHA to be tested'\n        required: true\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\ndefaults:\n  run:\n    shell: pwsh\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34 # v1\n      with:\n        allowed-endpoints: \n          api.github.com:443\n          github.com:443\n\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v2\n    - name: Update the rc tag\n      uses: step-security/publish-action@b438f840875fdcb7d1de4fc3d1d30e86cf6acb5d\n      with:\n        rc-sha: ${{ env.COMMIT_SHA }}\n        rc: true\n\n    - name: Canary test\n      uses: docker://ghcr.io/step-security/integration-test/int:latest\n      env:\n        PAT: ${{ secrets.PAT }}\n        canary: true\n```", "prompt": "Generate a GitHub Workflow named `Test a branch on canary` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: COMMIT_SHA-this input represents commit sha to be tested and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `COMMIT_SHA` is set to `${{ github.event.inputs.COMMIT_SHA }}`. For all run steps in the workflow, default shell is set to pwsh. The workflow has one job. The 1st job is named `Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit` and its job id is `update_tag`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4186794138955244}, {"id": "63c4964733b087f6bde2ad41", "level": "level1", "llm_response": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    runs-on: windows-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n          python -m twine check dist/*\n          python -m twine upload dist/*\n```", "answer": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest, windows-latest]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.7'\n\n      - name: Fix README symlink\n        run: |\n          rm py-polars/README.md\n          cp README.md py-polars/README.md\n\n      - name: Publish wheel\n        uses: messense/maturin-action@v1\n        env:\n          MATURIN_PASSWORD: ${{ secrets.PYPI_PASS }}\n          RUSTFLAGS: -C target-feature=+fxsr,+sse,+sse2,+sse3,+sse4.1,+sse4.2\n        with:\n          rust-toolchain: nightly-2022-10-06\n          maturin-version: '0.13.5'\n          command: publish\n          args: -m py-polars/Cargo.toml --no-sdist --skip-existing -o wheels -i python -u ritchie46\n```", "prompt": "Generate a GitHub Workflow named `Create Python release windows macos` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches py-*. For all run steps in the workflow, default shell is set to bash. The workflow has one job. The job id of the 1st job is `win-macos`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2851155647341698}, {"id": "63c4941d8052faa2781a937b", "level": "level1", "llm_response": "```yaml name: update-flake-lock\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: haseebk/update-flake-lock-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          lockfile: .github/workflows/lockfile.yml\n```", "answer": "```yaml name: update-flake-lock\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '0 0 * * 0' # runs weekly on Sunday at 00:00\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          # we update nixos-common-styles manual\n          # and the rest of the inputs are content inputs\n          inputs: nixpkgs\n```", "prompt": "Generate a GitHub Workflow named `update-flake-lock` for a GitHub repository whose primary programming language is Less. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The job id of the 1st job is `lockfile`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.21625905362630324}, {"id": "63c4959c7843b61269a08c30", "level": "level1", "llm_response": "```yaml name: Scorecards supply-chain security\n\non:\n  workflow_dispatch:\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Run Scorecards analysis\n        uses: scorecards/gh-action@v1\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml name: Scorecards supply-chain security\n# Run only manually, because the answers don't change often and the results have \n# many unhelpful positives.\n  \non:\n  workflow_dispatch: \n  # Only the default branch is supported.\n  # branch_protection_rule:\n  # schedule:\n  #   - cron: '38 17 * * 6'\n  # push:\n  #  branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c8416b0b2bf627c349ca92fc8e3de51a64b005cf # v1.0.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.138842128148852}, {"id": "63c4942a8052faa2781a9911", "level": "level1", "llm_response": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - run: make integration\n```", "answer": "```yaml name: Integration tests\non:\n  workflow_dispatch: null\n  push:\n    branches:\n      - main\n      - dev\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2\n      - uses: actions/setup-go@37335c7bb261b353407cff977110895fa0b4f7d8 # pin@v2\n        with:\n          go-version: '1.18'\n      - run: go version\n      - run: make testacc\n        env:\n          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Integration tests` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main or a branch named dev. The workflow has one job. The 1st job is named `Run integration tests` and its job id is `integration_tests`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3909383021242408}, {"id": "63c4940f7843b612699feb8d", "level": "level1", "llm_response": "```yaml on:\n  push:\n    branches:\n      - main\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: codecov/codecov-action@v3\n        with:\n          files: '**/coverage.out'\n          name: coverage\n```", "answer": "```yaml # add public code coverage reports\non:\n  push:\n    branches:\n    - main\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: \"make test-cover\"\n    - uses: codecov/codecov-action@v2\n    with:\n      file: ./coverage.out\n      fail_ci_if_error: true\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `coverage`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4790018007153394}, {"id": "63c495257843b61269a05b79", "level": "level1", "llm_response": "```yaml name: Update translation templates\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-templates:\n    name: Update translation templates\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Update translations\n        uses: codelyze/translate-template@v2\n        with:\n          source: \"https://github.com/codelyze/translation-templates\"\n          target: \"https://github.com/codelyze/translation-templates\"\n          merge: true\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n\nname: Update translation templates\njobs:\n  update-templates:\n    name: Update translation templates\n    runs-on: ubuntu-20.04\n    container:\n      image: archlinux\n    steps:\n      # install git first otherwise checkout will not give us an actual git repo\n      - name: Install git\n        run: pacman -Syu --noconfirm git\n    \n      - name: Checkout\n        uses: actions/checkout@v3.1.0\n\n      - name: Install deps\n        run: |\n          # install general build deps\n          pacman -Syu --noconfirm ninja gcc pkgconf python3 python-pip which\n          # install easyeffects deps\n          source ./PKGBUILD && pacman -Syu --noconfirm --needed --asdeps \"${makedepends[@]}\" \"${depends[@]}\"\n          \n      # workaround upstream permissions issue github.com/peter-evans/create-pull-request/issues/1170\n      - name: Change git permissions\n        run: git config --global --add safe.directory \"$GITHUB_WORKSPACE\"\n\n      - name: Run meson targets\n        run: |\n          meson build\n          cd build\n          ../util/update_translation_templates.sh\n          cd ..\n\n      - name: Check for non-timestamp diff\n        run: |\n          # see https://stackoverflow.com/a/26622262\n          DIFF_LINES=$(git diff --unified=0 | grep '^[+-]' | grep -Ev '^(--- a/|\\+\\+\\+ b/)')\n\n          if [[ $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\") != \"$DIFF_LINES\" ]]; then\n            echo \"The calculated diff includes modifications besides just timestamp changes (POT-Creation-Date).\"\n            echo \"Letting the PR continue as this is a valid reason to open a PR.\"\n          else\n            echo \"The calculated diff just has timestamp changes (POT-Creation-Date).\"\n            echo \"Restoring original files since this is not a valid reason to open a PR.\"\n            git restore .\n          fi\n\n          echo \"All diff lines count: $(echo \"$DIFF_LINES\" | wc -l)\"\n          echo \"Diff lines count where POT-Creation-Date was changed: $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\" | wc -l)\"\n\n      # TODO it would be ideal to refresh metainfo fully by copying release notes from the upcoming release in NEWS.yaml to metainfo, and then running the above update template script,\n      # however this is not possible without putting a dummy release in the metainfo with said upcoming release notes which would later have to be adjusted to the real release.\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4.1.3\n        with:\n          title: Update translation templates\n          body: Ensure to merge all other Pull Requests before merging this. Conflicts here will automatically be resolved in case of changes in master.\n          commit-message: Update translation templates\n          # email sets \"EasyEffects Bot\" user as commit author\n          committer: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          author: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          branch: automatically-update-translation-templates\n          # the easyeffects_bot secret/token is only valid for a fork\n          # note the machine user (easyeffects-bot) must have already forked the repository  where the action is running for this to work\n          push-to-fork: easyeffects-bot/easyeffects\n          token: ${{ secrets.EASYEFFECTS_BOT }}\n```", "prompt": "Generate a GitHub Workflow named `Update translation templates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The 1st job is named `Update translation templates` and its job id is `update-templates`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.0008753346159417962}, {"id": "63c4967d1899db58864d33af", "level": "level1", "llm_response": "```yaml name: Build package\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        required: true\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build package\n        run: |\n          yarn install\n          yarn build\n```", "answer": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n\n  build-package:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n\n      - name: NPM install\n        run: npm install\n\n      - name: NPM build\n        run: npm run build\n\n      - name: Grunt action-package\n        run: npm run action-package\n\n      - name: Build zip file\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          path: |\n            package/\n          retention-days: 1\n```", "prompt": "Generate a GitHub Workflow named `Build package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: name-this input represents package name, its default value is generateblocks and it must be supplied. The workflow has one job. The job id of the 1st job is `build-package`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.18309105810740786}, {"id": "63c494c78052faa2781ad49a", "level": "level1", "llm_response": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          sync-labels: \"false\"\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Pull Request Labeler` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `triage`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7183056159883718}, {"id": "63c495928052faa2781b2bc0", "level": "level1", "llm_response": "```yaml name: Labeler\n\non: [pull_request]\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          configuration-path: .github/labeler.yml\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: rhysd/changelog-from-release/action@v2\n      with:\n        file: CHANGELOG.md\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.44410633990831616}, {"id": "63c494608052faa2781aabf2", "level": "level1", "llm_response": "```yaml name: Configlet\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\npermissions:\n  contents: read\nname: Configlet\njobs:\n  configlet:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: configlet/configlet-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "prompt": "Generate a GitHub Workflow named `Configlet` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. 3) someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `configlet`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"name\" is duplicated in workflow. previously defined at line:1,col:1", "filepath": "../tmp/test.yml", "line": 10, "column": 1, "kind": "syntax-check", "snippet": "name: Configlet\n^~~~~", "end_column": 5}]}, "bleu_score": 0.39615805576005414}, {"id": "63c4949e7843b61269a025e6", "level": "level1", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c493b77843b612699fd377", "level": "level1", "llm_response": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'public/**'\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Rust\n        uses: actions/setup-rust@v3\n        with:\n          rust-version: '1.69.0'\n\n      - name: Build website\n        run: cargo build --target wasm32-unknown-unknown --release --no-default-features --features wasm32,serde\n\n      - name: Deploy website\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          publish_branch: gh-pages\n          publish_dir_name: \"docs\"\n          commit_message: \"Deploy docs\"\n          publish_branch: gh-pages\n          clean: true\n          publish_branch: gh-pages\n```", "answer": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"public/**\"\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v15\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build\n        run: nix build .#website\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./result\n          cname: mdzk.app\n```", "prompt": "Generate a GitHub Workflow named `Publish website` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(public/**), the workflow runs. The workflow has one job. The job id of the 1st job is `deploy-website`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "input \"publish_dir_name\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 31, "column": 11, "kind": "action", "snippet": "          publish_dir_name: \"docs\"\n          ^~~~~~~~~~~~~~~~~", "end_column": 27}, {"message": "key \"publish_branch\" is duplicated in \"with\" section. previously defined at line:30,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 33, "column": 11, "kind": "syntax-check", "snippet": "          publish_branch: gh-pages\n          ^~~~~~~~~~~~~~~", "end_column": 25}, {"message": "input \"clean\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 34, "column": 11, "kind": "action", "snippet": "          clean: true\n          ^~~~~~", "end_column": 16}, {"message": "key \"publish_branch\" is duplicated in \"with\" section. previously defined at line:30,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 35, "column": 11, "kind": "syntax-check", "snippet": "          publish_branch: gh-pages\n          ^~~~~~~~~~~~~~~", "end_column": 25}]}, "bleu_score": 0.37456688105690644}, {"id": "63c4946f7843b61269a011d1", "level": "level1", "llm_response": "```yaml name: I2::Dev::Nightly::Publish\n\non:\n  workflow_dispatch:\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Setup Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ secrets.DOCKER_USERNAME }}/i2dev-nightly\n          file: .docker/Dockerfile\n          tags: ${{ secrets.DOCKER_USERNAME }}/i2dev-nightly\n          build-args: |\n            DEBUG=1\n            I2DEV_NIGHTLY=1\n            I2DEV_VERSION=${{ github.event_name == 'schedule' && github.event.schedule.trigger_id || github.event.number }}\n```", "answer": "```yaml name: I2::Dev::Nightly::Publish\n\non: workflow_dispatch\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container:\n      image: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: hyperledger/iroha2:dev-nightly-${{ github.sha }}\n          labels: commit=${{ github.sha }}\n          build-args: TAG=dev\n```", "prompt": "Generate a GitHub Workflow named `I2::Dev::Nightly::Publish` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `dockerhub`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"tags\" is duplicated in \"with\" section. previously defined at line:26,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 28, "column": 11, "kind": "syntax-check", "snippet": "          tags: ${{ secrets.DOCKER_USERNAME }}/i2dev-nightly\n          ^~~~~", "end_column": 15}]}, "bleu_score": 0.20863717385807692}, {"id": "63c4941b7843b612699ff0aa", "level": "level1", "llm_response": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build\n        run: ./gradlew build\n\n      - name: Upload Release Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: release\n          path: ./build/libs/*.jar\n```", "answer": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build and Release\n      env:\n        INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n        ZAP_RELEASE: 1\n        ZAP_JAVA_VERSION: 11\n      run: ./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease\n```", "prompt": "Generate a GitHub Workflow named `Release Main Version` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(zap/zap.gradle.kts), the workflow runs. The workflow has one job. The 1st job is named `Build and Release` and its job id is `release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4418220070159701}, {"id": "63c493ff8052faa2781a8681", "level": "level1", "llm_response": "```yaml name: Check License Lines\n\non:\n  push:\n    branches:\n      - '*'\n      - '*'\n\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Check License Lines\n        uses: actions/checkout@v3\n        with:\n          # The branch to check out\n          branch: main\n          # The token to authenticate with GitHub\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # The path to check out\n          path: ./license-checker\n\n      - name: Build\n        run: |\n          cd ./license-checker\n          ./gradlew check\n\n      - name: Upload License Lines\n        uses: actions/upload-artifact@v3\n        with:\n          name: license-lines\n          path: ./license-checker/artifacts\n```", "answer": "```yaml name: Check License Lines\non:\n  push:\n    branches: '**'\n#  pull_request:\n#    branches:\n#      - main\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: kt3k/license_checker@v1.0.6```", "prompt": "Generate a GitHub Workflow named `Check License Lines` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch whose name matches * or a branch whose name matches *. The workflow has one job. The job id of the 1st job is `check-license-lines`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"branch\" is not defined in action \"actions/checkout@v3\". available inputs are \"clean\", \"fetch-depth\", \"fetch-tags\", \"github-server-url\", \"lfs\", \"path\", \"persist-credentials\", \"ref\", \"repository\", \"set-safe-directory\", \"sparse-checkout\", \"sparse-checkout-cone-mode\", \"ssh-key\", \"ssh-known-hosts\", \"ssh-strict\", \"submodules\", \"token\"", "filepath": "../tmp/test.yml", "line": 20, "column": 11, "kind": "action", "snippet": "          branch: main\n          ^~~~~~~", "end_column": 17}]}, "bleu_score": 0.2859089066939971}, {"id": "63c494888052faa2781abb68", "level": "level1", "llm_response": "```yaml name: MERGE_MASTER_TO_DEVELOP\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: develop\n      - name: Merge master to develop\n        uses: github/merge-pull-request@v3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          base: develop\n          head: master\n          title: Merge master to develop\n          body: |\n            Merge master to develop\n```", "answer": "```yaml name: MERGE_MASTER_TO_DEVELOP\non:\n  push:\n    branches:\n    - \"master\"\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n    - name: Checkout develop\n      uses: actions/checkout@v3\n      with:\n        ref: develop\n        fetch-depth: 0\n    - name: Merge master to develop and push\n      run: |\n        git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\n        git config user.email '${{ secrets.BPMN_IO_EMAIL }}'\n        git merge -m 'Merge master to develop' --no-edit origin/master\n        git push\n\n    - name: Notify failure on Slack\n      if: failure()\n      uses: slackapi/slack-github-action@v1.15.0\n      with:\n        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}\n        slack-message: \"Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.\"\n      env:\n        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `MERGE_MASTER_TO_DEVELOP` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `Merge_master_to_develop`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1438912768325457}, {"id": "63c494298052faa2781a987a", "level": "level1", "llm_response": "```yaml name: Hypothesis Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 6 * * *\"\n\nenv:\n  python_version: 3.10\n\npermissions:\n  issues: write\n\njobs:\n  hypothesis:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.9, 3.10, 3.11]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.python_version }}\n      - name: Install Hypothesis\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools\n          python -m pip install --upgrade pytest pytest-cov\n          python -m pip install hypothesis\n      - name: Run Hypothesis\n        run: |\n          pytest -v -s -m \"hypothesis\"\n```", "answer": "```yaml name: Hypothesis Tests\non:\n  workflow_dispatch:\n  schedule:\n    # min hour dom month dow\n    - cron:  '0 6 * * *'\nenv:\n  python_version: '3.10'\n\npermissions:\n  issues: write\n\njobs:\n\n  hypothesis:\n    runs-on: ubuntu-22.04\n    timeout-minutes: 90\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Install Linux Dependencies\n        uses: ./.github/actions/linux_dependencies\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: ${{ env.python_version }}\n      - name: Use Python Dependency Cache\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-20.04\n      - name: Use Hypothesis Cache\n        uses: pat-s/always-upload-cache@v3.0.1\n        with:\n          path: .hypothesis\n          key: ${{ runner.os }}-hypothesis\n      - name: Install Dependencies and Test\n        uses: ./.github/actions/setup_and_test\n      - name: Test with Hypothesis\n        run: xvfb-run poetry run pytest -m hypothesis --hypothesis-profile=ci\n        shell: bash\n      - uses: nashmaniac/create-issue-action@v1.1\n        if: failure()\n        name: Create Issue on Failure\n        with:\n          title: Hypothesis tests failed\n          token: ${{secrets.GITHUB_TOKEN}}\n          labels: bug,hypothesis\n          body: |\n            Test run failed for commit ${{github.sha}}.\n            See https://github.com/gaphor/gaphor/actions/workflows/hypothesis-test.yml.\n```", "prompt": "Generate a GitHub Workflow named `Hypothesis Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 06:00 am. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `python_version` is set to `3.10`. The workflow has one job. The job id of the 1st job is `hypothesis`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1484893278202565}, {"id": "63c495038052faa2781aede8", "level": "level1", "llm_response": "```yaml name: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: windows-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install setuptools wheel\n          python -m pip install pytest\n\n      - name: Build package\n        run: |\n          python setup.py sdist bdist_wheel\n\n      - name: Check package\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install -e .\n          python -m pytest --ignore=tests/windows_tests\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: \"windows-latest\"\n    strategy:\n      fail-fast: True\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          auto-update-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n        env:\n          ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n      - name: Create Conda environment with the rights deps\n        shell: bash -l {0}\n        run: |\n          conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n      - name: Install dependencies\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          python -m pip install --upgrade pip\n          python -m pip install -U pip setuptools wheel\n          python -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\n          python -m pip install .\n          python -m pip freeze\n          npm install -g azurite\n      - name: Run Tests\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          mkdir ~/blob_emulator\n          azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n          pytest -sv --timeout=300\n        env:\n          ZARR_TEST_ABS: 1\n          ZARR_V3_EXPERIMENTAL_API: 1\n      - name: Conda info\n        shell: bash -l {0}\n        run: conda info\n      - name: Conda list\n        shell: pwsh\n        run: conda list\n```", "prompt": "Generate a GitHub Workflow named `Python package` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Windows Tests` and its job id is `windows`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.19361251652095857}, {"id": "63c4967d6fc19abdf9c9c492", "level": "level1", "llm_response": "```yaml name: gradio-ui\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nconcurrency:\n  group: deploy-${{ github.ref }}-${{ github.event_name == 'push' || github.event.inputs.fire != null }}\n  cancel-in-progress: true\n\ndefaults:\n  run:\n    working-directory: ui\n\nenv:\n  CI: true\n  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1\n  NODE_OPTIONS: '--max-old-space-size=4096'\n\njobs:\n  quick-checks:\n    name: static checks\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - run: yarn install\n      - run: yarn lint\n      - run: yarn format\n\n  functional-test:\n    name: functional test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - run: yarn install\n      - run: yarn test\n```", "answer": "```yaml name: gradio-ui\n\non:\n  push:\n    branches:\n      - \"main\"\n  pull_request:\n\ndefaults:\n  run:\n    working-directory: ui\n\nenv:\n  CI: true\n  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: \"1\"\n  NODE_OPTIONS: \"--max-old-space-size=4096\"\n\nconcurrency:\n  group: deploy-${{ github.ref }}-${{ github.event_name == 'push' || github.event.inputs.fire != null }}\n  cancel-in-progress: true\n\njobs:\n  quick-checks:\n    name: static checks\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2.2.1\n        with:\n          version: 7\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: pnpm\n          cache-dependency-path: ui/pnpm-lock.yaml\n      - name: install dependencies\n        run: pnpm i --frozen-lockfile\n      - name: formatting check\n        run: pnpm format:check\n      - name: typecheck\n        run: pnpm ts:check\n      - name: unit tests\n        run: pnpm test:run\n  functional-test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2.2.1\n        with:\n          version: 7\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: pnpm\n          cache-dependency-path: ui/pnpm-lock.yaml\n      - name: Install Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.x'\n      - run: cd .. && bash scripts/install_gradio.sh\n      - run: pip install -r ../demo/outbreak_forecast/requirements.txt\n      - run: pnpm install --frozen-lockfile\n      - run: pnpm exec playwright install chromium\n      - run: pnpm test:browser:full\n      - name: Upload failed tests screenshots\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          retention-days: 3\n          name: test-failure-${{ github.run_id }}\n          path: ui/packages/app/test-results\n```", "prompt": "Generate a GitHub Workflow named `gradio-ui` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) there is activity relating to a pull request. The workflow sets 3 environment variables to use: `CI` is set to `True`, `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` is set to `1` and `NODE_OPTIONS` is set to `--max-old-space-size=4096`. For all run steps in the workflow, default working directory is set to ui. Only a single workflow using the deploy-${{ github.ref }}-${{ github.event_name == 'push' || github.event.inputs.fire != null }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has 2 jobs. The 1st job is named `static checks` and its job id is `quick-checks`. The job id of the 2nd job is `functional-test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.25198307550346916}, {"id": "63c496851899db58864d368d", "level": "level1", "llm_response": "```yaml name: Bump repositories\n\non:\n  schedule:\n    - cron: \"0 20 * * *\"\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Bump repositories\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repository: |\n            @golang/go\n            @golang/go-demos\n            @golang/go-tutorials\n          event-type: release\n```", "answer": "```yaml name: Bump repositories\non: \n schedule:\n   - cron: 0 20 * * *\n workflow_dispatch:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Bump cos \ud83d\udd27\n      run: |\n           docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\n           docker cp yq:/usr/bin/yq ./\n           export YQ=$PWD/yq\n           sudo -E bash ./.github/bump_repositories.sh\n           rm -rf yq\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      with:\n        token: ${{ secrets.PAT_TOKEN }}\n        push-to-fork: ci-robbot/c3os\n        commit-message: \":arrow_up: Update repositories\"\n        title: \"Repositories bump\"\n        body: \"Bump of luet repositories\"\n```", "prompt": "Generate a GitHub Workflow named `Bump repositories` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 08:00 pm. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.20858860961694953}, {"id": "63c4945a7843b61269a00a52", "level": "level1", "llm_response": "```yaml name: ci\n\non: [pull_request]\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    uses: ./.github/workflows/docker.yml\n    with:\n      tag: ${{ env.TEST_TAG }}\n```", "answer": "```yaml name: ci\n\non:\n  pull_request:\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          load: true\n          push: false\n          tags: ${{ env.TEST_TAG }}\n      - name: Run\n        run: |\n          docker run --rm ${{ env.TEST_TAG }} ci\n```", "prompt": "Generate a GitHub Workflow named `ci` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow sets an environment variable to use: `TEST_TAG` is set to `protoc-gen-validate:${{ github.sha }}`. The workflow has one job. The job id of the 1st job is `docker`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "context \"env\" is not allowed here. available contexts are \"github\", \"inputs\", \"matrix\", \"needs\", \"strategy\", \"vars\". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details", "filepath": "../tmp/test.yml", "line": 12, "column": 16, "kind": "expression", "snippet": "      tag: ${{ env.TEST_TAG }}\n               ^~~~~~~~~~~~", "end_column": 27}]}, "bleu_score": 0.03397899559377099}, {"id": "63c49698b008460c1df15629", "level": "level1", "llm_response": "```yaml name: Auto Assign PR to Author\non:\n  pull_request_target:\n    types: [opened]\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto Assign PR to Author\n        uses: actions/auto-assign-pr@v2.0.1\n        with:\n          labels: 'assignee=github-actions[auto-assign]'\n```", "answer": "```yaml name: 'Auto Assign PR to Author'\non:\n  pull_request:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    permissions:\n      contents: read  # for kentaro-m/auto-assign-action to fetch config file\n      pull-requests: write  # for kentaro-m/auto-assign-action to assign PR reviewers\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n```", "prompt": "Generate a GitHub Workflow named `Auto Assign PR to Author` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by an event: a pull request is created. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `add-reviews`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.24905353990641074}, {"id": "63c494a87843b61269a02a08", "level": "level1", "llm_response": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade setuptools\n          pip install --upgrade -r requirements.txt\n      - name: Build docs\n        run: |\n          python -m build --sdist --wheel --skip-build --no-deps --out-dir docs\n      - name: Test docs\n        run: |\n          python -m pytest --verbose --cov=docs --cov-report=xml docs/\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install -r requirements/build-docs.txt\n      - run: linkcheckMarkdown docs/ -v -r\n      - run: mkdocs build --verbose\n```", "prompt": "Generate a GitHub Workflow named `Test` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `docs`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.299278262943443}, {"id": "63c495888052faa2781b2739", "level": "level1", "llm_response": "```yaml name: \u2744\ufe0f Lint\n\non: [push, pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  misc:\n    name: misc checker\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint\n\n  ci-eclint:\n    name: ci-eclint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: npm ci\n      - run: npm run ci\n```", "answer": "```yaml name: \u2744\ufe0f Lint\n\non: [push, pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  misc:\n    name: misc checker\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code.\n        uses: actions/checkout@v3.1.0\n      - name: spell check\n        run: |\n          pip install codespell==2.1.0\n          git grep --cached -l '' | xargs codespell --ignore-words=.ignore_words\n      - name: Merge conflict\n        run: |\n          bash ./utils/check-merge-conflict.sh\n      - name: Plugin Code\n        run: |\n          bash ./utils/check-plugins-code.sh\n\n  ci-eclint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v3.1.0\n\n      - name: Setup Nodejs env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: '12'\n\n      - name: Install eclint\n        run: |\n          sudo npm install -g eclint\n\n      - name: Run eclint\n        run: |\n          eclint check\n```", "prompt": "Generate a GitHub Workflow named `\u2744\ufe0f Lint` for a GitHub repository whose primary programming language is Lua. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The 1st job is named `misc checker` and its job id is `misc`. The job id of the 2nd job is `ci-eclint`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.18286167402754333}, {"id": "63c4951b8052faa2781af857", "level": "level1", "llm_response": "```yaml name: Docs Build\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n      - name: Install dependencies\n        run: npm ci\n      - name: Build docs\n        run: npm run docs:build\n      - name: Deploy docs\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          branch: gh-pages\n          folder: docs/build\n          clean: true\n```", "answer": "```yaml name: Docs Build\n\non:\n  # allows to manually run the job at any time\n  workflow_dispatch:\n  \n  # run on every push on the master branch\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install deps\n        run: |\n          npm install vuepress -D\n          npm install macaca-ecosystem -D\n\n      - name: Build docs\n        run: npm run docs:build\n\n      - name: Deploy to GitHub Pages\n        if: success()\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs_dist\n```", "prompt": "Generate a GitHub Workflow named `Docs Build` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `docs-build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3509453229492134}, {"id": "63c494027843b612699fe5e4", "level": "level1", "llm_response": "```yaml name: \"CLA\"\n\non: [pull_request]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: npm\n      - run: npm ci\n      - run: npm run check\n```", "answer": "```yaml name: CLA\non: [pull_request]\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: ./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"\n```", "prompt": "Generate a GitHub Workflow named `CLA` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.29867232047430825}, {"id": "63c495277843b61269a05c66", "level": "level1", "llm_response": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  schedule:\n    - cron: '0 10 * * *'\n\njobs:\n  freezed:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Flutter\n        uses: flutter/github-script-action@v2\n        with:\n          flutter-version: 3.8.1\n      - name: Setup Dart\n        uses: dart-lang/setup-dart@v3\n      - name: Freeze\n        run: flutter pub frozen\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  schedule:\n    # runs the CI everyday at 10AM\n    - cron: \"0 10 * * *\"\n\njobs:\n  freezed:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        package:\n          - packages/freezed\n          - packages/freezed_annotation\n        channel:\n          - master\n          - stable\n        dependencies:\n          - get\n          - downgrade\n        exclude:\n          - channel: master\n            dependencies: downgrade\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: ${{ matrix.channel }}\n          cache: ${{ matrix.channel == 'stable' }}\n\n      # It is executed separately\n      - name: Removing example folder\n        run: rm -rf example\n        working-directory: ${{ matrix.package }}\n\n      - name: Install dependencies\n        run: |\n          flutter pub ${{ matrix.dependencies }}\n        working-directory: ${{ matrix.package }}\n\n      - name: Check format\n        # Check format only on master\n        if: matrix.channel == 'master'\n        run: flutter format --set-exit-if-changed .\n        working-directory: ${{ matrix.package }}\n\n      - name: Generate\n        run: |\n          if grep -q build_runner \"pubspec.yaml\"; then\n            flutter pub run build_runner build --delete-conflicting-outputs\n          fi\n        working-directory: ${{ matrix.package }}\n\n      - name: Analyze\n        run: flutter analyze\n        working-directory: ${{ matrix.package }}\n\n      - name: Run tests\n        run: |\n          if grep -q \"name: example\" \"pubspec.yaml\"; then\n            flutter test\n          else\n            dart test\n          fi\n        working-directory: ${{ matrix.package }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) there is activity relating to a pull request. 3) the scheduled time has come: at 10:00 am. The workflow has one job. The job id of the 1st job is `freezed`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.03642889081359076}, {"id": "63c4968933b087f6bde2ca37", "level": "level1", "llm_response": "```yaml name: e2e-kind-upgrades\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  workflow_dispatch:\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Set up kind\n        uses: docker://k8s.gcr.io/kind:v0.12.0\n      - name: Set up kubectl\n        uses: docker://k8s.gcr.io/kubectl:$(kubectl version -v --client-only --format '{{.ClientVersion.GitCommit}}')\n      - name: Run e2e-kind-upgrades\n        run: |\n          make e2e-kind-upgrades\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: e2e-kind-upgrades\n\non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: End-to-end (k3d)\n        run: make test/e2e/k3d-upgrades\n```", "prompt": "Generate a GitHub Workflow named `e2e-kind-upgrades` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. 3) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `e2e-kind-upgrades`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.35098926451099244}, {"id": "63c494147843b612699fedb4", "level": "level1", "llm_response": "```yaml name: test-chart-testing-action\n\non: [pull_request]\n\njobs:\n  test_ct_action:\n    name: Install chart-testing and test presence in path\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install chart-testing\n        run: |\n          curl -sL https://github.com/chart-testing/chart-testing/releases/download/v1.1.0/chart-testing-1.1.0-linux-amd64.tar.gz | tar -xzvf -\n          sudo mv ./chart-testing-1.1.0-linux-amd64/chart-testing /usr/local/bin/chart-testing\n      - name: Test chart-testing presence in path\n        run: |\n          chart-testing --version\n\n  test_ct_action_custom:\n    name: Install Custom chart-testing and test presence in path\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Custom chart-testing\n        run: |\n          curl -sL https://github.com/chart-testing/custom-chart-testing/releases/download/v1.1.0/custom-chart-testing-1.1.0-linux-amd64.tar.gz | tar -xzvf -\n          sudo mv ./custom-chart-testing-1.1.0-linux-amd64/custom-chart-testing /usr/local/bin/custom-chart-testing\n      - name: Test custom chart-testing presence in path\n        run: |\n          custom-chart-testing --version\n```", "answer": "```yaml name: test-chart-testing-action\n\non: [pull_request]\n\njobs:\n  test_ct_action:\n    runs-on: ubuntu-latest\n\n    name: Install chart-testing and test presence in path\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install chart-testing\n      uses: ./\n    - name: Check install!\n      run: |\n        ct version\n        CT_VERSION_OUTPUT=$(ct version 2>&1 /dev/null)\n        ACTUAL_VERSION=$(echo \"$CT_VERSION_OUTPUT\" | grep Version | rev | cut -d ' ' -f1 | rev)\n        if [[ $ACTUAL_VERSION != 'v3.7.1' ]]; then\n          echo 'should be v3.7.1'\n          exit 1\n        else\n          exit 0\n        fi\n      shell: bash\n    - name: Check root directory\n      run: |\n        if [[ $(git diff --stat) != '' ]]; then\n          echo 'should be clean'\n          exit 1\n        else\n          exit 0\n        fi\n\n  test_ct_action_custom:\n    runs-on: ubuntu-latest\n\n    name: Install Custom chart-testing and test presence in path\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install chart-testing\n      uses: ./\n      with:\n        version: 'v3.5.1'\n        yamllint_version: '1.27.1'\n        yamale_version: '3.0.4'\n    - name: Check install!\n      run: |\n        ct version\n        CT_VERSION_OUTPUT=$(ct version 2>&1 /dev/null)\n        ACTUAL_VERSION=$(echo \"$CT_VERSION_OUTPUT\" | grep Version | rev | cut -d ' ' -f1 | rev)\n        if [[ $ACTUAL_VERSION != 'v3.5.1' ]]; then\n          echo 'should be v3.5.1'\n          exit 1\n        else\n          exit 0\n        fi\n      shell: bash\n    - name: Check root directory\n      run: |\n        if [[ $(git diff --stat) != '' ]]; then\n          echo 'should be clean'\n          exit 1\n        else\n          exit 0\n        fi\n```", "prompt": "Generate a GitHub Workflow named `test-chart-testing-action` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The 1st job is named `Install chart-testing and test presence in path` and its job id is `test_ct_action`. The 2nd job is named `Install Custom chart-testing and test presence in path` and its job id is `test_ct_action_custom`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.12552466227243253}, {"id": "63c494fc8052faa2781aead3", "level": "level1", "llm_response": "```yaml name: Update Release List\n\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    branches: [master]\n    types:\n      - completed\n\npermissions:\n  contents: write\n\nenv:\n  USER_NAME: ctags-win32 CI\n  USER_EMAIL: ctags-win32-ci@users.noreply.github.com\n  COL_RED: \"\\033[31m\"\n  COL_GREEN: \"\\033[32m\"\n  COL_YELLOW: \"\\033[33m\"\n  COL_RESET: \"\\033[m\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Update Release List\n        uses: ctags-win32/update-release-list@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Update Release List\n\non:\n  #release:\n  #  types: [published]\n  workflow_run:\n    workflows: [\"Build\"]\n    branches: [master]\n    types: [completed]\n\npermissions:\n  contents: write # to update wiki\n\nenv:\n  # Account for committing\n  USER_NAME: \"ctags-win32 CI\"\n  USER_EMAIL: \"ctags-win32-ci@users.noreply.github.com\"\n\n  # Escape sequences\n  COL_RED: \"\\x1b[31m\"\n  COL_GREEN: \"\\x1b[32m\"\n  COL_YELLOW: \"\\x1b[33m\"\n  COL_RESET: \"\\x1b[m\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        path: main\n\n    - uses: actions/checkout@v3\n      with:\n        repository: \"${{ github.repository }}.wiki\"\n        path: wiki\n\n    - name: Update Release List\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        cd main\n        latest=$(cat ctagsver.txt)\n        cd ../wiki\n        ../main/scripts/update-release-list.py\n        git add Releases-in-*.md\n        if git diff HEAD --quiet; then\n          echo ${COL_YELLOW}No updates.${COL_RESET}\n        else\n          git config --local user.name ${USER_NAME}\n          git config --local user.email ${USER_EMAIL}\n          git commit -a -m \"Update Release List to ${latest}\"\n          git push origin HEAD\n        fi\n```", "prompt": "Generate a GitHub Workflow named `Update Release List` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the workflow named Build is completed on a branch whose name matches master. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 6 environment variables to use: `USER_NAME` is set to `ctags-win32 CI`, `USER_EMAIL` is set to `ctags-win32-ci@users.noreply.github.com`, `COL_RED` is set to `\u001b[31m`, `COL_GREEN` is set to `\u001b[32m`, `COL_YELLOW` is set to `\u001b[33m` and `COL_RESET` is set to `\u001b[m`. The workflow has one job. The job id of the 1st job is `update`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.14596132041565818}, {"id": "63c4949a8052faa2781ac0b0", "level": "level1", "llm_response": "```yaml name: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: npm\n      - name: Install dependencies\n        run: npm ci\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-pnpm-modules\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ${{ github.workspace }}/.next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          restore-keys: |\n            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-\n      - uses: pnpm/action-setup@v2.2.4\n        with:\n          version: 7.x.x\n          run_install: true\n      - name: Build project\n        run: |\n          yarn build\n          yarn lint\n        env:\n          CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node.js CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.15397989212435453}, {"id": "63c4967e1899db58864d33dd", "level": "level1", "llm_response": "```yaml name: Lint\n\non:\n  pull_request_target:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - run: make lint-commit-message\n      - run: make lint-commit-message-branch\n  lint-go:\n    name: Go\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - run: make lint-go\n      - run: make lint-go-branch\n```", "answer": "```yaml #\n# DO NOT EDIT THIS FILE\n#\n# It is automatically copied from https://github.com/pion/.goassets repository.\n# If this repository should have package specific CI config,\n# remove the repository name from .goassets/.github/workflows/assets-sync.yml.\n#\n# If you want to update the shared CI config, send a PR to\n# https://github.com/pion/.goassets instead of this repository.\n#\n\nname: Lint\non:\n  pull_request:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n        - uses: actions/checkout@v3\n          with:\n            fetch-depth: 0\n\n        - name: Commit Message\n          run: .github/lint-commit-message.sh\n\n        - name: File names\n          run: .github/lint-filename.sh\n\n        - name: Functions\n          run: .github/lint-disallowed-functions-in-library.sh\n\n        - name: Logging messages should not have trailing newlines\n          run: .github/lint-no-trailing-newline-in-log-messages.sh\n\n  lint-go:\n    name: Go\n    permissions:\n      contents: read\n      pull-requests: read\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.45.2\n          args: $GOLANGCI_LINT_EXRA_ARGS\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created, the title or body of a pull request is edited or a pull request's head branch is updated. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The 1st job is named `Metadata` and its job id is `lint-commit-message`. The 2nd job is named `Go` and its job id is `lint-go`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.19678016770323659}, {"id": "63c4947b8052faa2781ab631", "level": "level1", "llm_response": "```yaml name: Publish Test Results\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types:\n      - completed\n\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Install Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Test\n        run: ./gradlew test\n\n      - name: Publish Test Results\n        uses: actions/upload-artifact@v3\n        with:\n          name: gradle-test-results\n          path: |\n            gradle-build-results/\n```", "answer": "```yaml # Publishing of unit test results has to be a separate workflow in order to support forked PRs\n# See https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches\nname: Publish Test Results\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion != 'skipped'\n\n    steps:\n      - name: Download and Extract Artifacts\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        run: |\n          mkdir -p artifacts && cd artifacts\n\n          artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\n          gh api \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\n          do\n            IFS=$'\\t' read name url <<< \"$artifact\"\n            gh api $url > \"$name.zip\"\n            unzip -d \"$name\" \"$name.zip\"\n          done\n\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          commit: ${{ github.event.workflow_run.head_sha }}\n          event_file: artifacts/Event File/event.json\n          event_name: ${{ github.event.workflow_run.event }}\n          junit_files: |\n            artifacts/**/surefire-reports/*.xml\n            artifacts/**/failsafe-reports/TEST-*.xml\n```", "prompt": "Generate a GitHub Workflow named `Publish Test Results` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: the workflow named CI is completed. The workflow has one job. The 1st job is named `Test Results` and its job id is `test-results`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17671955756797883}, {"id": "63c4964a1e33648075779a84", "level": "level1", "llm_response": "```yaml name: Publish Terminal.Gui\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  publish:\n    name: Build and Publish to Nuget.org\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: 6.0.x\n      - name: Restore dependencies\n        run: dotnet restore\n      - name: Restore dependencies\n        run: dotnet build\n      - name: Publish\n        run: dotnet publish -c Release -r win-x64 -p:PublishSingleFile=true -p:PublishExclude=\"*.Tests.dll\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Publish Terminal.Gui\non:\n  push:\n    tags:\n      - v*\n\njobs:\n\n  publish:\n    name: Build and Publish to Nuget.org\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0 #fetch-depth is needed for GitVersion\n\n    - name: Install and calculate the new version with GitVersion \n      uses: gittools/actions/gitversion/setup@v0.9.13\n      with:\n        versionSpec: 5.x\n\n    - name: Determine Version\n      uses: gittools/actions/gitversion/execute@v0.9.13\n      id: gitversion # step id used as reference for output values\n\n    - name: Display GitVersion outputs\n      run: |\n        echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n        echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v3.0.1\n      with:\n        dotnet-version: 6.0.100\n\n    - name: Install dependencies\n      run: dotnet restore\n\n    - name: Build Release\n      run: |\n        dotnet-gitversion /updateprojectfiles\n        dotnet build --no-restore -c Release\n\n    - name: Pack\n      run: dotnet pack -c Release --include-symbols -p:Version='${{ steps.gitversion.outputs.SemVer }}' \n\n    - name: Test to generate Code Coverage Report\n      run: |\n        dotnet test --verbosity normal --collect:\"XPlat Code Coverage\" --settings UnitTests/coverlet.runsettings\n        mv -v UnitTests/TestResults/*/*.* UnitTests/TestResults/\n\n    - name: Create Test Coverage Badge\n      uses: simon-k/dotnet-code-coverage-badge@v1.0.0\n      id: create_coverage_badge\n      with:\n        label: Unit Test Coverage\n        color: brightgreen\n        path: UnitTests/TestResults/coverage.opencover.xml\n        gist-filename: code-coverage.json\n        # https://gist.github.com/migueldeicaza/90ef67a684cb71db1817921a970f8d27\n        gist-id: 90ef67a684cb71db1817921a970f8d27\n        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}   \n\n    - name: Print Code Coverage\n      run: |\n        echo \"Code coverage percentage: ${{steps.create_coverage_badge.outputs.percentage}}%\"\n        echo \"Badge data: ${{steps.create_coverage_badge.outputs.badge}}\"\n        \n    #- name: Prep GitHub Packages\n    #  run: dotnet nuget add source --username tig --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github \"https://nuget.pkg.github.com/tig/index.json\"\n\n    #- name: Publish to GitHub packages \n    #  run: dotnet nuget push NStack/bin/Release/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }}  --source \"github\"\n\n    - name: Publish to NuGet.org\n      run: dotnet nuget push Terminal.Gui/bin/Release/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json\n```", "prompt": "Generate a GitHub Workflow named `Publish Terminal.Gui` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Build and Publish to Nuget.org` and its job id is `publish`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.037511645943556}, {"id": "63c4950a7843b61269a0501c", "level": "level1", "llm_response": "```yaml name: Integration test on schedule (minimal)\n\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Python 3.10\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.10\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run integration tests\n        run: |\n          pip install -r requirements.txt\n          ./scripts/integration-test.sh\n```", "answer": "```yaml name: Integration test on schedule (minimal)\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    secrets: inherit\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: \"['1.22', '1.23']\"\n```", "prompt": "Generate a GitHub Workflow named `Integration test on schedule (minimal)` for a GitHub repository whose primary programming language is Mustache. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Start integration test (minimal)` and its job id is `start-integration-test-minimal`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.286544364102027}, {"id": "63c496891e3364807577b43d", "level": "level1", "llm_response": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check Actions rate limit\n        uses: actions/github-script@v6\n        with:\n          script: |\n            import { rateLimit } from 'actions/rate-limit';\n\n            const response = await rateLimit({\n              actions: 'github-actions',\n              actionsPerMinute: 60,\n              actionsPerHour: 3600,\n              actionsPerDay: 86400,\n              actionsPerWeek: 604800,\n            });\n\n            console.log(response);\n```", "answer": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        env:\n          TOKEN: ${{ github.token }}\n        run: |\n          curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n```", "prompt": "Generate a GitHub Workflow named `Check Actions rate limit` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Check Actions rate limit` and its job id is `check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3525849054547703}, {"id": "63c4969e1899db58864d41ee", "level": "level1", "llm_response": "```yaml name: Auto message on Creating Issue.\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: |\n            Hello @${{ github.repository_owner }}, thank you for opening an issue.\n            We will review the issue and respond to the issue as soon as possible.\n            Thank you for your contribution.\n          can-close-issue: true\n```", "answer": "```yaml name: Auto message on Creating Issue.\n\non:\n\n  issues:\n\n    types: [opened]\n\njobs:\n\n  greeting:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Create comment for issue\n\n      if: github.event_name =='issues' \n\n      uses: peter-evans/create-or-update-comment@v1\n\n      with:\n\n        issue-number: ${{tojson(github.event.issue.number)}}\n\n        body: |\n\n            Hi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n```", "prompt": "Generate a GitHub Workflow named `Auto message on Creating Issue.` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `greeting`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"can-close-issue\" is not defined in action \"actions/first-interaction@v1\". available inputs are \"issue-message\", \"pr-message\", \"repo-token\"", "filepath": "../tmp/test.yml", "line": 18, "column": 11, "kind": "action", "snippet": "          can-close-issue: true\n          ^~~~~~~~~~~~~~~~", "end_column": 26}]}, "bleu_score": 0.310467317263057}, {"id": "63c496941899db58864d3d85", "level": "level1", "llm_response": "```yaml name: release-please\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release-please:\n    runs-on: macos-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Release-Please\n        uses: release-please/release-please@v3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          package-name: org.mvcs\n          version: v1.0.0\n          git-auth-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release-please\non:\n   push:\n      branches:\n         - master\njobs:\n   release-please:\n      runs-on: ubuntu-latest\n      steps:\n         - uses: GoogleCloudPlatform/release-please-action@v2\n           with:\n            token: ${{ secrets.GITHUB_TOKEN }}\n            release-type: simple\n            version-file: \"./version.txt\"\n            package-name: release-please-action\n            default-branch: master\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is Swift. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.38047531731529327}, {"id": "63c496486fc19abdf9c9b0d5", "level": "level1", "llm_response": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: '0 12 * * 1'\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Upgrade dependencies\n        uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n          cache: 'npm'\n      - name: Run pre-commit\n        run: yarn run pre-commit\n      - name: Run install\n        run: yarn install\n      - name: Run build\n        run: yarn build\n      - name: Run test\n        run: yarn test\n      - name: Run coverage\n        run: yarn coverage\n      - name: Run coverage report\n        uses: codecov/codecov-action@v3\n        with:\n          fail_ci_if_error: true\n          file: coverage/lcov.info\n          flags: --parallel\n```", "answer": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: \"0 12 * * 1\"\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: latest\n      - uses: actions/setup-node@v3\n        with:\n          cache: \"pnpm\"\n          node-version-file: \".nvmrc\"\n          registry-url: \"https://npm.pkg.github.com\"\n      - run: rm -rf pnpm-lock.yaml **/node_modules/\n      - run: pnpm install\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}\n      - uses: EndBug/add-and-commit@v9\n        with:\n          message: \"chore(deps): upgrade versions\"\n```", "prompt": "Generate a GitHub Workflow named `Dependencies` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 pm, only on monday. 2) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Upgrade dependencies` and its job id is `upgrade`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.21204447447896524}, {"id": "63c4954d8052faa2781b0e83", "level": "level1", "llm_response": "```yaml name: xgo\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Build\n        run: |\n          go build -v ./...\n      - name: Test\n        run: |\n          go test -v ./...\n```", "answer": "```yaml name: xgo\n\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - 'v*'\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - 'master'\n    paths-ignore:\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      -\n        name: Build artifacts\n        uses: docker/bake-action@v2\n        with:\n          targets: artifact-all\n      -\n        name: Move artifacts\n        run: |\n          mv ./dist/**/* ./dist/\n      -\n        name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: xgo\n          path: ./dist/*\n          if-no-files-found: error\n      -\n        name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, 'refs/tags/v')\n        with:\n          draft: true\n          files: |\n            dist/*.tar.gz\n            dist/*.zip\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `xgo` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a tag whose name matches v*. When all the path names of push event match patterns in the paths-ignore filter(**.md), the workflow will not run. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. When all the path names of pull_request event match patterns in the paths-ignore filter(**.md), the workflow will not run. Only a single workflow using the xgo-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2537754696997319}, {"id": "63c4957d8052faa2781b229c", "level": "level1", "llm_response": "```yaml name: Build site nightly\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.10\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build site\n        run: |\n          make site\n\n      - name: Deploy to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          branch: gh-pages\n          folder: docs/_site\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nname: Build site nightly\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: curl\n        env:\n          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}\n        uses: wei/curl@v1\n        with:\n          args: -X POST -d '{}' \"$NETLIFY_BUILD_HOOK\"\n```", "prompt": "Generate a GitHub Workflow named `Build site nightly` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The 1st job is named `dot-release` and its job id is `dot-release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.19916868043573685}, {"id": "63c4968633b087f6bde2c8ea", "level": "level1", "llm_response": "```yaml name: Run checks\n\non:\n  push:\n    branches: [ main ]\n    tags: [ \"0*\" ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - name: Install dependencies\n        run: |\n          pip install tox\n      - name: Run tox\n        run: tox -e py37\n```", "answer": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"[0-9]+.[0-9]+.[0-9]+\"\n      - \"[0-9]+.[0-9]+.[0-9]+rc[0-9]+\"\n\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment:\n          - \"py36\"\n          - \"py37\"\n          - \"flake8\"\n\n        include:\n          - environment: \"py36\"\n            python: \"3.6\"\n          - environment: \"py37\"\n            python: \"3.7\"\n          - environment: \"flake8\"\n            python: \"3.7\"\n\n    container:\n      image: python:${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install tox\n      - name: Run tox\n        run: |\n          tox -e ${{ matrix.environment }}\n```", "prompt": "Generate a GitHub Workflow named `Run checks` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a tag whose name matches [0-9]+.[0-9]+.[0-9]+ or a tag whose name matches [0-9]+.[0-9]+.[0-9]+rc[0-9]+. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `tox`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1843518891747688}, {"id": "63c494e67843b61269a04123", "level": "level1", "llm_response": "```yaml name: CI\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n```", "answer": "```yaml name: CI\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: '2.10.4'\n          channel: 'stable'\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --set-exit-if-changed --dry-run .\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch whose name matches **. When all the path names of pull_request event match patterns in the paths-ignore filter(.github/**, .vscode/** or README.md), the workflow will not run. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22414284795966982}, {"id": "63c4957b8052faa2781b219f", "level": "level1", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches: [main]\n    paths: [\"**.go\"]\n  pull_request:\n    branches: [main]\n    paths: [\"**.go\"]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Build\n        run: make build\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches: [ main ]\n    paths:\n      - '**.go'\n  pull_request:\n    branches: [ main ]\n    paths:\n      - '**.go'\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.18\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Test\n      run: go test -cover -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(**.go), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. Only if at least one path of pull_request event matches a pattern in the paths filter(**.go), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4481920097735407}, {"id": "63c495928052faa2781b2bc1", "level": "level1", "llm_response": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Create Release\n        uses: action-rabbit/create-release-action@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          prerelease: false\n```", "answer": "```yaml \n# https://github.com/actions/create-release\nname: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Create Release` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Create Release` and its job id is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5983555441905621}, {"id": "63c496686fc19abdf9c9bea4", "level": "level1", "llm_response": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n      - name: Run update_release_draft action\n        uses: ./.github/actions/update_release_draft\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          VERSION: ${{ github.event.repository.default_branch }}\n          DESCRIPTION: |\n            This release is based on the latest version of ${{ github.event.repository.default_branch }}.\n            Please check out the [CHANGELOG](https://github.com/${{ github.repository }}/blob/${{ github.event.repository.default_branch }}/CHANGELOG.md) for details.\n            This release will be closed after the next version has been released.\n      - name: Create a release on GitHub\n        uses: github/hook-action@v2.0.0\n        with:\n          action: release\n          token: ${{ secrets.GITHUB_TOKEN }}\n          tag_name: ${{ github.event.repository.default_branch }}\n          body: |\n            This release is based on the latest version of ${{ github.event.repository.default_branch }}.\n            Please check out the [CHANGELOG](https://github.com/${{ github.repository }}/blob/${{ github.event.repository.default_branch }}/CHANGELOG.md) for details.\n            This release will be closed after the next version has been released.\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Drafts/updates the next repository release` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.12441292528389558}, {"id": "63c4951f8052faa2781af9e5", "level": "level1", "llm_response": "```yaml name: IRC Notification\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - name: 'Checkout'\n      uses: actions/checkout@v3\n    - name: 'Install Node.js'\n      uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: 'Install Dependencies'\n      run: npm install\n    - name: 'Run Tests'\n      run: npm run test:ci\n    - name: 'Send Notification'\n      uses: akhlas58/irc-notifier-action@v1.0.0\n      with:\n        server: irc.freenode.net\n        port: 6667\n        nick: ${{ github.repository }}\n        channel: ${{ github.event.repository.full_name }}#${{ github.sha }}\n        username: ${{ github.repository }}\n        password: ${{ secrets.IRC_PAT }}\n```", "answer": "```yaml name: \"IRC Notification\"\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online'\n        with:\n          channel: \"#cool-dev\"\n          nickname: github-online\n          message: |\n            ${{ toJson(github.event) }}\n```", "prompt": "Generate a GitHub Workflow named `IRC Notification` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1346557578272821}, {"id": "63c496981899db58864d3f73", "level": "level1", "llm_response": "```yaml name: Triage tasks\non: pull_request\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: triage-${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n      - name: Setup Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '3.0'\n      - name: Setup Bundler\n        run: bundle --path vendor/bundle --jobs 4 --retry 3 --bundler-cache --bundler-cache-dir vendor/bundle/cache\n      - name: Run triage\n        run: bundle exec rake triage\n```", "answer": "```yaml name: Triage tasks\n\non: pull_request_target\n\nconcurrency:\n  group: \"triage-${{ github.event.number }}\"\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n      - name: Label pull request\n        uses: Homebrew/actions/label-pull-requests@master\n        if: always()\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n          def: |\n            - label: new cask\n              status: added\n              path: Casks/.+\n\n            - label: marked for removal/rejection\n              status: removed\n              path: Casks/.+\n\n            - label: documentation\n              path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n            - label: bump-cask-pr\n              pr_body_content: Created with `brew bump-cask-pr`\n\n            - label: missing description\n              path: Casks/.+\n              missing_content: \\n  desc .+\\n\n\n            - label: appcast migration needed\n              path: Casks/.+\n              content: \\n  appcast .+\\n\n```", "prompt": "Generate a GitHub Workflow named `Triage tasks` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the triage-${{ github.event.number }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `triage`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.11602383602123409}, {"id": "63c494a27843b61269a02781", "level": "level1", "llm_response": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '16 8 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v6\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 7 days with no activity. Remove stale label or comment or this will be closed in 7 days.'\n          stale-pr-message: 'This PR is stale because it has been open 7 days with no activity. Remove stale label or comment or this will be closed in 7 days.'\n          days-before-stale: 7\n          days-before-close: 7\n          exempt-issue-labels: 'stale'\n          exempt-pr-labels: 'stale'\n          exempt-pr-assignees: 'tobeynoots'\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '16 8 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v5\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        ascending: true\n        stale-issue-message: 'This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions'\n        stale-pr-message: 'This PR has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by an event: the scheduled time has come: at 08:16 am. The workflow has one job. The job id of the 1st job is `stale`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.33949413283630386}, {"id": "63c494a97843b61269a02a50", "level": "level2", "llm_response": "```yaml name: pytorch1_7_1-cuda11_0\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.8'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Build\n        run: |\n          python setup.py install\n          python -m pytest --cov=src -v\n      - name: Test\n        run: |\n          python -m pytest --cov=src --cov-report=xml -v\n```", "answer": "```yaml name: pytorch1_7_1-cuda11_0\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu110\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.7.1-cu110\n      develop_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_7_1-cuda11_0` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1526889170908157}, {"id": "63c496986fc19abdf9c9cf90", "level": "level2", "llm_response": "```yaml name: Issue Check\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        if: github.event.issue.pull_request\n        run: |\n          gh issue close -f \"This issue was automatically closed because it was opened by a bot. We are working on fixing this.\"\n      - name: Create comment\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const {createIssueComment} = require('actions/github-script');\n            const {github, context} = context;\n\n            const comment = await createIssueComment({\n              ...context.repo,\n              body: 'This issue was automatically closed because it was opened by a bot. We are working on fixing this.'\n            });\n```", "answer": "```yaml name: 'Issue Check'\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == false\n        name: Close Issue\n        uses: peter-evans/close-issue@v1\n        with:\n          comment: |\n            Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == true\n        name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi!\n            <br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n            <br/>Have you looked at the wiki yet? https://docs.ombi.app/\n            <br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n            <br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n            <br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n            <br/> Thanks!\n            <br/> Ombi Bot.\n```", "prompt": "Generate a GitHub Workflow named `Issue Check` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `issueCheck`. The job `issueCheck` has 2 steps. The 1st step is named `Close Issue`. The 2nd step is named `Create comment`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.06973655405686303}, {"id": "63c494da7843b61269a03d4f", "level": "level2", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\npermissions:\n  contents: write\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install \ud83c\udf31\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n\n      - name: Build \ud83d\udd27\n        run: yarn build\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\njobs:\n  build-and-deploy:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install \ud83c\udf31\n        run: |\n          sudo apt-get install -y pandoc\n      - name: Build \ud83d\udd27\n        run: |\n          ./run build itch\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is GDScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 3 environment variables to use: `BUTLER_API_KEY` is set to `${{ secrets.BUTLER_API_KEY }}`, `ITCHIO_USERNAME` is set to `${{ secrets.ITCHIO_USERNAME }}` and `ITCHIO_GAME` is set to `${{ secrets.ITCHIO_GAME }}`. The workflow has one job. The job id of the 1st job is `build-and-deploy`. The job `build-and-deploy` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install \ud83c\udf31`. The 3rd step is named `Build \ud83d\udd27`. The 4th step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4907563212038869}, {"id": "63c496686fc19abdf9c9be9c", "level": "level2", "llm_response": "```yaml name: Unit testing (Ubuntu)\non:\n  push:\n    branches:\n      - main\n      - ver_* # or dev\n    paths:\n      - '**.py'\n  pull_request:\n    branches:\n      - main\n      - ver_* # or dev\n    paths:\n      - '**.py'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Test with pytest\n        run: |\n          python -m pytest\n```", "answer": "```yaml name: Unit testing (Ubuntu)\non:\n  push:\n    paths:\n      - '**.py'\n    branches: \n      - main\n      - 'ver_*'\n      - dev\n  pull_request:\n    paths:\n      - '**.py'\n    branches: \n      - main\n      - 'ver_*'\n      - dev\n\njobs:\n  build:\n    strategy:\n      matrix:\n        # os: [macos-latest, windows-latest, ubuntu-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']  # , '3.11-dev'\n    # runs-on: ${{ matrix.os }}\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        python -m pip install pytest coverage\n        pip install -r requirements.txt\n    - name: Test with pytest\n      env:\n        DEBUG_API_ID: ${{ secrets.DEBUG_API_ID }}\n        DEBUG_API_SECRET: ${{ secrets.DEBUG_API_SECRET }}\n        CROSS_DEBUG_KEY: ${{ secrets.CROSS_DEBUG_KEY }}\n        CROSS_DEBUG_SECRET: ${{ secrets.CROSS_DEBUG_SECRET }}\n      run: |\n        coverage run --source=src --omit=src/falconpy/debug.py -m pytest -s --ignore-glob=**/manual/*\n        coverage report\n```", "prompt": "Generate a GitHub Workflow named `Unit testing (Ubuntu)` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a branch whose name matches ver_* or a branch named dev. Only if at least one path of push event matches a pattern in the paths filter(**.py), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main, a branch whose name matches ver_* or a branch named dev. Only if at least one path of pull_request event matches a pattern in the paths filter(**.py), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Python ${{ matrix.python-version }}`. The 3rd step is named `Install dependencies`. The 4th step is named `Test with pytest`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.44005005049488527}, {"id": "63c49698b008460c1df15628", "level": "level2", "llm_response": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types:\n      - opened\n      - labeled\n  pull_request:\n    types:\n      - opened\n      - labeled\n\npermissions:\n  contents: read\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\njobs:\n  add_to_gh_projects:\n    runs-on: ubuntu-latest\n    name: Adds issues to GH projects\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ env.GITHUB_TOKEN }}\n          script: |\n            const { issue, project, issueId, issueUrl } = context.payload;\n            const { owner, repository } = project;\n            const issueId = issueId || issue.number;\n            const issueUrl = issueUrl || issue.html_url;\n            const issues = await github.issues.listIssuesByRepo({ owner, repo, state: 'open' });\n            const issuesToBeAdded = issues.filter(issue => issue.number === issueId);\n            if (issuesToBeAdded.length === 0) {\n              console.log(`No issues to add to project ${project.name}`);\n              return;\n            }\n            const { addLabelsToProject } = github.rest.projects;\n            await addLabelsToProject({\n              project_id: project.id,\n              name: 'issues',\n              labels: ['added-to-issues']\n            });\n```", "answer": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, labeled]\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\npermissions:\n  contents: read\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n```", "prompt": "Generate a GitHub Workflow named `add-to-gh-projects` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by multiple events: 1) an issue is opened or a label is added to an issue. 2) a pull request is created or a label is added to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}`. The workflow has one job. The 1st job is named `Adds issues to GH projects` and its job id is `add_to_gh_projects`. The job `add_to_gh_projects` has one step. The 1st step is named `Add labeled issues to GH projects`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17985665935757578}, {"id": "63c494f67843b61269a0479e", "level": "level2", "llm_response": "```yaml name: Sync-To-Gitlab\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request:\n    branches:\n      - master\n      - master-template\n  workflow_dispatch:\n\njobs:\n  sync:\n    name: Sync To Gitlab\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Mirror\n        uses: gitlab/actions/gitlab-mirror@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          source: master\n          target: ${{ github.sha }}\n```", "answer": "```yaml name: Sync-To-Gitlab\nrun-name: Sync-To-Gitlab ${{ github.sha }}\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request_target:\n    types:\n      - closed\n    branches:\n      - master\n      - master-template\n  workflow_dispatch:\n\n\njobs:\n  sync:\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref_name }}\n      cancel-in-progress: true\n    name: \"Sync To Gitlab\"\n    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Mirror\n        env:\n          input_git_config_user_name: ${{ secrets.GITLAB_USERNAME }}\n          input_git_config_user_email: ${{ secrets.GITLAB_EMAIL }}\n          input_git_remote_url: ${{ secrets.GITLAB_URL }}\n          input_git_push_options: --force\n        run: |\n          git config --global user.name \"${{ env.input_git_config_user_name }}\"\n          git config --global user.email \"${{ env.input_git_config_user_email }}\"\n          git clone \"https://github.com/${{ github.repository }}.git\" \"git\"\n          cd git\n          git remote set-url origin \"${{ env.input_git_remote_url }}\"\n          git push ${{ env.input_git_push_options }} origin ${{ github.ref_name }}:${{ github.ref_name }}\n#      - name: Mirror + trigger CI\n#        uses: SvanBoxel/gitlab-mirror-and-ci-action@master\n#        with:\n#          args: \"https://gitlab.com/Zerek-Cheng/Simple-Assets-Platform\"\n#        env:\n#          FORCE_PUSH: \"true\"\n#          GITLAB_HOSTNAME: \"gitlab.com\"\n#          GITLAB_USERNAME: \"Zerek-Cheng\"\n#          GITLAB_PASSWORD: ${{ secrets.GITLAB_PASSWORD }}\n#          GITLAB_PROJECT_ID: \"40146411\"\n#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Sync-To-Gitlab` for a GitHub repository whose primary programming language is Java. The name for workflow runs is set to `Sync-To-Gitlab ${{ github.sha }}`. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named master-template. 2) a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named master or a branch named master-template. 3) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Sync To Gitlab` and its job id is `sync`. The job `sync` has 2 steps. The 1st step is named `Checkout`. The 2nd step is named `Mirror`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1280183748604526}, {"id": "63c496561899db58864d23de", "level": "level2", "llm_response": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "answer": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Sqlite` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.sqlite.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/sqlite/** or roles/sqlite/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `sqlite`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494298052faa2781a98f8", "level": "level2", "llm_response": "```yaml name: Linux build with address sanitizer enabled\n\non:\n  schedule:\n    - cron: 0 0 * * 0\n  workflow_dispatch:\n\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Compiler version\n        run: g++ --version\n      - name: Build\n        run: |\n          cd linux\n          make -j$(nproc)\n      - name: Run tests\n        run: |\n          cd linux\n          make test\n      - name: Run examples\n        run: |\n          cd linux\n          make examples\n```", "answer": "```yaml name: Linux build with address sanitizer enabled\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n    - uses: actions/checkout@v3\n    - name: Compiler version\n      run: |\n        gcc --version\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --log_level=message\n    - name: Run examples\n      run: |\n        make check-examples\n```", "prompt": "Generate a GitHub Workflow named `Linux build with address sanitizer enabled` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `sanitize`. The job `sanitize` has 5 steps. The 1st step is named ``. The 2nd step is named `Compiler version`. The 3rd step is named `Build`. The 4th step is named `Run tests`. The 5th step is named `Run examples`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.49101333490619714}, {"id": "63c493cd7843b612699fd710", "level": "level2", "llm_response": "```yaml name: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - name: Delete artifacts\n        uses: actions/github-script@v6\n        with:\n          script: |\n            await github.rest.repos.deleteArtifact({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              artifact: context.payload.data.artifacts[0].id,\n            })\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "prompt": "Generate a GitHub Workflow named `Clean` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The 1st job is named `Delete Artifacts` and its job id is `delete-artifacts`. The job `delete-artifacts` has one step. The 1st step is named `Delete artifacts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.02126144990826207}, {"id": "63c4956e8052faa2781b1ca5", "level": "level2", "llm_response": "```yaml name: Conventional PR\n\non:\n  pull_request_target:\n    branches:\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: semantic-pull-request\n        uses: peter-evans/semantic-pull-request@v5.2.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          config-path: .github/semantic-pull-request.yml\n```", "answer": "```yaml name: Conventional PR\n\n# Controls when the action will run. \non:\n  pull_request:\n    branches:\n    - develop\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: semantic-pull-request\n        # Internal Unity mirror available at jesseo/action-semantic-pull-request, but actions from private repos aren't supported, so continue to use the public one below\n        uses: amannn/action-semantic-pull-request@b7a9a97cb10fa6e1ae02647e718798175f6b1f1d\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Provide custom types if you don't want the default ones from https://www.conventionalcommits.org\n          types: # optional\n          # Configure which scopes are allowed.\n          #scopes: # optional\n          # Configure that a scope must always be provided.\n          #requireScope: # optional\n          # Configure additional validation for the subject based on a regex. E.g. '^(?![A-Z]).+$' ensures the subject doesn't start with an uppercase character.\n          #subjectPattern: # optional\n          # If `subjectPattern` is configured, you can use this property to override the default error message that is shown when the pattern doesn't match. The variables `subject` and `title` can be used within the message.\n          #subjectPatternError: # optional\n          # For work-in-progress PRs you can typically use draft pull requests from Github. However, private repositories on the free plan don't have this option and therefore this action allows you to opt-in to using the special '[WIP]' prefix to indicate this state. This will avoid the validation of the PR title and the pull request checks remain pending. Note that a second check will be reported if this is enabled.\n          #wip: # optional\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub will suggest using that commit message instead of the PR title for the merge commit, and it's easy to commit this by mistake. Enable this option to also validate the commit message for one commit PRs.\n          validateSingleCommit: true # optional\n```", "prompt": "Generate a GitHub Workflow named `Conventional PR` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `build`. The job `build` has one step. The 1st step is named `semantic-pull-request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47859396199382986}, {"id": "63c494287843b612699ff643", "level": "level2", "llm_response": "```yaml name: README to PDF\non:\n  workflow_dispatch:\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.9\"\n      - run: pip install mkdocs-material\n      - name: Commit files\n        run: |\n          git config user.name \"github-actions[bot]\"\n          git config user.email \"44292000+github-actions[bot]@users.noreply.github.com\"\n          git add README.md\n          git commit -m \"Update README.md\"\n      - name: Push changes\n        uses: ad-m/github-push-action@v0.8.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: README to PDF\n# This workflow is triggered on pushes to the repository.\non:\n#   push:\n#     branches:\n#       - main\n#     paths:\n#       - 'README.md'\n    \n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          input_dir: .\n          output_dir: .\n          build_html: false\n          table_of_contents: false\n      - uses: actions/upload-artifact@v3\n        with:\n          name: python-engineer-roadmap\n          path: README.pdf\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.pdf\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Generate PDF file\"\n          fi\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n#       - name: Commit changes\n#         uses: EndBug/add-and-commit@v9\n#         with:\n#           default_author: github_actions\n#           add: 'README.pdf'\n#           new_branch: generate-pdf\n#           push: origin generate-pdf --set-upstream --force\n```", "prompt": "Generate a GitHub Workflow named `README to PDF` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Build PDF` and its job id is `converttopdf`. The job `converttopdf` has 5 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Commit files`. The 5th step is named `Push changes`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.39566748699383036}, {"id": "63c494578052faa2781aa8bb", "level": "level2", "llm_response": "```yaml name: Build\n\non:\n  # Check the push event to trigger the workflow\n  push:\n    branches:\n      - main\n\nenv:\n  CODECOV_TOKEN: 2fc0d617-8e9a-47d7-ab58-52fa92b23741\n  MAIN_GO_VER: 1.16\n  MAIN_HOST_OS: ubuntu-latest\n\njobs:\n  go_test_and_coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repositary\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ env.MAIN_GO_VER }}\n\n      - name: Get Dependencies\n        id: go\n        run: |\n          GO111MODULE=on go mod download\n          go get -v -t -d ./...\n\n      - name: Show Environments\n        run: |\n          echo \"GO111MODULE=$GO111MODULE\" >> $GITHUB_ENV\n          echo \"GO_VERSION=$GO_VERSION\" >> $GITHUB_ENV\n          echo \"GOOS=$GOOS\" >> $GITHUB_ENV\n          echo \"GOARCH=$GOARCH\" >> $GITHUB_ENV\n          echo \"GOLANG_VERSION=$GOLANG_VERSION\" >> $GITHUB_ENV\n\n      - name: Test and Generate Coverage Report\n        run: |\n          make test\n          make coverage\n\n      - name: Upload Coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage.txt\n          flags: --parallel\n          env: ${{ env.CODECOV_TOKEN }}\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branchs:\n    - 'master'\n    - 'feature/**'\n    - 'dev/**'\n\nenv:\n  CODECOV_TOKEN: '2fc0d617-8e9a-47d7-ab58-52fa92b23741'\n  MAIN_GO_VER: '1.16'\n  MAIN_HOST_OS: 'ubuntu-latest'\n\njobs:\n  go_test_and_coverage:\n    strategy:\n      max-parallel: 6\n      matrix:\n        GO_VER: ['1.16']\n        HOST_OS: ['ubuntu-latest']\n\n    runs-on: ${{ matrix.HOST_OS }}\n\n    steps:\n\n    - name: Checkout Repositary\n      uses: actions/checkout@v3\n\n    - name: Setup Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.GO_VER }}\n      id: go\n\n    - name: Get Dependencies\n      run: |\n        echo GO_VER = ${{ matrix.GO_VER }}\n        go get golang.org/x/tools/cmd/cover\n        go install github.com/mattn/goveralls || go get github.com/mattn/goveralls\n        go get .\n\n    - name: Show Environments\n      run: |\n        echo repo status ======== && git status\n        echo GITHUB_REF = ${{ env.GITHUB_REF }}\n        echo GITHUB_REF_NAME = ${{ env.GITHUB_REF_NAME }}\n        echo GO_VER = ${{ matrix.GO_VER }}\n        echo HOST_OS = ${{ matrix.HOST_OS }}\n        which goveralls\n        echo envs ======== && printenv\n\n    - name: Test and Generate Coverage Report\n      run: |\n        go test -v -failfast -cover -covermode=atomic -coverprofile=coverage.out\n\n    # - name: Upload Coverage to Goveralls\n    #   run: |\n    #     goveralls -coverprofile=coverage.out -repotoken ${{ env.COVERALLS_TOKEN }}\n\n    # - name: Upload Coverage to Codecov\n    #   if: ${{ matrix.GO_VER }} == ${{ env.MAIN_GO_VER }}\n    #   run: |\n    #     bash <(curl -s https://codecov.io/bash) -t ${{ env.CODECOV_TOKEN }}\n\n    # - name: Convert Coverage file to lcov format\n    #   uses: jandelgado/gcov2lcov-action@v1.0.8\n    #   with:\n    #     infile: ./coverage.out\n    #     outfile: ./coverage.lcov\n\n    - name: Upload Coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        files: ./coverage.out\n        fail_ci_if_error: true\n        flags: unittests\n        name: codecov-umbrella\n        path_to_write_report: ./coverage/codecov_report.txt\n        verbose: true\n\n    # - name: Coveralls GitHub Action\n    #   uses: coverallsapp/github-action@1.1.3\n    #   with:\n    #     path-to-lcov: ./coverage.lcov\n    #     github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow sets 3 environment variables to use: `CODECOV_TOKEN` is set to `2fc0d617-8e9a-47d7-ab58-52fa92b23741`, `MAIN_GO_VER` is set to `1.16` and `MAIN_HOST_OS` is set to `ubuntu-latest`. The workflow has one job. The job id of the 1st job is `go_test_and_coverage`. The job `go_test_and_coverage` has 6 steps. The 1st step is named `Checkout Repositary`. The 2nd step is named `Setup Go` and its id is `go`. The 3rd step is named `Get Dependencies`. The 4th step is named `Show Environments`. The 5th step is named `Test and Generate Coverage Report`. The 6th step is named `Upload Coverage to Codecov`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"env\" is not defined in action \"codecov/codecov-action@v3\". available inputs are \"commit_parent\", \"directory\", \"dry_run\", \"env_vars\", \"fail_ci_if_error\", \"file\", \"files\", \"flags\", \"full_report\", \"functionalities\", \"gcov\", \"gcov_args\", \"gcov_executable\", \"gcov_ignore\", \"gcov_include\", \"move_coverage_to_trash\", \"name\", \"network_filter\", \"network_prefix\", \"os\", \"override_branch\", \"override_build\", \"override_commit\", \"override_pr\", \"override_tag\", \"root_dir\", \"slug\", \"swift\", \"swift_project\", \"token\", \"upstream_proxy\", \"url\", \"verbose\", \"version\", \"working-directory\", \"xcode\", \"xcode_archive_path\", \"xtra_args\"", "filepath": "../tmp/test.yml", "line": 52, "column": 11, "kind": "action", "snippet": "          env: ${{ env.CODECOV_TOKEN }}\n          ^~~~", "end_column": 14}]}, "bleu_score": 0.24677633098608975}, {"id": "63c4959c7843b61269a08c2d", "level": "level2", "llm_response": "```yaml on:\n  push:\n    paths:\n      - '.github/workflows/install.yml'\n  schedule:\n    - cron: '17 0 * * 1'\n\npermissions:\n  contents: read\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          cargo install --path .\n```", "answer": "```yaml permissions:\n  contents: read\n\non:\n  push:\n    paths:\n      - \".github/workflows/install.yml\"\n  schedule:\n    - cron: \"17 0 * * 1\"\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          cargo install cargo-mutants\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/install.yml), the workflow runs. 2) the scheduled time has come: at 12:17 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `cargo-install`. The job `cargo-install` has one step. The 1st step is named `cargo-install`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.581105590832792}, {"id": "63c495707843b61269a07a00", "level": "level2", "llm_response": "```yaml name: Scorecards supply-chain security\n\non:\n  # For more information, see https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#branch-protection-rule-event\n  branch_protection_rule:\n  schedule:\n    - cron: '43 17 * * 1'\n  push:\n    branches:\n      - master\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Run analysis\n        uses: github/codeql-action/analyze@v2\n        with:\n          languages: \"typescript\"\n          # CodeQL options passed to CodeQL\n          # Example: `--languages=javascript,python\n          #          --query-file=query.yml\n          #          --report-features=file-operations,security-events\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: scorecards\n          path: |\n            ./results\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results/sarif/scan_results.sarif\n```", "answer": "```yaml name: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: '43 20 * * 1'\n  push:\n    branches: [ master ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      # Used to receive a badge. (Upcoming feature)\n      id-token: write\n      actions: read\n      contents: read\n    \n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@3e15ea8318eee9b333819ec77a36aca8d39df13e # v1.1.1\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # (Optional) Read-only PAT token. Uncomment the `repo_token` line below if:\n          # - you want to enable the Branch-Protection check on a *public* repository, or\n          # - you are installing Scorecards on a *private* repository\n          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action#authentication-with-pat.\n          # repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n\n          # Publish the results for public repositories to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results. \n          # For private repositories, `publish_results` will automatically be set to `false`, regardless \n          # of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n      \n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) activity related to a branch protection rule occurs. 2) the scheduled time has come: at 08:43 pm, only on monday. 3) The workflow would run whenever there is a push event to: a branch named master. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. The 2nd step is named `Run analysis`. The 3rd step is named `Upload artifact`. The 4th step is named `Upload to code-scanning`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"languages\" is not defined in action \"github/codeql-action/analyze@v2\". available inputs are \"add-snippets\", \"category\", \"check_name\", \"checkout_path\", \"cleanup-level\", \"expect-error\", \"matrix\", \"output\", \"ram\", \"ref\", \"sha\", \"skip-queries\", \"threads\", \"token\", \"upload\", \"upload-database\", \"wait-for-processing\"", "filepath": "../tmp/test.yml", "line": 26, "column": 11, "kind": "action", "snippet": "          languages: \"typescript\"\n          ^~~~~~~~~~", "end_column": 20}]}, "bleu_score": 0.2601054927634169}, {"id": "63c4969e1899db58864d41ef", "level": "level2", "llm_response": "```yaml name: Auto message on pr merge\non:\n  pull_request_target:\n    types: [closed]\n\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: snyk/action-automessage@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          message: |\n            This PR has been merged and the release notes have been updated. \n            Thank you for your contribution.\n```", "answer": "```yaml name: Auto message on pr merge\n\non:\n\n  pull_request_target:\n\n    types: [closed]\n\njobs:\n\n  auto-response:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - uses: derekprior/add-autoresponse@master\n\n      env:\n\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      with:\n\n        respondableId: ${{ github.event.pull_request.node_id }}\n\n        response: \"Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).\"\n\n        author: ${{ github.event.pull_request.user.login }}\n\n        exemptedAuthors: \"Amit366\"\n```", "prompt": "Generate a GitHub Workflow named `Auto message on pr merge` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a pull request is closed. The workflow has one job. The job id of the 1st job is `auto-response`. The job `auto-response` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2771257960099169}, {"id": "63c495038052faa2781aede6", "level": "level2", "llm_response": "```yaml name: Linux Testing\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Miniconda\n        uses: actions/setup-miniconda@v2\n        with:\n          channels: conda-forge\n          python-version: \"3.10\"\n\n      - name: Create Conda environment with the rights deps\n        run: |\n          conda create -n rights-deps \\\n            python=3.10 \\\n            pip=20.2.2 \\\n            numpy=1.22.2 \\\n            matplotlib=3.6.1 \\\n            scikit-learn=0.24.0 \\\n            scikit-image=0.15.0 \\\n            scipy=1.7.1 \\\n            scikit-learn-nightly=0.24.0 \\\n            pytorch=1.12.1 torchvision=0.15.1 torchaudio=2.1.0\n\n      - name: Install dependencies\n        run: |\n          conda activate rights-deps\n          pip install -e .\n\n      - name: Tests\n        run: |\n          conda activate rights-deps\n          pip install -e .\n          pip install -e .\n          pip install -e .\n          pip install -e .\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: build\n          path: out\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Linux Testing\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n        numpy_version: ['>=1.22.0', '==1.20.*']\n        exclude:\n          - python-version: '3.10'\n            numpy_version: '==1.20.*'\n    services:\n      redis:\n        image: redis\n        # Set health checks to wait until redis has started\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n      mongodb:\n        image: mongo:4.4.11\n        ports:\n          - 27017:27017\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Setup Miniconda\n      uses: conda-incubator/setup-miniconda@master\n      with:\n          channels: conda-forge\n          python-version: ${{ matrix.python-version }}\n      env:\n        ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n    # Runs a set of commands using the runners shell\n    - name: Create Conda environment with the rights deps\n      shell: \"bash -l {0}\"\n      run: |\n        conda create -n zarr-env python==${{matrix.python-version}} bsddb3 numcodecs lmdb pip nodejs flake8 mypy\n        conda activate zarr-env\n        npm install -g azurite\n    - name: Install dependencies\n      shell: \"bash -l {0}\"\n      run: |\n        conda activate zarr-env\n        python -m pip install --upgrade pip\n        python -m pip install -U pip setuptools wheel codecov line_profiler\n        python -m pip install -rrequirements_dev_minimal.txt numpy${{matrix.numpy_version}} -rrequirements_dev_optional.txt pymongo redis\n        python -m pip install .\n        python -m pip freeze\n    - name: Tests\n      shell: \"bash -l {0}\"\n      env:\n        COVERAGE_FILE: .coverage.${{matrix.python-version}}.${{matrix.numpy_version}}\n        ZARR_TEST_ABS: 1\n        ZARR_TEST_MONGO: 1\n        ZARR_TEST_REDIS: 1\n        ZARR_V3_EXPERIMENTAL_API: 1\n      run: |\n        conda activate zarr-env\n        mkdir ~/blob_emulator\n        azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n        pytest --cov=zarr --cov-config=.coveragerc --doctest-plus --cov-report xml --cov=./ --timeout=300\n    - uses: codecov/codecov-action@v3\n      with:\n        #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos\n          #files: ./coverage1.xml,./coverage2.xml # optional\n          #flags: unittests # optional\n          #name: codecov-umbrella # optional\n          #fail_ci_if_error: true # optional (default = false)\n        verbose: true # optional (default = false)\n```", "prompt": "Generate a GitHub Workflow named `Linux Testing` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named `Setup Miniconda`. The 3rd step is named `Create Conda environment with the rights deps`. The 4th step is named `Install dependencies`. The 5th step is named `Tests`. The 6th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.13456770460188222}, {"id": "63c4967e33b087f6bde2c5c4", "level": "level2", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27\n        run: npm install && npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          branch: gh-pages\n          folder: dist\n```", "answer": "```yaml name: Build and Deploy\non:\n  push:\n    branches:\n    - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n        \n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist #  The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build-and-deploy`. The job `build-and-deploy` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install and Build \ud83d\udd27`. The 3rd step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.23504606516886553}, {"id": "63c496926fc19abdf9c9cd93", "level": "level2", "llm_response": "```yaml name: \"Contributor License Agreement (CLA)\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - synchronize\n  issue_comment:\n    types:\n      - created\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request_target' && github.event.action == 'opened'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: erwinbeich/contributor-license-agreement-action@v1\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          issue-message: |\n            This pull request has been reviewed and signed by one or more of the following:\n            - [ ] @chris-schmitt\n            - [ ] @vitaly-michailov\n          pr-message: |\n            This pull request has been reviewed and signed by one or more of the following:\n            - [ ] @chris-schmitt\n            - [ ] @vitaly-michailov\n```", "answer": "```yaml name: Contributor License Agreement (CLA)\n\non:\n  pull_request_target:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          cla-token: ${{ secrets.CLA_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Contributor License Agreement (CLA)` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) a pull request is created or a pull request's head branch is updated. 2) a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `cla`. The job `cla` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.07556990716504995}, {"id": "63c496836fc19abdf9c9c720", "level": "level2", "llm_response": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496741e3364807577abc2", "level": "level2", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495f37843b61269a0b108", "level": "level2", "llm_response": "```yaml name: PR Approval Bypass Notifier\n\non:\n  pull_request:\n    types: [closed]\n    branches: [main]\n\npermissions:\n  pull-requests: read\n\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    if: github.event.action == 'closed'\n    steps:\n      - name: Fail If No Approval\n        if: github.event.pull_request.user.login != 'github-actions[bot]'\n        run: echo \"No approval from the bot, PR will be closed\" >> $GITHUB_ERROR\n        continue-on-error: true\n\n      - name: Slack Notification\n        if: github.event.pull_request.user.login != 'github-actions[bot]'\n        uses: JamesIves/github-action-slack@v2.0.1\n        with:\n          webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n          message: \"PR ${{ github.event.pull_request.number }} has been closed by a bot.  Please remove the bot from the PR and send a message to the team team to remove the bot from the PR. \"\n          title: \"PR Approval Bypass\"\n```", "answer": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types:\n      - closed\n    branches:\n      - main\npermissions:\n  pull-requests: read\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: ${{ github.event.pull_request.merged }}\n        env:\n          AUTH_HEADER: 'Authorization: token ${{ secrets.GITHUB_TOKEN }}'\n          JSON_HEADER: 'Content-Type: application/json'\n          REVIEWS_URL: 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews'\n        run: |\n          curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n            | jq -e '. | map({user: .user.login, state: .state})\n                       | reduce .[] as $x ({}; .[$x.user] = $x.state)\n                       | to_entries | map(.value)\n                       | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n      - name: Slack Notification\n        if: ${{ failure() }}\n        run: |\n          jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n```", "prompt": "Generate a GitHub Workflow named `PR Approval Bypass Notifier` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `approval`. The job `approval` has 2 steps. The 1st step is named `Fail If No Approval`. The 2nd step is named `Slack Notification`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.18724578588632768}, {"id": "63c4957d8052faa2781b22a0", "level": "level2", "llm_response": "```yaml name: 'Close stale'\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5\n        with:\n          days-before-stale: 60\n          days-before-close: 14\n          stale-issue-message: 'This issue has been marked as stale because it has been open 60 days with no activity. It will be closed in 14 days. Thank you for your contributions.'\n          stale-pr-message: 'This PR has been marked as stale because it has been open 60 days with no activity. It will be closed in 14 days. Thank you for your contributions.'\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          exempt-issue-labels: 'help wanted,security,enhancement,bug'\n          exempt-pr-labels: 'help wanted,security,enhancement,bug'\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `Close stale` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 01:00 am. The workflow has one job. The job id of the 1st job is `stale`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.13547887352938257}, {"id": "63c4959f7843b61269a08d83", "level": "level2", "llm_response": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "answer": "```yaml name: CompatHelper\n\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.2.0]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "prompt": "Generate a GitHub Workflow named `CompatHelper` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `CompatHelper`. The job `CompatHelper` has 2 steps. The 1st step is named `Pkg.add(\"CompatHelper\")`. The 2nd step is named `CompatHelper.main()`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6430521388427011}, {"id": "63c494298052faa2781a98fa", "level": "level2", "llm_response": "```yaml name: Check test times\n\non: [push, pull_request]\n\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Cache\n      uses: actions/cache@v3\n      with:\n        path: ~/cache\n        key: ${{ runner.os }}-test-times-${{ hashFiles('**/Makefile') }}\n        restore-keys: |\n          ${{ runner.os }}-test-times-\n    - name: Setup\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y git make\n    - name: Build\n      run: |\n        make -C ./test\n    - name: Run tests\n      run: |\n        make -C ./test test\n    - name: Save test times\n      run: |\n        cat tests/test-time.txt | tr -d '\\n' | cut -d' ' -f2- > ./cache/test-times\n    - name: Check test times\n      run: |\n        git diff --exit-code tests/test-time.txt\n```", "answer": "```yaml name: Check test times\non: [push, pull_request]\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Cache\n      uses: hendrikmuhs/ccache-action@v1.2\n      with:\n        key: linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}\n        restore-keys: |\n          linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-\n          linux-ci-build-times-${{ github.ref }}-\n          linux-ci-build-times-refs/heads/master-\n          linux-ci-build-times-\n    - name: Setup\n      run: |\n        sudo apt update\n        sudo apt install -y libboost-dev autoconf automake libtool ccache\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n    - name: Save test times\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-reports\n        path: ./all.xml\n    - name: Check test times\n      run: |\n        python ./tools/check_test_times.py\n```", "prompt": "Generate a GitHub Workflow named `Check test times` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check-test-times`. The job `check-test-times` has 7 steps. The 1st step is named ``. The 2nd step is named `Cache`. The 3rd step is named `Setup`. The 4th step is named `Build`. The 5th step is named `Run tests`. The 6th step is named `Save test times`. The 7th step is named `Check test times`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36993327372415125}, {"id": "63c496981899db58864d3f6f", "level": "level2", "llm_response": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    types: [completed]\n  pull_request:\n    types: [opened, labeled, unlabeled]\n  schedule:\n    - cron: '30 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Re-run CI workflow\n        uses: actions-cool/re-run-workflow@v2.0.0\n        with:\n          workflow_id: ${{ github.event.workflow_id }}\n          token: ${{ github.token }}\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows:\n      - CI\n    types:\n      - completed\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    - cron: '30 */3 * * *' # every 3 hours (30 minutes past the hour)\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    if: >\n      startsWith(github.repository, 'Homebrew/') &&\n      (\n        github.event.label.name == 'ci-requeue' ||\n        github.event.label.name == 'ci-retry' ||\n        github.event.label.name == 'ci-skip-appcast' ||\n        github.event.label.name == 'ci-skip-install' ||\n        github.event.label.name == 'ci-syntax-only' ||\n        !github.event.label.name\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          once-label: ci-requeue\n          continuous-label: ci-retry\n          trigger-labels: ci-skip-appcast,ci-skip-install,ci-syntax-only\n          workflow: ci.yml\n```", "prompt": "Generate a GitHub Workflow named `Re-run Workflow` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) the workflow named CI is completed. 2) a pull request is closed, a label is added to a pull request or a label is removed from a pull request. 3) the scheduled time has come: at 30 minutes past the hour, every 3 hours. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `rerun-workflow`. The job `rerun-workflow` has one step. The 1st step is named `Re-run CI workflow`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "no workflow is configured for \"workflow_run\" event", "filepath": "../tmp/test.yml", "line": 4, "column": 3, "kind": "events", "snippet": "  workflow_run:\n  ^~~~~~~~~~~~~", "end_column": 15}, {"message": "invalid CRON format \"30 * * *\" in schedule event: expected exactly 5 fields, found 4: [30 * * *]", "filepath": "../tmp/test.yml", "line": 9, "column": 13, "kind": "events", "snippet": "    - cron: '30 * * *'\n            ^~~", "end_column": 15}]}, "bleu_score": 0.1583351165617881}, {"id": "63c493bc7843b612699fd432", "level": "level2", "llm_response": "```yaml name: CI\n\non: [pull_request, push]\n\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci\n      - name: XO\n        run: npm run xo\n\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci\n      - name: build\n        run: npm run build\n```", "answer": "```yaml env: {}\n\n# FILE GENERATED WITH: npx ghat fregante/ghatemplates/node\n# SOURCE: https://github.com/fregante/ghatemplates\n# OPTIONS: {\"exclude\":[\"jobs.Test\"]}\n\nname: CI\non:\n  - pull_request\n  - push\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci || npm install\n      - name: XO\n        run: npx xo\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci || npm install\n      - name: build\n        run: npm run build\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) a commit or tag is pushed, or a repository is cloned. The workflow has 2 jobs. The job id of the 1st job is `Lint`. The job `Lint` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `install`. The 4th step is named `XO`. The job id of the 2nd job is `Build`. The job `Build` has 3 steps. The 1st step is named ``. The 2nd step is named `install`. The 3rd step is named `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6716441932309151}, {"id": "63c495a68052faa2781b342a", "level": "level2", "llm_response": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches:\n      - master\n      - 1.x\n      - release\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'maven'\n          java-version: 17\n      - name: Publish package\n        run: mvn -B -Dgpg.skip -Dgpg.keyserver=\"hkp://keyserver.ubuntu.com:80\" -Dgpg.passphrase=$GPG_PASSPHRASE release:deploy\n        env:\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```", "answer": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches: [master, 1.x, release]\n\njobs:\n  release:\n    if: github.repository == 'jdbc-observations/datasource-proxy'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: 8\n          distribution: temurin\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}\n          gpg-passphrase: MAVEN_GPG_PASSPHRASE\n      - name: Publish package\n        run: ./mvnw --batch-mode deploy -DskipTests=true -Pgithub-ossrh\n        env:\n          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n\n```", "prompt": "Generate a GitHub Workflow named `Release to Maven Central (Deploy Snapshot or Stage Release)` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master, a branch named 1.x or a branch named release. The workflow has one job. The job id of the 1st job is `release`. The job `release` has 3 steps. The 1st step is named ``. The 2nd step is named `Set up Maven Central Repository`. The 3rd step is named `Publish package`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3927978545576413}, {"id": "63c495167843b61269a0553c", "level": "level2", "llm_response": "```yaml name: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  routeissue:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: routeissue\n        uses: action-rf/route-issue@v1.0.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          project: DEPR\n          project_key: DEPR\n          project_id: 14585\n          labels: 'feature'\n```", "answer": "```yaml # Run the workflow that adds new tickets that are either:\n# - labelled \"DEPR\"\n# - title starts with \"[DEPR]\"\n# - body starts with \"Proposal Date\" (this is the first template field)\n# to the org-wide DEPR project board\n\nname: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Add newly created DEPR issues to the DEPR project board` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `routeissue`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3299692680904696}, {"id": "63c495e88052faa2781b50cc", "level": "level2", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496876fc19abdf9c9c8bb", "level": "level2", "llm_response": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Checkout Data Source Repo\n        run: |\n          cd /home/runner/work/FeedGenerator/FeedGenerator\n          git checkout main\n          git fetch --prune --all\n          git reset --hard origin/main\n          git checkout main\n          git merge --abort\n          git fetch --prune --all\n          git reset --hard origin/main\n\n      - name: Process Data\n        run: |\n          cd /home/runner/work/FeedGenerator/FeedGenerator\n          ./scripts/process-feed-data.sh\n\n      - name: Deploy to Firebase\n        uses: Firebase/FirebaseDeploy@v1\n        with:\n          project-id: feedgenerator\n          auth-domain: feedgenerator-43d00.firebaseapp.com\n          private-key: ${{ secrets.FIREBASE_PRIVATE_KEY }}\n          storage-bucket: feedgenerator.appspot.com\n          messagingSenderId: feedgenerator\n          appId: feedgenerator\n```", "answer": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n      - name: Install Dependencies\n        run: yarn\n      - name: Checkout Data Source Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n        with:\n          repository: smartcontractkit/reference-data-directory\n          path: data-source\n          token: ${{ secrets.GH_API_KEY }}\n      # - name: Read Data Source\n      #   run: cat data-source/package.json\n      - name: Process Data\n        run: yarn process\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91\n        with:\n\n          args: -c firebase-addresses.json deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n          PROJECT_ID: cl-docs-addresses\n```", "prompt": "Generate a GitHub Workflow named `Build and Publish Feed Resources` for a GitHub repository whose primary programming language is Solidity. This workflow will be triggered by an event: the scheduled time has come: every 30 minutes. The workflow has one job. The 1st job is named `Update latest feed data from source repo` and its job id is `build-feeds`. The job `build-feeds` has 5 steps. The 1st step is named `Checkout Repo`. The 2nd step is named `Install Dependencies`. The 3rd step is named `Checkout Data Source Repo`. The 4th step is named `Process Data`. The 5th step is named `Deploy to Firebase`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.453095298117583}, {"id": "63c495197843b61269a056bc", "level": "level2", "llm_response": "```yaml name: 'Code Scanning - Action'\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['go']\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  pull_request:\n    branches: [dev, master]\n    types: [opened, synchronize]\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      # - name: Autobuild\n      #   uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `Code Scanning - Action` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created or a pull request's head branch is updated. The workflow would run whenever there is a pull_request event targeting: a branch named dev or a branch named master. The workflow has one job. The job id of the 1st job is `CodeQL-Build`. The job `CodeQL-Build` has 3 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Initialize CodeQL`. The 3rd step is named `Perform CodeQL Analysis`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5874738710135075}, {"id": "63c494ee8052faa2781ae44b", "level": "level2", "llm_response": "```yaml name: Add PR Deploy Badge\n\non:\n  deployment_status:\n    types: [created]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Kb Pull Request Deployment Badges\"\n        uses: dawidd6/action-kb-deploy-badge@v1.1.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          target_branch: main\n          repo_token: ${{ secrets.REPO_TOKEN }}\n```", "answer": "```yaml name: Add PR Deploy Badge\n# https://docs.github.com/en/actions/reference/events-that-trigger-workflows\non: [deployment_status]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    # only runs this job on successful deploy\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - name: Kb Pull Request Deployment Badges\n      uses: kibibit/kb-badger-action@v2\n      with:\n        github-token: ${{secrets.GITHUB_TOKEN}}\n        badge-left: demo\n        badge-right: application\n        badge-logo: heroku\n        badge-path: api\n        badge2-left: demo\n        badge2-right: api-docs\n        badge2-color: 85EA2D\n        badge2-logo: swagger\n        badge2-path: api/docs\n```", "prompt": "Generate a GitHub Workflow named `Add PR Deploy Badge` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a new deployment status is created. The workflow has one job. The job id of the 1st job is `badge`. The job `badge` has one step. The 1st step is named `Kb Pull Request Deployment Badges`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "\"types\" cannot be specified for \"deployment_status\" Webhook event", "filepath": "../tmp/test.yml", "line": 4, "column": 3, "kind": "events", "snippet": "  deployment_status:\n  ^~~~~~~~~~~~~~~~~~", "end_column": 20}]}, "bleu_score": 0.18058193127616695}, {"id": "63c4968b33b087f6bde2caaa", "level": "level2", "llm_response": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: \"6.0.x\"\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n      - name: Verify .NET Core\n        run: dotnet --info\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore\n      - name: Publish ASFEnhance on Windows\n        run: |\n          cd \"C:\\path\\to\\your\\project\\\"\n          dotnet publish -c Release -r win-x64 -p:Version=\"1.0.0\"\n          cd \"C:\\path\\to\\your\\project\\\"\n          move \"C:\\path\\to\\your\\project\\bin\\Release\\net6.0-windows\\AsfEnhance.dll\" \"C:\\path\\to\\your\\project\\bin\\Release\\net6.0-windows\\AsfEnhance.exe\"\n      - name: Upload ASFEnhance-zh-Hans\n        uses: actions/upload-artifact@v3\n        with:\n          name: ASFEnhance-zh-Hans\n          path: \"C:\\path\\to\\your\\project\\bin\\Release\\net6.0-windows\\AsfEnhance.exe\"\n      - name: Upload ASFEnhance-en-US\n        uses: actions/upload-artifact@v3\n        with:\n          name: ASFEnhance-en-US\n          path: \"C:\\path\\to\\your\\project\\bin\\Release\\net6.0-windows\\AsfEnhance.exe\"\n```", "answer": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: windows-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.0.2\n        with:\n          submodules: recursive\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v2.1.0\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n      - name: Verify .NET Core\n        run: dotnet --info\n\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore ASFEnhance -p:ContinuousIntegrationBuild=true --nologo\n\n      - name: Publish ASFEnhance on Windows\n        shell: pwsh\n        run: |\n          $script = \"./build.ps1\";\n          Set-Location ${{ github.workspace }};\n          powershell $script;\n\n      - name: Upload ASFEnhance-zh-Hans\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-zh-Hans\n          path: dist/ASFEnhance-zh-Hans.zip\n\n      - name: Upload ASFEnhance-en-US\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-en-US\n          path: dist/ASFEnhance-en-US.zip\n```", "prompt": "Generate a GitHub Workflow named `AutoBuild-Dev` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) a commit or tag is pushed, or a repository is cloned. The workflow sets an environment variable to use: `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `publish`. The job `publish` has 7 steps. The 1st step is named `Checkout code`. The 2nd step is named `Setup .NET Core`. The 3rd step is named `Verify .NET Core`. The 4th step is named `Restore packages in preparation for ASFEnhance publishing`. The 5th step is named `Publish ASFEnhance on Windows`. The 6th step is named `Upload ASFEnhance-zh-Hans`. The 7th step is named `Upload ASFEnhance-en-US`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 34: found unknown escape character", "filepath": "../tmp/test.yml", "line": 34, "column": 0, "kind": "syntax-check", "snippet": "          path: \"C:\\path\\to\\your\\project\\bin\\Release\\net6.0-windows\\AsfEnhance.exe\"", "end_column": 0}]}, "bleu_score": 0.5344443555004516}, {"id": "63c494b78052faa2781acd9d", "level": "level2", "llm_response": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    workflows: [\"Continuous Integration\"]\n    types:\n      - completed\n\njobs:\n  merge-me:\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: actions/merge-request-merge-action@v2.2.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          commit_message: Merge me!\n```", "answer": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Continuous Integration'\n\njobs:\n  merge-me:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n    timeout-minutes: 5\n```", "prompt": "Generate a GitHub Workflow named `Merge me!` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: the workflow named Continuous Integration is completed. The workflow has one job. The 1st job is named `Merge me!` and its job id is `merge-me`. The job `merge-me` has one step. The 1st step is named `Merge me!`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.42950121466447194}, {"id": "63c494a37843b61269a027ed", "level": "level2", "llm_response": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test -v ./...\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\n\nname: CI\n\njobs:\n  test:\n    ## We want to define a strategy for our job\n    strategy:\n      ## this will contain a matrix of all the combinations\n      ## we wish to test again:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n\n    ## Defines the platform for each test run\n    runs-on: ${{ matrix.platform }}\n\n    ## the steps that will be run through for each version and platform\n    ## combination\n    steps:\n    ## sets up go based on the version\n    - name: Install Go\n      uses: actions/setup-go@v3.3.0\n      with:\n        go-version: ${{ matrix.go-version }}\n\n    ## checks out our code locally, so we can work with the files\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n\n    ## runs go test ./...\n    - name: Build\n      run: go build ./...\n\n    ## runs go test ./...\n    - name: Test\n      run: go test ./...\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `test`. The job `test` has 4 steps. The 1st step is named `Install Go`. The 2nd step is named `Checkout code`. The 3rd step is named `Build`. The 4th step is named `Test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4337331996024962}, {"id": "63c4941e7843b612699ff1f7", "level": "level2", "llm_response": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update PR description\n        uses: actions-cool/pr-link-helper@v1\n        with:\n          pr-number: ${{ github.event.pull_request.number }}\n          demo-url: https://github.com/nextauthjs/next-auth-nextjs-demo\n```", "answer": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    permissions:\n      pull-requests: write\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const pullRequestId = context.payload.pull_request.number\n            const pullRequestBranch = context.payload.pull_request.head.ref\n\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: pullRequestId,\n              body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n            });\n```", "prompt": "Generate a GitHub Workflow named `Demo link` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a pull request is created. The workflow has one job. The 1st job is named `Add demo link to PR description` and its job id is `add_demo_link`. The job `add_demo_link` has one step. The 1st step is named `Update PR description`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3456029507193681}, {"id": "63c494608052faa2781aabf4", "level": "level2", "llm_response": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Check go.mod files\n        run: |\n          for file in $(find . -type f -name 'go.mod' -not -name 'go.sum'); do\n            go mod download $file\n          done\n```", "answer": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version: 1.17\n\n      - name: Check go.mod files\n        shell: bash\n        run: |\n          cd gomod-sync\n          go run main.go check\n```", "prompt": "Generate a GitHub Workflow named `go.mod check` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) there is activity relating to a pull request. The workflow has one job. The 1st job is named `go.mod check` and its job id is `check`. The job `check` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Check go.mod files`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4754328155094606}, {"id": "63c494228052faa2781a95a5", "level": "level2", "llm_response": "```yaml name: snyk-pr\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: checkout action\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: PR\n        uses: snyk/actions-pr@v1\n        env:\n          SnykToken: ${{ secrets.SNYK_TOKEN }}\n```", "answer": "```yaml name: snyk-pr\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.pull_request.head.ref }}\n        fetch-depth: 0\n\n    - name: checkout action\n      uses: actions/checkout@v3\n      with:\n        repository: snowflakedb/whitesource-actions\n        token: ${{ secrets.WHITESOURCE_ACTION_TOKEN }}\n        path: whitesource-actions\n\n    - name: PR\n      uses: ./whitesource-actions/snyk-pr\n      env:\n        PR_TITLE: ${{ github.event.pull_request.title }}\n      with:\n        jira_token: ${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}\n        gh_token: ${{ secrets.GITHUB_TOKEN }}\n        amend: false # true if you want the commit to be amended with the JIRA number\n```", "prompt": "Generate a GitHub Workflow named `snyk-pr` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `whitesource`. The job `whitesource` has 3 steps. The 1st step is named `checkout`. The 2nd step is named `checkout action`. The 3rd step is named `PR`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17252057692616707}, {"id": "63c493c37843b612699fd587", "level": "level2", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        with:\n          tag_name: vNext\n          release_name: vNext\n          draft: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is TSQL. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) a pull request is created, a previously closed pull request is reopened or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `update_release_draft`. The job `update_release_draft` has one step. The 1st step is named `Draft Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7405500469616051}, {"id": "63c495238052faa2781afbf5", "level": "level2", "llm_response": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Thank you for submitting your first issue. Please feel free to create a pull request instead.'\n        pr-message: 'Thank you for submitting your first pull request. Please feel free to create an issue instead.'\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs'\n        pr-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs'\n```", "prompt": "Generate a GitHub Workflow named `Greetings` for a GitHub repository whose primary programming language is Objective-C. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) activity related to an issue occurs. The workflow has one job. The job id of the 1st job is `greeting`. The job `greeting` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22631059688897454}, {"id": "63c496956fc19abdf9c9ce1c", "level": "level2", "llm_response": "```yaml name: Licensed\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    name: Check licenses\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n      - run: npm ci\n      - name: Install licensed\n        run: npm run licensed\n      - run: npm run lint\n```", "answer": "```yaml name: Licensed\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    name: Check licenses\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: npm\n      - run: npm ci\n      - name: Install licensed\n        run: |\n          cd $RUNNER_TEMP\n          curl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\n          sudo tar -xzf licensed.tar.gz\n          sudo mv licensed /usr/local/bin/licensed\n      - run: licensed status\n```", "prompt": "Generate a GitHub Workflow named `Licensed` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Check licenses` and its job id is `test`. The job `test` has 5 steps. The 1st step is named ``. The 2nd step is named `Set Node.js 16.x`. The 3rd step is named ``. The 4th step is named `Install licensed`. The 5th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5223675327574275}, {"id": "63c495e58052faa2781b4f4c", "level": "level2", "llm_response": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 */6 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue is stale because it has been open 6 hours with no activity. Remove stale label or comment or this will be closed in 7 days.'\n          stale-pr-message: 'This PR is stale because it has been open 6 hours with no activity. Remove stale label or comment or this will be closed in 7 days.'\n          days-before-stale: 6\n          days-before-close: 7\n          exempt-issue-labels: 'bug,enhancement,enhancement'\n          exempt-pr-labels: 'bug,enhancement'\n```", "answer": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '0 */6 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        days-before-pr-stale: 14\n        days-before-pr-close: 14\n        stale-pr-label: 'inactive'\n        close-pr-label: 'auto-close'\n        exempt-pr-labels: 'keep-open'\n        stale-pr-message: >\n          This pull request has been inactive for 14 days. \n          If you are finished with your changes, don't forget to sign off. See the [contributor guide](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-pull-request-automation?branch=main) for instructions. \n          If this PR is inactive for 14 more days, it will be closed automatically. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n        close-pr-message: >\n          This pull request has been inactive for 28 days. At this time, we are closing the PR.  \n          If you decide to continue working on your change, you can reopen the PR and continue working. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n          \n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the scheduled time has come: every 6 hours. The workflow has one job. The job id of the 1st job is `stale`. The job `stale` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17874221140664115}, {"id": "63c4951f7843b61269a0593c", "level": "level2", "llm_response": "```yaml name: docker-push\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v2\n        with:\n          metadata: |\n            name: ${{ github.repository }}\n            tags: ${{ github.ref }}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: setup buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: login to docker hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_TOKEN }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          context: .\n          file: docker/Dockerfile\n```", "answer": "```yaml name: docker-push\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          images: fsouza/fake-gcs-server\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: setup buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2.1.0\n\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```", "prompt": "Generate a GitHub Workflow named `docker-push` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The job id of the 1st job is `build-and-push`. The job `build-and-push` has 6 steps. The 1st step is named ``. The 2nd step is named `docker meta` and its id is `meta`. The 3rd step is named `setup qemu`. The 4th step is named `setup buildx` and its id is `buildx`. The 5th step is named `login to docker hub`. The 6th step is named `build and push`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"docker/metadata-action@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 18, "column": 15, "kind": "action", "snippet": "        uses: docker/metadata-action@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 39}]}, "bleu_score": 0.5123518993938536}, {"id": "63c495407843b61269a06679", "level": "level2", "llm_response": "```yaml name: Tests\n\non: [pull_request, workflow_dispatch]\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Linux packages for Qt 5 support\n        run: sudo apt-get update\n        shell: bash\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies and local packages\n        run: |\n          pip install --upgrade pip\n          pip install --upgrade setuptools\n          pip install -r requirements.txt\n      - name: Create clean test directory\n        run: |\n          mkdir -p /tmp/pytest\n          rm -rf /tmp/pytest/*\n      - name: Test Traits package\n        run: |\n          pip install -e .\n          pytest\n```", "answer": "```yaml name: Tests\n\non:\n- pull_request\n- workflow_dispatch\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11-dev']\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install Linux packages for Qt 5 support\n      run: |\n        sudo apt-get update\n        sudo apt-get install qt5-default\n        sudo apt-get install libxkbcommon-x11-0\n        sudo apt-get install libxcb-icccm4\n        sudo apt-get install libxcb-image0\n        sudo apt-get install libxcb-keysyms1\n        sudo apt-get install libxcb-randr0\n        sudo apt-get install libxcb-render-util0\n        sudo apt-get install libxcb-xinerama0\n      if: matrix.os == 'ubuntu-latest'\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies and local packages\n      run: |\n        python -m pip install .[test]\n    - name: Create clean test directory\n      run: |\n        mkdir testdir\n    - name: Test Traits package\n      uses: GabrielBB/xvfb-action@v1\n      with:\n        working-directory: testdir\n        run: python -m unittest discover -v traits\n```", "prompt": "Generate a GitHub Workflow named `Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `tests`. The job `tests` has 6 steps. The 1st step is named ``. The 2nd step is named `Install Linux packages for Qt 5 support`. The 3rd step is named `Set up Python ${{ matrix.python-version }}`. The 4th step is named `Install dependencies and local packages`. The 5th step is named `Create clean test directory`. The 6th step is named `Test Traits package`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36573623217658013}, {"id": "63c495878052faa2781b26e9", "level": "level2", "llm_response": "```yaml name: Issue closer\non:\n  issues:\n    types: [opened, edited, reopened]\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: peter-evans/close-issues@v1\n        with:\n          close-message: 'Thank you for your feedback. We will review the issue and will respond within 24 hours.'\n          close-issue: true\n```", "answer": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ignoreLabel: do-not-autoclose\n          rules: |\n            [\n              {\n                \"type\": \"title\",\n                \"regex\": \".*<(Source Name|short description)>*\",\n                \"message\": \"You did not fill out the description in the title\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n                \"message\": \"The acknowledgment section was not removed\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n                \"message\": \"The requested information was not filled out\"\n              }\n            ]\n```", "prompt": "Generate a GitHub Workflow named `Issue closer` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: an issue is opened, the title or body on an issue is edited or a closed issue is reopened. The workflow has one job. The job id of the 1st job is `autoclose`. The job `autoclose` has one step. The 1st step is named `Autoclose issues`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1330115538975653}, {"id": "63c495257843b61269a05b78", "level": "level2", "llm_response": "```yaml name: Flatpak dependency updates\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: devernay/flatpak-external-data-checker@v1\n        with:\n          flatpak_version: \"1.2\"\n```", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```", "prompt": "Generate a GitHub Workflow named `Flatpak dependency updates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `flatpak-external-data-checker`. The job `flatpak-external-data-checker` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.05575215814078058}, {"id": "63c494a27843b61269a02770", "level": "level2", "llm_response": "```yaml name: Doc Site\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm install\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs/_site\n          publish_branch: gh-pages\n```", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Doc Site\n\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install --legacy-peer-deps\n          npm run docs:build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist/site # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Doc Site` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build-and-deploy-site`. The job `build-and-deploy-site` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install and Build \ud83d\udd27`. The 3rd step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1546410075109357}, {"id": "63c495bf8052faa2781b3ef6", "level": "level2", "llm_response": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - .github/workflows/mol_tree2_lib.yml\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/mol_tree2_lib\n```", "answer": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches: \n      - master\n    paths:\n      - '.github/workflows/mol_tree2_lib.yml'\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: \"0 7 * * *\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    \n    steps:\n    \n    - uses: hyoo-ru/mam_build@master2\n      with:\n        package: mol\n        modules: tree2/lib\n    \n    - uses: JS-DevTools/npm-publish@v1\n      if: ${{ github.ref == 'refs/heads/master' }}\n      with:\n        token: ${{ secrets.NPM_AUTH_TOKEN }}\n        package: ./mol/tree2/lib/-/package.json\n```", "prompt": "Generate a GitHub Workflow named `mol_tree2_lib` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/mol_tree2_lib.yml or tree2/**), the workflow runs. 3) there is activity relating to a pull request. 4) the scheduled time has come: at 07:00 am. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36952768912820866}, {"id": "63c496361e33648075779191", "level": "level2", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. The job `update_release_draft` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496561899db58864d23d2", "level": "level2", "llm_response": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n      vm_image: ubuntu-20.04\n      molecule_config: molecule/ntp.yml\n      scenario_config: ntp.yml\n```", "answer": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Ntp` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.ntp.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/ntp/** or roles/ntp/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `ntp`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8762182104404949}, {"id": "63c494847843b61269a01ad6", "level": "level2", "llm_response": "```yaml name: Release v1 NPM Package\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: \"Enter the version for the release tag.\"\n        required: true\n        type: string\n        # Only one workflow can run at a time with the same concurrency group\n        # This ensures that only one release is created at a time\n        # The workflow name should be the same as the tag name\n\njobs:\n  merge-to-v1-branch:\n    name: Create release by rebasing master to v1 and create a new tag\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.npm\n            ~/.npmrc\n          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}\n      - name: Set git name, mail and origin\n        run: |\n          git config --global user.name \"GitHub Actions\"\n          git config --global user.email \"github-actions@github.com\"\n          git config --global user.signingkey ${{ secrets.GITHUB_TOKEN }}\n      - name: Checkout v1 branch and merge\n        run: |\n          git checkout -b v1\n          git merge master\n      - name: Generate new tag, push tag and branch\n        run: |\n          git tag -a v1 -m \"v1\"\n          git push --tags\n          git push origin v1\n      - uses: actions/upload-release-asset@v1\n        with:\n          upload_url: ${{ steps.release.action.outputs.upload_url }}\n          asset_path: dist/v1.tar.gz\n          asset_name: v1.tar.gz\n          asset_name_sha256: 7558467871553972185865495258584630145526943728025414048788892191550241411550800\n          tag_name: v1\n          tag_message: \"v1\"\n          release: ${{ github.ref }}\n          asset_name: ${{ github.ref }}\n          asset_name_sha256: ${{ github.ref }}\n```", "answer": "```yaml name: \"Release v1 NPM Package\"\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: |\n          Enter the version for the release tag.\n          Must be larger than last tag.\n          Use patch (0.0.x) for bug fixes.\n          Use minor (0.x.0) for new actions.\n        type: string\n        required: true\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: false\njobs:\n  merge-to-v1-branch:\n    name: Create release by rebasing master to v1 and create a new tag\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n          cache: 'yarn'\n          registry-url: 'https://registry.npmjs.org'\n      - run: yarn install\n      - name: Set git name, mail and origin\n        run: |\n          git config --global user.name \"Josef Fr\u00f6hle\"\n          git config --global user.email \"github@josef-froehle.de\"\n          git remote set-url origin https://${{ secrets.BOT_PIPELINE_TOKEN }}@github.com/${{ github.repository }}\n      - name: Checkout v1 branch and merge\n        run: |\n          git checkout v1\n          git merge --ff-only master\n      - name: Generate new tag, push tag and branch\n        run: |\n          yarn run build\n          yarn version --non-interactive --no-git-tag-version --new-version ${{ github.event.inputs.tag }}\n          yarn run changelog\n          yarn run documentation\n          git add -A\n          yarn version --non-interactive --no-git-tag-version --new-version 0.0.0\n          yarn version --non-interactive --new-version ${{ github.event.inputs.tag }}\n          git push\n          git push --tags\n          git checkout master\n          git merge --ff-only v1\n          git push\n          git subtree split --prefix docs -b gh-pages\n          git push -f origin gh-pages:gh-pages\n      - run: yarn publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release v1 NPM Package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: tag-this input represents enter the version for the release tag.\nmust be larger than last tag.\nuse patch (0.0.x) for bug fixes.\nuse minor (0.x.0) for new actions.\n, the data type is string and it must be supplied. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Create release by rebasing master to v1 and create a new tag` and its job id is `merge-to-v1-branch`. The job `merge-to-v1-branch` has 7 steps. The 1st step is named `Checkout`. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Set git name, mail and origin`. The 5th step is named `Checkout v1 branch and merge`. The 6th step is named `Generate new tag, push tag and branch`. The 7th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "property \"release\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 50, "column": 27, "kind": "expression", "snippet": "          upload_url: ${{ steps.release.action.outputs.upload_url }}\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 65}, {"message": "key \"asset_name\" is duplicated in \"with\" section. previously defined at line:52,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 57, "column": 11, "kind": "syntax-check", "snippet": "          asset_name: ${{ github.ref }}\n          ^~~~~~~~~~~", "end_column": 21}, {"message": "key \"asset_name_sha256\" is duplicated in \"with\" section. previously defined at line:53,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 58, "column": 11, "kind": "syntax-check", "snippet": "          asset_name_sha256: ${{ github.ref }}\n          ^~~~~~~~~~~~~~~~~~", "end_column": 28}]}, "bleu_score": 0.38068629076990207}, {"id": "63c4963f1e3364807577960f", "level": "level2", "llm_response": "```yaml name: \"Validate Gradle Wrapper\"\non: [pull_request]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "answer": "```yaml name: \"Validate Gradle Wrapper\"\n\non: [ pull_request ]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "prompt": "Generate a GitHub Workflow named `Validate Gradle Wrapper` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Validation` and its job id is `validation`. The job `validation` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7643838122940672}, {"id": "63c4969cb008460c1df157a0", "level": "level2", "llm_response": "```yaml name: Post-release\non:\n  release:\n    types: [published, edited]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - run: yarn install\n      - run: yarn release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Post-release\non:\n  release:\n    types:\n      - published\n      - edited\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: apexskier/github-release-commenter@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment-template: This is addressed by {release_link}.\n          label-template: released\n```", "prompt": "Generate a GitHub Workflow named `Post-release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published or the details of a release, pre-release, or draft release are edited. The workflow has one job. The job id of the 1st job is `release`. The job `release` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3325507240998139}, {"id": "63c495297843b61269a05d16", "level": "level2", "llm_response": "```yaml name: Lint\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - run: make lint\n      - run: make check\n```", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire cosmos-sdk repository\n# This workflow is run on every pull request and push to main\n# The `golangci` will pass without running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 8\n    steps:\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.0\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.47.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        if: env.GIT_DIFF\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The 1st job is named `golangci-lint` and its job id is `golangci`. The job `golangci` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4018314946399104}, {"id": "63c4967e33b087f6bde2c5c1", "level": "level2", "llm_response": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{ github.event.pull_request.html_url }}\n```", "answer": "```yaml ---\nname: Dependabot auto-merge\n\"on\": pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: >-\n          ${{\n          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||\n          steps.metadata.outputs.update-type == 'version-update:semver-minor'\n          }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```", "prompt": "Generate a GitHub Workflow named `Dependabot auto-merge` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope and write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `dependabot`. The job `dependabot` has 2 steps. The 1st step is named `Dependabot metadata` and its id is `metadata`. The 2nd step is named `Enable auto-merge for Dependabot PRs`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6785602722706252}, {"id": "63c496326fc19abdf9c9a7c5", "level": "level2", "llm_response": "```yaml name: Test CI\n\non:\n  pull_request:\n  push:\n    paths:\n      - 'lua/**'\n      - 'test/**'\n      - '.github/**'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install requirements\n        run: |\n          sudo apt-get install liblua5.3-dev liblua5.3-headers\n      - name: Install Tangerine\n        run: |\n          git clone https://github.com/tangerinejs/tangerine.git\n          cd tangerine\n          make install\n      - name: Build Runner\n        run: |\n          make build\n      - name: Run Tests\n        run: |\n          make test\n```", "answer": "```yaml name: Test CI\n\non: \n  pull_request:\n  push:\n    paths:\n      - lua/**\n      - test/**\n      - .github/**\n\njobs:\n  test:\n    runs-on:   ubuntu-latest\n    container: alpine\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Install requirements\n      run: |\n        apk update && apk upgrade \n        apk add make bash coreutils neovim lua5.4\n        # links lua5.4 -> lua\n        ln -sv /usr/bin/lua5.4           /usr/bin/lua\n        ln -sv /usr/lib/lua5.4/liblua.so /usr/lib/liblua5.4.so\n\n    - name: Install Tangerine\n      run:  make install\n\n    - name: Build Runner\n      run:  make runner\n\n    - name: Run Tests\n      run:  yes | make test\n```", "prompt": "Generate a GitHub Workflow named `Test CI` for a GitHub repository whose primary programming language is Fennel. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) Only if at least one path of push event matches a pattern in the paths filter(lua/**, test/** or .github/**), the workflow runs. The workflow has one job. The job id of the 1st job is `test`. The job `test` has 5 steps. The 1st step is named ``. The 2nd step is named `Install requirements`. The 3rd step is named `Install Tangerine`. The 4th step is named `Build Runner`. The 5th step is named `Run Tests`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.43542042766506633}, {"id": "63c495207843b61269a059a2", "level": "level2", "llm_response": "```yaml name: Labeler\n\non: [pull_request]\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler/blob/master/README.md\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. The job `label` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8193228857188178}, {"id": "63c496561899db58864d23b6", "level": "level2", "llm_response": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n```", "answer": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Docker` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.docker.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/docker/**, roles/docker/**, plugins/filter/json.py, plugins/filter/staten.py or plugins/lookup/docker_applications.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `docker`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9591894571091382}, {"id": "63c496851899db58864d36f3", "level": "level2", "llm_response": "```yaml name: Test with Pre-commit\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n      - name: Lint with pre-commit\n        uses: pre-commit/action@v3.10.1\n        with:\n          args: lint\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Test with Pre-commit\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n          pre-commit install-hooks\n      - name: Lint with pre-commit\n        run: pre-commit run --all-files\n```", "prompt": "Generate a GitHub Workflow named `Test with Pre-commit` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Python ${{ matrix.python-version }}`. The 3rd step is named `Install dependencies`. The 4th step is named `Lint with pre-commit`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7137925555242528}, {"id": "63c495e58052faa2781b4fae", "level": "level2", "llm_response": "```yaml name: Self-assign\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  one:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jupyterlab/action-self-assign@v1.1.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Allow users to automatically tag themselves to issues\n\nname: Self-assign\non:\n  issue_comment:\n    types: created\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: >-\n      (github.event.comment.body == '#take' ||\n       github.event.comment.body == '#self-assign') &&\n       (!github.event.issue.pull_request)\n    steps:\n      - run: |\n          echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\n          curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n```", "prompt": "Generate a GitHub Workflow named `Self-assign` for a GitHub repository whose primary programming language is Jupyter Notebook. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `one`. The job `one` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.0885457275018065}, {"id": "63c496561899db58864d23c2", "level": "level2", "llm_response": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      converge_forci: true\n```", "answer": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Java` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.java.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/java/** or roles/java/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `java`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9529077664391161}, {"id": "63c4957c8052faa2781b2239", "level": "level2", "llm_response": "```yaml name: Add Issues/PRs to TF Provider DevEx team board\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: Add Content to project\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set Issue to 'Priority = Triage Next'\n        if: github.event.action == 'opened' || github.event.action == 'reopened'\n        run: |\n          curl -X PATCH \\\n            -H \"Authorization: Bearer ${{ secrets.TF_PROVIDER_DEVEX_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github.everest-preview+json\" \\\n            -d \"{\\\"state\\\":\\\"triaged\\\",\\\"locked\\\":false}\\\" \\\n            https://api.github.com/repos/hashicorp/terraform-provider-aws/issues/${{ github.event.issue.number }}/assignees\n      - name: Set Pull Request to 'Priority = Triage Next'\n        if: github.event.action == 'opened' || github.event.action == 'reopened'\n        run: |\n          curl -X PATCH \\\n            -H \"Authorization: Bearer ${{ secrets.TF_PROVIDER_DEVEX_TOKEN }}\" \\\n            -H \"Accept: application/vnd.github.everest-preview+json\" \\\n            -d \"{\\\"state\\\":\\\"triaged\\\",\\\"locked\\\":false}\\\" \\\n            https://api.github.com/repos/hashicorp/terraform-provider-aws/pulls/${{ github.event.pull_request.number }}/assignees\n```", "answer": "```yaml # Based on https://github.com/leonsteinhaeuser/project-beta-automations\n\nname: \"Add Issues/PRs to TF Provider DevEx team board\"\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    # NOTE: The way content is added to project board is equivalent to an \"upsert\".\n    # Calling it multiple times will be idempotent.\n    #\n    # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\n    #\u00a0to see the reasoning behind using `pull_request_target` instead of `pull_request`\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: \"Add Content to project\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Set Issue to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'issues'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.issue.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n      - name: \"Set Pull Request to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'pull_request_target'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.pull_request.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n```", "prompt": "Generate a GitHub Workflow named `Add Issues/PRs to TF Provider DevEx team board` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) an issue is opened or a closed issue is reopened. 2) a pull request is created, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow has one job. The 1st job is named `Add Content to project` and its job id is `add-content-to-project`. The job `add-content-to-project` has 2 steps. The 1st step is named `Set Issue to 'Priority = Triage Next'`. The 2nd step is named `Set Pull Request to 'Priority = Triage Next'`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2699683017034435}, {"id": "63c494b87843b61269a03054", "level": "level2", "llm_response": "```yaml name: autoupdate\non:\n  push:\n    branches:\n      - 'version-bump/**'\n      - 'dependabot/**'\n      - 'bot/**'\n      - 'all-contributors/**'\n    # exclude: [ 'version-bump/**', 'dependabot/**', 'bot/**', 'all-contributors/**' ]\n\njobs:\n  autoupdate-for-bot:\n    name: Autoupdate autoapproved PR created in the upstream\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoupdating\n        uses: autoupdate-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          target: ${{ github.event.repository.name }}\n          branch: ${{ github.ref }}\n```", "answer": "```yaml # This action is centrally managed in https://github.com/asyncapi/.github/\r\n# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo\r\n\r\n# This workflow is designed to work with:\r\n# - autoapprove and automerge workflows for dependabot and asyncapibot.\r\n# - special release branches that we from time to time create in upstream repos. If we open up PRs for them from the very beginning of the release, the release branch will constantly update with new things from the destination branch they are opened against\r\n\r\n# It uses GitHub Action that auto-updates pull requests branches, whenever changes are pushed to their destination branch.\r\n# Autoupdating to latest destination branch works only in the context of upstream repo and not forks\r\n\r\nname: autoupdate\r\n\r\non:\r\n  push:\r\n    branches-ignore:  \r\n      - 'version-bump/**'\r\n      - 'dependabot/**'\r\n      - 'bot/**'\r\n      - 'all-contributors/**'\r\n\r\njobs:\r\n  autoupdate-for-bot:\r\n    if: startsWith(github.repository, 'asyncapi/')\r\n    name: Autoupdate autoapproved PR created in the upstream\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Autoupdating\r\n        uses: docker://chinthakagodawita/autoupdate-action:v1\r\n        env:\r\n          GITHUB_TOKEN: '${{ secrets.GH_TOKEN_BOT_EVE }}'\r\n          PR_FILTER: \"labelled\"\r\n          PR_LABELS: \"autoupdate\"\r\n          PR_READY_STATE: \"ready_for_review\"\r\n          MERGE_CONFLICT_ACTION: \"ignore\"\r\n```", "prompt": "Generate a GitHub Workflow named `autoupdate` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: The workflow would run whenever there is a push event unless the push event is to: a branch whose name matches version-bump/**, a branch whose name matches dependabot/**, a branch whose name matches bot/** or a branch whose name matches all-contributors/**. The workflow has one job. The 1st job is named `Autoupdate autoapproved PR created in the upstream` and its job id is `autoupdate-for-bot`. The job `autoupdate-for-bot` has one step. The 1st step is named `Autoupdating`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "specifying action \"autoupdate-action@v1\" in invalid format because owner is missing. available formats are \"{owner}/{repo}@{ref}\" or \"{owner}/{repo}/{path}@{ref}\"", "filepath": "../tmp/test.yml", "line": 17, "column": 15, "kind": "action", "snippet": "        uses: autoupdate-action@v1\n              ^~~~~~~~~~~~~~~~~~~~", "end_column": 34}]}, "bleu_score": 0.5381006930446003}, {"id": "63c494877843b61269a01c1e", "level": "level2", "llm_response": "```yaml name: Prepare Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Push Tag\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const version = github.event.inputs.version;\n            const github = github.context.repo.repo;\n            const { tag_name: tag, sha: tag_sha } = await github.rest.git.createRef({\n              owner: github.context.repo.owner,\n              repo: github.context.repo.repo,\n              ref: `refs/tags/${version}`,\n              sha: tag_sha,\n            });\n            await github.rest.git.createRef({\n              owner: github.context.repo.owner,\n              repo: github.context.repo.repo,\n              ref: `refs/tags/${version}`,\n              sha: tag_sha,\n            });\n            console.log(`tag created: ${tag}`);\n```", "answer": "```yaml \nname: Prepare Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version Number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Push Tag\n      run: | \n            echo \"version is ${{ github.event.inputs.version }}\"\n            git config user.name \"GitHub Actions Bot\"\n            git config user.email \"<>\"\n            sed -i \"/is_master/d\" fxmanifest.lua\n            sed -i \"/^version/c\\version '${{ github.event.inputs.version }}'\" fxmanifest.lua\n            git add .\n            git commit -m \"${{ github.event.inputs.version }}\"\n            git tag -a ${{ github.event.inputs.version }} -m \"Version ${{ github.event.inputs.version }}\"\n            sed -i \"/^version/ais_master 'yes'\" fxmanifest.lua\n            git add .\n            git commit -m \"Update Version\"\n            git push --follow-tags\n```", "prompt": "Generate a GitHub Workflow named `Prepare Release` for a GitHub repository whose primary programming language is Lua. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: version-this input represents version number and it must be supplied. The workflow has one job. The job id of the 1st job is `create`. The job `create` has 2 steps. The 1st step is named ``. The 2nd step is named `Push Tag`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.23082336594024566}, {"id": "63c496581e3364807577a144", "level": "level2", "llm_response": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch:\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Remove ALL artifacts\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            await github.rest.artifacts.deleteCollection({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              collection_id: context.payload.artifacts.id\n            })\n```", "answer": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch: # only manually\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          age: '0 days'\n          skip-tags: true\n          skip-recent: 0\n```", "prompt": "Generate a GitHub Workflow named `Remove ALL artifacts` for a GitHub repository whose primary programming language is C. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `remove-all-artifacts`. The job `remove-all-artifacts` has one step. The 1st step is named `Remove ALL artifacts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.37570300694867703}, {"id": "63c493ea8052faa2781a7e17", "level": "level2", "llm_response": "```yaml name: master\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust:\n          - \"1.29.1\"\n          - \"1.31.0\"\n          - \"nightly\"\n        target: \"all\"\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v1\n        with:\n          rust-toolchain: ${{ matrix.rust }}\n      - run: cargo test --all\n      - run: cargo test --all-features\n```", "answer": "```yaml name: master\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0' # 00:00 Sunday\n\njobs:\n\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [1.31.0, stable]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ matrix.rust }}\n      - run: cargo build\n      - run: ./ci/test_full.sh\n```", "prompt": "Generate a GitHub Workflow named `master` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The 1st job is named `Test` and its job id is `test`. The job `test` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "expecting a single ${{...}} expression or array value for matrix variations, but found plain text node", "filepath": "../tmp/test.yml", "line": 19, "column": 17, "kind": "syntax-check", "snippet": "        target: \"all\"\n                ^~~~~", "end_column": 21}]}, "bleu_score": 0.5810000472379208}, {"id": "63c495668052faa2781b18dd", "level": "level2", "llm_response": "```yaml name: release management\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: update draft release\n        uses: dawidd6/action-update-draft-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release management\non:\n  push:\n    branches: [master]\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `release management` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `update-draft-release`. The job `update-draft-release` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4432891845803403}, {"id": "63c494608052faa2781aac1c", "level": "level2", "llm_response": "```yaml name: ASF-ci\non: [push, pull_request]\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        configuration: [ 'release', 'nightly' ]\n        arch: [ 'x64', 'x86' ]\n        os: [ windows-latest ]\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n    - name: Verify .NET Core\n      run: dotnet --info\n    - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore\n    - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n      run: dotnet run --configuration ${{ matrix.configuration }} --no-build --no-restore\n    - name: Upload latest strings for translation on Crowdin\n      uses: ./.github/actions/upload-strings\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        languages: \"en,ru,de,fr,es,pt\"\n        target_arch: ${{ matrix.arch }}\n```", "answer": "```yaml name: ASF-ci\n\non: [push, pull_request]\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  main:\n    strategy:\n      fail-fast: false\n      matrix:\n        configuration: [Debug, Release]\n        os: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n      with:\n        submodules: recursive\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n    - name: Verify .NET Core\n      run: dotnet --info\n\n    - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n      run: dotnet build -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n      run: dotnet test ArchiSteamFarm.Tests -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Upload latest strings for translation on Crowdin\n      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.configuration == 'Release' && startsWith(matrix.os, 'ubuntu-') }}\n      uses: crowdin/github-action@1.4.16\n      with:\n        crowdin_branch_name: main\n        config: '.github/crowdin.yml'\n        project_id: ${{ secrets.ASF_CROWDIN_PROJECT_ID }}\n        token: ${{ secrets.ASF_CROWDIN_API_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `ASF-ci` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow sets 3 environment variables to use: `DOTNET_CLI_TELEMETRY_OPTOUT` is set to `True`, `DOTNET_NOLOGO` is set to `True` and `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `main`. The job `main` has 6 steps. The 1st step is named `Checkout code`. The 2nd step is named `Setup .NET Core`. The 3rd step is named `Verify .NET Core`. The 4th step is named `Build ${{ matrix.configuration }} ArchiSteamFarm and other projects`. The 5th step is named `Run ${{ matrix.configuration }} ArchiSteamFarm.Tests`. The 6th step is named `Upload latest strings for translation on Crowdin`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4635881228336175}, {"id": "63c495da7843b61269a0a66e", "level": "level2", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Build\n        run: make build\n\n      - name: Test\n        run: make test\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  main:\n    strategy:\n      matrix:\n        go:\n          - 1.19\n        os:\n          - ubuntu-20.04\n          - ubuntu-22.04\n          - macos-11\n          - macos-12\n          - windows-2019\n          - windows-2022\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `main`. The job `main` has 4 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up Go`. The 3rd step is named `Build`. The 4th step is named `Test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3177692030953667}, {"id": "63c494247843b612699ff48a", "level": "level2", "llm_response": "```yaml name: Rust\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v1\n        with:\n          rust-version: \"1.52\"\n          cache: true\n          cache-dependency-path: \"Cargo.lock\"\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup toolchain list\n      - name: Build without default features\n        run: cargo build --no-default-features --all-features\n      - name: Build with default features\n        run: cargo build --all-features\n```", "answer": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n      - name: Build without default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n      - name: Build with default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n```", "prompt": "Generate a GitHub Workflow named `Rust` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Check Cargo availability`. The 4th step is named `Check Rustup default toolchain`. The 5th step is named `Build without default features`. The 6th step is named `Build with default features`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5320122250524956}, {"id": "63c4957d8052faa2781b22ad", "level": "level2", "llm_response": "```yaml name: nix-build\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-v*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v3\n        with:\n          rust-version: 1.68\n      - uses: actions/cache@v3\n        with:\n          path: ~/.cargo\n          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}\n      - name: Build centrifuge-chain\n        run: |\n          cargo build --target=x86_64-unknown-linux-gnu\n```", "answer": "```yaml name: nix-build\non:\n  pull_request:\n  push:\n    branches: [main, 'release-v**']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Nix Flakes doesn't work on shallow clones\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v17\n        with:\n          install_url: https://releases.nixos.org/nix/nix-2.10.3/install\n      - uses: cachix/cachix-action@v10\n        with:\n          name: centrifuge-chain\n          authToken: \"${{ secrets.CACHIX_AUTH_TOKEN }}\"\n      - name: Build centrifuge-chain\n        run: nix build --no-allow-dirty -L```", "prompt": "Generate a GitHub Workflow named `nix-build` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main or a branch whose name matches release-v**. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Build centrifuge-chain`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36116159911881884}, {"id": "63c4968a6fc19abdf9c9ca16", "level": "level2", "llm_response": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 22 * * 6'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository_owner == 'cylc' }}\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n\n      - name: build conda env\n        run: |\n          conda install -y conda-build\n          conda create -n cylc-env -c conda-forge python=3.8\n          conda install -y -c conda-forge --name cylc-env -c conda-forge pytest\n\n      - name: check for activate scripts\n        run: |\n          conda activate cylc-env\n          python --version\n          pip --version\n          pytest --version\n```", "answer": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 22 * * 6'  # Every Saturday at 22:17\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n\n      - name: build conda env\n        run: |\n          # write environment file\n          env_file='conda-environment.yml'\n          echo \"  - pip\"  >> \"$env_file\"  # list pip as a dependency\n          echo \"  - pip:\" >> \"$env_file\"  # add a pip section\n          echo \"    - .\"  >> \"$env_file\"  # install cylc-flow (pip install .)\n          cat \"$env_file\"\n          # install environment\n          conda env create \\\n            -f \"$env_file\" \\\n            --prefix cylc-dev\n          . /usr/share/miniconda/etc/profile.d/conda.sh\n          # check cylc-flow was installed correctly\n          conda run --prefix cylc-dev cylc version --long\n\n      - name: check for activate scripts\n        run: |\n          # https://github.com/cylc/cylc-flow/issues/3704#issuecomment-897442365\n          # locate all activate scripts\n          find ./cylc-dev/ -name \"activate.d\" | tee > activates.txt\n          # ignore the conda activate script itself\n          sed -i '/cylc-dev\\/etc\\/conda\\/activate.d/d' activates.txt\n          # check to make sure no packages have contributed new activate scripts\n          # (we rely on having a conda activate-less environment)\n          if [[ $(cat activates.txt | wc -l) -ne 0 ]]; then\n              echo '::error::Found activate scripts in installation.'\n              cat activates.txt >&2\n              exit 1\n          fi\n```", "prompt": "Generate a GitHub Workflow named `conda builds` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(conda-environment.yml or .github/workflows/test_conda-build.yml), the workflow runs. 2) the scheduled time has come: at 10:17 pm, only on saturday. 3) someone manually triggers the workflow. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `test_conda_install`. The job `test_conda_install` has 3 steps. The 1st step is named `checkout cylc-flow`. The 2nd step is named `build conda env`. The 3rd step is named `check for activate scripts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.27956801769420786}, {"id": "63c496411e3364807577968e", "level": "level2", "llm_response": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened, transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@v0.7.0\n        id: add_project\n        with:\n          project-url: https://github.com/orgs/moodle/projects/1\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Set Team\n        uses: MaxBogomolov/set-team@v0.2.0\n        with:\n          team: moodle\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n```", "answer": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened,transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n      - name: Set Team\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN_PROJECT }}\n        run: |\n          gh api graphql -f query='\n          mutation(\n              $project: ID!\n              $item: ID!\n              $status_field: ID!\n              $status_value: String!\n            )  {\n            updateProjectV2ItemFieldValue(\n              input: {\n               projectId: $project\n                itemId: $item\n                fieldId: $status_field\n                value: { \n                  singleSelectOptionId: $status_value\n                  }\n              }\n            ) {\n              projectV2Item {\n                id\n              }\n            }\n          }' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent```", "prompt": "Generate a GitHub Workflow named `Add to project` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: an issue is opened or an issue is transferred to another repository. The workflow has one job. The 1st job is named `Add issue to project` and its job id is `add-to-project`. The job `add-to-project` has 2 steps. The 1st step is named `` and its id is `add_project`. The 2nd step is named `Set Team`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1769997211677242}, {"id": "63c496861e3364807577b319", "level": "level2", "llm_response": "```yaml name: documentation\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n  deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Create output directories\n        run: |\n          mkdir -p docs/docs\n          mkdir -p docs/CHANGELOG.md\n          mkdir -p docs/src\n\n      - name: Copy index.html\n        run: |\n          cp -r docs/src/ ./docs\n\n      - name: Generate reference\n        id: adocbuild\n        uses: adoc-build/adoc-build@v1\n        with:\n          base: docs\n          dest: docs\n          files: 'docs/src/**/*.{md,mdx}'\n          out: docs/src/index.adoc\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: docs/src\n          publish_branch: gh-pages\n          force_orphan: true\n          clean: true\n```", "answer": "```yaml # adapted from:\n#\n# * base code: https://peterevans.dev/posts/github-actions-how-to-automate-code-formatting-in-pull-requests/\n# * fix push auth: https://github.com/ad-m/github-push-action\n# * checkout PR head commit https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit\nname: documentation\non:\n  push:\n    branches:\n      - master\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    outputs:\n      should_skip: ${{ steps.skip_check.outputs.should_skip }}\n    steps:\n      - id: skip_check\n        uses: fkirc/skip-duplicate-actions@master\n        with:\n          concurrent_skipping: 'same_content'\n          skip_after_successful_duplicate: 'true'\n          paths: '[\"doc/**\"]'\n  deploy:\n    needs: skip_duplicate_jobs\n    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.1\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - name: Create output directories\n        run: mkdir -p output/reference\n\n      - name: Copy index.html\n        run: cp website/index.html output/index.html\n\n      - name: Generate reference\n        id: adocbuild\n        uses: tonynv/asciidoctor-action@master\n        with:\n            program: asciidoctor doc/index.adoc -o output/reference/index.html\n\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.7\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: output # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `documentation` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has 2 jobs. The job id of the 1st job is `skip_duplicate_jobs`. The job `skip_duplicate_jobs` has one step. The 1st step is named `` and its id is `skip_check`. The job id of the 2nd job is `deploy`. The job `deploy` has 5 steps. The 1st step is named ``. The 2nd step is named `Create output directories`. The 3rd step is named `Copy index.html`. The 4th step is named `Generate reference` and its id is `adocbuild`. The 5th step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"clean\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 51, "column": 11, "kind": "action", "snippet": "          clean: true\n          ^~~~~~", "end_column": 16}]}, "bleu_score": 0.3129272192602132}, {"id": "63c495f07843b61269a0af74", "level": "level2", "llm_response": "```yaml name: Acquire activation file\n\non:\n  workflow_dispatch:\n\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: actions-cool/git-activity-action@v1\n        with:\n          action: \"manual\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n          file: \"LICENSE\"\n          file_path: \"LICENSE\"\n          file_path_type: \"file\"\n          file_path_name: \"LICENSE\"\n          message: \"Request manual activation file\"\n\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v1\n        with:\n          name: LICENSE\n          path: LICENSE\n```", "answer": "```yaml \ufeffname: Acquire activation file\non:\n  workflow_dispatch: {}\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ steps.getManualLicenseFile.outputs.filePath }}\n          path: ${{ steps.getManualLicenseFile.outputs.filePath }}\n```", "prompt": "Generate a GitHub Workflow named `Acquire activation file` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Request manual activation file` and its job id is `activation`. The job `activation` has 2 steps. The 1st step is named `Request manual activation file` and its id is `getManualLicenseFile`. The 2nd step is named `Expose as artifact`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.46930022410423217}, {"id": "63c496731e3364807577abab", "level": "level2", "llm_response": "```yaml name: Automatically crawl CVEs\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n  schedule:\n    - cron: '15 * * * *'\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Configure pip caching\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n      - name: Install Python dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Crawl CVEs\n        run: |\n          ./cve-crawler.py\n      - name: Commit and push Github page (if changed)\n        run: |\n          git config user.email \"auto@cve-crawler.github.io\"\n          git config user.name \"auto\"\n          git add .github/cve-crawler/cve-crawler.html\n          git commit -m \"Update Github page\"\n          git push\n```", "answer": "```yaml name: Automatically crawl CVEs \non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n    branches:\n      - master\n  schedule:\n    - cron: '15 * * * *'\n\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - uses: actions/cache@v2\n        name: Configure pip caching\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r requirements.txt\n\n      - name: Crawl CVEs\n        run: |-\n          python main.py -g \"${{ secrets.CRAWL_PWD }}\" --gtk ${{ secrets.GRAPAQL_TOKEN }}\n\n      # \u82e5\u8be5\u65f6\u95f4\u6bb5\u6ca1\u6709 CVE\uff0c \u5219 file://cache/mail.dat \u6587\u4ef6\u4e0d\u4f1a\u751f\u6210\uff0c\u6b64\u65f6\u4e0d\u4f1a\u53d1\u9001\u90ae\u4ef6\n      # - name: Send mail\n      #   if: ${{ secrets.CRAWL_PWD != '' && github.event_name != 'pull_request' }}\n      #   uses: lyy289065406/action-send-mail@master\n      #   with:\n      #     server_address: ${{ secrets.MAIL_SMTP }}\n      #     server_port: 465\n      #     username: ${{ secrets.MAIL_USER }}\n      #     password: ${{ secrets.MAIL_PASS }}\n      #     from: ${{ secrets.MAIL_USER }}\n      #     to: file://cache/mail_recvs.dat\n      #     body: file://cache/mail_content.dat\n      #     content_type: text/html\n      #     subject: \u5a01\u80c1\u60c5\u62a5\u64ad\u62a5\n\n      # \u5982\u679c\u4e0d\u5e0c\u671b\u6c61\u67d3 commit \u8bb0\u5f55\uff0cuser.email \u548c user.name \u968f\u4fbf\u586b\u5373\u53ef\n      # Github Runner \u662f\u6709\u6743\u9650\u63d0\u4ea4\u5230\u4ed3\u5e93\u7684\uff0c\u53ea\u8981 user \u4e0d\u662f owner \uff0c\u5f53\u6b21 commit \u4e0d\u4f1a\u88ab\u8bb0\u5f55\n      - name: Commit and push Github page (if changed)\n        if: ${{ github.event_name != 'pull_request' }}\n        run: |-\n          git diff\n          git config --global user.email \"github-bot@example.com\"\n          git config --global user.name \"Github-Bot\"\n          git add -A\n          git commit -m \"Updated by Github Bot\" || exit 0\n          git push origin master\n\n```", "prompt": "Generate a GitHub Workflow named `Automatically crawl CVEs` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch named master. 2) someone manually triggers the workflow. 3) the scheduled time has come: at 15 minutes past the hour. The workflow has one job. The job id of the 1st job is `build-and-deploy`. The job `build-and-deploy` has 6 steps. The 1st step is named `Check out repo`. The 2nd step is named `Set up Python`. The 3rd step is named `Configure pip caching`. The 4th step is named `Install Python dependencies`. The 5th step is named `Crawl CVEs`. The 6th step is named `Commit and push Github page (if changed)`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5184829038799106}, {"id": "63c494318052faa2781a9bf5", "level": "level2", "llm_response": "```yaml name: Test a branch on canary\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: 'Commit sha to be tested'\n        required: true\n\npermissions:\n  contents: read\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-psql@v2\n        with:\n          database: ${{ secrets.DB_NAME }}\n          username: ${{ secrets.DB_USER }}\n          password: ${{ secrets.DB_PASS }}\n          schema: ${{ secrets.DB_SCHEMA }}\n      - name: Update the rc tag\n        run: |\n          echo \"Updating RC tag to ${{ github.event.inputs.COMMIT_SHA }}...\"\n          echo \"psql -h $DB_HOST -U $DB_USER -d $DB_SCHEMA -c 'UPDATE rc SET tag = '${COMMIT_SHA}' WHERE tag IS NULL' --echo\" | pwsh\n      - name: Canary test\n        run: |\n          echo \"Canary test...\"\n          echo \"psql -h $DB_HOST -U $DB_USER -d $DB_SCHEMA -c 'SELECT * FROM rc WHERE tag IS NOT NULL' --echo\" | pwsh\n```", "answer": "```yaml name: Test a branch on canary\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: 'Commit SHA to be tested'\n        required: true\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\ndefaults:\n  run:\n    shell: pwsh\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34 # v1\n      with:\n        allowed-endpoints: \n          api.github.com:443\n          github.com:443\n\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v2\n    - name: Update the rc tag\n      uses: step-security/publish-action@b438f840875fdcb7d1de4fc3d1d30e86cf6acb5d\n      with:\n        rc-sha: ${{ env.COMMIT_SHA }}\n        rc: true\n\n    - name: Canary test\n      uses: docker://ghcr.io/step-security/integration-test/int:latest\n      env:\n        PAT: ${{ secrets.PAT }}\n        canary: true\n```", "prompt": "Generate a GitHub Workflow named `Test a branch on canary` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: COMMIT_SHA-this input represents commit sha to be tested and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `COMMIT_SHA` is set to `${{ github.event.inputs.COMMIT_SHA }}`. For all run steps in the workflow, default shell is set to pwsh. The workflow has one job. The 1st job is named `Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit` and its job id is `update_tag`. The job `update_tag` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Update the rc tag`. The 4th step is named `Canary test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.35044365906934577}, {"id": "63c4964733b087f6bde2ad41", "level": "level2", "llm_response": "```yaml name: Create Python release windows macos\non:\n  push:\n    tags:\n      - py-*\ndefault:\n  shell: bash\njobs:\n  win-macos:\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n      - name: Fix README symlink\n        run: mv README.md README.md.bak\n      - name: Publish wheel\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade wheel\n          python -m pip install --upgrade twine\n          python -m pip install --upgrade setuptools\n          python -m twine check dist/*\n          python -m twine upload dist/*\n        env:\n          TWINE_USERNAME: __token__\n          TWINE_PASSWORD: ${{ secrets.TWINE_PAT }}\n```", "answer": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest, windows-latest]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.7'\n\n      - name: Fix README symlink\n        run: |\n          rm py-polars/README.md\n          cp README.md py-polars/README.md\n\n      - name: Publish wheel\n        uses: messense/maturin-action@v1\n        env:\n          MATURIN_PASSWORD: ${{ secrets.PYPI_PASS }}\n          RUSTFLAGS: -C target-feature=+fxsr,+sse,+sse2,+sse3,+sse4.1,+sse4.2\n        with:\n          rust-toolchain: nightly-2022-10-06\n          maturin-version: '0.13.5'\n          command: publish\n          args: -m py-polars/Cargo.toml --no-sdist --skip-existing -o wheels -i python -u ritchie46\n```", "prompt": "Generate a GitHub Workflow named `Create Python release windows macos` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches py-*. For all run steps in the workflow, default shell is set to bash. The workflow has one job. The job id of the 1st job is `win-macos`. The job `win-macos` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Fix README symlink`. The 4th step is named `Publish wheel`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "unexpected key \"default\" for \"workflow\" section. expected one of \"concurrency\", \"defaults\", \"env\", \"jobs\", \"name\", \"on\", \"permissions\", \"run-name\"", "filepath": "../tmp/test.yml", "line": 6, "column": 1, "kind": "syntax-check", "snippet": "default:\n^~~~~~~~", "end_column": 8}]}, "bleu_score": 0.3463665756753655}, {"id": "63c496566fc19abdf9c9b6ef", "level": "level2", "llm_response": "```yaml name: automerge\non:\n  pull_request:\n    types: [labeled]\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        uses: mshahazade/automerge-action@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          enable-automerge: true\n          automerge-label: automerge\n```", "answer": "```yaml name: automerge\non:\n  pull_request_target:\n    types:\n      - labeled\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        if: contains( github.event.pull_request.labels.*.name, 'automerge')\n        uses: peter-evans/enable-pull-request-automerge@v2\n        with:\n          token: ${{ secrets.PAT }}\n          pull-request-number: ${{ github.event.pull_request.number }}\n          merge-method: rebase\n```", "prompt": "Generate a GitHub Workflow named `automerge` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: a label is added to a pull request. The workflow has one job. The job id of the 1st job is `automerge`. The job `automerge` has one step. The 1st step is named `enable automerge`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2966770784820726}, {"id": "63c4941d8052faa2781a937b", "level": "level2", "llm_response": "```yaml name: update-flake-lock\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: NixOS/nix-actions@master\n      - name: Update flake.lock\n        run: nix lock --no-update --lock\n```", "answer": "```yaml name: update-flake-lock\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '0 0 * * 0' # runs weekly on Sunday at 00:00\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          # we update nixos-common-styles manual\n          # and the rest of the inputs are content inputs\n          inputs: nixpkgs\n```", "prompt": "Generate a GitHub Workflow named `update-flake-lock` for a GitHub repository whose primary programming language is Less. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The job id of the 1st job is `lockfile`. The job `lockfile` has 3 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Install Nix`. The 3rd step is named `Update flake.lock`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4257465176259737}, {"id": "63c4965533b087f6bde2b378", "level": "level2", "llm_response": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Packagist\n        uses: 18f4/packagist-action@v1\n        with:\n          token: ${{ secrets.PACKAGIST_TOKEN }}\n          update: true\n```", "answer": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Packagist\n        run: |\n          curl -X POST \"https://packagist.org/api/update-package?username=svix&apiToken=$PACKAGIST_API_KEY\" \\\n            -H 'content-type: application/json' \\\n            -d '{\"repository\":{\"url\":\"https://packagist.org/packages/svix/svix\"}}'\n        env:\n          PACKAGIST_API_KEY: ${{ secrets.PACKAGIST_API_KEY }}```", "prompt": "Generate a GitHub Workflow named `PHP Release` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Update Packagist` and its job id is `packagist`. The job `packagist` has one step. The 1st step is named `Update Packagist`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5046265490977992}, {"id": "63c4959c7843b61269a08c30", "level": "level2", "llm_response": "```yaml name: Scorecards supply-chain security\n\non:\n  workflow_dispatch:\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run analysis\n        uses: scorecards/gh-action@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: scorecards\n          path: |\n            results\n\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results/sarif/scan_results.sarif\n```", "answer": "```yaml name: Scorecards supply-chain security\n# Run only manually, because the answers don't change often and the results have \n# many unhelpful positives.\n  \non:\n  workflow_dispatch: \n  # Only the default branch is supported.\n  # branch_protection_rule:\n  # schedule:\n  #   - cron: '38 17 * * 6'\n  # push:\n  #  branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c8416b0b2bf627c349ca92fc8e3de51a64b005cf # v1.0.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. The 2nd step is named `Run analysis`. The 3rd step is named `Upload artifact`. The 4th step is named `Upload to code-scanning`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22149851224040315}, {"id": "63c495547843b61269a06e6c", "level": "level2", "llm_response": "```yaml name: Recreate Linux self-hosted runners on schedule\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 1 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: recreate-linux-runners\n  cancel-in-progress: true\n\njobs:\n  recreate:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-cloud-sdk@v1\n        with:\n          version: \"latest\"\n      - name: Wait for idle runner\n        id: killable\n        uses: google-github-actions/wait-for-idle-runner@v1\n        with:\n          runner_id: ${{ runner.os }}-runner\n          num_runs: 2\n          run_id: ${{ runner.os }}-runner\n          token: ${{ secrets.CLOUDSDK_RUNNER_TOKEN }}\n      - name: Kill runner and create a new one\n        run: |\n          ./bin/kill-runner.sh\n```", "answer": "```yaml name: Recreate Linux self-hosted runners on schedule\n\non:\n  workflow_dispatch:\n  schedule:\n    # Once each 24 hours, at 1 during the night\n    - cron: \"0 1 * * *\"\n\nconcurrency:\n  group: recreate-linux-runners\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  recreate:\n    if: github.repository == 'Homebrew/homebrew-core'\n    runs-on: ubuntu-22.04\n    env:\n      # TODO agree on one label for all runners\n      RUNNER_LABEL: TODO\n    strategy:\n      matrix:\n        runner_name:\n          - linux-self-hosted-1\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.1\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_SA_KEY }}\n          export_default_credentials: true\n\n      - name: Wait for idle runner\n        id: killable\n        uses: Homebrew/actions/wait-for-idle-runner@master\n        with:\n          runner_name: ${{ matrix.runner_name }}\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n\n      - name: Kill runner and create a new one\n        if: ${{ steps.killable.outputs.runner-found == 'true' && steps.killable.outputs.runner-idle == 'true' }}\n        uses: Homebrew/actions/create-gcloud-instance@master\n        with:\n          runner_name: ${{ matrix.runner_name }}\n          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}\n          gcp_service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}\n          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Recreate Linux self-hosted runners on schedule` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 01:00 am. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the recreate-linux-runners concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `recreate`. The job `recreate` has 3 steps. The 1st step is named `Set up Cloud SDK`. The 2nd step is named `Wait for idle runner` and its id is `killable`. The 3rd step is named `Kill runner and create a new one`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3063677493319505}, {"id": "63c4942a8052faa2781a9911", "level": "level2", "llm_response": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n      - run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...\n```", "answer": "```yaml name: Integration tests\non:\n  workflow_dispatch: null\n  push:\n    branches:\n      - main\n      - dev\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2\n      - uses: actions/setup-go@37335c7bb261b353407cff977110895fa0b4f7d8 # pin@v2\n        with:\n          go-version: '1.18'\n      - run: go version\n      - run: make testacc\n        env:\n          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Integration tests` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main or a branch named dev. The workflow has one job. The 1st job is named `Run integration tests` and its job id is `integration_tests`. The job `integration_tests` has 4 steps. The 1st step is named `Clone Repository`. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.46869800712723664}, {"id": "63c4942a8052faa2781a9910", "level": "level2", "llm_response": "```yaml name: AccTest Command\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  acctest-command:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate App Installation Token\n        id: generate_token\n        uses: ./.github/actions/acctest-generate-token\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Slash Command Dispatch\n        uses: ./.github/actions/acctest-slash-command\n        with:\n          github_token: ${{ steps.generate_token.outputs.token }}\n```", "answer": "```yaml name: AccTest Command\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  acctest-command:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.issue.pull_request }}\n    steps:\n      - name: Generate App Installation Token\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.DX_ACCTEST_APP_ID }}\n          private_key: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n\n      - name: Slash Command Dispatch\n        uses: peter-evans/slash-command-dispatch@v1\n        env:\n          TOKEN: ${{ steps.generate_token.outputs.token }}\n        with:\n          token: ${{ env.TOKEN }}\n          reaction-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-type: pull-request\n          commands: acctest\n          named-args: true\n          permission: write\n```", "prompt": "Generate a GitHub Workflow named `AccTest Command` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `acctest-command`. The job `acctest-command` has 2 steps. The 1st step is named `Generate App Installation Token` and its id is `generate_token`. The 2nd step is named `Slash Command Dispatch`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.366543662880101}, {"id": "63c4940f7843b612699feb8d", "level": "level2", "llm_response": "```yaml on:\n  push:\n    branches:\n      - main\n\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-go\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - run: yarn install\n      - run: yarn coverage\n```", "answer": "```yaml # add public code coverage reports\non:\n  push:\n    branches:\n    - main\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: \"make test-cover\"\n    - uses: codecov/codecov-action@v2\n    with:\n      file: ./coverage.out\n      fail_ci_if_error: true\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `coverage`. The job `coverage` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3896287225430598}, {"id": "63c496a06fc19abdf9c9d2e3", "level": "level2", "llm_response": "```yaml name: Scorecards supply-chain security\n\non:\n  # https://git.io/Jts1y\n  branch-protection-rule:\n  schedule:\n    - cron: \"18 9 * * 4\"\n  push:\n    branches: [ main ]\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to run analysis on PRs\n      security-events: write\n      # Needed to upload analysis results\n      id-token: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run analysis\n        uses: scorecarddev/github-action@v1\n        with:\n          # Scorecard version to use\n          version: v1.2.0\n          # List of GitHub repository to analyze\n          repos: \"https://github.com/*\"\n          # GitHub token to authenticate with GitHub\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          # GitHub token to authenticate with GitHub Actions\n          # (if you don't use personal access tokens, you can skip this step)\n          actions_token: ${{ secrets.ACTIONS_TOKEN }}\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: scorecard-report\n          path: scorecard-report\n\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: scorecard-report/scorecard-report.sarif\n```", "answer": "```yaml # This file is part of ICU4X. For terms of use, please see the file\n# called LICENSE at the top level of the ICU4X source tree\n# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).\n\nname: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: '18 9 * * 4'\n  push:\n    branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c1aec4ac820532bab364f02a81873c555a0ba3a1 # v1.0.4\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) activity related to a branch protection rule occurs. 2) the scheduled time has come: at 09:18 am, only on thursday. 3) The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. The 2nd step is named `Run analysis`. The 3rd step is named `Upload artifact`. The 4th step is named `Upload to code-scanning`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "unknown Webhook event \"branch-protection-rule\". see https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#webhook-events for list of all Webhook event names", "filepath": "../tmp/test.yml", "line": 5, "column": 3, "kind": "events", "snippet": "  branch-protection-rule:\n  ^~~~~~~~~~~~~~~~~~~~~~~", "end_column": 25}]}, "bleu_score": 0.2873032957937745}, {"id": "63c4967d1899db58864d33af", "level": "level2", "llm_response": "```yaml name: Build package\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          registry-url: 'https://registry.npmjs.org'\n      - name: NPM install\n        run: npm ci\n      - name: NPM build\n        run: npm run build\n      - name: Grunt action-package\n        run: npm run action-package\n      - name: Build zip file\n        run: npm run zip\n```", "answer": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n\n  build-package:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n\n      - name: NPM install\n        run: npm install\n\n      - name: NPM build\n        run: npm run build\n\n      - name: Grunt action-package\n        run: npm run action-package\n\n      - name: Build zip file\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          path: |\n            package/\n          retention-days: 1\n```", "prompt": "Generate a GitHub Workflow named `Build package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: name-this input represents package name, its default value is generateblocks and it must be supplied. The workflow has one job. The job id of the 1st job is `build-package`. The job `build-package` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `NPM install`. The 4th step is named `NPM build`. The 5th step is named `Grunt action-package`. The 6th step is named `Build zip file`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7176046223119898}, {"id": "63c494c78052faa2781ad49a", "level": "level2", "llm_response": "```yaml name: \"Pull Request Labeler\"\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Pull Request Labeler` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `triage`. The job `triage` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5601984129989922}, {"id": "63c495928052faa2781b2bc0", "level": "level2", "llm_response": "```yaml name: Labeler\non:\n  - pull_request\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dokku/action-labeler@v1.0.0\n        with:\n          dokku: mykumx/mykumx\n          dokku-app: mykumx\n          dokku-action: mykumx\n          dokku-args: --no-verify\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: rhysd/changelog-from-release/action@v2\n      with:\n        file: CHANGELOG.md\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. The job `label` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1868744681023588}, {"id": "63c494608052faa2781aabf2", "level": "level2", "llm_response": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: configlet/configlet@v2.1.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          configlet_branch: configlet\n          configlet_env: configlet\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "prompt": "Generate a GitHub Workflow named `Configlet` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. 3) someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `configlet`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4155702068332866}, {"id": "63c4949e7843b61269a025e6", "level": "level2", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4946f7843b61269a011d1", "level": "level2", "llm_response": "```yaml name: I2::Dev::Nightly::Publish\n\non:\n  workflow_dispatch:\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Build and push iroha2:dev-nightly image\n        run: |\n          docker build -t iroha2:dev-nightly .\n          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}\n          docker push ghcr.io/iroha2:dev-nightly\n```", "answer": "```yaml name: I2::Dev::Nightly::Publish\n\non: workflow_dispatch\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container:\n      image: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: hyperledger/iroha2:dev-nightly-${{ github.sha }}\n          labels: commit=${{ github.sha }}\n          build-args: TAG=dev\n```", "prompt": "Generate a GitHub Workflow named `I2::Dev::Nightly::Publish` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `dockerhub`. The job `dockerhub` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Build and push iroha2:dev-nightly image`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2948060443577879}, {"id": "63c4941b7843b612699ff0aa", "level": "level2", "llm_response": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n      - name: Build and Release\n        env:\n          MAVEN_OPTS: -Xmx4g -XX:+UseG1GC\n        run: ./gradlew clean assemble\n```", "answer": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build and Release\n      env:\n        INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n        ZAP_RELEASE: 1\n        ZAP_JAVA_VERSION: 11\n      run: ./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease\n```", "prompt": "Generate a GitHub Workflow named `Release Main Version` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(zap/zap.gradle.kts), the workflow runs. The workflow has one job. The 1st job is named `Build and Release` and its job id is `release`. The job `release` has 3 steps. The 1st step is named ``. The 2nd step is named `Setup Java`. The 3rd step is named `Build and Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5740070535887547}, {"id": "63c494a97843b61269a02a52", "level": "level2", "llm_response": "```yaml name: pytorch1_8_1-cuda11_1\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n      - name: Install Dependencies\n        run: |\n          pip install -U pip\n          pip install build\n      - name: Build\n        run: |\n          python setup.py install\n          python setup.py build_ext --inplace --with-cuda=11\n          python setup.py test\n      - name: Check\n        run: |\n          python -c \"import torch; print(torch.__version__)\"\n          python -c \"import torch; print(torch.cuda.__version__)\"\n```", "answer": "```yaml name: pytorch1_8_1-cuda11_1\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu111\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.8.1-cu111\n      develop_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_8_1-cuda11_1` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1434332884338581}, {"id": "63c493ff8052faa2781a8681", "level": "level2", "llm_response": "```yaml name: Check License Lines\n\non:\n  push:\n    branches: [ '*' ]\n\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: devtools/gradle-action@v3\n        with:\n          gradle_task_name: check-license-lines\n          gradle_args: --stacktrace\n```", "answer": "```yaml name: Check License Lines\non:\n  push:\n    branches: '**'\n#  pull_request:\n#    branches:\n#      - main\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: kt3k/license_checker@v1.0.6```", "prompt": "Generate a GitHub Workflow named `Check License Lines` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch whose name matches * or a branch whose name matches *. The workflow has one job. The job id of the 1st job is `check-license-lines`. The job `check-license-lines` has 2 steps. The 1st step is named ``. The 2nd step is named `Check License Lines`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6271450618820373}, {"id": "63c494888052faa2781abb68", "level": "level2", "llm_response": "```yaml name: MERGE_MASTER_TO_DEVELOP\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout develop\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Merge master to develop and push\n        run: |\n          git checkout develop\n          git merge master\n          git push origin develop:develop\n          git push origin develop:develop\n          git push origin master:master\n\n      - name: Notify failure on Slack\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { send } = require('actions-core');\n            send({\n              type: 'status',\n              state: 'error',\n              title: 'Merge master to develop failed',\n              body: 'Merge master to develop failed',\n            });\n```", "answer": "```yaml name: MERGE_MASTER_TO_DEVELOP\non:\n  push:\n    branches:\n    - \"master\"\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n    - name: Checkout develop\n      uses: actions/checkout@v3\n      with:\n        ref: develop\n        fetch-depth: 0\n    - name: Merge master to develop and push\n      run: |\n        git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\n        git config user.email '${{ secrets.BPMN_IO_EMAIL }}'\n        git merge -m 'Merge master to develop' --no-edit origin/master\n        git push\n\n    - name: Notify failure on Slack\n      if: failure()\n      uses: slackapi/slack-github-action@v1.15.0\n      with:\n        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}\n        slack-message: \"Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.\"\n      env:\n        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `MERGE_MASTER_TO_DEVELOP` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `Merge_master_to_develop`. The job `Merge_master_to_develop` has 3 steps. The 1st step is named `Checkout develop`. The 2nd step is named `Merge master to develop and push`. The 3rd step is named `Notify failure on Slack`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34093868154027096}, {"id": "63c495038052faa2781aede8", "level": "level2", "llm_response": "```yaml name: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Create Conda environment with the rights deps\n        uses: conda-incubator/setup-miniconda@v2\n        with:\n          python-version: '3.9'\n          channels: conda-forge\n      - name: Install dependencies\n        run: conda install -y -c conda-forge numpy pandas pytest pytest-cov\n      - name: Run Tests\n        run: pytest --cov=pytest -v\n      - name: Conda info\n        run: conda info --json\n      - name: Conda list\n        run: conda list\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: \"windows-latest\"\n    strategy:\n      fail-fast: True\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          auto-update-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n        env:\n          ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n      - name: Create Conda environment with the rights deps\n        shell: bash -l {0}\n        run: |\n          conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n      - name: Install dependencies\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          python -m pip install --upgrade pip\n          python -m pip install -U pip setuptools wheel\n          python -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\n          python -m pip install .\n          python -m pip freeze\n          npm install -g azurite\n      - name: Run Tests\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          mkdir ~/blob_emulator\n          azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n          pytest -sv --timeout=300\n        env:\n          ZARR_TEST_ABS: 1\n          ZARR_V3_EXPERIMENTAL_API: 1\n      - name: Conda info\n        shell: bash -l {0}\n        run: conda info\n      - name: Conda list\n        shell: pwsh\n        run: conda list\n```", "prompt": "Generate a GitHub Workflow named `Python package` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Windows Tests` and its job id is `windows`. The job `windows` has 7 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Create Conda environment with the rights deps`. The 4th step is named `Install dependencies`. The 5th step is named `Run Tests`. The 6th step is named `Conda info`. The 7th step is named `Conda list`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1774680826307186}, {"id": "63c494347843b612699ffaac", "level": "level2", "llm_response": "```yaml name: Monitor CI Scaler\non:\n  schedule:\n    - cron: \"05 00,15 * * *\"\n\njobs:\n  MonitorCI:\n    name: monitor ci scaler\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: setup environment\n        run: |\n          curl -L -o - https://raw.githubusercontent.com/kevinvandenburg/git-gh-pages/main/install.sh | sh\n          mkdir -p ./.gh-pages\n          cp -R ./* ./.gh-pages\n      - name: check scaler\n        run: |\n          curl -s https://raw.githubusercontent.com/kevinvandenburg/git-gh-pages/main/scaler.sh | sh -s -- --url=https://github.com/$GITHUB_REPOSITORY --token=$GITHUB_TOKEN\n```", "answer": "```yaml name: Monitor CI Scaler\n\non:\n  # workflow_dispatch:\n  schedule:\n    - cron: '0 5,17 * * *'\n\njobs:\n  MonitorCI:\n    name: monitor ci scaler\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v1\n        with:\n          submodules: recursive\n      - name: setup environment\n        run: bash ./scripts/dev_setup.sh  -b -t -y\n      - name: check scaler\n        run: python3 ./scripts/monitor_autoscaler_recreate.py\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `Monitor CI Scaler` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: the scheduled time has come: at 05:00 am and 05:00 pm. The workflow has one job. The 1st job is named `monitor ci scaler` and its job id is `MonitorCI`. The job `MonitorCI` has 3 steps. The 1st step is named `checkout`. The 2nd step is named `setup environment`. The 3rd step is named `check scaler`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.41673229275162316}, {"id": "63c494cf8052faa2781ad80f", "level": "level2", "llm_response": "```yaml name: Release Documentation\non:\n  release:\n    types: [published]\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle.properties') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrappers-${{ hashFiles('**/gradle-wrapper.properties') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-wrappers-\n\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n\n      - name: Build with Gradle\n        run: ./gradlew --no-daemon --no-continuous --no-async --no-parallel --no-javadoc --no-test --no-jvm-args --no-verbose -Pgithub-token=${{ secrets.GITHUB_TOKEN }} -Pjava-version=${{ env.JAVA_VERSION }} -Pjava-opts=\"${{ env.GRADLE_OPTS }}\" -Pgithub-token=${{ secrets.GITHUB_TOKEN }} -Porg.gradle.daemon=false -Porg.gradle.java.installations.auto-detect=false -Porg.gradle.warning.mode=fail assemble docs\n```", "answer": "```yaml name: Release Documentation\non:\n  release:\n    types: [published]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail'\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        java: [ '8' ]\n        os: ['ubuntu-22.04' ]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-caches-\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrapper\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: ${{ matrix.java }}\n      - name: Build with Gradle\n        run: ./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace\n```", "prompt": "Generate a GitHub Workflow named `Release Documentation` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow sets an environment variable to use: `GRADLE_OPTS` is set to `-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail`. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The 1st job is named `Publish Release Documentation` and its job id is `java-build`. The job `java-build` has 5 steps. The 1st step is named `Checkout code`. The 2nd step is named `Cache Gradle dependencies`. The 3rd step is named `Cache Gradle wrappers`. The 4th step is named `Setup java`. The 5th step is named `Build with Gradle`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47049277600832085}, {"id": "63c496851899db58864d368d", "level": "level2", "llm_response": "```yaml name: Bump repositories\n\non:\n  schedule:\n    - cron: '0 20 * * *' # 00:20 UTC every day\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Bump cos \ud83d\udd27\n        uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          version: v1.45.2\n          args: --timeout 5m\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: \"bump cos\"\n          body: |\n            bump cos\n          title: \"bump cos\"\n          branch: \"master\"\n          delete-branch: true\n          delete-branch-label: \"no-merge\"\n          delete-branch-message: \"bump cos\"\n          labels: \"no-merge\"\n          assignees: \"a15405\"\n          # labels: \"no-merge\"\n```", "answer": "```yaml name: Bump repositories\non: \n schedule:\n   - cron: 0 20 * * *\n workflow_dispatch:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Bump cos \ud83d\udd27\n      run: |\n           docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\n           docker cp yq:/usr/bin/yq ./\n           export YQ=$PWD/yq\n           sudo -E bash ./.github/bump_repositories.sh\n           rm -rf yq\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      with:\n        token: ${{ secrets.PAT_TOKEN }}\n        push-to-fork: ci-robbot/c3os\n        commit-message: \":arrow_up: Update repositories\"\n        title: \"Repositories bump\"\n        body: \"Bump of luet repositories\"\n```", "prompt": "Generate a GitHub Workflow named `Bump repositories` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 08:00 pm. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 3 steps. The 1st step is named ``. The 2nd step is named `Bump cos \ud83d\udd27`. The 3rd step is named `Create Pull Request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"delete-branch-label\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 28, "column": 11, "kind": "action", "snippet": "          delete-branch-label: \"no-merge\"\n          ^~~~~~~~~~~~~~~~~~~~", "end_column": 30}, {"message": "input \"delete-branch-message\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 29, "column": 11, "kind": "action", "snippet": "          delete-branch-message: \"bump cos\"\n          ^~~~~~~~~~~~~~~~~~~~~~", "end_column": 32}]}, "bleu_score": 0.39706166781420515}, {"id": "63c4945a7843b61269a00a52", "level": "level2", "llm_response": "```yaml name: ci\n\non: [pull_request]\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: |\n            quay.io/quantum/protoc-gen-validate:${{ env.TEST_TAG }}\n      - name: Run\n        run: |\n          make test\n```", "answer": "```yaml name: ci\n\non:\n  pull_request:\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          load: true\n          push: false\n          tags: ${{ env.TEST_TAG }}\n      - name: Run\n        run: |\n          docker run --rm ${{ env.TEST_TAG }} ci\n```", "prompt": "Generate a GitHub Workflow named `ci` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow sets an environment variable to use: `TEST_TAG` is set to `protoc-gen-validate:${{ github.sha }}`. The workflow has one job. The job id of the 1st job is `docker`. The job `docker` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up QEMU`. The 3rd step is named `Set up Docker Buildx`. The 4th step is named `Build and export to Docker`. The 5th step is named `Run`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7433447665943342}, {"id": "63c49698b008460c1df15629", "level": "level2", "llm_response": "```yaml name: Auto Assign PR to Author\n\non:\n  pull_request_target:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-assign-pr-to-author@v2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: 'Auto Assign PR to Author'\non:\n  pull_request:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    permissions:\n      contents: read  # for kentaro-m/auto-assign-action to fetch config file\n      pull-requests: write  # for kentaro-m/auto-assign-action to assign PR reviewers\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n```", "prompt": "Generate a GitHub Workflow named `Auto Assign PR to Author` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by an event: a pull request is created. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `add-reviews`. The job `add-reviews` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2443104245198551}, {"id": "63c494a87843b61269a02a08", "level": "level2", "llm_response": "```yaml name: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n      - run: pip install --upgrade pip\n      - run: pip install -e .\n      - run: make docs\n      - run: make html\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install -r requirements/build-docs.txt\n      - run: linkcheckMarkdown docs/ -v -r\n      - run: mkdocs build --verbose\n```", "prompt": "Generate a GitHub Workflow named `Test` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `docs`. The job `docs` has 5 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The 5th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3666962875879059}, {"id": "63c4956d7843b61269a07890", "level": "level2", "llm_response": "```yaml name: Issue Comments for merge\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  check_comments_merge:\n    name: Check comments for /merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Command\n        uses: svenstaro/github-action-check-commands@v1\n        with:\n          commands: |\n            /merge\n\n  merge:\n    name: Merge Pull Request\n    needs: check_comments_merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge Pull Request\n        uses: svenstaro/github-action-merge-pull-request@v1\n        with:\n          base: develop\n          token: ${{ secrets.GITHUB_TOKEN }}\n          merge_method: squash\n          merge_commit: merge\n\n  commentFeedback:\n    name: Add reaction on success\n    needs: merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add reaction on success\n        uses: svenstaro/github-action-add-reaction@v1\n        with:\n          reaction: '\ud83d\udc4d'\n          issue-number: ${{ github.event.issue.number }}\n```", "answer": "```yaml on: issue_comment\nname: Issue Comments for merge\njobs:\n  check_comments_merge:\n    name: Check comments for /merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Command\n        uses: xt0rted/slash-command-action@v1.1.0\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          command: merge\n          reaction: \"true\"\n          reaction-type: \"eyes\"\n          allow-edits: \"false\"\n          permission-level: admin\n  merge:\n    runs-on: ubuntu-latest\n    needs: [check_comments_merge]\n    steps:\n      - name: Merge Pull Request\n        uses: juliangruber/merge-pull-request-action@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          number: ${{ github.event.issue.number }}\n          method: merge\n  commentFeedback:\n    runs-on: ubuntu-latest\n    needs: [merge]\n    steps:\n      - name: Add reaction on success\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reaction-type: hooray\n```", "prompt": "Generate a GitHub Workflow named `Issue Comments for merge` for a GitHub repository whose primary programming language is HCL. This workflow will be triggered by an event: activity related to an issue or pull request comment occurs. The workflow has 3 jobs. The 1st job is named `Check comments for /merge` and its job id is `check_comments_merge`. The job `check_comments_merge` has one step. The 1st step is named `Check for Command`. The job id of the 2nd job is `merge`. The job `merge` has one step. The 1st step is named `Merge Pull Request`. The job id of the 3rd job is `commentFeedback`. The job `commentFeedback` has one step. The 1st step is named `Add reaction on success`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.40357288570021627}, {"id": "63c495888052faa2781b2739", "level": "level2", "llm_response": "```yaml name: \u2744\ufe0f Lint\n\non: [push, pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  misc:\n    name: misc checker\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code.\n        uses: actions/checkout@v3\n\n      - name: spell check\n        uses: julien-d/gradle-spell-check@v2\n        with:\n          path: .\n\n      - name: Merge conflict\n        if: github.event_name == 'pull_request'\n        uses: julien-d/gradle-spell-check@v2\n        with:\n          path: .\n          mergeConflicts: true\n\n      - name: Plugin Code\n        if: github.event_name == 'pull_request'\n        uses: julien-d/gradle-spell-check@v2\n        with:\n          path: .\n          exclude: '**/plugins/**'\n\n  ci-eclint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code.\n        uses: actions/checkout@v3\n\n      - name: Setup Nodejs env\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n\n      - name: Install eclint\n        run: yarn add eclint\n\n      - name: Run eclint\n        run: eclint .\n```", "answer": "```yaml name: \u2744\ufe0f Lint\n\non: [push, pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  misc:\n    name: misc checker\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code.\n        uses: actions/checkout@v3.1.0\n      - name: spell check\n        run: |\n          pip install codespell==2.1.0\n          git grep --cached -l '' | xargs codespell --ignore-words=.ignore_words\n      - name: Merge conflict\n        run: |\n          bash ./utils/check-merge-conflict.sh\n      - name: Plugin Code\n        run: |\n          bash ./utils/check-plugins-code.sh\n\n  ci-eclint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v3.1.0\n\n      - name: Setup Nodejs env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: '12'\n\n      - name: Install eclint\n        run: |\n          sudo npm install -g eclint\n\n      - name: Run eclint\n        run: |\n          eclint check\n```", "prompt": "Generate a GitHub Workflow named `\u2744\ufe0f Lint` for a GitHub repository whose primary programming language is Lua. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The 1st job is named `misc checker` and its job id is `misc`. The job `misc` has 4 steps. The 1st step is named `Check out code.`. The 2nd step is named `spell check`. The 3rd step is named `Merge conflict`. The 4th step is named `Plugin Code`. The job id of the 2nd job is `ci-eclint`. The job `ci-eclint` has 4 steps. The 1st step is named `Check out code`. The 2nd step is named `Setup Nodejs env`. The 3rd step is named `Install eclint`. The 4th step is named `Run eclint`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.465790874623017}, {"id": "63c4951b8052faa2781af857", "level": "level2", "llm_response": "```yaml name: Docs Build\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install deps\n        run: npm ci\n      - name: Build docs\n        run: npm run docs:build\n      - name: Deploy to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@4.2.4\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH: gh-pages\n          FOLDER: docs/build\n```", "answer": "```yaml name: Docs Build\n\non:\n  # allows to manually run the job at any time\n  workflow_dispatch:\n  \n  # run on every push on the master branch\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install deps\n        run: |\n          npm install vuepress -D\n          npm install macaca-ecosystem -D\n\n      - name: Build docs\n        run: npm run docs:build\n\n      - name: Deploy to GitHub Pages\n        if: success()\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs_dist\n```", "prompt": "Generate a GitHub Workflow named `Docs Build` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `docs-build`. The job `docs-build` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set node version to 16`. The 3rd step is named `Install deps`. The 4th step is named `Build docs`. The 5th step is named `Deploy to GitHub Pages`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6035582273457464}, {"id": "63c494027843b612699fe5e4", "level": "level2", "llm_response": "```yaml name: \"CLA\"\non: [pull_request]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n          cache: 'maven'\n      - run: mvn verify\n      - run: mvn -B verify -DCLA_SIGNING=false -Dcla.signing.keyId=0000000000000000000000000000000000000000 -Dcla.signing.keyId=0000000000000000000000000000000000000000 -Dcla.signing.keyPassword=cla.signing.keyPassword -Dcla.signing.password=cla.signing.password\n        env:\n          CLA_SIGNING: false\n          CLA_SIGNING_KEY_ID: 0000000000000000000000000000000000000000\n          CLA_SIGNING_PASSWORD: cla.signing.password\n          CLA_SIGNING_KEY_PASSWORD: cla.signing.keyPassword\n```", "answer": "```yaml name: CLA\non: [pull_request]\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: ./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"\n```", "prompt": "Generate a GitHub Workflow named `CLA` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check`. The job `check` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.18872199870980155}, {"id": "63c495277843b61269a05c66", "level": "level2", "llm_response": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  schedule:\n    - cron: '0 10 * * *'\n\njobs:\n  freezed:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n      - name: Removing example folder\n        run: rm -rf examples\n      - name: Install dependencies\n        run: yarn install\n      - name: Check format\n        run: yarn lint:check\n      - name: Generate\n        run: yarn generate\n      - name: Analyze\n        run: yarn analyze\n      - name: Run tests\n        run: yarn test\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  schedule:\n    # runs the CI everyday at 10AM\n    - cron: \"0 10 * * *\"\n\njobs:\n  freezed:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        package:\n          - packages/freezed\n          - packages/freezed_annotation\n        channel:\n          - master\n          - stable\n        dependencies:\n          - get\n          - downgrade\n        exclude:\n          - channel: master\n            dependencies: downgrade\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: ${{ matrix.channel }}\n          cache: ${{ matrix.channel == 'stable' }}\n\n      # It is executed separately\n      - name: Removing example folder\n        run: rm -rf example\n        working-directory: ${{ matrix.package }}\n\n      - name: Install dependencies\n        run: |\n          flutter pub ${{ matrix.dependencies }}\n        working-directory: ${{ matrix.package }}\n\n      - name: Check format\n        # Check format only on master\n        if: matrix.channel == 'master'\n        run: flutter format --set-exit-if-changed .\n        working-directory: ${{ matrix.package }}\n\n      - name: Generate\n        run: |\n          if grep -q build_runner \"pubspec.yaml\"; then\n            flutter pub run build_runner build --delete-conflicting-outputs\n          fi\n        working-directory: ${{ matrix.package }}\n\n      - name: Analyze\n        run: flutter analyze\n        working-directory: ${{ matrix.package }}\n\n      - name: Run tests\n        run: |\n          if grep -q \"name: example\" \"pubspec.yaml\"; then\n            flutter test\n          else\n            dart test\n          fi\n        working-directory: ${{ matrix.package }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) there is activity relating to a pull request. 3) the scheduled time has come: at 10:00 am. The workflow has one job. The job id of the 1st job is `freezed`. The job `freezed` has 8 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Removing example folder`. The 4th step is named `Install dependencies`. The 5th step is named `Check format`. The 6th step is named `Generate`. The 7th step is named `Analyze`. The 8th step is named `Run tests`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.16241378853588698}, {"id": "63c4968933b087f6bde2ca37", "level": "level2", "llm_response": "```yaml name: e2e-kind-upgrades\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        run: |\n          mkdir -p bazel-bin\n          sudo chown $USER: $WORKSPACE/bazel-bin\n          sudo chmod 755 $WORKSPACE/bazel-bin\n      - name: End-to-end (k3d)\n        run: |\n          bazel build //e2e/e2e_kind_upgrades --config=release --out_dir=$WORKSPACE/out --verbose_failures\n          bazel run //e2e/e2e_kind_upgrades --config=release --out_dir=$WORKSPACE/out\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: e2e-kind-upgrades\n\non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: End-to-end (k3d)\n        run: make test/e2e/k3d-upgrades\n```", "prompt": "Generate a GitHub Workflow named `e2e-kind-upgrades` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. 3) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `e2e-kind-upgrades`. The job `e2e-kind-upgrades` has 3 steps. The 1st step is named ``. The 2nd step is named `Mount bazel cache`. The 3rd step is named `End-to-end (k3d)`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34571698327757083}, {"id": "63c494037843b612699fe649", "level": "level2", "llm_response": "```yaml name: Tag\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n      tag:\n        description: 'Tag'\n        default: 'latest'\n        required: true\npermissions: {}\njobs:\n  build:\n    name: Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'npm'\n      - name: Update tag\n        run: |\n          npm install -g yarn\n          yarn --immutable --frozen-lockfile\n          yarn version ${{ github.event.inputs.version }}\n          yarn tag ${{ github.event.inputs.tag }}\n          yarn publish\n```", "answer": "```yaml name: Tag\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version\n        required: true\n      tag:\n        description: Tag\n        default: latest\n        required: true\n\npermissions: {}\njobs:\n  build:\n    name: Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}\n    environment: release\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setup Node\n      uses: actions/setup-node@v3\n    - name: Update tag\n      env:\n        \"npm_config_//registry.npmjs.org/:_authToken\": ${{ secrets.NPM_TOKEN }}\n      run: |\n        npm dist-tag add pnpm@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n        npm dist-tag add @pnpm/exe@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n```", "prompt": "Generate a GitHub Workflow named `Tag` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives 2 inputs: version-this input represents version and it must be supplied; tag-this input represents tag, its default value is latest and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: the workflow disables permissions for the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}` and its job id is `build`. The job `build` has 2 steps. The 1st step is named `Setup Node`. The 2nd step is named `Update tag`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5093468460875435}, {"id": "63c4949a8052faa2781ac0b0", "level": "level2", "llm_response": "```yaml name: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'pnpm'\n      - name: Cache pnpm modules\n        run: pnpm install --frozen-lockfile --non-interactive\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 7\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 7\n      - name: Build project\n        run: pnpm run build\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-pnpm-modules\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ${{ github.workspace }}/.next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          restore-keys: |\n            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-\n      - uses: pnpm/action-setup@v2.2.4\n        with:\n          version: 7.x.x\n          run_install: true\n      - name: Build project\n        run: |\n          yarn build\n          yarn lint\n        env:\n          CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node.js CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named `Use Node.js ${{ matrix.node-version }}`. The 3rd step is named `Cache pnpm modules`. The 4th step is named ``. The 5th step is named ``. The 6th step is named `Build project`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.29745859623494525}, {"id": "63c4967e1899db58864d33dd", "level": "level2", "llm_response": "```yaml name: Lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Commit Message\n        uses: actions/commit-message@v2\n        with:\n          commitMessage: \"fix: update commit message\"\n          commitAuthor: \"github-actions[bot] <80909585+github-actions[bot]@users.noreply.github.com>\"\n          commitDate: \"2023-08-01T00:00:00Z\"\n          commitMessagePrefix: \"fix:\"\n      - name: File names\n        run: |\n          echo \"File names:\" \\\n          | grep -v \"^[[:space:]]*$\" \\\n          | xargs -0 -n1 echo\n      - name: Functions\n        run: |\n          echo \"Functions:\" \\\n          | grep -v \"^[[:space:]]*$\" \\\n          | xargs -0 -n1 echo\n      - name: Logging messages should not have trailing newlines\n        run: |\n          echo \"Logging messages should not have trailing newlines:\" \\\n          | grep -v \"^[[:space:]]*$\" \\\n          | xargs -0 -n1 echo\n  lint-go:\n    name: Go\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.48.0\n          args: --config=linters/go.toml\n```", "answer": "```yaml #\n# DO NOT EDIT THIS FILE\n#\n# It is automatically copied from https://github.com/pion/.goassets repository.\n# If this repository should have package specific CI config,\n# remove the repository name from .goassets/.github/workflows/assets-sync.yml.\n#\n# If you want to update the shared CI config, send a PR to\n# https://github.com/pion/.goassets instead of this repository.\n#\n\nname: Lint\non:\n  pull_request:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n        - uses: actions/checkout@v3\n          with:\n            fetch-depth: 0\n\n        - name: Commit Message\n          run: .github/lint-commit-message.sh\n\n        - name: File names\n          run: .github/lint-filename.sh\n\n        - name: Functions\n          run: .github/lint-disallowed-functions-in-library.sh\n\n        - name: Logging messages should not have trailing newlines\n          run: .github/lint-no-trailing-newline-in-log-messages.sh\n\n  lint-go:\n    name: Go\n    permissions:\n      contents: read\n      pull-requests: read\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.45.2\n          args: $GOLANGCI_LINT_EXRA_ARGS\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created, the title or body of a pull request is edited or a pull request's head branch is updated. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The 1st job is named `Metadata` and its job id is `lint-commit-message`. The job `lint-commit-message` has 5 steps. The 1st step is named ``. The 2nd step is named `Commit Message`. The 3rd step is named `File names`. The 4th step is named `Functions`. The 5th step is named `Logging messages should not have trailing newlines`. The 2nd job is named `Go` and its job id is `lint-go`. The job `lint-go` has 2 steps. The 1st step is named ``. The 2nd step is named `golangci-lint`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3280582132350145}, {"id": "63c4947b8052faa2781ab631", "level": "level2", "llm_response": "```yaml name: Publish Test Results\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types:\n      - completed\n\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    if: github.event.workflow_run.conclusion == 'success'\n    steps:\n      - name: Download and Extract Artifacts\n        uses: actions/checkout@v3\n        with:\n          path: artifacts\n      - name: Publish Test Results\n        uses: github-actions/github-actions@v2.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ARTIFACTS_PATH: artifacts\n          ARTIFACTS_GITHUB_WORKFLOW: test-results\n          ARTIFACTS_GITHUB_REF: ${{ github.event.workflow_run.head_sha }}\n          ARTIFACTS_GITHUB_RUN_ID: ${{ github.event.workflow_run.id }}\n          ARTIFACTS_GITHUB_RUN_NUMBER: ${{ github.event.workflow_run.number }}\n          ARTIFACTS_BRANCH: ${{ github.event.workflow_run.head_ref }}\n          ARTIFACTS_BASE_URL: ${{ github.event.workflow_run.head_repository.html_url }}\n          ARTIFACTS_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Publishing of unit test results has to be a separate workflow in order to support forked PRs\n# See https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches\nname: Publish Test Results\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion != 'skipped'\n\n    steps:\n      - name: Download and Extract Artifacts\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        run: |\n          mkdir -p artifacts && cd artifacts\n\n          artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\n          gh api \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\n          do\n            IFS=$'\\t' read name url <<< \"$artifact\"\n            gh api $url > \"$name.zip\"\n            unzip -d \"$name\" \"$name.zip\"\n          done\n\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          commit: ${{ github.event.workflow_run.head_sha }}\n          event_file: artifacts/Event File/event.json\n          event_name: ${{ github.event.workflow_run.event }}\n          junit_files: |\n            artifacts/**/surefire-reports/*.xml\n            artifacts/**/failsafe-reports/TEST-*.xml\n```", "prompt": "Generate a GitHub Workflow named `Publish Test Results` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: the workflow named CI is completed. The workflow has one job. The 1st job is named `Test Results` and its job id is `test-results`. The job `test-results` has 2 steps. The 1st step is named `Download and Extract Artifacts`. The 2nd step is named `Publish Test Results`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2752882857142885}, {"id": "63c4950a7843b61269a0501c", "level": "level2", "llm_response": "```yaml name: Integration test on schedule (minimal)\n\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Start integration test\n        uses: tibdex/github-action-integration-test@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          integration-test: test-integration-minimal\n```", "answer": "```yaml name: Integration test on schedule (minimal)\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    secrets: inherit\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: \"['1.22', '1.23']\"\n```", "prompt": "Generate a GitHub Workflow named `Integration test on schedule (minimal)` for a GitHub repository whose primary programming language is Mustache. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Start integration test (minimal)` and its job id is `start-integration-test-minimal`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5922013238537747}, {"id": "63c496891e3364807577b43d", "level": "level2", "llm_response": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        uses: joshuabrown/actions-rate-limit@v1\n        with:\n          rate_limit: 100\n```", "answer": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        env:\n          TOKEN: ${{ github.token }}\n        run: |\n          curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n```", "prompt": "Generate a GitHub Workflow named `Check Actions rate limit` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Check Actions rate limit` and its job id is `check`. The job `check` has one step. The 1st step is named `Check rate limit`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5547974985850613}, {"id": "63c4969e1899db58864d41ee", "level": "level2", "llm_response": "```yaml name: Auto message on Creating Issue.\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment for issue\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const issue = context.payload.issue\n            const body = `Hello, @${issue.user.login}! This is a comment from the automatic workflow to help you to get started with the repository. Please check the [README](https://github.com/Chaijs/chai-react) and [installation](https://github.com/Chaijs/chai-react#installation) for more information.`\n            issue.createComment({ body }).catch(err => console.error(err))\n```", "answer": "```yaml name: Auto message on Creating Issue.\n\non:\n\n  issues:\n\n    types: [opened]\n\njobs:\n\n  greeting:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Create comment for issue\n\n      if: github.event_name =='issues' \n\n      uses: peter-evans/create-or-update-comment@v1\n\n      with:\n\n        issue-number: ${{tojson(github.event.issue.number)}}\n\n        body: |\n\n            Hi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n```", "prompt": "Generate a GitHub Workflow named `Auto message on Creating Issue.` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `greeting`. The job `greeting` has one step. The 1st step is named `Create comment for issue`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3145639519465256}, {"id": "63c496941899db58864d3d85", "level": "level2", "llm_response": "```yaml name: release-please\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release-please:\n    runs-on: macos-latest\n    steps:\n      - uses: release-please/action@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          release-name: \"Release\"\n          prerelease: false\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release-please\non:\n   push:\n      branches:\n         - master\njobs:\n   release-please:\n      runs-on: ubuntu-latest\n      steps:\n         - uses: GoogleCloudPlatform/release-please-action@v2\n           with:\n            token: ${{ secrets.GITHUB_TOKEN }}\n            release-type: simple\n            version-file: \"./version.txt\"\n            package-name: release-please-action\n            default-branch: master\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is Swift. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. The job `release-please` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4609056322258579}, {"id": "63c496486fc19abdf9c9b0d5", "level": "level2", "llm_response": "```yaml name: Dependencies\non:\n  schedule:\n    - cron: \"0 12 * * 1\"\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n      - run: npm ci\n      - run: npm run build\n      - run: npm run lint\n      - run: npm run test\n```", "answer": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: \"0 12 * * 1\"\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: latest\n      - uses: actions/setup-node@v3\n        with:\n          cache: \"pnpm\"\n          node-version-file: \".nvmrc\"\n          registry-url: \"https://npm.pkg.github.com\"\n      - run: rm -rf pnpm-lock.yaml **/node_modules/\n      - run: pnpm install\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}\n      - uses: EndBug/add-and-commit@v9\n        with:\n          message: \"chore(deps): upgrade versions\"\n```", "prompt": "Generate a GitHub Workflow named `Dependencies` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 pm, only on monday. 2) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Upgrade dependencies` and its job id is `upgrade`. The job `upgrade` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The 5th step is named ``. The 6th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4338487693716383}, {"id": "63c4954d8052faa2781b0e83", "level": "level2", "llm_response": "```yaml name: xgo\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build artifacts\n        run: |\n          make xgo\n          docker build -t github.com/hyperledger/ariesdapp-cli -t github.com/hyperledger/ariesdapp-cli:latest -f docker/Dockerfile -t github.com/hyperledger/ariesdapp-cli:dev -t github.com/hyperledger/ariesdapp-cli:nightly .\n      - name: Move artifacts\n        run: |\n          mkdir -p artifacts\n          mv -f docker/artifacts/* artifacts/\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: artifacts\n          path: artifacts\n      - name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: artifacts/**/*\n          draft: false\n          name: AriesDapp CLI\n          description: AriesDapp CLI\n          tag: ${{ github.ref }}\n```", "answer": "```yaml name: xgo\n\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - 'v*'\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - 'master'\n    paths-ignore:\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      -\n        name: Build artifacts\n        uses: docker/bake-action@v2\n        with:\n          targets: artifact-all\n      -\n        name: Move artifacts\n        run: |\n          mv ./dist/**/* ./dist/\n      -\n        name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: xgo\n          path: ./dist/*\n          if-no-files-found: error\n      -\n        name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, 'refs/tags/v')\n        with:\n          draft: true\n          files: |\n            dist/*.tar.gz\n            dist/*.zip\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `xgo` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a tag whose name matches v*. When all the path names of push event match patterns in the paths-ignore filter(**.md), the workflow will not run. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. When all the path names of pull_request event match patterns in the paths-ignore filter(**.md), the workflow will not run. Only a single workflow using the xgo-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up Docker Buildx`. The 3rd step is named `Build artifacts`. The 4th step is named `Move artifacts`. The 5th step is named `Upload artifacts`. The 6th step is named `GitHub Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"description\" is not defined in action \"softprops/action-gh-release@v1\". available inputs are \"append_body\", \"body\", \"body_path\", \"discussion_category_name\", \"draft\", \"fail_on_unmatched_files\", \"files\", \"generate_release_notes\", \"name\", \"prerelease\", \"repository\", \"tag_name\", \"target_commitish\", \"token\"", "filepath": "../tmp/test.yml", "line": 45, "column": 11, "kind": "action", "snippet": "          description: AriesDapp CLI\n          ^~~~~~~~~~~~", "end_column": 22}, {"message": "input \"tag\" is not defined in action \"softprops/action-gh-release@v1\". available inputs are \"append_body\", \"body\", \"body_path\", \"discussion_category_name\", \"draft\", \"fail_on_unmatched_files\", \"files\", \"generate_release_notes\", \"name\", \"prerelease\", \"repository\", \"tag_name\", \"target_commitish\", \"token\"", "filepath": "../tmp/test.yml", "line": 46, "column": 11, "kind": "action", "snippet": "          tag: ${{ github.ref }}\n          ^~~~", "end_column": 14}]}, "bleu_score": 0.45487814443861524}, {"id": "63c494a48052faa2781ac54e", "level": "level2", "llm_response": "```yaml name: lint\n\non:\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'docs/**'\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - run: cspell --config ./.cspell.json --update\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - uses: ./.github/actions/lint\n```", "answer": "```yaml name: lint\non: # rebuild any PRs and main branch changes\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"docs/**\"\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx cspell \"**\" --dot --no-progress\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: yarn\n      - run: yarn lint\n```", "prompt": "Generate a GitHub Workflow named `lint` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) When all the path names of pull_request event match patterns in the paths-ignore filter(docs/**), the workflow will not run. 2) The workflow would run whenever there is a push event to: a branch named main. When all the path names of push event match patterns in the paths-ignore filter(docs/**), the workflow will not run. The workflow has 2 jobs. The job id of the 1st job is `cspell`. The job `cspell` has 2 steps. The 1st step is named ``. The 2nd step is named ``. The job id of the 2nd job is `lint`. The job `lint` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4341909043048411}, {"id": "63c4957d8052faa2781b229c", "level": "level2", "llm_response": "```yaml name: Build site nightly\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: curl\n        run: |\n          wget https://raw.githubusercontent.com/laravel/laravel/master/.github/workflows/ci.sh\n          chmod +x .github/workflows/ci.sh\n          ./.github/workflows/ci.sh\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nname: Build site nightly\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: curl\n        env:\n          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}\n        uses: wei/curl@v1\n        with:\n          args: -X POST -d '{}' \"$NETLIFY_BUILD_HOOK\"\n```", "prompt": "Generate a GitHub Workflow named `Build site nightly` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The 1st job is named `dot-release` and its job id is `dot-release`. The job `dot-release` has one step. The 1st step is named `curl`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4514652579956869}, {"id": "63c4968633b087f6bde2c8ea", "level": "level2", "llm_response": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '0.*.*'\n      - '0.*.*rc[0-9]+'\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install tox\n        run: pip install tox\n      - name: Run tox\n        run: tox\n```", "answer": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"[0-9]+.[0-9]+.[0-9]+\"\n      - \"[0-9]+.[0-9]+.[0-9]+rc[0-9]+\"\n\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment:\n          - \"py36\"\n          - \"py37\"\n          - \"flake8\"\n\n        include:\n          - environment: \"py36\"\n            python: \"3.6\"\n          - environment: \"py37\"\n            python: \"3.7\"\n          - environment: \"flake8\"\n            python: \"3.7\"\n\n    container:\n      image: python:${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install tox\n      - name: Run tox\n        run: |\n          tox -e ${{ matrix.environment }}\n```", "prompt": "Generate a GitHub Workflow named `Run checks` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a tag whose name matches [0-9]+.[0-9]+.[0-9]+ or a tag whose name matches [0-9]+.[0-9]+.[0-9]+rc[0-9]+. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `tox`. The job `tox` has 3 steps. The 1st step is named ``. The 2nd step is named `Install tox`. The 3rd step is named `Run tox`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22678011259254835}, {"id": "63c494187843b612699fef56", "level": "level2", "llm_response": "```yaml name: Fork Update PR\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: 'Optional. If true, trigger the workflow with the debug input'\n        default: 'false'\n  schedule:\n    # run every monday at 10:00\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  fork_update_pr:\n    name: Fork Update PR\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fork PR\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          # This step should be the last one in the workflow\n          fetch-depth: 0\n      - name: Set up QEMU\n        uses: docker://qemu-action/qemu-action\n        with:\n          version: '2.11'\n      - name: Set up Docker Buildx\n        uses: docker://docker.io/buildx-action/buildx-action\n        with:\n          driver: qcow2\n          load: true\n      - name: Set up Docker Buildx\n        uses: docker://docker.io/buildx-action/buildx-action\n        with:\n          driver: qcow2\n          load: true\n      - name: Build and push\n        uses: docker://docker.io/build-push-action\n        with:\n          context: .\n          file: Dockerfile\n          platforms: linux/amd64\n          push: true\n          tags: ${{ github.ref }}-latest\n          labels: |\n            org.opencontainers.image.url: https://github.com/${{ github.repository }}\n            org.opencontainers.image.version: ${{ github.sha }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: false\n\njobs:\n  fork_update_pr:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == true\n    if: github.repository_owner != 'HariSekhon'\n    name: Fork Update PR\n    uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "prompt": "Generate a GitHub Workflow named `Fork Update PR` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, it is optional and its default value is False. 2) the scheduled time has come: at 10:00 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the ${{ github.ref }}-${{ github.workflow }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Fork Update PR` and its job id is `fork_update_pr`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"fetch-depth\" is duplicated in \"with\" section. previously defined at line:29,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 31, "column": 11, "kind": "syntax-check", "snippet": "          fetch-depth: 0\n          ^~~~~~~~~~~~", "end_column": 22}]}, "bleu_score": 0.24875470644074113}, {"id": "63c494e67843b61269a04123", "level": "level2", "llm_response": "```yaml name: CI\n\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - .github/**\n      - .vscode/**\n      - README.md\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        dart-version: [1.22.1]\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          channel: stable\n          sdk: flutter\n          dart-version: ${{ matrix.dart-version }}\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter pub run analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format -v\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "answer": "```yaml name: CI\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: '2.10.4'\n          channel: 'stable'\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --set-exit-if-changed --dry-run .\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch whose name matches **. When all the path names of pull_request event match patterns in the paths-ignore filter(.github/**, .vscode/** or README.md), the workflow will not run. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named `Setup Flutter`. The 2nd step is named `Checkout OneSignal-Flutter-SDK`. The 3rd step is named `Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6`. The 4th step is named `Static Analysis`. The 5th step is named `Ensure the Dart code is formatted correctly`. The 6th step is named `Run Flutter unit tests`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"sdk\" is not defined in action \"subosito/flutter-action@v2\". available inputs are \"architecture\", \"cache\", \"cache-key\", \"cache-path\", \"channel\", \"dry-run\", \"flutter-version\", \"flutter-version-file\", \"pub-cache-key\", \"pub-cache-path\"", "filepath": "../tmp/test.yml", "line": 26, "column": 11, "kind": "action", "snippet": "          sdk: flutter\n          ^~~~", "end_column": 14}, {"message": "input \"dart-version\" is not defined in action \"subosito/flutter-action@v2\". available inputs are \"architecture\", \"cache\", \"cache-key\", \"cache-path\", \"channel\", \"dry-run\", \"flutter-version\", \"flutter-version-file\", \"pub-cache-key\", \"pub-cache-path\"", "filepath": "../tmp/test.yml", "line": 27, "column": 11, "kind": "action", "snippet": "          dart-version: ${{ matrix.dart-version }}\n          ^~~~~~~~~~~~~", "end_column": 23}]}, "bleu_score": 0.6426301056199087}, {"id": "63c4957b8052faa2781b219f", "level": "level2", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**.go'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**.go'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Build\n        run: go build -v -o /tmp/app ./cmd/app\n      - name: Test\n        run: go test -v ./...\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches: [ main ]\n    paths:\n      - '**.go'\n  pull_request:\n    branches: [ main ]\n    paths:\n      - '**.go'\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.18\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Test\n      run: go test -cover -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(**.go), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. Only if at least one path of pull_request event matches a pattern in the paths filter(**.go), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Go`. The 3rd step is named `Build`. The 4th step is named `Test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7395547135236041}, {"id": "63c495928052faa2781b2bc1", "level": "level2", "llm_response": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create Release\n        id: create_release\n        uses: svenstaro/create-release-action@v2.0.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          body: |\n            This release was created automatically by the GitHub Actions workflow\n            on the request of ${{ github.actor }}.\n          draft: false\n          prerelease: false\n```", "answer": "```yaml \n# https://github.com/actions/create-release\nname: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Create Release` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Create Release` and its job id is `build`. The job `build` has 2 steps. The 1st step is named `Checkout code`. The 2nd step is named `Create Release` and its id is `create_release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.49505966132626206}, {"id": "63c496686fc19abdf9c9bea4", "level": "level2", "llm_response": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Drafts/updates the next repository release` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. The job `update_release_draft` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9210589320522863}, {"id": "63c494768052faa2781ab616", "level": "level2", "llm_response": "```yaml name: Static analysis\n\non:\n  pull_request:\n\njobs:\n  static-psalm-analysis:\n    name: Nextcloud ${{ matrix.ocp-version }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ocp-version: ['3.9']\n        node-version: [14, 16, 18, 19]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up php\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.ocp-version }}\n          extensions: mbstring\n          coverage: none\n\n      - name: Install dependencies\n        run: |\n          composer install --prefer-dist --no-interaction --no-progress --no-scripts\n\n      - name: Install dependencies\n        run: |\n          composer require --dev phpstan/phpstan phpunit/phpunit\n\n      - name: Run coding standards check\n        run: |\n          php bin/phpstan analyse --no-progress --no-interaction --ignore-path=.github/workflows/psalm.yml\n```", "answer": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n      runs-on: ubuntu-latest\n      strategy:\n          matrix:\n              ocp-version: [ 'v20.0.7', 'v21.0.0', 'dev-stable22', 'dev-stable23', 'dev-master' ]\n      name: Nextcloud ${{ matrix.ocp-version }}\n      steps:\n          - name: Checkout\n            uses: actions/checkout@master\n          - name: Set up php\n            uses: shivammathur/setup-php@master\n            with:\n                php-version: 7.4\n                tools: composer:v1\n                coverage: none\n          - name: Install dependencies\n            run: composer i\n          - name: Install dependencies\n            run: composer require --dev christophwurst/nextcloud:${{ matrix.ocp-version }}\n          - name: Run coding standards check\n            run: composer run psalm\n```", "prompt": "Generate a GitHub Workflow named `Static analysis` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Nextcloud ${{ matrix.ocp-version }}` and its job id is `static-psalm-analysis`. The job `static-psalm-analysis` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up php`. The 3rd step is named `Install dependencies`. The 4th step is named `Install dependencies`. The 5th step is named `Run coding standards check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4182128907622102}, {"id": "63c4951f8052faa2781af9e5", "level": "level2", "llm_response": "```yaml name: IRC Notification\n\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        run: |\n          echo \"irc push\" >> $GITHUB_STEP_SUMMARY\n          echo \"irc push\" >> $GITHUB_ENV\n          git config user.email \"noreply@github.com\"\n          git config user.name \"GitHub Actions\"\n          git remote set-url origin https://${{ secrets.REPO_TOKEN }}@github.com/${{ github.repository }}\n          git push --set-upstream origin ${{ github.head_ref }}\n```", "answer": "```yaml name: \"IRC Notification\"\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online'\n        with:\n          channel: \"#cool-dev\"\n          nickname: github-online\n          message: |\n            ${{ toJson(github.event) }}\n```", "prompt": "Generate a GitHub Workflow named `IRC Notification` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `test`. The job `test` has one step. The 1st step is named `irc push`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "\"github.head_ref\" is potentially untrusted. avoid using it directly in inline scripts. instead, pass it through an environment variable. see https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions for more details", "filepath": "../tmp/test.yml", "line": 10, "column": 297, "kind": "expression", "snippet": "        run: |", "end_column": 297}]}, "bleu_score": 0.17302961464039843}, {"id": "63c493ee7843b612699fde0c", "level": "level2", "llm_response": "```yaml name: nf-core AWS test\n\non:\n  workflow_dispatch:\n\njobs:\n  run-tower:\n    name: Run AWS tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Launch workflow via tower\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        run: |\n          echo \"AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\" >> $GITHUB_ENV\n          echo \"AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\" >> $GITHUB_ENV\n          wget https://raw.githubusercontent.com/NCAR/nf-core/master/.github/workflows/tower.yml -O - | tee tower.yml\n          ./tower.yml --workflow ${{ github.event_name }} --action run --job run-tower --token ${{ secrets.AWS_ACCESS_KEY_ID }}```", "answer": "```yaml name: nf-core AWS test\n# This workflow can be triggered manually with the GitHub actions workflow dispatch button.\n# It runs the -profile 'test' on AWS batch\n\non:\n  workflow_dispatch:\njobs:\n  run-tower:\n    name: Run AWS tests\n    if: github.repository == 'nf-core/mag'\n    runs-on: ubuntu-latest\n    steps:\n      # Launch workflow using Tower CLI tool action\n      - name: Launch workflow via tower\n        uses: nf-core/tower-action@v3\n        with:\n          workspace_id: ${{ secrets.TOWER_WORKSPACE_ID }}\n          access_token: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          compute_env: ${{ secrets.TOWER_COMPUTE_ENV }}\n          workdir: s3://${{ secrets.AWS_S3_BUCKET }}/work/mag/work-${{ github.sha }}\n          parameters: |\n            {\n              \"outdir\": \"s3://${{ secrets.AWS_S3_BUCKET }}/mag/results-test-${{ github.sha }}\"\n            }\n          profiles: test,aws_tower\n```", "prompt": "Generate a GitHub Workflow named `nf-core AWS test` for a GitHub repository whose primary programming language is Nextflow. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Run AWS tests` and its job id is `run-tower`. The job `run-tower` has one step. The 1st step is named `Launch workflow via tower`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3310140416672697}, {"id": "63c496981899db58864d3f73", "level": "level2", "llm_response": "```yaml name: Triage tasks\n\non: [pull_request]\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: triage-${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: ruby-actions/check-commit-format@v1.1.0\n        with:\n          github-token: ${{ github.token }}\n      - name: Label pull request\n        uses: peter-evans/repository-labeler@v4.0.0\n        with:\n          repository-token: ${{ secrets.GITHUB_TOKEN }}\n          labels: 'labels:triaged'\n```", "answer": "```yaml name: Triage tasks\n\non: pull_request_target\n\nconcurrency:\n  group: \"triage-${{ github.event.number }}\"\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n      - name: Label pull request\n        uses: Homebrew/actions/label-pull-requests@master\n        if: always()\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n          def: |\n            - label: new cask\n              status: added\n              path: Casks/.+\n\n            - label: marked for removal/rejection\n              status: removed\n              path: Casks/.+\n\n            - label: documentation\n              path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n            - label: bump-cask-pr\n              pr_body_content: Created with `brew bump-cask-pr`\n\n            - label: missing description\n              path: Casks/.+\n              missing_content: \\n  desc .+\\n\n\n            - label: appcast migration needed\n              path: Casks/.+\n              content: \\n  appcast .+\\n\n```", "prompt": "Generate a GitHub Workflow named `Triage tasks` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the triage-${{ github.event.number }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `triage`. The job `triage` has 2 steps. The 1st step is named `Check commit format`. The 2nd step is named `Label pull request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.14737726624999706}, {"id": "63c4963d6fc19abdf9c9abf2", "level": "level2", "llm_response": "```yaml name: Submit to Web Store\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pnpm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-pnpm-\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 7.1.1\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Build and zip extension artifact\n        run: |\n          npm ci\n          npm run build:production\n          npm run zip\n      - name: Browser Platform Publish\n        uses: pnpm/action-browser-publish@v1\n        with:\n          pnpm-token: pnpm-org\n          pnpm-version: 7.1.1\n```", "answer": "```yaml name: \"Submit to Web Store\"\r\non:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - name: Cache pnpm modules\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: ~/.pnpm-store\r\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-\r\n      - uses: pnpm/action-setup@v2.2.1\r\n        with:\r\n          version: 7.1.0\r\n          run_install: true\r\n      - name: Build and zip extension artifact\r\n        run: pnpm build -- --zip\r\n      - name: Browser Platform Publish\r\n        uses: PlasmoHQ/bpp@v2\r\n        with:\r\n          keys: ${{ secrets.SUBMIT_KEYS }}\r\n          artifact: build/chrome-mv3-prod.zip\r\n```", "prompt": "Generate a GitHub Workflow named `Submit to Web Store` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 5 steps. The 1st step is named ``. The 2nd step is named `Cache pnpm modules`. The 3rd step is named ``. The 4th step is named `Build and zip extension artifact`. The 5th step is named `Browser Platform Publish`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4802712718000771}, {"id": "63c496986fc19abdf9c9cf90", "level": "level3", "llm_response": "```yaml name: Issue Check\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        uses: peter-evans/close-issue@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n      - name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            This issue was created by an auto-generated script, and is automatically closed because it was not addressed. If you are having issues with your application, please reach out to the support team at [Support](https://support.kirill.ru/) or [GitHub Support](https://github.com/kiwi1994/kiwi/issues/new).\n```", "answer": "```yaml name: 'Issue Check'\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == false\n        name: Close Issue\n        uses: peter-evans/close-issue@v1\n        with:\n          comment: |\n            Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == true\n        name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi!\n            <br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n            <br/>Have you looked at the wiki yet? https://docs.ombi.app/\n            <br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n            <br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n            <br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n            <br/> Thanks!\n            <br/> Ombi Bot.\n```", "prompt": "Generate a GitHub Workflow named `Issue Check` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `issueCheck`. The job `issueCheck` has 2 steps. The 1st step is named `Close Issue`. The 2nd step is named `Create comment`. Here are some Github Actions that might be used in the workflow: v1 version of peter-evans/close-issue and v1 version of peter-evans/create-or-update-comment. Here are some variables that might be used in the workflow: github.event.issue.number. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.10387217673465116}, {"id": "63c494da7843b61269a03d4f", "level": "level3", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install \ud83c\udf31\n        run: |\n          curl -fsSL https://raw.githubusercontent.com/itchio/itchio.github.io/master/scripts/install.sh | bash\n          mkdir ~/itchio\n          ln -s ~/itchio/itchio /usr/local/bin/itchio\n\n      - name: Build \ud83d\udd27\n        run: |\n          export BUNNYS_ENV=production\n          export BUNNYS_HOST=itchio.github.io\n          export BUNNYS_PORT=8080\n          export BUNNYS_API_KEY=${{ secrets.BUTLER_API_KEY }}\n          export BUNNYS_USERNAME=${{ secrets.ITCHIO_USERNAME }}\n          export BUNNYS_GAME=${{ secrets.ITCHIO_GAME }}\n          export BUNNYS_ENVIRONMENT=production\n\n          ./scripts/build.sh\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          GITHUB_TOKEN: ${{ secrets.ITCHIO_API_KEY }}\n          BRANCH: gh-pages\n          BRANCH_NAME: ${{ secrets.BUNNYS_ENV }}\n          FOLDER: build\n          FOLDER_NAME: ${{ secrets.BUNNYS_HOST }}\n```", "answer": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\njobs:\n  build-and-deploy:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install \ud83c\udf31\n        run: |\n          sudo apt-get install -y pandoc\n      - name: Build \ud83d\udd27\n        run: |\n          ./run build itch\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is GDScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `build-and-deploy`. The job `build-and-deploy` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install \ud83c\udf31`. The 3rd step is named `Build \ud83d\udd27`. The 4th step is named `Deploy \ud83d\ude80`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v4 version of JamesIves/github-pages-deploy-action. Here are some variables that might be used in the workflow: secrets.BUTLER_API_KEY, secrets.ITCHIO_USERNAME and secrets.ITCHIO_GAME. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.42409465245658734}, {"id": "63c4968933b087f6bde2ca3a", "level": "level3", "llm_response": "```yaml name: Nightly Smoketest\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        NODE_VERSION: [14, 16, 18]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cache/bazel\n            ~/.cache/go-build\n          key: ${{ runner.os }}-bazel-${{ hashFiles('**/bazelrc') }}\n          restore-keys: |\n            ${{ runner.os }}-bazel-\n      - name: Bank Workload\n        run: |\n          make bank\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This workflow tests that we can stand up a CRDB cluster with the operator and execute SQL in the cluster. It uses the\n# steps that are outlined in our public docs to ensure that the flow we're recommending always works.\nname: Nightly Smoketest\n\non:\n  schedule:\n    # runs at 3am UTC Mon-Fri\n    # ref: <min> <hr> <month-day> <month> <weekday>\n    - cron: '0 3 * * 1-5'\n\n  # allows running from the actions tab in GitHub\n  workflow_dispatch: ~\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # supported Kubenetes versions\n        NODE_VERSION: [1.19.16, 1.20.15, 1.21.9, 1.22.6, 1.23.3]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: Bank Workload\n        env:\n          NODE_VERSION: ${{ matrix.NODE_VERSION }}\n        run: make test/smoketest\n```", "prompt": "Generate a GitHub Workflow named `Nightly Smoketest` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am, monday through friday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `smoketest`. The job `smoketest` has 3 steps. The 1st step is named ``. The 2nd step is named `Mount bazel cache`. The 3rd step is named `Bank Workload`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/cache. Here are some variables that might be used in the workflow: matrix.NODE_VERSION. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5276499438362107}, {"id": "63c496686fc19abdf9c9be9c", "level": "level3", "llm_response": "```yaml name: Unit testing (Ubuntu)\n\non:\n  push:\n    branches:\n      - main\n      - ver_* || dev\n    paths:\n      - '**.py'\n  pull_request:\n    branches:\n      - main\n      - ver_* || dev\n    paths:\n      - '**.py'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install -r requirements.txt\n      - name: Test with pytest\n        run: |\n          python -m pytest -vvv --cov=pyrogram -m not-parallel\n```", "answer": "```yaml name: Unit testing (Ubuntu)\non:\n  push:\n    paths:\n      - '**.py'\n    branches: \n      - main\n      - 'ver_*'\n      - dev\n  pull_request:\n    paths:\n      - '**.py'\n    branches: \n      - main\n      - 'ver_*'\n      - dev\n\njobs:\n  build:\n    strategy:\n      matrix:\n        # os: [macos-latest, windows-latest, ubuntu-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']  # , '3.11-dev'\n    # runs-on: ${{ matrix.os }}\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        python -m pip install pytest coverage\n        pip install -r requirements.txt\n    - name: Test with pytest\n      env:\n        DEBUG_API_ID: ${{ secrets.DEBUG_API_ID }}\n        DEBUG_API_SECRET: ${{ secrets.DEBUG_API_SECRET }}\n        CROSS_DEBUG_KEY: ${{ secrets.CROSS_DEBUG_KEY }}\n        CROSS_DEBUG_SECRET: ${{ secrets.CROSS_DEBUG_SECRET }}\n      run: |\n        coverage run --source=src --omit=src/falconpy/debug.py -m pytest -s --ignore-glob=**/manual/*\n        coverage report\n```", "prompt": "Generate a GitHub Workflow named `Unit testing (Ubuntu)` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a branch whose name matches ver_* or a branch named dev. Only if at least one path of push event matches a pattern in the paths filter(**.py), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main, a branch whose name matches ver_* or a branch named dev. Only if at least one path of pull_request event matches a pattern in the paths filter(**.py), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Python ${{ matrix.python-version }}`. The 3rd step is named `Install dependencies`. The 4th step is named `Test with pytest`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v4 version of actions/setup-python. Here are some variables that might be used in the workflow: matrix.python-version, secrets.DEBUG_API_ID, secrets.DEBUG_API_SECRET, secrets.CROSS_DEBUG_KEY and secrets.CROSS_DEBUG_SECRET. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "character ' ' is invalid for branch and tag names. ref name cannot contain spaces, ~, ^, :, [, ?, *. see `man git-check-ref-format` for more details. note that regular expression is unavailable. note: filter pattern syntax is explained at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet", "filepath": "../tmp/test.yml", "line": 7, "column": 14, "kind": "glob", "snippet": "      - ver_* || dev\n             ^", "end_column": 14}, {"message": "character ' ' is invalid for branch and tag names. ref name cannot contain spaces, ~, ^, :, [, ?, *. see `man git-check-ref-format` for more details. note that regular expression is unavailable. note: filter pattern syntax is explained at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet", "filepath": "../tmp/test.yml", "line": 7, "column": 17, "kind": "glob", "snippet": "      - ver_* || dev\n                ^", "end_column": 17}, {"message": "character ' ' is invalid for branch and tag names. ref name cannot contain spaces, ~, ^, :, [, ?, *. see `man git-check-ref-format` for more details. note that regular expression is unavailable. note: filter pattern syntax is explained at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet", "filepath": "../tmp/test.yml", "line": 13, "column": 14, "kind": "glob", "snippet": "      - ver_* || dev\n             ^", "end_column": 14}, {"message": "character ' ' is invalid for branch and tag names. ref name cannot contain spaces, ~, ^, :, [, ?, *. see `man git-check-ref-format` for more details. note that regular expression is unavailable. note: filter pattern syntax is explained at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet", "filepath": "../tmp/test.yml", "line": 13, "column": 17, "kind": "glob", "snippet": "      - ver_* || dev\n                ^", "end_column": 17}]}, "bleu_score": 0.47463965928942314}, {"id": "63c49698b008460c1df15628", "level": "level3", "llm_response": "```yaml name: add-to-gh-projects\non:\n  issues:\n    types: [opened, labeled]\n  pull_request_target:\n    types: [opened, labeled]\npermissions:\n  contents: read\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n        with:\n          github_token: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n          issue_labels: 'in progress'\n          project_name: 'In Progress'\n          project_description: 'In Progress'\n          project_url: 'https://github.com/gradle/gradle-issues/projects/1'\n```", "answer": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, labeled]\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\npermissions:\n  contents: read\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n```", "prompt": "Generate a GitHub Workflow named `add-to-gh-projects` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by multiple events: 1) an issue is opened or a label is added to an issue. 2) a pull request is created or a label is added to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Adds issues to GH projects` and its job id is `add_to_gh_projects`. The job `add_to_gh_projects` has one step. The 1st step is named `Add labeled issues to GH projects`. Here are some Github Actions that might be used in the workflow: v1 version of gradle/build-tool-issue-automation-actions/add-labeled-issues. Here are some variables that might be used in the workflow: secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.640243096936176}, {"id": "63c496561899db58864d23de", "level": "level3", "llm_response": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "answer": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Sqlite` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.sqlite.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/sqlite/** or roles/sqlite/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `sqlite`. Here are some reusable workflows that might be used in the workflow: {'version': None, 'name': './.github/workflows/molecule.yaml'}. Here are some variables that might be used in the workflow: inputs.debug == true and inputs.debug. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494078052faa2781a8a1f", "level": "level3", "llm_response": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        uses: cla-assistant/github-action@v2.1.3-beta\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          path-to-config: .github/cla-assistant.yml\n          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [ created ]\n  pull_request_target:\n    types: [ opened,closed,synchronize ]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: '.cla/v1/signatures.json'\n          path-to-document: 'https://github.com/christian-schlichtherle/truelicense/blob/develop/CLA.md'\n          branch: 'develop'\n          allowlist: bot*\n\n          #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```", "prompt": "Generate a GitHub Workflow named `CLA Assistant` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) a pull request is created, a pull request is closed or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `CLAssistant`. The job `CLAssistant` has one step. The 1st step is named `CLA Assistant`. Here are some Github Actions that might be used in the workflow: v2.1.3-beta version of cla-assistant/github-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and secrets.PERSONAL_ACCESS_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.18801168023143996}, {"id": "63c494298052faa2781a98f8", "level": "level3", "llm_response": "```yaml name: Linux build with address sanitizer enabled\n\non:\n  schedule:\n    - cron: 0 0 * * 0\n  workflow_dispatch:\n\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Compiler version\n        run: gcc --version\n      - name: Build\n        run: make\n      - name: Run tests\n        run: make check\n      - name: Run examples\n        run: make examples\n```", "answer": "```yaml name: Linux build with address sanitizer enabled\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n    - uses: actions/checkout@v3\n    - name: Compiler version\n      run: |\n        gcc --version\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --log_level=message\n    - name: Run examples\n      run: |\n        make check-examples\n```", "prompt": "Generate a GitHub Workflow named `Linux build with address sanitizer enabled` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `sanitize`. The job `sanitize` has 5 steps. The 1st step is named ``. The 2nd step is named `Compiler version`. The 3rd step is named `Build`. The 4th step is named `Run tests`. The 5th step is named `Run examples`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4406874142902264}, {"id": "63c493cd7843b612699fd710", "level": "level3", "llm_response": "```yaml name: Clean\non: [push]\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - name: Delete artifacts\n        run: |\n          echo \"Deleting artifacts...\"\n          for item in $(gh api -f json \"${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/artifacts\"\n              | jq -r '.data[].name' | sort -u); do\n            echo \"Deleting artifact: $item\"\n            gh api -X DELETE \"${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/artifacts/${item}\"\n          done\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "prompt": "Generate a GitHub Workflow named `Clean` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The 1st job is named `Delete Artifacts` and its job id is `delete-artifacts`. The job `delete-artifacts` has one step. The 1st step is named `Delete artifacts`. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN, GITHUB_API_URL and github.repository. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.06124647446758571}, {"id": "63c4956e8052faa2781b1ca5", "level": "level3", "llm_response": "```yaml name: Conventional PR\non:\n  pull_request:\n    branches:\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: semantic-pull-request\n        uses: amannn/action-semantic-pull-request@b7a9a97cb10fa6e1ae02647e718798175f6b1f1d\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Conventional PR\n\n# Controls when the action will run. \non:\n  pull_request:\n    branches:\n    - develop\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: semantic-pull-request\n        # Internal Unity mirror available at jesseo/action-semantic-pull-request, but actions from private repos aren't supported, so continue to use the public one below\n        uses: amannn/action-semantic-pull-request@b7a9a97cb10fa6e1ae02647e718798175f6b1f1d\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Provide custom types if you don't want the default ones from https://www.conventionalcommits.org\n          types: # optional\n          # Configure which scopes are allowed.\n          #scopes: # optional\n          # Configure that a scope must always be provided.\n          #requireScope: # optional\n          # Configure additional validation for the subject based on a regex. E.g. '^(?![A-Z]).+$' ensures the subject doesn't start with an uppercase character.\n          #subjectPattern: # optional\n          # If `subjectPattern` is configured, you can use this property to override the default error message that is shown when the pattern doesn't match. The variables `subject` and `title` can be used within the message.\n          #subjectPatternError: # optional\n          # For work-in-progress PRs you can typically use draft pull requests from Github. However, private repositories on the free plan don't have this option and therefore this action allows you to opt-in to using the special '[WIP]' prefix to indicate this state. This will avoid the validation of the PR title and the pull request checks remain pending. Note that a second check will be reported if this is enabled.\n          #wip: # optional\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub will suggest using that commit message instead of the PR title for the merge commit, and it's easy to commit this by mistake. Enable this option to also validate the commit message for one commit PRs.\n          validateSingleCommit: true # optional\n```", "prompt": "Generate a GitHub Workflow named `Conventional PR` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `build`. The job `build` has one step. The 1st step is named `semantic-pull-request`. Here are some Github Actions that might be used in the workflow: b7a9a97cb10fa6e1ae02647e718798175f6b1f1d version of amannn/action-semantic-pull-request. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7062216866978064}, {"id": "63c4965b33b087f6bde2b689", "level": "level3", "llm_response": "```yaml name: fortran-format-check\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n    branches:\n      - develop\n\njobs:\n  fortan-format-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Install Conda environment from environment.yml\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          environment-file: ./.github/environment.yml\n          channels: micromamba\n      - name: Install gfortran\n        run: conda install -c conda-forge gfortran\n      - name: Print python package versions\n        run: python -c \"import pkg_resources; print pkg_resources.require('numpy')\"\n      - name: Set and print branch name\n        run: git symbolic-ref HEAD ref/heads/${{ github.head_ref }}\n      - name: Fortran source format check\n        run: python -c \"import numpy; print(numpy.__version__)\"\n        shell: bash\n```", "answer": "```yaml name: fortran-format-check\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  fortan-format-check:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash -l {0}\n\n    steps:\n      - uses: actions/checkout@v2.3.4\n\n      - name: Install Conda environment from environment.yml\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n            cache-downloads: true\n            cache-env: true\n\n      - name: Install gfortran\n        uses: modflowpy/install-gfortran-action@v1\n\n      - name: Print python package versions\n        run: |\n          pip list\n\n      - name: Set and print branch name\n        run: |\n          .github/common/git-branch-export.sh\n\n      - name: Fortran source format check\n        run: |\n          .github/common/fortran-format-check.sh\n```", "prompt": "Generate a GitHub Workflow named `fortran-format-check` for a GitHub repository whose primary programming language is Fortran. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named develop. 2) The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `fortan-format-check`. The job `fortan-format-check` has 6 steps. The 1st step is named ``. The 2nd step is named `Install Conda environment from environment.yml`. The 3rd step is named `Install gfortran`. The 4th step is named `Print python package versions`. The 5th step is named `Set and print branch name`. The 6th step is named `Fortran source format check`. Here are some Github Actions that might be used in the workflow: v2.3.4 version of actions/checkout, main version of mamba-org/provision-with-micromamba and v1 version of modflowpy/install-gfortran-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "\"github.head_ref\" is potentially untrusted. avoid using it directly in inline scripts. instead, pass it through an environment variable. see https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions for more details", "filepath": "../tmp/test.yml", "line": 26, "column": 50, "kind": "expression", "snippet": "        run: git symbolic-ref HEAD ref/heads/${{ github.head_ref }}\n                                                 ^~~~~~~~~~~~~~~", "end_column": 64}]}, "bleu_score": 0.46654979823381476}, {"id": "63c494287843b612699ff643", "level": "level3", "llm_response": "```yaml name: README to PDF\n\non:\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          markdown: ${{ github.event.inputs.markdown }}\n      - uses: actions/upload-artifact@v3\n        with:\n          name: README to PDF\n          path: README.md\n      - name: Commit files\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          directory: ./markdown\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          force_branch_update: true\n          directory: ./markdown\n```", "answer": "```yaml name: README to PDF\n# This workflow is triggered on pushes to the repository.\non:\n#   push:\n#     branches:\n#       - main\n#     paths:\n#       - 'README.md'\n    \n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          input_dir: .\n          output_dir: .\n          build_html: false\n          table_of_contents: false\n      - uses: actions/upload-artifact@v3\n        with:\n          name: python-engineer-roadmap\n          path: README.pdf\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.pdf\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Generate PDF file\"\n          fi\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n#       - name: Commit changes\n#         uses: EndBug/add-and-commit@v9\n#         with:\n#           default_author: github_actions\n#           add: 'README.pdf'\n#           new_branch: generate-pdf\n#           push: origin generate-pdf --set-upstream --force\n```", "prompt": "Generate a GitHub Workflow named `README to PDF` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Build PDF` and its job id is `converttopdf`. The job `converttopdf` has 5 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Commit files`. The 5th step is named `Push changes`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v1.1.0 version of baileyjm02/markdown-to-pdf, v3 version of actions/upload-artifact and master version of ad-m/github-push-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and github.ref. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"markdown\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 14, "column": 25, "kind": "expression", "snippet": "          markdown: ${{ github.event.inputs.markdown }}\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 52}]}, "bleu_score": 0.42651199871745926}, {"id": "63c495297843b61269a05d37", "level": "level3", "llm_response": "```yaml name: pr\n\non:\n  pull_request:\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n```", "answer": "```yaml name: pr\non:\n  pull_request:\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n    with:\n      npmTag: alpha\n      buildScript: build\n      nodeVersion: 18\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      npmToken: ${{ secrets.NPM_TOKEN }}\n\n\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n    with:\n      domain: https://www.the-guild.dev/graphql/shield/\n      source: 'Shield'\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `pr` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The job id of the 1st job is `release`. The job id of the 2nd job is `algolia`. Here are some reusable workflows that might be used in the workflow: {'version': 'main', 'name': 'the-guild-org/shared-config/.github/workflows/release-snapshot.yml'} and {'version': 'main', 'name': 'the-guild-org/shared-config/.github/workflows/algolia-integrity.yml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.053186941644794844}, {"id": "63c4959c7843b61269a08c2d", "level": "level3", "llm_response": "```yaml on:\n  push:\n    paths:\n      - .github/workflows/install.yml\n  schedule:\n    - cron: '17 0 * * 1'\npermissions:\n  contents: read\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          curl https://sh.rustup.rs | sh -s -- -y --default-toolchain=stable --no-edit\n          rustup toolchain install stable\n          rustup default stable\n          cargo install --locked --features rustfmt,nightly\n```", "answer": "```yaml permissions:\n  contents: read\n\non:\n  push:\n    paths:\n      - \".github/workflows/install.yml\"\n  schedule:\n    - cron: \"17 0 * * 1\"\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          cargo install cargo-mutants\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/install.yml), the workflow runs. 2) the scheduled time has come: at 12:17 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `cargo-install`. The job `cargo-install` has one step. The 1st step is named `cargo-install`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3277566539367381}, {"id": "63c4968e1899db58864d3b1c", "level": "level3", "llm_response": "```yaml name: HTML5 check\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: HTML5 check\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `HTML5 check` for a GitHub repository whose primary programming language is R. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main or a branch named master. The workflow has one job. The job id of the 1st job is `HTML5-check`. Here are some reusable workflows that might be used in the workflow: {'version': 'main', 'name': 'easystats/workflows/.github/workflows/html-5-check.yaml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2397212592215149}, {"id": "63c496861e3364807577b31b", "level": "level3", "llm_response": "```yaml name: license-check\non: [pull_request]\n\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Check License Header\n      uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff\n      with:\n        config-file: .github/license-check.yml\n        token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: license-check\non: pull_request\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Check License Header\n      uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff\n```", "prompt": "Generate a GitHub Workflow named `license-check` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `license`. The job `license` has 2 steps. The 1st step is named ``. The 2nd step is named `Check License Header`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout and 501a28d2fb4a9b962661987e50cf0219631b32ff version of apache/skywalking-eyes/header. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6059856413067048}, {"id": "63c495707843b61269a07a00", "level": "level3", "llm_response": "```yaml name: Scorecards supply-chain security\non:\n  # Only for the default branch, to avoid conflicts with other branches.\n  # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-the-mergeability-of-pull-requests\n  branch_protection_rule:\n  schedule:\n    - cron: '43 23 * * 1'\n  push:\n    branches:\n      - master\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v2.4.0\n        with:\n          persist-credentials: false\n      - name: Run analysis\n        uses: ossf/scorecard-action@3e15ea8318eee9b333819ec77a36aca8d39df13e # v1.1.0\n        with:\n          inputs: |\n            code-scanning: |\n              github-token: ${{ secrets.GITHUB_TOKEN }}\n              sarif-file: ${{ github.workspace }}/scorecard-results.sarif\n          outputs: |\n            status: ${{ steps.github_token.outputs.status }}\n            results: ${{ steps.github_token.outputs.results }}\n            sarif: ${{ steps.github_token.outputs.sarif }}\n      - name: Upload artifact\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v2.1.0\n        with:\n          name: scorecard-results\n          path: ${{ github.workspace }}/scorecard-results.sarif\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.1.0\n        if: steps.github_token.outputs.status == 'success'\n        with:\n          sarif_file: ${{ steps.github_token.outputs.sarif }}\n```", "answer": "```yaml name: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: '43 20 * * 1'\n  push:\n    branches: [ master ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      # Used to receive a badge. (Upcoming feature)\n      id-token: write\n      actions: read\n      contents: read\n    \n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@3e15ea8318eee9b333819ec77a36aca8d39df13e # v1.1.1\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # (Optional) Read-only PAT token. Uncomment the `repo_token` line below if:\n          # - you want to enable the Branch-Protection check on a *public* repository, or\n          # - you are installing Scorecards on a *private* repository\n          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action#authentication-with-pat.\n          # repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n\n          # Publish the results for public repositories to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results. \n          # For private repositories, `publish_results` will automatically be set to `false`, regardless \n          # of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n      \n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) activity related to a branch protection rule occurs. 2) the scheduled time has come: at 08:43 pm, only on monday. 3) The workflow would run whenever there is a push event to: a branch named master. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. The 2nd step is named `Run analysis`. The 3rd step is named `Upload artifact`. The 4th step is named `Upload to code-scanning`. Here are some Github Actions that might be used in the workflow: a12a3943b4bdde767164f792f33f40b04645d846 version of actions/checkout, 3e15ea8318eee9b333819ec77a36aca8d39df13e version of ossf/scorecard-action, 3cea5372237819ed00197afe530f5a7ea3e805c8 version of actions/upload-artifact and 5f532563584d71fdef14ee64d17bafb34f751ce5 version of github/codeql-action/upload-sarif. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"github_token\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 30, "column": 32, "kind": "expression", "snippet": "          outputs: |", "end_column": 32}, {"message": "property \"github_token\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 41, "column": 13, "kind": "expression", "snippet": "        if: steps.github_token.outputs.status == 'success'\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 45}, {"message": "property \"github_token\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 43, "column": 27, "kind": "expression", "snippet": "          sarif_file: ${{ steps.github_token.outputs.sarif }}\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 58}]}, "bleu_score": 0.29712599940217493}, {"id": "63c4969e1899db58864d41ef", "level": "level3", "llm_response": "```yaml name: Auto message on pr merge\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: derekprior/add-autoresponse@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: 'This PR was automatically merged by the [Auto message on PR merge](https://github.com/next-auth/next-auth/discussions/142) workflow'\n```", "answer": "```yaml name: Auto message on pr merge\n\non:\n\n  pull_request_target:\n\n    types: [closed]\n\njobs:\n\n  auto-response:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - uses: derekprior/add-autoresponse@master\n\n      env:\n\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      with:\n\n        respondableId: ${{ github.event.pull_request.node_id }}\n\n        response: \"Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).\"\n\n        author: ${{ github.event.pull_request.user.login }}\n\n        exemptedAuthors: \"Amit366\"\n```", "prompt": "Generate a GitHub Workflow named `Auto message on pr merge` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a pull request is closed. The workflow has one job. The job id of the 1st job is `auto-response`. The job `auto-response` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: master version of derekprior/add-autoresponse. Here are some variables that might be used in the workflow: github.event.pull_request.node_id, github.event.pull_request.user.login and secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2407268857126718}, {"id": "63c495e48052faa2781b4f0b", "level": "level3", "llm_response": "```yaml name: Generate a changelog\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'generate from this release/commit (defaults to the latest release)'\n        required: false\n        default: 'latest'\n      to:\n        description: 'generate until this release/commit (defaults to latest development)'\n        required: false\n        default: 'HEAD'\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Mudlet repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install Lua 5.1.5\n        uses: leafo/gh-actions-lua@v9\n        with:\n          lua-version: '5.1.5'\n      - name: Install Luarocks\n        uses: leafo/gh-actions-luarocks@v4\n      - name: Install Lua dependencies\n        run: |\n          ./build.sh\n          ./lua_install.sh\n          ./luarocks_install.sh\n      - name: Calculate from and to releases\n        run: |\n          ./lua_build.sh\n          ./lua_version.sh\n          ./luarocks_build.sh\n          ./luarocks_version.sh\n      - name: Generate changelog\n        run: |\n          ./lua_generate.sh\n          ./luarocks_generate.sh\n      - name: Upload changelog as html\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog\n          path: changelog.html\n          retention-days: 7\n          if-no-files-found: error\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITHUB_SERVER_URL: ${{ secrets.GITHUB_SERVER_URL }}\n          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}\n          GITHUB_RUN_ID: ${{ github.run_id }}\n```", "answer": "```yaml name: Generate a changelog\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'Generate from this release/commit (defaults to the latest release)'\n        required: false\n        # default is calculated dynamically\n      to:\n        description: 'Generate until this release/commit (defaults to latest development)'\n        required: false\n        default: 'HEAD'\n\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository_owner == 'Mudlet' }}\n\n    steps:\n    - name: Checkout Mudlet repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Install Lua 5.1.5\n      uses: leafo/gh-actions-lua@v9\n      with:\n        luaVersion: \"5.1.5\"\n\n    - name: Install Luarocks\n      uses: leafo/gh-actions-luarocks@v4\n\n    - name: Install Lua dependencies\n      run: |\n        luarocks install argparse\n        luarocks install lunajson\n\n    - name: Calculate from and to releases\n      run: |\n        if [[ -z \"${{ github.event.inputs.from }}\" ]] ; then\n            FROM_RELEASE=$(git tag --sort=committerdate | tail -1)\n        else\n            FROM_RELEASE=${{ github.event.inputs.from }}\n        fi\n\n        if [[ -z \"${{ github.event.inputs.to }}\" ]] ; then\n            TO_RELEASE=\"HEAD\"\n        else\n            TO_RELEASE=${{ github.event.inputs.to }}\n        fi\n\n        echo \"Generating a changelog from $FROM_RELEASE until $TO_RELEASE\"\n\n        echo \"FROM_RELEASE=$FROM_RELEASE\" >> $GITHUB_ENV\n        echo \"TO_RELEASE=$TO_RELEASE\" >> $GITHUB_ENV\n\n    - name: Generate changelog\n      run: |\n        changelog=$(lua CI/generate-changelog.lua -m release --start-commit $FROM_RELEASE --end-commit $TO_RELEASE)\n        echo \"$changelog\" >> changelog.html\n\n        echo \"[INFO] Changelog generated (from $FROM_RELEASE to $TO_RELEASE). If it's too big, Github won't show it, so it's available as an artifact as well at: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#artifacts\"\n        echo \"[INFO] Changelog is:\"\n        echo $changelog\n\n    - name: Upload changelog as html\n      uses: actions/upload-artifact@v3\n      with:\n        name: changelog.html\n        path: changelog.html\n```", "prompt": "Generate a GitHub Workflow named `Generate a changelog` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am. 2) someone manually triggers the workflow. This workflow receives 2 inputs: from-this input represents generate from this release/commit (defaults to the latest release) and it is optional; to-this input represents generate until this release/commit (defaults to latest development), it is optional and its default value is HEAD. The workflow has one job. The job id of the 1st job is `generate-changelog`. The job `generate-changelog` has 7 steps. The 1st step is named `Checkout Mudlet repository`. The 2nd step is named `Install Lua 5.1.5`. The 3rd step is named `Install Luarocks`. The 4th step is named `Install Lua dependencies`. The 5th step is named `Calculate from and to releases`. The 6th step is named `Generate changelog`. The 7th step is named `Upload changelog as html`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v9 version of leafo/gh-actions-lua, v4 version of leafo/gh-actions-luarocks and v3 version of actions/upload-artifact. Here are some variables that might be used in the workflow: github.event.inputs.from, github.event.inputs.to, GITHUB_SERVER_URL, GITHUB_REPOSITORY and GITHUB_RUN_ID. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3969617751956232}, {"id": "63c495038052faa2781aede6", "level": "level3", "llm_response": "```yaml name: Linux Testing\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n        numpy-version: ['1.19.5', '1.18.5']\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Miniconda\n        uses: conda-incubator/setup-miniconda@master\n        with:\n          python-version: ${{ matrix.python-version }}\n          numpy-version: ${{ matrix.numpy-version }}\n      - name: Create Conda environment with the rights deps\n        run: |\n          conda create --name conda-dev python=${{ matrix.python-version }} \\\n                      numpy=${{ matrix.numpy-version }} \\\n                      pip=20.2.0\n          conda activate conda-dev\n      - name: Install dependencies\n        run: |\n          conda install --name conda-dev -c conda-forge numpy\n          conda install --name conda-dev -c conda-forge scipy\n      - name: Tests\n        run: |\n          python -m pytest -v\n      - uses: codecov/codecov-action@v3\n        with:\n          fail_ci_if_error: true\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Linux Testing\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n        numpy_version: ['>=1.22.0', '==1.20.*']\n        exclude:\n          - python-version: '3.10'\n            numpy_version: '==1.20.*'\n    services:\n      redis:\n        image: redis\n        # Set health checks to wait until redis has started\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n      mongodb:\n        image: mongo:4.4.11\n        ports:\n          - 27017:27017\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Setup Miniconda\n      uses: conda-incubator/setup-miniconda@master\n      with:\n          channels: conda-forge\n          python-version: ${{ matrix.python-version }}\n      env:\n        ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n    # Runs a set of commands using the runners shell\n    - name: Create Conda environment with the rights deps\n      shell: \"bash -l {0}\"\n      run: |\n        conda create -n zarr-env python==${{matrix.python-version}} bsddb3 numcodecs lmdb pip nodejs flake8 mypy\n        conda activate zarr-env\n        npm install -g azurite\n    - name: Install dependencies\n      shell: \"bash -l {0}\"\n      run: |\n        conda activate zarr-env\n        python -m pip install --upgrade pip\n        python -m pip install -U pip setuptools wheel codecov line_profiler\n        python -m pip install -rrequirements_dev_minimal.txt numpy${{matrix.numpy_version}} -rrequirements_dev_optional.txt pymongo redis\n        python -m pip install .\n        python -m pip freeze\n    - name: Tests\n      shell: \"bash -l {0}\"\n      env:\n        COVERAGE_FILE: .coverage.${{matrix.python-version}}.${{matrix.numpy_version}}\n        ZARR_TEST_ABS: 1\n        ZARR_TEST_MONGO: 1\n        ZARR_TEST_REDIS: 1\n        ZARR_V3_EXPERIMENTAL_API: 1\n      run: |\n        conda activate zarr-env\n        mkdir ~/blob_emulator\n        azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n        pytest --cov=zarr --cov-config=.coveragerc --doctest-plus --cov-report xml --cov=./ --timeout=300\n    - uses: codecov/codecov-action@v3\n      with:\n        #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos\n          #files: ./coverage1.xml,./coverage2.xml # optional\n          #flags: unittests # optional\n          #name: codecov-umbrella # optional\n          #fail_ci_if_error: true # optional (default = false)\n        verbose: true # optional (default = false)\n```", "prompt": "Generate a GitHub Workflow named `Linux Testing` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named `Setup Miniconda`. The 3rd step is named `Create Conda environment with the rights deps`. The 4th step is named `Install dependencies`. The 5th step is named `Tests`. The 6th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, master version of conda-incubator/setup-miniconda and v3 version of codecov/codecov-action. Here are some variables that might be used in the workflow: matrix.python-version and matrix.numpy_version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.14930571099580994}, {"id": "63c4967e33b087f6bde2c5c4", "level": "level3", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n      - name: Install and Build \ud83d\udd27\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages\n          folder: dist\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          folder: dist\n```", "answer": "```yaml name: Build and Deploy\non:\n  push:\n    branches:\n    - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n        \n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist #  The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build-and-deploy`. The job `build-and-deploy` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install and Build \ud83d\udd27`. The 3rd step is named `Deploy \ud83d\ude80`. Here are some Github Actions that might be used in the workflow: v2.3.1 version of actions/checkout and 4.0.0 version of JamesIves/github-pages-deploy-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.23354615242715826}, {"id": "63c496926fc19abdf9c9cd93", "level": "level3", "llm_response": "```yaml name: \"Contributor License Agreement (CLA)\"\n\non:\n  pull_request:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'admin' }}\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          token_for_approval: ${{ secrets.CLA_TOKEN }}\n          # This step is optional and defaults to true. If the CLA does not match the criteria of the CLA Program, the CLA will be denied.\n          # If you want to require the CLA to be signed, you can do so by setting the following:\n          # allow_signature: false\n          # allow_signature_name: \"John Doe\"\n          # allow_signature_email: \"johndoe@example.com\"\n```", "answer": "```yaml name: Contributor License Agreement (CLA)\n\non:\n  pull_request_target:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          cla-token: ${{ secrets.CLA_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Contributor License Agreement (CLA)` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) a pull request is created or a pull request's head branch is updated. 2) a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `cla`. The job `cla` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of Shopify/shopify-cla-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and secrets.CLA_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.38719233064197733}, {"id": "63c496836fc19abdf9c9c720", "level": "level3", "llm_response": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of JuliaRegistries/TagBot. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496741e3364807577abc2", "level": "level3", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of JuliaRegistries/TagBot. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and secrets.DOCUMENTER_KEY. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495f37843b61269a0b108", "level": "level3", "llm_response": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types: [closed]\n    branches:\n      - main\npermissions:\n  pull-requests: read\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == false\n    steps:\n      - name: Fail If No Approval\n        run: |\n          if [ \"${{ github.event.pull_request.user.login }}\" != \"${{ secrets.GITHUB_TOKEN }}\" ]; then\n            echo \"This PR was merged by a bot, so we don't want to add a review for it\"\n            exit 1\n          fi\n      - name: Slack Notification\n        uses: timonmoran/slack-action@v2\n        env:\n          SLACK_WEBHOOK: ${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}\n          SLACK_CHANNEL: ${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_CHANNEL }}\n          SLACK_ICON: ${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_ICON }}\n          SLACK_USERNAME: ${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_USERNAME }}\n          SLACK_LINK: ${{ github.event.pull_request.html_url }}\n```", "answer": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types:\n      - closed\n    branches:\n      - main\npermissions:\n  pull-requests: read\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: ${{ github.event.pull_request.merged }}\n        env:\n          AUTH_HEADER: 'Authorization: token ${{ secrets.GITHUB_TOKEN }}'\n          JSON_HEADER: 'Content-Type: application/json'\n          REVIEWS_URL: 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews'\n        run: |\n          curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n            | jq -e '. | map({user: .user.login, state: .state})\n                       | reduce .[] as $x ({}; .[$x.user] = $x.state)\n                       | to_entries | map(.value)\n                       | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n      - name: Slack Notification\n        if: ${{ failure() }}\n        run: |\n          jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n```", "prompt": "Generate a GitHub Workflow named `PR Approval Bypass Notifier` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `approval`. The job `approval` has 2 steps. The 1st step is named `Fail If No Approval`. The 2nd step is named `Slack Notification`. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN, github.repository, github.event.pull_request.number, github.event.pull_request.html_url and secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2025769494110134}, {"id": "63c496561e3364807577a06a", "level": "level3", "llm_response": "```yaml name: Gather RQ statistical data and write it to google sheet\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '30 17 * * *'\n\njobs:\n  build:\n    name: Gather RQ statistical data and write it to google sheet\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n      - run: npm ci\n      - run: npm run build\n      - run: npm run generate\n      - uses: gaurav2305/setup-google-sheets@v1.0.0\n        with:\n          sheetId: ${{ secrets.GOOGLE_SHEET_ID }}\n          clientEmail: ${{ secrets.GOOGLE_API_CLIENT_EMAIL }}\n          keyFilename: ${{ secrets.GOOGLE_API_PRIVATE_KEY }}\n          token: ${{ secrets.BARK_KEY }}\n          scope: https://www.googleapis.com/auth/drive\n          folderId: ${{ secrets.GARMIN_USERNAME }}\n          globalUsername: ${{ secrets.GARMIN_GLOBAL_USERNAME }}\n          globalPassword: ${{ secrets.GARMIN_PASSWORD }}\n```", "answer": "```yaml name: Gather RQ statistical data and write it to google sheet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"30 17 * * *\"\n#  push:\n#    branches:\n#      - main\n\nenv:\n  # please change to your own config.\n  RQ_COOKIE: ${{ secrets.RQ_COOKIE }}\n  RQ_CSRF_TOKEN: ${{ secrets.RQ_CSRF_TOKEN }}\n  RQ_USERID: ${{ secrets.RQ_USERID }}\n  GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}\n  GOOGLE_API_CLIENT_EMAIL: ${{ secrets.GOOGLE_API_CLIENT_EMAIL }}\n  GOOGLE_API_PRIVATE_KEY: ${{ secrets.GOOGLE_API_PRIVATE_KEY }}\n  BARK_KEY: ${{ secrets.BARK_KEY }}\n  GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}\n  GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}\n  GARMIN_GLOBAL_USERNAME: ${{ secrets.GARMIN_GLOBAL_USERNAME }}\n  GARMIN_GLOBAL_PASSWORD: ${{ secrets.GARMIN_GLOBAL_PASSWORD }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Gather RQ statistical data and write it to google sheet\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n          cache: 'yarn'\n      - run: yarn\n      - run: yarn rq\n```", "prompt": "Generate a GitHub Workflow named `Gather RQ statistical data and write it to google sheet` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 05:30 pm. The workflow has one job. The 1st job is named `Gather RQ statistical data and write it to google sheet` and its job id is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/setup-node. Here are some variables that might be used in the workflow: secrets.RQ_COOKIE, secrets.RQ_CSRF_TOKEN, secrets.RQ_USERID, secrets.GOOGLE_SHEET_ID, secrets.GOOGLE_API_CLIENT_EMAIL, secrets.GOOGLE_API_PRIVATE_KEY, secrets.BARK_KEY, secrets.GARMIN_USERNAME, secrets.GARMIN_PASSWORD, secrets.GARMIN_GLOBAL_USERNAME and secrets.GARMIN_GLOBAL_PASSWORD. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4244740109355508}, {"id": "63c4957d8052faa2781b22a0", "level": "level3", "llm_response": "```yaml ---\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `Close stale` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 01:00 am. The workflow has one job. The job id of the 1st job is `stale`. Here are some reusable workflows that might be used in the workflow: {'version': 'main', 'name': 'knative/actions/.github/workflows/stale.yaml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7541859578343534}, {"id": "63c4959f7843b61269a08d83", "level": "level3", "llm_response": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          TAGBOT: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "answer": "```yaml name: CompatHelper\n\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.2.0]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "prompt": "Generate a GitHub Workflow named `CompatHelper` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `CompatHelper`. The job `CompatHelper` has 2 steps. The 1st step is named `Pkg.add(\"CompatHelper\")`. The 2nd step is named `CompatHelper.main()`. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and secrets.TAGBOT. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5871898251801241}, {"id": "63c494358052faa2781a9de3", "level": "level3", "llm_response": "```yaml name: JumpServer repos generic handler\n\non: [push, pull_request, release]\n\njobs:\n  generic_handler:\n    name: Run generic handler\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jumpserver/action-generic-handler@master\n        with:\n          token: ${{ secrets.PRIVATE_TOKEN }}\n```", "answer": "```yaml on: [push, pull_request, release]\n\nname: JumpServer repos generic handler\n\njobs:\n  generic_handler:\n    name: Run generic handler\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jumpserver/action-generic-handler@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.PRIVATE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `JumpServer repos generic handler` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. 3) release activity in the repository occurs. The workflow has one job. The 1st job is named `Run generic handler` and its job id is `generic_handler`. The job `generic_handler` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: master version of jumpserver/action-generic-handler. Here are some variables that might be used in the workflow: secrets.PRIVATE_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7119057618308482}, {"id": "63c494298052faa2781a98fa", "level": "level3", "llm_response": "```yaml name: Check test times\n\non: [push, pull_request]\n\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache\n        uses: hendrikmuhs/ccache-action@v1.2\n        with:\n          cache-dir: .ccache\n          max-iterations: 5\n\n      - name: Setup\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libgmp-dev\n\n      - name: Build\n        run: |\n          cd test\n          make test\n\n      - name: Run tests\n        run: |\n          cd test\n          make test\n\n      - name: Save test times\n        run: |\n          echo \"$GITHUB_REF $GITHUB_HEAD_REF\" >> test_times.txt\n          echo \"time $GITHUB_REF\" >> test_times.txt\n          echo \"time $GITHUB_HEAD_REF\" >> test_times.txt\n          echo \"time $GITHUB_REF $GITHUB_HEAD_REF\" >> test_times.txt\n\n      - name: Check test times\n        run: |\n          grep -E 'time' test_times.txt\n          cat test_times.txt\n```", "answer": "```yaml name: Check test times\non: [push, pull_request]\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Cache\n      uses: hendrikmuhs/ccache-action@v1.2\n      with:\n        key: linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}\n        restore-keys: |\n          linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-\n          linux-ci-build-times-${{ github.ref }}-\n          linux-ci-build-times-refs/heads/master-\n          linux-ci-build-times-\n    - name: Setup\n      run: |\n        sudo apt update\n        sudo apt install -y libboost-dev autoconf automake libtool ccache\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n    - name: Save test times\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-reports\n        path: ./all.xml\n    - name: Check test times\n      run: |\n        python ./tools/check_test_times.py\n```", "prompt": "Generate a GitHub Workflow named `Check test times` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check-test-times`. The job `check-test-times` has 7 steps. The 1st step is named ``. The 2nd step is named `Cache`. The 3rd step is named `Setup`. The 4th step is named `Build`. The 5th step is named `Run tests`. The 6th step is named `Save test times`. The 7th step is named `Check test times`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v1.2 version of hendrikmuhs/ccache-action and v3 version of actions/upload-artifact. Here are some variables that might be used in the workflow: github.ref and github.head_ref. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3741089094903454}, {"id": "63c496981899db58864d3f6f", "level": "level3", "llm_response": "```yaml # This workflow is provided by reitermarkus/reerun-workflow\n# For more information, see https://github.com/reitermarkus/reerun-workflow\n\nname: Re-run Workflow\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types:\n      - completed\n  pull_request:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    - cron: \"0 */3 * * *\"\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          workflow_id: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          labels: true\n          skip-labels: true\n```", "answer": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows:\n      - CI\n    types:\n      - completed\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    - cron: '30 */3 * * *' # every 3 hours (30 minutes past the hour)\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    if: >\n      startsWith(github.repository, 'Homebrew/') &&\n      (\n        github.event.label.name == 'ci-requeue' ||\n        github.event.label.name == 'ci-retry' ||\n        github.event.label.name == 'ci-skip-appcast' ||\n        github.event.label.name == 'ci-skip-install' ||\n        github.event.label.name == 'ci-syntax-only' ||\n        !github.event.label.name\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          once-label: ci-requeue\n          continuous-label: ci-retry\n          trigger-labels: ci-skip-appcast,ci-skip-install,ci-syntax-only\n          workflow: ci.yml\n```", "prompt": "Generate a GitHub Workflow named `Re-run Workflow` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) the workflow named CI is completed. 2) a pull request is closed, a label is added to a pull request or a label is removed from a pull request. 3) the scheduled time has come: at 30 minutes past the hour, every 3 hours. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `rerun-workflow`. The job `rerun-workflow` has one step. The 1st step is named `Re-run CI workflow`. Here are some Github Actions that might be used in the workflow: c8d5bc3526acb50c12004f31c0dcb1598c87e32d version of reitermarkus/rerun-workflow. Here are some variables that might be used in the workflow: secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.29407925135704754}, {"id": "63c493bc7843b612699fd432", "level": "level3", "llm_response": "```yaml name: CI\n\non: [pull_request, push]\n\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n      - name: install\n        run: npm install\n      - name: XO\n        run: npm run xo\n\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n      - name: build\n        run: npm run build\n```", "answer": "```yaml env: {}\n\n# FILE GENERATED WITH: npx ghat fregante/ghatemplates/node\n# SOURCE: https://github.com/fregante/ghatemplates\n# OPTIONS: {\"exclude\":[\"jobs.Test\"]}\n\nname: CI\non:\n  - pull_request\n  - push\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci || npm install\n      - name: XO\n        run: npx xo\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci || npm install\n      - name: build\n        run: npm run build\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) a commit or tag is pushed, or a repository is cloned. The workflow has 2 jobs. The job id of the 1st job is `Lint`. The job `Lint` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `install`. The 4th step is named `XO`. The job id of the 2nd job is `Build`. The job `Build` has 3 steps. The 1st step is named ``. The 2nd step is named `install`. The 3rd step is named `build`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/setup-node and v3 version of actions/checkout. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5588396152975378}, {"id": "63c495a68052faa2781b342a", "level": "level3", "llm_response": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches:\n      - master\n      - 1.x\n      - release\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'binary'\n          java-version: 17\n          cache: maven\n          cache-id: maven-central\n      - name: Publish package\n        run: mvn -B deploy -Dgpg.passphrase=\"${{ secrets.MAVEN_GPG_PASSPHRASE }}\" -Dgpg.privateKey=\"${{ secrets.MAVEN_GPG_PRIVATE_KEY }}\" -Dgpg.signingKey=\"${{ secrets.OSSRH_USERNAME }}\" -Dgpg.signingPassword=\"${{ secrets.OSSRH_PASSWORD }}\" -Dgpg.signingKeyFile=\"ossrh-ssh-id-20220505.asc\" -Dgpg.signingKeyPassword=\"${{ secrets.OSSRH_PASSWORD }}\" -Dgpg.signingKeyEmail=\"ossrh@sonatype.org\" -Dgpg.signingKeyEmailPrivateKeyPassword=\"${{ secrets.OSSRH_PASSWORD }}\" -Dgpg.signingKeyEmailPrivateKeyPasswordFile=\"ossrh-ssh-id-20220505.asc\"\n```", "answer": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches: [master, 1.x, release]\n\njobs:\n  release:\n    if: github.repository == 'jdbc-observations/datasource-proxy'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: 8\n          distribution: temurin\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}\n          gpg-passphrase: MAVEN_GPG_PASSPHRASE\n      - name: Publish package\n        run: ./mvnw --batch-mode deploy -DskipTests=true -Pgithub-ossrh\n        env:\n          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n\n```", "prompt": "Generate a GitHub Workflow named `Release to Maven Central (Deploy Snapshot or Stage Release)` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master, a branch named 1.x or a branch named release. The workflow has one job. The job id of the 1st job is `release`. The job `release` has 3 steps. The 1st step is named ``. The 2nd step is named `Set up Maven Central Repository`. The 3rd step is named `Publish package`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/setup-java. Here are some variables that might be used in the workflow: secrets.MAVEN_GPG_PRIVATE_KEY, secrets.OSSRH_USERNAME, secrets.OSSRH_PASSWORD and secrets.MAVEN_GPG_PASSPHRASE. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"cache-id\" is not defined in action \"actions/setup-java@v3\". available inputs are \"architecture\", \"cache\", \"check-latest\", \"distribution\", \"gpg-passphrase\", \"gpg-private-key\", \"java-package\", \"java-version\", \"java-version-file\", \"jdkFile\", \"job-status\", \"mvn-toolchain-id\", \"mvn-toolchain-vendor\", \"overwrite-settings\", \"server-id\", \"server-password\", \"server-username\", \"settings-path\", \"token\"", "filepath": "../tmp/test.yml", "line": 21, "column": 11, "kind": "action", "snippet": "          cache-id: maven-central\n          ^~~~~~~~~", "end_column": 19}]}, "bleu_score": 0.41498865986186534}, {"id": "63c495167843b61269a0553c", "level": "level3", "llm_response": "```yaml name: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    with:\n      repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Run the workflow that adds new tickets that are either:\n# - labelled \"DEPR\"\n# - title starts with \"[DEPR]\"\n# - body starts with \"Proposal Date\" (this is the first template field)\n# to the org-wide DEPR project board\n\nname: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Add newly created DEPR issues to the DEPR project board` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `routeissue`. Here are some reusable workflows that might be used in the workflow: {'version': 'master', 'name': 'openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "context \"secrets\" is not allowed here. available contexts are \"github\", \"inputs\", \"matrix\", \"needs\", \"strategy\", \"vars\". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details", "filepath": "../tmp/test.yml", "line": 11, "column": 23, "kind": "expression", "snippet": "      repo-token: ${{ secrets.GITHUB_TOKEN }}\n                      ^~~~~~~~~~~~~~~~~~~~", "end_column": 42}]}, "bleu_score": 0.5709592132891345}, {"id": "63c495e88052faa2781b50cc", "level": "level3", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of JuliaRegistries/TagBot. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and secrets.DOCUMENTER_KEY. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496876fc19abdf9c9c8bb", "level": "level3", "llm_response": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.4.0\n        with:\n          ref: main\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get install -y unzip\n          sudo apt-get install -y curl\n\n      - name: Checkout Data Source Repo\n        run: |\n          cd src\n          git checkout -f\n          git fetch\n          git checkout -f\n\n      - name: Process Data\n        run: |\n          cd src\n          echo \"Extracting data...\"\n          unzip -qz data.zip\n          echo \"Copying data...\"\n          cp -r data/* /home/runner/feeds/\n          echo \"Deploying data...\"\n          cd /home/runner/feeds/\n          firebase deploy --only feeds --token ${{ secrets.FIREBASE_TOKEN }}\n\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91 # v2.1.0\n        with:\n          project: hachist-website\n          auth: ${{ secrets.GH_API_KEY }}\n          deploy: false\n          publish: true\n          dry-run: false\n```", "answer": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n      - name: Install Dependencies\n        run: yarn\n      - name: Checkout Data Source Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n        with:\n          repository: smartcontractkit/reference-data-directory\n          path: data-source\n          token: ${{ secrets.GH_API_KEY }}\n      # - name: Read Data Source\n      #   run: cat data-source/package.json\n      - name: Process Data\n        run: yarn process\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91\n        with:\n\n          args: -c firebase-addresses.json deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n          PROJECT_ID: cl-docs-addresses\n```", "prompt": "Generate a GitHub Workflow named `Build and Publish Feed Resources` for a GitHub repository whose primary programming language is Solidity. This workflow will be triggered by an event: the scheduled time has come: every 30 minutes. The workflow has one job. The 1st job is named `Update latest feed data from source repo` and its job id is `build-feeds`. The job `build-feeds` has 5 steps. The 1st step is named `Checkout Repo`. The 2nd step is named `Install Dependencies`. The 3rd step is named `Checkout Data Source Repo`. The 4th step is named `Process Data`. The 5th step is named `Deploy to Firebase`. Here are some Github Actions that might be used in the workflow: 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f version of actions/checkout, 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f version of actions/checkout and 94389a881adad57284e35860f5d258ab262dcd91 version of w9jds/firebase-action. Here are some variables that might be used in the workflow: secrets.GH_API_KEY and secrets.FIREBASE_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.41921521470609735}, {"id": "63c494a48052faa2781ac54a", "level": "level3", "llm_response": "```yaml name: cspell-action\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: streetsidesoftware/cspell-action@v2\n```", "answer": "```yaml name: cspell-action\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: streetsidesoftware/cspell-action@v2\n```", "prompt": "Generate a GitHub Workflow named `cspell-action` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `cspell`. The job `cspell` has 2 steps. The 1st step is named ``. The 2nd step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v2 version of streetsidesoftware/cspell-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495197843b61269a056bc", "level": "level3", "llm_response": "```yaml name: Code Scanning - Action\n\non:\n  pull_request:\n    branches:\n      - dev\n      - master\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  pull_request:\n    branches: [dev, master]\n    types: [opened, synchronize]\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      # - name: Autobuild\n      #   uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `Code Scanning - Action` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created or a pull request's head branch is updated. The workflow would run whenever there is a pull_request event targeting: a branch named dev or a branch named master. The workflow has one job. The job id of the 1st job is `CodeQL-Build`. The job `CodeQL-Build` has 3 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Initialize CodeQL`. The 3rd step is named `Perform CodeQL Analysis`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v2 version of github/codeql-action/init and v2 version of github/codeql-action/analyze. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6618389603005367}, {"id": "63c494ee8052faa2781ae44b", "level": "level3", "llm_response": "```yaml name: Add PR Deploy Badge\n\non:\n  deployment_status:\n    types: [created]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: KB Pull Request Deployment Badges\n        uses: kibibit/kb-badger-action@v2\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Add PR Deploy Badge\n# https://docs.github.com/en/actions/reference/events-that-trigger-workflows\non: [deployment_status]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    # only runs this job on successful deploy\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - name: Kb Pull Request Deployment Badges\n      uses: kibibit/kb-badger-action@v2\n      with:\n        github-token: ${{secrets.GITHUB_TOKEN}}\n        badge-left: demo\n        badge-right: application\n        badge-logo: heroku\n        badge-path: api\n        badge2-left: demo\n        badge2-right: api-docs\n        badge2-color: 85EA2D\n        badge2-logo: swagger\n        badge2-path: api/docs\n```", "prompt": "Generate a GitHub Workflow named `Add PR Deploy Badge` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a new deployment status is created. The workflow has one job. The job id of the 1st job is `badge`. The job `badge` has one step. The 1st step is named `Kb Pull Request Deployment Badges`. Here are some Github Actions that might be used in the workflow: v2 version of kibibit/kb-badger-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "\"types\" cannot be specified for \"deployment_status\" Webhook event", "filepath": "../tmp/test.yml", "line": 4, "column": 3, "kind": "events", "snippet": "  deployment_status:\n  ^~~~~~~~~~~~~~~~~~", "end_column": 20}]}, "bleu_score": 0.2881452248061283}, {"id": "63c494b78052faa2781acd9d", "level": "level3", "llm_response": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    workflows: [\"Continuous Integration\"]\n    types:\n      - completed\n\njobs:\n  merge-me:\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        env:\n          DOTTBOTT_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n```", "answer": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Continuous Integration'\n\njobs:\n  merge-me:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n    timeout-minutes: 5\n```", "prompt": "Generate a GitHub Workflow named `Merge me!` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: the workflow named Continuous Integration is completed. The workflow has one job. The 1st job is named `Merge me!` and its job id is `merge-me`. The job `merge-me` has one step. The 1st step is named `Merge me!`. Here are some Github Actions that might be used in the workflow: master version of ridedott/merge-me-action. Here are some variables that might be used in the workflow: secrets.DOTTBOTT_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.44521851357849057}, {"id": "63c494a37843b61269a027ed", "level": "level3", "llm_response": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [1.18]\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.0\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n\n      - name: Build\n        run: |\n          go build ./... --tags=build\n\n      - name: Test\n        run: |\n          go test ./... -v\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\n\nname: CI\n\njobs:\n  test:\n    ## We want to define a strategy for our job\n    strategy:\n      ## this will contain a matrix of all the combinations\n      ## we wish to test again:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n\n    ## Defines the platform for each test run\n    runs-on: ${{ matrix.platform }}\n\n    ## the steps that will be run through for each version and platform\n    ## combination\n    steps:\n    ## sets up go based on the version\n    - name: Install Go\n      uses: actions/setup-go@v3.3.0\n      with:\n        go-version: ${{ matrix.go-version }}\n\n    ## checks out our code locally, so we can work with the files\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n\n    ## runs go test ./...\n    - name: Build\n      run: go build ./...\n\n    ## runs go test ./...\n    - name: Test\n      run: go test ./...\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `test`. The job `test` has 4 steps. The 1st step is named `Install Go`. The 2nd step is named `Checkout code`. The 3rd step is named `Build`. The 4th step is named `Test`. Here are some Github Actions that might be used in the workflow: v3.3.0 version of actions/setup-go and v3.1.0 version of actions/checkout. Here are some variables that might be used in the workflow: matrix.go-version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.604034719601224}, {"id": "63c493b87843b612699fd399", "level": "level3", "llm_response": "```yaml name: release-please\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: 'package'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\nname: release-please\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: node\n          package-name: release-please-action\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. The job `release-please` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v2 version of GoogleCloudPlatform/release-please-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6052665103345164}, {"id": "63c4941e7843b612699ff1f7", "level": "level3", "llm_response": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const { GITHUB_TOKEN } = context.env;\n            const { body } = context.payload;\n            const { repo: repoName, owner: ownerName } = context.repo;\n            const { issueNumber } = context.payload.pull_request;\n            const { issueUrl, title, body: bodyWithoutDemoLink } = await github.rest.issues.getPullRequest({\n              owner,\n              repo,\n              pull_number,\n            });\n            const { issue } = await github.rest.issues.get({\n              owner,\n              repo,\n              issue_number,\n            });\n            await github.rest.issues.update({\n              owner,\n              repo,\n              issue_number,\n              body: `${bodyWithoutDemoLink} ${title} <https://${repoName}.github.io/${issueUrl}>`,\n            });\n            await github.rest.github.reactions.create({\n              owner: ownerName,\n              repo: repoName,\n              issue_number,\n              reaction_type: 'emoji',\n              emoji: '\ud83d\udc4d',\n            });\n```", "answer": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    permissions:\n      pull-requests: write\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const pullRequestId = context.payload.pull_request.number\n            const pullRequestBranch = context.payload.pull_request.head.ref\n\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: pullRequestId,\n              body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n            });\n```", "prompt": "Generate a GitHub Workflow named `Demo link` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a pull request is created. The workflow has one job. The 1st job is named `Add demo link to PR description` and its job id is `add_demo_link`. The job `add_demo_link` has one step. The 1st step is named `Update PR description`. Here are some Github Actions that might be used in the workflow: v6 version of actions/github-script. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2793806952084176}, {"id": "63c494608052faa2781aabf4", "level": "level3", "llm_response": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: c4a742cab115ed795e34d4513e2cf7d472deb55f@c4a742cab115ed795e34d4513e2cf7d472deb55f\n      - name: Check go.mod files\n        run: |\n          go mod tidy\n          go mod range\n          go mod verify\n          go mod verify -all\n```", "answer": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version: 1.17\n\n      - name: Check go.mod files\n        shell: bash\n        run: |\n          cd gomod-sync\n          go run main.go check\n```", "prompt": "Generate a GitHub Workflow named `go.mod check` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) there is activity relating to a pull request. The workflow has one job. The 1st job is named `go.mod check` and its job id is `check`. The job `check` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Check go.mod files`. Here are some Github Actions that might be used in the workflow: 93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 version of actions/checkout and c4a742cab115ed795e34d4513e2cf7d472deb55f version of actions/setup-go. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "specifying action \"c4a742cab115ed795e34d4513e2cf7d472deb55f@c4a742cab115ed795e34d4513e2cf7d472deb55f\" in invalid format because owner is missing. available formats are \"{owner}/{repo}@{ref}\" or \"{owner}/{repo}/{path}@{ref}\"", "filepath": "../tmp/test.yml", "line": 16, "column": 15, "kind": "action", "snippet": "      - uses: c4a742cab115ed795e34d4513e2cf7d472deb55f@c4a742cab115ed795e34d4513e2cf7d472deb55f\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 95}]}, "bleu_score": 0.6068778340131011}, {"id": "63c494228052faa2781a95a5", "level": "level3", "llm_response": "```yaml name: snyk-pr\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n\n      - name: checkout action\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.ref }}\n\n      - name: PR\n        uses: ./whitesource-actions/snyk-pr\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          JIRA_TOKEN_PUBLIC_REPO: ${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}\n          JIRA_PROJECT: 'AutoRelease'\n          JIRA_ISSUE: ${{ github.event.pull_request.title }}\n          JIRA_PROJECT_LABEL: 'Release'\n          JIRA_RELEASE_DRAFT: 'true'\n          JIRA_RELEASE_STATUS: 'open'\n          JIRA_RELEASE_NAME: 'AutoRelease'\n          JIRA_RELEASE_DUE: '2020-04-01T00:00:00+00:00'\n          JIRA_RELEASE_EMAIL: 'noreply@autoreleasing.org'\n          JIRA_RELEASE_USER: 'noreply@autoreleasing.org'\n          JIRA_RELEASE_COMMENT: 'AutoRelease'\n```", "answer": "```yaml name: snyk-pr\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.pull_request.head.ref }}\n        fetch-depth: 0\n\n    - name: checkout action\n      uses: actions/checkout@v3\n      with:\n        repository: snowflakedb/whitesource-actions\n        token: ${{ secrets.WHITESOURCE_ACTION_TOKEN }}\n        path: whitesource-actions\n\n    - name: PR\n      uses: ./whitesource-actions/snyk-pr\n      env:\n        PR_TITLE: ${{ github.event.pull_request.title }}\n      with:\n        jira_token: ${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}\n        gh_token: ${{ secrets.GITHUB_TOKEN }}\n        amend: false # true if you want the commit to be amended with the JIRA number\n```", "prompt": "Generate a GitHub Workflow named `snyk-pr` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `whitesource`. The job `whitesource` has 3 steps. The 1st step is named `checkout`. The 2nd step is named `checkout action`. The 3rd step is named `PR`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/checkout and ./whitesource-actions/snyk-pr. Here are some variables that might be used in the workflow: github.event.pull_request.head.ref, secrets.WHITESOURCE_ACTION_TOKEN, secrets.JIRA_TOKEN_PUBLIC_REPO, secrets.GITHUB_TOKEN and github.event.pull_request.title. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34642549338705025}, {"id": "63c493c37843b612699fd587", "level": "level3", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        with:\n          tag_name: vNext\n          release_name: vNext\n          draft: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is TSQL. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) a pull request is created, a previously closed pull request is reopened or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `update_release_draft`. The job `update_release_draft` has one step. The 1st step is named `Draft Release`. Here are some Github Actions that might be used in the workflow: v5 version of release-drafter/release-drafter. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7405500469616051}, {"id": "63c495238052faa2781afbf5", "level": "level3", "llm_response": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Thank you for your contribution. We will review your contribution soon.'\n        pr-message: 'Thank you for your contribution. We will review your contribution soon.'\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs'\n        pr-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs'\n```", "prompt": "Generate a GitHub Workflow named `Greetings` for a GitHub repository whose primary programming language is Objective-C. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) activity related to an issue occurs. The workflow has one job. The job id of the 1st job is `greeting`. The job `greeting` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of actions/first-interaction. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.21304930948250642}, {"id": "63c496956fc19abdf9c9ce1c", "level": "level3", "llm_response": "```yaml name: Licensed\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    name: Check licenses\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: npm ci\n      - name: Install licensed\n        run: npm run install:licensed\n      - run: npm run check:license\n```", "answer": "```yaml name: Licensed\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    name: Check licenses\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: npm\n      - run: npm ci\n      - name: Install licensed\n        run: |\n          cd $RUNNER_TEMP\n          curl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\n          sudo tar -xzf licensed.tar.gz\n          sudo mv licensed /usr/local/bin/licensed\n      - run: licensed status\n```", "prompt": "Generate a GitHub Workflow named `Licensed` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Check licenses` and its job id is `test`. The job `test` has 5 steps. The 1st step is named ``. The 2nd step is named `Set Node.js 16.x`. The 3rd step is named ``. The 4th step is named `Install licensed`. The 5th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/setup-node. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.40807981340228344}, {"id": "63c495e58052faa2781b4f4c", "level": "level3", "llm_response": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 */6 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 5 days'\n        stale-pr-message: 'This PR is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 5 days'\n        days-before-stale: 30\n        days-before-close: 5\n        exempt-issue-labels: 'needs-qa'\n        exempt-pr-labels: 'needs-qa'\n```", "answer": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '0 */6 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        days-before-pr-stale: 14\n        days-before-pr-close: 14\n        stale-pr-label: 'inactive'\n        close-pr-label: 'auto-close'\n        exempt-pr-labels: 'keep-open'\n        stale-pr-message: >\n          This pull request has been inactive for 14 days. \n          If you are finished with your changes, don't forget to sign off. See the [contributor guide](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-pull-request-automation?branch=main) for instructions. \n          If this PR is inactive for 14 more days, it will be closed automatically. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n        close-pr-message: >\n          This pull request has been inactive for 28 days. At this time, we are closing the PR.  \n          If you decide to continue working on your change, you can reopen the PR and continue working. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n          \n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the scheduled time has come: every 6 hours. The workflow has one job. The job id of the 1st job is `stale`. The job `stale` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v6 version of actions/stale. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.19759925353087512}, {"id": "63c4951f7843b61269a0593c", "level": "level3", "llm_response": "```yaml name: docker-push\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2.1.0\n        with:\n          version: latest\n\n      - name: setup buildx\n        uses: docker/setup-buildx-action@v2.1.0\n        with:\n          version: latest\n\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```", "answer": "```yaml name: docker-push\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          images: fsouza/fake-gcs-server\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: setup buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2.1.0\n\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```", "prompt": "Generate a GitHub Workflow named `docker-push` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The job id of the 1st job is `build-and-push`. The job `build-and-push` has 6 steps. The 1st step is named ``. The 2nd step is named `docker meta` and its id is `meta`. The 3rd step is named `setup qemu`. The 4th step is named `setup buildx` and its id is `buildx`. The 5th step is named `login to docker hub`. The 6th step is named `build and push`. Here are some Github Actions that might be used in the workflow: v3.1.0 version of actions/checkout, v4.1.0 version of docker/metadata-action, v2.1.0 version of docker/setup-qemu-action, v2.1.0 version of docker/setup-buildx-action, v2.1.0 version of docker/login-action and v3.2.0 version of docker/build-push-action. Here are some variables that might be used in the workflow: secrets.DOCKER_USERNAME, secrets.DOCKER_PASSWORD, steps.meta.outputs.tags and steps.meta.outputs.labels. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"meta\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 20, "column": 21, "kind": "expression", "snippet": "          tags: ${{ steps.meta.outputs.tags }}\n                    ^~~~~~~~~~~~~~~~~~~~~~~", "end_column": 43}, {"message": "property \"meta\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 21, "column": 23, "kind": "expression", "snippet": "          labels: ${{ steps.meta.outputs.labels }}\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 47}]}, "bleu_score": 0.7006835594742193}, {"id": "63c495407843b61269a06679", "level": "level3", "llm_response": "```yaml name: Tests\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Linux packages for Qt 5 support\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y qt5-default qtbase5-dev libqt5svg5-dev libqt5x11extras5-dev\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies and local packages\n        run: |\n          python -m pip install -r requirements.txt\n      - name: Create clean test directory\n        run: |\n          mkdir -p /tmp/pytest\n      - name: Test Traits package\n        run: |\n          pytest --cov=traits --cov-report=term --cov-report=xml -m \"not test_\"\n```", "answer": "```yaml name: Tests\n\non:\n- pull_request\n- workflow_dispatch\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11-dev']\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install Linux packages for Qt 5 support\n      run: |\n        sudo apt-get update\n        sudo apt-get install qt5-default\n        sudo apt-get install libxkbcommon-x11-0\n        sudo apt-get install libxcb-icccm4\n        sudo apt-get install libxcb-image0\n        sudo apt-get install libxcb-keysyms1\n        sudo apt-get install libxcb-randr0\n        sudo apt-get install libxcb-render-util0\n        sudo apt-get install libxcb-xinerama0\n      if: matrix.os == 'ubuntu-latest'\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies and local packages\n      run: |\n        python -m pip install .[test]\n    - name: Create clean test directory\n      run: |\n        mkdir testdir\n    - name: Test Traits package\n      uses: GabrielBB/xvfb-action@v1\n      with:\n        working-directory: testdir\n        run: python -m unittest discover -v traits\n```", "prompt": "Generate a GitHub Workflow named `Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `tests`. The job `tests` has 6 steps. The 1st step is named ``. The 2nd step is named `Install Linux packages for Qt 5 support`. The 3rd step is named `Set up Python ${{ matrix.python-version }}`. The 4th step is named `Install dependencies and local packages`. The 5th step is named `Create clean test directory`. The 6th step is named `Test Traits package`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v4 version of actions/setup-python and v1 version of GabrielBB/xvfb-action. Here are some variables that might be used in the workflow: matrix.python-version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4228463243124995}, {"id": "63c495448052faa2781b0abc", "level": "level3", "llm_response": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n      - 'release'\n  pull_request:\n    branches-ignore:\n      - 'release'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x]\n        include:\n          - node-version: 14.x\n            os: ubuntu-latest\n          - node-version: 16.x\n            os: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Launch MongoDB\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y mongodb-org-server\n          sudo systemctl start mongodb-org-server\n          sudo systemctl enable mongodb-org-server\n          sudo systemctl status mongodb-org-server\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: wbari/start-mongoDB@master\n        with:\n          db_version: ${{ matrix.node-version }}\n      - name: yarn install, build, and test\n        run: yarn\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@master\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          # You can pass any file or directory you wish to cover\n          files: '**/coverage/lcov.info'\n```", "answer": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n    - release\n  pull_request:\n    branches-ignore:\n    - release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n    - uses: actions/checkout@master\n    - name: Launch MongoDB\n      uses: wbari/start-mongoDB@master\n      with:\n        mongoDBVersion: 5\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@master\n      with:\n        node-version: ${{ matrix.node-version }}\n    - name: yarn install, build, and test\n      run: |\n        yarn install\n        yarn run build\n        yarn run test:cov\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@master\n      with:\n        token: ${{secrets.CODECOV_TOKEN}}\n      env:\n        CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node Blog CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event unless the push event is to: a branch named release. 2) The workflow would run whenever there is a pull_request event unless the pull request is targeting: a branch named release. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 5 steps. The 1st step is named ``. The 2nd step is named `Launch MongoDB`. The 3rd step is named `Use Node.js ${{ matrix.node-version }}`. The 4th step is named `yarn install, build, and test`. The 5th step is named `Upload coverage to Codecov`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout, master version of wbari/start-mongoDB, master version of actions/setup-node and master version of codecov/codecov-action. Here are some variables that might be used in the workflow: matrix.node-version and secrets.CODECOV_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4614359145973374}, {"id": "63c495a88052faa2781b34fc", "level": "level3", "llm_response": "```yaml name: Build iso from elemental-iso-build as external user\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Docker\n        uses: docker-practice/actions-setup-docker@v1\n        with:\n          version: \"latest\"\n      - name: Install deps\n        run: |\n          sudo apt-get install -y wget\n          sudo apt-get install -y ca-certificates curl gnupg\n          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n          echo \"deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n          sudo apt-get update\n          sudo apt-get install -y docker-ce docker-ce-cli containerd.io\n      - name: Build iso from script\n        run: |\n          cd ./github-actions\n          sudo ./build.sh\n      - name: Check config was inserted\n        run: |\n          sudo ./build.sh --config --config-check\n      - name: Basic sanity checks for ISO\n        run: |\n          sudo ./build.sh --config --config-check --basic-check\n```", "answer": "```yaml name: Build iso from elemental-iso-build as external user\n# Test building the iso from an external point of view\n# This tests doesn't clone the repo, just interacts with the script as an external user would do\n# Gets the script only and runs it to see if the building is done properly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Docker\n        uses: docker-practice/actions-setup-docker@v1\n      - name: Install deps\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y mkisofs\n      - name: Build iso from script\n        run: |\n          # Just a simple run to test the build script, no need to upload the generated iso!\n          echo \"TEST\" > config.yaml\n          curl -fsSL https://raw.githubusercontent.com/rancher/elemental/main/.github/elemental-iso-build -o elemental-iso-build\n          chmod +x ./elemental-iso-build\n          ./elemental-iso-build config.yaml\n      - name: Check config was inserted\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Extract config and check against our config\n          isoinfo -x /livecd-cloud-config.yaml -R -i $ISO > livecd-cloud-config.yaml\n          # This checks that the files are the same content\n          cmp config.yaml livecd-cloud-config.yaml\n      - name: Basic sanity checks for ISO\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Check it has eltorito\n          isoinfo -d -i $ISO|grep -q Eltorito\n          # check bootable flag\n          isoinfo -d -i $ISO|grep -q bootable        \n```", "prompt": "Generate a GitHub Workflow named `Build iso from elemental-iso-build as external user` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `deploy`. The job `deploy` has 5 steps. The 1st step is named `Install Docker`. The 2nd step is named `Install deps`. The 3rd step is named `Build iso from script`. The 4th step is named `Check config was inserted`. The 5th step is named `Basic sanity checks for ISO`. Here are some Github Actions that might be used in the workflow: v1 version of docker-practice/actions-setup-docker. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.48225996666929677}, {"id": "63c495878052faa2781b26e9", "level": "level3", "llm_response": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ignoreLabel: do-not-autoclose\n          rules: |\n            [\n              {\n                \"type\": \"title\",\n                \"regex\": \".*<(Source Name|short description)>*\",\n                \"message\": \"You did not fill out the description in the title\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n                \"message\": \"The acknowledgment section was not removed\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n                \"message\": \"The requested information was not filled out\"\n              }\n            ]\n```", "prompt": "Generate a GitHub Workflow named `Issue closer` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: an issue is opened, the title or body on an issue is edited or a closed issue is reopened. The workflow has one job. The job id of the 1st job is `autoclose`. The job `autoclose` has one step. The 1st step is named `Autoclose issues`. Here are some Github Actions that might be used in the workflow: v3.4 version of arkon/issue-closer-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.06347770720646997}, {"id": "63c495257843b61269a05b78", "level": "level3", "llm_response": "```yaml name: Flatpak dependency updates\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        with:\n          github-token: ${{ secrets.EASYEFFECTS_BOT }}\n```", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```", "prompt": "Generate a GitHub Workflow named `Flatpak dependency updates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `flatpak-external-data-checker`. The job `flatpak-external-data-checker` has 2 steps. The 1st step is named ``. The 2nd step is named ``. Here are some Github Actions that might be used in the workflow: v3.1.0 version of actions/checkout and docker://ghcr.io/flathub/flatpak-external-data-checker:latest. Here are some variables that might be used in the workflow: secrets.EASYEFFECTS_BOT. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.08252522862175536}, {"id": "63c494a27843b61269a02770", "level": "level3", "llm_response": "```yaml name: Doc Site\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH: gh-pages\n          FOLDER: docs\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH: gh-pages\n          FOLDER: docs\n```", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Doc Site\n\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install --legacy-peer-deps\n          npm run docs:build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist/site # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Doc Site` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build-and-deploy-site`. The job `build-and-deploy-site` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install and Build \ud83d\udd27`. The 3rd step is named `Deploy \ud83d\ude80`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v4.2.5 version of JamesIves/github-pages-deploy-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.16608736441602212}, {"id": "63c496361e33648075779191", "level": "level3", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. The job `update_release_draft` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v5 version of release-drafter/release-drafter. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494847843b61269a01ad6", "level": "level3", "llm_response": "```yaml name: Release v1 NPM Package\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: \"Enter the version for the release tag.\"\n        required: true\n        type: string\n        # Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time.\n        concurrency: \"merge-to-v1-branch\"\n\njobs:\n  merge-to-v1-branch:\n    name: Create release by rebasing master to v1 and create a new tag\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: master\n          path: ${{ github.workspace }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Set git name, mail and origin\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n          git config --global user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n          git config --global user.name \"$GITHUB_ACTOR\"\n      - name: Checkout v1 branch and merge\n        run: |\n          git checkout -b v1\n          git merge master\n      - name: Generate new tag, push tag and branch\n        run: |\n          git tag -a \"v1.0.0\" -m \"Tag v1.0.0\"\n          git push origin v1\n          git push --tags\n      - run: |\n          npm version patch --no-git-tag-version\n          npm version minor --no-git-tag-version\n          npm version prerelease --no-git-tag-version\n          npm publish --tag v1\n```", "answer": "```yaml name: \"Release v1 NPM Package\"\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: |\n          Enter the version for the release tag.\n          Must be larger than last tag.\n          Use patch (0.0.x) for bug fixes.\n          Use minor (0.x.0) for new actions.\n        type: string\n        required: true\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: false\njobs:\n  merge-to-v1-branch:\n    name: Create release by rebasing master to v1 and create a new tag\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n          cache: 'yarn'\n          registry-url: 'https://registry.npmjs.org'\n      - run: yarn install\n      - name: Set git name, mail and origin\n        run: |\n          git config --global user.name \"Josef Fr\u00f6hle\"\n          git config --global user.email \"github@josef-froehle.de\"\n          git remote set-url origin https://${{ secrets.BOT_PIPELINE_TOKEN }}@github.com/${{ github.repository }}\n      - name: Checkout v1 branch and merge\n        run: |\n          git checkout v1\n          git merge --ff-only master\n      - name: Generate new tag, push tag and branch\n        run: |\n          yarn run build\n          yarn version --non-interactive --no-git-tag-version --new-version ${{ github.event.inputs.tag }}\n          yarn run changelog\n          yarn run documentation\n          git add -A\n          yarn version --non-interactive --no-git-tag-version --new-version 0.0.0\n          yarn version --non-interactive --new-version ${{ github.event.inputs.tag }}\n          git push\n          git push --tags\n          git checkout master\n          git merge --ff-only v1\n          git push\n          git subtree split --prefix docs -b gh-pages\n          git push -f origin gh-pages:gh-pages\n      - run: yarn publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release v1 NPM Package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: tag-this input represents enter the version for the release tag.\nmust be larger than last tag.\nuse patch (0.0.x) for bug fixes.\nuse minor (0.x.0) for new actions.\n, the data type is string and it must be supplied. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Create release by rebasing master to v1 and create a new tag` and its job id is `merge-to-v1-branch`. The job `merge-to-v1-branch` has 7 steps. The 1st step is named `Checkout`. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Set git name, mail and origin`. The 5th step is named `Checkout v1 branch and merge`. The 6th step is named `Generate new tag, push tag and branch`. The 7th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/setup-node. Here are some variables that might be used in the workflow: secrets.BOT_PIPELINE_TOKEN, github.repository, github.event.inputs.tag and secrets.NPM_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "unexpected key \"concurrency\" for \"inputs\" section. expected one of \"default\", \"description\", \"required\"", "filepath": "../tmp/test.yml", "line": 11, "column": 9, "kind": "syntax-check", "snippet": "        concurrency: \"merge-to-v1-branch\"\n        ^~~~~~~~~~~~", "end_column": 20}]}, "bleu_score": 0.34339858725365685}, {"id": "63c4963f1e3364807577960f", "level": "level3", "llm_response": "```yaml name: \"Validate Gradle Wrapper\"\non: [pull_request]\n\njobs:\n  validation:\n    name: Validation\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "answer": "```yaml name: \"Validate Gradle Wrapper\"\n\non: [ pull_request ]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "prompt": "Generate a GitHub Workflow named `Validate Gradle Wrapper` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Validation` and its job id is `validation`. The job `validation` has 2 steps. The 1st step is named ``. The 2nd step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v1 version of gradle/wrapper-validation-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6200132149733733}, {"id": "63c4969cb008460c1df157a0", "level": "level3", "llm_response": "```yaml name: Post-release\n\non:\n  release:\n    types: [published, edited]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: apexskier/github-release-commenter@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Post-release\non:\n  release:\n    types:\n      - published\n      - edited\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: apexskier/github-release-commenter@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment-template: This is addressed by {release_link}.\n          label-template: released\n```", "prompt": "Generate a GitHub Workflow named `Post-release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published or the details of a release, pre-release, or draft release are edited. The workflow has one job. The job id of the 1st job is `release`. The job `release` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of apexskier/github-release-commenter. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.48713792921918514}, {"id": "63c4946e8052faa2781ab27f", "level": "level3", "llm_response": "```yaml name: test\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\npermissions:\n  contents: read\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go-version: [1.19.x]\n        include:\n          - go-version: 1.18\n            terraform-version: 0.14.0\n          - go-version: 1.19\n            terraform-version: 0.15.0\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n      - name: test\n        run: make test\n\n  testacc:\n    needs: [test]\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        terraform-version: [0.14.0]\n        include:\n          - terraform-version: 0.15.0\n    steps:\n      - uses: actions/checkout@v3\n      - name: docker build\n        run: make docker-build\n      - name: terraform --version\n        run: terraform --version\n      - name: testacc\n        run: make testacc\n```", "answer": "```yaml name: test\npermissions:\n  contents: read\n\non:\n  push:\n    branches:\n    - master\n  pull_request:\n    branches:\n    - master\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 10\n    strategy:\n      matrix:\n        os:\n        - ubuntu-latest\n        - macOS-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-go@v3\n      with:\n        go-version-file: '.go-version'\n        cache: true\n    - name: test\n      run: make test\n  testacc:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    strategy:\n      matrix:\n        terraform:\n        - 1.0.0\n        - 0.15.5\n        - 0.14.11\n        - 0.13.7\n        - 0.12.31\n    env:\n      TERRAFORM_VERSION: ${{ matrix.terraform }}\n    steps:\n    - uses: actions/checkout@v3\n    - name: docker build\n      run: docker-compose build\n    - name: terraform --version\n      run: docker-compose run --rm tfschema terraform --version\n    - name: testacc\n      run: docker-compose run --rm tfschema make testacc\n```", "prompt": "Generate a GitHub Workflow named `test` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The job id of the 1st job is `test`. The job `test` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `test`. The job id of the 2nd job is `testacc`. The job `testacc` has 4 steps. The 1st step is named ``. The 2nd step is named `docker build`. The 3rd step is named `terraform --version`. The 4th step is named `testacc`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/setup-go and v3 version of actions/checkout. Here are some variables that might be used in the workflow: matrix.terraform. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34145980619747374}, {"id": "63c495297843b61269a05d16", "level": "level3", "llm_response": "```yaml name: Lint\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.0\n      - uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.39.0\n          args: --config .golangci.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.github_token }}\n```", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire cosmos-sdk repository\n# This workflow is run on every pull request and push to main\n# The `golangci` will pass without running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 8\n    steps:\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.0\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.47.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        if: env.GIT_DIFF\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The 1st job is named `golangci-lint` and its job id is `golangci`. The job `golangci` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/setup-go, v3 version of actions/checkout, v6.1.0 version of technote-space/get-diff-action and v3.2.0 version of golangci/golangci-lint-action. Here are some variables that might be used in the workflow: secrets.github_token. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5867228479970039}, {"id": "63c4951f7843b61269a0593e", "level": "level3", "llm_response": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - '*'\n\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - name: fetch tags\n        run: |\n          git fetch --tags\n          git checkout $(git describe --tags --abbrev=0 --max-count=1)\n      - uses: actions/setup-go@v3.3.0\n        with:\n          go-version: '1.18'\n      - uses: goreleaser/goreleaser-action@v3.1.0\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: goreleaser\non:\n  push:\n    tags:\n      - \"*\"\n\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n\n      - name: fetch tags\n        run: git fetch --tags --force\n\n      - uses: actions/setup-go@v3.3.0\n        with:\n          go-version: 1.19\n\n      - uses: goreleaser/goreleaser-action@v3.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release -f ci/.goreleaser.yml\n```", "prompt": "Generate a GitHub Workflow named `goreleaser` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches *. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `release`. The job `release` has 4 steps. The 1st step is named ``. The 2nd step is named `fetch tags`. The 3rd step is named ``. The 4th step is named ``. Here are some Github Actions that might be used in the workflow: v3.1.0 version of actions/checkout, v3.3.0 version of actions/setup-go and v3.1.0 version of goreleaser/goreleaser-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5479456949239228}, {"id": "63c4967e33b087f6bde2c5c1", "level": "level3", "llm_response": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: ${{ steps.metadata.outputs.dependency-type == 'version-update' }}\n        run: gh pr merge --auto --merge $PR_URL\n        env:\n          PR_URL: ${{ github.event.pull_request.html_url }}\n```", "answer": "```yaml ---\nname: Dependabot auto-merge\n\"on\": pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: >-\n          ${{\n          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||\n          steps.metadata.outputs.update-type == 'version-update:semver-minor'\n          }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```", "prompt": "Generate a GitHub Workflow named `Dependabot auto-merge` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope and write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `dependabot`. The job `dependabot` has 2 steps. The 1st step is named `Dependabot metadata` and its id is `metadata`. The 2nd step is named `Enable auto-merge for Dependabot PRs`. Here are some Github Actions that might be used in the workflow: v1.3.4 version of dependabot/fetch-metadata. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and github.event.pull_request.html_url. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6832604352856054}, {"id": "63c495207843b61269a059a2", "level": "level3", "llm_response": "```yaml name: Labeler\non: [pull_request_target]\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler/blob/master/README.md\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. The job `label` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v4 version of actions/labeler. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6419752245682109}, {"id": "63c494378052faa2781a9e70", "level": "level3", "llm_response": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Protobuf format\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          args: --style=google --diff-filter=AMR -i src/ -i src/c /src/protobuf/ -i src/protobuf/protobuf.h\n\n      - name: Lint shell, Docker and protobuf\n        uses: github/super-linter/slim@v4\n        with:\n          args: -f=shell -f=docker -f=protobuf\n          config: .github/lint.yml\n          config-file: .github/lint.yml\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    branches: [ main ]\n    types: [opened, synchronize, reopened, ready_for_review]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          # Full git history isn't needed to get a proper list of changed files within `super-linter`\n          fetch-depth: 0\n\n      - name: Protobuf format\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          clang-format-version: '14'\n  \n      - name: Lint shell, Docker and protobuf\n        uses: github/super-linter/slim@v4\n        env:\n          VALIDATE_ALL_CODEBASE: false\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Select file types to lint. Python and Rust linters are configured separately.\n          VALIDATE_SHELL_SHFMT: true\n          #\n          # disable hadolint \n          # https://github.com/hadolint/hadolint/issues/821\n          # VALIDATE_DOCKERFILE_HADOLINT: true\n          # DOCKERFILE_HADOLINT_FILE_NAME: .github/config/.hadolint.yaml\n          #\n          # Enable after fixing proto lint issues.\n          # VALIDATE_PROTOBUF: true\n```", "prompt": "Generate a GitHub Workflow named `Miscellaneous Lint` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named devnet. 2) a pull request is created, a pull request's head branch is updated, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `lint`. The job `lint` has 3 steps. The 1st step is named `Checkout Code`. The 2nd step is named `Protobuf format`. The 3rd step is named `Lint shell, Docker and protobuf`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v4.9.0 version of jidicula/clang-format-action and v4 version of github/super-linter/slim. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47283495811951337}, {"id": "63c496561899db58864d23b6", "level": "level3", "llm_response": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n```", "answer": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Docker` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.docker.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/docker/**, roles/docker/**, plugins/filter/json.py, plugins/filter/staten.py or plugins/lookup/docker_applications.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `docker`. Here are some reusable workflows that might be used in the workflow: {'version': None, 'name': './.github/workflows/molecule.yaml'}. Here are some variables that might be used in the workflow: inputs.debug == true and inputs.debug. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9591894571091382}, {"id": "63c496851899db58864d36f3", "level": "level3", "llm_response": "```yaml name: Test with Pre-commit\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.6', '3.7', '3.8', '3.9']\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n      - name: Lint with pre-commit\n        run: |\n          pre-commit run --all-files\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Test with Pre-commit\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n          pre-commit install-hooks\n      - name: Lint with pre-commit\n        run: pre-commit run --all-files\n```", "prompt": "Generate a GitHub Workflow named `Test with Pre-commit` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Python ${{ matrix.python-version }}`. The 3rd step is named `Install dependencies`. The 4th step is named `Lint with pre-commit`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v4 version of actions/setup-python. Here are some variables that might be used in the workflow: matrix.python-version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.727756420905298}, {"id": "63c495e58052faa2781b4fae", "level": "level3", "llm_response": "```yaml name: Self-assign\non:\n  issue_comment:\n    types: [created]\njobs:\n  one:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jupyterlab-actions/self-assign@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          comment: >\n            This issue has been assigned to you. We will review it as soon as possible.\n```", "answer": "```yaml # Allow users to automatically tag themselves to issues\n\nname: Self-assign\non:\n  issue_comment:\n    types: created\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: >-\n      (github.event.comment.body == '#take' ||\n       github.event.comment.body == '#self-assign') &&\n       (!github.event.issue.pull_request)\n    steps:\n      - run: |\n          echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\n          curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n```", "prompt": "Generate a GitHub Workflow named `Self-assign` for a GitHub repository whose primary programming language is Jupyter Notebook. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `one`. The job `one` has one step. The 1st step is named ``. Here are some variables that might be used in the workflow: github.event.issue.number, github.event.comment.user.login, secrets.GITHUB_TOKEN and github.repository. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.14873685681507454}, {"id": "63c4957c8052faa2781b2239", "level": "level3", "llm_response": "```yaml name: Add Issues/PRs to TF Provider DevEx team board\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request:\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: Add Content to project\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set Issue to 'Priority = Triage Next'\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        with:\n          project-id: 11428\n          token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          action: add\n          type: issue\n\n      - name: Set Pull Request to 'Priority = Triage Next'\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        with:\n          project-id: 11428\n          token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          pull-request-number: ${{ github.event.pull_request.number }}\n          action: add\n          type: pull-request\n```", "answer": "```yaml # Based on https://github.com/leonsteinhaeuser/project-beta-automations\n\nname: \"Add Issues/PRs to TF Provider DevEx team board\"\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    # NOTE: The way content is added to project board is equivalent to an \"upsert\".\n    # Calling it multiple times will be idempotent.\n    #\n    # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\n    #\u00a0to see the reasoning behind using `pull_request_target` instead of `pull_request`\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: \"Add Content to project\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Set Issue to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'issues'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.issue.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n      - name: \"Set Pull Request to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'pull_request_target'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.pull_request.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n```", "prompt": "Generate a GitHub Workflow named `Add Issues/PRs to TF Provider DevEx team board` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) an issue is opened or a closed issue is reopened. 2) a pull request is created, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow has one job. The 1st job is named `Add Content to project` and its job id is `add-content-to-project`. The job `add-content-to-project` has 2 steps. The 1st step is named `Set Issue to 'Priority = Triage Next'`. The 2nd step is named `Set Pull Request to 'Priority = Triage Next'`. Here are some Github Actions that might be used in the workflow: v2.0.1 version of leonsteinhaeuser/project-beta-automations and v2.0.1 version of leonsteinhaeuser/project-beta-automations. Here are some variables that might be used in the workflow: secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN, github.event.issue.node_id and github.event.pull_request.node_id. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2945521392337463}, {"id": "63c49697b008460c1df15590", "level": "level3", "llm_response": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Build the file\n        run: |\n          npm install\n          npm run build\n      - name: Upload zip to release\n        uses: svenstaro/upload-release-action@v1-release\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          tag: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n      - name: HACS Action\n        uses: hacs/action@main\n        with:\n          hacs_token: ${{ secrets.GITHUB_TOKEN }}\n          release_name: ${{ github.ref }}\n          release_id: ${{ github.ref }}\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      # Build\n      - name: Build the file\n        run: |\n          cd /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card\n          npm install\n          npm run build\n\n      # Upload build file to the releas as an asset.\n      - name: Upload zip to release\n        uses: svenstaro/upload-release-action@v1-release\n\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card/dist/thermostat-dark-card.js\n          asset_name: thermostat-dark-card.js\n          tag: ${{ github.ref }}\n          overwrite: true\n      - name: HACS Action\n        uses: \"hacs/action@main\"\n        with:\n          category: \"plugin\"\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow has one job. The 1st job is named `Prepare release` and its job id is `release`. The job `release` has 4 steps. The 1st step is named ``. The 2nd step is named `Build the file`. The 3rd step is named `Upload zip to release`. The 4th step is named `HACS Action`. Here are some Github Actions that might be used in the workflow: v1 version of actions/checkout, v1-release version of svenstaro/upload-release-action and main version of hacs/action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and github.ref. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6666753239489767}, {"id": "63c494b87843b61269a03054", "level": "level3", "llm_response": "```yaml name: autoupdate\non:\n  push:\n    branches-ignore:\n      - 'version-bump/**'\n      - 'dependabot/**'\n      - 'bot/**'\n      - 'all-contributors/**'\njobs:\n  autoupdate-for-bot:\n    name: Autoupdate autoapproved PR created in the upstream\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoupdating\n        uses: docker://chinthakagodawita/autoupdate-action:v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_BOT_EVE }}\n```", "answer": "```yaml # This action is centrally managed in https://github.com/asyncapi/.github/\r\n# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo\r\n\r\n# This workflow is designed to work with:\r\n# - autoapprove and automerge workflows for dependabot and asyncapibot.\r\n# - special release branches that we from time to time create in upstream repos. If we open up PRs for them from the very beginning of the release, the release branch will constantly update with new things from the destination branch they are opened against\r\n\r\n# It uses GitHub Action that auto-updates pull requests branches, whenever changes are pushed to their destination branch.\r\n# Autoupdating to latest destination branch works only in the context of upstream repo and not forks\r\n\r\nname: autoupdate\r\n\r\non:\r\n  push:\r\n    branches-ignore:  \r\n      - 'version-bump/**'\r\n      - 'dependabot/**'\r\n      - 'bot/**'\r\n      - 'all-contributors/**'\r\n\r\njobs:\r\n  autoupdate-for-bot:\r\n    if: startsWith(github.repository, 'asyncapi/')\r\n    name: Autoupdate autoapproved PR created in the upstream\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Autoupdating\r\n        uses: docker://chinthakagodawita/autoupdate-action:v1\r\n        env:\r\n          GITHUB_TOKEN: '${{ secrets.GH_TOKEN_BOT_EVE }}'\r\n          PR_FILTER: \"labelled\"\r\n          PR_LABELS: \"autoupdate\"\r\n          PR_READY_STATE: \"ready_for_review\"\r\n          MERGE_CONFLICT_ACTION: \"ignore\"\r\n```", "prompt": "Generate a GitHub Workflow named `autoupdate` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: The workflow would run whenever there is a push event unless the push event is to: a branch whose name matches version-bump/**, a branch whose name matches dependabot/**, a branch whose name matches bot/** or a branch whose name matches all-contributors/**. The workflow has one job. The 1st job is named `Autoupdate autoapproved PR created in the upstream` and its job id is `autoupdate-for-bot`. The job `autoupdate-for-bot` has one step. The 1st step is named `Autoupdating`. Here are some Github Actions that might be used in the workflow: docker://chinthakagodawita/autoupdate-action:v1. Here are some variables that might be used in the workflow: secrets.GH_TOKEN_BOT_EVE. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6439596431293636}, {"id": "63c494877843b61269a01c1e", "level": "level3", "llm_response": "```yaml name: Prepare Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version number\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Push Tag\n        run: |\n          git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"GitHub Actions\"\n          git push --tags\n```", "answer": "```yaml \nname: Prepare Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version Number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Push Tag\n      run: | \n            echo \"version is ${{ github.event.inputs.version }}\"\n            git config user.name \"GitHub Actions Bot\"\n            git config user.email \"<>\"\n            sed -i \"/is_master/d\" fxmanifest.lua\n            sed -i \"/^version/c\\version '${{ github.event.inputs.version }}'\" fxmanifest.lua\n            git add .\n            git commit -m \"${{ github.event.inputs.version }}\"\n            git tag -a ${{ github.event.inputs.version }} -m \"Version ${{ github.event.inputs.version }}\"\n            sed -i \"/^version/ais_master 'yes'\" fxmanifest.lua\n            git add .\n            git commit -m \"Update Version\"\n            git push --follow-tags\n```", "prompt": "Generate a GitHub Workflow named `Prepare Release` for a GitHub repository whose primary programming language is Lua. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: version-this input represents version number and it must be supplied. The workflow has one job. The job id of the 1st job is `create`. The job `create` has 2 steps. The 1st step is named ``. The 2nd step is named `Push Tag`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout. Here are some variables that might be used in the workflow: github.event.inputs.version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1799530563036063}, {"id": "63c4966d33b087f6bde2bebf", "level": "level3", "llm_response": "```yaml name: \"CodeQL\"\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 5 * * 0'\n\njobs:\n  analyse:\n    name: Analyse\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: 'go'\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 5 * * 0'\n\njobs:\n  analyse:\n    name: Analyse\n    runs-on: ubuntu-20.04\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      # Override language selection by uncommenting this and choosing your languages\n      with:\n        languages: go\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `CodeQL` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) The workflow would run whenever there is a pull_request event targeting: a branch named main. 4) the scheduled time has come: at 05:00 am, only on sunday. The workflow has one job. The 1st job is named `Analyse` and its job id is `analyse`. The job `analyse` has 5 steps. The 1st step is named `Checkout repository`. The 2nd step is named ``. The 3rd step is named `Initialize CodeQL`. The 4th step is named `Autobuild`. The 5th step is named `Perform CodeQL Analysis`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v2 version of github/codeql-action/init, v2 version of github/codeql-action/autobuild and v2 version of github/codeql-action/analyze. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6762044038601766}, {"id": "63c496581e3364807577a144", "level": "level3", "llm_response": "```yaml name: Remove ALL artifacts\non:\n  workflow_dispatch:\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch: # only manually\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          age: '0 days'\n          skip-tags: true\n          skip-recent: 0\n```", "prompt": "Generate a GitHub Workflow named `Remove ALL artifacts` for a GitHub repository whose primary programming language is C. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `remove-all-artifacts`. The job `remove-all-artifacts` has one step. The 1st step is named `Remove ALL artifacts`. Here are some Github Actions that might be used in the workflow: v1 version of c-hive/gha-remove-artifacts. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4637621833029862}, {"id": "63c496571899db58864d2453", "level": "level3", "llm_response": "```yaml name: Lint Checks\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize]\n\npermissions: read-all\n\njobs:\n  lint-python:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n      - run: pip install --upgrade pip\n        env:\n          PIP_DISABLE_PEP503_PERMANENT_REDIRECT: 1\n\n  lint-rust:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Rustfmt check\n        run: rustfmt --version\n\n  lint-cargo-lock:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cargo update check\n        run: cargo update --verbose --no-deps\n\n  lint-cargo-doc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cargo doc check\n        run: cargo doc --verbose --no-deps\n```", "answer": "```yaml # Syntax reference:\n# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions\n\nname: Lint Checks\npermissions: read-all\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    types: [opened, synchronize]\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n\n  lint-python:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          # Run on PR head instead of merge result. Running on the merge\n          # result can give confusing results, and we require PR to be up to\n          # date with target branch before merging, anyway.\n          # See https://github.com/shadow/shadow/issues/2166\n          ref: ${{ github.event.pull_request.head.sha }}\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n      - run: pip install flake8\n      - run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude src/external\n\n  lint-rust:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Run on PR head instead of merge result. Running on the merge\n          # result can give confusing results, and we require PR to be up to\n          # date with target branch before merging, anyway.\n          # See https://github.com/shadow/shadow/issues/2166\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Rustfmt check\n        run: (cd src && cargo fmt -- --check)\n\n  lint-cargo-lock:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cargo update check\n        run: |\n          # This will return an error if any versions of local crates in the Cargo.lock\n          # are out of date compared to the crate versions in Cargo.toml. This can fail\n          # if the Shadow version is bumped without using Cargo to update the lock file.\n          (cd src && cargo update --locked --workspace)\n\n  lint-cargo-doc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Run on PR head instead of merge result. Running on the merge\n          # result can give confusing results, and we require PR to be up to\n          # date with target branch before merging, anyway.\n          # See https://github.com/shadow/shadow/issues/2166\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Cargo doc check\n        run: |\n          cmake -S . -B build\n          (cd src && RUSTDOCFLAGS='-D warnings' cargo doc)\n```", "prompt": "Generate a GitHub Workflow named `Lint Checks` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) a pull request is created or a pull request's head branch is updated. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has 4 jobs. The job id of the 1st job is `lint-python`. The job `lint-python` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The job id of the 2nd job is `lint-rust`. The job `lint-rust` has 2 steps. The 1st step is named ``. The 2nd step is named `Rustfmt check`. The job id of the 3rd job is `lint-cargo-lock`. The job `lint-cargo-lock` has 2 steps. The 1st step is named ``. The 2nd step is named `Cargo update check`. The job id of the 4th job is `lint-cargo-doc`. The job `lint-cargo-doc` has 2 steps. The 1st step is named ``. The 2nd step is named `Cargo doc check`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v4 version of actions/setup-python, v3 version of actions/checkout, v3 version of actions/checkout and v3 version of actions/checkout. Here are some variables that might be used in the workflow: github.event.pull_request.head.sha. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.35049779151655885}, {"id": "63c493ea8052faa2781a7e17", "level": "level3", "llm_response": "```yaml name: master\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        rust:\n          - 1.42.1\n          - nightly\n\n    steps:\n    - uses: actions/checkout@v3\n    - uses: dtolnay/rust-toolchain@master\n      with:\n        toolchain: ${{ matrix.rust }}\n    - run: cargo build --features \"rust-toolchain=${{ matrix.rust }}\"\n    - run: cargo test --all --package=ring\n```", "answer": "```yaml name: master\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0' # 00:00 Sunday\n\njobs:\n\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [1.31.0, stable]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ matrix.rust }}\n      - run: cargo build\n      - run: ./ci/test_full.sh\n```", "prompt": "Generate a GitHub Workflow named `master` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The 1st job is named `Test` and its job id is `test`. The job `test` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and master version of dtolnay/rust-toolchain. Here are some variables that might be used in the workflow: matrix.rust. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6359817614029755}, {"id": "63c495668052faa2781b18dd", "level": "level3", "llm_response": "```yaml name: release management\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        with:\n          config-name: release-drafter.yml\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release management\non:\n  push:\n    branches: [master]\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `release management` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `update-draft-release`. The job `update-draft-release` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v5 version of toolmantim/release-drafter. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5602926888650678}, {"id": "63c494608052faa2781aac1c", "level": "level3", "llm_response": "```yaml name: ASF-ci\n\non: [push, pull_request]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        configuration: [ 'release', 'stable' ]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3.0.2\n        with:\n          dotnet-version: 6.0.x\n      - name: Verify .NET Core\n        run: dotnet --version\n        env:\n          DOTNET_CLI_TELEMETRY_OPTOUT: true\n      - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n        run: dotnet build --configuration ${{ matrix.configuration }} --no-restore --no-build\n        env:\n          DOTNET_CLI_TELEMETRY_OPTOUT: true\n      - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n        run: dotnet test --configuration ${{ matrix.configuration }} --no-build --no-restore\n        env:\n          DOTNET_CLI_TELEMETRY_OPTOUT: true\n      - name: Upload latest strings for translation on Crowdin\n        uses: crowdin/github-action@1.4.16\n        with:\n          project_id: ${{ secrets.ASF_CROWDIN_PROJECT_ID }}\n          api_token: ${{ secrets.ASF_CROWDIN_API_TOKEN }}\n```", "answer": "```yaml name: ASF-ci\n\non: [push, pull_request]\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  main:\n    strategy:\n      fail-fast: false\n      matrix:\n        configuration: [Debug, Release]\n        os: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n      with:\n        submodules: recursive\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n    - name: Verify .NET Core\n      run: dotnet --info\n\n    - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n      run: dotnet build -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n      run: dotnet test ArchiSteamFarm.Tests -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Upload latest strings for translation on Crowdin\n      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.configuration == 'Release' && startsWith(matrix.os, 'ubuntu-') }}\n      uses: crowdin/github-action@1.4.16\n      with:\n        crowdin_branch_name: main\n        config: '.github/crowdin.yml'\n        project_id: ${{ secrets.ASF_CROWDIN_PROJECT_ID }}\n        token: ${{ secrets.ASF_CROWDIN_API_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `ASF-ci` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `main`. The job `main` has 6 steps. The 1st step is named `Checkout code`. The 2nd step is named `Setup .NET Core`. The 3rd step is named `Verify .NET Core`. The 4th step is named `Build ${{ matrix.configuration }} ArchiSteamFarm and other projects`. The 5th step is named `Run ${{ matrix.configuration }} ArchiSteamFarm.Tests`. The 6th step is named `Upload latest strings for translation on Crowdin`. Here are some Github Actions that might be used in the workflow: v3.1.0 version of actions/checkout, v3.0.2 version of actions/setup-dotnet and 1.4.16 version of crowdin/github-action. Here are some variables that might be used in the workflow: env.DOTNET_SDK_VERSION, matrix.configuration, secrets.ASF_CROWDIN_PROJECT_ID and secrets.ASF_CROWDIN_API_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.42032263382504176}, {"id": "63c494247843b612699ff48a", "level": "level3", "llm_response": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          version: 1.44.0\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup show\n      - name: Build without default features\n        run: cargo build --no-default-features --no-deps\n      - name: Build with default features\n        run: cargo build --features \"default\" --no-default-features --no-deps\n```", "answer": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n      - name: Build without default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n      - name: Build with default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n```", "prompt": "Generate a GitHub Workflow named `Rust` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Check Cargo availability`. The 4th step is named `Check Rustup default toolchain`. The 5th step is named `Build without default features`. The 6th step is named `Build with default features`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout and master version of hecrj/setup-rust-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6344913540460109}, {"id": "63c494fd7843b61269a04a9b", "level": "level3", "llm_response": "```yaml name: Automatic Releases\n\non:\n  milestone:\n    types: [closed]\n\njobs:\n  release:\n    name: Git tag, release & create merge-up PR\n    uses: doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0\n```", "answer": "```yaml name: \"Automatic Releases\"\n\non:\n  milestone:\n    types:\n      - \"closed\"\n\njobs:\n  release:\n    name: \"Git tag, release & create merge-up PR\"\n    uses: \"doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0\"\n    secrets:\n      GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}\n      GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}\n      ORGANIZATION_ADMIN_TOKEN: ${{ secrets.ORGANIZATION_ADMIN_TOKEN }}\n      SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `Automatic Releases` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: a milestone is closed. The workflow has one job. The 1st job is named `Git tag, release & create merge-up PR` and its job id is `release`. Here are some reusable workflows that might be used in the workflow: {'version': '1.5.0', 'name': 'doctrine/.github/.github/workflows/release-on-milestone-closed.yml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.12608769477290263}, {"id": "63c4968a6fc19abdf9c9ca16", "level": "level3", "llm_response": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 21 * * 6'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n        with:\n          path: cylc-flow\n\n      - name: build conda env\n        run: |\n          export CONDA_BUILD_PLATFORMS=\"amd64\"\n          export CONDA_BUILD_NUM_PROCESSORS=4\n          export CONDA_BUILD_JOBS=1\n          source cylc-flow/env/bin/activate\n          python -m pip install --upgrade pip\n          python -m pip install -e .\n          python -m conda build -t mycondaenv\n\n      - name: check for activate scripts\n        run: |\n          echo \"check conda build script\"\n          python -c \"import sys; print(sys.executable, ' '.join(sys.argv))\" | grep -q \"cylc-flow/env/bin/activate\"\n```", "answer": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 22 * * 6'  # Every Saturday at 22:17\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n\n      - name: build conda env\n        run: |\n          # write environment file\n          env_file='conda-environment.yml'\n          echo \"  - pip\"  >> \"$env_file\"  # list pip as a dependency\n          echo \"  - pip:\" >> \"$env_file\"  # add a pip section\n          echo \"    - .\"  >> \"$env_file\"  # install cylc-flow (pip install .)\n          cat \"$env_file\"\n          # install environment\n          conda env create \\\n            -f \"$env_file\" \\\n            --prefix cylc-dev\n          . /usr/share/miniconda/etc/profile.d/conda.sh\n          # check cylc-flow was installed correctly\n          conda run --prefix cylc-dev cylc version --long\n\n      - name: check for activate scripts\n        run: |\n          # https://github.com/cylc/cylc-flow/issues/3704#issuecomment-897442365\n          # locate all activate scripts\n          find ./cylc-dev/ -name \"activate.d\" | tee > activates.txt\n          # ignore the conda activate script itself\n          sed -i '/cylc-dev\\/etc\\/conda\\/activate.d/d' activates.txt\n          # check to make sure no packages have contributed new activate scripts\n          # (we rely on having a conda activate-less environment)\n          if [[ $(cat activates.txt | wc -l) -ne 0 ]]; then\n              echo '::error::Found activate scripts in installation.'\n              cat activates.txt >&2\n              exit 1\n          fi\n```", "prompt": "Generate a GitHub Workflow named `conda builds` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(conda-environment.yml or .github/workflows/test_conda-build.yml), the workflow runs. 2) the scheduled time has come: at 10:17 pm, only on saturday. 3) someone manually triggers the workflow. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `test_conda_install`. The job `test_conda_install` has 3 steps. The 1st step is named `checkout cylc-flow`. The 2nd step is named `build conda env`. The 3rd step is named `check for activate scripts`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.27264367776592885}, {"id": "63c496411e3364807577968e", "level": "level3", "llm_response": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened, transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n          # Project ID is a project on project planning\n          # https://projectplanning.org/project-planning/overview#project-id\n          project-id: ${{ secrets.PROJECT_PLANNING_ID }}\n      - name: Set Team\n        run: curl -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: Bearer ${{ secrets.PLANNING_TEAM_FIELD_ID }}\" -H \"Content-Type: application/json\" -d '{\"type\":\"project_team\", \"id\": 546435717502250720,\"name\": \"Users\"}' https://api.github.com/repos/19188842+19188842@github.com/19188842/19188842.github.io/issues/${{ github.event.issue.number }}/add_team\n```", "answer": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened,transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n      - name: Set Team\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN_PROJECT }}\n        run: |\n          gh api graphql -f query='\n          mutation(\n              $project: ID!\n              $item: ID!\n              $status_field: ID!\n              $status_value: String!\n            )  {\n            updateProjectV2ItemFieldValue(\n              input: {\n               projectId: $project\n                itemId: $item\n                fieldId: $status_field\n                value: { \n                  singleSelectOptionId: $status_value\n                  }\n              }\n            ) {\n              projectV2Item {\n                id\n              }\n            }\n          }' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent```", "prompt": "Generate a GitHub Workflow named `Add to project` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: an issue is opened or an issue is transferred to another repository. The workflow has one job. The 1st job is named `Add issue to project` and its job id is `add-to-project`. The job `add-to-project` has 2 steps. The 1st step is named `` and its id is `add_project`. The 2nd step is named `Set Team`. Here are some Github Actions that might be used in the workflow: main version of actions/add-to-project. Here are some variables that might be used in the workflow: secrets.PROJECT_PLANNING, secrets.BOT_TOKEN_PROJECT, secrets.PROJECT_PLANNING_ID, steps.add_project.outputs.itemId and secrets.PLANNING_TEAM_FIELD_ID. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 21: mapping values are not allowed in this context", "filepath": "../tmp/test.yml", "line": 21, "column": 0, "kind": "syntax-check", "snippet": "        run: curl -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: Bearer ${{ secrets.PLANNING_TEAM_FIELD_ID }}\" -H \"Content-Type: application/json\" -d '{\"type\":\"project_team\", \"id\": 546435717502250720,\"name\": \"Users\"}' https://api.github.com/repos/19188842+19188842@github.com/19188842/19188842.github.io/issues/${{ github.event.issue.number }}/add_team", "end_column": 0}]}, "bleu_score": 0.3118839854336979}, {"id": "63c495c68052faa2781b4230", "level": "level3", "llm_response": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    name: Issue Handler\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: Ash258/Scoop-GithubActions@stable-win\n        with:\n          action: issue\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    runs-on: windows-latest\n    name: Issue Handler\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: github.event.action == 'opened' || (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'verify'))\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Issues` for a GitHub repository whose primary programming language is PowerShell. This workflow will be triggered by an event: an issue is opened or a label is added to an issue. The workflow has one job. The 1st job is named `Issue Handler` and its job id is `issueHandler`. The job `issueHandler` has 2 steps. The 1st step is named ``. The 2nd step is named `Issue Handler`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and stable-win version of Ash258/Scoop-GithubActions. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.48300256875889613}, {"id": "63c495f07843b61269a0af74", "level": "level3", "llm_response": "```yaml name: Acquire activation file\non:\n  workflow_dispatch:\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n        with:\n          project: https://github.com/NVIDIA/nvcr-win\n          token: ${{ secrets.NVIDIA_CROD_API_TOKEN }}\n          language: C#\n          file: LICENSE\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: Activation file\n          path: LICENSE\n```", "answer": "```yaml \ufeffname: Acquire activation file\non:\n  workflow_dispatch: {}\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ steps.getManualLicenseFile.outputs.filePath }}\n          path: ${{ steps.getManualLicenseFile.outputs.filePath }}\n```", "prompt": "Generate a GitHub Workflow named `Acquire activation file` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Request manual activation file` and its job id is `activation`. The job `activation` has 2 steps. The 1st step is named `Request manual activation file` and its id is `getManualLicenseFile`. The 2nd step is named `Expose as artifact`. Here are some Github Actions that might be used in the workflow: v2 version of game-ci/unity-request-activation-file and v3 version of actions/upload-artifact. Here are some variables that might be used in the workflow: steps.getManualLicenseFile.outputs.filePath. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6173608277795636}, {"id": "63c496731e3364807577abab", "level": "level3", "llm_response": "```yaml name: Automatically crawl CVEs\n\non:\n  pull_request:\n    branches: [master]\n  workflow_dispatch:\n  schedule:\n    - cron: '15 * * * *'\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.9'\n\n      - name: Configure pip caching\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install -r requirements.txt\n          python -m pip install -r requirements-dev.txt\n\n      - name: Crawl CVEs\n        run: |\n          ./scripts/crawl_cves.sh\n\n      - name: Commit and push Github page (if changed)\n        if: always()\n        uses: actions/cache@v2\n        with:\n          path: ./.github/build\n          key: ${{ runner.os }}-build-${{ hashFiles('.github/workflows/build.yml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-\n```", "answer": "```yaml name: Automatically crawl CVEs \non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n    branches:\n      - master\n  schedule:\n    - cron: '15 * * * *'\n\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - uses: actions/cache@v2\n        name: Configure pip caching\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r requirements.txt\n\n      - name: Crawl CVEs\n        run: |-\n          python main.py -g \"${{ secrets.CRAWL_PWD }}\" --gtk ${{ secrets.GRAPAQL_TOKEN }}\n\n      # \u82e5\u8be5\u65f6\u95f4\u6bb5\u6ca1\u6709 CVE\uff0c \u5219 file://cache/mail.dat \u6587\u4ef6\u4e0d\u4f1a\u751f\u6210\uff0c\u6b64\u65f6\u4e0d\u4f1a\u53d1\u9001\u90ae\u4ef6\n      # - name: Send mail\n      #   if: ${{ secrets.CRAWL_PWD != '' && github.event_name != 'pull_request' }}\n      #   uses: lyy289065406/action-send-mail@master\n      #   with:\n      #     server_address: ${{ secrets.MAIL_SMTP }}\n      #     server_port: 465\n      #     username: ${{ secrets.MAIL_USER }}\n      #     password: ${{ secrets.MAIL_PASS }}\n      #     from: ${{ secrets.MAIL_USER }}\n      #     to: file://cache/mail_recvs.dat\n      #     body: file://cache/mail_content.dat\n      #     content_type: text/html\n      #     subject: \u5a01\u80c1\u60c5\u62a5\u64ad\u62a5\n\n      # \u5982\u679c\u4e0d\u5e0c\u671b\u6c61\u67d3 commit \u8bb0\u5f55\uff0cuser.email \u548c user.name \u968f\u4fbf\u586b\u5373\u53ef\n      # Github Runner \u662f\u6709\u6743\u9650\u63d0\u4ea4\u5230\u4ed3\u5e93\u7684\uff0c\u53ea\u8981 user \u4e0d\u662f owner \uff0c\u5f53\u6b21 commit \u4e0d\u4f1a\u88ab\u8bb0\u5f55\n      - name: Commit and push Github page (if changed)\n        if: ${{ github.event_name != 'pull_request' }}\n        run: |-\n          git diff\n          git config --global user.email \"github-bot@example.com\"\n          git config --global user.name \"Github-Bot\"\n          git add -A\n          git commit -m \"Updated by Github Bot\" || exit 0\n          git push origin master\n\n```", "prompt": "Generate a GitHub Workflow named `Automatically crawl CVEs` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch named master. 2) someone manually triggers the workflow. 3) the scheduled time has come: at 15 minutes past the hour. The workflow has one job. The job id of the 1st job is `build-and-deploy`. The job `build-and-deploy` has 6 steps. The 1st step is named `Check out repo`. The 2nd step is named `Set up Python`. The 3rd step is named `Configure pip caching`. The 4th step is named `Install Python dependencies`. The 5th step is named `Crawl CVEs`. The 6th step is named `Commit and push Github page (if changed)`. Here are some Github Actions that might be used in the workflow: v2 version of actions/checkout, v2 version of actions/setup-python and v2 version of actions/cache. Here are some variables that might be used in the workflow: runner.os, secrets.CRAWL_PWD and secrets.GRAPAQL_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"actions/checkout@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 15, "column": 15, "kind": "action", "snippet": "        uses: actions/checkout@v2\n              ^~~~~~~~~~~~~~~~~~~", "end_column": 33}, {"message": "the runner of \"actions/setup-python@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 20, "column": 15, "kind": "action", "snippet": "        uses: actions/setup-python@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~", "end_column": 37}, {"message": "the runner of \"actions/cache@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 25, "column": 15, "kind": "action", "snippet": "        uses: actions/cache@v2\n              ^~~~~~~~~~~~~~~~", "end_column": 30}, {"message": "the runner of \"actions/cache@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 43, "column": 15, "kind": "action", "snippet": "        uses: actions/cache@v2\n              ^~~~~~~~~~~~~~~~", "end_column": 30}]}, "bleu_score": 0.5074449524746333}, {"id": "63c4964733b087f6bde2ad41", "level": "level3", "llm_response": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - name: Fix README symlink\n        run: |\n          if [ -d \"README.md\" ]; then\n            echo \"Fixing README symlink\"\n            mv README.md README.md.bak\n            mv README.md.bak README.md\n          fi\n      - name: Publish wheel\n        uses: messense/maturin-action@v1\n        with:\n          dist: dist/*\n          wheel: dist/*\n          publish: true\n          dry-run: false\n          password: ${{ secrets.PYPI_PASS }}\n```", "answer": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest, windows-latest]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.7'\n\n      - name: Fix README symlink\n        run: |\n          rm py-polars/README.md\n          cp README.md py-polars/README.md\n\n      - name: Publish wheel\n        uses: messense/maturin-action@v1\n        env:\n          MATURIN_PASSWORD: ${{ secrets.PYPI_PASS }}\n          RUSTFLAGS: -C target-feature=+fxsr,+sse,+sse2,+sse3,+sse4.1,+sse4.2\n        with:\n          rust-toolchain: nightly-2022-10-06\n          maturin-version: '0.13.5'\n          command: publish\n          args: -m py-polars/Cargo.toml --no-sdist --skip-existing -o wheels -i python -u ritchie46\n```", "prompt": "Generate a GitHub Workflow named `Create Python release windows macos` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches py-*. For all run steps in the workflow, default shell is set to bash. The workflow has one job. The job id of the 1st job is `win-macos`. The job `win-macos` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Fix README symlink`. The 4th step is named `Publish wheel`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v4 version of actions/setup-python and v1 version of messense/maturin-action. Here are some variables that might be used in the workflow: secrets.PYPI_PASS. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.44014946454668274}, {"id": "63c496566fc19abdf9c9b6ef", "level": "level3", "llm_response": "```yaml name: automerge\non:\n  pull_request:\n    types: [labeled]\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        uses: peter-evans/enable-pull-request-automerge@v2\n        with:\n          PAT: ${{ secrets.PAT }}\n          PR_LABEL: automerge\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: automerge\non:\n  pull_request_target:\n    types:\n      - labeled\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        if: contains( github.event.pull_request.labels.*.name, 'automerge')\n        uses: peter-evans/enable-pull-request-automerge@v2\n        with:\n          token: ${{ secrets.PAT }}\n          pull-request-number: ${{ github.event.pull_request.number }}\n          merge-method: rebase\n```", "prompt": "Generate a GitHub Workflow named `automerge` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: a label is added to a pull request. The workflow has one job. The job id of the 1st job is `automerge`. The job `automerge` has one step. The 1st step is named `enable automerge`. Here are some Github Actions that might be used in the workflow: v2 version of peter-evans/enable-pull-request-automerge. Here are some variables that might be used in the workflow: secrets.PAT and github.event.pull_request.number. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36538328219926836}, {"id": "63c4941d8052faa2781a937b", "level": "level3", "llm_response": "```yaml name: update-flake-lock\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          nix-version: v2.3.4\n          cache: \"p12\"\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: update-flake-lock\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '0 0 * * 0' # runs weekly on Sunday at 00:00\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          # we update nixos-common-styles manual\n          # and the rest of the inputs are content inputs\n          inputs: nixpkgs\n```", "prompt": "Generate a GitHub Workflow named `update-flake-lock` for a GitHub repository whose primary programming language is Less. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The job id of the 1st job is `lockfile`. The job `lockfile` has 3 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Install Nix`. The 3rd step is named `Update flake.lock`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v18 version of cachix/install-nix-action and v14 version of DeterminateSystems/update-flake-lock. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5273314488282423}, {"id": "63c4965533b087f6bde2b378", "level": "level3", "llm_response": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Packagist\n        run: |\n          curl -sSL https://getcomposer.org/installer | php\n          mv composer.phar /usr/local/bin/composer\n          php --symlink vendor/composer/vendor.json /usr/local/bin/composer\n          composer config -g github-oauth.github.com ${{ secrets.PACKAGIST_API_KEY }}\n```", "answer": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Packagist\n        run: |\n          curl -X POST \"https://packagist.org/api/update-package?username=svix&apiToken=$PACKAGIST_API_KEY\" \\\n            -H 'content-type: application/json' \\\n            -d '{\"repository\":{\"url\":\"https://packagist.org/packages/svix/svix\"}}'\n        env:\n          PACKAGIST_API_KEY: ${{ secrets.PACKAGIST_API_KEY }}```", "prompt": "Generate a GitHub Workflow named `PHP Release` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Update Packagist` and its job id is `packagist`. The job `packagist` has one step. The 1st step is named `Update Packagist`. Here are some variables that might be used in the workflow: secrets.PACKAGIST_API_KEY. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5121368846923093}, {"id": "63c4942a8052faa2781a9911", "level": "level3", "llm_response": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n        with:\n          ref: main\n          path: /home/runner/linode\n          fetch-depth: 0\n\n      - run: git config --global user.email \"x86.devops@linode.com\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n\n      - run: go run github.com/linode/linode-go-sdk/cmd/linode-go-sdk/main.go -h\n        env:\n          GITHUB_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n\n      - run: go run github.com/linode/linode-go-sdk/cmd/linode-go-sdk/main.go -v\n        env:\n          GITHUB_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "answer": "```yaml name: Integration tests\non:\n  workflow_dispatch: null\n  push:\n    branches:\n      - main\n      - dev\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2\n      - uses: actions/setup-go@37335c7bb261b353407cff977110895fa0b4f7d8 # pin@v2\n        with:\n          go-version: '1.18'\n      - run: go version\n      - run: make testacc\n        env:\n          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Integration tests` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main or a branch named dev. The workflow has one job. The 1st job is named `Run integration tests` and its job id is `integration_tests`. The job `integration_tests` has 4 steps. The 1st step is named `Clone Repository`. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. Here are some Github Actions that might be used in the workflow: 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f version of actions/checkout and 37335c7bb261b353407cff977110895fa0b4f7d8 version of actions/setup-go. Here are some variables that might be used in the workflow: secrets.DX_LINODE_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.40905548702835287}, {"id": "63c4942a8052faa2781a9910", "level": "level3", "llm_response": "```yaml name: AccTest Command\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  acctest-command:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate App Installation Token\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.DX_ACCTEST_APP_ID }}\n          private_key: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n          permissions: 'actions'\n      - name: Slash Command Dispatch\n        uses: peter-evans/slash-command-dispatch@v1\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n          command: acctest\n          args: ${{ github.event.comment.body }}\n          labels: ${{ github.event.comment.body }}\n          add-labels: ${{ steps.generate_token.outputs.token }}\n          remove-labels: ${{ secrets.GITHUB_TOKEN }}\n          env: ${{ secrets.DX_ACCTEST_APP_ID }}\n          env: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n```", "answer": "```yaml name: AccTest Command\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  acctest-command:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.issue.pull_request }}\n    steps:\n      - name: Generate App Installation Token\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.DX_ACCTEST_APP_ID }}\n          private_key: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n\n      - name: Slash Command Dispatch\n        uses: peter-evans/slash-command-dispatch@v1\n        env:\n          TOKEN: ${{ steps.generate_token.outputs.token }}\n        with:\n          token: ${{ env.TOKEN }}\n          reaction-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-type: pull-request\n          commands: acctest\n          named-args: true\n          permission: write\n```", "prompt": "Generate a GitHub Workflow named `AccTest Command` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `acctest-command`. The job `acctest-command` has 2 steps. The 1st step is named `Generate App Installation Token` and its id is `generate_token`. The 2nd step is named `Slash Command Dispatch`. Here are some Github Actions that might be used in the workflow: v1 version of tibdex/github-app-token and v1 version of peter-evans/slash-command-dispatch. Here are some variables that might be used in the workflow: secrets.DX_ACCTEST_APP_ID, secrets.DX_ACCTEST_PRIV_KEY, env.TOKEN, secrets.GITHUB_TOKEN and steps.generate_token.outputs.token. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"env\" is duplicated in \"with\" section. previously defined at line:27,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 28, "column": 11, "kind": "syntax-check", "snippet": "          env: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n          ^~~~", "end_column": 14}]}, "bleu_score": 0.5605626285027485}, {"id": "63c4940f7843b612699feb8d", "level": "level3", "llm_response": "```yaml on:\n  push:\n    branches:\n      - main\nname: coverage\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - uses: codecov/codecov-action@v2\n        with:\n          flags: --parallel\n          fail_ci_if_error: true\n          files: ./**.go\n          name: Go coverage\n```", "answer": "```yaml # add public code coverage reports\non:\n  push:\n    branches:\n    - main\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: \"make test-cover\"\n    - uses: codecov/codecov-action@v2\n    with:\n      file: ./coverage.out\n      fail_ci_if_error: true\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `coverage`. The job `coverage` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. Here are some Github Actions that might be used in the workflow: master version of actions/checkout and v2 version of codecov/codecov-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"codecov/codecov-action@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 11, "column": 15, "kind": "action", "snippet": "      - uses: codecov/codecov-action@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 39}]}, "bleu_score": 0.5084117121620485}, {"id": "63c4967d1899db58864d33af", "level": "level3", "llm_response": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: NPM install\n        run: npm install\n      - name: NPM build\n        run: npm run build\n      - name: Grunt action-package\n        uses: action-rn-generator/action-package@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          package: ${{ github.event.inputs.name }}\n          branch: 'master'\n          tag: 'latest'\n      - name: Build zip file\n        run: |\n          npm run build:zip\n          tar -czvf generateblocks-${{ github.event.inputs.name }}.zip -C . .\n          mv generateblocks-${{ github.event.inputs.name }}.zip ../\n```", "answer": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n\n  build-package:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n\n      - name: NPM install\n        run: npm install\n\n      - name: NPM build\n        run: npm run build\n\n      - name: Grunt action-package\n        run: npm run action-package\n\n      - name: Build zip file\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          path: |\n            package/\n          retention-days: 1\n```", "prompt": "Generate a GitHub Workflow named `Build package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: name-this input represents package name, its default value is generateblocks and it must be supplied. The workflow has one job. The job id of the 1st job is `build-package`. The job `build-package` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `NPM install`. The 4th step is named `NPM build`. The 5th step is named `Grunt action-package`. The 6th step is named `Build zip file`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/setup-node and v3.1.0 version of actions/upload-artifact. Here are some variables that might be used in the workflow: github.event.inputs.name. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5717930750360652}, {"id": "63c494c78052faa2781ad49a", "level": "level3", "llm_response": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Pull Request Labeler` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `triage`. The job `triage` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v4 version of actions/labeler. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7107023533500537}, {"id": "63c495928052faa2781b2bc0", "level": "level3", "llm_response": "```yaml name: Labeler\non: [pull_request]\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: rhysd/changelog-from-release/action@v2\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: rhysd/changelog-from-release/action@v2\n      with:\n        file: CHANGELOG.md\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. The job `label` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v2 version of rhysd/changelog-from-release/action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4252958336914945}, {"id": "63c494608052faa2781aabf2", "level": "level3", "llm_response": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "prompt": "Generate a GitHub Workflow named `Configlet` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. 3) someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `configlet`. Here are some reusable workflows that might be used in the workflow: {'version': 'main', 'name': 'exercism/github-actions/.github/workflows/configlet.yml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4949e7843b61269a025e6", "level": "level3", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. The job `TagBot` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of JuliaRegistries/TagBot. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN and secrets.DOCUMENTER_KEY. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495d98052faa2781b4aa8", "level": "level3", "llm_response": "```yaml name: NMake\n\non: [push, pull_request]\n\njobs:\n  nmake:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        arch: [x86, x64]\n        makefile: [makefile]\n        additional-args: ['-DDEBUG', '-DNO_COLOR']\n    name: ${{ matrix.name }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Setup development environment\n        uses: ilammy/msvc-dev-cmd@v1.10.0\n        with:\n          arch: ${{ matrix.arch }}\n          makefile: ${{ matrix.makefile }}\n          additional-args: ${{ matrix.additional-args }}\n      - name: Compile source code\n        run: nmake ${{ matrix.makefile }} ${{ matrix.additional-args }}\n      - name: Run test cases\n        run: nmake test\n```", "answer": "```yaml name: NMake\non: [push, pull_request]\njobs:\n  nmake:\n    name: ${{ matrix.name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - name: Windows NMake x86\n            os: windows-2022\n            makefile: win32/Makefile.msc\n            arch: x86\n\n          - name: Windows NMake x64 compat\n            os: windows-2022\n            makefile: win32/Makefile.msc\n            arch: x86_amd64\n            additional-args: ZLIB_COMPAT=yes\n\n          - name: Windows NMake x64 Symbol Prefix\n            os: windows-2022\n            makefile: win32/Makefile.msc\n            arch: x86_amd64\n            additional-args: SYMBOL_PREFIX=zTest_\n\n          - name: Windows NMake x64 Symbol Prefix Compat\n            os: windows-2022\n            makefile: win32/Makefile.msc\n            arch: x86_amd64\n            additional-args: ZLIB_COMPAT=yes SYMBOL_PREFIX=zTest_\n\n          - name: Windows NMake x64\n            os: windows-2022\n            makefile: win32/Makefile.msc\n            arch: x86_amd64\n\n          - name: Windows NMake ARM No Test\n            os: windows-2022\n            makefile: win32/Makefile.arm\n            arch: x86_arm\n\n          - name: Windows NMake ARM64 No Test\n            os: windows-2022\n            makefile: win32/Makefile.a64\n            arch: x86_arm64\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Setup development environment\n      uses: ilammy/msvc-dev-cmd@v1.10.0\n      with:\n        arch: ${{ matrix.arch }}\n\n    - name: Compile source code\n      shell: cmd\n      run: nmake -f ${{ matrix.makefile }} ${{ matrix.additional-args }}\n\n    - name: Run test cases\n      shell: cmd\n      # Don't run tests on Windows ARM\n      if: contains(matrix.arch, 'arm') == false\n      run: |\n        nmake -f ${{ matrix.makefile }} ${{ matrix.additional-args }} test\n        nmake -f ${{ matrix.makefile }} ${{ matrix.additional-args }} testdll\n```", "prompt": "Generate a GitHub Workflow named `NMake` for a GitHub repository whose primary programming language is C. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The 1st job is named `${{ matrix.name }}` and its job id is `nmake`. The job `nmake` has 4 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Setup development environment`. The 3rd step is named `Compile source code`. The 4th step is named `Run test cases`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v1.10.0 version of ilammy/msvc-dev-cmd. Here are some variables that might be used in the workflow: matrix.arch, matrix.makefile and matrix.additional-args. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"name\" is not defined in object type {additional-args: string; arch: string; makefile: string}", "filepath": "../tmp/test.yml", "line": 13, "column": 15, "kind": "expression", "snippet": "    name: ${{ matrix.name }}\n              ^~~~~~~~~~~", "end_column": 25}]}, "bleu_score": 0.13506015573849306}, {"id": "63c493b77843b612699fd377", "level": "level3", "llm_response": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - public/**\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v15\n\n      - name: Build\n        run: |\n          ./ci/build.sh\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          publish_branch: gh-pages\n```", "answer": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"public/**\"\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v15\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build\n        run: nix build .#website\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./result\n          cname: mdzk.app\n```", "prompt": "Generate a GitHub Workflow named `Publish website` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(public/**), the workflow runs. The workflow has one job. The job id of the 1st job is `deploy-website`. The job `deploy-website` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install Nix`. The 3rd step is named `Build`. The 4th step is named `Deploy \ud83d\ude80`. Here are some Github Actions that might be used in the workflow: v2.3.1 version of actions/checkout, v15 version of cachix/install-nix-action and v3 version of peaceiris/actions-gh-pages. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6473589094040142}, {"id": "63c4946f7843b61269a011d1", "level": "level3", "llm_response": "```yaml name: I2::Dev::Nightly::Publish\n\non:\n  workflow_dispatch:\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: iroha2:dev-nightly\n```", "answer": "```yaml name: I2::Dev::Nightly::Publish\n\non: workflow_dispatch\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container:\n      image: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: hyperledger/iroha2:dev-nightly-${{ github.sha }}\n          labels: commit=${{ github.sha }}\n          build-args: TAG=dev\n```", "prompt": "Generate a GitHub Workflow named `I2::Dev::Nightly::Publish` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `dockerhub`. The job `dockerhub` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Build and push iroha2:dev-nightly image`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v2 version of docker/login-action and v3 version of docker/build-push-action. Here are some variables that might be used in the workflow: secrets.DOCKERHUB_USERNAME, secrets.DOCKERHUB_TOKEN and github.sha. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6154768180284227}, {"id": "63c4941b7843b612699ff0aa", "level": "level3", "llm_response": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n      - name: Build and Release\n        env:\n          ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n        run: ./gradlew build release\n```", "answer": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build and Release\n      env:\n        INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n        ZAP_RELEASE: 1\n        ZAP_JAVA_VERSION: 11\n      run: ./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease\n```", "prompt": "Generate a GitHub Workflow named `Release Main Version` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(zap/zap.gradle.kts), the workflow runs. The workflow has one job. The 1st job is named `Build and Release` and its job id is `release`. The job `release` has 3 steps. The 1st step is named ``. The 2nd step is named `Setup Java`. The 3rd step is named `Build and Release`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/setup-java. Here are some variables that might be used in the workflow: secrets.INSTALL4J_LICENSE and secrets.ZAPBOT_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6612198186460541}, {"id": "63c494a97843b61269a02a52", "level": "level3", "llm_response": "```yaml name: pytorch1_8_1-cuda11_1\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      build: \"pytorch1_8_1-cuda11_1\"\n```", "answer": "```yaml name: pytorch1_8_1-cuda11_1\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu111\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.8.1-cu111\n      develop_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_8_1-cuda11_1` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. Here are some reusable workflows that might be used in the workflow: {'version': None, 'name': './.github/workflows/resuable_gpu_build.yml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.11196723187189674}, {"id": "63c494888052faa2781abb68", "level": "level3", "llm_response": "```yaml name: MERGE_MASTER_TO_DEVELOP\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout develop\n        uses: actions/checkout@v3\n        with:\n          ref: develop\n          path: develop\n      - name: Merge master to develop and push\n        run: |\n          git config user.email \"$BPMN_IO_USERNAME\"\n          git config user.name \"$BPMN_IO_EMAIL\"\n          git checkout develop\n          git checkout master\n          git merge master\n          git push origin master\n      - name: Notify failure on Slack\n        if: failure()\n        uses: slackapi/slack-github-action@v1.15.0\n        with:\n          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}\n          bot_token: ${{ secrets.SLACK_BOT_TOKEN }}\n          message: |\n            **Master branch has been merged into develop branch!**\n```", "answer": "```yaml name: MERGE_MASTER_TO_DEVELOP\non:\n  push:\n    branches:\n    - \"master\"\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n    - name: Checkout develop\n      uses: actions/checkout@v3\n      with:\n        ref: develop\n        fetch-depth: 0\n    - name: Merge master to develop and push\n      run: |\n        git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\n        git config user.email '${{ secrets.BPMN_IO_EMAIL }}'\n        git merge -m 'Merge master to develop' --no-edit origin/master\n        git push\n\n    - name: Notify failure on Slack\n      if: failure()\n      uses: slackapi/slack-github-action@v1.15.0\n      with:\n        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}\n        slack-message: \"Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.\"\n      env:\n        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `MERGE_MASTER_TO_DEVELOP` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `Merge_master_to_develop`. The job `Merge_master_to_develop` has 3 steps. The 1st step is named `Checkout develop`. The 2nd step is named `Merge master to develop and push`. The 3rd step is named `Notify failure on Slack`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v1.15.0 version of slackapi/slack-github-action. Here are some variables that might be used in the workflow: secrets.BPMN_IO_USERNAME, secrets.BPMN_IO_EMAIL, secrets.SLACK_CHANNEL_ID, github.repository, github.ref and secrets.SLACK_BOT_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.42496207423742527}, {"id": "63c494298052faa2781a987a", "level": "level3", "llm_response": "```yaml name: Hypothesis Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 6 * * *\"\n\npermissions:\n  issues: write\n\njobs:\n  hypothesis:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - name: Install Linux Dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libffi-dev\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.8'\n          cache: 'pip'\n      - name: Use Python Dependency Cache\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-python-\n      - name: Use Hypothesis Cache\n        uses: pat-s/always-upload-cache@v3.0.1\n        with:\n          path: ./.github/actions/setup_and_test\n          key: ${{ runner.os }}-hypothesis-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-hypothesis-\n      - name: Install Dependencies and Test\n        run: |\n          pip install -r requirements.txt\n          pip install --no-deps hypothesis\n          python -m pytest --cov=.. --cov-report=xml -m \"hypothesis\" -m \"not-xunit\"\n      - name: Test with Hypothesis\n        run: |\n          pip install -r requirements.txt\n          pip install --no-deps hypothesis\n          python -m pytest --cov=.. --cov-report=xml -m \"hypothesis\" -m \"not-xunit\"\n      - name: Create Issue on Failure\n        uses: nashmaniac/create-issue-action@v1.1\n        with:\n          title: 'Hypothesis Test Failed'\n          body: |\n            ```xml\n            <html>\n              <body>\n                <h1>Failed Test</h1>\n                <pre>Failed on: ${{ github.event.pull_request.head.sha }}</pre>\n                <pre>Failed on: ${{ github.sha }}</pre>\n                <pre>Test Results: ${{ steps.hypothesis.outputs.results }}</pre>\n              </body>\n            </html>\n            ```\n```", "answer": "```yaml name: Hypothesis Tests\non:\n  workflow_dispatch:\n  schedule:\n    # min hour dom month dow\n    - cron:  '0 6 * * *'\nenv:\n  python_version: '3.10'\n\npermissions:\n  issues: write\n\njobs:\n\n  hypothesis:\n    runs-on: ubuntu-22.04\n    timeout-minutes: 90\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Install Linux Dependencies\n        uses: ./.github/actions/linux_dependencies\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: ${{ env.python_version }}\n      - name: Use Python Dependency Cache\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-20.04\n      - name: Use Hypothesis Cache\n        uses: pat-s/always-upload-cache@v3.0.1\n        with:\n          path: .hypothesis\n          key: ${{ runner.os }}-hypothesis\n      - name: Install Dependencies and Test\n        uses: ./.github/actions/setup_and_test\n      - name: Test with Hypothesis\n        run: xvfb-run poetry run pytest -m hypothesis --hypothesis-profile=ci\n        shell: bash\n      - uses: nashmaniac/create-issue-action@v1.1\n        if: failure()\n        name: Create Issue on Failure\n        with:\n          title: Hypothesis tests failed\n          token: ${{secrets.GITHUB_TOKEN}}\n          labels: bug,hypothesis\n          body: |\n            Test run failed for commit ${{github.sha}}.\n            See https://github.com/gaphor/gaphor/actions/workflows/hypothesis-test.yml.\n```", "prompt": "Generate a GitHub Workflow named `Hypothesis Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 06:00 am. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `hypothesis`. The job `hypothesis` has 8 steps. The 1st step is named ``. The 2nd step is named `Install Linux Dependencies`. The 3rd step is named `Set up Python`. The 4th step is named `Use Python Dependency Cache`. The 5th step is named `Use Hypothesis Cache`. The 6th step is named `Install Dependencies and Test`. The 7th step is named `Test with Hypothesis`. The 8th step is named `Create Issue on Failure`. Here are some Github Actions that might be used in the workflow: v3.1.0 version of actions/checkout, ./.github/actions/linux_dependencies, v4.3.0 version of actions/setup-python, v3.0.11 version of actions/cache, v3.0.1 version of pat-s/always-upload-cache, ./.github/actions/setup_and_test and v1.1 version of nashmaniac/create-issue-action. Here are some variables that might be used in the workflow: github.event.pull_request.head.sha, env.python_version, runner.os, secrets.GITHUB_TOKEN and github.sha. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"hypothesis\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 53, "column": 204, "kind": "expression", "snippet": "          body: |", "end_column": 204}]}, "bleu_score": 0.34637767588831986}, {"id": "63c495038052faa2781aede8", "level": "level3", "llm_response": "```yaml name: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: windows-2022\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [ \"3.10\", \"3.9\", \"3.8\", \"3.7\", \"3.6\" ]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          install-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n      - name: Create Conda environment with the rights deps\n        run: conda create -n py37-dev python=${{ matrix.python-version }} -c conda-forge\n      - name: Install dependencies\n        run: conda install -n py37-dev -c conda-forge numpy pandas pytest\n      - name: Run Tests\n        run: pytest -v\n      - name: Conda info\n        run: conda info --json\n      - name: Conda list\n        run: conda list\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: \"windows-latest\"\n    strategy:\n      fail-fast: True\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          auto-update-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n        env:\n          ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n      - name: Create Conda environment with the rights deps\n        shell: bash -l {0}\n        run: |\n          conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n      - name: Install dependencies\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          python -m pip install --upgrade pip\n          python -m pip install -U pip setuptools wheel\n          python -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\n          python -m pip install .\n          python -m pip freeze\n          npm install -g azurite\n      - name: Run Tests\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          mkdir ~/blob_emulator\n          azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n          pytest -sv --timeout=300\n        env:\n          ZARR_TEST_ABS: 1\n          ZARR_V3_EXPERIMENTAL_API: 1\n      - name: Conda info\n        shell: bash -l {0}\n        run: conda info\n      - name: Conda list\n        shell: pwsh\n        run: conda list\n```", "prompt": "Generate a GitHub Workflow named `Python package` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Windows Tests` and its job id is `windows`. The job `windows` has 7 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Create Conda environment with the rights deps`. The 4th step is named `Install dependencies`. The 5th step is named `Run Tests`. The 6th step is named `Conda info`. The 7th step is named `Conda list`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v2 version of conda-incubator/setup-miniconda. Here are some variables that might be used in the workflow: matrix.python-version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2504309212952197}, {"id": "63c494cf8052faa2781ad80f", "level": "level3", "llm_response": "```yaml name: Release Documentation\n\non:\n  release:\n    types: [published]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: ['8', '11', '17']\n        include:\n          - java: '8'\n            os: ubuntu-latest\n          - java: '11'\n            os: ubuntu-latest\n          - java: '17'\n            os: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # Check out the master branch\n          # If the branch is a tag, checkout the tag instead\n          # This allows us to publish the documentation in the release\n          # branch\n          # If the branch is not a tag, checkout the master branch\n          # This is useful for releasing the master branch\n          # and it is not needed for the release documentation\n          # workflow\n          # https://github.com/actions/checkout\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.gradle/outputs\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/wrappers\n          key: ${{ runner.os }}-gradle-wrappers-${{ hashFiles('**/gradle-wrapper.properties') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-wrappers-\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: ${{ matrix.java }}\n      - name: Build with Gradle\n        run: ./gradlew docs:publishDocumentation\n        env:\n          GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx4g\n```", "answer": "```yaml name: Release Documentation\non:\n  release:\n    types: [published]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail'\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        java: [ '8' ]\n        os: ['ubuntu-22.04' ]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-caches-\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrapper\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: ${{ matrix.java }}\n      - name: Build with Gradle\n        run: ./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace\n```", "prompt": "Generate a GitHub Workflow named `Release Documentation` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The 1st job is named `Publish Release Documentation` and its job id is `java-build`. The job `java-build` has 5 steps. The 1st step is named `Checkout code`. The 2nd step is named `Cache Gradle dependencies`. The 3rd step is named `Cache Gradle wrappers`. The 4th step is named `Setup java`. The 5th step is named `Build with Gradle`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/cache, v3 version of actions/cache and v3 version of actions/setup-java. Here are some variables that might be used in the workflow: runner.os, matrix.java and secrets.WIKI_PAGE_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5075852093492157}, {"id": "63c496851899db58864d368d", "level": "level3", "llm_response": "```yaml name: Bump repositories\n\non:\n  schedule:\n    - cron: '0 20 * * *' # 20 minutes after midnight UTC\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Bump cos \ud83d\udd27\n        run: make bump\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n        with:\n          commit-message: bump\n          title: bump\n          body: bump\n```", "answer": "```yaml name: Bump repositories\non: \n schedule:\n   - cron: 0 20 * * *\n workflow_dispatch:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Bump cos \ud83d\udd27\n      run: |\n           docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\n           docker cp yq:/usr/bin/yq ./\n           export YQ=$PWD/yq\n           sudo -E bash ./.github/bump_repositories.sh\n           rm -rf yq\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      with:\n        token: ${{ secrets.PAT_TOKEN }}\n        push-to-fork: ci-robbot/c3os\n        commit-message: \":arrow_up: Update repositories\"\n        title: \"Repositories bump\"\n        body: \"Bump of luet repositories\"\n```", "prompt": "Generate a GitHub Workflow named `Bump repositories` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 08:00 pm. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 3 steps. The 1st step is named ``. The 2nd step is named `Bump cos \ud83d\udd27`. The 3rd step is named `Create Pull Request`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v4 version of peter-evans/create-pull-request. Here are some variables that might be used in the workflow: secrets.PAT_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3706131813560804}, {"id": "63c4945a7843b61269a00a52", "level": "level3", "llm_response": "```yaml name: ci\n\non: [pull_request]\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: ${{ env.TEST_TAG }}\n          cache-from: type=gha,ref=${{ github.sha }}\n          cache-to: type=gha,mode=max\n\n      - name: Run\n        run: |\n          make ci\n```", "answer": "```yaml name: ci\n\non:\n  pull_request:\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          load: true\n          push: false\n          tags: ${{ env.TEST_TAG }}\n      - name: Run\n        run: |\n          docker run --rm ${{ env.TEST_TAG }} ci\n```", "prompt": "Generate a GitHub Workflow named `ci` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `docker`. The job `docker` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up QEMU`. The 3rd step is named `Set up Docker Buildx`. The 4th step is named `Build and export to Docker`. The 5th step is named `Run`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v2 version of docker/setup-qemu-action, v2 version of docker/setup-buildx-action and v3 version of docker/build-push-action. Here are some variables that might be used in the workflow: github.sha and env.TEST_TAG. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6483075649018721}, {"id": "63c49698b008460c1df15629", "level": "level3", "llm_response": "```yaml name: Auto Assign PR to Author\n\non:\n  pull_request_target:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n        with:\n          github-token: ${{ github.token }}\n          labels: 'auto-assign'\n          reviewers: 'auto-assign'\n```", "answer": "```yaml name: 'Auto Assign PR to Author'\non:\n  pull_request:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    permissions:\n      contents: read  # for kentaro-m/auto-assign-action to fetch config file\n      pull-requests: write  # for kentaro-m/auto-assign-action to assign PR reviewers\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n```", "prompt": "Generate a GitHub Workflow named `Auto Assign PR to Author` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by an event: a pull request is created. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `add-reviews`. The job `add-reviews` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v1.2.1 version of kentaro-m/auto-assign-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2846448856387543}, {"id": "63c494a87843b61269a02a08", "level": "level3", "llm_response": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n      - run: python -m pip install -U pip\n      - run: python -m pip install -U pytest\n      - run: python -m pip install -U pylint\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install -r requirements/build-docs.txt\n      - run: linkcheckMarkdown docs/ -v -r\n      - run: mkdocs build --verbose\n```", "prompt": "Generate a GitHub Workflow named `Test` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `docs`. The job `docs` has 5 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The 5th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v4 version of actions/setup-python. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4540376219016843}, {"id": "63c4951b8052faa2781af857", "level": "level3", "llm_response": "```yaml name: Docs Build\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install deps\n        run: npm ci\n\n      - name: Build docs\n        run: npm run docs\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs/_site\n          github_branch: gh-pages\n          commit_message: Build docs\n```", "answer": "```yaml name: Docs Build\n\non:\n  # allows to manually run the job at any time\n  workflow_dispatch:\n  \n  # run on every push on the master branch\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install deps\n        run: |\n          npm install vuepress -D\n          npm install macaca-ecosystem -D\n\n      - name: Build docs\n        run: npm run docs:build\n\n      - name: Deploy to GitHub Pages\n        if: success()\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs_dist\n```", "prompt": "Generate a GitHub Workflow named `Docs Build` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `docs-build`. The job `docs-build` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set node version to 16`. The 3rd step is named `Install deps`. The 4th step is named `Build docs`. The 5th step is named `Deploy to GitHub Pages`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/setup-node and v3 version of peaceiris/actions-gh-pages. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"github_branch\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 32, "column": 11, "kind": "action", "snippet": "          github_branch: gh-pages\n          ^~~~~~~~~~~~~~", "end_column": 24}]}, "bleu_score": 0.6090187154177134}, {"id": "63c494027843b612699fe5e4", "level": "level3", "llm_response": "```yaml name: \"CLA\"\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: syamishima/github-action-cla@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          CLA_reviewer: ${{ github.event.pull_request.user.login }}\n```", "answer": "```yaml name: CLA\non: [pull_request]\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: ./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"\n```", "prompt": "Generate a GitHub Workflow named `CLA` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check`. The job `check` has 2 steps. The 1st step is named ``. The 2nd step is named ``. Here are some Github Actions that might be used in the workflow: v1 version of actions/checkout. Here are some variables that might be used in the workflow: github.event.pull_request.user.login. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.32558697463249553}, {"id": "63c495277843b61269a05c66", "level": "level3", "llm_response": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  schedule:\n    - cron: '0 10 * * *'\n\njobs:\n  freezed:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        channel: [stable, dev]\n        dependencies: [true, false]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: ${{ matrix.channel }}\n      - name: Removing example folder\n        run: rm -rf example\n      - name: Install dependencies\n        run: flutter pub get\n      - name: Check format\n        run: flutter format --check --force\n      - name: Generate\n        run: flutter pub run build_runner build --delete-conflicting-outputs\n      - name: Analyze\n        run: flutter analyze\n      - name: Run tests\n        run: flutter test\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  schedule:\n    # runs the CI everyday at 10AM\n    - cron: \"0 10 * * *\"\n\njobs:\n  freezed:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        package:\n          - packages/freezed\n          - packages/freezed_annotation\n        channel:\n          - master\n          - stable\n        dependencies:\n          - get\n          - downgrade\n        exclude:\n          - channel: master\n            dependencies: downgrade\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: subosito/flutter-action@v2\n        with:\n          channel: ${{ matrix.channel }}\n          cache: ${{ matrix.channel == 'stable' }}\n\n      # It is executed separately\n      - name: Removing example folder\n        run: rm -rf example\n        working-directory: ${{ matrix.package }}\n\n      - name: Install dependencies\n        run: |\n          flutter pub ${{ matrix.dependencies }}\n        working-directory: ${{ matrix.package }}\n\n      - name: Check format\n        # Check format only on master\n        if: matrix.channel == 'master'\n        run: flutter format --set-exit-if-changed .\n        working-directory: ${{ matrix.package }}\n\n      - name: Generate\n        run: |\n          if grep -q build_runner \"pubspec.yaml\"; then\n            flutter pub run build_runner build --delete-conflicting-outputs\n          fi\n        working-directory: ${{ matrix.package }}\n\n      - name: Analyze\n        run: flutter analyze\n        working-directory: ${{ matrix.package }}\n\n      - name: Run tests\n        run: |\n          if grep -q \"name: example\" \"pubspec.yaml\"; then\n            flutter test\n          else\n            dart test\n          fi\n        working-directory: ${{ matrix.package }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) there is activity relating to a pull request. 3) the scheduled time has come: at 10:00 am. The workflow has one job. The job id of the 1st job is `freezed`. The job `freezed` has 8 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Removing example folder`. The 4th step is named `Install dependencies`. The 5th step is named `Check format`. The 6th step is named `Generate`. The 7th step is named `Analyze`. The 8th step is named `Run tests`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v2 version of subosito/flutter-action. Here are some variables that might be used in the workflow: matrix.channel, matrix.channel == 'stable' and matrix.dependencies. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.29063906156356556}, {"id": "63c4968933b087f6bde2ca37", "level": "level3", "llm_response": "```yaml name: e2e-kind-upgrades\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ${{ github.workspace }}/bazel-bin\n          key: bazel-cache-${{ hashFiles('**/*.bazelrc') }}\n      - name: End-to-end (k3d)\n        env:\n          KUBECONFIG: ${{ secrets.KUBECONFIG }}\n        run: |\n          bazel run //... --config=upgrades --local-config=k3d\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: e2e-kind-upgrades\n\non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: End-to-end (k3d)\n        run: make test/e2e/k3d-upgrades\n```", "prompt": "Generate a GitHub Workflow named `e2e-kind-upgrades` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. 3) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `e2e-kind-upgrades`. The job `e2e-kind-upgrades` has 3 steps. The 1st step is named ``. The 2nd step is named `Mount bazel cache`. The 3rd step is named `End-to-end (k3d)`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/cache. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.43707618686118505}, {"id": "63c494147843b612699fedb4", "level": "level3", "llm_response": "```yaml name: test-chart-testing-action\n\non: [pull_request]\n\njobs:\n  test_ct_action:\n    name: Install chart-testing and test presence in path\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install chart-testing\n        run: |\n          curl -L https://github.com/argoproj/argocd-action/releases/download/v2.2.0/argocd-action-latest-linux-amd64.zip | tar -xzvf -\n          mv argocd-action-latest-linux-amd64 /usr/local/bin\n      - name: Check install!\n        run: argocd --version\n      - name: Check root directory\n        run: ls -ld /usr/local/bin/argocd-action-latest-linux-amd64\n\n  test_ct_action_custom:\n    name: Install Custom chart-testing and test presence in path\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install chart-testing\n        run: |\n          curl -L https://github.com/argoproj/argocd-action/releases/download/v2.2.0/argocd-action-latest-linux-amd64.zip | tar -xzvf -\n          mv argocd-action-latest-linux-amd64 /usr/local/bin\n      - name: Check install!\n        run: argocd --version\n      - name: Check root directory\n        run: ls -ld /usr/local/bin/argocd-action-latest-linux-amd64\n```", "answer": "```yaml name: test-chart-testing-action\n\non: [pull_request]\n\njobs:\n  test_ct_action:\n    runs-on: ubuntu-latest\n\n    name: Install chart-testing and test presence in path\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install chart-testing\n      uses: ./\n    - name: Check install!\n      run: |\n        ct version\n        CT_VERSION_OUTPUT=$(ct version 2>&1 /dev/null)\n        ACTUAL_VERSION=$(echo \"$CT_VERSION_OUTPUT\" | grep Version | rev | cut -d ' ' -f1 | rev)\n        if [[ $ACTUAL_VERSION != 'v3.7.1' ]]; then\n          echo 'should be v3.7.1'\n          exit 1\n        else\n          exit 0\n        fi\n      shell: bash\n    - name: Check root directory\n      run: |\n        if [[ $(git diff --stat) != '' ]]; then\n          echo 'should be clean'\n          exit 1\n        else\n          exit 0\n        fi\n\n  test_ct_action_custom:\n    runs-on: ubuntu-latest\n\n    name: Install Custom chart-testing and test presence in path\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install chart-testing\n      uses: ./\n      with:\n        version: 'v3.5.1'\n        yamllint_version: '1.27.1'\n        yamale_version: '3.0.4'\n    - name: Check install!\n      run: |\n        ct version\n        CT_VERSION_OUTPUT=$(ct version 2>&1 /dev/null)\n        ACTUAL_VERSION=$(echo \"$CT_VERSION_OUTPUT\" | grep Version | rev | cut -d ' ' -f1 | rev)\n        if [[ $ACTUAL_VERSION != 'v3.5.1' ]]; then\n          echo 'should be v3.5.1'\n          exit 1\n        else\n          exit 0\n        fi\n      shell: bash\n    - name: Check root directory\n      run: |\n        if [[ $(git diff --stat) != '' ]]; then\n          echo 'should be clean'\n          exit 1\n        else\n          exit 0\n        fi\n```", "prompt": "Generate a GitHub Workflow named `test-chart-testing-action` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The 1st job is named `Install chart-testing and test presence in path` and its job id is `test_ct_action`. The job `test_ct_action` has 4 steps. The 1st step is named ``. The 2nd step is named `Install chart-testing`. The 3rd step is named `Check install!`. The 4th step is named `Check root directory`. The 2nd job is named `Install Custom chart-testing and test presence in path` and its job id is `test_ct_action_custom`. The job `test_ct_action_custom` has 4 steps. The 1st step is named ``. The 2nd step is named `Install chart-testing`. The 3rd step is named `Check install!`. The 4th step is named `Check root directory`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, ./, v3 version of actions/checkout and ./. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.18458592051582}, {"id": "63c494fc8052faa2781aead3", "level": "level3", "llm_response": "```yaml name: Update Release List\n\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    branches: [master]\n    types:\n      - completed\n\npermissions:\n  contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n      - name: Update Release List\n        run: |\n          curl -X POST -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"action\": \"release\", \"tag_name\": \"v${{ github.event.workflow_run.head_ref }}\"}' https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}@master\n```", "answer": "```yaml name: Update Release List\n\non:\n  #release:\n  #  types: [published]\n  workflow_run:\n    workflows: [\"Build\"]\n    branches: [master]\n    types: [completed]\n\npermissions:\n  contents: write # to update wiki\n\nenv:\n  # Account for committing\n  USER_NAME: \"ctags-win32 CI\"\n  USER_EMAIL: \"ctags-win32-ci@users.noreply.github.com\"\n\n  # Escape sequences\n  COL_RED: \"\\x1b[31m\"\n  COL_GREEN: \"\\x1b[32m\"\n  COL_YELLOW: \"\\x1b[33m\"\n  COL_RESET: \"\\x1b[m\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        path: main\n\n    - uses: actions/checkout@v3\n      with:\n        repository: \"${{ github.repository }}.wiki\"\n        path: wiki\n\n    - name: Update Release List\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        cd main\n        latest=$(cat ctagsver.txt)\n        cd ../wiki\n        ../main/scripts/update-release-list.py\n        git add Releases-in-*.md\n        if git diff HEAD --quiet; then\n          echo ${COL_YELLOW}No updates.${COL_RESET}\n        else\n          git config --local user.name ${USER_NAME}\n          git config --local user.email ${USER_EMAIL}\n          git commit -a -m \"Update Release List to ${latest}\"\n          git push origin HEAD\n        fi\n```", "prompt": "Generate a GitHub Workflow named `Update Release List` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the workflow named Build is completed on a branch whose name matches master. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `update`. The job `update` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Update Release List`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/checkout. Here are some variables that might be used in the workflow: github.repository and secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.15084920796509094}, {"id": "63c494037843b612699fe649", "level": "level3", "llm_response": "```yaml name: Tag\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version\n        required: true\n      tag:\n        description: Tag\n        default: latest\n        required: true\n\npermissions: {}\njobs:\n  build:\n    name: Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n      - name: Update tag\n        run: |\n          yarn config set experimentalFeatures true\n          yarn install\n          yarn version --latest --tag ${{ github.event.inputs.tag }}\n          yarn version --latest --tag ${{ github.event.inputs.version }}\n          git tag -a \"${{ github.event.inputs.version }}\" -m \"Release ${{ github.event.inputs.version }}\"\n          git push --follow-tags\n```", "answer": "```yaml name: Tag\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version\n        required: true\n      tag:\n        description: Tag\n        default: latest\n        required: true\n\npermissions: {}\njobs:\n  build:\n    name: Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}\n    environment: release\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setup Node\n      uses: actions/setup-node@v3\n    - name: Update tag\n      env:\n        \"npm_config_//registry.npmjs.org/:_authToken\": ${{ secrets.NPM_TOKEN }}\n      run: |\n        npm dist-tag add pnpm@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n        npm dist-tag add @pnpm/exe@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n```", "prompt": "Generate a GitHub Workflow named `Tag` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives 2 inputs: version-this input represents version and it must be supplied; tag-this input represents tag, its default value is latest and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: the workflow disables permissions for the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}` and its job id is `build`. The job `build` has 2 steps. The 1st step is named `Setup Node`. The 2nd step is named `Update tag`. Here are some Github Actions that might be used in the workflow: v3 version of actions/setup-node. Here are some variables that might be used in the workflow: secrets.NPM_TOKEN, github.event.inputs.version and github.event.inputs.tag. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4989996325291654}, {"id": "63c4949a8052faa2781ac0b0", "level": "level3", "llm_response": "```yaml name: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        node-version: [16.x, 14.x, 12.x, 10.x]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'pnpm'\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ${{ runner.os }}/home/.pnpm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-pnpm-\n      - uses: pnpm/action-setup@v2.2.4\n      - name: Build project\n        run: pnpm install && pnpm build\n        env:\n          CACHE_NAME: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          WORKSPACE: ${{ github.workspace }}\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-pnpm-modules\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ${{ github.workspace }}/.next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          restore-keys: |\n            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-\n      - uses: pnpm/action-setup@v2.2.4\n        with:\n          version: 7.x.x\n          run_install: true\n      - name: Build project\n        run: |\n          yarn build\n          yarn lint\n        env:\n          CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node.js CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named `Use Node.js ${{ matrix.node-version }}`. The 3rd step is named `Cache pnpm modules`. The 4th step is named ``. The 5th step is named ``. The 6th step is named `Build project`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/setup-node, v3 version of actions/cache, v3 version of actions/cache and v2.2.4 version of pnpm/action-setup. Here are some variables that might be used in the workflow: matrix.node-version, runner.os, env.cache-name and github.workspace. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"os\" is not defined in object type {node-version: string}", "filepath": "../tmp/test.yml", "line": 11, "column": 18, "kind": "expression", "snippet": "    runs-on: ${{ matrix.os }}\n                 ^~~~~~~~~", "end_column": 26}]}, "bleu_score": 0.40895553946208696}, {"id": "63c4967e1899db58864d33dd", "level": "level3", "llm_response": "```yaml name: Lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Commit Message\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.38.0\n          args: --config=.golangci.yml\n      - name: File names\n        run: |\n          find . -type f -name \"*.go\" | xargs grep -E '\\.go$'\n      - name: Functions\n        run: |\n          find . -type f -name \"*.go\" | xargs grep -E '\\.func[0-9]*$'\n      - name: Logging messages should not have trailing newlines\n        run: |\n          find . -type f -name \"*.go\" | xargs grep -E '\\n$'\n\n  lint-go:\n    name: Go\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.38.0\n          args: --config=.golangci.yml\n```", "answer": "```yaml #\n# DO NOT EDIT THIS FILE\n#\n# It is automatically copied from https://github.com/pion/.goassets repository.\n# If this repository should have package specific CI config,\n# remove the repository name from .goassets/.github/workflows/assets-sync.yml.\n#\n# If you want to update the shared CI config, send a PR to\n# https://github.com/pion/.goassets instead of this repository.\n#\n\nname: Lint\non:\n  pull_request:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n        - uses: actions/checkout@v3\n          with:\n            fetch-depth: 0\n\n        - name: Commit Message\n          run: .github/lint-commit-message.sh\n\n        - name: File names\n          run: .github/lint-filename.sh\n\n        - name: Functions\n          run: .github/lint-disallowed-functions-in-library.sh\n\n        - name: Logging messages should not have trailing newlines\n          run: .github/lint-no-trailing-newline-in-log-messages.sh\n\n  lint-go:\n    name: Go\n    permissions:\n      contents: read\n      pull-requests: read\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.45.2\n          args: $GOLANGCI_LINT_EXRA_ARGS\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created, the title or body of a pull request is edited or a pull request's head branch is updated. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The 1st job is named `Metadata` and its job id is `lint-commit-message`. The job `lint-commit-message` has 5 steps. The 1st step is named ``. The 2nd step is named `Commit Message`. The 3rd step is named `File names`. The 4th step is named `Functions`. The 5th step is named `Logging messages should not have trailing newlines`. The 2nd job is named `Go` and its job id is `lint-go`. The job `lint-go` has 2 steps. The 1st step is named ``. The 2nd step is named `golangci-lint`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/checkout and v3 version of golangci/golangci-lint-action. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.39399070323952906}, {"id": "63c4950a7843b61269a0501c", "level": "level3", "llm_response": "```yaml name: Integration test on schedule (minimal)\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    secrets:\n      GH_TOKEN: ${{ secrets.GH_TOKEN }}\n```", "answer": "```yaml name: Integration test on schedule (minimal)\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    secrets: inherit\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: \"['1.22', '1.23']\"\n```", "prompt": "Generate a GitHub Workflow named `Integration test on schedule (minimal)` for a GitHub repository whose primary programming language is Mustache. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Start integration test (minimal)` and its job id is `start-integration-test-minimal`. Here are some reusable workflows that might be used in the workflow: {'version': None, 'name': './.github/workflows/integration.yml'}. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6835558948235324}, {"id": "63c496891e3364807577b43d", "level": "level3", "llm_response": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        run: |\n          curl -s -X GET \"https://api.github.com/rate_limit\" \\\n            --user ${{ github.token }} \\\n            --header \"Accept: application/vnd.github.v3+json\"\n```", "answer": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        env:\n          TOKEN: ${{ github.token }}\n        run: |\n          curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n```", "prompt": "Generate a GitHub Workflow named `Check Actions rate limit` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Check Actions rate limit` and its job id is `check`. The job `check` has one step. The 1st step is named `Check rate limit`. Here are some variables that might be used in the workflow: github.token. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6431164311622583}, {"id": "63c4969e1899db58864d41ee", "level": "level3", "llm_response": "```yaml name: Auto message on Creating Issue.\non:\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment for issue\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hello @${{ github.actor }},\n\n            This issue has been opened for feedback on your project. Thank you for your time and effort.\n\n            Looking forward to your feedback.\n\n            Best regards,\n            [Your Name]\n```", "answer": "```yaml name: Auto message on Creating Issue.\n\non:\n\n  issues:\n\n    types: [opened]\n\njobs:\n\n  greeting:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Create comment for issue\n\n      if: github.event_name =='issues' \n\n      uses: peter-evans/create-or-update-comment@v1\n\n      with:\n\n        issue-number: ${{tojson(github.event.issue.number)}}\n\n        body: |\n\n            Hi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n```", "prompt": "Generate a GitHub Workflow named `Auto message on Creating Issue.` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `greeting`. The job `greeting` has one step. The 1st step is named `Create comment for issue`. Here are some Github Actions that might be used in the workflow: v1 version of peter-evans/create-or-update-comment. Here are some variables that might be used in the workflow: github.event.issue.number and github.actor. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3725526465463202}, {"id": "63c496941899db58864d3d85", "level": "level3", "llm_response": "```yaml name: release-please\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: \"swift\"\n          semver: \"patch\"\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release-please\non:\n   push:\n      branches:\n         - master\njobs:\n   release-please:\n      runs-on: ubuntu-latest\n      steps:\n         - uses: GoogleCloudPlatform/release-please-action@v2\n           with:\n            token: ${{ secrets.GITHUB_TOKEN }}\n            release-type: simple\n            version-file: \"./version.txt\"\n            package-name: release-please-action\n            default-branch: master\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is Swift. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. The job `release-please` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v2 version of GoogleCloudPlatform/release-please-action. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6044365320195465}, {"id": "63c496486fc19abdf9c9b0d5", "level": "level3", "llm_response": "```yaml name: Dependencies\non:\n  schedule:\n    - cron: 0 12 * * 1\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: pnpm\n      - run: pnpm install\n      - run: pnpm i\n      - run: pnpm run build\n        env:\n          CI: true\n          NODE_ENV: production\n      - run: pnpm run publish\n        env:\n          CI: true\n          NODE_ENV: production\n```", "answer": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: \"0 12 * * 1\"\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: latest\n      - uses: actions/setup-node@v3\n        with:\n          cache: \"pnpm\"\n          node-version-file: \".nvmrc\"\n          registry-url: \"https://npm.pkg.github.com\"\n      - run: rm -rf pnpm-lock.yaml **/node_modules/\n      - run: pnpm install\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}\n      - uses: EndBug/add-and-commit@v9\n        with:\n          message: \"chore(deps): upgrade versions\"\n```", "prompt": "Generate a GitHub Workflow named `Dependencies` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 pm, only on monday. 2) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Upgrade dependencies` and its job id is `upgrade`. The job `upgrade` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The 5th step is named ``. The 6th step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v2 version of pnpm/action-setup, v3 version of actions/setup-node and v9 version of EndBug/add-and-commit. Here are some variables that might be used in the workflow: secrets.NPM_GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4124550665245723}, {"id": "63c4954d8052faa2781b0e83", "level": "level3", "llm_response": "```yaml name: xgo\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build artifacts\n        uses: docker/bake-action@v2\n        with:\n          # Note: This is a workaround for the fact that\n          # `docker/bake-action` doesn't support Dockerfiles with\n          # `ARG` statements. We can't use `ARG` statements\n          # for Dockerfiles.\n          # This workaround is to use a temporary Dockerfile\n          # that includes `ARG` statements.\n          dockerfile: temp-dockerfile\n\n      - name: Move artifacts\n        run: |\n          mv ./dist/* ./dist.tmp\n          rm -rf ./dist\n          mv ./dist.tmp ./dist\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: xgo\n          path: ./dist\n\n      - name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: xgo\n\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - 'v*'\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - 'master'\n    paths-ignore:\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      -\n        name: Build artifacts\n        uses: docker/bake-action@v2\n        with:\n          targets: artifact-all\n      -\n        name: Move artifacts\n        run: |\n          mv ./dist/**/* ./dist/\n      -\n        name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: xgo\n          path: ./dist/*\n          if-no-files-found: error\n      -\n        name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, 'refs/tags/v')\n        with:\n          draft: true\n          files: |\n            dist/*.tar.gz\n            dist/*.zip\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `xgo` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a tag whose name matches v*. When all the path names of push event match patterns in the paths-ignore filter(**.md), the workflow will not run. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. When all the path names of pull_request event match patterns in the paths-ignore filter(**.md), the workflow will not run. Only a single workflow using the xgo-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up Docker Buildx`. The 3rd step is named `Build artifacts`. The 4th step is named `Move artifacts`. The 5th step is named `Upload artifacts`. The 6th step is named `GitHub Release`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v2 version of docker/setup-buildx-action, v2 version of docker/bake-action, v3 version of actions/upload-artifact and v1 version of softprops/action-gh-release. Here are some variables that might be used in the workflow: secrets.GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.62604878060945}, {"id": "63c494a48052faa2781ac54e", "level": "level3", "llm_response": "```yaml name: lint\n\non:\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'docs/**'\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: cspell --all\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: yarn\n      - run: yarn lint\n```", "answer": "```yaml name: lint\non: # rebuild any PRs and main branch changes\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"docs/**\"\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx cspell \"**\" --dot --no-progress\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: yarn\n      - run: yarn lint\n```", "prompt": "Generate a GitHub Workflow named `lint` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) When all the path names of pull_request event match patterns in the paths-ignore filter(docs/**), the workflow will not run. 2) The workflow would run whenever there is a push event to: a branch named main. When all the path names of push event match patterns in the paths-ignore filter(docs/**), the workflow will not run. The workflow has 2 jobs. The job id of the 1st job is `cspell`. The job `cspell` has 2 steps. The 1st step is named ``. The 2nd step is named ``. The job id of the 2nd job is `lint`. The job `lint` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/checkout. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5552397536624146}, {"id": "63c4968633b087f6bde2c8ea", "level": "level3", "llm_response": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"[0-9]+.[0-9]+.[0-9]+\"\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        environment: [\"py3\", \"py2\"]\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: |\n          python -m pip install tox\n      - name: Run tox\n        run: tox -e ${{ matrix.environment }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"[0-9]+.[0-9]+.[0-9]+\"\n      - \"[0-9]+.[0-9]+.[0-9]+rc[0-9]+\"\n\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment:\n          - \"py36\"\n          - \"py37\"\n          - \"flake8\"\n\n        include:\n          - environment: \"py36\"\n            python: \"3.6\"\n          - environment: \"py37\"\n            python: \"3.7\"\n          - environment: \"flake8\"\n            python: \"3.7\"\n\n    container:\n      image: python:${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install tox\n      - name: Run tox\n        run: |\n          tox -e ${{ matrix.environment }}\n```", "prompt": "Generate a GitHub Workflow named `Run checks` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a tag whose name matches [0-9]+.[0-9]+.[0-9]+ or a tag whose name matches [0-9]+.[0-9]+.[0-9]+rc[0-9]+. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `tox`. The job `tox` has 3 steps. The 1st step is named ``. The 2nd step is named `Install tox`. The 3rd step is named `Run tox`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout. Here are some variables that might be used in the workflow: matrix.environment. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4488533585062388}, {"id": "63c494187843b612699fef56", "level": "level3", "llm_response": "```yaml name: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Whether to debug the workflow'\n        required: false\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  fork_update_pr:\n    name: Fork Update PR\n    uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: false\n\njobs:\n  fork_update_pr:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == true\n    if: github.repository_owner != 'HariSekhon'\n    name: Fork Update PR\n    uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "prompt": "Generate a GitHub Workflow named `Fork Update PR` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, it is optional and its default value is False. 2) the scheduled time has come: at 10:00 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the ${{ github.ref }}-${{ github.workflow }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Fork Update PR` and its job id is `fork_update_pr`. Here are some reusable workflows that might be used in the workflow: {'version': 'master', 'name': 'HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml'}. Here are some variables that might be used in the workflow: github.event.inputs.debug. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7630721561975952}, {"id": "63c494e67843b61269a04123", "level": "level3", "llm_response": "```yaml name: CI\n\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          channel: stable\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n      - name: Static Analysis\n        run: flutter pub run static_analysis:analyze\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter pub run format:check\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "answer": "```yaml name: CI\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: '2.10.4'\n          channel: 'stable'\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --set-exit-if-changed --dry-run .\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch whose name matches **. When all the path names of pull_request event match patterns in the paths-ignore filter(.github/**, .vscode/** or README.md), the workflow will not run. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 6 steps. The 1st step is named `Setup Flutter`. The 2nd step is named `Checkout OneSignal-Flutter-SDK`. The 3rd step is named `Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6`. The 4th step is named `Static Analysis`. The 5th step is named `Ensure the Dart code is formatted correctly`. The 6th step is named `Run Flutter unit tests`. Here are some Github Actions that might be used in the workflow: v2 version of subosito/flutter-action and v3 version of actions/checkout. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8222811329156072}, {"id": "63c4957b8052faa2781b219f", "level": "level3", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**.go'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**.go'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Build\n        run: make build\n      - name: Test\n        run: make test\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches: [ main ]\n    paths:\n      - '**.go'\n  pull_request:\n    branches: [ main ]\n    paths:\n      - '**.go'\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.18\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Test\n      run: go test -cover -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(**.go), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. Only if at least one path of pull_request event matches a pattern in the paths filter(**.go), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Go`. The 3rd step is named `Build`. The 4th step is named `Test`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout and v3 version of actions/setup-go. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6346044492383693}, {"id": "63c495928052faa2781b2bc1", "level": "level3", "llm_response": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml \n# https://github.com/actions/create-release\nname: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Create Release` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Create Release` and its job id is `build`. The job `build` has 2 steps. The 1st step is named `Checkout code`. The 2nd step is named `Create Release` and its id is `create_release`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout and latest version of actions/create-release. Here are some variables that might be used in the workflow: github.ref and secrets.GIT_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496686fc19abdf9c9bea4", "level": "level3", "llm_response": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}\n```", "answer": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Drafts/updates the next repository release` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. The job `update_release_draft` has one step. The 1st step is named ``. Here are some Github Actions that might be used in the workflow: v5 version of release-drafter/release-drafter. Here are some variables that might be used in the workflow: secrets.ADMIN_GITHUB_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494768052faa2781ab616", "level": "level3", "llm_response": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n    name: Nextcloud ${{ matrix.ocp-version }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ocp-version:\n          - '10.0.1'\n          - '10.1.1'\n          - '11.0.1'\n          - '12.0.0'\n          - '12.0.1'\n    steps:\n      - name: Checkout\n        uses: actions/checkout@master\n        with:\n          fetch-depth: 0\n          submodules: true\n      - name: Set up php\n        uses: shivammathur/setup-php@master\n        with:\n          php-version: ${{ matrix.ocp-version }}\n          coverage: none\n          extensions: pdo\n      - name: Install dependencies\n        run: composer install --no-interaction\n        env:\n          PHPCMD: php-cmd\n      - name: Install dependencies\n        run: php --version\n        env:\n          PHPCMD: php-cmd\n      - name: Run coding standards check\n        run: php ./vendor/bin/phpcs --standard=PSR2 --extensions=PHP --ignore=tests/ --report=xml\n```", "answer": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n      runs-on: ubuntu-latest\n      strategy:\n          matrix:\n              ocp-version: [ 'v20.0.7', 'v21.0.0', 'dev-stable22', 'dev-stable23', 'dev-master' ]\n      name: Nextcloud ${{ matrix.ocp-version }}\n      steps:\n          - name: Checkout\n            uses: actions/checkout@master\n          - name: Set up php\n            uses: shivammathur/setup-php@master\n            with:\n                php-version: 7.4\n                tools: composer:v1\n                coverage: none\n          - name: Install dependencies\n            run: composer i\n          - name: Install dependencies\n            run: composer require --dev christophwurst/nextcloud:${{ matrix.ocp-version }}\n          - name: Run coding standards check\n            run: composer run psalm\n```", "prompt": "Generate a GitHub Workflow named `Static analysis` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Nextcloud ${{ matrix.ocp-version }}` and its job id is `static-psalm-analysis`. The job `static-psalm-analysis` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up php`. The 3rd step is named `Install dependencies`. The 4th step is named `Install dependencies`. The 5th step is named `Run coding standards check`. Here are some Github Actions that might be used in the workflow: master version of actions/checkout and master version of shivammathur/setup-php. Here are some variables that might be used in the workflow: matrix.ocp-version. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4401440647872148}, {"id": "63c4951f8052faa2781af9e5", "level": "level3", "llm_response": "```yaml name: IRC Notification\n\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - name: irc push\n      uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n      with:\n        token: ${{ secrets.irc_token }}\n        channel: ${{ secrets.irc_channel }}\n        message: ${{ github.event.payload.message }}\n```", "answer": "```yaml name: \"IRC Notification\"\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online'\n        with:\n          channel: \"#cool-dev\"\n          nickname: github-online\n          message: |\n            ${{ toJson(github.event) }}\n```", "prompt": "Generate a GitHub Workflow named `IRC Notification` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `test`. The job `test` has one step. The 1st step is named `irc push`. Here are some Github Actions that might be used in the workflow: bfd6f632b683859f6cd074e2ee9db68bef204f7d version of vmiklos/notify-irc. Here are some variables that might be used in the workflow: github.event. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2847061961477276}, {"id": "63c493ee7843b612699fde0c", "level": "level3", "llm_response": "```yaml name: nf-core AWS test\non:\n  workflow_dispatch:\njobs:\n  run-tower:\n    name: Run AWS tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Launch workflow via tower\n        uses: nf-core/tower-action@v3\n        with:\n          action: run\n          inputs: \"aws-ec2\"\n          inputs: \"job-id\"\n          inputs: \"workspace-id\"\n          inputs: \"access-token\"\n          inputs: \"compute-env\"\n          inputs: \"s3-bucket\"\n          inputs: \"sha\"\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          AWS_COMPUTE_ENV: ${{ secrets.TOWER_COMPUTE_ENV }}\n          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}\n          GITHUB_SHA: ${{ github.sha }}\n```", "answer": "```yaml name: nf-core AWS test\n# This workflow can be triggered manually with the GitHub actions workflow dispatch button.\n# It runs the -profile 'test' on AWS batch\n\non:\n  workflow_dispatch:\njobs:\n  run-tower:\n    name: Run AWS tests\n    if: github.repository == 'nf-core/mag'\n    runs-on: ubuntu-latest\n    steps:\n      # Launch workflow using Tower CLI tool action\n      - name: Launch workflow via tower\n        uses: nf-core/tower-action@v3\n        with:\n          workspace_id: ${{ secrets.TOWER_WORKSPACE_ID }}\n          access_token: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          compute_env: ${{ secrets.TOWER_COMPUTE_ENV }}\n          workdir: s3://${{ secrets.AWS_S3_BUCKET }}/work/mag/work-${{ github.sha }}\n          parameters: |\n            {\n              \"outdir\": \"s3://${{ secrets.AWS_S3_BUCKET }}/mag/results-test-${{ github.sha }}\"\n            }\n          profiles: test,aws_tower\n```", "prompt": "Generate a GitHub Workflow named `nf-core AWS test` for a GitHub repository whose primary programming language is Nextflow. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Run AWS tests` and its job id is `run-tower`. The job `run-tower` has one step. The 1st step is named `Launch workflow via tower`. Here are some Github Actions that might be used in the workflow: v3 version of nf-core/tower-action. Here are some variables that might be used in the workflow: secrets.TOWER_WORKSPACE_ID, secrets.TOWER_ACCESS_TOKEN, secrets.TOWER_COMPUTE_ENV, secrets.AWS_S3_BUCKET and github.sha. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"inputs\" is duplicated in \"with\" section. previously defined at line:13,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 14, "column": 11, "kind": "syntax-check", "snippet": "          inputs: \"job-id\"\n          ^~~~~~~", "end_column": 17}, {"message": "key \"inputs\" is duplicated in \"with\" section. previously defined at line:13,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 15, "column": 11, "kind": "syntax-check", "snippet": "          inputs: \"workspace-id\"\n          ^~~~~~~", "end_column": 17}, {"message": "key \"inputs\" is duplicated in \"with\" section. previously defined at line:13,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 16, "column": 11, "kind": "syntax-check", "snippet": "          inputs: \"access-token\"\n          ^~~~~~~", "end_column": 17}, {"message": "key \"inputs\" is duplicated in \"with\" section. previously defined at line:13,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 17, "column": 11, "kind": "syntax-check", "snippet": "          inputs: \"compute-env\"\n          ^~~~~~~", "end_column": 17}, {"message": "key \"inputs\" is duplicated in \"with\" section. previously defined at line:13,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 18, "column": 11, "kind": "syntax-check", "snippet": "          inputs: \"s3-bucket\"\n          ^~~~~~~", "end_column": 17}, {"message": "key \"inputs\" is duplicated in \"with\" section. previously defined at line:13,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 19, "column": 11, "kind": "syntax-check", "snippet": "          inputs: \"sha\"\n          ^~~~~~~", "end_column": 17}]}, "bleu_score": 0.41575882454716134}, {"id": "63c496981899db58864d3f73", "level": "level3", "llm_response": "```yaml name: Triage tasks\n\non: [pull_request]\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: triage-${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          commit-message: |\n            chore(${{ github.event.number }}): ${{ github.event.title }}\n          format-version: 2\n          format: |\n            ${{ github.event.number }}: ${{ github.event.title }}\n            ${{ github.event.pull_request.title }}\n            ${{ github.event.pull_request.body }}\n\n      - name: Label pull request\n        uses: Homebrew/actions/label-pull-requests@master\n        with:\n          labels: |\n            chore(${{ github.event.number }})\n\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n```", "answer": "```yaml name: Triage tasks\n\non: pull_request_target\n\nconcurrency:\n  group: \"triage-${{ github.event.number }}\"\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n      - name: Label pull request\n        uses: Homebrew/actions/label-pull-requests@master\n        if: always()\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n          def: |\n            - label: new cask\n              status: added\n              path: Casks/.+\n\n            - label: marked for removal/rejection\n              status: removed\n              path: Casks/.+\n\n            - label: documentation\n              path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n            - label: bump-cask-pr\n              pr_body_content: Created with `brew bump-cask-pr`\n\n            - label: missing description\n              path: Casks/.+\n              missing_content: \\n  desc .+\\n\n\n            - label: appcast migration needed\n              path: Casks/.+\n              content: \\n  appcast .+\\n\n```", "prompt": "Generate a GitHub Workflow named `Triage tasks` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the triage-${{ github.event.number }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `triage`. The job `triage` has 2 steps. The 1st step is named `Check commit format`. The 2nd step is named `Label pull request`. Here are some Github Actions that might be used in the workflow: master version of Homebrew/actions/check-commit-format and master version of Homebrew/actions/label-pull-requests. Here are some variables that might be used in the workflow: secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22551454870938256}, {"id": "63c4963d6fc19abdf9c9abf2", "level": "level3", "llm_response": "```yaml name: Submit to Web Store\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-pnpm-\n      - uses: pnpm/action-setup@v2.2.1\n      - name: Build and zip extension artifact\n        run: |\n          pnpm install --frozen-lockfile\n          pnpm run build\n      - name: Browser Platform Publish\n        uses: PlasmoHQ/bpp@v2\n        with:\n          pnpm_version: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          pnpm_args: --frozen-lockfile\n          browser: chrome\n          publish: true\n          publish_dir: ./dist\n          publish_key: ${{ secrets.SUBMIT_KEYS }}\n          publish_github_token: ${{ secrets.PUBLISHER_TOKEN }}\n```", "answer": "```yaml name: \"Submit to Web Store\"\r\non:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - name: Cache pnpm modules\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: ~/.pnpm-store\r\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-\r\n      - uses: pnpm/action-setup@v2.2.1\r\n        with:\r\n          version: 7.1.0\r\n          run_install: true\r\n      - name: Build and zip extension artifact\r\n        run: pnpm build -- --zip\r\n      - name: Browser Platform Publish\r\n        uses: PlasmoHQ/bpp@v2\r\n        with:\r\n          keys: ${{ secrets.SUBMIT_KEYS }}\r\n          artifact: build/chrome-mv3-prod.zip\r\n```", "prompt": "Generate a GitHub Workflow named `Submit to Web Store` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. The job `build` has 5 steps. The 1st step is named ``. The 2nd step is named `Cache pnpm modules`. The 3rd step is named ``. The 4th step is named `Build and zip extension artifact`. The 5th step is named `Browser Platform Publish`. Here are some Github Actions that might be used in the workflow: v3 version of actions/checkout, v3 version of actions/cache, v2.2.1 version of pnpm/action-setup and v2 version of PlasmoHQ/bpp. Here are some variables that might be used in the workflow: runner.os and secrets.SUBMIT_KEYS. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.47298813092044667}, {"id": "63c494a97843b61269a02a50", "level": "level4", "llm_response": "```yaml name: pytorch1_7_1-cuda11_0\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: \"cu110\"\n      remote_runtime_docker: \"bladedisc:latest-runtime-torch1.7.1-cu110\"\n      develop_base_image: \"nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\"\n      runtime_base_image: \"nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\"\n      extra_envs: \"-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110\"\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "answer": "```yaml name: pytorch1_7_1-cuda11_0\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu110\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.7.1-cu110\n      develop_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_7_1-cuda11_0` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will call a reusable workflow located at `./.github/workflows/resuable_gpu_build.yml`. The job will pass 7 inputs to the called workflow: the input `cuda_version` is `cu110`, the input `remote_runtime_docker` is `bladedisc:latest-runtime-torch1.7.1-cu110`, the input `develop_base_image` is `nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04`, the input `runtime_base_image` is `nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04`, the input `extra_envs` is `-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110`, the input `exec_command` is `bash ./scripts/ci/test_pytorch_blade.sh` and the input `deploy_command` is `TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh`. The job will pass 4 secrets to the called workflow: the secret `ALIYUN_DOCKER_USERNAME` is `${{ secrets.ALIYUN_DOCKER_USERNAME }}`, the secret `ALIYUN_DOCKER_PASSWORD` is `${{ secrets.ALIYUN_DOCKER_PASSWORD }}`, the secret `DOCKER_USERNAME` is `${{ secrets.DOCKER_USERNAME }}` and the secret `DOCKER_PASSWORD` is `${{ secrets.DOCKER_PASSWORD }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5959280385285929}, {"id": "63c496986fc19abdf9c9cf90", "level": "level4", "llm_response": "```yaml name: Issue Check\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: close\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          reason: Issue closed by bot\n      - name: Create comment\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: createComment\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            This issue was automatically closed because it was not answered in 7 days. Please check the [FAQ](https://github.com/dotnet/razor-components/blob/main/README.md#faq) for more information.\n```", "answer": "```yaml name: 'Issue Check'\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == false\n        name: Close Issue\n        uses: peter-evans/close-issue@v1\n        with:\n          comment: |\n            Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == true\n        name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi!\n            <br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n            <br/>Have you looked at the wiki yet? https://docs.ombi.app/\n            <br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n            <br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n            <br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n            <br/> Thanks!\n            <br/> Ombi Bot.\n```", "prompt": "Generate a GitHub Workflow named `Issue Check` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `issueCheck`. This job will run on ubuntu-latest runner. The job `issueCheck` has 2 steps. The 1st step is named `Close Issue`. The 2nd step is named `Create comment`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"reason\" is not defined in action \"actions-cool/issues-helper@v3\". available inputs are \"actions\", \"assign-command\", \"assignee-includes\", \"assignees\", \"body\", \"body-includes\", \"close-issue\", \"close-reason\", \"comment-auth\", \"comment-id\", \"direction\", \"duplicate-command\", \"duplicate-labels\", \"emoji\", \"exclude-labels\", \"inactive-day\", \"inactive-label\", \"inactive-mode\", \"issue-assignee\", \"issue-creator\", \"issue-emoji\", \"issue-mentioned\", \"issue-number\", \"issue-state\", \"label-color\", \"label-desc\", \"label-name\", \"labels\", \"lock-reason\", \"random-to\", \"remove-labels\", \"repo\", \"require-permission\", \"state\", \"title\", \"title-excludes\", \"title-includes\", \"token\", \"update-mode\"", "filepath": "../tmp/test.yml", "line": 17, "column": 11, "kind": "action", "snippet": "          reason: Issue closed by bot\n          ^~~~~~~", "end_column": 17}]}, "bleu_score": 0.07742349779600012}, {"id": "63c494da7843b61269a03d4f", "level": "level4", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ICHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ICHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\npermissions:\n  contents: write\n\njobs:\n  build-and-deploy:\n    concurrency: ci-${{ github.ref }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install \ud83c\udf31\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n\n      - name: Build \ud83d\udd27\n        run: yarn build\n\n      - name: Deploy \ud83d\ude80\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.ICHIO_USERNAME }}-${{ env.ICHIO_GAME }}-build\n          path: dist\n```", "answer": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\njobs:\n  build-and-deploy:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install \ud83c\udf31\n        run: |\n          sudo apt-get install -y pandoc\n      - name: Build \ud83d\udd27\n        run: |\n          ./run build itch\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is GDScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 3 environment variables to use: `BUTLER_API_KEY` is set to `${{ secrets.BUTLER_API_KEY }}`, `ITCHIO_USERNAME` is set to `${{ secrets.ITCHIO_USERNAME }}` and `ITCHIO_GAME` is set to `${{ secrets.ITCHIO_GAME }}`. The workflow has one job. The job id of the 1st job is `build-and-deploy`. This job will run on ubuntu-latest runner. Only a single job using the ci-${{ github.ref }} concurrency group will run at a time. The job `build-and-deploy` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install \ud83c\udf31`. The 3rd step is named `Build \ud83d\udd27`. The 4th step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4698653649001498}, {"id": "63c4968933b087f6bde2ca3a", "level": "level4", "llm_response": "```yaml name: Nightly Smoketest\n\non:\n  schedule:\n    - cron: '0 3 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        NODE_VERSION: [1.19.16, 1.20.15, 1.21.9, 1.22.6, 1.23.3]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cache/bazel\n          key: bazel-${{ matrix.NODE_VERSION }}\n          restore-keys: |\n            bazel-\n      - name: Bank Workload\n        run: |\n          echo \"Running bazel test bank\"\n          bazel test bank\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This workflow tests that we can stand up a CRDB cluster with the operator and execute SQL in the cluster. It uses the\n# steps that are outlined in our public docs to ensure that the flow we're recommending always works.\nname: Nightly Smoketest\n\non:\n  schedule:\n    # runs at 3am UTC Mon-Fri\n    # ref: <min> <hr> <month-day> <month> <weekday>\n    - cron: '0 3 * * 1-5'\n\n  # allows running from the actions tab in GitHub\n  workflow_dispatch: ~\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # supported Kubenetes versions\n        NODE_VERSION: [1.19.16, 1.20.15, 1.21.9, 1.22.6, 1.23.3]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: Bank Workload\n        env:\n          NODE_VERSION: ${{ matrix.NODE_VERSION }}\n        run: make test/smoketest\n```", "prompt": "Generate a GitHub Workflow named `Nightly Smoketest` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am, monday through friday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `smoketest`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `NODE_VERSION` has 5 values: 1.19.16, 1.20.15, 1.21.9, 1.22.6 and 1.23.3. The job `smoketest` has 3 steps. The 1st step is named ``. The 2nd step is named `Mount bazel cache`. The 3rd step is named `Bank Workload`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6498353010006832}, {"id": "63c49698b008460c1df15628", "level": "level4", "llm_response": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request_target:\n    types: [opened, labeled]\n\npermissions:\n  contents: read\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github-token: ${{ env.GITHUB_TOKEN }}\n          labels: 'Issue-Board-Addition'\n```", "answer": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, labeled]\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\npermissions:\n  contents: read\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n```", "prompt": "Generate a GitHub Workflow named `add-to-gh-projects` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by multiple events: 1) an issue is opened or a label is added to an issue. 2) a pull request is created or a label is added to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}`. The workflow has one job. The 1st job is named `Adds issues to GH projects` and its job id is `add_to_gh_projects`. This job will run on ubuntu-latest runner. The job `add_to_gh_projects` has one step. The 1st step is named `Add labeled issues to GH projects`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6590458520683681}, {"id": "63c494f67843b61269a0479e", "level": "level4", "llm_response": "```yaml name: Sync-To-Gitlab\non:\n  push:\n    branches: [master, master-template]\n  pull_request:\n    types: [closed]\n  workflow_dispatch:\nrun:\n  if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n  runs-on: ubuntu-latest\n  concurrency:\n    group: ${{ github.workflow }}-${{ github.ref_name }}\n    cancel-in-progress: true\n  steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Mirror\n      uses: github-actions/mirror-branch@v1\n      with:\n        gitlab_token: ${{ secrets.GITLAB_TOKEN }}\n        remote: ${{ secrets.GITLAB_REMOTE }}\n        branch: ${{ github.ref }}\n```", "answer": "```yaml name: Sync-To-Gitlab\nrun-name: Sync-To-Gitlab ${{ github.sha }}\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request_target:\n    types:\n      - closed\n    branches:\n      - master\n      - master-template\n  workflow_dispatch:\n\n\njobs:\n  sync:\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref_name }}\n      cancel-in-progress: true\n    name: \"Sync To Gitlab\"\n    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Mirror\n        env:\n          input_git_config_user_name: ${{ secrets.GITLAB_USERNAME }}\n          input_git_config_user_email: ${{ secrets.GITLAB_EMAIL }}\n          input_git_remote_url: ${{ secrets.GITLAB_URL }}\n          input_git_push_options: --force\n        run: |\n          git config --global user.name \"${{ env.input_git_config_user_name }}\"\n          git config --global user.email \"${{ env.input_git_config_user_email }}\"\n          git clone \"https://github.com/${{ github.repository }}.git\" \"git\"\n          cd git\n          git remote set-url origin \"${{ env.input_git_remote_url }}\"\n          git push ${{ env.input_git_push_options }} origin ${{ github.ref_name }}:${{ github.ref_name }}\n#      - name: Mirror + trigger CI\n#        uses: SvanBoxel/gitlab-mirror-and-ci-action@master\n#        with:\n#          args: \"https://gitlab.com/Zerek-Cheng/Simple-Assets-Platform\"\n#        env:\n#          FORCE_PUSH: \"true\"\n#          GITLAB_HOSTNAME: \"gitlab.com\"\n#          GITLAB_USERNAME: \"Zerek-Cheng\"\n#          GITLAB_PASSWORD: ${{ secrets.GITLAB_PASSWORD }}\n#          GITLAB_PROJECT_ID: \"40146411\"\n#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Sync-To-Gitlab` for a GitHub repository whose primary programming language is Java. The name for workflow runs is set to `Sync-To-Gitlab ${{ github.sha }}`. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named master-template. 2) a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named master or a branch named master-template. 3) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Sync To Gitlab` and its job id is `sync`. This job will run only if the condition(github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch') is met. This job will run on ubuntu-latest runner. Only a single job using the ${{ github.workflow }}-${{ github.ref_name }} concurrency group will run at a time. When this job is queued, any currently running job in the same concurrency group will be canceled. The job `sync` has 2 steps. The 1st step is named `Checkout`. The 2nd step is named `Mirror`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "\"jobs\" section is missing in workflow", "filepath": "../tmp/test.yml", "line": 1, "column": 1, "kind": "syntax-check", "snippet": "name: Sync-To-Gitlab\n^~~~~", "end_column": 5}, {"message": "unexpected key \"run\" for \"workflow\" section. expected one of \"concurrency\", \"defaults\", \"env\", \"jobs\", \"name\", \"on\", \"permissions\", \"run-name\"", "filepath": "../tmp/test.yml", "line": 8, "column": 1, "kind": "syntax-check", "snippet": "run:\n^~~~", "end_column": 4}]}, "bleu_score": 0.17469621334368415}, {"id": "63c496561899db58864d23de", "level": "level4", "llm_response": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "answer": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Sqlite` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.sqlite.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/sqlite/** or roles/sqlite/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `sqlite`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `sqlite`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494078052faa2781a8a1f", "level": "level4", "llm_response": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: github.event_name == 'pull_request_target'\n        uses: cla-assistant/github-action@v2\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          configuration_path: .github/cla.yml\n          issue_comment: 'CLA Assistant: Please sign the CLA'\n          pull_request_comment: 'CLA Assistant: Please sign the CLA'\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [ created ]\n  pull_request_target:\n    types: [ opened,closed,synchronize ]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: '.cla/v1/signatures.json'\n          path-to-document: 'https://github.com/christian-schlichtherle/truelicense/blob/develop/CLA.md'\n          branch: 'develop'\n          allowlist: bot*\n\n          #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```", "prompt": "Generate a GitHub Workflow named `CLA Assistant` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) a pull request is created, a pull request is closed or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `CLAssistant`. This job will run on ubuntu-latest runner. The job `CLAssistant` has one step. The 1st step is named `CLA Assistant`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.27457736558538304}, {"id": "63c494298052faa2781a98f8", "level": "level4", "llm_response": "```yaml name: Linux build with address sanitizer enabled\n\non:\n  schedule:\n    - cron: 0 0 * * 0\n  workflow_dispatch:\n\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Compiler version\n        run: |\n          g++ --version\n      - name: Build\n        run: |\n          mkdir build\n          cd build\n          cmake -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Debug ..\n          make -j$(nproc)\n      - name: Run tests\n        run: |\n          make check\n      - name: Run examples\n        run: |\n          make examples\n```", "answer": "```yaml name: Linux build with address sanitizer enabled\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n    - uses: actions/checkout@v3\n    - name: Compiler version\n      run: |\n        gcc --version\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --log_level=message\n    - name: Run examples\n      run: |\n        make check-examples\n```", "prompt": "Generate a GitHub Workflow named `Linux build with address sanitizer enabled` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `sanitize`. This job will run on ubuntu-latest runner. The job creates a Docker container that uses `ghcr.io/lballabio/quantlib-devenv:rolling` image. The job `sanitize` has 5 steps. The 1st step is named ``. The 2nd step is named `Compiler version`. The 3rd step is named `Build`. The 4th step is named `Run tests`. The 5th step is named `Run examples`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5519368121262255}, {"id": "63c493cd7843b612699fd710", "level": "level4", "llm_response": "```yaml name: Clean\n\non: [push]\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const { github } = context\n            const { run } = github.rest.actions\n            const { id: artifact_id } = await run({\n              owner: 'sonatype',\n              repo: 'sonatype-nexus-staging',\n              github_token: github.token,\n              method: 'DELETE',\n              path: '/actions/artifacts/${{ github.event.repository.id }}/items/${{ github.event.repository.default_branch }}/files/${{ github.event.repository.default_branch }}/${{ github.event.repository.default_branch }}-${{ github.event.ref }}',\n              ref: `${{ github.event.ref }}`,\n            })\n            const { data } = await run({\n              owner: 'sonatype',\n              repo: 'sonatype-nexus-staging',\n              github_token: github.token,\n              method: 'DELETE',\n              path: '/actions/artifacts/${{ github.event.repository.id }}/items/${{ github.event.repository.default_branch }}/files/${{ github.event.repository.default_branch }}/${{ github.event.ref }}/${artifact_id}',\n            })\n            const { data: artifacts } = await run({\n              owner: 'sonatype',\n              repo: 'sonatype-nexus-staging',\n              github_token: github.token,\n              method: 'GET',\n              path: '/actions/artifacts/${{ github.event.repository.id }}/items/${{ github.event.repository.default_branch }}/files',\n            })\n            console.log(JSON.stringify(artifacts))\n            console.log(JSON.stringify(data))\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "prompt": "Generate a GitHub Workflow named `Clean` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The 1st job is named `Delete Artifacts` and its job id is `delete-artifacts`. This job will run on ubuntu-latest runner. The job sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. The job `delete-artifacts` has one step. The 1st step is named `Delete artifacts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.14482506688941776}, {"id": "63c494167843b612699fee3f", "level": "level4", "llm_response": "```yaml name: Dead Link Check\n\non: [push, pull_request]\n\njobs:\n  dead-links-check:\n    runs-on: ubuntu-latest\n    if: github.repository == 'apache/incubator-linkis'\n    timeout-minutes: 30\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/dead-link-check\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\nname: Dead Link Check\n\non: [push, pull_request]\n\njobs:\n  dead-links-check:\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    if: (github.repository == 'apache/incubator-linkis')\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gaurav-nelson/github-action-markdown-link-check@v1\n        with:\n          use-quiet-mode: 'no'\n          use-verbose-mode: 'yes'\n          folder-path: '../'\n          config-file: '.github/workflows/dlc.json'\n```", "prompt": "Generate a GitHub Workflow named `Dead Link Check` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `dead-links-check`. This job will run only if the condition((github.repository == 'apache/incubator-linkis')) is met. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 30. The job `dead-links-check` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4748907416117304}, {"id": "63c4956e8052faa2781b1ca5", "level": "level4", "llm_response": "```yaml name: Conventional PR\n\non:\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: semantic-pull-request\n      uses: amannn/action-semantic-pull-request@v4.0.0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Conventional PR\n\n# Controls when the action will run. \non:\n  pull_request:\n    branches:\n    - develop\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: semantic-pull-request\n        # Internal Unity mirror available at jesseo/action-semantic-pull-request, but actions from private repos aren't supported, so continue to use the public one below\n        uses: amannn/action-semantic-pull-request@b7a9a97cb10fa6e1ae02647e718798175f6b1f1d\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Provide custom types if you don't want the default ones from https://www.conventionalcommits.org\n          types: # optional\n          # Configure which scopes are allowed.\n          #scopes: # optional\n          # Configure that a scope must always be provided.\n          #requireScope: # optional\n          # Configure additional validation for the subject based on a regex. E.g. '^(?![A-Z]).+$' ensures the subject doesn't start with an uppercase character.\n          #subjectPattern: # optional\n          # If `subjectPattern` is configured, you can use this property to override the default error message that is shown when the pattern doesn't match. The variables `subject` and `title` can be used within the message.\n          #subjectPatternError: # optional\n          # For work-in-progress PRs you can typically use draft pull requests from Github. However, private repositories on the free plan don't have this option and therefore this action allows you to opt-in to using the special '[WIP]' prefix to indicate this state. This will avoid the validation of the PR title and the pull request checks remain pending. Note that a second check will be reported if this is enabled.\n          #wip: # optional\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub will suggest using that commit message instead of the PR title for the merge commit, and it's easy to commit this by mistake. Enable this option to also validate the commit message for one commit PRs.\n          validateSingleCommit: true # optional\n```", "prompt": "Generate a GitHub Workflow named `Conventional PR` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has one step. The 1st step is named `semantic-pull-request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5090175391562158}, {"id": "63c494c88052faa2781ad4bd", "level": "level4", "llm_response": "```yaml name: CI\non:\n  push:\n  pull_request:\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  ci:\n    name: ${{ matrix.ros_distro }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ros_distro:\n          - melodic\n          - noetic\n        node_version:\n          - 14\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node_version }}\n          cache: npm\n      - name: Own /github/home\n        run: echo -n \"https://github.com/ros2/ros2.git\\n\" > .github/home\n      - name: Install apt dependencies\n        run: sudo apt-get install -y \\\n          ros-${{ matrix.ros_distro }}-ros-core \\\n          ros-${{ matrix.ros_distro }}-ros-test-utils \\\n          ros-${{ matrix.ros_distro }}-ros-rosunit \\\n          ros-${{ matrix.ros_distro }}-ros-rosunit-test \\\n          ros-${{ matrix.ros_distro }}-ros-rosunit-test-data \\\n          ros-${{ matrix.ros_distro }}-ros-rosunit-test-rosunit \\\n          ros-${{ matrix.ros_distro }}-ros-rosunit-test-rosunit-test-data \\\n          ros-${{ matrix.ros_distro }}-ros-rosunit-test-rosunit-test-data\n      - name: Tests\n        run: npm test\n      - uses: actions/upload-artifact@v3\n        with:\n          name: ros2-${{ matrix.ros_distro }}\n          path: .github/artifacts\n```", "answer": "```yaml name: CI\n\non: [push, pull_request]\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  ci:\n    name: ${{ matrix.ros_distro }}\n    if: ${{ github.actor != 'RWT-bot' }}\n    runs-on: ubuntu-latest\n    container: ros:${{ matrix.ros_distro }}-ros-core\n    strategy:\n      fail-fast: false\n      matrix:\n        ros_distro: [melodic, noetic]\n        node_version: [14]\n    env:\n      ROS_DISTRO: ${{ matrix.ros_distro }}\n    steps:\n      - uses: actions/checkout@v3\n        env:\n          TOKEN: \"${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' && secrets.RWT_BOT_PAT || github.token }}\"\n        with:\n          token: ${{ env.TOKEN }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node_version }}\n      - name: Own /github/home\n        run: |\n          chown -hR $(whoami):$(whoami) /github/home\n      - name: Install apt dependencies\n        run: |\n          apt-get update\n          apt-get install -y firefox ros-$ROS_DISTRO-rosbridge-server ros-$ROS_DISTRO-tf2-web-republisher ros-$ROS_DISTRO-common-tutorials ros-$ROS_DISTRO-rospy-tutorials ros-$ROS_DISTRO-actionlib-tutorials\n      - name: Tests\n        run: |\n          bash -c \"source /opt/ros/$ROS_DISTRO/setup.bash && bash test/build.bash\"\n      - uses: stefanzweifel/git-auto-commit-action@v4\n        if: ${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' }}\n        with:\n          commit_message: Update Build\n          file_pattern: 'build/*.js'\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. For all run steps in the workflow, default shell is set to bash. The workflow has one job. The 1st job is named `${{ matrix.ros_distro }}` and its job id is `ci`. This job will run only if the condition(${{ github.actor != 'RWT-bot' }}) is met. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `ros_distro` has 2 values: melodic and noetic. The variable `node_version` has one value: 14. The job creates a Docker container that uses `ros:${{ matrix.ros_distro }}-ros-core` image. The job sets an environment variable to use: `ROS_DISTRO` is set to `${{ matrix.ros_distro }}`. The job `ci` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Own /github/home`. The 4th step is named `Install apt dependencies`. The 5th step is named `Tests`. The 6th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.23911105643390967}, {"id": "63c494287843b612699ff643", "level": "level4", "llm_response": "```yaml name: README to PDF\non:\n  workflow_dispatch:\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 14\n      - run: npm install\n      - name: Commit files\n        run: |\n          npm run build\n          git config --global user.email \"s4h2r13@gmail.com\"\n          git config --global user.name \"s4h2r13\"\n          git add README.md\n          git commit -m \"update README.md\"\n      - name: Push changes\n        uses: ad-m/github-push-action@v0.1.5\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: master\n          author: s4h2r13 <s4h2r13@gmail.com> (auto)\n          commit_message: \"update README.md\"\n          push_branch: master\n```", "answer": "```yaml name: README to PDF\n# This workflow is triggered on pushes to the repository.\non:\n#   push:\n#     branches:\n#       - main\n#     paths:\n#       - 'README.md'\n    \n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          input_dir: .\n          output_dir: .\n          build_html: false\n          table_of_contents: false\n      - uses: actions/upload-artifact@v3\n        with:\n          name: python-engineer-roadmap\n          path: README.pdf\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.pdf\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Generate PDF file\"\n          fi\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n#       - name: Commit changes\n#         uses: EndBug/add-and-commit@v9\n#         with:\n#           default_author: github_actions\n#           add: 'README.pdf'\n#           new_branch: generate-pdf\n#           push: origin generate-pdf --set-upstream --force\n```", "prompt": "Generate a GitHub Workflow named `README to PDF` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Build PDF` and its job id is `converttopdf`. This job will run on ubuntu-latest runner. The job `converttopdf` has 5 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Commit files`. The 5th step is named `Push changes`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"actions/setup-node@v1\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 10, "column": 15, "kind": "action", "snippet": "      - uses: actions/setup-node@v1\n              ^~~~~~~~~~~~~~~~~~~~~", "end_column": 35}]}, "bleu_score": 0.3690528066825146}, {"id": "63c494578052faa2781aa8bb", "level": "level4", "llm_response": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nenv:\n  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n  MAIN_GO_VER: 1.16\n  MAIN_HOST_OS: ubuntu-latest\n\njobs:\n  go_test_and_coverage:\n    runs-on: ${{ matrix.HOST_OS }}\n    strategy:\n      fail-fast: false\n      matrix:\n        GO_VER:\n          - 1.16\n        HOST_OS:\n          - ubuntu-latest\n        include:\n          - GO_VER: 1.16\n            HOST_OS: ubuntu-latest\n\n    steps:\n      - name: Checkout Repositary\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ env.GO_VER }}\n\n      - name: Get Dependencies\n        run: |\n          make deps\n\n      - name: Show Environments\n        run: |\n          echo \"GO_VER: ${{ env.GO_VER }}\"\n          echo \"MAIN_GO_VER: ${{ env.MAIN_GO_VER }}\"\n          echo \"MAIN_HOST_OS: ${{ env.MAIN_HOST_OS }}\"\n          echo \"GO_VER=${{ env.GO_VER }}\"\n\n      - name: Test and Generate Coverage Report\n        run: |\n          make test\n          make coverage\n\n      - name: Upload Coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ env.CODECOV_TOKEN }}\n          file: coverage.out\n          flags: --parallel=6\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branchs:\n    - 'master'\n    - 'feature/**'\n    - 'dev/**'\n\nenv:\n  CODECOV_TOKEN: '2fc0d617-8e9a-47d7-ab58-52fa92b23741'\n  MAIN_GO_VER: '1.16'\n  MAIN_HOST_OS: 'ubuntu-latest'\n\njobs:\n  go_test_and_coverage:\n    strategy:\n      max-parallel: 6\n      matrix:\n        GO_VER: ['1.16']\n        HOST_OS: ['ubuntu-latest']\n\n    runs-on: ${{ matrix.HOST_OS }}\n\n    steps:\n\n    - name: Checkout Repositary\n      uses: actions/checkout@v3\n\n    - name: Setup Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.GO_VER }}\n      id: go\n\n    - name: Get Dependencies\n      run: |\n        echo GO_VER = ${{ matrix.GO_VER }}\n        go get golang.org/x/tools/cmd/cover\n        go install github.com/mattn/goveralls || go get github.com/mattn/goveralls\n        go get .\n\n    - name: Show Environments\n      run: |\n        echo repo status ======== && git status\n        echo GITHUB_REF = ${{ env.GITHUB_REF }}\n        echo GITHUB_REF_NAME = ${{ env.GITHUB_REF_NAME }}\n        echo GO_VER = ${{ matrix.GO_VER }}\n        echo HOST_OS = ${{ matrix.HOST_OS }}\n        which goveralls\n        echo envs ======== && printenv\n\n    - name: Test and Generate Coverage Report\n      run: |\n        go test -v -failfast -cover -covermode=atomic -coverprofile=coverage.out\n\n    # - name: Upload Coverage to Goveralls\n    #   run: |\n    #     goveralls -coverprofile=coverage.out -repotoken ${{ env.COVERALLS_TOKEN }}\n\n    # - name: Upload Coverage to Codecov\n    #   if: ${{ matrix.GO_VER }} == ${{ env.MAIN_GO_VER }}\n    #   run: |\n    #     bash <(curl -s https://codecov.io/bash) -t ${{ env.CODECOV_TOKEN }}\n\n    # - name: Convert Coverage file to lcov format\n    #   uses: jandelgado/gcov2lcov-action@v1.0.8\n    #   with:\n    #     infile: ./coverage.out\n    #     outfile: ./coverage.lcov\n\n    - name: Upload Coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        files: ./coverage.out\n        fail_ci_if_error: true\n        flags: unittests\n        name: codecov-umbrella\n        path_to_write_report: ./coverage/codecov_report.txt\n        verbose: true\n\n    # - name: Coveralls GitHub Action\n    #   uses: coverallsapp/github-action@1.1.3\n    #   with:\n    #     path-to-lcov: ./coverage.lcov\n    #     github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow sets 3 environment variables to use: `CODECOV_TOKEN` is set to `2fc0d617-8e9a-47d7-ab58-52fa92b23741`, `MAIN_GO_VER` is set to `1.16` and `MAIN_HOST_OS` is set to `ubuntu-latest`. The workflow has one job. The job id of the 1st job is `go_test_and_coverage`. This job will run on ${{ matrix.HOST_OS }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `GO_VER` has one value: 1.16. The variable `HOST_OS` has one value: ubuntu-latest. The maximum number of job runs in parallel is set to 6. The job `go_test_and_coverage` has 6 steps. The 1st step is named `Checkout Repositary`. The 2nd step is named `Setup Go` and its id is `go`. The 3rd step is named `Get Dependencies`. The 4th step is named `Show Environments`. The 5th step is named `Test and Generate Coverage Report`. The 6th step is named `Upload Coverage to Codecov`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2789941624225162}, {"id": "63c495297843b61269a05d37", "level": "level4", "llm_response": "```yaml name: pr\n\non: pull_request\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n    with:\n      npmTag: alpha\n      buildScript: build\n      nodeVersion: 18\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      npmToken: ${{ secrets.NPM_TOKEN }}\n\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n    with:\n      domain: https://www.the-guild.dev/graphql/shield/\n      source: Shield\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: pr\non:\n  pull_request:\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n    with:\n      npmTag: alpha\n      buildScript: build\n      nodeVersion: 18\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      npmToken: ${{ secrets.NPM_TOKEN }}\n\n\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n    with:\n      domain: https://www.the-guild.dev/graphql/shield/\n      source: 'Shield'\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `pr` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The job id of the 1st job is `release`. This job will call a reusable workflow located at `the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main`. The job will pass 4 inputs to the called workflow: the input `npmTag` is `alpha`, the input `buildScript` is `build`, the input `nodeVersion` is `18` and the input `packageManager` is `pnpm`. The job will pass 2 secrets to the called workflow: the secret `githubToken` is `${{ secrets.GITHUB_TOKEN }}` and the secret `npmToken` is `${{ secrets.NPM_TOKEN }}`. The job id of the 2nd job is `algolia`. This job will call a reusable workflow located at `the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main`. The job will pass 3 inputs to the called workflow: the input `domain` is `https://www.the-guild.dev/graphql/shield/`, the input `source` is `Shield` and the input `packageManager` is `pnpm`. The job will pass a secret to the called workflow: the secret `githubToken` is `${{ secrets.GITHUB_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8696160820399262}, {"id": "63c4959c7843b61269a08c2d", "level": "level4", "llm_response": "```yaml on:\n  push:\n    paths:\n      - '.github/workflows/install.yml'\n  schedule:\n    - cron: '17 0 * * 1'\n\npermissions:\n  contents: read\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          curl -sSf https://sh.rustup.rs | sh\n          source $HOME/.cargo/bin/rustup.sh\n          rustup update stable\n          rustup install nightly\n          rustup default nightly\n          cargo install --version 0.10.0\n```", "answer": "```yaml permissions:\n  contents: read\n\non:\n  push:\n    paths:\n      - \".github/workflows/install.yml\"\n  schedule:\n    - cron: \"17 0 * * 1\"\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          cargo install cargo-mutants\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/install.yml), the workflow runs. 2) the scheduled time has come: at 12:17 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `cargo-install`. This job will run on ubuntu-latest runner. The job `cargo-install` has one step. The 1st step is named `cargo-install`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3351265748405964}, {"id": "63c4968e1899db58864d3b1c", "level": "level4", "llm_response": "```yaml name: HTML5 check\n\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: HTML5 check\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `HTML5 check` for a GitHub repository whose primary programming language is R. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main or a branch named master. The workflow has one job. The job id of the 1st job is `HTML5-check`. This job will call a reusable workflow located at `easystats/workflows/.github/workflows/html-5-check.yaml@main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7598356856515925}, {"id": "63c496861e3364807577b31b", "level": "level4", "llm_response": "```yaml name: license-check\n\non: [pull_request]\n\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Header\n        uses: amannn/action-license-check@v1.1.0\n        with:\n          check-sha: ${{ github.sha }}\n```", "answer": "```yaml name: license-check\non: pull_request\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Check License Header\n      uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff\n```", "prompt": "Generate a GitHub Workflow named `license-check` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `license`. This job will run on ubuntu-latest runner. The job `license` has 2 steps. The 1st step is named ``. The 2nd step is named `Check License Header`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4888156258282175}, {"id": "63c495c68052faa2781b4231", "level": "level4", "llm_response": "```yaml name: Commented Pull Request\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    name: Pull Request Validator\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Pull Request Validation\n        uses: ./.github/actions/pullRequestValidator\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Commented Pull Request\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    name: Pull Request Validator\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Pull Request Validation\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: startsWith(github.event.comment.body, '/verify')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SKIP_UPDATED: '1'\n```", "prompt": "Generate a GitHub Workflow named `Commented Pull Request` for a GitHub repository whose primary programming language is PowerShell. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The 1st job is named `Pull Request Validator` and its job id is `pullRequestHandler`. This job will run on windows-latest runner. The job `pullRequestHandler` has 2 steps. The 1st step is named ``. The 2nd step is named `Pull Request Validation`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7414827572779655}, {"id": "63c4969e1899db58864d41ef", "level": "level4", "llm_response": "```yaml name: Auto message on pr merge\non:\n  pull_request_target:\n    types: [closed]\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-automate@v1.0.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          message: |\n            @${{ github.actor }} this PR has been automatically merged.\n```", "answer": "```yaml name: Auto message on pr merge\n\non:\n\n  pull_request_target:\n\n    types: [closed]\n\njobs:\n\n  auto-response:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - uses: derekprior/add-autoresponse@master\n\n      env:\n\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      with:\n\n        respondableId: ${{ github.event.pull_request.node_id }}\n\n        response: \"Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).\"\n\n        author: ${{ github.event.pull_request.user.login }}\n\n        exemptedAuthors: \"Amit366\"\n```", "prompt": "Generate a GitHub Workflow named `Auto message on pr merge` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a pull request is closed. The workflow has one job. The job id of the 1st job is `auto-response`. This job will run on ubuntu-latest runner. The job `auto-response` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2569621819828534}, {"id": "63c4966b33b087f6bde2bde4", "level": "level4", "llm_response": "```yaml name: tests\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n    branches:\n      - master\n      - develop\n\njobs:\n  tests:\n    name: ${{ matrix.name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        name: ${{ matrix.name }}\n        python: [3.11-dev, 3.10, 3.9, pypy-3.9]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        tox: [py311, py310, py39, pypy39]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n      - name: install system dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libffi-dev libssl-dev\n      - name: update pip\n        run: |\n          pip install --upgrade pip\n          pip install --upgrade setuptools\n      - uses: actions/cache@v3\n        with:\n          path: ~/pyenv\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyenv-version') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n      - run: |\n          tox -e ${{ matrix.tox }}\n```", "answer": "```yaml name: tests\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n    branches:\n      - master\n      - develop\n\njobs:\n  tests:\n    name: ${{ matrix.name }}\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - {name: '3.11-dev', python: '3.11-dev', os: ubuntu-latest, tox: py311}\n          - {name: Linux, python: '3.10', os: ubuntu-latest, tox: py310}\n          - {name: Windows, python: '3.10', os: windows-latest, tox: py310}\n          - {name: Mac, python: '3.10', os: macos-latest, tox: py310}\n          - {name: '3.9', python: '3.9', os: ubuntu-latest, tox: py39}\n          - {name: 'PyPy', python: 'pypy-3.9', os: ubuntu-latest, tox: pypy39}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python }}\n      - name: install system dependencies\n        run: sudo apt-get install libxml2-dev libxslt1-dev --yes\n        if: ${{ matrix.python == '3.11-dev' }}\n      - name: update pip\n        run: |\n          pip install -U wheel\n          pip install -U setuptools\n          python -m pip install -U pip\n      - run: pip install tox\n      - run: tox -e ${{ matrix.tox }}\n```", "prompt": "Generate a GitHub Workflow named `tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named develop. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master or a branch named develop. The workflow has one job. The 1st job is named `${{ matrix.name }}` and its job id is `tests`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. For each object in the [{'name': '3.11-dev', 'python': '3.11-dev', 'os': 'ubuntu-latest', 'tox': 'py311'}, {'name': 'Linux', 'python': '3.10', 'os': 'ubuntu-latest', 'tox': 'py310'}, {'name': 'Windows', 'python': '3.10', 'os': 'windows-latest', 'tox': 'py310'}, {'name': 'Mac', 'python': '3.10', 'os': 'macos-latest', 'tox': 'py310'}, {'name': '3.9', 'python': '3.9', 'os': 'ubuntu-latest', 'tox': 'py39'}, {'name': 'PyPy', 'python': 'pypy-3.9', 'os': 'ubuntu-latest', 'tox': 'pypy39'}] list, the key:value pairs in the object will be added to each of the matrix combinations if none of the key:value pairs overwrite any of the original matrix values. If the object cannot be added to any of the matrix combinations, a new matrix combination will be created instead. The job `tests` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `install system dependencies`. The 4th step is named `update pip`. The 5th step is named ``. The 6th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "context \"matrix\" is not allowed here. available contexts are \"github\", \"inputs\", \"needs\", \"vars\". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details", "filepath": "../tmp/test.yml", "line": 19, "column": 19, "kind": "expression", "snippet": "        name: ${{ matrix.name }}\n                  ^~~~~~~~~~~", "end_column": 29}, {"message": "property \"name\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 19, "column": 19, "kind": "expression", "snippet": "        name: ${{ matrix.name }}\n                  ^~~~~~~~~~~", "end_column": 29}]}, "bleu_score": 0.33625078948438664}, {"id": "63c495e48052faa2781b4f0b", "level": "level4", "llm_response": "```yaml name: Generate a changelog\n\non:\n  schedule:\n    - cron: \"0 3 * * *\"\n  workflow_dispatch:\n    inputs:\n      from:\n        description: \"generate from this release/commit (defaults to the latest release)\"\n        required: false\n        default: ${{ github.repository_owner }}/latest\n      to:\n        description: \"generate until this release/commit (defaults to latest development)\"\n        required: false\n        default: \"HEAD\"\n\njobs:\n  generate-changelog:\n    if: ${{ github.repository_owner == 'Mudlet' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Mudlet repository\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.inputs.from }}\n      - name: Install Lua 5.1.5\n        uses: bundler/setup-lua@v1\n        with:\n          lua-version: 5.1.5\n      - name: Install Luarocks\n        uses: bundler/setup-luarocks@v1\n      - name: Install Lua dependencies\n        run: |\n          cd mudlet\n          make install\n          make bootstrap\n      - name: Calculate from and to releases\n        run: |\n          cd mudlet\n          git log --pretty=format:'%h %ad %s' | grep -v 'HEAD' | sort -u | cut -d' ' -f1 > mudlet-releases\n      - name: Generate changelog\n        run: |\n          cd mudlet\n          ./mudlet --changelog\n      - name: Upload changelog as html\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./changelog\n          publish_branch: mudlet-changelog\n```", "answer": "```yaml name: Generate a changelog\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'Generate from this release/commit (defaults to the latest release)'\n        required: false\n        # default is calculated dynamically\n      to:\n        description: 'Generate until this release/commit (defaults to latest development)'\n        required: false\n        default: 'HEAD'\n\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository_owner == 'Mudlet' }}\n\n    steps:\n    - name: Checkout Mudlet repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Install Lua 5.1.5\n      uses: leafo/gh-actions-lua@v9\n      with:\n        luaVersion: \"5.1.5\"\n\n    - name: Install Luarocks\n      uses: leafo/gh-actions-luarocks@v4\n\n    - name: Install Lua dependencies\n      run: |\n        luarocks install argparse\n        luarocks install lunajson\n\n    - name: Calculate from and to releases\n      run: |\n        if [[ -z \"${{ github.event.inputs.from }}\" ]] ; then\n            FROM_RELEASE=$(git tag --sort=committerdate | tail -1)\n        else\n            FROM_RELEASE=${{ github.event.inputs.from }}\n        fi\n\n        if [[ -z \"${{ github.event.inputs.to }}\" ]] ; then\n            TO_RELEASE=\"HEAD\"\n        else\n            TO_RELEASE=${{ github.event.inputs.to }}\n        fi\n\n        echo \"Generating a changelog from $FROM_RELEASE until $TO_RELEASE\"\n\n        echo \"FROM_RELEASE=$FROM_RELEASE\" >> $GITHUB_ENV\n        echo \"TO_RELEASE=$TO_RELEASE\" >> $GITHUB_ENV\n\n    - name: Generate changelog\n      run: |\n        changelog=$(lua CI/generate-changelog.lua -m release --start-commit $FROM_RELEASE --end-commit $TO_RELEASE)\n        echo \"$changelog\" >> changelog.html\n\n        echo \"[INFO] Changelog generated (from $FROM_RELEASE to $TO_RELEASE). If it's too big, Github won't show it, so it's available as an artifact as well at: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#artifacts\"\n        echo \"[INFO] Changelog is:\"\n        echo $changelog\n\n    - name: Upload changelog as html\n      uses: actions/upload-artifact@v3\n      with:\n        name: changelog.html\n        path: changelog.html\n```", "prompt": "Generate a GitHub Workflow named `Generate a changelog` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am. 2) someone manually triggers the workflow. This workflow receives 2 inputs: from-this input represents generate from this release/commit (defaults to the latest release) and it is optional; to-this input represents generate until this release/commit (defaults to latest development), it is optional and its default value is HEAD. The workflow has one job. The job id of the 1st job is `generate-changelog`. This job will run only if the condition(${{ github.repository_owner == 'Mudlet' }}) is met. This job will run on ubuntu-latest runner. The job `generate-changelog` has 7 steps. The 1st step is named `Checkout Mudlet repository`. The 2nd step is named `Install Lua 5.1.5`. The 3rd step is named `Install Luarocks`. The 4th step is named `Install Lua dependencies`. The 5th step is named `Calculate from and to releases`. The 6th step is named `Generate changelog`. The 7th step is named `Upload changelog as html`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.29599340814519853}, {"id": "63c495ca8052faa2781b43be", "level": "level4", "llm_response": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Bump version and push tag\n        id: tagging\n        uses: qt-project/qmake-bump-version-action@v1.0.0\n        with:\n          version: ${{ github.event.repository.default_branch }}\n          commit_message: \"Update to ${{ github.event.repository.default_branch }}\"\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n        with:\n          version: \"latest\"\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Login to DockerHub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Login to Quay.io\n        uses: docker/login-action@v2\n        with:\n          registry: quay.io\n          username: ${{ secrets.QUAYIO_USERNAME }}\n          password: ${{ secrets.QUAYIO_TOKEN }}\n      - name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          cache-from: type=registry,repository=quay.io/qt/qtbase\n          cache-to: type=registry,repository=quay.io/qt/qtbase\n          tags: qtbase\n          file: .github/Dockerfile\n      - name: Build Changelog\n        id: build_changelog\n        uses: qt-project/qmake-changelog-action@v1.1.0\n        with:\n          commit_message: \"Update to ${{ github.event.repository.default_branch }}\"\n      - name: Create Github Release\n        uses: actions/github-script@v6\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { github } = require('github');\n            const fs = require('fs');\n            const path = require('path');\n\n            const token = github.getOctokit(github.context.accessToken).auth().token;\n            const { data: { releases } } = await github.rest.repos.listReleases({ owner: 'qt', repo: 'qtbase' });\n            const { data: { head_commit: { message: releaseMessage } } } = await github.rest.repos.getRelease({ owner: 'qt', repo: 'qtbase', release: releases[0].id });\n\n            fs.writeFileSync(path.join(__dirname, 'CHANGELOG.md'), releaseMessage);\n\n            github.rest.repos.createRelease({ ...github.context.repo, owner: 'qt', repo: 'qtbase', data: { body: releaseMessage, name: 'v' + releaseMessage.split(' ')[0] + ' (released)', draft: true } });\n```", "answer": "```yaml name: Release\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n      - name: Bump version and push tag\n        id: tagging\n        uses: anothrNick/github-tag-action@1.52.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          INITIAL_VERSION: 1.0.0\n          DEFAULT_BUMP: none\n      -\n        name: \"Set up QEMU\"\n        if: steps.tagging.outputs.part\n        uses: docker/setup-qemu-action@v2\n      -\n        name: \"Set up Docker Buildx\"\n        if: steps.tagging.outputs.part\n        uses: docker/setup-buildx-action@v2\n      -\n        name: \"Login to DockerHub\"\n        if: steps.tagging.outputs.part\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      -\n        name: \"Login to Quay.io\"\n        if: steps.tagging.outputs.part\n        uses: docker/login-action@v2\n        with:\n          registry: quay.io\n          username: ${{ secrets.QUAY_BOT_USERNAME }}\n          password: ${{ secrets.QUAY_BOT_PASSWORD }}\n      -\n        name: \"Build and push\"\n        if: steps.tagging.outputs.part\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x\n          tags: |\n            docker.io/kiwigrid/k8s-sidecar:latest\n            docker.io/kiwigrid/k8s-sidecar:${{ steps.tagging.outputs.tag }}\n            quay.io/kiwigrid/k8s-sidecar:latest\n            quay.io/kiwigrid/k8s-sidecar:${{ steps.tagging.outputs.tag }}\n      - name: \"Build Changelog\"\n        if: steps.tagging.outputs.part\n        id: build_changelog\n        uses: mikepenz/release-changelog-builder-action@v3\n        with:\n          configuration: \".github/workflows/release-notes-config.json\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: \"Create Github Release\"\n        if: steps.tagging.outputs.part\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token\n        with:\n          tag_name: ${{ steps.tagging.outputs.tag }}\n          release_name: v${{ steps.tagging.outputs.tag }}\n          body: ${{ steps.build_changelog.outputs.changelog }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 9 steps. The 1st step is named ``. The 2nd step is named `Bump version and push tag` and its id is `tagging`. The 3rd step is named `Set up QEMU`. The 4th step is named `Set up Docker Buildx`. The 5th step is named `Login to DockerHub`. The 6th step is named `Login to Quay.io`. The 7th step is named `Build and push` and its id is `docker_build`. The 8th step is named `Build Changelog` and its id is `build_changelog`. The 9th step is named `Create Github Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"version\" is not defined in action \"docker/setup-qemu-action@v2\". available inputs are \"image\", \"platforms\"", "filepath": "../tmp/test.yml", "line": 24, "column": 11, "kind": "action", "snippet": "          version: \"latest\"\n          ^~~~~~~~", "end_column": 18}, {"message": "input \"github_token\" is not defined in action \"actions/github-script@v6\". available inputs are \"debug\", \"github-token\", \"previews\", \"result-encoding\", \"retries\", \"retry-exempt-status-codes\", \"script\", \"user-agent\"", "filepath": "../tmp/test.yml", "line": 55, "column": 11, "kind": "action", "snippet": "          github_token: ${{ secrets.GITHUB_TOKEN }}\n          ^~~~~~~~~~~~~", "end_column": 23}]}, "bleu_score": 0.2531168137916505}, {"id": "63c4967e33b087f6bde2c5c4", "level": "level4", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27\n        uses: ./.github/actions/install-and-build\n        with:\n          dist: 'dist'\n          assets: 'assets'\n\n      - name: Deploy \ud83d\ude80\n        uses: ./.github/actions/deploy\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          destination: 'https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}'\n          branch: 'master'\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Build and Deploy\non:\n  push:\n    branches:\n    - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n        \n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist #  The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build-and-deploy`. This job will run on ubuntu-latest runner. The job `build-and-deploy` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install and Build \ud83d\udd27`. The 3rd step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"token\" is duplicated in \"with\" section. previously defined at line:24,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 27, "column": 11, "kind": "syntax-check", "snippet": "          token: ${{ secrets.GITHUB_TOKEN }}\n          ^~~~~~", "end_column": 16}]}, "bleu_score": 0.23918346671628343}, {"id": "63c496926fc19abdf9c9cd93", "level": "level4", "llm_response": "```yaml name: \"Contributor License Agreement (CLA)\"\non:\n  pull_request:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/CLA-checker@v3\n        with:\n          # If you want to run a custom script, you can do so here or in a step\n          # github.token: The token that has the scope `actions-cool-github-token` to run the check\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Contributor License Agreement (CLA)\n\non:\n  pull_request_target:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          cla-token: ${{ secrets.CLA_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Contributor License Agreement (CLA)` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) a pull request is created or a pull request's head branch is updated. 2) a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `cla`. This job will run only if the condition((github.event.issue.pull_request \n  && !github.event.issue.pull_request.merged_at\n  && contains(github.event.comment.body, 'signed')\n) \n|| (github.event.pull_request && !github.event.pull_request.merged)\n) is met. This job will run on ubuntu-latest runner. The job `cla` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5101762207935363}, {"id": "63c496836fc19abdf9c9c720", "level": "level4", "llm_response": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496741e3364807577abc2", "level": "level4", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run only if the condition(github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot') is met. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495f37843b61269a0b108", "level": "level4", "llm_response": "```yaml name: \"PR Approval Bypass Notifier\"\n\non:\n  pull_request:\n    types: [closed]\n    branches:\n      - main\n\npermissions:\n  pull-requests: read\n\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: github.event.action == 'closed' && github.event.pull_request.user.login != 'github-actions[bot]'\n        run: |\n          echo \"No approval was given to this PR. Please do so and re-open.\"\n          exit 1\n      - name: Slack Notification\n        uses: slackapi/action-slack-notifier@v1.0.0\n        with:\n          token: ${{ secrets.SLACK_TOKEN }}\n          channel: ${{ secrets.SLACK_CHANNEL }}\n          message: \"PR ${{ github.event.number }} was closed. Please make sure to do so and reopen.\"\n```", "answer": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types:\n      - closed\n    branches:\n      - main\npermissions:\n  pull-requests: read\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: ${{ github.event.pull_request.merged }}\n        env:\n          AUTH_HEADER: 'Authorization: token ${{ secrets.GITHUB_TOKEN }}'\n          JSON_HEADER: 'Content-Type: application/json'\n          REVIEWS_URL: 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews'\n        run: |\n          curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n            | jq -e '. | map({user: .user.login, state: .state})\n                       | reduce .[] as $x ({}; .[$x.user] = $x.state)\n                       | to_entries | map(.value)\n                       | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n      - name: Slack Notification\n        if: ${{ failure() }}\n        run: |\n          jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n```", "prompt": "Generate a GitHub Workflow named `PR Approval Bypass Notifier` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `approval`. This job will run on ubuntu-latest runner. The job `approval` has 2 steps. The 1st step is named `Fail If No Approval`. The 2nd step is named `Slack Notification`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.1686343607848537}, {"id": "63c4957d8052faa2781b22a0", "level": "level4", "llm_response": "```yaml name: \"Close stale\"\n\non:\n  schedule:\n    - cron: \"0 1 * * *\"\n\njobs:\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `Close stale` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 01:00 am. The workflow has one job. The job id of the 1st job is `stale`. This job will call a reusable workflow located at `knative/actions/.github/workflows/stale.yaml@main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3850322886878713}, {"id": "63c4959f7843b61269a08d83", "level": "level4", "llm_response": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.2.0]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "answer": "```yaml name: CompatHelper\n\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.2.0]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "prompt": "Generate a GitHub Workflow named `CompatHelper` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `CompatHelper`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `julia-version` has one value: 1.2.0. The variable `julia-arch` has one value: x86. The variable `os` has one value: ubuntu-latest. The job `CompatHelper` has 2 steps. The 1st step is named `Pkg.add(\"CompatHelper\")`. The 2nd step is named `CompatHelper.main()`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8393626616405105}, {"id": "63c494298052faa2781a98fa", "level": "level4", "llm_response": "```yaml name: Check test times\n\non: [push, pull_request]\n\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      - name: Setup\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n      - name: Build\n        run: make\n      - name: Run tests\n        run: make test\n      - name: Save test times\n        run: |\n          echo \"Test times (CPU): $(grep -oP '\\d+(?:\\.\\d+)?[a-z]+.*ms' time | awk '{print $1}' | sort -n | uniq -c)\" >> test_times\n          echo \"Test times (Wall clock): $(grep -oP '\\d+(?:\\.\\d+)?[a-z]+.*ms' time -f \"%H:%M:%S\")\" >> test_times\n      - name: Check test times\n        run: |\n          if [ -f test_times ]; then\n            diff test_times $(git diff --name-only HEAD | grep -v test_times | sort -n | uniq -c | sort -nr) 2>/dev/null; then\n              echo \"Test times match.\"\n            else\n              echo \"Test times do not match.\"\n            fi\n          else\n            echo \"Test times not saved.\"\n          fi\n```", "answer": "```yaml name: Check test times\non: [push, pull_request]\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Cache\n      uses: hendrikmuhs/ccache-action@v1.2\n      with:\n        key: linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}\n        restore-keys: |\n          linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-\n          linux-ci-build-times-${{ github.ref }}-\n          linux-ci-build-times-refs/heads/master-\n          linux-ci-build-times-\n    - name: Setup\n      run: |\n        sudo apt update\n        sudo apt install -y libboost-dev autoconf automake libtool ccache\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n    - name: Save test times\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-reports\n        path: ./all.xml\n    - name: Check test times\n      run: |\n        python ./tools/check_test_times.py\n```", "prompt": "Generate a GitHub Workflow named `Check test times` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check-test-times`. This job will run on ubuntu-latest runner. The job `check-test-times` has 7 steps. The 1st step is named ``. The 2nd step is named `Cache`. The 3rd step is named `Setup`. The 4th step is named `Build`. The 5th step is named `Run tests`. The 6th step is named `Save test times`. The 7th step is named `Check test times`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.25146892782469876}, {"id": "63c496981899db58864d3f6f", "level": "level4", "llm_response": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    types:\n      - completed\n  pull_request:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    # Every 30 minutes, every hour\n    - cron: \"30 * * * *\"\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    runs-on: ubuntu-latest\n    if: startsWith(github.repository, 'Homebrew/') && (\n      github.event.label.name == 'ci-requeue' ||\n      github.event.label.name == 'ci-retry' ||\n      github.event.label.name == 'ci-skip-appcast' ||\n      github.event.label.name == 'ci-skip-install' ||\n      github.event.label.name == 'ci-syntax-only' ||\n      !github.event.label.name\n    )\n    steps:\n      - name: Re-run CI workflow\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n        if: startsWith(github.repository, 'Homebrew/')\n```", "answer": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows:\n      - CI\n    types:\n      - completed\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    - cron: '30 */3 * * *' # every 3 hours (30 minutes past the hour)\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    if: >\n      startsWith(github.repository, 'Homebrew/') &&\n      (\n        github.event.label.name == 'ci-requeue' ||\n        github.event.label.name == 'ci-retry' ||\n        github.event.label.name == 'ci-skip-appcast' ||\n        github.event.label.name == 'ci-skip-install' ||\n        github.event.label.name == 'ci-syntax-only' ||\n        !github.event.label.name\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          once-label: ci-requeue\n          continuous-label: ci-retry\n          trigger-labels: ci-skip-appcast,ci-skip-install,ci-syntax-only\n          workflow: ci.yml\n```", "prompt": "Generate a GitHub Workflow named `Re-run Workflow` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) the workflow named CI is completed. 2) a pull request is closed, a label is added to a pull request or a label is removed from a pull request. 3) the scheduled time has come: at 30 minutes past the hour, every 3 hours. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `rerun-workflow`. This job will run only if the condition(startsWith(github.repository, 'Homebrew/') && (\n  github.event.label.name == 'ci-requeue' ||\n  github.event.label.name == 'ci-retry' ||\n  github.event.label.name == 'ci-skip-appcast' ||\n  github.event.label.name == 'ci-skip-install' ||\n  github.event.label.name == 'ci-syntax-only' ||\n  !github.event.label.name\n)\n) is met. This job will run on ubuntu-latest runner. The job `rerun-workflow` has one step. The 1st step is named `Re-run CI workflow`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 29: could not find expected ':'", "filepath": "../tmp/test.yml", "line": 29, "column": 0, "kind": "syntax-check", "snippet": "    )", "end_column": 0}]}, "bleu_score": 0.5177689187082443}, {"id": "63c493bc7843b612699fd432", "level": "level4", "llm_response": "```yaml name: CI\n\non: [pull_request, push]\n\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: install\n      run: npm ci\n    - name: XO\n      run: npm run xo\n\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: install\n      run: npm ci\n    - name: build\n      run: npm run build\n```", "answer": "```yaml env: {}\n\n# FILE GENERATED WITH: npx ghat fregante/ghatemplates/node\n# SOURCE: https://github.com/fregante/ghatemplates\n# OPTIONS: {\"exclude\":[\"jobs.Test\"]}\n\nname: CI\non:\n  - pull_request\n  - push\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci || npm install\n      - name: XO\n        run: npx xo\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci || npm install\n      - name: build\n        run: npm run build\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) a commit or tag is pushed, or a repository is cloned. The workflow has 2 jobs. The job id of the 1st job is `Lint`. This job will run on ubuntu-latest runner. The job `Lint` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `install`. The 4th step is named `XO`. The job id of the 2nd job is `Build`. This job will run on ubuntu-latest runner. The job `Build` has 3 steps. The 1st step is named ``. The 2nd step is named `install`. The 3rd step is named `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6716441932309151}, {"id": "63c494368052faa2781a9e20", "level": "level4", "llm_response": "```yaml name: build\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  pull_request:\n\npermissions:\n  contents: write\n  id-token: write\n  packages: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Cache Go modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      - name: CI\n        run: make ci\n      - uses: actions/upload-artifact@v3\n        with:\n          name: goreleaser\n          path: |\n            go.sum\n            pkg/mod\n            bin\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: build\n\non:\n  push:\n    branches:\n      - 'main'\n    tags:\n      - 'v*'\n  pull_request:\n\npermissions:\n   contents: write\n   id-token: write\n   packages: write\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      -\n        name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n      -\n        name: Cache Go modules\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      -\n        name: CI\n        run: |\n          go mod tidy\n          go test -v ./...\n          go build -o tt .\n      - uses: sigstore/cosign-installer@v2.8.1\n      -\n        name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        if: success() && startsWith(github.ref, 'refs/tags/')\n        with:\n          distribution: goreleaser-pro\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_PAT }}\n          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}\n          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n          COSIGN_PWD: ${{ secrets.COSIGN_PWD }}\n          AUR_KEY: ${{ secrets.AUR_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a tag whose name matches v*. 2) there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope, write access is granted to the GITHUB_TOKEN in the `id-token` scope and write access is granted to the GITHUB_TOKEN in the `packages` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 6 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up Go`. The 3rd step is named `Cache Go modules`. The 4th step is named `CI`. The 5th step is named ``. The 6th step is named `Run GoReleaser`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.41828550112360224}, {"id": "63c495167843b61269a0553c", "level": "level4", "llm_response": "```yaml name: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}\n```", "answer": "```yaml # Run the workflow that adds new tickets that are either:\n# - labelled \"DEPR\"\n# - title starts with \"[DEPR]\"\n# - body starts with \"Proposal Date\" (this is the first template field)\n# to the org-wide DEPR project board\n\nname: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Add newly created DEPR issues to the DEPR project board` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `routeissue`. This job will call a reusable workflow located at `openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master`. The job will pass 3 secrets to the called workflow: the secret `GITHUB_APP_ID` is `${{ secrets.GRAPHQL_AUTH_APP_ID }}`, the secret `GITHUB_APP_PRIVATE_KEY` is `${{ secrets.GRAPHQL_AUTH_APP_PEM }}` and the secret `SLACK_BOT_TOKEN` is `${{ secrets.SLACK_ISSUE_BOT_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8866029039778043}, {"id": "63c495e88052faa2781b50cc", "level": "level4", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run only if the condition(github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot') is met. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496876fc19abdf9c9c8bb", "level": "level4", "llm_response": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: '*/30 * * * *'\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          npm install\n\n      - name: Checkout Data Source Repo\n        run: |\n          git config --global user.email \"noreply@noreply.com\"\n          git config --global user.name \"noreply\"\n          git remote set-url origin https://github.com/ethereum/feeds.git\n          git fetch --prune --prune-tags\n\n      - name: Process Data\n        run: |\n          npx scripts/feeds:process-feed-data\n          npx scripts/feeds:publish-feed-data\n\n      - name: Deploy to Firebase\n        uses: FirebaseExtended/actions/firebase-deploy@v1\n        with:\n          project: ${{ secrets.FIREBASE_PROJECT }}\n          credential: ${{ secrets.FIREBASE_AUTH_CREDENTIALS }}\n          token: ${{ secrets.FIREBASE_AUTH_TOKEN }}\n          source: ./build\n          destination: https://feeds-ethereum.firebaseio.com/\n```", "answer": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n      - name: Install Dependencies\n        run: yarn\n      - name: Checkout Data Source Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n        with:\n          repository: smartcontractkit/reference-data-directory\n          path: data-source\n          token: ${{ secrets.GH_API_KEY }}\n      # - name: Read Data Source\n      #   run: cat data-source/package.json\n      - name: Process Data\n        run: yarn process\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91\n        with:\n\n          args: -c firebase-addresses.json deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n          PROJECT_ID: cl-docs-addresses\n```", "prompt": "Generate a GitHub Workflow named `Build and Publish Feed Resources` for a GitHub repository whose primary programming language is Solidity. This workflow will be triggered by an event: the scheduled time has come: every 30 minutes. The workflow has one job. The 1st job is named `Update latest feed data from source repo` and its job id is `build-feeds`. This job will run on ubuntu-latest runner. The job `build-feeds` has 5 steps. The 1st step is named `Checkout Repo`. The 2nd step is named `Install Dependencies`. The 3rd step is named `Checkout Data Source Repo`. The 4th step is named `Process Data`. The 5th step is named `Deploy to Firebase`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4249632954435435}, {"id": "63c494298052faa2781a98f7", "level": "level4", "llm_response": "```yaml name: Microsoft C++ Code Analysis\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\nenv:\n  build: ${{ github.workspace }}/build\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: windows-2022\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Setup\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.10'\n      - name: Configure CMake\n        uses: ./.github/actions/configure-cmake\n      - name: Initialize MSVC Code Analysis\n        id: run-analysis\n        uses: ./.github/actions/init-code-analysis\n        with:\n          run_analysis: ${{ steps.run-analysis.outputs.run_analysis }}\n      - name: Upload SARIF to GitHub\n        uses: actions/upload-artifact@v3\n        with:\n          name: sarif\n          path: sarif/*.sarif\n      - name: Upload SARIF as an Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: sarif\n          path: sarif\n```", "answer": "```yaml name: Microsoft C++ Code Analysis\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\nenv:\n  # Path to the CMake build directory.\n  build: '${{ github.workspace }}/build'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: windows-2022\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup\n        run: |\n          $Url = \"https://boostorg.jfrog.io/artifactory/main/release/1.75.0/binaries/boost_1_75_0-msvc-14.2-64.exe\"\n          (New-Object System.Net.WebClient).DownloadFile($Url, \"$env:TEMP\\boost.exe\")\n          Start-Process -Wait -FilePath \"$env:TEMP\\boost.exe\" \"/SILENT\",\"/SP-\",\"/SUPPRESSMSGBOXES\",\"/DIR=C:\\local\\boost-1.75.0\"\n\n      - name: Configure CMake\n        env:\n          BOOST_ROOT: C:\\local\\boost-1.75.0\n        run: cmake -B ${{ env.build }} -DQL_USE_STD_CLASSES=ON\n\n      - name: Initialize MSVC Code Analysis\n        uses: microsoft/msvc-code-analysis-action@v0.1.1\n        # Provide a unique ID to access the sarif output path\n        id: run-analysis\n        env:\n          CAExcludePath: C:\\local\\boost-1.75.0\n        with:\n          cmakeBuildDirectory: ${{ env.build }}\n          buildConfiguration: Release\n          ruleset: '${{ github.workspace }}/.msvc-analysis.ruleset'\n\n      - name: Upload SARIF to GitHub\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{ steps.run-analysis.outputs.sarif }}\n\n      - name: Upload SARIF as an Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: sarif-file\n          path: ${{ steps.run-analysis.outputs.sarif }}\n\n```", "prompt": "Generate a GitHub Workflow named `Microsoft C++ Code Analysis` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow sets an environment variable to use: `build` is set to `${{ github.workspace }}/build`. The workflow has one job. The 1st job is named `Analyze` and its job id is `analyze`. This job will run on windows-2022 runner. The job `analyze` has 6 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Setup`. The 3rd step is named `Configure CMake`. The 4th step is named `Initialize MSVC Code Analysis` and its id is `run-analysis`. The 5th step is named `Upload SARIF to GitHub`. The 6th step is named `Upload SARIF as an Artifact`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"run-analysis\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 28, "column": 29, "kind": "expression", "snippet": "          run_analysis: ${{ steps.run-analysis.outputs.run_analysis }}\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 67}]}, "bleu_score": 0.46096092994395765}, {"id": "63c494a48052faa2781ac54a", "level": "level4", "llm_response": "```yaml name: cspell-action\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cspell/gh-action@v1\n```", "answer": "```yaml name: cspell-action\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: streetsidesoftware/cspell-action@v2\n```", "prompt": "Generate a GitHub Workflow named `cspell-action` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `cspell`. This job will run on ubuntu-latest runner. The job `cspell` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9426151476815119}, {"id": "63c4968b33b087f6bde2caaa", "level": "level4", "llm_response": "```yaml name: AutoBuild-Dev\n\non: [workflow_dispatch, push]\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n      - name: Verify .NET Core\n        run: dotnet --version\n\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore\n\n      - name: Publish ASFEnhance on Windows\n        run: dotnet publish -c Release -p:PublishSingleFile=true -p:PublishOutputPath=../ASFEnhance -p:ConfigureArguments=\"--no-build\" -p:Configuration=Release -p:Version=$(dotnet --version) --no-restore\n\n      - name: Upload ASFEnhance-zh-Hans\n        uses: actions/upload-artifact@v3\n        with:\n          name: ASFEnhance-zh-Hans\n          path: ASFEnhance\\bin\\Release\\net6.0\\publish\\ASFEnhance.dll\n\n      - name: Upload ASFEnhance-en-US\n        uses: actions/upload-artifact@v3\n        with:\n          name: ASFEnhance-en-US\n          path: ASFEnhance\\bin\\Release\\net6.0\\publish\\ASFEnhance.dll\n```", "answer": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: windows-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.0.2\n        with:\n          submodules: recursive\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v2.1.0\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n      - name: Verify .NET Core\n        run: dotnet --info\n\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore ASFEnhance -p:ContinuousIntegrationBuild=true --nologo\n\n      - name: Publish ASFEnhance on Windows\n        shell: pwsh\n        run: |\n          $script = \"./build.ps1\";\n          Set-Location ${{ github.workspace }};\n          powershell $script;\n\n      - name: Upload ASFEnhance-zh-Hans\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-zh-Hans\n          path: dist/ASFEnhance-zh-Hans.zip\n\n      - name: Upload ASFEnhance-en-US\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-en-US\n          path: dist/ASFEnhance-en-US.zip\n```", "prompt": "Generate a GitHub Workflow named `AutoBuild-Dev` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) a commit or tag is pushed, or a repository is cloned. The workflow sets an environment variable to use: `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `publish`. This job will run on windows-latest runner. The job `publish` has 7 steps. The 1st step is named `Checkout code`. The 2nd step is named `Setup .NET Core`. The 3rd step is named `Verify .NET Core`. The 4th step is named `Restore packages in preparation for ASFEnhance publishing`. The 5th step is named `Publish ASFEnhance on Windows`. The 6th step is named `Upload ASFEnhance-zh-Hans`. The 7th step is named `Upload ASFEnhance-en-US`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5183719746829646}, {"id": "63c494b78052faa2781acd9d", "level": "level4", "llm_response": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    workflows: [\"Continuous Integration\"]\n    types:\n      - completed\n\njobs:\n  merge-me:\n    name: Merge me!\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - name: Merge me!\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: \"Merge me!\"\n          branch: \"merge-me\"\n          commit-message: \"Merge me!\"\n          author: ${{ github.actor }}\n          base: ${{ github.event.workflow_run.head_branch }}\n          labels: merge-me\n          delete-branch: true\n          delete-branch-when-updated: true\n          delete-branch-when-updated-branch: merge-me\n          delete-branch-when-updated-label: merge-me\n```", "answer": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Continuous Integration'\n\njobs:\n  merge-me:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n    timeout-minutes: 5\n```", "prompt": "Generate a GitHub Workflow named `Merge me!` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: the workflow named Continuous Integration is completed. The workflow has one job. The 1st job is named `Merge me!` and its job id is `merge-me`. This job will run only if the condition(${{ github.event.workflow_run.conclusion == 'success' }}) is met. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 5. The job `merge-me` has one step. The 1st step is named `Merge me!`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"delete-branch-when-updated\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 26, "column": 11, "kind": "action", "snippet": "          delete-branch-when-updated: true\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 37}, {"message": "input \"delete-branch-when-updated-branch\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 27, "column": 11, "kind": "action", "snippet": "          delete-branch-when-updated-branch: merge-me\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 44}, {"message": "input \"delete-branch-when-updated-label\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 28, "column": 11, "kind": "action", "snippet": "          delete-branch-when-updated-label: merge-me\n          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 43}]}, "bleu_score": 0.28013354403150365}, {"id": "63c494a37843b61269a027ed", "level": "level4", "llm_response": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ${{ matrix.platform }}\n    strategy:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Build\n        run: |\n          go build -v -o ./bin ./cmd/github-action\n      - name: Test\n        run: |\n          go test -v ./...\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\n\nname: CI\n\njobs:\n  test:\n    ## We want to define a strategy for our job\n    strategy:\n      ## this will contain a matrix of all the combinations\n      ## we wish to test again:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n\n    ## Defines the platform for each test run\n    runs-on: ${{ matrix.platform }}\n\n    ## the steps that will be run through for each version and platform\n    ## combination\n    steps:\n    ## sets up go based on the version\n    - name: Install Go\n      uses: actions/setup-go@v3.3.0\n      with:\n        go-version: ${{ matrix.go-version }}\n\n    ## checks out our code locally, so we can work with the files\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n\n    ## runs go test ./...\n    - name: Build\n      run: go build ./...\n\n    ## runs go test ./...\n    - name: Test\n      run: go test ./...\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `test`. This job will run on ${{ matrix.platform }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `go-version` has one value: 1.17.x. The variable `platform` has 3 values: ubuntu-latest, macos-latest and windows-latest. The job `test` has 4 steps. The 1st step is named `Install Go`. The 2nd step is named `Checkout code`. The 3rd step is named `Build`. The 4th step is named `Test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.553606420469383}, {"id": "63c493b87843b612699fd399", "level": "level4", "llm_response": "```yaml name: release-please\non:\n  push:\n    branches:\n      - master\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: release-please/action@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          prerelease: true\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\nname: release-please\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: node\n          package-name: release-please-action\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. This job will run on ubuntu-latest runner. The job `release-please` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.40188875403207003}, {"id": "63c4941e7843b612699ff1f7", "level": "level4", "llm_response": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ env.GITHUB_TOKEN }}\n          script: |\n            const { title, body } = context.payload.pull_request;\n            const prId = context.payload.pull_request.number;\n            const { demoUrl } = await github.rest.pulls.get({ pr: prId });\n\n            const prBody = await github.rest.github.updateDiscussion({\n              comment_id: body,\n              comment: {\n                body: `@${context.actor} \nThe demo link is [${demoUrl}](${demoUrl}). If you want to open this in a new tab, you can click [here](${demoUrl}).\n<br>\n${body}\n`,\n              },\n              issue_number: prId,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n            });\n\n            console.log(prBody.data.body);\n```", "answer": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    permissions:\n      pull-requests: write\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const pullRequestId = context.payload.pull_request.number\n            const pullRequestBranch = context.payload.pull_request.head.ref\n\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: pullRequestId,\n              body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n            });\n```", "prompt": "Generate a GitHub Workflow named `Demo link` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a pull request is created. The workflow has one job. The 1st job is named `Add demo link to PR description` and its job id is `add_demo_link`. This job will run on ubuntu-latest runner. The job `add_demo_link` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `add_demo_link`. The job sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. The job `add_demo_link` has one step. The 1st step is named `Update PR description`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 29: could not find expected ':'", "filepath": "../tmp/test.yml", "line": 29, "column": 0, "kind": "syntax-check", "snippet": "The demo link is [${demoUrl}](${demoUrl}). If you want to open this in a new tab, you can click [here](${demoUrl}).", "end_column": 0}]}, "bleu_score": 0.3258524804360579}, {"id": "63c494608052faa2781aabf4", "level": "level4", "llm_response": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Check go.mod files\n        run: |\n          go mod tidy\n          go mod verify\n```", "answer": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version: 1.17\n\n      - name: Check go.mod files\n        shell: bash\n        run: |\n          cd gomod-sync\n          go run main.go check\n```", "prompt": "Generate a GitHub Workflow named `go.mod check` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) there is activity relating to a pull request. The workflow has one job. The 1st job is named `go.mod check` and its job id is `check`. This job will run on ubuntu-latest runner. The job `check` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Check go.mod files`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5933102505277597}, {"id": "63c494228052faa2781a95a5", "level": "level4", "llm_response": "```yaml name: snyk-pr\n\non:\n  pull_request:\n    branches: [master]\n\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: checkout action\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: PR\n        uses: snyk/action@v2\n        with:\n          token: ${{ secrets.SNYK_GITHUB_TOKEN }}\n          github-token: ${{ secrets.SNYK_GITHUB_TOKEN }}\n          env: snyk\n```", "answer": "```yaml name: snyk-pr\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.pull_request.head.ref }}\n        fetch-depth: 0\n\n    - name: checkout action\n      uses: actions/checkout@v3\n      with:\n        repository: snowflakedb/whitesource-actions\n        token: ${{ secrets.WHITESOURCE_ACTION_TOKEN }}\n        path: whitesource-actions\n\n    - name: PR\n      uses: ./whitesource-actions/snyk-pr\n      env:\n        PR_TITLE: ${{ github.event.pull_request.title }}\n      with:\n        jira_token: ${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}\n        gh_token: ${{ secrets.GITHUB_TOKEN }}\n        amend: false # true if you want the commit to be amended with the JIRA number\n```", "prompt": "Generate a GitHub Workflow named `snyk-pr` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `whitesource`. This job will run only if the condition(${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}) is met. This job will run on ubuntu-latest runner. The job `whitesource` has 3 steps. The 1st step is named `checkout`. The 2nd step is named `checkout action`. The 3rd step is named `PR`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2750427797188697}, {"id": "63c493c37843b612699fd587", "level": "level4", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    # Only the head branch should trigger the workflow\n    # https://github.community/t/what-to-do-with-the-failure-of-the-pull-request-event/27415/10\n    branches-ignore: [main]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        with:\n          tag_name: vNext\n          release_name: vNext\n          draft: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is TSQL. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) a pull request is created, a previously closed pull request is reopened or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `update_release_draft`. This job will run on ubuntu-latest runner. The job `update_release_draft` has one step. The 1st step is named `Draft Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5687509699933385}, {"id": "63c495238052faa2781afbf5", "level": "level4", "llm_response": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Thank you for your contribution! Let us know if you have any questions or issues.'\n        pr-message: 'Thank you for your contribution! Let us know if you have any questions or issues.'\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs'\n        pr-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs'\n```", "prompt": "Generate a GitHub Workflow named `Greetings` for a GitHub repository whose primary programming language is Objective-C. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) activity related to an issue occurs. The workflow has one job. The job id of the 1st job is `greeting`. This job will run on ubuntu-latest runner. The job `greeting` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.24482092582522297}, {"id": "63c496956fc19abdf9c9ce1c", "level": "level4", "llm_response": "```yaml name: Licensed\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    name: Check licenses\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Install licensed\n        run: |\n          npm i -g licensed\n      - run: |\n          licensed --list\n          licensed --check\n```", "answer": "```yaml name: Licensed\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    name: Check licenses\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: npm\n      - run: npm ci\n      - name: Install licensed\n        run: |\n          cd $RUNNER_TEMP\n          curl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\n          sudo tar -xzf licensed.tar.gz\n          sudo mv licensed /usr/local/bin/licensed\n      - run: licensed status\n```", "prompt": "Generate a GitHub Workflow named `Licensed` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Check licenses` and its job id is `test`. This job will run on ubuntu-latest runner. The job `test` has 5 steps. The 1st step is named ``. The 2nd step is named `Set Node.js 16.x`. The 3rd step is named ``. The 4th step is named `Install licensed`. The 5th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3725023982012085}, {"id": "63c495e58052faa2781b4f4c", "level": "level4", "llm_response": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 */6 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: actions/stale@v5\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 5 days'\n          stale-pr-message: 'This PR is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 5 days'\n          days-before-stale: 60\n          days-before-close: 5\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n```", "answer": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '0 */6 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        days-before-pr-stale: 14\n        days-before-pr-close: 14\n        stale-pr-label: 'inactive'\n        close-pr-label: 'auto-close'\n        exempt-pr-labels: 'keep-open'\n        stale-pr-message: >\n          This pull request has been inactive for 14 days. \n          If you are finished with your changes, don't forget to sign off. See the [contributor guide](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-pull-request-automation?branch=main) for instructions. \n          If this PR is inactive for 14 more days, it will be closed automatically. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n        close-pr-message: >\n          This pull request has been inactive for 28 days. At this time, we are closing the PR.  \n          If you decide to continue working on your change, you can reopen the PR and continue working. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n          \n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the scheduled time has come: every 6 hours. The workflow has one job. The job id of the 1st job is `stale`. This job will run on ubuntu-latest runner. The job `stale` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `stale`. The job `stale` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22985356516729774}, {"id": "63c4951f7843b61269a0593c", "level": "level4", "llm_response": "```yaml name: docker-push\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v2\n        with:\n          images: |\n            docker.io/doppler/doppler\n            docker.io/doppler/doppler\n            docker.io/doppler/doppler\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: setup buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: login to docker hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_HUB_USERNAME }}\n          password: ${{ secrets.DOCKER_HUB_TOKEN }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfile\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n```", "answer": "```yaml name: docker-push\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          images: fsouza/fake-gcs-server\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: setup buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2.1.0\n\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```", "prompt": "Generate a GitHub Workflow named `docker-push` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The job id of the 1st job is `build-and-push`. This job will run on ubuntu-latest runner. The job `build-and-push` has 6 steps. The 1st step is named ``. The 2nd step is named `docker meta` and its id is `meta`. The 3rd step is named `setup qemu`. The 4th step is named `setup buildx` and its id is `buildx`. The 5th step is named `login to docker hub`. The 6th step is named `build and push`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"docker/metadata-action@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 17, "column": 15, "kind": "action", "snippet": "        uses: docker/metadata-action@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 39}]}, "bleu_score": 0.47858182345967815}, {"id": "63c495407843b61269a06679", "level": "level4", "llm_response": "```yaml name: Tests\n\non: [pull_request, workflow_dispatch]\n\njobs:\n  tests:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: [3.6, 3.7, 3.8, 3.9, 3.10, 3.11-dev]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Linux packages for Qt 5 support\n        run: sudo apt-get install qt5-default qttools5-dev\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies and local packages\n        run: |\n          pip install --upgrade pip\n          pip install -e .\n      - name: Create clean test directory\n        run: mkdir -p tests/test_tools/test_qt5\n      - name: Test Traits package\n        run: |\n          pytest tests/test_tools/test_qt5\n```", "answer": "```yaml name: Tests\n\non:\n- pull_request\n- workflow_dispatch\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11-dev']\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install Linux packages for Qt 5 support\n      run: |\n        sudo apt-get update\n        sudo apt-get install qt5-default\n        sudo apt-get install libxkbcommon-x11-0\n        sudo apt-get install libxcb-icccm4\n        sudo apt-get install libxcb-image0\n        sudo apt-get install libxcb-keysyms1\n        sudo apt-get install libxcb-randr0\n        sudo apt-get install libxcb-render-util0\n        sudo apt-get install libxcb-xinerama0\n      if: matrix.os == 'ubuntu-latest'\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies and local packages\n      run: |\n        python -m pip install .[test]\n    - name: Create clean test directory\n      run: |\n        mkdir testdir\n    - name: Test Traits package\n      uses: GabrielBB/xvfb-action@v1\n      with:\n        working-directory: testdir\n        run: python -m unittest discover -v traits\n```", "prompt": "Generate a GitHub Workflow named `Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `tests`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `os` has 3 values: ubuntu-latest, windows-latest and macos-latest. The variable `python-version` has 6 values: 3.6, 3.7, 3.8, 3.9, 3.10 and 3.11-dev. The job `tests` has 6 steps. The 1st step is named ``. The 2nd step is named `Install Linux packages for Qt 5 support`. The 3rd step is named `Set up Python ${{ matrix.python-version }}`. The 4th step is named `Install dependencies and local packages`. The 5th step is named `Create clean test directory`. The 6th step is named `Test Traits package`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3978744619892859}, {"id": "63c495448052faa2781b0abc", "level": "level4", "llm_response": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n      - 'release'\n  pull_request:\n    branches-ignore:\n      - 'release'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Launch MongoDB\n        uses: mongodb/setup-mongodb-action@v2.0.1\n        with:\n          version: 6.0\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: yarn install, build, and test\n        run: yarn install && yarn build && yarn test\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          files: 'coverage/lcov.info'\n          flags: 'no-color'\n```", "answer": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n    - release\n  pull_request:\n    branches-ignore:\n    - release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n    - uses: actions/checkout@master\n    - name: Launch MongoDB\n      uses: wbari/start-mongoDB@master\n      with:\n        mongoDBVersion: 5\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@master\n      with:\n        node-version: ${{ matrix.node-version }}\n    - name: yarn install, build, and test\n      run: |\n        yarn install\n        yarn run build\n        yarn run test:cov\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@master\n      with:\n        token: ${{secrets.CODECOV_TOKEN}}\n      env:\n        CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node Blog CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event unless the push event is to: a branch named release. 2) The workflow would run whenever there is a pull_request event unless the pull request is targeting: a branch named release. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `node-version` has one value: 16.x. The job `build` has 5 steps. The 1st step is named ``. The 2nd step is named `Launch MongoDB`. The 3rd step is named `Use Node.js ${{ matrix.node-version }}`. The 4th step is named `yarn install, build, and test`. The 5th step is named `Upload coverage to Codecov`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.585508136380736}, {"id": "63c496561899db58864d23cc", "level": "level4", "llm_response": "```yaml name: Molecule - MySQL\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/mysql.*/**\n      - roles/mysql/**\n      # Plugins\n      - plugins/filter/mysql_config.py\n      - plugins/filter/staten.py\n      - plugins/lookup/templates_exclusive.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  mysql:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: mysql\n      versions: ${{ inputs.versions }}\n```", "answer": "```yaml name: Molecule - MySQL\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.mysql.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/mysql.*/**\n      - roles/mysql/**\n      # Plugins\n      - plugins/filter/mysql_config.py\n      - plugins/filter/staten.py\n      - plugins/lookup/templates_exclusive.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  mysql:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: mysql\n      versions: '[5.6, 5.7, \"8.0\", \"galera.3.mysql_wsrep.5.6\", \"galera.4.10.mysql_wsrep.8.0.26\", \"mariadb.10.3\", \"mariadb.10.4\", \"mariadb.10.5\", \"mariadb.10.6\"]'\n```", "prompt": "Generate a GitHub Workflow named `Molecule - MySQL` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.mysql.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/mysql.*/**, roles/mysql/**, plugins/filter/mysql_config.py, plugins/filter/staten.py or plugins/lookup/templates_exclusive.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `mysql`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 3 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}`, the input `scenario` is `mysql` and the input `versions` is `[5.6, 5.7, \"8.0\", \"galera.3.mysql_wsrep.5.6\", \"galera.4.10.mysql_wsrep.8.0.26\", \"mariadb.10.3\", \"mariadb.10.4\", \"mariadb.10.5\", \"mariadb.10.6\"]`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"versions\" is not defined in object type {debug: bool}", "filepath": "../tmp/test.yml", "line": 29, "column": 21, "kind": "expression", "snippet": "      versions: ${{ inputs.versions }}\n                    ^~~~~~~~~~~~~~~", "end_column": 35}]}, "bleu_score": 0.8003679838333473}, {"id": "63c495878052faa2781b26e9", "level": "level4", "llm_response": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: actions-cool/auto-close-issue@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ignoreLabel: do-not-autoclose\n          rules: |\n            [\n              {\n                \"type\": \"title\",\n                \"regex\": \".*<(Source Name|short description)>*\",\n                \"message\": \"You did not fill out the description in the title\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n                \"message\": \"The acknowledgment section was not removed\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n                \"message\": \"The requested information was not filled out\"\n              }\n            ]\n```", "prompt": "Generate a GitHub Workflow named `Issue closer` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: an issue is opened, the title or body on an issue is edited or a closed issue is reopened. The workflow has one job. The job id of the 1st job is `autoclose`. This job will run on ubuntu-latest runner. The job `autoclose` has one step. The 1st step is named `Autoclose issues`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.05799956092510797}, {"id": "63c495257843b61269a05b78", "level": "level4", "llm_response": "```yaml name: Flatpak dependency updates\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - uses: codelyze/flatpak-action@v1\n```", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```", "prompt": "Generate a GitHub Workflow named `Flatpak dependency updates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `flatpak-external-data-checker`. This job will run on ubuntu-20.04 runner. The job `flatpak-external-data-checker` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.06304102292270367}, {"id": "63c494a27843b61269a02770", "level": "level4", "llm_response": "```yaml name: Doc Site\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency:\n      group: ci-${{ github.ref }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install and Build \ud83d\udd27\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n        env:\n          YARN_ENABLE_CACHE: true\n          YARN_ENABLE_CACHE_TIMEOUT: 2\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs\n          github_branch_name: gh-pages\n          publish_dir: ./docs\n```", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Doc Site\n\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install --legacy-peer-deps\n          npm run docs:build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist/site # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Doc Site` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build-and-deploy-site`. This job will run on ubuntu-latest runner. Only a single job using the ci-${{ github.ref }} concurrency group will run at a time. The job `build-and-deploy-site` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install and Build \ud83d\udd27`. The 3rd step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "input \"github_branch_name\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 32, "column": 11, "kind": "action", "snippet": "          github_branch_name: gh-pages\n          ^~~~~~~~~~~~~~~~~~~", "end_column": 29}, {"message": "key \"publish_dir\" is duplicated in \"with\" section. previously defined at line:31,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 33, "column": 11, "kind": "syntax-check", "snippet": "          publish_dir: ./docs\n          ^~~~~~~~~~~~", "end_column": 22}]}, "bleu_score": 0.1801502166986243}, {"id": "63c495bf8052faa2781b3ef6", "level": "level4", "llm_response": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n    paths: [ .github/workflows/mol_tree2_lib.yml, tree2/** ]\n  pull_request:\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/mol_tree2_lib\n```", "answer": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches: \n      - master\n    paths:\n      - '.github/workflows/mol_tree2_lib.yml'\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: \"0 7 * * *\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    \n    steps:\n    \n    - uses: hyoo-ru/mam_build@master2\n      with:\n        package: mol\n        modules: tree2/lib\n    \n    - uses: JS-DevTools/npm-publish@v1\n      if: ${{ github.ref == 'refs/heads/master' }}\n      with:\n        token: ${{ secrets.NPM_AUTH_TOKEN }}\n        package: ./mol/tree2/lib/-/package.json\n```", "prompt": "Generate a GitHub Workflow named `mol_tree2_lib` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/mol_tree2_lib.yml or tree2/**), the workflow runs. 3) there is activity relating to a pull request. 4) the scheduled time has come: at 07:00 am. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.262699638897232}, {"id": "63c496361e33648075779191", "level": "level4", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. This job will run on ubuntu-latest runner. The job `update_release_draft` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496561899db58864d23d2", "level": "level4", "llm_response": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n```", "answer": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Ntp` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.ntp.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/ntp/** or roles/ntp/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `ntp`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `ntp`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4963f1e3364807577960f", "level": "level4", "llm_response": "```yaml name: \"Validate Gradle Wrapper\"\non: [pull_request]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "answer": "```yaml name: \"Validate Gradle Wrapper\"\n\non: [ pull_request ]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "prompt": "Generate a GitHub Workflow named `Validate Gradle Wrapper` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Validation` and its job id is `validation`. This job will run on ubuntu-latest runner. The job `validation` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7643838122940672}, {"id": "63c4946e8052faa2781ab27f", "level": "level4", "llm_response": "```yaml name: test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\npermissions:\n  contents: read\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest]\n        terraform: ['1.0.0', '0.15.5', '0.14.11', '0.13.7', '0.12.31']\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: test\n        run: go test ./...\n\n  testacc:\n    runs-on: ubuntu-latest\n    environment:\n      name: terraform\n      url: http://localhost:8080\n    strategy:\n      matrix:\n        terraform: ['1.0.0', '0.15.5', '0.14.11', '0.13.7', '0.12.31']\n    steps:\n      - uses: actions/checkout@v3\n      - name: docker build\n        run: docker build -t terraform-provider-azure -f Dockerfile .\n      - name: terraform --version\n        run: terraform --version\n      - name: testacc\n        run: terraform -v\n        env:\n          TERRAFORM_VERSION: ${{ matrix.terraform }}\n```", "answer": "```yaml name: test\npermissions:\n  contents: read\n\non:\n  push:\n    branches:\n    - master\n  pull_request:\n    branches:\n    - master\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 10\n    strategy:\n      matrix:\n        os:\n        - ubuntu-latest\n        - macOS-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-go@v3\n      with:\n        go-version-file: '.go-version'\n        cache: true\n    - name: test\n      run: make test\n  testacc:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    strategy:\n      matrix:\n        terraform:\n        - 1.0.0\n        - 0.15.5\n        - 0.14.11\n        - 0.13.7\n        - 0.12.31\n    env:\n      TERRAFORM_VERSION: ${{ matrix.terraform }}\n    steps:\n    - uses: actions/checkout@v3\n    - name: docker build\n      run: docker-compose build\n    - name: terraform --version\n      run: docker-compose run --rm tfschema terraform --version\n    - name: testacc\n      run: docker-compose run --rm tfschema make testacc\n```", "prompt": "Generate a GitHub Workflow named `test` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The job id of the 1st job is `test`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `os` has 2 values: ubuntu-latest and macOS-latest. The maximum number of minutes to run the job is 10. The job `test` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `test`. The job id of the 2nd job is `testacc`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `terraform` has 5 values: 1.0.0, 0.15.5, 0.14.11, 0.13.7 and 0.12.31. The job sets an environment variable to use: `TERRAFORM_VERSION` is set to `${{ matrix.terraform }}`. The maximum number of minutes to run the job is 10. The job `testacc` has 4 steps. The 1st step is named ``. The 2nd step is named `docker build`. The 3rd step is named `terraform --version`. The 4th step is named `testacc`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.44593979902517045}, {"id": "63c4951f7843b61269a0593e", "level": "level4", "llm_response": "```yaml name: goreleaser\non:\n  push:\n    tags:\n      - '*'\npermissions:\n  contents: write\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: fetch tags\n        run: |\n          git fetch --tags\n          git for-each-ref --format='%(refname:short)' refs/remotes/ | grep -v '^refs/tags/' | xargs -I {} git for-each-ref --format='%(refname:short)' refs/remotes/{{}}/ | grep -v '^refs/tags/' | xargs -I {} git fetch --tags --prefix=refs/tags/{} {}\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - run: |\n          # Update the version in the Makefile\n          sed -i 's/^VERSION=.*$/VERSION=${{ github.ref_name }}/' Makefile\n          make release\n      - run: |\n          echo \"goreleaser version ${{ github.event.workflow_run.head_commit.message }}\" >> $GITHUB_ENV\n```", "answer": "```yaml name: goreleaser\non:\n  push:\n    tags:\n      - \"*\"\n\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n\n      - name: fetch tags\n        run: git fetch --tags --force\n\n      - uses: actions/setup-go@v3.3.0\n        with:\n          go-version: 1.19\n\n      - uses: goreleaser/goreleaser-action@v3.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release -f ci/.goreleaser.yml\n```", "prompt": "Generate a GitHub Workflow named `goreleaser` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches *. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `release`. This job will run on ubuntu-latest runner. The job `release` has 4 steps. The 1st step is named ``. The 2nd step is named `fetch tags`. The 3rd step is named ``. The 4th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.24959173899298684}, {"id": "63c4967e33b087f6bde2c5c1", "level": "level4", "llm_response": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-major' }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{ github.event.pull_request.html_url }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml ---\nname: Dependabot auto-merge\n\"on\": pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: >-\n          ${{\n          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||\n          steps.metadata.outputs.update-type == 'version-update:semver-minor'\n          }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```", "prompt": "Generate a GitHub Workflow named `Dependabot auto-merge` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope and write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `dependabot`. This job will run only if the condition(${{ github.actor == 'dependabot[bot]' }}) is met. This job will run on ubuntu-latest runner. The job `dependabot` has 2 steps. The 1st step is named `Dependabot metadata` and its id is `metadata`. The 2nd step is named `Enable auto-merge for Dependabot PRs`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7563877671080205}, {"id": "63c495207843b61269a059a2", "level": "level4", "llm_response": "```yaml name: Labeler\non: [pull_request_target]\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler/blob/master/README.md\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. This job will run on ubuntu-latest runner. The job `label` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8282477531331041}, {"id": "63c494378052faa2781a9e70", "level": "level4", "llm_response": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Protobuf format\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Lint shell, Docker and protobuf\n        run: make lint\n```", "answer": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    branches: [ main ]\n    types: [opened, synchronize, reopened, ready_for_review]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          # Full git history isn't needed to get a proper list of changed files within `super-linter`\n          fetch-depth: 0\n\n      - name: Protobuf format\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          clang-format-version: '14'\n  \n      - name: Lint shell, Docker and protobuf\n        uses: github/super-linter/slim@v4\n        env:\n          VALIDATE_ALL_CODEBASE: false\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Select file types to lint. Python and Rust linters are configured separately.\n          VALIDATE_SHELL_SHFMT: true\n          #\n          # disable hadolint \n          # https://github.com/hadolint/hadolint/issues/821\n          # VALIDATE_DOCKERFILE_HADOLINT: true\n          # DOCKERFILE_HADOLINT_FILE_NAME: .github/config/.hadolint.yaml\n          #\n          # Enable after fixing proto lint issues.\n          # VALIDATE_PROTOBUF: true\n```", "prompt": "Generate a GitHub Workflow named `Miscellaneous Lint` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named devnet. 2) a pull request is created, a pull request's head branch is updated, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `lint`. This job will run on ubuntu-latest runner. The job `lint` has 3 steps. The 1st step is named `Checkout Code`. The 2nd step is named `Protobuf format`. The 3rd step is named `Lint shell, Docker and protobuf`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5371600777503507}, {"id": "63c496561899db58864d23b6", "level": "level4", "llm_response": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "answer": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Docker` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.docker.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/docker/**, roles/docker/**, plugins/filter/json.py, plugins/filter/staten.py or plugins/lookup/docker_applications.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `docker`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `docker`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496851899db58864d36f3", "level": "level4", "llm_response": "```yaml name: Test with Pre-commit\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools\n          python -m pip install --upgrade pre-commit\n      - name: Lint with pre-commit\n        run: |\n          pre-commit run --all-files\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Test with Pre-commit\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n          pre-commit install-hooks\n      - name: Lint with pre-commit\n        run: pre-commit run --all-files\n```", "prompt": "Generate a GitHub Workflow named `Test with Pre-commit` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `python-version` has one value: 3.10. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Python ${{ matrix.python-version }}`. The 3rd step is named `Install dependencies`. The 4th step is named `Lint with pre-commit`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6399226893124909}, {"id": "63c495e58052faa2781b4fae", "level": "level4", "llm_response": "```yaml name: Self-assign\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: (github.event.comment.body == '#take' ||\n      github.event.comment.body == '#self-assign') &&\n      (!github.event.issue.pull_request)\n    steps:\n      - uses: gaurav1911/github-actions-self-assign@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          comment: ${{ github.event.comment.body }}\n```", "answer": "```yaml # Allow users to automatically tag themselves to issues\n\nname: Self-assign\non:\n  issue_comment:\n    types: created\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: >-\n      (github.event.comment.body == '#take' ||\n       github.event.comment.body == '#self-assign') &&\n       (!github.event.issue.pull_request)\n    steps:\n      - run: |\n          echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\n          curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n```", "prompt": "Generate a GitHub Workflow named `Self-assign` for a GitHub repository whose primary programming language is Jupyter Notebook. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `one`. This job will run only if the condition((github.event.comment.body == '#take' ||\n github.event.comment.body == '#self-assign') &&\n (!github.event.issue.pull_request)) is met. This job will run on ubuntu-latest runner. The job `one` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34130523124808415}, {"id": "63c496561899db58864d23c2", "level": "level4", "llm_response": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n```", "answer": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Java` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.java.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/java/** or roles/java/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `java`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `java`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4957c8052faa2781b2239", "level": "level4", "llm_response": "```yaml name: Add Issues/PRs to TF Provider DevEx team board\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: Add Content to project\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set Issue to 'Priority = Triage Next'\n        uses: jorgeb997/add-issue-to-team-board@v1.2.0\n        with:\n          project_id: 1097455\n          team_id: 1097456\n          token: ${{ secrets.TF_PROVIDER_DEVEX_TEAM_BOT_TOKEN }}\n      - name: Set Pull Request to 'Priority = Triage Next'\n        uses: jorgeb997/add-issue-to-team-board@v1.2.0\n        with:\n          project_id: 1097455\n          team_id: 1097456\n          token: ${{ secrets.TF_PROVIDER_DEVEX_TEAM_BOT_TOKEN }}\n```", "answer": "```yaml # Based on https://github.com/leonsteinhaeuser/project-beta-automations\n\nname: \"Add Issues/PRs to TF Provider DevEx team board\"\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    # NOTE: The way content is added to project board is equivalent to an \"upsert\".\n    # Calling it multiple times will be idempotent.\n    #\n    # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\n    #\u00a0to see the reasoning behind using `pull_request_target` instead of `pull_request`\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: \"Add Content to project\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Set Issue to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'issues'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.issue.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n      - name: \"Set Pull Request to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'pull_request_target'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.pull_request.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n```", "prompt": "Generate a GitHub Workflow named `Add Issues/PRs to TF Provider DevEx team board` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) an issue is opened or a closed issue is reopened. 2) a pull request is created, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow has one job. The 1st job is named `Add Content to project` and its job id is `add-content-to-project`. This job will run on ubuntu-latest runner. The job `add-content-to-project` has 2 steps. The 1st step is named `Set Issue to 'Priority = Triage Next'`. The 2nd step is named `Set Pull Request to 'Priority = Triage Next'`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2844550043936774}, {"id": "63c49697b008460c1df15590", "level": "level4", "llm_response": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build the file\n        run: npm run build\n      - name: Upload zip to release\n        uses: actions/upload-release-action@v3\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          body: |\n            This is the release build of HACS, please check the [release page](https://hacs.io/releases) for the latest updates and any bug fixes.\n      - name: HACS Action\n        uses: hacs/action@v2.0.0\n        with:\n          action: release\n          version: ${{ github.ref }}\n          release: true\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      # Build\n      - name: Build the file\n        run: |\n          cd /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card\n          npm install\n          npm run build\n\n      # Upload build file to the releas as an asset.\n      - name: Upload zip to release\n        uses: svenstaro/upload-release-action@v1-release\n\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card/dist/thermostat-dark-card.js\n          asset_name: thermostat-dark-card.js\n          tag: ${{ github.ref }}\n          overwrite: true\n      - name: HACS Action\n        uses: \"hacs/action@main\"\n        with:\n          category: \"plugin\"\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow has one job. The 1st job is named `Prepare release` and its job id is `release`. This job will run on ubuntu-latest runner. The job `release` has 4 steps. The 1st step is named ``. The 2nd step is named `Build the file`. The 3rd step is named `Upload zip to release`. The 4th step is named `HACS Action`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.41182982703195886}, {"id": "63c4955b8052faa2781b1498", "level": "level4", "llm_response": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: [1.16]\n    steps:\n      - name: Setup\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Prerequisites\n        run: |\n          curl -fsSL https://raw.githubusercontent.com/gohugoio/hugo/master/install.sh | bash\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Dependencies\n        run: go get -t ./...\n      - name: Lint\n        run: make lint\n      - name: Vet\n        run: make vet\n      - name: Test\n        run: make test\n      - name: Coverage\n        run: make coverage\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```", "prompt": "Generate a GitHub Workflow named `CI v2` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `go` has one value: 1.16. The job `build` has 8 steps. The 1st step is named `Setup`. The 2nd step is named `Prerequisites`. The 3rd step is named `Checkout`. The 4th step is named `Dependencies`. The 5th step is named `Lint`. The 6th step is named `Vet`. The 7th step is named `Test`. The 8th step is named `Coverage`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4157056401079371}, {"id": "63c494b87843b61269a03054", "level": "level4", "llm_response": "```yaml name: autoupdate\non:\n  push:\n    branches:\n      - 'version-bump/**'\n      - 'dependabot/**'\n      - 'bot/**'\n      - 'all-contributors/**'\njobs:\n  autoupdate-for-bot:\n    name: Autoupdate autoapproved PR created in the upstream\n    if: startsWith(github.repository, 'asyncapi/')\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoupdating\n        uses: asyncapi/autoapprove@v1.1.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: 'autoupdate'\n          comment: 'This PR was autoupdated with autoupdate'\n          only-if: 'false'\n          remove-label: 'no-asyncapi-bot'\n          remove-label: 'no-asyncapi-bot-pr'\n          remove-label: 'no-asyncapi-bot-branch'\n          remove-label: 'no-asyncapi-bot-PR'\n          remove-label: 'no-asyncapi-bot-branch-pr'\n```", "answer": "```yaml # This action is centrally managed in https://github.com/asyncapi/.github/\r\n# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo\r\n\r\n# This workflow is designed to work with:\r\n# - autoapprove and automerge workflows for dependabot and asyncapibot.\r\n# - special release branches that we from time to time create in upstream repos. If we open up PRs for them from the very beginning of the release, the release branch will constantly update with new things from the destination branch they are opened against\r\n\r\n# It uses GitHub Action that auto-updates pull requests branches, whenever changes are pushed to their destination branch.\r\n# Autoupdating to latest destination branch works only in the context of upstream repo and not forks\r\n\r\nname: autoupdate\r\n\r\non:\r\n  push:\r\n    branches-ignore:  \r\n      - 'version-bump/**'\r\n      - 'dependabot/**'\r\n      - 'bot/**'\r\n      - 'all-contributors/**'\r\n\r\njobs:\r\n  autoupdate-for-bot:\r\n    if: startsWith(github.repository, 'asyncapi/')\r\n    name: Autoupdate autoapproved PR created in the upstream\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Autoupdating\r\n        uses: docker://chinthakagodawita/autoupdate-action:v1\r\n        env:\r\n          GITHUB_TOKEN: '${{ secrets.GH_TOKEN_BOT_EVE }}'\r\n          PR_FILTER: \"labelled\"\r\n          PR_LABELS: \"autoupdate\"\r\n          PR_READY_STATE: \"ready_for_review\"\r\n          MERGE_CONFLICT_ACTION: \"ignore\"\r\n```", "prompt": "Generate a GitHub Workflow named `autoupdate` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: The workflow would run whenever there is a push event unless the push event is to: a branch whose name matches version-bump/**, a branch whose name matches dependabot/**, a branch whose name matches bot/** or a branch whose name matches all-contributors/**. The workflow has one job. The 1st job is named `Autoupdate autoapproved PR created in the upstream` and its job id is `autoupdate-for-bot`. This job will run only if the condition(startsWith(github.repository, 'asyncapi/')) is met. This job will run on ubuntu-latest runner. The job `autoupdate-for-bot` has one step. The 1st step is named `Autoupdating`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "key \"remove-label\" is duplicated in \"with\" section. previously defined at line:22,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 23, "column": 11, "kind": "syntax-check", "snippet": "          remove-label: 'no-asyncapi-bot-pr'\n          ^~~~~~~~~~~~~", "end_column": 23}, {"message": "key \"remove-label\" is duplicated in \"with\" section. previously defined at line:22,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 24, "column": 11, "kind": "syntax-check", "snippet": "          remove-label: 'no-asyncapi-bot-branch'\n          ^~~~~~~~~~~~~", "end_column": 23}, {"message": "key \"remove-label\" is duplicated in \"with\" section. previously defined at line:22,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 25, "column": 11, "kind": "syntax-check", "snippet": "          remove-label: 'no-asyncapi-bot-PR'\n          ^~~~~~~~~~~~~", "end_column": 23}, {"message": "key \"remove-label\" is duplicated in \"with\" section. previously defined at line:22,col:11. note that this key is case insensitive", "filepath": "../tmp/test.yml", "line": 26, "column": 11, "kind": "syntax-check", "snippet": "          remove-label: 'no-asyncapi-bot-branch-pr'\n          ^~~~~~~~~~~~~", "end_column": 23}]}, "bleu_score": 0.40763344416166597}, {"id": "63c494877843b61269a01c1e", "level": "level4", "llm_response": "```yaml name: Prepare Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Push Tag\n        run: |\n          git config user.name \"$GITHUB_ACTOR\"\n          git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n          git tag ${{ github.event.inputs.version }}\n          git push --tags\n```", "answer": "```yaml \nname: Prepare Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version Number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Push Tag\n      run: | \n            echo \"version is ${{ github.event.inputs.version }}\"\n            git config user.name \"GitHub Actions Bot\"\n            git config user.email \"<>\"\n            sed -i \"/is_master/d\" fxmanifest.lua\n            sed -i \"/^version/c\\version '${{ github.event.inputs.version }}'\" fxmanifest.lua\n            git add .\n            git commit -m \"${{ github.event.inputs.version }}\"\n            git tag -a ${{ github.event.inputs.version }} -m \"Version ${{ github.event.inputs.version }}\"\n            sed -i \"/^version/ais_master 'yes'\" fxmanifest.lua\n            git add .\n            git commit -m \"Update Version\"\n            git push --follow-tags\n```", "prompt": "Generate a GitHub Workflow named `Prepare Release` for a GitHub repository whose primary programming language is Lua. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: version-this input represents version number and it must be supplied. The workflow has one job. The job id of the 1st job is `create`. This job will run on ubuntu-latest runner. The job `create` has 2 steps. The 1st step is named ``. The 2nd step is named `Push Tag`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2183945975469553}, {"id": "63c496581e3364807577a144", "level": "level4", "llm_response": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch:\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Remove ALL artifacts\n        run: |\n          ./remove-all-artifacts.sh\n```", "answer": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch: # only manually\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          age: '0 days'\n          skip-tags: true\n          skip-recent: 0\n```", "prompt": "Generate a GitHub Workflow named `Remove ALL artifacts` for a GitHub repository whose primary programming language is C. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `remove-all-artifacts`. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 10. The job `remove-all-artifacts` has one step. The 1st step is named `Remove ALL artifacts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4732054056250306}, {"id": "63c493ea8052faa2781a7e17", "level": "level4", "llm_response": "```yaml name: master\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [1.31.0, stable]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v3\n        with:\n          components: rustc, rustfmt, cargo\n      - run: cargo test --all\n      - run: cargo test --all-features\n```", "answer": "```yaml name: master\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0' # 00:00 Sunday\n\njobs:\n\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [1.31.0, stable]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ matrix.rust }}\n      - run: cargo build\n      - run: ./ci/test_full.sh\n```", "prompt": "Generate a GitHub Workflow named `master` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The 1st job is named `Test` and its job id is `test`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `rust` has 2 values: 1.31.0 and stable. The job `test` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6707950673667719}, {"id": "63c495668052faa2781b18dd", "level": "level4", "llm_response": "```yaml name: release management\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: crazy-max/release-draft-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          draft: false\n          prerelease: true\n          release-name: \"rust-up ${GITHUB_REF}\"\n          prerelease-tag: \"v${GITHUB_REF#refs/heads/}\"\n          tag: \"v${GITHUB_REF#refs/heads/}\"\n```", "answer": "```yaml name: release management\non:\n  push:\n    branches: [master]\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `release management` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `update-draft-release`. This job will run on ubuntu-latest runner. The job `update-draft-release` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36039819942888807}, {"id": "63c494247843b612699ff48a", "level": "level4", "llm_response": "```yaml name: Rust\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-rust@v1\n        with:\n          toolchain: nightly\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup toolchain list --display=short\n      - name: Build without default features\n        run: cargo build --no-default-features --all-features\n      - name: Build with default features\n        run: cargo build --all-features\n```", "answer": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n      - name: Build without default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n      - name: Build with default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n```", "prompt": "Generate a GitHub Workflow named `Rust` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Check Cargo availability`. The 4th step is named `Check Rustup default toolchain`. The 5th step is named `Build without default features`. The 6th step is named `Build with default features`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5237839135726726}, {"id": "63c494fd7843b61269a04a9b", "level": "level4", "llm_response": "```yaml name: Automatic Releases\n\non:\n  milestone:\n    types: [closed]\n\njobs:\n  release:\n    name: Git tag, release & create merge-up PR\n    uses: doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0\n    secrets:\n      GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}\n      GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}\n      ORGANIZATION_ADMIN_TOKEN: ${{ secrets.ORGANIZATION_ADMIN_TOKEN }}\n      SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}\n```", "answer": "```yaml name: \"Automatic Releases\"\n\non:\n  milestone:\n    types:\n      - \"closed\"\n\njobs:\n  release:\n    name: \"Git tag, release & create merge-up PR\"\n    uses: \"doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0\"\n    secrets:\n      GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}\n      GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}\n      ORGANIZATION_ADMIN_TOKEN: ${{ secrets.ORGANIZATION_ADMIN_TOKEN }}\n      SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `Automatic Releases` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: a milestone is closed. The workflow has one job. The 1st job is named `Git tag, release & create merge-up PR` and its job id is `release`. This job will call a reusable workflow located at `doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0`. The job will pass 4 secrets to the called workflow: the secret `GIT_AUTHOR_EMAIL` is `${{ secrets.GIT_AUTHOR_EMAIL }}`, the secret `GIT_AUTHOR_NAME` is `${{ secrets.GIT_AUTHOR_NAME }}`, the secret `ORGANIZATION_ADMIN_TOKEN` is `${{ secrets.ORGANIZATION_ADMIN_TOKEN }}` and the secret `SIGNING_SECRET_KEY` is `${{ secrets.SIGNING_SECRET_KEY }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6179680651749242}, {"id": "63c4957d8052faa2781b22ad", "level": "level4", "llm_response": "```yaml name: nix-build\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-v*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-nix@v1\n      - run: nix-shell -p centrifuge-chain.nix\n      - name: Build centrifuge-chain\n        run: nix build centrifuge-chain\n```", "answer": "```yaml name: nix-build\non:\n  pull_request:\n  push:\n    branches: [main, 'release-v**']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Nix Flakes doesn't work on shallow clones\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v17\n        with:\n          install_url: https://releases.nixos.org/nix/nix-2.10.3/install\n      - uses: cachix/cachix-action@v10\n        with:\n          name: centrifuge-chain\n          authToken: \"${{ secrets.CACHIX_AUTH_TOKEN }}\"\n      - name: Build centrifuge-chain\n        run: nix build --no-allow-dirty -L```", "prompt": "Generate a GitHub Workflow named `nix-build` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main or a branch whose name matches release-v**. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named `Build centrifuge-chain`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.39231211994152476}, {"id": "63c4968a6fc19abdf9c9ca16", "level": "level4", "llm_response": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 20 * * 6'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n      - name: build conda env\n        run: |\n          conda create -n test_conda_env python=3.8\n          source test_conda_env/bin/activate\n          pip install -r conda-environment.yml\n      - name: check for activate scripts\n        run: |\n          echo \"activate test_conda_env\" | grep -vE '^[[:space:]]*$'\n```", "answer": "```yaml name: conda builds\n\non:\n  pull_request:\n    paths:\n      - 'conda-environment.yml'\n      - '.github/workflows/test_conda-build.yml'\n  schedule:\n    - cron: '17 22 * * 6'  # Every Saturday at 22:17\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test_conda_install:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: checkout cylc-flow\n        uses: actions/checkout@v3\n\n      - name: build conda env\n        run: |\n          # write environment file\n          env_file='conda-environment.yml'\n          echo \"  - pip\"  >> \"$env_file\"  # list pip as a dependency\n          echo \"  - pip:\" >> \"$env_file\"  # add a pip section\n          echo \"    - .\"  >> \"$env_file\"  # install cylc-flow (pip install .)\n          cat \"$env_file\"\n          # install environment\n          conda env create \\\n            -f \"$env_file\" \\\n            --prefix cylc-dev\n          . /usr/share/miniconda/etc/profile.d/conda.sh\n          # check cylc-flow was installed correctly\n          conda run --prefix cylc-dev cylc version --long\n\n      - name: check for activate scripts\n        run: |\n          # https://github.com/cylc/cylc-flow/issues/3704#issuecomment-897442365\n          # locate all activate scripts\n          find ./cylc-dev/ -name \"activate.d\" | tee > activates.txt\n          # ignore the conda activate script itself\n          sed -i '/cylc-dev\\/etc\\/conda\\/activate.d/d' activates.txt\n          # check to make sure no packages have contributed new activate scripts\n          # (we rely on having a conda activate-less environment)\n          if [[ $(cat activates.txt | wc -l) -ne 0 ]]; then\n              echo '::error::Found activate scripts in installation.'\n              cat activates.txt >&2\n              exit 1\n          fi\n```", "prompt": "Generate a GitHub Workflow named `conda builds` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(conda-environment.yml or .github/workflows/test_conda-build.yml), the workflow runs. 2) the scheduled time has come: at 10:17 pm, only on saturday. 3) someone manually triggers the workflow. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `test_conda_install`. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 10. The job `test_conda_install` has 3 steps. The 1st step is named `checkout cylc-flow`. The 2nd step is named `build conda env`. The 3rd step is named `check for activate scripts`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2420915634857704}, {"id": "63c496411e3364807577968e", "level": "level4", "llm_response": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened, transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@v0.1.0\n        id: add_project\n        with:\n          project-url: https://github.com/orgs/airbnb/projects/10\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Set Team\n        uses: actions/add-to-project@v0.1.0\n        with:\n          project-url: https://github.com/orgs/airbnb/projects/10\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          team: \"airbnb\"\n          permission: \"write\"\n```", "answer": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened,transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n      - name: Set Team\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN_PROJECT }}\n        run: |\n          gh api graphql -f query='\n          mutation(\n              $project: ID!\n              $item: ID!\n              $status_field: ID!\n              $status_value: String!\n            )  {\n            updateProjectV2ItemFieldValue(\n              input: {\n               projectId: $project\n                itemId: $item\n                fieldId: $status_field\n                value: { \n                  singleSelectOptionId: $status_value\n                  }\n              }\n            ) {\n              projectV2Item {\n                id\n              }\n            }\n          }' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent```", "prompt": "Generate a GitHub Workflow named `Add to project` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: an issue is opened or an issue is transferred to another repository. The workflow has one job. The 1st job is named `Add issue to project` and its job id is `add-to-project`. This job will run on ubuntu-latest runner. The job `add-to-project` has 2 steps. The 1st step is named `` and its id is `add_project`. The 2nd step is named `Set Team`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.17433731278081563}, {"id": "63c496861e3364807577b319", "level": "level4", "llm_response": "```yaml name: documentation\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    outputs:\n      should_skip: ${{ steps.skip_check.outputs.should_skip }}\n    steps:\n      - id: skip_check\n        uses: prisma/documentation/.github/actions/skip_duplicate_jobs@v1\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          skip_duplicate_jobs: 'true'\n          skip_duplicate_branches: 'master'\n\n  deploy:\n    needs: skip_duplicate_jobs\n    runs-on: ubuntu-latest\n    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Create output directories\n        run: |\n          mkdir -p docs/index\n          mkdir -p docs/coverage\n          mkdir -p docs/source\n          mkdir -p docs/source/_build/html\n\n      - name: Copy index.html\n        run: |\n          cp docs/index/index.html docs/source/_build/html/index.html\n\n      - name: Generate reference\n        id: adocbuild\n        uses: prisma/documentation/.github/actions/adocbuild@v1\n        with:\n          out_dir: docs/source/_build/html\n          html_dir: docs/source/_build/html\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: docs/source/_build/html\n          cname: prisma.io\n          force: true\n```", "answer": "```yaml # adapted from:\n#\n# * base code: https://peterevans.dev/posts/github-actions-how-to-automate-code-formatting-in-pull-requests/\n# * fix push auth: https://github.com/ad-m/github-push-action\n# * checkout PR head commit https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit\nname: documentation\non:\n  push:\n    branches:\n      - master\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    outputs:\n      should_skip: ${{ steps.skip_check.outputs.should_skip }}\n    steps:\n      - id: skip_check\n        uses: fkirc/skip-duplicate-actions@master\n        with:\n          concurrent_skipping: 'same_content'\n          skip_after_successful_duplicate: 'true'\n          paths: '[\"doc/**\"]'\n  deploy:\n    needs: skip_duplicate_jobs\n    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.1\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - name: Create output directories\n        run: mkdir -p output/reference\n\n      - name: Copy index.html\n        run: cp website/index.html output/index.html\n\n      - name: Generate reference\n        id: adocbuild\n        uses: tonynv/asciidoctor-action@master\n        with:\n            program: asciidoctor doc/index.adoc -o output/reference/index.html\n\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.7\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: output # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `documentation` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has 2 jobs. The job id of the 1st job is `skip_duplicate_jobs`. This job will run on ubuntu-latest runner. The job `skip_duplicate_jobs` has one step. The 1st step is named `` and its id is `skip_check`. This job has an output: `should_skip` is defined as ${{ steps.skip_check.outputs.should_skip }}. The job id of the 2nd job is `deploy`. Before this job runs, `skip_duplicate_jobs` must complete successfully. This job will run only if the condition(${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}) is met. This job will run on ubuntu-latest runner. The job `deploy` has 5 steps. The 1st step is named ``. The 2nd step is named `Create output directories`. The 3rd step is named `Copy index.html`. The 4th step is named `Generate reference` and its id is `adocbuild`. The 5th step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"force\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 55, "column": 11, "kind": "action", "snippet": "          force: true\n          ^~~~~~", "end_column": 16}]}, "bleu_score": 0.4218050273266742}, {"id": "63c495c68052faa2781b4230", "level": "level4", "llm_response": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    name: Issue Handler\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: neeraj1234/issue-handler@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issueLabel: 'issue-handler'\n          issueBody: |\n            Dear @${{ github.actor }},\n            I hope this message finds you well. I am reaching out to you for your assistance in handling issues. Please find attached the issue body for your reference. Thank you for your time and consideration.\n```", "answer": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    runs-on: windows-latest\n    name: Issue Handler\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: github.event.action == 'opened' || (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'verify'))\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Issues` for a GitHub repository whose primary programming language is PowerShell. This workflow will be triggered by an event: an issue is opened or a label is added to an issue. The workflow has one job. The 1st job is named `Issue Handler` and its job id is `issueHandler`. This job will run on windows-latest runner. The job `issueHandler` has 2 steps. The 1st step is named ``. The 2nd step is named `Issue Handler`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2552636494003933}, {"id": "63c494c78052faa2781ad471", "level": "level4", "llm_response": "```yaml name: cla\n\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened, closed, synchronize]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get Team Members\n        id: team\n        uses: andymckay/get-team-members@v1.2.1\n        with:\n          github-token: ${{ github.token }}\n      - name: CLA Assistant\n        uses: andymckay/cla-assistant@v1.1.0\n        with:\n          github-token: ${{ github.token }}\n          team: ${{ steps.team.outputs.team }}\n          assignees: ${{ steps.team.outputs.assignees }}\n          comment: >-\n            Thank you for your contribution to the project! We are grateful for the\n            contribution you have made. We are actively reviewing your contributions and\n            will make necessary adjustments to your pull request. If you would like to\n            provide additional feedback or make changes, please do so immediately.\n```", "answer": "```yaml name: \"cla\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened, closed, synchronize]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Get Team Members\"\n        id: team\n        # github-script, v6.1.0\n        uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da\n        with:\n          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n          result-encoding: string\n          script: |\n            const members = await github.paginate(\n              github.rest.orgs.listMembers,\n              { org: \"skalenetwork\" },\n            );\n            return members.map(m => m.login).join(\",\");\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release, v2.1.3-beta\n        uses: cla-assistant/github-action@ba066dbae3769e2ce93ec8cfc4fdc51b9db628ba\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://skale.network/cla.txt'\n          remote-organization-name: 'skalenetwork'\n          remote-repository-name: cla-sigs\n          allowlist: '${{ steps.team.outputs.result }},*[bot]'\n```", "prompt": "Generate a GitHub Workflow named `cla` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) a pull request is created, a pull request is closed or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `cla`. This job will run on ubuntu-latest runner. The job `cla` has 2 steps. The 1st step is named `Get Team Members` and its id is `team`. The 2nd step is named `CLA Assistant`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.20171890096411327}, {"id": "63c495f07843b61269a0af74", "level": "level4", "llm_response": "```yaml name: Acquire activation file\n\non:\n  workflow_dispatch:\n\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: ./.github/actions/activate-file\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: activation-file\n          path: ./activation\n```", "answer": "```yaml \ufeffname: Acquire activation file\non:\n  workflow_dispatch: {}\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ steps.getManualLicenseFile.outputs.filePath }}\n          path: ${{ steps.getManualLicenseFile.outputs.filePath }}\n```", "prompt": "Generate a GitHub Workflow named `Acquire activation file` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Request manual activation file` and its job id is `activation`. This job will run on ubuntu-latest runner. The job `activation` has 2 steps. The 1st step is named `Request manual activation file` and its id is `getManualLicenseFile`. The 2nd step is named `Expose as artifact`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.697203071699231}, {"id": "63c495418052faa2781b099b", "level": "level4", "llm_response": "```yaml name: 60 Days Stale Check\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5\n        with:\n          days-before-stale: 60\n          days-before-close: 14\n          days-before-pr-stale: 60\n          days-before-pr-close: 14\n          stale-issue-message: |\n            This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs.\n          stale-pr-message: |\n            This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs.\n          exempt-issue-labels: 'needs review'\n          exempt-pr-labels: 'needs review'\n          exempt-issue-labels: 'good first issue'\n          exempt-pr-labels: 'good first issue'\n          exempt-issue-labels: 'good first contributor'\n          exempt-pr-labels: 'good first contributor'\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          stale-issue-label-color: '545454'\n          stale-pr-label-color: '545454'\n          close-issue-message: |\n            This issue has been automatically closed because it has not had recent activity. It will be reopened if no further activity occurs.\n          close-pr-message: |\n            This pull request has been automatically closed because it has not had recent activity. It will be reopened if no further activity occurs.\n          close-issue-label: 'stale'\n          close-pr-label: 'stale'\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-label-regex: '^[0-9]+$'\n          stale-pr-label-regex: '^[0-9]+$'\n          close-issue-label-regex: '^[0-9]+$'\n          close-pr-label-regex: '^[0-9]+$```", "answer": "```yaml name: 60 Days Stale Check\non:\n  schedule:\n    - cron: '00 00 * * *' # Run each day at 00:00 UTC\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v3.0.14\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue is stale because it has been open 60 days with no activity.'\n          stale-pr-message: 'This PR is stale because it has been open 60 days with no activity.'\n          days-before-stale: -1 # 60 days before marking anything stale - Turned off\n          days-before-close: -1 # Do not close anything automatically\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          exempt-pr-labels: 'never-stale' # Exempt 'never-stale' labels from being marked stale\n          exempt-issue-labels: 'never-stale' # Exempt 'never-stale' labels from being marked stale\n```", "prompt": "Generate a GitHub Workflow named `60 Days Stale Check` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `stale`. This job will run on ubuntu-latest runner. The job `stale` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 40: found unexpected end of stream", "filepath": "../tmp/test.yml", "line": 40, "column": 0, "kind": "syntax-check", "snippet": "          close-pr-label-regex: '^[0-9]+$", "end_column": 0}]}, "bleu_score": 0.13470212825194017}, {"id": "63c496731e3364807577abab", "level": "level4", "llm_response": "```yaml name: Automatically crawl CVEs\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n  schedule:\n    - cron: '15 0 * * *'\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.x'\n\n      - name: Configure pip caching\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Crawl CVEs\n        run: |\n          python -m scraper.cve_scraper\n\n      - name: Commit and push Github page (if changed)\n        if: success()\n        run: |\n          python -m scraper.github_page_generator\n          git config user.name \"github-actions[bot]\"\n          git config user.email \"github-actions[bot]@users.noreply.github.com\"\n          git add .github\n          git commit -m \"Update CVEs page\" -F - --no-verify\n          git push origin master\n```", "answer": "```yaml name: Automatically crawl CVEs \non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n    branches:\n      - master\n  schedule:\n    - cron: '15 * * * *'\n\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - uses: actions/cache@v2\n        name: Configure pip caching\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r requirements.txt\n\n      - name: Crawl CVEs\n        run: |-\n          python main.py -g \"${{ secrets.CRAWL_PWD }}\" --gtk ${{ secrets.GRAPAQL_TOKEN }}\n\n      # \u82e5\u8be5\u65f6\u95f4\u6bb5\u6ca1\u6709 CVE\uff0c \u5219 file://cache/mail.dat \u6587\u4ef6\u4e0d\u4f1a\u751f\u6210\uff0c\u6b64\u65f6\u4e0d\u4f1a\u53d1\u9001\u90ae\u4ef6\n      # - name: Send mail\n      #   if: ${{ secrets.CRAWL_PWD != '' && github.event_name != 'pull_request' }}\n      #   uses: lyy289065406/action-send-mail@master\n      #   with:\n      #     server_address: ${{ secrets.MAIL_SMTP }}\n      #     server_port: 465\n      #     username: ${{ secrets.MAIL_USER }}\n      #     password: ${{ secrets.MAIL_PASS }}\n      #     from: ${{ secrets.MAIL_USER }}\n      #     to: file://cache/mail_recvs.dat\n      #     body: file://cache/mail_content.dat\n      #     content_type: text/html\n      #     subject: \u5a01\u80c1\u60c5\u62a5\u64ad\u62a5\n\n      # \u5982\u679c\u4e0d\u5e0c\u671b\u6c61\u67d3 commit \u8bb0\u5f55\uff0cuser.email \u548c user.name \u968f\u4fbf\u586b\u5373\u53ef\n      # Github Runner \u662f\u6709\u6743\u9650\u63d0\u4ea4\u5230\u4ed3\u5e93\u7684\uff0c\u53ea\u8981 user \u4e0d\u662f owner \uff0c\u5f53\u6b21 commit \u4e0d\u4f1a\u88ab\u8bb0\u5f55\n      - name: Commit and push Github page (if changed)\n        if: ${{ github.event_name != 'pull_request' }}\n        run: |-\n          git diff\n          git config --global user.email \"github-bot@example.com\"\n          git config --global user.name \"Github-Bot\"\n          git add -A\n          git commit -m \"Updated by Github Bot\" || exit 0\n          git push origin master\n\n```", "prompt": "Generate a GitHub Workflow named `Automatically crawl CVEs` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch named master. 2) someone manually triggers the workflow. 3) the scheduled time has come: at 15 minutes past the hour. The workflow has one job. The job id of the 1st job is `build-and-deploy`. This job will run on ubuntu-latest runner. The job `build-and-deploy` has 6 steps. The 1st step is named `Check out repo`. The 2nd step is named `Set up Python`. The 3rd step is named `Configure pip caching`. The 4th step is named `Install Python dependencies`. The 5th step is named `Crawl CVEs`. The 6th step is named `Commit and push Github page (if changed)`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5551698272172895}, {"id": "63c494318052faa2781a9bf5", "level": "level4", "llm_response": "```yaml name: Test a branch on canary\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: 'Commit sha to be tested'\n        required: true\npermissions:\n  contents: read\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\ndefaults:\n  run:\n    shell: pwsh\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Update the rc tag\n        run: |\n          git fetch origin ${{ env.COMMIT_SHA }}\n          git reset --hard origin/${{ env.COMMIT_SHA }}\n          git clean -fdx\n          git checkout -b rc\n      - name: Canary test\n        run: |\n          npm ci\n          npm run build\n          npm run deploy\n          npm run deploy-canary\n```", "answer": "```yaml name: Test a branch on canary\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: 'Commit SHA to be tested'\n        required: true\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\ndefaults:\n  run:\n    shell: pwsh\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34 # v1\n      with:\n        allowed-endpoints: \n          api.github.com:443\n          github.com:443\n\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v2\n    - name: Update the rc tag\n      uses: step-security/publish-action@b438f840875fdcb7d1de4fc3d1d30e86cf6acb5d\n      with:\n        rc-sha: ${{ env.COMMIT_SHA }}\n        rc: true\n\n    - name: Canary test\n      uses: docker://ghcr.io/step-security/integration-test/int:latest\n      env:\n        PAT: ${{ secrets.PAT }}\n        canary: true\n```", "prompt": "Generate a GitHub Workflow named `Test a branch on canary` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: COMMIT_SHA-this input represents commit sha to be tested and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `COMMIT_SHA` is set to `${{ github.event.inputs.COMMIT_SHA }}`. For all run steps in the workflow, default shell is set to pwsh. The workflow has one job. The 1st job is named `Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit` and its job id is `update_tag`. This job will run on ubuntu-latest runner. The job `update_tag` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `update_tag`. The job `update_tag` has 4 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Update the rc tag`. The 4th step is named `Canary test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5135690454944934}, {"id": "63c496566fc19abdf9c9b6ef", "level": "level4", "llm_response": "```yaml name: automerge\n\non:\n  pull_request:\n    types: [labeled]\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        run: |\n          gh pr edit --enable-automerge --allow-labels \"$PR_NUMBER\"\n```", "answer": "```yaml name: automerge\non:\n  pull_request_target:\n    types:\n      - labeled\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        if: contains( github.event.pull_request.labels.*.name, 'automerge')\n        uses: peter-evans/enable-pull-request-automerge@v2\n        with:\n          token: ${{ secrets.PAT }}\n          pull-request-number: ${{ github.event.pull_request.number }}\n          merge-method: rebase\n```", "prompt": "Generate a GitHub Workflow named `automerge` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: a label is added to a pull request. The workflow has one job. The job id of the 1st job is `automerge`. This job will run on ubuntu-latest runner. The job `automerge` has one step. The 1st step is named `enable automerge`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2679924183806167}, {"id": "63c4941d8052faa2781a937b", "level": "level4", "llm_response": "```yaml name: update-flake-lock\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 0 0 * * 0\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: NixOS/nix-action@v1\n      - name: Update flake.lock\n        run: nix lock\n```", "answer": "```yaml name: update-flake-lock\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '0 0 * * 0' # runs weekly on Sunday at 00:00\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          # we update nixos-common-styles manual\n          # and the rest of the inputs are content inputs\n          inputs: nixpkgs\n```", "prompt": "Generate a GitHub Workflow named `update-flake-lock` for a GitHub repository whose primary programming language is Less. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The job id of the 1st job is `lockfile`. This job will run on ubuntu-latest runner. The job `lockfile` has 3 steps. The 1st step is named `Checkout repository`. The 2nd step is named `Install Nix`. The 3rd step is named `Update flake.lock`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3524652706565239}, {"id": "63c4965533b087f6bde2b378", "level": "level4", "llm_response": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Packagist\n        uses: packagist/actions/update@v1\n        with:\n          version: ${{ github.event.repository.default_branch }}\n          token: ${{ secrets.PACKAGIST_TOKEN }}\n```", "answer": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Packagist\n        run: |\n          curl -X POST \"https://packagist.org/api/update-package?username=svix&apiToken=$PACKAGIST_API_KEY\" \\\n            -H 'content-type: application/json' \\\n            -d '{\"repository\":{\"url\":\"https://packagist.org/packages/svix/svix\"}}'\n        env:\n          PACKAGIST_API_KEY: ${{ secrets.PACKAGIST_API_KEY }}```", "prompt": "Generate a GitHub Workflow named `PHP Release` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Update Packagist` and its job id is `packagist`. This job will run on ubuntu-latest runner. The job `packagist` has one step. The 1st step is named `Update Packagist`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4396422952244872}, {"id": "63c4959c7843b61269a08c30", "level": "level4", "llm_response": "```yaml name: Scorecards supply-chain security\n\non:\n  workflow_dispatch:\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run analysis\n        uses: scorecarddev/scorecards-analysis-action@v1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          scorecards: |\n            https://github.com/scorecarddev/scorecards-supply-chain-security\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: scorecard-results\n          path: |\n            results/*\n\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results/scorecard-results.sarif\n```", "answer": "```yaml name: Scorecards supply-chain security\n# Run only manually, because the answers don't change often and the results have \n# many unhelpful positives.\n  \non:\n  workflow_dispatch: \n  # Only the default branch is supported.\n  # branch_protection_rule:\n  # schedule:\n  #   - cron: '38 17 * * 6'\n  # push:\n  #  branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c8416b0b2bf627c349ca92fc8e3de51a64b005cf # v1.0.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. This job will run on ubuntu-latest runner. The job `analysis` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `security-events` scope, read access is granted to the GITHUB_TOKEN in the `actions` scope and read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. The 2nd step is named `Run analysis`. The 3rd step is named `Upload artifact`. The 4th step is named `Upload to code-scanning`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3450164496517283}, {"id": "63c4942a8052faa2781a9911", "level": "level4", "llm_response": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main, dev]\n\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@v3\n        with:\n          ref: main\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n          cache: true\n      - uses: actions/cache@v3\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      - run: go test -coverprofile=coverage.txt ./...\n```", "answer": "```yaml name: Integration tests\non:\n  workflow_dispatch: null\n  push:\n    branches:\n      - main\n      - dev\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2\n      - uses: actions/setup-go@37335c7bb261b353407cff977110895fa0b4f7d8 # pin@v2\n        with:\n          go-version: '1.18'\n      - run: go version\n      - run: make testacc\n        env:\n          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Integration tests` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main or a branch named dev. The workflow has one job. The 1st job is named `Run integration tests` and its job id is `integration_tests`. This job will run on ubuntu-latest runner. The job `integration_tests` has 4 steps. The 1st step is named `Clone Repository`. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.32339090513915014}, {"id": "63c4940f7843b612699feb8d", "level": "level4", "llm_response": "```yaml on:\n  push:\n    branches:\n      - main\n\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - run: go test ./...\n      - uses: sylabs/coverage-action@v1\n        with:\n          file: ./coverage.out\n          fail_ci_if_error: true\n```", "answer": "```yaml # add public code coverage reports\non:\n  push:\n    branches:\n    - main\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: \"make test-cover\"\n    - uses: codecov/codecov-action@v2\n    with:\n      file: ./coverage.out\n      fail_ci_if_error: true\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `coverage`. This job will run on ubuntu-latest runner. The job `coverage` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The job will pass 2 inputs to the called workflow: the input `file` is `./coverage.out` and the input `fail_ci_if_error` is `True`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.49316623222968037}, {"id": "63c496a06fc19abdf9c9d2e3", "level": "level4", "llm_response": "```yaml name: Scorecards supply-chain security\non:\n  # This workflow will run whenever we push a new branch protection rule\n  # https://github.com/actions/branch-protection-rule-workflow\n  # event types: \"all\"\n  branch_protection_rule:\n  schedule:\n    - cron: \"18 9 * * 4\"\n  push:\n    branches: [\"main\"]\npermissions: read-all\n\njobs:\n  analysis:\n    permissions:\n      # Scorecard analysis\n      security-events: write\n      actions: read\n      contents: read\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run analysis\n        uses: ./.github/actions/scorecards-analysis\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: scorecard-analysis\n          path: |\n            ./results/\n\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ./results/sarif/scorecard-analysis.sarif\n```", "answer": "```yaml # This file is part of ICU4X. For terms of use, please see the file\n# called LICENSE at the top level of the ICU4X source tree\n# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).\n\nname: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: '18 9 * * 4'\n  push:\n    branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c1aec4ac820532bab364f02a81873c555a0ba3a1 # v1.0.4\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) activity related to a branch protection rule occurs. 2) the scheduled time has come: at 09:18 am, only on thursday. 3) The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. This job will run on ubuntu-latest runner. The job `analysis` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `security-events` scope, read access is granted to the GITHUB_TOKEN in the `actions` scope and read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. The 2nd step is named `Run analysis`. The 3rd step is named `Upload artifact`. The 4th step is named `Upload to code-scanning`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2539508421610691}, {"id": "63c495257843b61269a05b79", "level": "level4", "llm_response": "```yaml name: Update translation templates\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-templates:\n    name: Update translation templates\n    runs-on: ubuntu-20.04\n    container: archlinux\n    steps:\n      - name: Install git\n        run: sudo pacman -S git\n      - name: Checkout\n        run: git clone --depth 1 https://github.com/${{ github.repository }}/translations.git\n        working-directory: translations\n        env:\n          GIT_USER: ${{ secrets.GIT_USER }}\n          GIT_PASS: ${{ secrets.GIT_PASS }}\n      - name: Install deps\n        run: sudo pacman -S git ninja\n      - name: Change git permissions\n        run: chmod -R 755 translations\n      - name: Run meson targets\n        run: cd translations && meson -C ../templates\n      - name: Check for non-timestamp diff\n        run: git diff --exit-code\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: \"Update translations\"\n          branch: \"translations\"\n          commit_message: \"Update translations\"\n          author: ${{ secrets.GIT_USER }} <${{ secrets.GIT_PASS }}>\n\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n\nname: Update translation templates\njobs:\n  update-templates:\n    name: Update translation templates\n    runs-on: ubuntu-20.04\n    container:\n      image: archlinux\n    steps:\n      # install git first otherwise checkout will not give us an actual git repo\n      - name: Install git\n        run: pacman -Syu --noconfirm git\n    \n      - name: Checkout\n        uses: actions/checkout@v3.1.0\n\n      - name: Install deps\n        run: |\n          # install general build deps\n          pacman -Syu --noconfirm ninja gcc pkgconf python3 python-pip which\n          # install easyeffects deps\n          source ./PKGBUILD && pacman -Syu --noconfirm --needed --asdeps \"${makedepends[@]}\" \"${depends[@]}\"\n          \n      # workaround upstream permissions issue github.com/peter-evans/create-pull-request/issues/1170\n      - name: Change git permissions\n        run: git config --global --add safe.directory \"$GITHUB_WORKSPACE\"\n\n      - name: Run meson targets\n        run: |\n          meson build\n          cd build\n          ../util/update_translation_templates.sh\n          cd ..\n\n      - name: Check for non-timestamp diff\n        run: |\n          # see https://stackoverflow.com/a/26622262\n          DIFF_LINES=$(git diff --unified=0 | grep '^[+-]' | grep -Ev '^(--- a/|\\+\\+\\+ b/)')\n\n          if [[ $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\") != \"$DIFF_LINES\" ]]; then\n            echo \"The calculated diff includes modifications besides just timestamp changes (POT-Creation-Date).\"\n            echo \"Letting the PR continue as this is a valid reason to open a PR.\"\n          else\n            echo \"The calculated diff just has timestamp changes (POT-Creation-Date).\"\n            echo \"Restoring original files since this is not a valid reason to open a PR.\"\n            git restore .\n          fi\n\n          echo \"All diff lines count: $(echo \"$DIFF_LINES\" | wc -l)\"\n          echo \"Diff lines count where POT-Creation-Date was changed: $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\" | wc -l)\"\n\n      # TODO it would be ideal to refresh metainfo fully by copying release notes from the upcoming release in NEWS.yaml to metainfo, and then running the above update template script,\n      # however this is not possible without putting a dummy release in the metainfo with said upcoming release notes which would later have to be adjusted to the real release.\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4.1.3\n        with:\n          title: Update translation templates\n          body: Ensure to merge all other Pull Requests before merging this. Conflicts here will automatically be resolved in case of changes in master.\n          commit-message: Update translation templates\n          # email sets \"EasyEffects Bot\" user as commit author\n          committer: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          author: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          branch: automatically-update-translation-templates\n          # the easyeffects_bot secret/token is only valid for a fork\n          # note the machine user (easyeffects-bot) must have already forked the repository  where the action is running for this to work\n          push-to-fork: easyeffects-bot/easyeffects\n          token: ${{ secrets.EASYEFFECTS_BOT }}\n```", "prompt": "Generate a GitHub Workflow named `Update translation templates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The 1st job is named `Update translation templates` and its job id is `update-templates`. This job will run on ubuntu-20.04 runner. The job creates a Docker container that uses `archlinux` image. The job `update-templates` has 7 steps. The 1st step is named `Install git`. The 2nd step is named `Checkout`. The 3rd step is named `Install deps`. The 4th step is named `Change git permissions`. The 5th step is named `Run meson targets`. The 6th step is named `Check for non-timestamp diff`. The 7th step is named `Create Pull Request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"commit_message\" is not defined in action \"peter-evans/create-pull-request@v4\". available inputs are \"add-paths\", \"assignees\", \"author\", \"base\", \"body\", \"branch\", \"branch-suffix\", \"commit-message\", \"committer\", \"delete-branch\", \"draft\", \"labels\", \"milestone\", \"path\", \"push-to-fork\", \"reviewers\", \"signoff\", \"team-reviewers\", \"title\", \"token\"", "filepath": "../tmp/test.yml", "line": 34, "column": 11, "kind": "action", "snippet": "          commit_message: \"Update translations\"\n          ^~~~~~~~~~~~~~~", "end_column": 25}]}, "bleu_score": 0.11556482054762603}, {"id": "63c4967d1899db58864d33af", "level": "level4", "llm_response": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: npm\n      - name: NPM install\n        run: npm ci\n      - name: NPM build\n        run: npm run build\n      - name: Grunt action-package\n        uses: amannn/action-package@v1\n        with:\n          package: ${{ github.event.inputs.name }}\n          output: build/dist\n      - name: Build zip file\n        run: zip -r build/dist/${{ github.event.inputs.name }}.zip build/dist/${{ github.event.inputs.name }}/\n```", "answer": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n\n  build-package:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n\n      - name: NPM install\n        run: npm install\n\n      - name: NPM build\n        run: npm run build\n\n      - name: Grunt action-package\n        run: npm run action-package\n\n      - name: Build zip file\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          path: |\n            package/\n          retention-days: 1\n```", "prompt": "Generate a GitHub Workflow named `Build package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: name-this input represents package name, its default value is generateblocks and it must be supplied. The workflow has one job. The job id of the 1st job is `build-package`. This job will run on ubuntu-latest runner. The job `build-package` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `NPM install`. The 4th step is named `NPM build`. The 5th step is named `Grunt action-package`. The 6th step is named `Build zip file`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6551576656104587}, {"id": "63c494c78052faa2781ad49a", "level": "level4", "llm_response": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Pull Request Labeler` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `triage`. This job will run on ubuntu-latest runner. The job `triage` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `triage`. The job `triage` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8009559340799308}, {"id": "63c495928052faa2781b2bc0", "level": "level4", "llm_response": "```yaml name: Labeler\non:\n  pull_request_target:\njobs:\n  label:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: rhysd/changelog-from-release/action@v2\n      with:\n        file: CHANGELOG.md\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. This job will run on ubuntu-latest runner. The job `label` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `label`. The job `label` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6370677537207916}, {"id": "63c4949e7843b61269a025e6", "level": "level4", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run only if the condition(github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot') is met. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c493b77843b612699fd377", "level": "level4", "llm_response": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'public/**'\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: NixOS/nix-action@v1.2.0\n      - name: Build\n        run: |\n          nix-shell --run 'yarn'\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: 'dist'\n          publish_branch: 'main'\n          publish_branch_name: 'gh-pages'\n          clean: true\n```", "answer": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"public/**\"\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v15\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build\n        run: nix build .#website\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./result\n          cname: mdzk.app\n```", "prompt": "Generate a GitHub Workflow named `Publish website` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(public/**), the workflow runs. The workflow has one job. The job id of the 1st job is `deploy-website`. This job will run on ubuntu-latest runner. The job `deploy-website` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. The 2nd step is named `Install Nix`. The 3rd step is named `Build`. The 4th step is named `Deploy \ud83d\ude80`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "input \"publish_branch_name\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 27, "column": 11, "kind": "action", "snippet": "          publish_branch_name: 'gh-pages'\n          ^~~~~~~~~~~~~~~~~~~~", "end_column": 30}, {"message": "input \"clean\" is not defined in action \"peaceiris/actions-gh-pages@v3\". available inputs are \"allow_empty_commit\", \"cname\", \"commit_message\", \"deploy_key\", \"destination_dir\", \"disable_nojekyll\", \"enable_jekyll\", \"exclude_assets\", \"external_repository\", \"force_orphan\", \"full_commit_message\", \"github_token\", \"keep_files\", \"personal_token\", \"publish_branch\", \"publish_dir\", \"tag_message\", \"tag_name\", \"user_email\", \"user_name\"", "filepath": "../tmp/test.yml", "line": 28, "column": 11, "kind": "action", "snippet": "          clean: true\n          ^~~~~~", "end_column": 16}]}, "bleu_score": 0.5881986219347392}, {"id": "63c4946f7843b61269a011d1", "level": "level4", "llm_response": "```yaml name: I2::Dev::Nightly::Publish\n\non:\n  workflow_dispatch:\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.9\n      - name: Build and push iroha2:dev-nightly image\n        run: |\n          docker build -t iroha2:dev-nightly .\n          docker push iroha2:dev-nightly\n```", "answer": "```yaml name: I2::Dev::Nightly::Publish\n\non: workflow_dispatch\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container:\n      image: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: hyperledger/iroha2:dev-nightly-${{ github.sha }}\n          labels: commit=${{ github.sha }}\n          build-args: TAG=dev\n```", "prompt": "Generate a GitHub Workflow named `I2::Dev::Nightly::Publish` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `dockerhub`. This job will run on ubuntu-latest runner. The job creates a Docker container that uses `7272721/i2-ci:nightly` image. The job `dockerhub` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Build and push iroha2:dev-nightly image`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.31616736026059156}, {"id": "63c4941b7843b612699ff0aa", "level": "level4", "llm_response": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n      - name: Build and Release\n        uses: ./.github/actions/release\n```", "answer": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build and Release\n      env:\n        INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n        ZAP_RELEASE: 1\n        ZAP_JAVA_VERSION: 11\n      run: ./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease\n```", "prompt": "Generate a GitHub Workflow named `Release Main Version` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(zap/zap.gradle.kts), the workflow runs. The workflow has one job. The 1st job is named `Build and Release` and its job id is `release`. This job will run on ubuntu-latest runner. The job `release` has 3 steps. The 1st step is named ``. The 2nd step is named `Setup Java`. The 3rd step is named `Build and Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5227425811408443}, {"id": "63c494a97843b61269a02a52", "level": "level4", "llm_response": "```yaml name: pytorch1_8_1-cuda11_1\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 15 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: 'cu111'\n      remote_runtime_docker: 'bladedisc:latest-runtime-torch1.8.1-cu111'\n      develop_base_image: 'nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04'\n      runtime_base_image: 'nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04'\n      extra_envs: '-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111'\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "answer": "```yaml name: pytorch1_8_1-cuda11_1\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu111\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.8.1-cu111\n      develop_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_8_1-cuda11_1` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will call a reusable workflow located at `./.github/workflows/resuable_gpu_build.yml`. The job will pass 7 inputs to the called workflow: the input `cuda_version` is `cu111`, the input `remote_runtime_docker` is `bladedisc:latest-runtime-torch1.8.1-cu111`, the input `develop_base_image` is `nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04`, the input `runtime_base_image` is `nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04`, the input `extra_envs` is `-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111`, the input `exec_command` is `bash ./scripts/ci/test_pytorch_blade.sh` and the input `deploy_command` is `TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh`. The job will pass 4 secrets to the called workflow: the secret `ALIYUN_DOCKER_USERNAME` is `${{ secrets.ALIYUN_DOCKER_USERNAME }}`, the secret `ALIYUN_DOCKER_PASSWORD` is `${{ secrets.ALIYUN_DOCKER_PASSWORD }}`, the secret `DOCKER_USERNAME` is `${{ secrets.DOCKER_USERNAME }}` and the secret `DOCKER_PASSWORD` is `${{ secrets.DOCKER_PASSWORD }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5544253456771651}, {"id": "63c493ff8052faa2781a8681", "level": "level4", "llm_response": "```yaml name: Check License Lines\n\non:\n  push:\n    branches:\n      - '*'\n      - '*'\n\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: stefanzweifel/git-auto-assigner@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          assignees: stefanzweifel\n```", "answer": "```yaml name: Check License Lines\non:\n  push:\n    branches: '**'\n#  pull_request:\n#    branches:\n#      - main\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: kt3k/license_checker@v1.0.6```", "prompt": "Generate a GitHub Workflow named `Check License Lines` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch whose name matches * or a branch whose name matches *. The workflow has one job. The job id of the 1st job is `check-license-lines`. This job will run on ubuntu-latest runner. The job `check-license-lines` has 2 steps. The 1st step is named ``. The 2nd step is named `Check License Lines`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5673375806480351}, {"id": "63c494888052faa2781abb68", "level": "level4", "llm_response": "```yaml name: MERGE_MASTER_TO_DEVELOP\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout develop\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Merge master to develop and push\n        run: |\n          git config user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config user.name \"github-actions[bot]\"\n          git checkout develop\n          git merge master\n          git push origin develop:develop\n      - name: Notify failure on Slack\n        uses: slackapi/slack-webhook-action@v2.0.0\n        env:\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}\n          SLACK_ICON_EMOJI: \ud83c\udf89\n          SLACK_FOOTER: ${{ github.event_name == 'push' && github.ref_name == 'refs/heads/master' ? 'New develop' : 'New develop' }}\n          SLACK_USERNAME: ${{ github.actor }}\n```", "answer": "```yaml name: MERGE_MASTER_TO_DEVELOP\non:\n  push:\n    branches:\n    - \"master\"\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n    - name: Checkout develop\n      uses: actions/checkout@v3\n      with:\n        ref: develop\n        fetch-depth: 0\n    - name: Merge master to develop and push\n      run: |\n        git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\n        git config user.email '${{ secrets.BPMN_IO_EMAIL }}'\n        git merge -m 'Merge master to develop' --no-edit origin/master\n        git push\n\n    - name: Notify failure on Slack\n      if: failure()\n      uses: slackapi/slack-github-action@v1.15.0\n      with:\n        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}\n        slack-message: \"Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.\"\n      env:\n        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `MERGE_MASTER_TO_DEVELOP` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `Merge_master_to_develop`. This job will run on ubuntu-latest runner. The job `Merge_master_to_develop` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `Merge_master_to_develop`. The job `Merge_master_to_develop` has 3 steps. The 1st step is named `Checkout develop`. The 2nd step is named `Merge master to develop and push`. The 3rd step is named `Notify failure on Slack`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 31: mapping values are not allowed in this context", "filepath": "../tmp/test.yml", "line": 31, "column": 0, "kind": "syntax-check", "snippet": "          SLACK_FOOTER: ${{ github.event_name == 'push' && github.ref_name == 'refs/heads/master' ? 'New develop' : 'New develop' }}", "end_column": 0}]}, "bleu_score": 0.41482209968286293}, {"id": "63c495038052faa2781aede8", "level": "level4", "llm_response": "```yaml name: Python package\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: windows-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Create Conda environment with the rights deps\n        run: conda create -n testenv python=${{ matrix.python-version }} --channel conda-forge\n      - name: Install dependencies\n        run: conda install --file requirements.txt\n      - name: Run Tests\n        run: pytest\n      - name: Conda info\n        run: conda info\n      - name: Conda list\n        run: conda list\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: \"windows-latest\"\n    strategy:\n      fail-fast: True\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          auto-update-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n        env:\n          ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n      - name: Create Conda environment with the rights deps\n        shell: bash -l {0}\n        run: |\n          conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n      - name: Install dependencies\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          python -m pip install --upgrade pip\n          python -m pip install -U pip setuptools wheel\n          python -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\n          python -m pip install .\n          python -m pip freeze\n          npm install -g azurite\n      - name: Run Tests\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          mkdir ~/blob_emulator\n          azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n          pytest -sv --timeout=300\n        env:\n          ZARR_TEST_ABS: 1\n          ZARR_V3_EXPERIMENTAL_API: 1\n      - name: Conda info\n        shell: bash -l {0}\n        run: conda info\n      - name: Conda list\n        shell: pwsh\n        run: conda list\n```", "prompt": "Generate a GitHub Workflow named `Python package` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Windows Tests` and its job id is `windows`. This job will run on windows-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `python-version` has 3 values: 3.8, 3.9 and 3.10. If any job run in the matrix fails, all in-progress and queued jobs in the matrix will be canceled. The job `windows` has 7 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Create Conda environment with the rights deps`. The 4th step is named `Install dependencies`. The 5th step is named `Run Tests`. The 6th step is named `Conda info`. The 7th step is named `Conda list`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.16330243661918917}, {"id": "63c494cf8052faa2781ad80f", "level": "level4", "llm_response": "```yaml name: Release Documentation\n\non:\n  release:\n    types: [published]\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        java: [8]\n        os: [ubuntu-22.04]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle.properties') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-wrapper-\n\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: ${{ matrix.java }}\n\n      - name: Build with Gradle\n        run: ./gradlew build -Pbuild-release\n```", "answer": "```yaml name: Release Documentation\non:\n  release:\n    types: [published]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail'\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        java: [ '8' ]\n        os: ['ubuntu-22.04' ]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-caches-\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrapper\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: ${{ matrix.java }}\n      - name: Build with Gradle\n        run: ./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace\n```", "prompt": "Generate a GitHub Workflow named `Release Documentation` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow sets an environment variable to use: `GRADLE_OPTS` is set to `-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail`. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The 1st job is named `Publish Release Documentation` and its job id is `java-build`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `java` has one value: 8. The variable `os` has one value: ubuntu-22.04. The job `java-build` has 5 steps. The 1st step is named `Checkout code`. The 2nd step is named `Cache Gradle dependencies`. The 3rd step is named `Cache Gradle wrappers`. The 4th step is named `Setup java`. The 5th step is named `Build with Gradle`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6310129749608503}, {"id": "63c496851899db58864d368d", "level": "level4", "llm_response": "```yaml name: Bump repositories\n\non:\n  schedule:\n    - cron: '0 22 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Bump cos \ud83d\udd27\n        uses: ./.github/actions/bump\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: main\n          commit-message: bump\n          committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>\n          title: bump\n          body: |\n            bump\n```", "answer": "```yaml name: Bump repositories\non: \n schedule:\n   - cron: 0 20 * * *\n workflow_dispatch:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Bump cos \ud83d\udd27\n      run: |\n           docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\n           docker cp yq:/usr/bin/yq ./\n           export YQ=$PWD/yq\n           sudo -E bash ./.github/bump_repositories.sh\n           rm -rf yq\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      with:\n        token: ${{ secrets.PAT_TOKEN }}\n        push-to-fork: ci-robbot/c3os\n        commit-message: \":arrow_up: Update repositories\"\n        title: \"Repositories bump\"\n        body: \"Bump of luet repositories\"\n```", "prompt": "Generate a GitHub Workflow named `Bump repositories` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 08:00 pm. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 3 steps. The 1st step is named ``. The 2nd step is named `Bump cos \ud83d\udd27`. The 3rd step is named `Create Pull Request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3690311391460334}, {"id": "63c4945a7843b61269a00a52", "level": "level4", "llm_response": "```yaml name: ci\n\non: [pull_request]\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: .github/docker/Dockerfile\n          push: true\n          tags: ${{ env.TEST_TAG }}\n\n      - name: Run\n        run: |\n          go run github.com/onsi/ginkgo/cmd/ginkgo/ginkgo -c .\n```", "answer": "```yaml name: ci\n\non:\n  pull_request:\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          load: true\n          push: false\n          tags: ${{ env.TEST_TAG }}\n      - name: Run\n        run: |\n          docker run --rm ${{ env.TEST_TAG }} ci\n```", "prompt": "Generate a GitHub Workflow named `ci` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow sets an environment variable to use: `TEST_TAG` is set to `protoc-gen-validate:${{ github.sha }}`. The workflow has one job. The job id of the 1st job is `docker`. This job will run on ubuntu-latest runner. The job `docker` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up QEMU`. The 3rd step is named `Set up Docker Buildx`. The 4th step is named `Build and export to Docker`. The 5th step is named `Run`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7764124327900679}, {"id": "63c49698b008460c1df15629", "level": "level4", "llm_response": "```yaml name: Auto Assign PR to Author\n\non:\n  pull_request_target:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: github/auto-assign-pr@v3\n        with:\n          assignees: pavelkornik\n          add-labels: 'auto-assign'\n```", "answer": "```yaml name: 'Auto Assign PR to Author'\non:\n  pull_request:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    permissions:\n      contents: read  # for kentaro-m/auto-assign-action to fetch config file\n      pull-requests: write  # for kentaro-m/auto-assign-action to assign PR reviewers\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n```", "prompt": "Generate a GitHub Workflow named `Auto Assign PR to Author` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by an event: a pull request is created. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `add-reviews`. This job will run on ubuntu-latest runner. The job `add-reviews` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `add-reviews`. The job `add-reviews` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2571336050571398}, {"id": "63c494a87843b61269a02a08", "level": "level4", "llm_response": "```yaml name: Test\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - run: python -m pip install --upgrade pip\n      - run: pip install -e .[test]\n      - run: python -m pytest -v --cov=web\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install -r requirements/build-docs.txt\n      - run: linkcheckMarkdown docs/ -v -r\n      - run: mkdocs build --verbose\n```", "prompt": "Generate a GitHub Workflow named `Test` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `docs`. This job will run on ubuntu-latest runner. The job `docs` has 5 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The 5th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5191429953688618}, {"id": "63c4956d7843b61269a07890", "level": "level4", "llm_response": "```yaml name: Issue Comments for merge\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  check_comments_merge:\n    name: Check comments for /merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Command\n        run: |\n          echo \"Please use /merge to merge this pull request\"\n          echo \"If you do not want to merge, just remove this comment\"\n          echo \"If you want to merge, just remove the /merge comment\"\n\n  merge:\n    needs: check_comments_merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge Pull Request\n        uses: actions/merge-pr@v3\n        with:\n          merge-method: synchronize\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n  commentFeedback:\n    needs: merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add reaction on success\n        uses: peter-evans/repository-comment-action@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Thank you for your contribution! Please review the [documentation](https://docs.pagerduty.com) and [FAQ](https://docs.pagerduty.com/faq) for any information you need.\n```", "answer": "```yaml on: issue_comment\nname: Issue Comments for merge\njobs:\n  check_comments_merge:\n    name: Check comments for /merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Command\n        uses: xt0rted/slash-command-action@v1.1.0\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          command: merge\n          reaction: \"true\"\n          reaction-type: \"eyes\"\n          allow-edits: \"false\"\n          permission-level: admin\n  merge:\n    runs-on: ubuntu-latest\n    needs: [check_comments_merge]\n    steps:\n      - name: Merge Pull Request\n        uses: juliangruber/merge-pull-request-action@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          number: ${{ github.event.issue.number }}\n          method: merge\n  commentFeedback:\n    runs-on: ubuntu-latest\n    needs: [merge]\n    steps:\n      - name: Add reaction on success\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reaction-type: hooray\n```", "prompt": "Generate a GitHub Workflow named `Issue Comments for merge` for a GitHub repository whose primary programming language is HCL. This workflow will be triggered by an event: activity related to an issue or pull request comment occurs. The workflow has 3 jobs. The 1st job is named `Check comments for /merge` and its job id is `check_comments_merge`. This job will run on ubuntu-latest runner. The job `check_comments_merge` has one step. The 1st step is named `Check for Command`. The job id of the 2nd job is `merge`. Before this job runs, `check_comments_merge` must complete successfully. This job will run on ubuntu-latest runner. The job `merge` has one step. The 1st step is named `Merge Pull Request`. The job id of the 3rd job is `commentFeedback`. Before this job runs, `merge` must complete successfully. This job will run on ubuntu-latest runner. The job `commentFeedback` has one step. The 1st step is named `Add reaction on success`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3249966935322531}, {"id": "63c4951b8052faa2781af857", "level": "level4", "llm_response": "```yaml name: Docs Build\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install deps\n        run: npm ci\n\n      - name: Build docs\n        run: npm run build\n\n      - name: Deploy to GitHub Pages\n        uses: JamesIves/github-pages-deploy-action@v4.2.2\n        with:\n          branch: gh-pages\n          folder: docs\n          clean: true\n```", "answer": "```yaml name: Docs Build\n\non:\n  # allows to manually run the job at any time\n  workflow_dispatch:\n  \n  # run on every push on the master branch\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install deps\n        run: |\n          npm install vuepress -D\n          npm install macaca-ecosystem -D\n\n      - name: Build docs\n        run: npm run docs:build\n\n      - name: Deploy to GitHub Pages\n        if: success()\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs_dist\n```", "prompt": "Generate a GitHub Workflow named `Docs Build` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `docs-build`. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 10. The job `docs-build` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set node version to 16`. The 3rd step is named `Install deps`. The 4th step is named `Build docs`. The 5th step is named `Deploy to GitHub Pages`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5816422114270606}, {"id": "63c494027843b612699fe5e4", "level": "level4", "llm_response": "```yaml name: \"CLA\"\non:\n  pull_request:\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: redhat-actions/cla-checker@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          use-issues-labels: true\n```", "answer": "```yaml name: CLA\non: [pull_request]\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: ./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"\n```", "prompt": "Generate a GitHub Workflow named `CLA` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check`. This job will run on ubuntu-latest runner. The job `check` has 2 steps. The 1st step is named ``. The 2nd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.28753380961256264}, {"id": "63c494fc8052faa2781aead3", "level": "level4", "llm_response": "```yaml name: Update Release List\n\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    branches:\n      - master\n    types:\n      - completed\n\npermissions:\n  contents: write\n\nenv:\n  USER_NAME: ctags-win32 CI\n  USER_EMAIL: ctags-win32-ci@users.noreply.github.com\n  COL_RED: '\u001b[31m'\n  COL_GREEN: '\u001b[32m'\n  COL_YELLOW: '\u001b[33m'\n  COL_RESET: '\u001b[m'\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n      - name: Update Release List\n        run: |\n          curl -s https://bootstrap.pypa.io/get-pip.py | python - -m pip install --upgrade pip\n          pip install -r requirements.txt\n          python scripts/update_release_list.py\n```", "answer": "```yaml name: Update Release List\n\non:\n  #release:\n  #  types: [published]\n  workflow_run:\n    workflows: [\"Build\"]\n    branches: [master]\n    types: [completed]\n\npermissions:\n  contents: write # to update wiki\n\nenv:\n  # Account for committing\n  USER_NAME: \"ctags-win32 CI\"\n  USER_EMAIL: \"ctags-win32-ci@users.noreply.github.com\"\n\n  # Escape sequences\n  COL_RED: \"\\x1b[31m\"\n  COL_GREEN: \"\\x1b[32m\"\n  COL_YELLOW: \"\\x1b[33m\"\n  COL_RESET: \"\\x1b[m\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        path: main\n\n    - uses: actions/checkout@v3\n      with:\n        repository: \"${{ github.repository }}.wiki\"\n        path: wiki\n\n    - name: Update Release List\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        cd main\n        latest=$(cat ctagsver.txt)\n        cd ../wiki\n        ../main/scripts/update-release-list.py\n        git add Releases-in-*.md\n        if git diff HEAD --quiet; then\n          echo ${COL_YELLOW}No updates.${COL_RESET}\n        else\n          git config --local user.name ${USER_NAME}\n          git config --local user.email ${USER_EMAIL}\n          git commit -a -m \"Update Release List to ${latest}\"\n          git push origin HEAD\n        fi\n```", "prompt": "Generate a GitHub Workflow named `Update Release List` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the workflow named Build is completed on a branch whose name matches master. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 6 environment variables to use: `USER_NAME` is set to `ctags-win32 CI`, `USER_EMAIL` is set to `ctags-win32-ci@users.noreply.github.com`, `COL_RED` is set to `\u001b[31m`, `COL_GREEN` is set to `\u001b[32m`, `COL_YELLOW` is set to `\u001b[33m` and `COL_RESET` is set to `\u001b[m`. The workflow has one job. The job id of the 1st job is `update`. This job will run only if the condition(${{ github.event.workflow_run.conclusion == 'success' }}) is met. This job will run on ubuntu-latest runner. The job `update` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named `Update Release List`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: control characters are not allowed", "filepath": "../tmp/test.yml", "line": 0, "column": 0, "kind": "syntax-check", "end_column": 0}]}, "bleu_score": 0.21829932843718042}, {"id": "63c4969c1899db58864d4153", "level": "level4", "llm_response": "```yaml name: Docker Nightly Production\n\non:\n  push:\n    branches:\n      - mealie-next\nconcurrency:\n  group: nightly-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  backend-tests:\n    name: Backend Server Tests\n    uses: ./.github/workflows/partial-backend.yml\n    with:\n      build: true\n\n  frontend-tests:\n    name: Frontend and End-to-End Tests\n    uses: ./.github/workflows/partial-frontend.yml\n    with:\n      build: true\n\n  build-release:\n    name: Build Tagged Release\n    uses: ./.github/workflows/partial-builder.yml\n    with:\n      tag: nightly\n      # secrets are passed in the workflow definition\n    secrets:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n\n  notify-discord:\n    name: Notify Discord\n    needs: [backend-tests, frontend-tests]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        uses: discordapi/discord-notification@master\n        with:\n          token: ${{ secrets.DISCORD_WEBHOOK }}\n          message: |\n            \ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25system\n# name: Build Tagged Release\n\njobs:\n  build-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        uses: discordapi/discord-notification@master\n        with:\n          token: ${{ secrets.DISCORD_WEBHOOK }}\n          message: |\n            \ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\udd25system\nsystem:\nname: Notify Discord\n\non:\n  push:\n    branches:\n      - mealie-next\n    # schedule:\n    # - cron: '0 0 * * *'\n\njobs:\n  notify-discord:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n", "answer": "```yaml name: Docker Nightly Production\n\non:\n  push:\n    branches:\n      - mealie-next\n\nconcurrency:\n  group: nightly-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  backend-tests:\n    name: \"Backend Server Tests\"\n    uses: ./.github/workflows/partial-backend.yml\n\n  frontend-tests:\n    name: \"Frontend and End-to-End Tests\"\n    uses: ./.github/workflows/partial-frontend.yml\n\n  build-release:\n    name: Build Tagged Release\n    uses: ./.github/workflows/partial-builder.yml\n    needs:\n      - frontend-tests\n      - backend-tests\n    with:\n      tag: nightly\n    secrets:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n\n  notify-discord:\n    name: Notify Discord\n    needs:\n      - build-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_NIGHTLY_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: \"\ud83d\ude80  A New build of mealie:api-nightly and mealie:frontend-nightly is available\"\n\n  deploy-demo:\n    runs-on: ubuntu-latest\n    name: Deploy Demo\n    needs:\n      - build-release\n    steps:\n      - name: Clean and Deploy Demo\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.DEMO_SERVER_IP }}\n          username: ${{ secrets.DEMO_SERVER_USER }}\n          key: ${{ secrets.DEMO_SERVER_SSH_KEY }}\n          port: ${{ secrets.DEMO_SERVER_PORT }}\n          script_stop: true\n          script: |\n            cd ~/docker/mealie-next\n            docker-compose pull\n            docker-compose down -v\n            docker-compose up -d\n```", "prompt": "Generate a GitHub Workflow named `Docker Nightly Production` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named mealie-next. Only a single workflow using the nightly-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has 5 jobs. The 1st job is named `Backend Server Tests` and its job id is `backend-tests`. This job will call a reusable workflow located at `./.github/workflows/partial-backend.yml`. The 2nd job is named `Frontend and End-to-End Tests` and its job id is `frontend-tests`. This job will call a reusable workflow located at `./.github/workflows/partial-frontend.yml`. The 3rd job is named `Build Tagged Release` and its job id is `build-release`. Before this job runs, `frontend-tests` and `backend-tests` must complete successfully. This job will call a reusable workflow located at `./.github/workflows/partial-builder.yml`. The job will pass an input to the called workflow: the input `tag` is `nightly`. The job will pass 2 secrets to the called workflow: the secret `DOCKERHUB_USERNAME` is `${{ secrets.DOCKERHUB_USERNAME }}` and the secret `DOCKERHUB_TOKEN` is `${{ secrets.DOCKERHUB_TOKEN }}`. The 4th job is named `Notify Discord` and its job id is `notify-discord`. Before this job runs, `build-release` must complete successfully. This job will run on ubuntu-latest runner. The job `notify-discord` has one step. The 1st step is named `Discord notification`. The 5th job is named `Deploy Demo` and its job id is `deploy-demo`. Before this job runs, `build-release` must complete successfully. This job will run on ubuntu-latest runner. The job `deploy-demo` has one step. The 1st step is named `Clean and Deploy Demo`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "workflow is empty", "filepath": "../tmp/test.yml", "line": 1, "column": 1, "kind": "syntax-check", "end_column": 1}]}, "bleu_score": 0}, {"id": "63c4949a8052faa2781ac0b0", "level": "level4", "llm_response": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          restore-keys: ${{ runner.os }}-pnpm-\n\n      - uses: actions/cache@v3\n        with:\n          path: ~/.cache/pnpm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          restore-keys: ${{ runner.os }}-pnpm-\n\n      - uses: actions/cache@v3\n        with:\n          path: ~/.cache/pnpm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}\n          restore-keys: ${{ runner.os }}-pnpm-\n\n      - name: Build project\n        run: |\n          pnpm install --frozen-lockfile\n          pnpm run build\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-pnpm-modules\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ${{ github.workspace }}/.next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          restore-keys: |\n            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-\n      - uses: pnpm/action-setup@v2.2.4\n        with:\n          version: 7.x.x\n          run_install: true\n      - name: Build project\n        run: |\n          yarn build\n          yarn lint\n        env:\n          CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node.js CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `node-version` has one value: 16.x. The job `build` has 6 steps. The 1st step is named ``. The 2nd step is named `Use Node.js ${{ matrix.node-version }}`. The 3rd step is named `Cache pnpm modules`. The 4th step is named ``. The 5th step is named ``. The 6th step is named `Build project`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.44703083490738427}, {"id": "63c4947b8052faa2781ab631", "level": "level4", "llm_response": "```yaml name: Publish Test Results\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types:\n      - completed\n\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion != 'skipped'\n    steps:\n      - name: Download and Extract Artifacts\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const artifacts = await github.actions.listWorkflowRunArtifacts({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: context.payload.workflow_run.id,\n            });\n            const artifactsUrls = artifacts.artifacts.map((artifact) => artifact.download_url);\n            await github.actions.downloadArtifact({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              artifact_id: artifacts.artifacts[0].id,\n            });\n            await github.actions.uploadArtifact({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              path: artifactsUrls.join(' '),\n              name: 'Test Results',\n            });\n      - name: Publish Test Results\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { github } = require('github');\n            const { uploadArtifact } = require('actions/upload-artifact');\n            const { stdout } = await github.context.actions.getOutput('test-results');\n            const { stdout: testResults } = await github.context.actions.getOutput('test-results');\n            await uploadArtifact({\n              owner: 'jenkins',\n              repo: 'jenkins-plugins',\n              path: testResults,\n              name: 'Test Results',\n            });\n```", "answer": "```yaml # Publishing of unit test results has to be a separate workflow in order to support forked PRs\n# See https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches\nname: Publish Test Results\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion != 'skipped'\n\n    steps:\n      - name: Download and Extract Artifacts\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        run: |\n          mkdir -p artifacts && cd artifacts\n\n          artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\n          gh api \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\n          do\n            IFS=$'\\t' read name url <<< \"$artifact\"\n            gh api $url > \"$name.zip\"\n            unzip -d \"$name\" \"$name.zip\"\n          done\n\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          commit: ${{ github.event.workflow_run.head_sha }}\n          event_file: artifacts/Event File/event.json\n          event_name: ${{ github.event.workflow_run.event }}\n          junit_files: |\n            artifacts/**/surefire-reports/*.xml\n            artifacts/**/failsafe-reports/TEST-*.xml\n```", "prompt": "Generate a GitHub Workflow named `Publish Test Results` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: the workflow named CI is completed. The workflow has one job. The 1st job is named `Test Results` and its job id is `test-results`. This job will run only if the condition(github.event.workflow_run.conclusion != 'skipped') is met. This job will run on ubuntu-latest runner. The job `test-results` has 2 steps. The 1st step is named `Download and Extract Artifacts`. The 2nd step is named `Publish Test Results`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2386017771678478}, {"id": "63c4950a7843b61269a0501c", "level": "level4", "llm_response": "```yaml name: Integration test on schedule (minimal)\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: ['1.22', '1.23']\n    secrets:\n      special_case_secrets: inherit\n```", "answer": "```yaml name: Integration test on schedule (minimal)\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    secrets: inherit\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: \"['1.22', '1.23']\"\n```", "prompt": "Generate a GitHub Workflow named `Integration test on schedule (minimal)` for a GitHub repository whose primary programming language is Mustache. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Start integration test (minimal)` and its job id is `start-integration-test-minimal`. This job will call a reusable workflow located at `./.github/workflows/integration.yml`. The job will pass 3 inputs to the called workflow: the input `install_profile` is `minimal`, the input `cluster_region` is `ams3` and the input `kubernetes_versions` is `['1.22', '1.23']`. The job will pass a secret to the called workflow: the secret `special_case_secrets` is `inherit`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "expected scalar node for string value but found sequence node with \"!!seq\" tag", "filepath": "../tmp/test.yml", "line": 18, "column": 28, "kind": "syntax-check", "snippet": "      kubernetes_versions: ['1.22', '1.23']\n                           ^~~~~~~~", "end_column": 35}]}, "bleu_score": 0.6467406281551662}, {"id": "63c496891e3364807577b43d", "level": "level4", "llm_response": "```yaml name: Check Actions rate limit\n\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        uses: amannn/action-gh-action-rate-limit@v1.1.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        env:\n          TOKEN: ${{ github.token }}\n        run: |\n          curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n```", "prompt": "Generate a GitHub Workflow named `Check Actions rate limit` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Check Actions rate limit` and its job id is `check`. This job will run on ubuntu-latest runner. The job `check` has one step. The 1st step is named `Check rate limit`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6016696423997354}, {"id": "63c4969e1899db58864d41ee", "level": "level4", "llm_response": "```yaml name: Auto message on Creating Issue.\non:\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment for issue\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { context } = context;\n            const { owner, repo } = context.repo;\n            const { data } = await fetch(`https://api.github.com/repos/${owner}/${repo}/issues/${context.issue.number}/comments`, {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/vnd.github.v3+json'\n              }\n            });\n            const { created_at } = data;\n            console.log('created_at', created_at);\n            const issue_comment = {\n              html_url: context.issue.html_url,\n              author: context.issue.user.login,\n              body: `\n                Hey @${context.issue.user.login},\n                This issue has been opened on [${context.issue.title}](${context.issue.html_url}). \n                This issue was created by [${context.issue.user.login}](${context.issue.user.html_url}) on [${context.issue.user.login}](${context.issue.user.html_url}). \n                It is a [bug] issue.\n                If you are a bug reporter, please go to [https://github.com/$_{owner}/$_{repo}](https://github.com/$_{owner}/$_{repo}) repository and open a new issue. \n                If you are a developer, please go to [https://github.com/$_{owner}/$_{repo}](https://github.com/$_{owner}/$_{repo}) repository and open a new issue.\n              `\n            };\n            await context.client.receiveComment({ issue_id: context.issue.number, body: JSON.stringify(issue_comment) }).then(response => response.data.id);\n```", "answer": "```yaml name: Auto message on Creating Issue.\n\non:\n\n  issues:\n\n    types: [opened]\n\njobs:\n\n  greeting:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Create comment for issue\n\n      if: github.event_name =='issues' \n\n      uses: peter-evans/create-or-update-comment@v1\n\n      with:\n\n        issue-number: ${{tojson(github.event.issue.number)}}\n\n        body: |\n\n            Hi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n```", "prompt": "Generate a GitHub Workflow named `Auto message on Creating Issue.` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `greeting`. This job will run on ubuntu-latest runner. The job `greeting` has one step. The 1st step is named `Create comment for issue`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.15128757658921643}, {"id": "63c496941899db58864d3d85", "level": "level4", "llm_response": "```yaml name: release-please\non:\n  push:\n    branches:\n      - master\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-please/action@v3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          release-type: Swift\n          release-name: Swift\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release-please\non:\n   push:\n      branches:\n         - master\njobs:\n   release-please:\n      runs-on: ubuntu-latest\n      steps:\n         - uses: GoogleCloudPlatform/release-please-action@v2\n           with:\n            token: ${{ secrets.GITHUB_TOKEN }}\n            release-type: simple\n            version-file: \"./version.txt\"\n            package-name: release-please-action\n            default-branch: master\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is Swift. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. This job will run on ubuntu-latest runner. The job `release-please` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6364713244392607}, {"id": "63c496486fc19abdf9c9b0d5", "level": "level4", "llm_response": "```yaml name: Dependencies\non:\n  schedule:\n    - cron: 0 12 * * 1\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - run: npm install -g yarn\n      - run: yarn upgrade\n      - run: yarn audit\n      - run: yarn audit --check-files\n```", "answer": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: \"0 12 * * 1\"\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: latest\n      - uses: actions/setup-node@v3\n        with:\n          cache: \"pnpm\"\n          node-version-file: \".nvmrc\"\n          registry-url: \"https://npm.pkg.github.com\"\n      - run: rm -rf pnpm-lock.yaml **/node_modules/\n      - run: pnpm install\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}\n      - uses: EndBug/add-and-commit@v9\n        with:\n          message: \"chore(deps): upgrade versions\"\n```", "prompt": "Generate a GitHub Workflow named `Dependencies` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 pm, only on monday. 2) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Upgrade dependencies` and its job id is `upgrade`. This job will run on ubuntu-latest runner. The job `upgrade` has 6 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. The 4th step is named ``. The 5th step is named ``. The 6th step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3502643414198792}, {"id": "63c4954d8052faa2781b0e83", "level": "level4", "llm_response": "```yaml name: xgo\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n    types: [opened, synchronize]\n\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build artifacts\n        run: |\n          docker buildx build --push --label \"org.opencontainers.image.version=${{ github.ref }}\" --label \"org.opencontainers.image.title=xgo\" --label \"org.opencontainers.image.documentation=https://github.com/koalaman/xgo/blob/main/README.md\" -t xgo:latest .\n\n      - name: Move artifacts\n        run: |\n          docker move xgo:latest xgo:latest --all --force\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: artifacts\n          path: xgo/**\n\n      - name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: xgo/**\n\n```", "answer": "```yaml name: xgo\n\nconcurrency:\n  group: xgo-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - 'v*'\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    branches:\n      - 'master'\n    paths-ignore:\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      -\n        name: Build artifacts\n        uses: docker/bake-action@v2\n        with:\n          targets: artifact-all\n      -\n        name: Move artifacts\n        run: |\n          mv ./dist/**/* ./dist/\n      -\n        name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: xgo\n          path: ./dist/*\n          if-no-files-found: error\n      -\n        name: GitHub Release\n        uses: softprops/action-gh-release@v1\n        if: startsWith(github.ref, 'refs/tags/v')\n        with:\n          draft: true\n          files: |\n            dist/*.tar.gz\n            dist/*.zip\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `xgo` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a tag whose name matches v*. When all the path names of push event match patterns in the paths-ignore filter(**.md), the workflow will not run. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. When all the path names of pull_request event match patterns in the paths-ignore filter(**.md), the workflow will not run. Only a single workflow using the xgo-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 6 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up Docker Buildx`. The 3rd step is named `Build artifacts`. The 4th step is named `Move artifacts`. The 5th step is named `Upload artifacts`. The 6th step is named `GitHub Release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.491920851548985}, {"id": "63c494a48052faa2781ac54e", "level": "level4", "llm_response": "```yaml name: lint\n\non:\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'docs/**'\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cspell-actions/cspell@v1\n        with:\n          config-file: .cspell.json\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ignore-files: 'docs/**'\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - run: npm ci\n      - run: npm run lint\n```", "answer": "```yaml name: lint\non: # rebuild any PRs and main branch changes\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"docs/**\"\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx cspell \"**\" --dot --no-progress\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: yarn\n      - run: yarn lint\n```", "prompt": "Generate a GitHub Workflow named `lint` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) When all the path names of pull_request event match patterns in the paths-ignore filter(docs/**), the workflow will not run. 2) The workflow would run whenever there is a push event to: a branch named main. When all the path names of push event match patterns in the paths-ignore filter(docs/**), the workflow will not run. The workflow has 2 jobs. The job id of the 1st job is `cspell`. This job will run on ubuntu-latest runner. The job `cspell` has 2 steps. The 1st step is named ``. The 2nd step is named ``. The job id of the 2nd job is `lint`. This job will run on ubuntu-latest runner. The job `lint` has 3 steps. The 1st step is named ``. The 2nd step is named ``. The 3rd step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4011318483045433}, {"id": "63c4957d8052faa2781b229c", "level": "level4", "llm_response": "```yaml name: Build site nightly\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: curl\n        uses: actions/checkout@v1\n        with:\n          fetch-depth: 0\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nname: Build site nightly\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: curl\n        env:\n          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}\n        uses: wei/curl@v1\n        with:\n          args: -X POST -d '{}' \"$NETLIFY_BUILD_HOOK\"\n```", "prompt": "Generate a GitHub Workflow named `Build site nightly` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The 1st job is named `dot-release` and its job id is `dot-release`. This job will run on ubuntu-latest runner. The job `dot-release` has one step. The 1st step is named `curl`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6004122605351058}, {"id": "63c4968633b087f6bde2c8ea", "level": "level4", "llm_response": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"0.*.*\"\n      - \"0.*.*rc[0-9]+\"\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    container:\n      image: python:${{ matrix.python }}\n    strategy:\n      fail-fast: false\n      matrix:\n        environment: [py36, py37, flake8]\n        python: [3.6, 3.7]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install tox\n        run: |\n          python -m pip install tox\n      - name: Run tox\n        run: tox -e ${{ matrix.environment }}\n```", "answer": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"[0-9]+.[0-9]+.[0-9]+\"\n      - \"[0-9]+.[0-9]+.[0-9]+rc[0-9]+\"\n\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment:\n          - \"py36\"\n          - \"py37\"\n          - \"flake8\"\n\n        include:\n          - environment: \"py36\"\n            python: \"3.6\"\n          - environment: \"py37\"\n            python: \"3.7\"\n          - environment: \"flake8\"\n            python: \"3.7\"\n\n    container:\n      image: python:${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install tox\n      - name: Run tox\n        run: |\n          tox -e ${{ matrix.environment }}\n```", "prompt": "Generate a GitHub Workflow named `Run checks` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a tag whose name matches [0-9]+.[0-9]+.[0-9]+ or a tag whose name matches [0-9]+.[0-9]+.[0-9]+rc[0-9]+. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `tox`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `environment` has 3 values: py36, py37 and flake8. For each object in the [{'environment': 'py36', 'python': '3.6'}, {'environment': 'py37', 'python': '3.7'}, {'environment': 'flake8', 'python': '3.7'}] list, the key:value pairs in the object will be added to each of the matrix combinations if none of the key:value pairs overwrite any of the original matrix values. If the object cannot be added to any of the matrix combinations, a new matrix combination will be created instead. The job creates a Docker container that uses `python:${{ matrix.python }}` image. The job `tox` has 3 steps. The 1st step is named ``. The 2nd step is named `Install tox`. The 3rd step is named `Run tox`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4546201998692082}, {"id": "63c494187843b612699fef56", "level": "level4", "llm_response": "```yaml name: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: 'Optional. If true, the workflow will run with debug enabled'\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  fork_update_pr:\n    name: Fork Update PR\n    runs-on: ubuntu-latest\n    if: github.repository_owner != 'HariSekhon'\n    steps:\n      - uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n        with:\n          debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: false\n\njobs:\n  fork_update_pr:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == true\n    if: github.repository_owner != 'HariSekhon'\n    name: Fork Update PR\n    uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "prompt": "Generate a GitHub Workflow named `Fork Update PR` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, it is optional and its default value is False. 2) the scheduled time has come: at 10:00 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the ${{ github.ref }}-${{ github.workflow }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Fork Update PR` and its job id is `fork_update_pr`. This job will run only if the condition(github.repository_owner != 'HariSekhon') is met. This job will call a reusable workflow located at `HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master`. The job will pass an input to the called workflow: the input `debug` is `${{ github.event.inputs.debug }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6319541940167649}, {"id": "63c494e67843b61269a04123", "level": "level4", "llm_response": "```yaml name: CI\n\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Flutter\n        uses: flutter/flutter-setup-action@v2.2.0\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter pub run static_analysis\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --style=google --check\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "answer": "```yaml name: CI\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: '2.10.4'\n          channel: 'stable'\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --set-exit-if-changed --dry-run .\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch whose name matches **. When all the path names of pull_request event match patterns in the paths-ignore filter(.github/**, .vscode/** or README.md), the workflow will not run. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 6 steps. The 1st step is named `Setup Flutter`. The 2nd step is named `Checkout OneSignal-Flutter-SDK`. The 3rd step is named `Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6`. The 4th step is named `Static Analysis`. The 5th step is named `Ensure the Dart code is formatted correctly`. The 6th step is named `Run Flutter unit tests`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8055780404055842}, {"id": "63c4957b8052faa2781b219f", "level": "level4", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**.go'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**.go'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Build\n        run: make build\n      - name: Test\n        run: make test\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches: [ main ]\n    paths:\n      - '**.go'\n  pull_request:\n    branches: [ main ]\n    paths:\n      - '**.go'\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.18\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Test\n      run: go test -cover -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(**.go), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. Only if at least one path of pull_request event matches a pattern in the paths filter(**.go), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 4 steps. The 1st step is named ``. The 2nd step is named `Set up Go`. The 3rd step is named `Build`. The 4th step is named `Test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5822371300862228}, {"id": "63c495928052faa2781b2bc1", "level": "level4", "llm_response": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml \n# https://github.com/actions/create-release\nname: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Create Release` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Create Release` and its job id is `build`. This job will run on ubuntu-latest runner. The job `build` has 2 steps. The 1st step is named `Checkout code`. The 2nd step is named `Create Release` and its id is `create_release`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8333945353480908}, {"id": "63c496686fc19abdf9c9bea4", "level": "level4", "llm_response": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'yarn'\n      - name: update_release_draft\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { createRelease, createTag, createDraftRelease } = require('actions/github-script')\n            const { context } = context\n\n            createRelease(context.repo.token, {\n              prerelease: false,\n              draft: false,\n              body: 'Update the next release',\n              name: 'Update the next release',\n              target_commitish: 'main'\n            })\n              .then(r => {\n                console.log('Draft created:', r)\n                createTag(context.repo.token, {\n                  body: 'Tag the next release',\n                  name: 'Tag the next release',\n                  namePrefix: 'next',\n                  targetCommitish: 'main',\n                  owner: 'aurelia-framework',\n                  repository: 'aurelia-framework/aurelia',\n                  tag: r.data.sha\n                })\n                  .then(t => {\n                    console.log('Tag created:', t)\n                    createDraftRelease(context.repo.token, {\n                      draft: true,\n                      body: 'Draft the next release',\n                      name: 'Draft the next release',\n                      target_commitish: 'main'\n                    })\n                      .then(r => {\n                        console.log('Draft created:', r)\n                      })\n                  })\n              })\n              .catch(e => {\n                console.error('Error creating release', e)\n              })\n```", "answer": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Drafts/updates the next repository release` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. This job will run on ubuntu-latest runner. The job `update_release_draft` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.11860992820837389}, {"id": "63c494768052faa2781ab616", "level": "level4", "llm_response": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ocp-version: [v20.0.7, v21.0.0, dev-stable22, dev-stable23, dev-master]\n    name: Nextcloud ${{ matrix.ocp-version }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up php\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: 8.1\n      - name: Install dependencies\n        run: composer install --no-interaction\n      - name: Install dependencies\n        run: npm install --no-audit\n      - name: Run coding standards check\n        run: composer run psalm\n```", "answer": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n      runs-on: ubuntu-latest\n      strategy:\n          matrix:\n              ocp-version: [ 'v20.0.7', 'v21.0.0', 'dev-stable22', 'dev-stable23', 'dev-master' ]\n      name: Nextcloud ${{ matrix.ocp-version }}\n      steps:\n          - name: Checkout\n            uses: actions/checkout@master\n          - name: Set up php\n            uses: shivammathur/setup-php@master\n            with:\n                php-version: 7.4\n                tools: composer:v1\n                coverage: none\n          - name: Install dependencies\n            run: composer i\n          - name: Install dependencies\n            run: composer require --dev christophwurst/nextcloud:${{ matrix.ocp-version }}\n          - name: Run coding standards check\n            run: composer run psalm\n```", "prompt": "Generate a GitHub Workflow named `Static analysis` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Nextcloud ${{ matrix.ocp-version }}` and its job id is `static-psalm-analysis`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `ocp-version` has 5 values: v20.0.7, v21.0.0, dev-stable22, dev-stable23 and dev-master. The job `static-psalm-analysis` has 5 steps. The 1st step is named `Checkout`. The 2nd step is named `Set up php`. The 3rd step is named `Install dependencies`. The 4th step is named `Install dependencies`. The 5th step is named `Run coding standards check`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5656518936920372}, {"id": "63c4951f8052faa2781af9e5", "level": "level4", "llm_response": "```yaml name: IRC Notification\n\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        uses: linuxdeepin/irc-action@v1.1\n        with:\n          token: ${{ secrets.IRC_TOKEN }}\n          channel: #irc\n          username: linuxdeepin\n          message: |\n            The repository ${{ github.repository }} was pushed to the ${{ github.ref }} branch\n            with a single commit: ${{ github.sha }}\n```", "answer": "```yaml name: \"IRC Notification\"\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online'\n        with:\n          channel: \"#cool-dev\"\n          nickname: github-online\n          message: |\n            ${{ toJson(github.event) }}\n```", "prompt": "Generate a GitHub Workflow named `IRC Notification` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `test`. This job will run on ubuntu-latest runner. The job `test` has one step. The 1st step is named `irc push`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.22328275752637758}, {"id": "63c493ee7843b612699fde0c", "level": "level4", "llm_response": "```yaml name: nf-core AWS test\n\non:\n  workflow_dispatch:\n\njobs:\n  run-tower:\n    name: Run AWS tests\n    runs-on: ubuntu-latest\n    if: github.repository == 'nf-core/mag'\n    steps:\n      - name: Launch workflow via tower\n        run: |\n          echo \"Running workflow on AWS\"\n          curl -X POST -H \"Authorization: Bearer ${{ secrets.AWS_ACCESS_KEY_ID }}:${{ secrets.AWS_SECRET_ACCESS_KEY }}\" \\\n          -H \"Accept: application/vnd.github.v3+json\" \\\n          https://api.github.com/repos/${{ github.repository }}/actions/workflows/nf-core-mag.yml/dispatches \\\n          --data '{\"ref\":\"master\"}'\n```", "answer": "```yaml name: nf-core AWS test\n# This workflow can be triggered manually with the GitHub actions workflow dispatch button.\n# It runs the -profile 'test' on AWS batch\n\non:\n  workflow_dispatch:\njobs:\n  run-tower:\n    name: Run AWS tests\n    if: github.repository == 'nf-core/mag'\n    runs-on: ubuntu-latest\n    steps:\n      # Launch workflow using Tower CLI tool action\n      - name: Launch workflow via tower\n        uses: nf-core/tower-action@v3\n        with:\n          workspace_id: ${{ secrets.TOWER_WORKSPACE_ID }}\n          access_token: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          compute_env: ${{ secrets.TOWER_COMPUTE_ENV }}\n          workdir: s3://${{ secrets.AWS_S3_BUCKET }}/work/mag/work-${{ github.sha }}\n          parameters: |\n            {\n              \"outdir\": \"s3://${{ secrets.AWS_S3_BUCKET }}/mag/results-test-${{ github.sha }}\"\n            }\n          profiles: test,aws_tower\n```", "prompt": "Generate a GitHub Workflow named `nf-core AWS test` for a GitHub repository whose primary programming language is Nextflow. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Run AWS tests` and its job id is `run-tower`. This job will run only if the condition(github.repository == 'nf-core/mag') is met. This job will run on ubuntu-latest runner. The job `run-tower` has one step. The 1st step is named `Launch workflow via tower`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.34218252120814047}, {"id": "63c496981899db58864d3f73", "level": "level4", "llm_response": "```yaml name: Triage tasks\n\non: [pull_request]\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: triage-${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            if (process.env.GITHUB_REF && process.env.GITHUB_REF.startsWith('refs/heads/')) {\n              const commit = await github.rest.git.getCommit({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                sha: context.payload.pull_request.head.sha\n              });\n              if (!commit.files) {\n                return;\n              }\n              commit.files.forEach(file => {\n                if (file.filename.includes('.gitignore')) {\n                  return;\n                }\n                const files = await github.rest.git.listFiles({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  path: file.filename\n                });\n                if (files.data.length) {\n                  return;\n                }\n                const message = `Commit message: ${commit.message}\\n\\nFiles that are ignored by `.github\\/CI\\/gitignore\\.gitignore`:\\n${files.data.map(file => file.filename).join('\\n')}\\n\\nPlease use `.github\\/CI\\/gitignore\\.gitignore` to ignore them.\\n\\n`;\n                await github.rest.patchCommit({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  sha: commit.sha,\n                  commit: {\n                    message\n                  }\n                });\n              });\n            }\n      - name: Label pull request\n        uses: ./.github/actions/label-pull-request\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          pr-number: ${{ github.event.number }}\n```", "answer": "```yaml name: Triage tasks\n\non: pull_request_target\n\nconcurrency:\n  group: \"triage-${{ github.event.number }}\"\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n      - name: Label pull request\n        uses: Homebrew/actions/label-pull-requests@master\n        if: always()\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n          def: |\n            - label: new cask\n              status: added\n              path: Casks/.+\n\n            - label: marked for removal/rejection\n              status: removed\n              path: Casks/.+\n\n            - label: documentation\n              path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n            - label: bump-cask-pr\n              pr_body_content: Created with `brew bump-cask-pr`\n\n            - label: missing description\n              path: Casks/.+\n              missing_content: \\n  desc .+\\n\n\n            - label: appcast migration needed\n              path: Casks/.+\n              content: \\n  appcast .+\\n\n```", "prompt": "Generate a GitHub Workflow named `Triage tasks` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the triage-${{ github.event.number }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `triage`. This job will run on ubuntu-latest runner. The job `triage` has 2 steps. The 1st step is named `Check commit format`. The 2nd step is named `Label pull request`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.15319348891163867}, {"id": "63c494a27843b61269a02781", "level": "level4", "llm_response": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '16 8 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n      - uses: actions/stale@v6\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-message: 'This PR is stale because it has been open 60 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          days-before-stale: 60\n          days-before-close: 5\n          exempt-issue-labels: 'bug,enhancement'\n          exempt-pr-labels: 'bug,enhancement'\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '16 8 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v5\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        ascending: true\n        stale-issue-message: 'This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions'\n        stale-pr-message: 'This PR has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by an event: the scheduled time has come: at 08:16 am. The workflow has one job. The job id of the 1st job is `stale`. This job will run on ubuntu-latest runner. The job `stale` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `stale`. The job `stale` has one step. The 1st step is named ``. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.42172183069433883}, {"id": "63c4963d6fc19abdf9c9abf2", "level": "level4", "llm_response": "```yaml name: Submit to Web Store\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pnpm\n          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-pnpm-\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: pnpm\n\n      - name: Build and zip extension artifact\n        run: |\n          npm ci\n          npm run build\n          tar -czvf extension.zip -C dist/\n\n      - name: Browser Platform Publish\n        uses: pnpm/action-setup@v2\n        with:\n          version: 7.2.0\n        env:\n          PnpmSkipPublish: true\n```", "answer": "```yaml name: \"Submit to Web Store\"\r\non:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - name: Cache pnpm modules\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: ~/.pnpm-store\r\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-\r\n      - uses: pnpm/action-setup@v2.2.1\r\n        with:\r\n          version: 7.1.0\r\n          run_install: true\r\n      - name: Build and zip extension artifact\r\n        run: pnpm build -- --zip\r\n      - name: Browser Platform Publish\r\n        uses: PlasmoHQ/bpp@v2\r\n        with:\r\n          keys: ${{ secrets.SUBMIT_KEYS }}\r\n          artifact: build/chrome-mv3-prod.zip\r\n```", "prompt": "Generate a GitHub Workflow named `Submit to Web Store` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 5 steps. The 1st step is named ``. The 2nd step is named `Cache pnpm modules`. The 3rd step is named ``. The 4th step is named `Build and zip extension artifact`. The 5th step is named `Browser Platform Publish`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.49386135310084467}, {"id": "63c494a97843b61269a02a50", "level": "level5", "llm_response": "```yaml name: pytorch1_7_1-cuda11_0\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: 'cu110'\n      remote_runtime_docker: 'bladedisc:latest-runtime-torch1.7.1-cu110'\n      develop_base_image: 'nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04'\n      runtime_base_image: 'nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04'\n      extra_envs: '-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110'\n      exec_command: 'bash ./scripts/ci/test_pytorch_blade.sh'\n      deploy_command: 'TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh'\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "answer": "```yaml name: pytorch1_7_1-cuda11_0\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu110\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.7.1-cu110\n      develop_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_7_1-cuda11_0` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will call a reusable workflow located at `./.github/workflows/resuable_gpu_build.yml`. The job will pass 7 inputs to the called workflow: the input `cuda_version` is `cu110`, the input `remote_runtime_docker` is `bladedisc:latest-runtime-torch1.7.1-cu110`, the input `develop_base_image` is `nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04`, the input `runtime_base_image` is `nvidia/cuda:11.0.3-cudnn8-devel-ubuntu18.04`, the input `extra_envs` is `-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.7.1+cu110`, the input `exec_command` is `bash ./scripts/ci/test_pytorch_blade.sh` and the input `deploy_command` is `TORCH_VERSION=1.7.1+cu110 bash ./scripts/ci/deploy_pytorch_blade.sh`. The job will pass 4 secrets to the called workflow: the secret `ALIYUN_DOCKER_USERNAME` is `${{ secrets.ALIYUN_DOCKER_USERNAME }}`, the secret `ALIYUN_DOCKER_PASSWORD` is `${{ secrets.ALIYUN_DOCKER_PASSWORD }}`, the secret `DOCKER_USERNAME` is `${{ secrets.DOCKER_USERNAME }}` and the secret `DOCKER_PASSWORD` is `${{ secrets.DOCKER_PASSWORD }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5036563559276143}, {"id": "63c496986fc19abdf9c9cf90", "level": "level5", "llm_response": "```yaml name: Issue Check\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        if: startsWith(github.event.issue.body , '**Describe the bug**') == false\n        uses: peter-evans/close-issue@v1\n        with:\n          comment: |\n            Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n\n      - name: Create comment\n        if: startsWith(github.event.issue.body , '**Describe the bug**') == true\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi!\n            <br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n            <br/>Have you looked at the wiki yet? https://docs.ombi.app/\n            <br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n            <br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n            <br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n            <br/> Thanks!\n            <br/> Ombi Bot.\n```", "answer": "```yaml name: 'Issue Check'\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  issueCheck:\n    runs-on: ubuntu-latest\n    steps:\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == false\n        name: Close Issue\n        uses: peter-evans/close-issue@v1\n        with:\n          comment: |\n            Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n\n      - if: startsWith(github.event.issue.body , '**Describe the bug**') == true\n        name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi!\n            <br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n            <br/>Have you looked at the wiki yet? https://docs.ombi.app/\n            <br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n            <br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n            <br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n            <br/> Thanks!\n            <br/> Ombi Bot.\n```", "prompt": "Generate a GitHub Workflow named `Issue Check` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `issueCheck`. This job will run on ubuntu-latest runner. The job `issueCheck` has 2 steps. The 1st step is named `Close Issue`. This step will run only if the condition(startsWith(github.event.issue.body , '**Describe the bug**') == false) is met. This step runs action `peter-evans/close-issue` tagged as v1. The step defines an input parameter for the action: `comment` is set to `Hello, Please use the Github template to report an issue. If this is a feature request, please take a look at the readme. <br/> Thanks, <br/> Ombi Bot\n`. The 2nd step is named `Create comment`. This step will run only if the condition(startsWith(github.event.issue.body , '**Describe the bug**') == true) is met. This step runs action `peter-evans/create-or-update-comment` tagged as v1. The step defines 2 input parameters for the action: `issue-number` is set to `${{ github.event.issue.number }}` and `body` is set to `Hi!\n<br/>Thanks for the issue report. Before a real human comes by, please make sure you used our bug report format.\n<br/>Have you looked at the wiki yet? https://docs.ombi.app/\n<br/>Before posting make sure you also read our [FAQ](https://docs.ombi.app/info/faq/).\n<br/> Make the title describe your issue. Having 'not working' or 'I get this bug' for 100 issues, isn't really helpful.\n<br/> If we need more information or there is some progress we tag the issue or update the tag and keep you updated.\n<br/> Thanks!\n<br/> Ombi Bot.\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9268136680374511}, {"id": "63c494da7843b61269a03d4f", "level": "level5", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ICHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ICHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\nconcurrency:\n  group: ci-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install \ud83c\udf31\n        run: |\n          sudo apt-get install -y pandoc\n      - name: Build \ud83d\udd27\n        run: ./run build itch\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```", "answer": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: write\n\nenv:\n  BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}\n  ITCHIO_USERNAME: ${{ secrets.ITCHIO_USERNAME }}\n  ITCHIO_GAME: ${{ secrets.ITCHIO_GAME }}\n\njobs:\n  build-and-deploy:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install \ud83c\udf31\n        run: |\n          sudo apt-get install -y pandoc\n      - name: Build \ud83d\udd27\n        run: |\n          ./run build itch\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is GDScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 3 environment variables to use: `BUTLER_API_KEY` is set to `${{ secrets.BUTLER_API_KEY }}`, `ITCHIO_USERNAME` is set to `${{ secrets.ITCHIO_USERNAME }}` and `ITCHIO_GAME` is set to `${{ secrets.ITCHIO_GAME }}`. The workflow has one job. The job id of the 1st job is `build-and-deploy`. This job will run on ubuntu-latest runner. Only a single job using the ci-${{ github.ref }} concurrency group will run at a time. The job `build-and-deploy` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Install \ud83c\udf31`. This step runs a script: `sudo apt-get install -y pandoc\n`. The 3rd step is named `Build \ud83d\udd27`. This step runs a script: `./run build itch\n`. The 4th step is named `Deploy \ud83d\ude80`. This step runs action `JamesIves/github-pages-deploy-action` tagged as v4. The step defines an input parameter for the action: `folder` is set to `build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6197740392341746}, {"id": "63c4968933b087f6bde2ca3a", "level": "level5", "llm_response": "```yaml name: Nightly Smoketest\n\non:\n  schedule:\n    - cron: \"0 3 * * 1-5\"\n  workflow_dispatch:\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        NODE_VERSION: [\"1.19.16\", \"1.20.15\", \"1.21.9\", \"1.22.6\", \"1.23.3\"]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/bazel\n          key: bazel\n      - name: Bank Workload\n        env:\n          NODE_VERSION: ${{ matrix.NODE_VERSION }}\n        run: make test/smoketest\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# This workflow tests that we can stand up a CRDB cluster with the operator and execute SQL in the cluster. It uses the\n# steps that are outlined in our public docs to ensure that the flow we're recommending always works.\nname: Nightly Smoketest\n\non:\n  schedule:\n    # runs at 3am UTC Mon-Fri\n    # ref: <min> <hr> <month-day> <month> <weekday>\n    - cron: '0 3 * * 1-5'\n\n  # allows running from the actions tab in GitHub\n  workflow_dispatch: ~\n\njobs:\n  smoketest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # supported Kubenetes versions\n        NODE_VERSION: [1.19.16, 1.20.15, 1.21.9, 1.22.6, 1.23.3]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: Bank Workload\n        env:\n          NODE_VERSION: ${{ matrix.NODE_VERSION }}\n        run: make test/smoketest\n```", "prompt": "Generate a GitHub Workflow named `Nightly Smoketest` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am, monday through friday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `smoketest`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `NODE_VERSION` has 5 values: 1.19.16, 1.20.15, 1.21.9, 1.22.6 and 1.23.3. The job `smoketest` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Mount bazel cache`. This step runs action `actions/cache` tagged as v3. The step defines 2 input parameters for the action: `path` is set to `~/.cache/bazel` and `key` is set to `bazel`. The 3rd step is named `Bank Workload`. The step sets an environment variable to use: `NODE_VERSION` is set to `${{ matrix.NODE_VERSION }}`. This step runs a script: `make test/smoketest`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6912568134577088}, {"id": "63c49698b008460c1df15628", "level": "level5", "llm_response": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, labeled]\n\npermissions:\n  contents: read\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n        with:\n          github-token: ${{ env.GITHUB_TOKEN }}\n          issue-labels: \"label\"\n```", "answer": "```yaml name: add-to-gh-projects\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, labeled]\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}\n\npermissions:\n  contents: read\n\njobs:\n  add_to_gh_projects:\n    name: Adds issues to GH projects\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labeled issues to GH projects\n        uses: gradle/build-tool-issue-automation-actions/add-labeled-issues@v1\n```", "prompt": "Generate a GitHub Workflow named `add-to-gh-projects` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by multiple events: 1) an issue is opened or a label is added to an issue. 2) a pull request is created or a label is added to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.BOT_GRADLE_GH_ORG_BOARD_ACCESS_TOKEN }}`. The workflow has one job. The 1st job is named `Adds issues to GH projects` and its job id is `add_to_gh_projects`. This job will run on ubuntu-latest runner. The job `add_to_gh_projects` has one step. The 1st step is named `Add labeled issues to GH projects`. This step runs action `gradle/build-tool-issue-automation-actions/add-labeled-issues` tagged as v1. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.740947446142591}, {"id": "63c494f67843b61269a0479e", "level": "level5", "llm_response": "```yaml name: Sync-To-Gitlab\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request:\n    types: [closed]\n    branches:\n      - master\n      - master-template\n  workflow_dispatch:\nrun:\n  if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n  runs-on: ubuntu-latest\n  concurrency:\n    group: ${{ github.workflow }}-${{ github.ref_name }}\n    cancel-in-progress: true\n  steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Mirror\n      env:\n        input_git_config_user_name: ${{ secrets.GITLAB_USERNAME }}\n        input_git_config_user_email: ${{ secrets.GITLAB_EMAIL }}\n        input_git_remote_url: ${{ secrets.GITLAB_URL }}\n        input_git_push_options: '--force'\n      run: |\n        git config --global user.name \"${{ env.input_git_config_user_name }}\"\n        git config --global user.email \"${{ env.input_git_config_user_email }}\"\n        git clone \"https://github.com/${{ github.repository }}.git\" \"git\"\n        cd git\n        git remote set-url origin \"${{ env.input_git_remote_url }}\"\n        git push ${{ env.input_git_push_options }} origin ${{ github.ref_name }}:${{ github.ref_name }}\n```", "answer": "```yaml name: Sync-To-Gitlab\nrun-name: Sync-To-Gitlab ${{ github.sha }}\non:\n  push:\n    branches:\n      - master\n      - master-template\n  pull_request_target:\n    types:\n      - closed\n    branches:\n      - master\n      - master-template\n  workflow_dispatch:\n\n\njobs:\n  sync:\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref_name }}\n      cancel-in-progress: true\n    name: \"Sync To Gitlab\"\n    if: github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Mirror\n        env:\n          input_git_config_user_name: ${{ secrets.GITLAB_USERNAME }}\n          input_git_config_user_email: ${{ secrets.GITLAB_EMAIL }}\n          input_git_remote_url: ${{ secrets.GITLAB_URL }}\n          input_git_push_options: --force\n        run: |\n          git config --global user.name \"${{ env.input_git_config_user_name }}\"\n          git config --global user.email \"${{ env.input_git_config_user_email }}\"\n          git clone \"https://github.com/${{ github.repository }}.git\" \"git\"\n          cd git\n          git remote set-url origin \"${{ env.input_git_remote_url }}\"\n          git push ${{ env.input_git_push_options }} origin ${{ github.ref_name }}:${{ github.ref_name }}\n#      - name: Mirror + trigger CI\n#        uses: SvanBoxel/gitlab-mirror-and-ci-action@master\n#        with:\n#          args: \"https://gitlab.com/Zerek-Cheng/Simple-Assets-Platform\"\n#        env:\n#          FORCE_PUSH: \"true\"\n#          GITLAB_HOSTNAME: \"gitlab.com\"\n#          GITLAB_USERNAME: \"Zerek-Cheng\"\n#          GITLAB_PASSWORD: ${{ secrets.GITLAB_PASSWORD }}\n#          GITLAB_PROJECT_ID: \"40146411\"\n#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Sync-To-Gitlab` for a GitHub repository whose primary programming language is Java. The name for workflow runs is set to `Sync-To-Gitlab ${{ github.sha }}`. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named master-template. 2) a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named master or a branch named master-template. 3) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Sync To Gitlab` and its job id is `sync`. This job will run only if the condition(github.event.pull_request.merged == true || github.event_name == 'push' || github.event_name == 'workflow_dispatch') is met. This job will run on ubuntu-latest runner. Only a single job using the ${{ github.workflow }}-${{ github.ref_name }} concurrency group will run at a time. When this job is queued, any currently running job in the same concurrency group will be canceled. The job `sync` has 2 steps. The 1st step is named `Checkout`. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named `Mirror`. The step sets 4 environment variables to use: `input_git_config_user_name` is set to `${{ secrets.GITLAB_USERNAME }}`, `input_git_config_user_email` is set to `${{ secrets.GITLAB_EMAIL }}`, `input_git_remote_url` is set to `${{ secrets.GITLAB_URL }}` and `input_git_push_options` is set to `--force`. This step runs a script: `git config --global user.name \"${{ env.input_git_config_user_name }}\"\ngit config --global user.email \"${{ env.input_git_config_user_email }}\"\ngit clone \"https://github.com/${{ github.repository }}.git\" \"git\"\ncd git\ngit remote set-url origin \"${{ env.input_git_remote_url }}\"\ngit push ${{ env.input_git_push_options }} origin ${{ github.ref_name }}:${{ github.ref_name }}\n`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "\"jobs\" section is missing in workflow", "filepath": "../tmp/test.yml", "line": 1, "column": 1, "kind": "syntax-check", "snippet": "name: Sync-To-Gitlab\n^~~~~", "end_column": 5}, {"message": "unexpected key \"run\" for \"workflow\" section. expected one of \"concurrency\", \"defaults\", \"env\", \"jobs\", \"name\", \"on\", \"permissions\", \"run-name\"", "filepath": "../tmp/test.yml", "line": 13, "column": 1, "kind": "syntax-check", "snippet": "run:\n^~~~", "end_column": 4}]}, "bleu_score": 0.7914010852411907}, {"id": "63c496561899db58864d23de", "level": "level5", "llm_response": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "answer": "```yaml name: Molecule - Sqlite\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.sqlite.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/sqlite/**\n      - roles/sqlite/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  sqlite:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: sqlite\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Sqlite` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.sqlite.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/sqlite/** or roles/sqlite/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `sqlite`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `sqlite`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494078052faa2781a8a1f", "level": "level5", "llm_response": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_target:\n    types:\n      - opened\n      - closed\n      - synchronize\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: .cla/v1/signatures.json\n          path-to-document: https://github.com/christian-schlichtherle/truelicense/blob/develop/CLA.md\n          branch: develop\n          allowlist: bot*\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [ created ]\n  pull_request_target:\n    types: [ opened,closed,synchronize ]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: '.cla/v1/signatures.json'\n          path-to-document: 'https://github.com/christian-schlichtherle/truelicense/blob/develop/CLA.md'\n          branch: 'develop'\n          allowlist: bot*\n\n          #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```", "prompt": "Generate a GitHub Workflow named `CLA Assistant` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) a pull request is created, a pull request is closed or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `CLAssistant`. This job will run on ubuntu-latest runner. The job `CLAssistant` has one step. The 1st step is named `CLA Assistant`. This step will run only if the condition((github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target') is met. The step sets 2 environment variables to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}` and `PERSONAL_ACCESS_TOKEN` is set to `${{ secrets.PERSONAL_ACCESS_TOKEN }}`. This step runs action `cla-assistant/github-action` tagged as v2.1.3-beta. The step defines 4 input parameters for the action: `path-to-signatures` is set to `.cla/v1/signatures.json`, `path-to-document` is set to `https://github.com/christian-schlichtherle/truelicense/blob/develop/CLA.md`, `branch` is set to `develop` and `allowlist` is set to `bot*`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7521715166143741}, {"id": "63c494298052faa2781a98f8", "level": "level5", "llm_response": "```yaml name: Linux build with address sanitizer enabled\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n      - uses: actions/checkout@v3\n      - name: Compiler version\n        run: gcc --version\n      - name: Build\n        run: |\n          gcc --version\n          ./autogen.sh\n          ./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\n          make -j 2\n      - name: Run tests\n        run: ./test-suite/quantlib-test-suite --log_level=message\n      - name: Run examples\n        run: make check-examples\n```", "answer": "```yaml name: Linux build with address sanitizer enabled\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\njobs:\n  sanitize:\n    runs-on: ubuntu-latest\n    container: ghcr.io/lballabio/quantlib-devenv:rolling\n    steps:\n    - uses: actions/checkout@v3\n    - name: Compiler version\n      run: |\n        gcc --version\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --log_level=message\n    - name: Run examples\n      run: |\n        make check-examples\n```", "prompt": "Generate a GitHub Workflow named `Linux build with address sanitizer enabled` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `sanitize`. This job will run on ubuntu-latest runner. The job creates a Docker container that uses `ghcr.io/lballabio/quantlib-devenv:rolling` image. The job `sanitize` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Compiler version`. This step runs a script: `gcc --version\n`. The 3rd step is named `Build`. This step runs a script: `./autogen.sh\n./configure --disable-static CC=\"gcc\" CXX=\"g++\" CXXFLAGS=\"-O2 -g0 -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer -Wall -Wno-unknown-pragmas -Werror\"\nmake -j 2\n`. The 4th step is named `Run tests`. This step runs a script: `./test-suite/quantlib-test-suite --log_level=message\n`. The 5th step is named `Run examples`. This step runs a script: `make check-examples\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.887717242852208}, {"id": "63c493cd7843b612699fd710", "level": "level5", "llm_response": "```yaml name: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "prompt": "Generate a GitHub Workflow named `Clean` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The 1st job is named `Delete Artifacts` and its job id is `delete-artifacts`. This job will run on ubuntu-latest runner. The job sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. The job `delete-artifacts` has one step. The 1st step is named `Delete artifacts`. This step runs a script: `# Customize those three lines with your repository and credentials:\nREPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n# A shortcut to call GitHub API.\nghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n# A temporary file which receives HTTP response headers.\nTMPFILE=/tmp/tmp.$$\n\n# An associative array, key: artifact name, value: number of artifacts of that name.\ndeclare -A ARTCOUNT\n\n# Process all artifacts on this repository, loop on returned \"pages\".\nURL=$REPO/actions/artifacts\nwhile [[ -n \"$URL\" ]]; do\n\n  # Get current page, get response headers in a temporary file.\n  JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n  # Get URL of next page. Will be empty if we are at the last page.\n  URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n  rm -f $TMPFILE\n\n  # Number of artifacts on this page:\n  COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n  # Loop on all artifacts on this page.\n  for ((i=0; $i < $COUNT; i++)); do\n\n    # Get name of artifact and count instances of this name.\n    name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n    ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n    id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n    size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n    printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n    ghapi -X DELETE $REPO/actions/artifacts/$id\n  done\ndone\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494167843b612699fee3f", "level": "level5", "llm_response": "```yaml name: Dead Link Check\non: [push, pull_request]\n\njobs:\n  dead-links-check:\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    if: github.repository == 'apache/incubator-linkis'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gaurav-nelson/github-action-markdown-link-check@v1\n        with:\n          use-quiet-mode: 'no'\n          use-verbose-mode: 'yes'\n          folder-path: '../'\n          config-file: '.github/workflows/dlc.json'\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\nname: Dead Link Check\n\non: [push, pull_request]\n\njobs:\n  dead-links-check:\n    runs-on: ubuntu-latest\n    timeout-minutes: 30\n    if: (github.repository == 'apache/incubator-linkis')\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gaurav-nelson/github-action-markdown-link-check@v1\n        with:\n          use-quiet-mode: 'no'\n          use-verbose-mode: 'yes'\n          folder-path: '../'\n          config-file: '.github/workflows/dlc.json'\n```", "prompt": "Generate a GitHub Workflow named `Dead Link Check` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `dead-links-check`. This job will run only if the condition((github.repository == 'apache/incubator-linkis')) is met. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 30. The job `dead-links-check` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `gaurav-nelson/github-action-markdown-link-check` tagged as v1. The step defines 4 input parameters for the action: `use-quiet-mode` is set to `no`, `use-verbose-mode` is set to `yes`, `folder-path` is set to `../` and `config-file` is set to `.github/workflows/dlc.json`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8617660129625551}, {"id": "63c4964b33b087f6bde2aead", "level": "level5", "llm_response": "```yaml name: Build release\n\non:\n  push:\n    tags:\n      - v**\n\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'adopt'\n          cache: 'gradle'\n      - name: Set up ruby env\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.7.2'\n          bundler-cache: true\n      - name: Decode Service Account Key JSON File\n        id: service_account_json_file\n        run: |\n          touch service_account.json\n          chmod +x gradlew\n          echo \"SERVICE_ACCOUNT_KEY=${{ secrets.GOOGLE_SERVICE_ACCOUNT }}>\" > secrets.properties\n          echo \"SERVICE_ACCOUNT_KEY_PASSWORD=${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_PASSWORD }}\" >> secrets.properties\n          echo \"SERVICE_ACCOUNT_KEY_SERVICE_ACCOUNT_EMAIL=${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}\" >> secrets.properties\n          echo \"SERVICE_ACCOUNT_KEY_SERVICE_ACCOUNT_CLIENT_EMAIL=${{ secrets.GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL }}\" >> secrets.properties\n          echo \"SERVICE_ACCOUNT_KEY_SERVICE_ACCOUNT_TOKEN=${{ secrets.GOOGLE_SERVICE_ACCOUNT_TOKEN }}\" >> secrets.properties\n      - name: Create local properties\n        run: touch local.properties\n      - name: Create maps api key\n        run: echo \"MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}\" > secrets.properties\n      - name: Decode Keystore\n        env:\n          ENCODED_STRING: ${{ secrets.KEYSTORE }}\n        run: mkdir app/keystore\n          echo $ENCODED_STRING | base64 -di > app/keystore/keystore.jks\n      - name: Decode Google Services json\n        env:\n          ENCODED_STRING: ${{ secrets.GOOGLE_SERVICES }}\n        run: echo $ENCODED_STRING | base64 -di > app/google-services.json\n      - name: Build & deploy Android release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          KEystore_PASS: ${{ secrets.KEYSTORE_PASS }}\n          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}\n          MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}\n          ANDROID_JSON_KEY_FILE: ${{ steps.service_account_json_file.outputs.filePath }}\n        run: bundle exec fastlane android deploy\n```", "answer": "```yaml name: Build release\n\non:\n  push:\n    tags:\n      - v**\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n        cache: gradle\n\n    - name: Set up ruby env\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n        bundler-cache: true\n\n    - name: Decode Service Account Key JSON File\n      uses: timheuer/base64-to-file@v1\n      id: service_account_json_file\n      with:\n        fileName: \"serviceAccount.json\"\n        encodedString: ${{ secrets.GOOGLE_JSON }}\n\n    - name: Grant execute permission for gradlew\n      run: chmod +x gradlew\n\n    - name: Create local properties\n      run: touch local.properties\n\n    - name: Create maps api key\n      run: echo \"MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}\" > secrets.properties\n\n    - name: Decode Keystore\n      env:\n        ENCODED_STRING: ${{ secrets.KEYSTORE }}\n      run: |\n        mkdir app/keystore\n        echo $ENCODED_STRING | base64 -di > app/keystore/keystore.jks\n    - name: Decode Google Services json\n      env:\n        ENCODED_STRING: ${{ secrets.GOOGLE_SERVICES }}\n      run: |\n        echo $ENCODED_STRING | base64 -di > app/google-services.json\n        \n\n    - name: Build & deploy Android release\n      run: bundle exec fastlane android deploy\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}\n        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}\n        MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}\n        ANDROID_JSON_KEY_FILE: ${{ steps.service_account_json_file.outputs.filePath }}\n\n#    - name: Build with Gradle\n#      run: ./gradlew app:bundleRelease\n#      env:\n#        KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}\n#        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}\n#        MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}\n#\n#    - name: Archive release bundle\n#      uses: actions/upload-artifact@v3\n#      with:\n#        name: bundle\n#        path: |\n#          app/build/outputs/bundle/release\n```", "prompt": "Generate a GitHub Workflow named `Build release` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v**. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 10 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `set up JDK 11`. This step runs action `actions/setup-java` tagged as v3. The step defines 3 input parameters for the action: `java-version` is set to `11`, `distribution` is set to `adopt` and `cache` is set to `gradle`. The 3rd step is named `Set up ruby env`. This step runs action `ruby/setup-ruby` tagged as v1. The step defines 2 input parameters for the action: `ruby-version` is set to `2.7.2` and `bundler-cache` is set to `True`. The 4th step is named `Decode Service Account Key JSON File` and its id is `service_account_json_file`. This step runs action `timheuer/base64-to-file` tagged as v1. The step defines 2 input parameters for the action: `fileName` is set to `serviceAccount.json` and `encodedString` is set to `${{ secrets.GOOGLE_JSON }}`. The 5th step is named `Grant execute permission for gradlew`. This step runs a script: `chmod +x gradlew`. The 6th step is named `Create local properties`. This step runs a script: `touch local.properties`. The 7th step is named `Create maps api key`. This step runs a script: `echo \"MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}\" > secrets.properties`. The 8th step is named `Decode Keystore`. The step sets an environment variable to use: `ENCODED_STRING` is set to `${{ secrets.KEYSTORE }}`. This step runs a script: `mkdir app/keystore\necho $ENCODED_STRING | base64 -di > app/keystore/keystore.jks\n`. The 9th step is named `Decode Google Services json`. The step sets an environment variable to use: `ENCODED_STRING` is set to `${{ secrets.GOOGLE_SERVICES }}`. This step runs a script: `echo $ENCODED_STRING | base64 -di > app/google-services.json\n`. The 10th step is named `Build & deploy Android release`. The step sets 5 environment variables to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`, `KEYSTORE_PASS` is set to `${{ secrets.KEYSTORE_PASS }}`, `KEYSTORE_ALIAS` is set to `${{ secrets.KEYSTORE_ALIAS }}`, `MAPBOX_DOWNLOADS_TOKEN` is set to `${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}` and `ANDROID_JSON_KEY_FILE` is set to `${{ steps.service_account_json_file.outputs.filePath }}`. This step runs a script: `bundle exec fastlane android deploy`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7171730369516275}, {"id": "63c4956e8052faa2781b1ca5", "level": "level5", "llm_response": "```yaml name: Conventional PR\n\non:\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: semantic-pull-request\n        uses: amannn/action-semantic-pull-request@b7a9a97cb10fa6e1ae02647e718798175f6b1f1d\n        with:\n          types: \"None\"\n          validateSingleCommit: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Conventional PR\n\n# Controls when the action will run. \non:\n  pull_request:\n    branches:\n    - develop\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: semantic-pull-request\n        # Internal Unity mirror available at jesseo/action-semantic-pull-request, but actions from private repos aren't supported, so continue to use the public one below\n        uses: amannn/action-semantic-pull-request@b7a9a97cb10fa6e1ae02647e718798175f6b1f1d\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Provide custom types if you don't want the default ones from https://www.conventionalcommits.org\n          types: # optional\n          # Configure which scopes are allowed.\n          #scopes: # optional\n          # Configure that a scope must always be provided.\n          #requireScope: # optional\n          # Configure additional validation for the subject based on a regex. E.g. '^(?![A-Z]).+$' ensures the subject doesn't start with an uppercase character.\n          #subjectPattern: # optional\n          # If `subjectPattern` is configured, you can use this property to override the default error message that is shown when the pattern doesn't match. The variables `subject` and `title` can be used within the message.\n          #subjectPatternError: # optional\n          # For work-in-progress PRs you can typically use draft pull requests from Github. However, private repositories on the free plan don't have this option and therefore this action allows you to opt-in to using the special '[WIP]' prefix to indicate this state. This will avoid the validation of the PR title and the pull request checks remain pending. Note that a second check will be reported if this is enabled.\n          #wip: # optional\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub will suggest using that commit message instead of the PR title for the merge commit, and it's easy to commit this by mistake. Enable this option to also validate the commit message for one commit PRs.\n          validateSingleCommit: true # optional\n```", "prompt": "Generate a GitHub Workflow named `Conventional PR` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has one step. The 1st step is named `semantic-pull-request`. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `amannn/action-semantic-pull-request` whose commit is b7a9a97cb10fa6e1ae02647e718798175f6b1f1d. The step defines 2 input parameters for the action: `types` is set to `None` and `validateSingleCommit` is set to `True`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5941475809673277}, {"id": "63c4965b33b087f6bde2b689", "level": "level5", "llm_response": "```yaml name: fortran-format-check\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [develop]\n\njobs:\n  fortan-format-check:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Install Conda environment from environment.yml\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          cache-downloads: true\n          cache-env: true\n      - name: Install gfortran\n        uses: modflowpy/install-gfortran-action@v1\n      - name: Print python package versions\n        run: pip list\n      - name: Set and print branch name\n        run: .github/common/git-branch-export.sh\n      - name: Fortran source format check\n        run: .github/common/fortran-format-check.sh\n```", "answer": "```yaml name: fortran-format-check\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n    branches: [ develop ]\n\njobs:\n  fortan-format-check:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash -l {0}\n\n    steps:\n      - uses: actions/checkout@v2.3.4\n\n      - name: Install Conda environment from environment.yml\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n            cache-downloads: true\n            cache-env: true\n\n      - name: Install gfortran\n        uses: modflowpy/install-gfortran-action@v1\n\n      - name: Print python package versions\n        run: |\n          pip list\n\n      - name: Set and print branch name\n        run: |\n          .github/common/git-branch-export.sh\n\n      - name: Fortran source format check\n        run: |\n          .github/common/fortran-format-check.sh\n```", "prompt": "Generate a GitHub Workflow named `fortran-format-check` for a GitHub repository whose primary programming language is Fortran. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named develop. 2) The workflow would run whenever there is a pull_request event targeting: a branch named develop. The workflow has one job. The job id of the 1st job is `fortan-format-check`. This job will run on ubuntu-latest runner. For all run steps in the job, default shell is set to bash -l {0}. The job `fortan-format-check` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v2.3.4. The 2nd step is named `Install Conda environment from environment.yml`. This step runs action `mamba-org/provision-with-micromamba` from the main branch. The step defines 2 input parameters for the action: `cache-downloads` is set to `True` and `cache-env` is set to `True`. The 3rd step is named `Install gfortran`. This step runs action `modflowpy/install-gfortran-action` tagged as v1. The 4th step is named `Print python package versions`. This step runs a script: `pip list\n`. The 5th step is named `Set and print branch name`. This step runs a script: `.github/common/git-branch-export.sh\n`. The 6th step is named `Fortran source format check`. This step runs a script: `.github/common/fortran-format-check.sh\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7759555475046503}, {"id": "63c494c88052faa2781ad4bd", "level": "level5", "llm_response": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n\ndefaults:\n  run:\n    # Use a specific shell, since `bash` doesn't work in CI\n    shell: bash\n\njobs:\n  ci:\n    name: ${{ matrix.ros_distro }}\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ros_distro: [ melodic, noetic ]\n        node_version: [ 14 ]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' && secrets.RWT_BOT_PAT || github.token }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node_version }}\n      - name: Own /github/home\n        run: chown -hR $(whoami):$(whoami) /github/home\n      - name: Install apt dependencies\n        run: |\n          apt-get update\n          apt-get install -y firefox ros-${{ matrix.ros_distro }}-rosbridge-server ros-${{ matrix.ros_distro }}-tf2-web-republisher ros-${{ matrix.ros_distro }}-common-tutorials ros-${{ matrix.ros_distro }}-rospy-tutorials ros-${{ matrix.ros_distro }}-actionlib-tutorials\n      - name: Tests\n        run: bash -c \"source /opt/ros/$ROS_DISTRO/setup.bash && bash test/build.bash\"\n      - uses: stefanzweifel/git-auto-commit-action@v4\n        if: ${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' }}\n        with:\n          commit_message: Update Build\n          file_pattern: build/*.js\n```", "answer": "```yaml name: CI\n\non: [push, pull_request]\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  ci:\n    name: ${{ matrix.ros_distro }}\n    if: ${{ github.actor != 'RWT-bot' }}\n    runs-on: ubuntu-latest\n    container: ros:${{ matrix.ros_distro }}-ros-core\n    strategy:\n      fail-fast: false\n      matrix:\n        ros_distro: [melodic, noetic]\n        node_version: [14]\n    env:\n      ROS_DISTRO: ${{ matrix.ros_distro }}\n    steps:\n      - uses: actions/checkout@v3\n        env:\n          TOKEN: \"${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' && secrets.RWT_BOT_PAT || github.token }}\"\n        with:\n          token: ${{ env.TOKEN }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node_version }}\n      - name: Own /github/home\n        run: |\n          chown -hR $(whoami):$(whoami) /github/home\n      - name: Install apt dependencies\n        run: |\n          apt-get update\n          apt-get install -y firefox ros-$ROS_DISTRO-rosbridge-server ros-$ROS_DISTRO-tf2-web-republisher ros-$ROS_DISTRO-common-tutorials ros-$ROS_DISTRO-rospy-tutorials ros-$ROS_DISTRO-actionlib-tutorials\n      - name: Tests\n        run: |\n          bash -c \"source /opt/ros/$ROS_DISTRO/setup.bash && bash test/build.bash\"\n      - uses: stefanzweifel/git-auto-commit-action@v4\n        if: ${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' }}\n        with:\n          commit_message: Update Build\n          file_pattern: 'build/*.js'\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. For all run steps in the workflow, default shell is set to bash. The workflow has one job. The 1st job is named `${{ matrix.ros_distro }}` and its job id is `ci`. This job will run only if the condition(${{ github.actor != 'RWT-bot' }}) is met. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `ros_distro` has 2 values: melodic and noetic. The variable `node_version` has one value: 14. The job creates a Docker container that uses `ros:${{ matrix.ros_distro }}-ros-core` image. The job sets an environment variable to use: `ROS_DISTRO` is set to `${{ matrix.ros_distro }}`. The job `ci` has 6 steps. The 1st step is named ``. The step sets an environment variable to use: `TOKEN` is set to `${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' && secrets.RWT_BOT_PAT || github.token }}`. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `token` is set to `${{ env.TOKEN }}`. The 2nd step is named ``. This step runs action `actions/setup-node` tagged as v3. The step defines an input parameter for the action: `node-version` is set to `${{ matrix.node_version }}`. The 3rd step is named `Own /github/home`. This step runs a script: `chown -hR $(whoami):$(whoami) /github/home\n`. The 4th step is named `Install apt dependencies`. This step runs a script: `apt-get update\napt-get install -y firefox ros-$ROS_DISTRO-rosbridge-server ros-$ROS_DISTRO-tf2-web-republisher ros-$ROS_DISTRO-common-tutorials ros-$ROS_DISTRO-rospy-tutorials ros-$ROS_DISTRO-actionlib-tutorials\n`. The 5th step is named `Tests`. This step runs a script: `bash -c \"source /opt/ros/$ROS_DISTRO/setup.bash && bash test/build.bash\"\n`. The 6th step is named ``. This step will run only if the condition(${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.ros_distro == 'noetic' }}) is met. This step runs action `stefanzweifel/git-auto-commit-action` tagged as v4. The step defines 2 input parameters for the action: `commit_message` is set to `Update Build` and `file_pattern` is set to `build/*.js`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.644344391148744}, {"id": "63c494287843b612699ff643", "level": "level5", "llm_response": "```yaml name: README to PDF\n\non:\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: Baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          input_dir: '.'\n          output_dir: '.'\n          build_html: false\n          table_of_contents: false\n      - uses: actions/upload-artifact@v3\n        with:\n          name: python-engineer-roadmap\n          path: README.pdf\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.pdf\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Generate PDF file\"\n          fi\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n```", "answer": "```yaml name: README to PDF\n# This workflow is triggered on pushes to the repository.\non:\n#   push:\n#     branches:\n#       - main\n#     paths:\n#       - 'README.md'\n    \n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  converttopdf:\n    name: Build PDF\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: baileyjm02/markdown-to-pdf@v1.1.0\n        with:\n          input_dir: .\n          output_dir: .\n          build_html: false\n          table_of_contents: false\n      - uses: actions/upload-artifact@v3\n        with:\n          name: python-engineer-roadmap\n          path: README.pdf\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add README.pdf\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Generate PDF file\"\n          fi\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n#       - name: Commit changes\n#         uses: EndBug/add-and-commit@v9\n#         with:\n#           default_author: github_actions\n#           add: 'README.pdf'\n#           new_branch: generate-pdf\n#           push: origin generate-pdf --set-upstream --force\n```", "prompt": "Generate a GitHub Workflow named `README to PDF` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Build PDF` and its job id is `converttopdf`. This job will run on ubuntu-latest runner. The job `converttopdf` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `baileyjm02/markdown-to-pdf` tagged as v1.1.0. The step defines 4 input parameters for the action: `input_dir` is set to `.`, `output_dir` is set to `.`, `build_html` is set to `False` and `table_of_contents` is set to `False`. The 3rd step is named ``. This step runs action `actions/upload-artifact` tagged as v3. The step defines 2 input parameters for the action: `name` is set to `python-engineer-roadmap` and `path` is set to `README.pdf`. The 4th step is named `Commit files`. This step runs a script: `git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\ngit config --local user.name \"github-actions[bot]\"\ngit add README.pdf\nif ! git diff-index --quiet HEAD; then\n  git commit -m \"Generate PDF file\"\nfi\n`. The 5th step is named `Push changes`. This step runs action `ad-m/github-push-action` from the master branch. The step defines 2 input parameters for the action: `github_token` is set to `${{ secrets.GITHUB_TOKEN }}` and `branch` is set to `${{ github.ref }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9486838981800674}, {"id": "63c494578052faa2781aa8bb", "level": "level5", "llm_response": "```yaml name: Build\n\non:\n  push:\n\nenv:\n  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n  MAIN_GO_VER: 1.16\n  MAIN_HOST_OS: ubuntu-latest\n\njobs:\n  go_test_and_coverage:\n    strategy:\n      fail-fast: true\n      matrix:\n        GO_VER: [1.16]\n        HOST_OS: [ubuntu-latest]\n        include:\n          - GO_VER: 1.16\n            HOST_OS: ubuntu-latest\n\n    runs-on: ${{ matrix.HOST_OS }}\n\n    steps:\n      - name: Checkout Repositary\n        uses: actions/checkout@v3\n\n      - name: Setup Go\n        id: go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.GO_VER }}\n\n      - name: Get Dependencies\n        run: |\n          echo GO_VER = ${{ matrix.GO_VER }}\n          go get golang.org/x/tools/cmd/cover\n          go install github.com/mattn/goveralls || go get github.com/mattn/goveralls\n          go get .\n          echo repo status ======== && git status\n          echo GITHUB_REF = ${{ env.GITHUB_REF }}\n          echo GITHUB_REF_NAME = ${{ env.GITHUB_REF_NAME }}\n          echo GO_VER = ${{ matrix.GO_VER }}\n          echo HOST_OS = ${{ matrix.HOST_OS }}\n          which goveralls\n          echo envs ======== && printenv\n\n      - name: Show Environments\n        run: echo repo status ======== && git status\n        shell: bash\n\n      - name: Test and Generate Coverage Report\n        run: |\n          go test -v -failfast -cover -covermode=atomic -coverprofile=coverage.out\n          goveralls -coverprofile=coverage.out -covermode=atomic -failonerror -json > ./coverage/codecov_report.txt\n          mv ./coverage/codecov_report.txt ./coverage/codecov_report.json\n          echo envs ======== && printenv\n\n      - name: Upload Coverage to Codecov\n        uses: codecov/codecov-action@v2\n        with:\n          files: ./coverage/codecov_report.json\n          fail_ci_if_error: true\n          flags: unittests\n          name: codecov-umbrella\n          path_to_write_report: ./coverage/codecov_report.txt\n          verbose: true\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branchs:\n    - 'master'\n    - 'feature/**'\n    - 'dev/**'\n\nenv:\n  CODECOV_TOKEN: '2fc0d617-8e9a-47d7-ab58-52fa92b23741'\n  MAIN_GO_VER: '1.16'\n  MAIN_HOST_OS: 'ubuntu-latest'\n\njobs:\n  go_test_and_coverage:\n    strategy:\n      max-parallel: 6\n      matrix:\n        GO_VER: ['1.16']\n        HOST_OS: ['ubuntu-latest']\n\n    runs-on: ${{ matrix.HOST_OS }}\n\n    steps:\n\n    - name: Checkout Repositary\n      uses: actions/checkout@v3\n\n    - name: Setup Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.GO_VER }}\n      id: go\n\n    - name: Get Dependencies\n      run: |\n        echo GO_VER = ${{ matrix.GO_VER }}\n        go get golang.org/x/tools/cmd/cover\n        go install github.com/mattn/goveralls || go get github.com/mattn/goveralls\n        go get .\n\n    - name: Show Environments\n      run: |\n        echo repo status ======== && git status\n        echo GITHUB_REF = ${{ env.GITHUB_REF }}\n        echo GITHUB_REF_NAME = ${{ env.GITHUB_REF_NAME }}\n        echo GO_VER = ${{ matrix.GO_VER }}\n        echo HOST_OS = ${{ matrix.HOST_OS }}\n        which goveralls\n        echo envs ======== && printenv\n\n    - name: Test and Generate Coverage Report\n      run: |\n        go test -v -failfast -cover -covermode=atomic -coverprofile=coverage.out\n\n    # - name: Upload Coverage to Goveralls\n    #   run: |\n    #     goveralls -coverprofile=coverage.out -repotoken ${{ env.COVERALLS_TOKEN }}\n\n    # - name: Upload Coverage to Codecov\n    #   if: ${{ matrix.GO_VER }} == ${{ env.MAIN_GO_VER }}\n    #   run: |\n    #     bash <(curl -s https://codecov.io/bash) -t ${{ env.CODECOV_TOKEN }}\n\n    # - name: Convert Coverage file to lcov format\n    #   uses: jandelgado/gcov2lcov-action@v1.0.8\n    #   with:\n    #     infile: ./coverage.out\n    #     outfile: ./coverage.lcov\n\n    - name: Upload Coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        files: ./coverage.out\n        fail_ci_if_error: true\n        flags: unittests\n        name: codecov-umbrella\n        path_to_write_report: ./coverage/codecov_report.txt\n        verbose: true\n\n    # - name: Coveralls GitHub Action\n    #   uses: coverallsapp/github-action@1.1.3\n    #   with:\n    #     path-to-lcov: ./coverage.lcov\n    #     github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Build` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow sets 3 environment variables to use: `CODECOV_TOKEN` is set to `2fc0d617-8e9a-47d7-ab58-52fa92b23741`, `MAIN_GO_VER` is set to `1.16` and `MAIN_HOST_OS` is set to `ubuntu-latest`. The workflow has one job. The job id of the 1st job is `go_test_and_coverage`. This job will run on ${{ matrix.HOST_OS }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `GO_VER` has one value: 1.16. The variable `HOST_OS` has one value: ubuntu-latest. The maximum number of job runs in parallel is set to 6. The job `go_test_and_coverage` has 6 steps. The 1st step is named `Checkout Repositary`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Setup Go` and its id is `go`. This step runs action `actions/setup-go` tagged as v3. The step defines an input parameter for the action: `go-version` is set to `${{ matrix.GO_VER }}`. The 3rd step is named `Get Dependencies`. This step runs a script: `echo GO_VER = ${{ matrix.GO_VER }}\ngo get golang.org/x/tools/cmd/cover\ngo install github.com/mattn/goveralls || go get github.com/mattn/goveralls\ngo get .\n`. The 4th step is named `Show Environments`. This step runs a script: `echo repo status ======== && git status\necho GITHUB_REF = ${{ env.GITHUB_REF }}\necho GITHUB_REF_NAME = ${{ env.GITHUB_REF_NAME }}\necho GO_VER = ${{ matrix.GO_VER }}\necho HOST_OS = ${{ matrix.HOST_OS }}\nwhich goveralls\necho envs ======== && printenv\n`. The 5th step is named `Test and Generate Coverage Report`. This step runs a script: `go test -v -failfast -cover -covermode=atomic -coverprofile=coverage.out\n`. The 6th step is named `Upload Coverage to Codecov`. This step runs action `codecov/codecov-action` tagged as v2. The step defines 6 input parameters for the action: `files` is set to `./coverage.out`, `fail_ci_if_error` is set to `True`, `flags` is set to `unittests`, `name` is set to `codecov-umbrella`, `path_to_write_report` is set to `./coverage/codecov_report.txt` and `verbose` is set to `True`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"codecov/codecov-action@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 60, "column": 15, "kind": "action", "snippet": "        uses: codecov/codecov-action@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 39}]}, "bleu_score": 0.6785917738659694}, {"id": "63c495297843b61269a05d37", "level": "level5", "llm_response": "```yaml name: pr\n\non: pull_request\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n    with:\n      npmTag: 'alpha'\n      buildScript: 'build'\n      nodeVersion: '18'\n      packageManager: 'pnpm'\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      npmToken: ${{ secrets.NPM_TOKEN }}\n\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n    with:\n      domain: 'https://www.the-guild.dev/graphql/shield/'\n      source: 'Shield'\n      packageManager: 'pnpm'\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: pr\non:\n  pull_request:\n\njobs:\n  release:\n    uses: the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main\n    with:\n      npmTag: alpha\n      buildScript: build\n      nodeVersion: 18\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      npmToken: ${{ secrets.NPM_TOKEN }}\n\n\n  algolia:\n    uses: the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main\n    with:\n      domain: https://www.the-guild.dev/graphql/shield/\n      source: 'Shield'\n      packageManager: pnpm\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `pr` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has 2 jobs. The job id of the 1st job is `release`. This job will call a reusable workflow located at `the-guild-org/shared-config/.github/workflows/release-snapshot.yml@main`. The job will pass 4 inputs to the called workflow: the input `npmTag` is `alpha`, the input `buildScript` is `build`, the input `nodeVersion` is `18` and the input `packageManager` is `pnpm`. The job will pass 2 secrets to the called workflow: the secret `githubToken` is `${{ secrets.GITHUB_TOKEN }}` and the secret `npmToken` is `${{ secrets.NPM_TOKEN }}`. The job id of the 2nd job is `algolia`. This job will call a reusable workflow located at `the-guild-org/shared-config/.github/workflows/algolia-integrity.yml@main`. The job will pass 3 inputs to the called workflow: the input `domain` is `https://www.the-guild.dev/graphql/shield/`, the input `source` is `Shield` and the input `packageManager` is `pnpm`. The job will pass a secret to the called workflow: the secret `githubToken` is `${{ secrets.GITHUB_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5912550629886305}, {"id": "63c4959c7843b61269a08c2d", "level": "level5", "llm_response": "```yaml on:\n  push:\n    paths:\n      - .github/workflows/install.yml\n  schedule:\n    - cron: 17 0 * * 1\n\npermissions:\n  contents: read\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: cargo install cargo-mutants\n```", "answer": "```yaml permissions:\n  contents: read\n\non:\n  push:\n    paths:\n      - \".github/workflows/install.yml\"\n  schedule:\n    - cron: \"17 0 * * 1\"\n\njobs:\n  cargo-install:\n    runs-on: ubuntu-latest\n    steps:\n      - name: cargo-install\n        run: |\n          cargo install cargo-mutants\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/install.yml), the workflow runs. 2) the scheduled time has come: at 12:17 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `cargo-install`. This job will run on ubuntu-latest runner. The job `cargo-install` has one step. The 1st step is named `cargo-install`. This step runs a script: `cargo install cargo-mutants\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5254899871245471}, {"id": "63c4968e1899db58864d3b1c", "level": "level5", "llm_response": "```yaml name: HTML5 check\n\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: HTML5 check\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `HTML5 check` for a GitHub repository whose primary programming language is R. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main or a branch named master. The workflow has one job. The job id of the 1st job is `HTML5-check`. This job will call a reusable workflow located at `easystats/workflows/.github/workflows/html-5-check.yaml@main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7598356856515925}, {"id": "63c496861e3364807577b31b", "level": "level5", "llm_response": "```yaml name: license-check\n\non: [pull_request]\n\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Check License Header\n      uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff # 0.0.1\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        config: .github/lyric-config.yml\n        ignore-issues: true\n        ignore-labels: 'no license'\n```", "answer": "```yaml name: license-check\non: pull_request\njobs:\n  license:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Check License Header\n      uses: apache/skywalking-eyes/header@501a28d2fb4a9b962661987e50cf0219631b32ff\n```", "prompt": "Generate a GitHub Workflow named `license-check` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `license`. This job will run on ubuntu-latest runner. The job `license` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` from the master branch. The 2nd step is named `Check License Header`. This step runs action `apache/skywalking-eyes/header` whose commit is 501a28d2fb4a9b962661987e50cf0219631b32ff. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.4711277936270114}, {"id": "63c495707843b61269a07a00", "level": "level5", "llm_response": "```yaml # This action scans the code for security vulnerabilities and uploads the vulnerabilities as SARIF format\n# https://github.com/ossf/scorecard-action\n\nname: Scorecards supply-chain security\n\non:\n  # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#branch-protection-rule-event\n  branch_protection_rule:\n  # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#schedule-event\n  schedule:\n    - cron: '43 17 * * 1'\n  push:\n    branches: [master]\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Allow scorecard analysis to upload artifacts to GitHub\n      security-events: write\n      id-token: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846\n        with:\n          persist-credentials: false\n\n      - name: Run analysis\n        uses: ossf/scorecard-action@3e15ea8318eee9b333819ec77a36aca8d39df13e\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          publish_results: true\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5\n        with:\n          sarif_file: results.sarif\n```", "answer": "```yaml name: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: '43 20 * * 1'\n  push:\n    branches: [ master ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      # Used to receive a badge. (Upcoming feature)\n      id-token: write\n      actions: read\n      contents: read\n    \n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@3e15ea8318eee9b333819ec77a36aca8d39df13e # v1.1.1\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # (Optional) Read-only PAT token. Uncomment the `repo_token` line below if:\n          # - you want to enable the Branch-Protection check on a *public* repository, or\n          # - you are installing Scorecards on a *private* repository\n          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action#authentication-with-pat.\n          # repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n\n          # Publish the results for public repositories to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results. \n          # For private repositories, `publish_results` will automatically be set to `false`, regardless \n          # of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n      \n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) activity related to a branch protection rule occurs. 2) the scheduled time has come: at 08:43 pm, only on monday. 3) The workflow would run whenever there is a push event to: a branch named master. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. This job will run on ubuntu-latest runner. The job `analysis` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `security-events` scope, write access is granted to the GITHUB_TOKEN in the `id-token` scope, read access is granted to the GITHUB_TOKEN in the `actions` scope and read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` whose commit is a12a3943b4bdde767164f792f33f40b04645d846. The step defines an input parameter for the action: `persist-credentials` is set to `False`. The 2nd step is named `Run analysis`. This step runs action `ossf/scorecard-action` whose commit is 3e15ea8318eee9b333819ec77a36aca8d39df13e. The step defines 3 input parameters for the action: `results_file` is set to `results.sarif`, `results_format` is set to `sarif` and `publish_results` is set to `True`. The 3rd step is named `Upload artifact`. This step runs action `actions/upload-artifact` whose commit is 3cea5372237819ed00197afe530f5a7ea3e805c8. The step defines 3 input parameters for the action: `name` is set to `SARIF file`, `path` is set to `results.sarif` and `retention-days` is set to `5`. The 4th step is named `Upload to code-scanning`. This step runs action `github/codeql-action/upload-sarif` whose commit is 5f532563584d71fdef14ee64d17bafb34f751ce5. The step defines an input parameter for the action: `sarif_file` is set to `results.sarif`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6005035099859278}, {"id": "63c495c68052faa2781b4231", "level": "level5", "llm_response": "```yaml name: Commented Pull Request\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    name: Pull Request Validator\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Pull Request Validation\n        if: startsWith(github.event.comment.body, '/verify')\n        uses: Ash258/Scoop-GithubActions@stable-win\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SKIP_UPDATED: 1\n```", "answer": "```yaml name: Commented Pull Request\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    name: Pull Request Validator\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Pull Request Validation\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: startsWith(github.event.comment.body, '/verify')\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SKIP_UPDATED: '1'\n```", "prompt": "Generate a GitHub Workflow named `Commented Pull Request` for a GitHub repository whose primary programming language is PowerShell. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The 1st job is named `Pull Request Validator` and its job id is `pullRequestHandler`. This job will run on windows-latest runner. The job `pullRequestHandler` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Pull Request Validation`. This step will run only if the condition(startsWith(github.event.comment.body, '/verify')) is met. The step sets 2 environment variables to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}` and `SKIP_UPDATED` is set to `1`. This step runs action `Ash258/Scoop-GithubActions` from the stable-win branch. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.844548963424556}, {"id": "63c4969e1899db58864d41ef", "level": "level5", "llm_response": "```yaml name: Auto message on pr merge\n\non:\n  pull_request_target:\n    types: [closed]\n\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: derekprior/add-autoresponse@master\n        with:\n          respondableId: ${{ github.event.pull_request.node_id }}\n          response: |\n            Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).\n          author: ${{ github.event.pull_request.user.login }}\n          exemptedAuthors: Amit366\n          env:\n            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Auto message on pr merge\n\non:\n\n  pull_request_target:\n\n    types: [closed]\n\njobs:\n\n  auto-response:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - uses: derekprior/add-autoresponse@master\n\n      env:\n\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      with:\n\n        respondableId: ${{ github.event.pull_request.node_id }}\n\n        response: \"Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).\"\n\n        author: ${{ github.event.pull_request.user.login }}\n\n        exemptedAuthors: \"Amit366\"\n```", "prompt": "Generate a GitHub Workflow named `Auto message on pr merge` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a pull request is closed. The workflow has one job. The job id of the 1st job is `auto-response`. This job will run on ubuntu-latest runner. The job `auto-response` has one step. The 1st step is named ``. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `derekprior/add-autoresponse` from the master branch. The step defines 4 input parameters for the action: `respondableId` is set to `${{ github.event.pull_request.node_id }}`, `response` is set to `Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).`, `author` is set to `${{ github.event.pull_request.user.login }}` and `exemptedAuthors` is set to `Amit366`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "expected scalar node for string value but found mapping node with \"!!map\" tag", "filepath": "../tmp/test.yml", "line": 19, "column": 13, "kind": "syntax-check", "snippet": "            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n            ^~~~~~~~~~~~~", "end_column": 25}]}, "bleu_score": 0.8297021059060099}, {"id": "63c4966b33b087f6bde2bde4", "level": "level5", "llm_response": "```yaml name: tests\n\non:\n  push:\n    branches: [master, develop]\n  pull_request:\n    branches: [master, develop]\n\njobs:\n  tests:\n    name: ${{ matrix.name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        name: ${{ matrix.name }}\n        python: [3.11-dev, 3.10, 3.9, 3.8, 3.7, pypy-3.9, pypy39]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        tox: [py311, py310, py39, pypy39]\n\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python }}\n    - name: install system dependencies\n      run: |\n        sudo apt-get install libxml2-dev libxslt1-dev --yes\n    - name: update pip\n      run: pip install -U wheel\n      run: pip install -U setuptools\n      run: python -m pip install -U pip\n    - uses: tox-dev/setup-tox-action@v2\n      with:\n        tox-version: ${{ matrix.tox }}\n        tox-args: -s ${{ matrix.tox }}\n    - run: tox -e ${{ matrix.tox }}\n```", "answer": "```yaml name: tests\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n    branches:\n      - master\n      - develop\n\njobs:\n  tests:\n    name: ${{ matrix.name }}\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - {name: '3.11-dev', python: '3.11-dev', os: ubuntu-latest, tox: py311}\n          - {name: Linux, python: '3.10', os: ubuntu-latest, tox: py310}\n          - {name: Windows, python: '3.10', os: windows-latest, tox: py310}\n          - {name: Mac, python: '3.10', os: macos-latest, tox: py310}\n          - {name: '3.9', python: '3.9', os: ubuntu-latest, tox: py39}\n          - {name: 'PyPy', python: 'pypy-3.9', os: ubuntu-latest, tox: pypy39}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python }}\n      - name: install system dependencies\n        run: sudo apt-get install libxml2-dev libxslt1-dev --yes\n        if: ${{ matrix.python == '3.11-dev' }}\n      - name: update pip\n        run: |\n          pip install -U wheel\n          pip install -U setuptools\n          python -m pip install -U pip\n      - run: pip install tox\n      - run: tox -e ${{ matrix.tox }}\n```", "prompt": "Generate a GitHub Workflow named `tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master or a branch named develop. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master or a branch named develop. The workflow has one job. The 1st job is named `${{ matrix.name }}` and its job id is `tests`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. For each object in the [{'name': '3.11-dev', 'python': '3.11-dev', 'os': 'ubuntu-latest', 'tox': 'py311'}, {'name': 'Linux', 'python': '3.10', 'os': 'ubuntu-latest', 'tox': 'py310'}, {'name': 'Windows', 'python': '3.10', 'os': 'windows-latest', 'tox': 'py310'}, {'name': 'Mac', 'python': '3.10', 'os': 'macos-latest', 'tox': 'py310'}, {'name': '3.9', 'python': '3.9', 'os': 'ubuntu-latest', 'tox': 'py39'}, {'name': 'PyPy', 'python': 'pypy-3.9', 'os': 'ubuntu-latest', 'tox': 'pypy39'}] list, the key:value pairs in the object will be added to each of the matrix combinations if none of the key:value pairs overwrite any of the original matrix values. If the object cannot be added to any of the matrix combinations, a new matrix combination will be created instead. The job `tests` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `actions/setup-python` tagged as v3. The step defines an input parameter for the action: `python-version` is set to `${{ matrix.python }}`. The 3rd step is named `install system dependencies`. This step will run only if the condition(${{ matrix.python == '3.11-dev' }}) is met. This step runs a script: `sudo apt-get install libxml2-dev libxslt1-dev --yes`. The 4th step is named `update pip`. This step runs a script: `pip install -U wheel\npip install -U setuptools\npython -m pip install -U pip\n`. The 5th step is named ``. This step runs a script: `pip install tox`. The 6th step is named ``. This step runs a script: `tox -e ${{ matrix.tox }}`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "context \"matrix\" is not allowed here. available contexts are \"github\", \"inputs\", \"needs\", \"vars\". see https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability for more details", "filepath": "../tmp/test.yml", "line": 16, "column": 19, "kind": "expression", "snippet": "        name: ${{ matrix.name }}\n                  ^~~~~~~~~~~", "end_column": 29}, {"message": "property \"name\" is not defined in object type {}", "filepath": "../tmp/test.yml", "line": 16, "column": 19, "kind": "expression", "snippet": "        name: ${{ matrix.name }}\n                  ^~~~~~~~~~~", "end_column": 29}, {"message": "key \"run\" is duplicated in element of \"steps\" section. previously defined at line:30,col:7", "filepath": "../tmp/test.yml", "line": 31, "column": 7, "kind": "syntax-check", "snippet": "      run: pip install -U setuptools\n      ^~~~", "end_column": 10}, {"message": "key \"run\" is duplicated in element of \"steps\" section. previously defined at line:30,col:7", "filepath": "../tmp/test.yml", "line": 32, "column": 7, "kind": "syntax-check", "snippet": "      run: python -m pip install -U pip\n      ^~~~", "end_column": 10}]}, "bleu_score": 0.3731010300646214}, {"id": "63c495e48052faa2781b4f0b", "level": "level5", "llm_response": "```yaml name: Generate a changelog\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'generate from this release/commit (defaults to the latest release)'\n        required: false\n        default: ${{ github.event.repository.default_branch }}\n      to:\n        description: 'generate until this release/commit (defaults to latest development)'\n        required: false\n        default: HEAD\n\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'Mudlet' \n    steps:\n      - name: Checkout Mudlet repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install Lua 5.1.5\n        uses: leafo/gh-actions-lua@v9\n        with:\n          luaVersion: 5.1.5\n\n      - name: Install Luarocks\n        uses: leafo/gh-actions-luarocks@v4\n\n      - name: Install Lua dependencies\n        run: |\n          luarocks install argparse\n          luarocks install lunajson\n\n      - name: Calculate from and to releases\n        run: |\n          if [[ -z \"${{ github.event.inputs.from }}\" ]] ; then\n              FROM_RELEASE=$(git tag --sort=committerdate | tail -1)\n          else\n              FROM_RELEASE=${{ github.event.inputs.from }}\n          fi\n\n          if [[ -z \"${{ github.event.inputs.to }}\" ]] ; then\n              TO_RELEASE=\"HEAD\"\n          else\n              TO_RELEASE=${{ github.event.inputs.to }}\n          fi\n\n          echo \"Generating a changelog from $FROM_RELEASE until $TO_RELEASE\"\n\n          echo \"FROM_RELEASE=$FROM_RELEASE\" >> $GITHUB_ENV\n          echo \"TO_RELEASE=$TO_RELEASE\" >> $GITHUB_ENV\n\n      - name: Generate changelog\n        run: |\n          changelog=$(lua CI/generate-changelog.lua -m release --start-commit $FROM_RELEASE --end-commit $TO_RELEASE)\n          echo \"$changelog\" >> changelog.html\n\n          echo \"[INFO] Changelog generated (from $FROM_RELEASE to $TO_RELEASE). If it's too big, Github won't show it, so it's available as an artifact as well at: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#artifacts\"\n          echo \"[INFO] Changelog is:\"\n          echo $changelog\n\n      - name: Upload changelog as html\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog.html\n          path: changelog.html\n```", "answer": "```yaml name: Generate a changelog\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n  workflow_dispatch:\n    inputs:\n      from:\n        description: 'Generate from this release/commit (defaults to the latest release)'\n        required: false\n        # default is calculated dynamically\n      to:\n        description: 'Generate until this release/commit (defaults to latest development)'\n        required: false\n        default: 'HEAD'\n\njobs:\n  generate-changelog:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository_owner == 'Mudlet' }}\n\n    steps:\n    - name: Checkout Mudlet repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Install Lua 5.1.5\n      uses: leafo/gh-actions-lua@v9\n      with:\n        luaVersion: \"5.1.5\"\n\n    - name: Install Luarocks\n      uses: leafo/gh-actions-luarocks@v4\n\n    - name: Install Lua dependencies\n      run: |\n        luarocks install argparse\n        luarocks install lunajson\n\n    - name: Calculate from and to releases\n      run: |\n        if [[ -z \"${{ github.event.inputs.from }}\" ]] ; then\n            FROM_RELEASE=$(git tag --sort=committerdate | tail -1)\n        else\n            FROM_RELEASE=${{ github.event.inputs.from }}\n        fi\n\n        if [[ -z \"${{ github.event.inputs.to }}\" ]] ; then\n            TO_RELEASE=\"HEAD\"\n        else\n            TO_RELEASE=${{ github.event.inputs.to }}\n        fi\n\n        echo \"Generating a changelog from $FROM_RELEASE until $TO_RELEASE\"\n\n        echo \"FROM_RELEASE=$FROM_RELEASE\" >> $GITHUB_ENV\n        echo \"TO_RELEASE=$TO_RELEASE\" >> $GITHUB_ENV\n\n    - name: Generate changelog\n      run: |\n        changelog=$(lua CI/generate-changelog.lua -m release --start-commit $FROM_RELEASE --end-commit $TO_RELEASE)\n        echo \"$changelog\" >> changelog.html\n\n        echo \"[INFO] Changelog generated (from $FROM_RELEASE to $TO_RELEASE). If it's too big, Github won't show it, so it's available as an artifact as well at: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#artifacts\"\n        echo \"[INFO] Changelog is:\"\n        echo $changelog\n\n    - name: Upload changelog as html\n      uses: actions/upload-artifact@v3\n      with:\n        name: changelog.html\n        path: changelog.html\n```", "prompt": "Generate a GitHub Workflow named `Generate a changelog` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 03:00 am. 2) someone manually triggers the workflow. This workflow receives 2 inputs: from-this input represents generate from this release/commit (defaults to the latest release) and it is optional; to-this input represents generate until this release/commit (defaults to latest development), it is optional and its default value is HEAD. The workflow has one job. The job id of the 1st job is `generate-changelog`. This job will run only if the condition(${{ github.repository_owner == 'Mudlet' }}) is met. This job will run on ubuntu-latest runner. The job `generate-changelog` has 7 steps. The 1st step is named `Checkout Mudlet repository`. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named `Install Lua 5.1.5`. This step runs action `leafo/gh-actions-lua` tagged as v9. The step defines an input parameter for the action: `luaVersion` is set to `5.1.5`. The 3rd step is named `Install Luarocks`. This step runs action `leafo/gh-actions-luarocks` tagged as v4. The 4th step is named `Install Lua dependencies`. This step runs a script: `luarocks install argparse\nluarocks install lunajson\n`. The 5th step is named `Calculate from and to releases`. This step runs a script: `if [[ -z \"${{ github.event.inputs.from }}\" ]] ; then\n    FROM_RELEASE=$(git tag --sort=committerdate | tail -1)\nelse\n    FROM_RELEASE=${{ github.event.inputs.from }}\nfi\n\nif [[ -z \"${{ github.event.inputs.to }}\" ]] ; then\n    TO_RELEASE=\"HEAD\"\nelse\n    TO_RELEASE=${{ github.event.inputs.to }}\nfi\n\necho \"Generating a changelog from $FROM_RELEASE until $TO_RELEASE\"\n\necho \"FROM_RELEASE=$FROM_RELEASE\" >> $GITHUB_ENV\necho \"TO_RELEASE=$TO_RELEASE\" >> $GITHUB_ENV\n`. The 6th step is named `Generate changelog`. This step runs a script: `changelog=$(lua CI/generate-changelog.lua -m release --start-commit $FROM_RELEASE --end-commit $TO_RELEASE)\necho \"$changelog\" >> changelog.html\n\necho \"[INFO] Changelog generated (from $FROM_RELEASE to $TO_RELEASE). If it's too big, Github won't show it, so it's available as an artifact as well at: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}#artifacts\"\necho \"[INFO] Changelog is:\"\necho $changelog\n`. The 7th step is named `Upload changelog as html`. This step runs action `actions/upload-artifact` tagged as v3. The step defines 2 input parameters for the action: `name` is set to `changelog.html` and `path` is set to `changelog.html`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9390625754483016}, {"id": "63c4967e33b087f6bde2c5c4", "level": "level5", "llm_response": "```yaml name: Build and Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm install\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages\n          folder: dist\n```", "answer": "```yaml name: Build and Deploy\non:\n  push:\n    branches:\n    - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n        \n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install\n          npm run build\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.0.0\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist #  The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Build and Deploy` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `build-and-deploy`. This job will run on ubuntu-latest runner. The job `build-and-deploy` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. This step runs action `actions/checkout` tagged as v2.3.1. The 2nd step is named `Install and Build \ud83d\udd27`. This step runs a script: `npm install\nnpm run build\n`. The 3rd step is named `Deploy \ud83d\ude80`. This step runs action `JamesIves/github-pages-deploy-action` tagged as 4.0.0. The step defines 2 input parameters for the action: `branch` is set to `gh-pages` and `folder` is set to `dist`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.2994509058254685}, {"id": "63c496926fc19abdf9c9cd93", "level": "level5", "llm_response": "```yaml name: \"Contributor License Agreement (CLA)\"\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n  issue_comment:\n    types:\n      - created\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          cla-token: ${{ secrets.CLA_TOKEN }}\n```", "answer": "```yaml name: Contributor License Agreement (CLA)\n\non:\n  pull_request_target:\n    types: [opened, synchronize]\n  issue_comment:\n    types: [created]\n\njobs:\n  cla:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event.issue.pull_request \n        && !github.event.issue.pull_request.merged_at\n        && contains(github.event.comment.body, 'signed')\n      ) \n      || (github.event.pull_request && !github.event.pull_request.merged)\n    steps:\n      - uses: Shopify/shopify-cla-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          cla-token: ${{ secrets.CLA_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Contributor License Agreement (CLA)` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) a pull request is created or a pull request's head branch is updated. 2) a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `cla`. This job will run only if the condition((github.event.issue.pull_request \n  && !github.event.issue.pull_request.merged_at\n  && contains(github.event.comment.body, 'signed')\n) \n|| (github.event.pull_request && !github.event.pull_request.merged)\n) is met. This job will run on ubuntu-latest runner. The job `cla` has one step. The 1st step is named ``. This step runs action `Shopify/shopify-cla-action` tagged as v1. The step defines 2 input parameters for the action: `github-token` is set to `${{ secrets.GITHUB_TOKEN }}` and `cla-token` is set to `${{ secrets.CLA_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.685959435011753}, {"id": "63c496836fc19abdf9c9c720", "level": "level5", "llm_response": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 0 * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. This step runs action `JuliaRegistries/TagBot` tagged as v1. The step defines an input parameter for the action: `token` is set to `${{ secrets.GITHUB_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496741e3364807577abc2", "level": "level5", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run only if the condition(github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot') is met. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. This step runs action `JuliaRegistries/TagBot` tagged as v1. The step defines 2 input parameters for the action: `token` is set to `${{ secrets.GITHUB_TOKEN }}` and `ssh` is set to `${{ secrets.DOCUMENTER_KEY }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495f37843b61269a0b108", "level": "level5", "llm_response": "```yaml name: PR Approval Bypass Notifier\n\non:\n  pull_request:\n    types: [closed]\n    branches: [main]\n\npermissions:\n  pull-requests: read\n\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: ${{ github.event.pull_request.merged }}\n        env:\n          AUTH_HEADER: Authorization: token ${{ secrets.GITHUB_TOKEN }}\n          JSON_HEADER: Content-Type: application/json\n          REVIEWS_URL: https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews\n        run: |\n          curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n            | jq -e '. | map({user: .user.login, state: .state})\n                   | reduce .[] as $x ({}; .[$x.user] = $x.state)\n                   | to_entries | map(.value)\n                   | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n      - name: Slack Notification\n        if: failure()\n        run: |\n          jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n            | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n```", "answer": "```yaml name: PR Approval Bypass Notifier\non:\n  pull_request:\n    types:\n      - closed\n    branches:\n      - main\npermissions:\n  pull-requests: read\njobs:\n  approval:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail If No Approval\n        if: ${{ github.event.pull_request.merged }}\n        env:\n          AUTH_HEADER: 'Authorization: token ${{ secrets.GITHUB_TOKEN }}'\n          JSON_HEADER: 'Content-Type: application/json'\n          REVIEWS_URL: 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews'\n        run: |\n          curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n            | jq -e '. | map({user: .user.login, state: .state})\n                       | reduce .[] as $x ({}; .[$x.user] = $x.state)\n                       | to_entries | map(.value)\n                       | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n      - name: Slack Notification\n        if: ${{ failure() }}\n        run: |\n          jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n          | curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n```", "prompt": "Generate a GitHub Workflow named `PR Approval Bypass Notifier` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is closed. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `approval`. This job will run on ubuntu-latest runner. The job `approval` has 2 steps. The 1st step is named `Fail If No Approval`. This step will run only if the condition(${{ github.event.pull_request.merged }}) is met. The step sets 3 environment variables to use: `AUTH_HEADER` is set to `Authorization: token ${{ secrets.GITHUB_TOKEN }}`, `JSON_HEADER` is set to `Content-Type: application/json` and `REVIEWS_URL` is set to `https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews`. This step runs a script: `curl -sSL -H \"${JSON_HEADER}\" -H \"${AUTH_HEADER}\" \"${REVIEWS_URL}\" \\\n  | jq -e '. | map({user: .user.login, state: .state})\n             | reduce .[] as $x ({}; .[$x.user] = $x.state)\n             | to_entries | map(.value)\n             | contains([\"APPROVED\"]) and (contains([\"CHANGES_REQUESTED\"]) | not)'\n`. The 2nd step is named `Slack Notification`. This step will run only if the condition(${{ failure() }}) is met. This step runs a script: `jq --null-input '{ text: \"Oh no! The following PR was merged without approval: w${{github.event.pull_request.html_url}}\" }' \\\n| curl -sSL -X POST -H 'Content-Type: application/json' -d @- '${{ secrets.SLACK_MERGE_WITHOUT_APPROVAL_WEBHOOK }}'\n`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 18: mapping values are not allowed in this context", "filepath": "../tmp/test.yml", "line": 18, "column": 0, "kind": "syntax-check", "snippet": "          AUTH_HEADER: Authorization: token ${{ secrets.GITHUB_TOKEN }}", "end_column": 0}]}, "bleu_score": 0.8154035306269228}, {"id": "63c4957d8052faa2781b22a0", "level": "level5", "llm_response": "```yaml name: \"Close stale\"\n\non:\n  schedule:\n    - cron: \"0 1 * * *\"\n\njobs:\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "prompt": "Generate a GitHub Workflow named `Close stale` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 01:00 am. The workflow has one job. The job id of the 1st job is `stale`. This job will call a reusable workflow located at `knative/actions/.github/workflows/stale.yaml@main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3850322886878713}, {"id": "63c4959f7843b61269a08d83", "level": "level5", "llm_response": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        julia-version:\n          - 1.2.0\n        julia-arch:\n          - x86\n        os:\n          - ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "answer": "```yaml name: CompatHelper\n\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.2.0]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.TAGBOT }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```", "prompt": "Generate a GitHub Workflow named `CompatHelper` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `CompatHelper`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `julia-version` has one value: 1.2.0. The variable `julia-arch` has one value: x86. The variable `os` has one value: ubuntu-latest. The job `CompatHelper` has 2 steps. The 1st step is named `Pkg.add(\"CompatHelper\")`. This step runs a script: `julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'`. The 2nd step is named `CompatHelper.main()`. The step sets 2 environment variables to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}` and `COMPATHELPER_PRIV` is set to `${{ secrets.TAGBOT }}`. This step runs a script: `julia -e 'using CompatHelper; CompatHelper.main()'`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6801812590730382}, {"id": "63c494358052faa2781a9de3", "level": "level5", "llm_response": "```yaml name: JumpServer repos generic handler\n\non:\n  push:\n  pull_request:\n  release:\n\njobs:\n  generic_handler:\n    name: Run generic handler\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jumpserver/action-generic-handler@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.PRIVATE_TOKEN }}\n```", "answer": "```yaml on: [push, pull_request, release]\n\nname: JumpServer repos generic handler\n\njobs:\n  generic_handler:\n    name: Run generic handler\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jumpserver/action-generic-handler@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.PRIVATE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `JumpServer repos generic handler` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. 3) release activity in the repository occurs. The workflow has one job. The 1st job is named `Run generic handler` and its job id is `generic_handler`. This job will run on ubuntu-latest runner. The job `generic_handler` has one step. The 1st step is named ``. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.PRIVATE_TOKEN }}`. This step runs action `jumpserver/action-generic-handler` from the master branch. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7795149903947967}, {"id": "63c494298052faa2781a98fa", "level": "level5", "llm_response": "```yaml name: Check test times\n\non: [push, pull_request]\n\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache\n        uses: hendrikmuhs/ccache-action@v1.2\n        with:\n          key: linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}\n          restore-keys: linux-ci-build-times-${{ github.ref }}-\n      - name: Setup\n        run: |\n          sudo apt update\n          sudo apt install -y libboost-dev autoconf automake libtool ccache\n      - name: Build\n        run: |\n          ./autogen.sh\n          ./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\n          make -j 2\n      - name: Run tests\n        run: |\n          ./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n          ./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n          ./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n      - name: Save test times\n        run: |\n          python ./tools/check_test_times.py\n      - name: Check test times\n        run: |\n          python ./tools/check_test_times.py\n```", "answer": "```yaml name: Check test times\non: [push, pull_request]\njobs:\n  check-test-times:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Cache\n      uses: hendrikmuhs/ccache-action@v1.2\n      with:\n        key: linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}\n        restore-keys: |\n          linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-\n          linux-ci-build-times-${{ github.ref }}-\n          linux-ci-build-times-refs/heads/master-\n          linux-ci-build-times-\n    - name: Setup\n      run: |\n        sudo apt update\n        sudo apt install -y libboost-dev autoconf automake libtool ccache\n    - name: Build\n      run: |\n        ./autogen.sh\n        ./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\n        make -j 2\n    - name: Run tests\n      run: |\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n        ./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n    - name: Save test times\n      uses: actions/upload-artifact@v3\n      with:\n        name: test-reports\n        path: ./all.xml\n    - name: Check test times\n      run: |\n        python ./tools/check_test_times.py\n```", "prompt": "Generate a GitHub Workflow named `Check test times` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check-test-times`. This job will run on ubuntu-latest runner. The job `check-test-times` has 7 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Cache`. This step runs action `hendrikmuhs/ccache-action` tagged as v1.2. The step defines 2 input parameters for the action: `key` is set to `linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-${{ hashFiles('**/*.hpp', '**/*.cpp') }}` and `restore-keys` is set to `linux-ci-build-times-${{ github.ref }}-${{ github.head_ref }}-\nlinux-ci-build-times-${{ github.ref }}-\nlinux-ci-build-times-refs/heads/master-\nlinux-ci-build-times-\n`. The 3rd step is named `Setup`. This step runs a script: `sudo apt update\nsudo apt install -y libboost-dev autoconf automake libtool ccache\n`. The 4th step is named `Build`. This step runs a script: `./autogen.sh\n./configure --disable-static CC=\"ccache gcc\" CXX=\"ccache g++\" CXXFLAGS=\"-O2 -g0\"\nmake -j 2\n`. The 5th step is named `Run tests`. This step runs a script: `./test-suite/quantlib-test-suite --logger=JUNIT,warning,faster.xml:HRF,message -- --faster\n./test-suite/quantlib-test-suite --logger=JUNIT,warning,fast.xml:HRF,message -- --fast\n./test-suite/quantlib-test-suite --logger=JUNIT,warning,all.xml:HRF,message\n`. The 6th step is named `Save test times`. This step runs action `actions/upload-artifact` tagged as v3. The step defines 2 input parameters for the action: `name` is set to `test-reports` and `path` is set to `./all.xml`. The 7th step is named `Check test times`. This step runs a script: `python ./tools/check_test_times.py\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8230024683742745}, {"id": "63c496981899db58864d3f6f", "level": "level5", "llm_response": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types: [completed]\n  pull_request:\n    types: [closed, labeled, unlabeled]\n  schedule:\n    # Every 3 hours, only run on the CI repository\n    - cron: '30 0 */3 * *'\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    runs-on: ubuntu-latest\n    if: startsWith(github.repository, 'Homebrew/') && (\n      github.event.label.name == 'ci-requeue' ||\n      github.event.label.name == 'ci-retry' ||\n      github.event.label.name == 'ci-skip-appcast' ||\n      github.event.label.name == 'ci-skip-install' ||\n      github.event.label.name == 'ci-syntax-only' ||\n      !github.event.label.name\n    )\n\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          once-label: ci-requeue\n          continuous-label: ci-retry\n          trigger-labels: ci-skip-appcast,ci-skip-install,ci-syntax-only\n          workflow: ci.yml\n```", "answer": "```yaml name: Re-run Workflow\n\non:\n  workflow_run:\n    workflows:\n      - CI\n    types:\n      - completed\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n      - unlabeled\n  schedule:\n    - cron: '30 */3 * * *' # every 3 hours (30 minutes past the hour)\n\npermissions:\n  contents: read\n\njobs:\n  rerun-workflow:\n    if: >\n      startsWith(github.repository, 'Homebrew/') &&\n      (\n        github.event.label.name == 'ci-requeue' ||\n        github.event.label.name == 'ci-retry' ||\n        github.event.label.name == 'ci-skip-appcast' ||\n        github.event.label.name == 'ci-skip-install' ||\n        github.event.label.name == 'ci-syntax-only' ||\n        !github.event.label.name\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Re-run CI workflow\n        uses: reitermarkus/rerun-workflow@c8d5bc3526acb50c12004f31c0dcb1598c87e32d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          once-label: ci-requeue\n          continuous-label: ci-retry\n          trigger-labels: ci-skip-appcast,ci-skip-install,ci-syntax-only\n          workflow: ci.yml\n```", "prompt": "Generate a GitHub Workflow named `Re-run Workflow` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) the workflow named CI is completed. 2) a pull request is closed, a label is added to a pull request or a label is removed from a pull request. 3) the scheduled time has come: at 30 minutes past the hour, every 3 hours. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `rerun-workflow`. This job will run only if the condition(startsWith(github.repository, 'Homebrew/') && (\n  github.event.label.name == 'ci-requeue' ||\n  github.event.label.name == 'ci-retry' ||\n  github.event.label.name == 'ci-skip-appcast' ||\n  github.event.label.name == 'ci-skip-install' ||\n  github.event.label.name == 'ci-syntax-only' ||\n  !github.event.label.name\n)\n) is met. This job will run on ubuntu-latest runner. The job `rerun-workflow` has one step. The 1st step is named `Re-run CI workflow`. This step runs action `reitermarkus/rerun-workflow` whose commit is c8d5bc3526acb50c12004f31c0dcb1598c87e32d. The step defines 5 input parameters for the action: `token` is set to `${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}`, `once-label` is set to `ci-requeue`, `continuous-label` is set to `ci-retry`, `trigger-labels` is set to `ci-skip-appcast,ci-skip-install,ci-syntax-only` and `workflow` is set to `ci.yml`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 26: could not find expected ':'", "filepath": "../tmp/test.yml", "line": 26, "column": 0, "kind": "syntax-check", "snippet": "    )", "end_column": 0}]}, "bleu_score": 0.6170714830921165}, {"id": "63c493bc7843b612699fd432", "level": "level5", "llm_response": "```yaml name: CI\n\non: [pull_request, push]\n\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci || npm install\n      - name: XO\n        run: nx xo\n\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci || npm install\n      - name: build\n        run: npm run build\n```", "answer": "```yaml env: {}\n\n# FILE GENERATED WITH: npx ghat fregante/ghatemplates/node\n# SOURCE: https://github.com/fregante/ghatemplates\n# OPTIONS: {\"exclude\":[\"jobs.Test\"]}\n\nname: CI\non:\n  - pull_request\n  - push\njobs:\n  Lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: install\n        run: npm ci || npm install\n      - name: XO\n        run: npx xo\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: install\n        run: npm ci || npm install\n      - name: build\n        run: npm run build\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) a commit or tag is pushed, or a repository is cloned. The workflow has 2 jobs. The job id of the 1st job is `Lint`. This job will run on ubuntu-latest runner. The job `Lint` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `actions/setup-node` tagged as v3. The step defines an input parameter for the action: `node-version` is set to `16`. The 3rd step is named `install`. This step runs a script: `npm ci || npm install`. The 4th step is named `XO`. This step runs a script: `npx xo`. The job id of the 2nd job is `Build`. This job will run on ubuntu-latest runner. The job `Build` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `install`. This step runs a script: `npm ci || npm install`. The 3rd step is named `build`. This step runs a script: `npm run build`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8297032342727322}, {"id": "63c495a68052faa2781b342a", "level": "level5", "llm_response": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches:\n      - master\n      - 1.x\n      - release\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    if: github.repository == 'jdbc-observations/datasource-proxy'\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: '8'\n          distribution: 'temurin'\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}\n          gpg-passphrase: MAVEN_GPG_PASSPHRASE\n      - name: Publish package\n        run: |\n          ./mvnw --batch-mode deploy -DskipTests=true -Pgithub-ossrh\n        env:\n          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n```", "answer": "```yaml name: Release to Maven Central (Deploy Snapshot or Stage Release)\n\non:\n  push:\n    branches: [master, 1.x, release]\n\njobs:\n  release:\n    if: github.repository == 'jdbc-observations/datasource-proxy'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: 8\n          distribution: temurin\n          server-id: ossrh\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}\n          gpg-passphrase: MAVEN_GPG_PASSPHRASE\n      - name: Publish package\n        run: ./mvnw --batch-mode deploy -DskipTests=true -Pgithub-ossrh\n        env:\n          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n\n```", "prompt": "Generate a GitHub Workflow named `Release to Maven Central (Deploy Snapshot or Stage Release)` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master, a branch named 1.x or a branch named release. The workflow has one job. The job id of the 1st job is `release`. This job will run only if the condition(github.repository == 'jdbc-observations/datasource-proxy') is met. This job will run on ubuntu-latest runner. The job `release` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Set up Maven Central Repository`. This step runs action `actions/setup-java` tagged as v3. The step defines 7 input parameters for the action: `java-version` is set to `8`, `distribution` is set to `temurin`, `server-id` is set to `ossrh`, `server-username` is set to `MAVEN_USERNAME`, `server-password` is set to `MAVEN_PASSWORD`, `gpg-private-key` is set to `${{ secrets.MAVEN_GPG_PRIVATE_KEY }}` and `gpg-passphrase` is set to `MAVEN_GPG_PASSPHRASE`. The 3rd step is named `Publish package`. The step sets 3 environment variables to use: `MAVEN_USERNAME` is set to `${{ secrets.OSSRH_USERNAME }}`, `MAVEN_PASSWORD` is set to `${{ secrets.OSSRH_PASSWORD }}` and `MAVEN_GPG_PASSPHRASE` is set to `${{ secrets.MAVEN_GPG_PASSPHRASE }}`. This step runs a script: `./mvnw --batch-mode deploy -DskipTests=true -Pgithub-ossrh`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7647570556338793}, {"id": "63c495167843b61269a0553c", "level": "level5", "llm_response": "```yaml name: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}\n```", "answer": "```yaml # Run the workflow that adds new tickets that are either:\n# - labelled \"DEPR\"\n# - title starts with \"[DEPR]\"\n# - body starts with \"Proposal Date\" (this is the first template field)\n# to the org-wide DEPR project board\n\nname: Add newly created DEPR issues to the DEPR project board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  routeissue:\n    uses: openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master\n    secrets:\n      GITHUB_APP_ID: ${{ secrets.GRAPHQL_AUTH_APP_ID }}\n      GITHUB_APP_PRIVATE_KEY: ${{ secrets.GRAPHQL_AUTH_APP_PEM }}\n      SLACK_BOT_TOKEN: ${{ secrets.SLACK_ISSUE_BOT_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Add newly created DEPR issues to the DEPR project board` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `routeissue`. This job will call a reusable workflow located at `openedx/.github/.github/workflows/add-depr-ticket-to-depr-board.yml@master`. The job will pass 3 secrets to the called workflow: the secret `GITHUB_APP_ID` is `${{ secrets.GRAPHQL_AUTH_APP_ID }}`, the secret `GITHUB_APP_PRIVATE_KEY` is `${{ secrets.GRAPHQL_AUTH_APP_PEM }}` and the secret `SLACK_BOT_TOKEN` is `${{ secrets.SLACK_ISSUE_BOT_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8866029039778043}, {"id": "63c495e88052faa2781b50cc", "level": "level5", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run only if the condition(github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot') is met. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. This step runs action `JuliaRegistries/TagBot` tagged as v1. The step defines 2 input parameters for the action: `token` is set to `${{ secrets.GITHUB_TOKEN }}` and `ssh` is set to `${{ secrets.DOCUMENTER_KEY }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496876fc19abdf9c9c8bb", "level": "level5", "llm_response": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: '*/30 * * * *'\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.4.0\n\n      - name: Install Dependencies\n        run: yarn\n\n      - name: Checkout Data Source Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.4.0\n        with:\n          repository: smartcontractkit/reference-data-directory\n          path: data-source\n          token: ${{ secrets.GH_API_KEY }}\n\n      - name: Process Data\n        run: yarn process\n\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91 # v1.1.1\n        with:\n          args: -c firebase-addresses.json deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n          PROJECT_ID: cl-docs-addresses\n```", "answer": "```yaml name: Build and Publish Feed Resources\n\non:\n  schedule:\n    - cron: \"*/30 * * * *\"\n\njobs:\n  build-feeds:\n    name: Update latest feed data from source repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n      - name: Install Dependencies\n        run: yarn\n      - name: Checkout Data Source Repo\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n        with:\n          repository: smartcontractkit/reference-data-directory\n          path: data-source\n          token: ${{ secrets.GH_API_KEY }}\n      # - name: Read Data Source\n      #   run: cat data-source/package.json\n      - name: Process Data\n        run: yarn process\n      - name: Deploy to Firebase\n        uses: w9jds/firebase-action@94389a881adad57284e35860f5d258ab262dcd91\n        with:\n\n          args: -c firebase-addresses.json deploy --only hosting\n        env:\n          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}\n          PROJECT_ID: cl-docs-addresses\n```", "prompt": "Generate a GitHub Workflow named `Build and Publish Feed Resources` for a GitHub repository whose primary programming language is Solidity. This workflow will be triggered by an event: the scheduled time has come: every 30 minutes. The workflow has one job. The 1st job is named `Update latest feed data from source repo` and its job id is `build-feeds`. This job will run on ubuntu-latest runner. The job `build-feeds` has 5 steps. The 1st step is named `Checkout Repo`. This step runs action `actions/checkout` whose commit is 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f. The 2nd step is named `Install Dependencies`. This step runs a script: `yarn`. The 3rd step is named `Checkout Data Source Repo`. This step runs action `actions/checkout` whose commit is 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f. The step defines 3 input parameters for the action: `repository` is set to `smartcontractkit/reference-data-directory`, `path` is set to `data-source` and `token` is set to `${{ secrets.GH_API_KEY }}`. The 4th step is named `Process Data`. This step runs a script: `yarn process`. The 5th step is named `Deploy to Firebase`. The step sets 2 environment variables to use: `FIREBASE_TOKEN` is set to `${{ secrets.FIREBASE_TOKEN }}` and `PROJECT_ID` is set to `cl-docs-addresses`. This step runs action `w9jds/firebase-action` whose commit is 94389a881adad57284e35860f5d258ab262dcd91. The step defines an input parameter for the action: `args` is set to `-c firebase-addresses.json deploy --only hosting`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.823466593956402}, {"id": "63c494298052faa2781a98f7", "level": "level5", "llm_response": "```yaml name: Microsoft C++ Code Analysis\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\nenv:\n  build: \"${{ github.workspace }}/build\"\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: windows-2022\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Setup\n        run: |\n          $Url = \"https://boostorg.jfrog.io/artifactory/main/release/1.75.0/binaries/boost_1_75_0-msvc-14.2-64.exe\"\n          (New-Object System.Net.WebClient).DownloadFile($Url, \"$env:TEMP\\boost.exe\")\n          Start-Process -Wait -FilePath \"$env:TEMP\\boost.exe\" \"/SILENT\",\"/SP-\",\"/SUPPRESSMSGBOXES\",\"/DIR=C:\\local\\boost-1.75.0\"\n      - name: Configure CMake\n        run: |\n          cmake -B ${{ env.build }} -DQL_USE_STD_CLASSES=ON\n      - name: Initialize MSVC Code Analysis\n        id: run-analysis\n        uses: microsoft/msvc-code-analysis-action@v0.1.1\n        env:\n          CMAKE_BUILD_DIRECTORY: ${{ env.build }}\n          BUILD_CONFIGURATION: Release\n          RULESET: ${{ github.workspace }}/.msvc-analysis.ruleset\n        with:\n          cmakeBuildDirectory: ${{ env.build }}\n          buildConfiguration: Release\n          ruleset: ${{ github.workspace }}/.msvc-analysis.ruleset\n      - name: Upload SARIF to GitHub\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{ steps.run-analysis.outputs.sarif }}\n      - name: Upload SARIF as an Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: sarif-file\n          path: ${{ steps.run-analysis.outputs.sarif }}\n```", "answer": "```yaml name: Microsoft C++ Code Analysis\n\non:\n  schedule:\n    - cron: '0 0 * * 0'\n  workflow_dispatch:\n\nenv:\n  # Path to the CMake build directory.\n  build: '${{ github.workspace }}/build'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: windows-2022\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup\n        run: |\n          $Url = \"https://boostorg.jfrog.io/artifactory/main/release/1.75.0/binaries/boost_1_75_0-msvc-14.2-64.exe\"\n          (New-Object System.Net.WebClient).DownloadFile($Url, \"$env:TEMP\\boost.exe\")\n          Start-Process -Wait -FilePath \"$env:TEMP\\boost.exe\" \"/SILENT\",\"/SP-\",\"/SUPPRESSMSGBOXES\",\"/DIR=C:\\local\\boost-1.75.0\"\n\n      - name: Configure CMake\n        env:\n          BOOST_ROOT: C:\\local\\boost-1.75.0\n        run: cmake -B ${{ env.build }} -DQL_USE_STD_CLASSES=ON\n\n      - name: Initialize MSVC Code Analysis\n        uses: microsoft/msvc-code-analysis-action@v0.1.1\n        # Provide a unique ID to access the sarif output path\n        id: run-analysis\n        env:\n          CAExcludePath: C:\\local\\boost-1.75.0\n        with:\n          cmakeBuildDirectory: ${{ env.build }}\n          buildConfiguration: Release\n          ruleset: '${{ github.workspace }}/.msvc-analysis.ruleset'\n\n      - name: Upload SARIF to GitHub\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{ steps.run-analysis.outputs.sarif }}\n\n      - name: Upload SARIF as an Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: sarif-file\n          path: ${{ steps.run-analysis.outputs.sarif }}\n\n```", "prompt": "Generate a GitHub Workflow named `Microsoft C++ Code Analysis` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am, only on sunday. 2) someone manually triggers the workflow. The workflow sets an environment variable to use: `build` is set to `${{ github.workspace }}/build`. The workflow has one job. The 1st job is named `Analyze` and its job id is `analyze`. This job will run on windows-2022 runner. The job `analyze` has 6 steps. The 1st step is named `Checkout repository`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Setup`. This step runs a script: `$Url = \"https://boostorg.jfrog.io/artifactory/main/release/1.75.0/binaries/boost_1_75_0-msvc-14.2-64.exe\"\n(New-Object System.Net.WebClient).DownloadFile($Url, \"$env:TEMP\\boost.exe\")\nStart-Process -Wait -FilePath \"$env:TEMP\\boost.exe\" \"/SILENT\",\"/SP-\",\"/SUPPRESSMSGBOXES\",\"/DIR=C:\\local\\boost-1.75.0\"\n`. The 3rd step is named `Configure CMake`. The step sets an environment variable to use: `BOOST_ROOT` is set to `C:\\local\\boost-1.75.0`. This step runs a script: `cmake -B ${{ env.build }} -DQL_USE_STD_CLASSES=ON`. The 4th step is named `Initialize MSVC Code Analysis` and its id is `run-analysis`. The step sets an environment variable to use: `CAExcludePath` is set to `C:\\local\\boost-1.75.0`. This step runs action `microsoft/msvc-code-analysis-action` tagged as v0.1.1. The step defines 3 input parameters for the action: `cmakeBuildDirectory` is set to `${{ env.build }}`, `buildConfiguration` is set to `Release` and `ruleset` is set to `${{ github.workspace }}/.msvc-analysis.ruleset`. The 5th step is named `Upload SARIF to GitHub`. This step runs action `github/codeql-action/upload-sarif` tagged as v2. The step defines an input parameter for the action: `sarif_file` is set to `${{ steps.run-analysis.outputs.sarif }}`. The 6th step is named `Upload SARIF as an Artifact`. This step runs action `actions/upload-artifact` tagged as v3. The step defines 2 input parameters for the action: `name` is set to `sarif-file` and `path` is set to `${{ steps.run-analysis.outputs.sarif }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7768957108216528}, {"id": "63c494a48052faa2781ac54a", "level": "level5", "llm_response": "```yaml name: cspell-action\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: streetsidesoftware/cspell-action@v2\n```", "answer": "```yaml name: cspell-action\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: streetsidesoftware/cspell-action@v2\n```", "prompt": "Generate a GitHub Workflow named `cspell-action` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `cspell`. This job will run on ubuntu-latest runner. The job `cspell` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `streetsidesoftware/cspell-action` tagged as v2. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495197843b61269a056bc", "level": "level5", "llm_response": "```yaml name: \"Code Scanning - Action\"\n\non:\n  pull_request:\n    branches:\n      - dev\n      - master\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      # Required for Action to run.\n      security-events: write\n      # For CodeQL to extract data needed to perform the CodeScan.\n      actions: read\n      # For the download of the results to be stored in the user's\n      # personal access token (PAT).\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  pull_request:\n    branches: [dev, master]\n    types: [opened, synchronize]\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      # - name: Autobuild\n      #   uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `Code Scanning - Action` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created or a pull request's head branch is updated. The workflow would run whenever there is a pull_request event targeting: a branch named dev or a branch named master. The workflow has one job. The job id of the 1st job is `CodeQL-Build`. This job will run on ubuntu-latest runner. The job `CodeQL-Build` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `security-events` scope, read access is granted to the GITHUB_TOKEN in the `actions` scope and read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `CodeQL-Build`. The job `CodeQL-Build` has 3 steps. The 1st step is named `Checkout repository`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Initialize CodeQL`. This step runs action `github/codeql-action/init` tagged as v2. The step defines an input parameter for the action: `languages` is set to `go`. The 3rd step is named `Perform CodeQL Analysis`. This step runs action `github/codeql-action/analyze` tagged as v2. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8564160366760264}, {"id": "63c494ee8052faa2781ae44b", "level": "level5", "llm_response": "```yaml name: Add PR Deploy Badge\n\non:\n  # We only need this for deployment status to be created\n  # and then to be triggered.\n  # We don't need it for PR creation.\n  # We do need it for PR approval.\n  deployment_status:\n    types: [created]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    if: github.event.deployment_status.state == 'success'\n    permissions:\n      pull-requests: write\n    steps:\n      - name: KB Pull Request Deployment Badges\n        uses: kibibit/kb-badger-action@v2\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          badge-left: demo\n          badge-right: application\n          badge-logo: heroku\n          badge-path: api\n          badge2-left: demo\n          badge2-right: api-docs\n          badge2-color: 85EA2D\n          badge2-logo: swagger\n          badge2-path: api/docs\n```", "answer": "```yaml name: Add PR Deploy Badge\n# https://docs.github.com/en/actions/reference/events-that-trigger-workflows\non: [deployment_status]\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    # only runs this job on successful deploy\n    if: github.event.deployment_status.state == 'success'\n    steps:\n    - name: Kb Pull Request Deployment Badges\n      uses: kibibit/kb-badger-action@v2\n      with:\n        github-token: ${{secrets.GITHUB_TOKEN}}\n        badge-left: demo\n        badge-right: application\n        badge-logo: heroku\n        badge-path: api\n        badge2-left: demo\n        badge2-right: api-docs\n        badge2-color: 85EA2D\n        badge2-logo: swagger\n        badge2-path: api/docs\n```", "prompt": "Generate a GitHub Workflow named `Add PR Deploy Badge` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a new deployment status is created. The workflow has one job. The job id of the 1st job is `badge`. This job will run only if the condition(github.event.deployment_status.state == 'success') is met. This job will run on ubuntu-latest runner. The job `badge` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `badge`. The job `badge` has one step. The 1st step is named `Kb Pull Request Deployment Badges`. This step runs action `kibibit/kb-badger-action` tagged as v2. The step defines 10 input parameters for the action: `github-token` is set to `${{secrets.GITHUB_TOKEN}}`, `badge-left` is set to `demo`, `badge-right` is set to `application`, `badge-logo` is set to `heroku`, `badge-path` is set to `api`, `badge2-left` is set to `demo`, `badge2-right` is set to `api-docs`, `badge2-color` is set to `85EA2D`, `badge2-logo` is set to `swagger` and `badge2-path` is set to `api/docs`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "\"types\" cannot be specified for \"deployment_status\" Webhook event", "filepath": "../tmp/test.yml", "line": 8, "column": 3, "kind": "events", "snippet": "  deployment_status:\n  ^~~~~~~~~~~~~~~~~~", "end_column": 20}]}, "bleu_score": 0.8105082371227512}, {"id": "63c4968b33b087f6bde2caaa", "level": "level5", "llm_response": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.0.2\n        with:\n          submodules: recursive\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v2.1.0\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n      - name: Verify .NET Core\n        run: dotnet --info\n\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore ASFEnhance -p:ContinuousIntegrationBuild=true --nologo\n\n      - name: Publish ASFEnhance on Windows\n        run: |\n          $script = \"./build.ps1\";\n          Set-Location ${{ github.workspace }};\n          powershell $script;\n      - name: Upload ASFEnhance-zh-Hans\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-zh-Hans\n          path: dist/ASFEnhance-zh-Hans.zip\n        if: failure()\n\n      - name: Upload ASFEnhance-en-US\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-en-US\n          path: dist/ASFEnhance-en-US.zip\n        if: failure()\n```", "answer": "```yaml name: AutoBuild-Dev\n\non:\n  workflow_dispatch:\n  push:\n\nenv:\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  publish:\n    runs-on: windows-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.0.2\n        with:\n          submodules: recursive\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v2.1.0\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n      - name: Verify .NET Core\n        run: dotnet --info\n\n      - name: Restore packages in preparation for ASFEnhance publishing\n        run: dotnet restore ASFEnhance -p:ContinuousIntegrationBuild=true --nologo\n\n      - name: Publish ASFEnhance on Windows\n        shell: pwsh\n        run: |\n          $script = \"./build.ps1\";\n          Set-Location ${{ github.workspace }};\n          powershell $script;\n\n      - name: Upload ASFEnhance-zh-Hans\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-zh-Hans\n          path: dist/ASFEnhance-zh-Hans.zip\n\n      - name: Upload ASFEnhance-en-US\n        continue-on-error: true\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: ASFEnhance-en-US\n          path: dist/ASFEnhance-en-US.zip\n```", "prompt": "Generate a GitHub Workflow named `AutoBuild-Dev` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) a commit or tag is pushed, or a repository is cloned. The workflow sets an environment variable to use: `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `publish`. This job will run on windows-latest runner. The job `publish` has 7 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` tagged as v3.0.2. The step defines an input parameter for the action: `submodules` is set to `recursive`. The 2nd step is named `Setup .NET Core`. This step runs action `actions/setup-dotnet` tagged as v2.1.0. The step defines an input parameter for the action: `dotnet-version` is set to `${{ env.DOTNET_SDK_VERSION }}`. The 3rd step is named `Verify .NET Core`. This step runs a script: `dotnet --info`. The 4th step is named `Restore packages in preparation for ASFEnhance publishing`. This step runs a script: `dotnet restore ASFEnhance -p:ContinuousIntegrationBuild=true --nologo`. The 5th step is named `Publish ASFEnhance on Windows`. This step uses PowerShell Core to run a script: `$script = \"./build.ps1\";\nSet-Location ${{ github.workspace }};\npowershell $script;\n`. The 6th step is named `Upload ASFEnhance-zh-Hans`. This step runs action `actions/upload-artifact` tagged as v3.0.0. The step defines 2 input parameters for the action: `name` is set to `ASFEnhance-zh-Hans` and `path` is set to `dist/ASFEnhance-zh-Hans.zip`. When this step fails, the job will move on to the next step. The 7th step is named `Upload ASFEnhance-en-US`. This step runs action `actions/upload-artifact` tagged as v3.0.0. The step defines 2 input parameters for the action: `name` is set to `ASFEnhance-en-US` and `path` is set to `dist/ASFEnhance-en-US.zip`. When this step fails, the job will move on to the next step. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8789818006696111}, {"id": "63c494b78052faa2781acd9d", "level": "level5", "llm_response": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    workflows: [\"Continuous Integration\"]\n    types: [completed]\n\njobs:\n  merge-me:\n    name: Merge me!\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n```", "answer": "```yaml name: Merge me!\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Continuous Integration'\n\njobs:\n  merge-me:\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    name: Merge me!\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge me!\n        uses: ridedott/merge-me-action@master\n        with:\n          GITHUB_TOKEN: ${{ secrets.DOTTBOTT_TOKEN }}\n    timeout-minutes: 5\n```", "prompt": "Generate a GitHub Workflow named `Merge me!` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: the workflow named Continuous Integration is completed. The workflow has one job. The 1st job is named `Merge me!` and its job id is `merge-me`. This job will run only if the condition(${{ github.event.workflow_run.conclusion == 'success' }}) is met. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 5. The job `merge-me` has one step. The 1st step is named `Merge me!`. This step runs action `ridedott/merge-me-action` from the master branch. The step defines an input parameter for the action: `GITHUB_TOKEN` is set to `${{ secrets.DOTTBOTT_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6157612949498125}, {"id": "63c494a37843b61269a027ed", "level": "level5", "llm_response": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    strategy:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.0\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n\n      - name: Build\n        run: go build ./...\n\n      - name: Test\n        run: go test ./...\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\n\nname: CI\n\njobs:\n  test:\n    ## We want to define a strategy for our job\n    strategy:\n      ## this will contain a matrix of all the combinations\n      ## we wish to test again:\n      matrix:\n        go-version: [1.17.x]\n        platform: [ubuntu-latest, macos-latest, windows-latest]\n\n    ## Defines the platform for each test run\n    runs-on: ${{ matrix.platform }}\n\n    ## the steps that will be run through for each version and platform\n    ## combination\n    steps:\n    ## sets up go based on the version\n    - name: Install Go\n      uses: actions/setup-go@v3.3.0\n      with:\n        go-version: ${{ matrix.go-version }}\n\n    ## checks out our code locally, so we can work with the files\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n\n    ## runs go test ./...\n    - name: Build\n      run: go build ./...\n\n    ## runs go test ./...\n    - name: Test\n      run: go test ./...\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `test`. This job will run on ${{ matrix.platform }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `go-version` has one value: 1.17.x. The variable `platform` has 3 values: ubuntu-latest, macos-latest and windows-latest. The job `test` has 4 steps. The 1st step is named `Install Go`. This step runs action `actions/setup-go` tagged as v3.3.0. The step defines an input parameter for the action: `go-version` is set to `${{ matrix.go-version }}`. The 2nd step is named `Checkout code`. This step runs action `actions/checkout` tagged as v3.1.0. The 3rd step is named `Build`. This step runs a script: `go build ./...`. The 4th step is named `Test`. This step runs a script: `go test ./...`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9450052320372715}, {"id": "63c493b87843b612699fd399", "level": "level5", "llm_response": "```yaml name: release-please\non:\n  push:\n    branches:\n      - master\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: node\n          package-name: release-please-action\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - master\nname: release-please\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          release-type: node\n          package-name: release-please-action\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. This job will run on ubuntu-latest runner. The job `release-please` has one step. The 1st step is named ``. This step runs action `GoogleCloudPlatform/release-please-action` tagged as v2. The step defines 2 input parameters for the action: `release-type` is set to `node` and `package-name` is set to `release-please-action`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8371837576365553}, {"id": "63c4941e7843b612699ff1f7", "level": "level5", "llm_response": "```yaml name: Demo link\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const pullRequestId = context.payload.pull_request.number\n            const pullRequestBranch = context.payload.pull_request.head.ref\n\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: pullRequestId,\n              body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n            })\n```", "answer": "```yaml name: Demo link\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  add_demo_link:\n    name: Add demo link to PR description\n    runs-on: ubuntu-latest\n    env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    permissions:\n      pull-requests: write\n    steps:\n      - name: Update PR description\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const pullRequestId = context.payload.pull_request.number\n            const pullRequestBranch = context.payload.pull_request.head.ref\n\n            github.rest.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: pullRequestId,\n              body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n            });\n```", "prompt": "Generate a GitHub Workflow named `Demo link` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a pull request is created. The workflow has one job. The 1st job is named `Add demo link to PR description` and its job id is `add_demo_link`. This job will run on ubuntu-latest runner. The job `add_demo_link` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `add_demo_link`. The job sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. The job `add_demo_link` has one step. The 1st step is named `Update PR description`. This step runs action `actions/github-script` tagged as v6. The step defines an input parameter for the action: `script` is set to `const pullRequestId = context.payload.pull_request.number\nconst pullRequestBranch = context.payload.pull_request.head.ref\n\ngithub.rest.issues.createComment({\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  issue_number: pullRequestId,\n  body: `\ud83d\udc40 [Visit Preview](https://${pullRequestBranch}--welcome-ui.netlify.app)`\n});\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8500539049202115}, {"id": "63c494608052faa2781aabf4", "level": "level5", "llm_response": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version: 1.17\n      - name: Check go.mod files\n        run: |\n          cd gomod-sync\n          go run main.go check\n```", "answer": "```yaml name: go.mod check\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  check:\n    name: go.mod check\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version: 1.17\n\n      - name: Check go.mod files\n        shell: bash\n        run: |\n          cd gomod-sync\n          go run main.go check\n```", "prompt": "Generate a GitHub Workflow named `go.mod check` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) there is activity relating to a pull request. The workflow has one job. The 1st job is named `go.mod check` and its job id is `check`. This job will run on ubuntu-latest runner. The job `check` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` whose commit is 93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8. The 2nd step is named ``. This step runs action `actions/setup-go` whose commit is c4a742cab115ed795e34d4513e2cf7d472deb55f. The step defines an input parameter for the action: `go-version` is set to `1.17`. The 3rd step is named `Check go.mod files`. This step uses bash to run a script: `cd gomod-sync\ngo run main.go check\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.823387992432726}, {"id": "63c494228052faa2781a95a5", "level": "level5", "llm_response": "```yaml name: snyk-pr\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.ref }}\n          fetch-depth: 0\n      - name: checkout action\n        uses: actions/checkout@v3\n        with:\n          repository: snowflakedb/whitesource-actions\n          token: ${{ secrets.WHITESOURCE_ACTION_TOKEN }}\n          path: whitesource-actions\n      - name: PR\n        uses: ./whitesource-actions/snyk-pr\n        with:\n          jira_token: ${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}\n          gh_token: ${{ secrets.GITHUB_TOKEN }}\n          amend: false\n        env:\n          PR_TITLE: ${{ github.event.pull_request.title }}\n```", "answer": "```yaml name: snyk-pr\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  whitesource:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.pull_request.head.ref }}\n        fetch-depth: 0\n\n    - name: checkout action\n      uses: actions/checkout@v3\n      with:\n        repository: snowflakedb/whitesource-actions\n        token: ${{ secrets.WHITESOURCE_ACTION_TOKEN }}\n        path: whitesource-actions\n\n    - name: PR\n      uses: ./whitesource-actions/snyk-pr\n      env:\n        PR_TITLE: ${{ github.event.pull_request.title }}\n      with:\n        jira_token: ${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}\n        gh_token: ${{ secrets.GITHUB_TOKEN }}\n        amend: false # true if you want the commit to be amended with the JIRA number\n```", "prompt": "Generate a GitHub Workflow named `snyk-pr` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `whitesource`. This job will run only if the condition(${{ github.event.pull_request.user.login == 'sfc-gh-snyk-sca-sa' }}) is met. This job will run on ubuntu-latest runner. The job `whitesource` has 3 steps. The 1st step is named `checkout`. This step runs action `actions/checkout` tagged as v3. The step defines 2 input parameters for the action: `ref` is set to `${{ github.event.pull_request.head.ref }}` and `fetch-depth` is set to `0`. The 2nd step is named `checkout action`. This step runs action `actions/checkout` tagged as v3. The step defines 3 input parameters for the action: `repository` is set to `snowflakedb/whitesource-actions`, `token` is set to `${{ secrets.WHITESOURCE_ACTION_TOKEN }}` and `path` is set to `whitesource-actions`. The 3rd step is named `PR`. The step sets an environment variable to use: `PR_TITLE` is set to `${{ github.event.pull_request.title }}`. This step runs action `./whitesource-actions/snyk-pr`.The step defines 3 input parameters for the action: `jira_token` is set to `${{ secrets.JIRA_TOKEN_PUBLIC_REPO }}`, `gh_token` is set to `${{ secrets.GITHUB_TOKEN }}` and `amend` is set to `False`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.77021171843603}, {"id": "63c493c37843b612699fd587", "level": "level5", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: vNext\n          release_name: vNext\n          draft: true\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Draft Release\n        uses: release-drafter/release-drafter@v5\n        with:\n          tag_name: vNext\n          release_name: vNext\n          draft: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is TSQL. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) a pull request is created, a previously closed pull request is reopened or a pull request's head branch is updated. The workflow has one job. The job id of the 1st job is `update_release_draft`. This job will run on ubuntu-latest runner. The job `update_release_draft` has one step. The 1st step is named `Draft Release`. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `release-drafter/release-drafter` tagged as v5. The step defines 3 input parameters for the action: `tag_name` is set to `vNext`, `release_name` is set to `vNext` and `draft` is set to `True`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7102801916076844}, {"id": "63c495238052faa2781afbf5", "level": "level5", "llm_response": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs'\n        pr-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs'\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs'\n        pr-message: 'Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs'\n```", "prompt": "Generate a GitHub Workflow named `Greetings` for a GitHub repository whose primary programming language is Objective-C. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) activity related to an issue occurs. The workflow has one job. The job id of the 1st job is `greeting`. This job will run on ubuntu-latest runner. The job `greeting` has one step. The 1st step is named ``. This step runs action `actions/first-interaction` tagged as v1. The step defines 3 input parameters for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `issue-message` is set to `Welcome to BrainFlow project and thanks for your contribution! We will try to fix your issue ASAP. Make sure that you have read about issue format in the docs` and `pr-message` is set to `Welcome to BrainFlow project and thanks for your contribution! We will try to review your PR ASAP. Make sure that you have read about requirements to pull requests in the docs`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496956fc19abdf9c9ce1c", "level": "level5", "llm_response": "```yaml name: Licensed\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    name: Check licenses\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: npm\n      - run: npm ci\n      - name: Install licensed\n        run: |\n          cd $RUNNER_TEMP\n          curl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\n          sudo tar -xzf licensed.tar.gz\n          sudo mv licensed /usr/local/bin/licensed\n      - run: licensed status\n```", "answer": "```yaml name: Licensed\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    name: Check licenses\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: npm\n      - run: npm ci\n      - name: Install licensed\n        run: |\n          cd $RUNNER_TEMP\n          curl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\n          sudo tar -xzf licensed.tar.gz\n          sudo mv licensed /usr/local/bin/licensed\n      - run: licensed status\n```", "prompt": "Generate a GitHub Workflow named `Licensed` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Check licenses` and its job id is `test`. This job will run on ubuntu-latest runner. The job `test` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Set Node.js 16.x`. This step runs action `actions/setup-node` tagged as v3. The step defines 2 input parameters for the action: `node-version` is set to `16.x` and `cache` is set to `npm`. The 3rd step is named ``. This step runs a script: `npm ci`. The 4th step is named `Install licensed`. This step runs a script: `cd $RUNNER_TEMP\ncurl -Lfs -o licensed.tar.gz https://github.com/github/licensed/releases/download/3.4.4/licensed-3.4.4-linux-x64.tar.gz\nsudo tar -xzf licensed.tar.gz\nsudo mv licensed /usr/local/bin/licensed\n`. The 5th step is named ``. This step runs a script: `licensed status`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8009080657587148}, {"id": "63c495e58052faa2781b4f4c", "level": "level5", "llm_response": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: \"0 */6 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: actions/stale@v6\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          days-before-pr-stale: 14\n          days-before-pr-close: 14\n          stale-pr-label: inactive\n          close-pr-label: auto-close\n          exempt-pr-labels: keep-open\n          stale-pr-message: |\n            This pull request has been inactive for 14 days.  If you are finished with your changes, don't forget to sign off. See the [contributor guide](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-pull-request-automation?branch=main) for instructions.  If this PR is inactive for 14 more days, it will be closed automatically. Thank you! \n            VS Content Team\n            [Contact Us](mailto:vs-content@microsoft.com)  [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n          close-pr-message: |\n            This pull request has been inactive for 28 days. At this time, we are closing the PR.   If you decide to continue working on your change, you can reopen the PR and continue working. Thank you! \n            VS Content Team\n            [Contact Us](mailto:vs-content@microsoft.com)  [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n```", "answer": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '0 */6 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        days-before-pr-stale: 14\n        days-before-pr-close: 14\n        stale-pr-label: 'inactive'\n        close-pr-label: 'auto-close'\n        exempt-pr-labels: 'keep-open'\n        stale-pr-message: >\n          This pull request has been inactive for 14 days. \n          If you are finished with your changes, don't forget to sign off. See the [contributor guide](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-pull-request-automation?branch=main) for instructions. \n          If this PR is inactive for 14 more days, it will be closed automatically. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n        close-pr-message: >\n          This pull request has been inactive for 28 days. At this time, we are closing the PR.  \n          If you decide to continue working on your change, you can reopen the PR and continue working. Thank you! \n          \n          VS Content Team\n          \n          [Contact Us](mailto:vs-content@microsoft.com) \n          [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n          \n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the scheduled time has come: every 6 hours. The workflow has one job. The job id of the 1st job is `stale`. This job will run on ubuntu-latest runner. The job `stale` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `stale`. The job `stale` has one step. The 1st step is named ``. This step runs action `actions/stale` tagged as v6. The step defines 8 input parameters for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `days-before-pr-stale` is set to `14`, `days-before-pr-close` is set to `14`, `stale-pr-label` is set to `inactive`, `close-pr-label` is set to `auto-close`, `exempt-pr-labels` is set to `keep-open`, `stale-pr-message` is set to `This pull request has been inactive for 14 days.  If you are finished with your changes, don't forget to sign off. See the [contributor guide](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-pull-request-automation?branch=main) for instructions.  If this PR is inactive for 14 more days, it will be closed automatically. Thank you! \nVS Content Team\n[Contact Us](mailto:vs-content@microsoft.com)  [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n` and `close-pr-message` is set to `This pull request has been inactive for 28 days. At this time, we are closing the PR.   If you decide to continue working on your change, you can reopen the PR and continue working. Thank you! \nVS Content Team\n[Contact Us](mailto:vs-content@microsoft.com)  [Contributor Guide](https://review.docs.microsoft.com/en-us/help/contribute/visualstudio-docs-contribute?branch=main)\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8894456531736473}, {"id": "63c4951f7843b61269a0593c", "level": "level5", "llm_response": "```yaml name: docker-push\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          images: fsouza/fake-gcs-server\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n      - name: docker meta\n        uses: docker/setup-qemu-action@v2.1.0\n      - name: setup buildx\n        uses: docker/setup-buildx-action@v2.1.0\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```", "answer": "```yaml name: docker-push\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: docker meta\n        id: meta\n        uses: docker/metadata-action@v4.1.0\n        with:\n          images: fsouza/fake-gcs-server\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n\n      - name: setup qemu\n        uses: docker/setup-qemu-action@v2.1.0\n\n      - name: setup buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2.1.0\n\n      - name: login to docker hub\n        uses: docker/login-action@v2.1.0\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```", "prompt": "Generate a GitHub Workflow named `docker-push` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The job id of the 1st job is `build-and-push`. This job will run on ubuntu-latest runner. The job `build-and-push` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3.1.0. The 2nd step is named `docker meta` and its id is `meta`. This step runs action `docker/metadata-action` tagged as v4.1.0. The step defines 2 input parameters for the action: `images` is set to `fsouza/fake-gcs-server` and `tags` is set to `type=ref,event=branch\ntype=ref,event=pr\ntype=semver,pattern={{version}}\ntype=semver,pattern={{major}}.{{minor}}\ntype=semver,pattern={{major}}\n`. The 3rd step is named `setup qemu`. This step runs action `docker/setup-qemu-action` tagged as v2.1.0. The 4th step is named `setup buildx` and its id is `buildx`. This step runs action `docker/setup-buildx-action` tagged as v2.1.0. The 5th step is named `login to docker hub`. This step runs action `docker/login-action` tagged as v2.1.0. The step defines 2 input parameters for the action: `username` is set to `${{ secrets.DOCKER_USERNAME }}` and `password` is set to `${{ secrets.DOCKER_PASSWORD }}`. The 6th step is named `build and push`. This step runs action `docker/build-push-action` tagged as v3.2.0. The step defines 5 input parameters for the action: `context` is set to `.`, `push` is set to `True`, `tags` is set to `${{ steps.meta.outputs.tags }}`, `labels` is set to `${{ steps.meta.outputs.labels }}` and `platforms` is set to `linux/amd64,linux/arm64`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8607684590250011}, {"id": "63c495407843b61269a06679", "level": "level5", "llm_response": "```yaml name: Tests\n\non: [pull_request, workflow_dispatch]\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11-dev']\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Linux packages for Qt 5 support\n        if: matrix.os == 'ubuntu-latest'\n        run: |\n          sudo apt-get update\n          sudo apt-get install qt5-default\n          sudo apt-get install libxkbcommon-x11-0\n          sudo apt-get install libxcb-icccm4\n          sudo apt-get install libxcb-image0\n          sudo apt-get install libxcb-keysyms1\n          sudo apt-get install libxcb-randr0\n          sudo apt-get install libxcb-render-util0\n          sudo apt-get install libxcb-xinerama0\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies and local packages\n        run: |\n          python -m pip install .[test]\n      - name: Create clean test directory\n        run: mkdir testdir\n      - name: Test Traits package\n        uses: GabrielBB/xvfb-action@v1\n        with:\n          working-directory: testdir\n          run: python -m unittest discover -v traits\n```", "answer": "```yaml name: Tests\n\non:\n- pull_request\n- workflow_dispatch\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11-dev']\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install Linux packages for Qt 5 support\n      run: |\n        sudo apt-get update\n        sudo apt-get install qt5-default\n        sudo apt-get install libxkbcommon-x11-0\n        sudo apt-get install libxcb-icccm4\n        sudo apt-get install libxcb-image0\n        sudo apt-get install libxcb-keysyms1\n        sudo apt-get install libxcb-randr0\n        sudo apt-get install libxcb-render-util0\n        sudo apt-get install libxcb-xinerama0\n      if: matrix.os == 'ubuntu-latest'\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies and local packages\n      run: |\n        python -m pip install .[test]\n    - name: Create clean test directory\n      run: |\n        mkdir testdir\n    - name: Test Traits package\n      uses: GabrielBB/xvfb-action@v1\n      with:\n        working-directory: testdir\n        run: python -m unittest discover -v traits\n```", "prompt": "Generate a GitHub Workflow named `Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `tests`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `os` has 3 values: ubuntu-latest, windows-latest and macos-latest. The variable `python-version` has 6 values: 3.6, 3.7, 3.8, 3.9, 3.10 and 3.11-dev. The job `tests` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Install Linux packages for Qt 5 support`. This step will run only if the condition(matrix.os == 'ubuntu-latest') is met. This step runs a script: `sudo apt-get update\nsudo apt-get install qt5-default\nsudo apt-get install libxkbcommon-x11-0\nsudo apt-get install libxcb-icccm4\nsudo apt-get install libxcb-image0\nsudo apt-get install libxcb-keysyms1\nsudo apt-get install libxcb-randr0\nsudo apt-get install libxcb-render-util0\nsudo apt-get install libxcb-xinerama0\n`. The 3rd step is named `Set up Python ${{ matrix.python-version }}`. This step runs action `actions/setup-python` tagged as v4. The step defines an input parameter for the action: `python-version` is set to `${{ matrix.python-version }}`. The 4th step is named `Install dependencies and local packages`. This step runs a script: `python -m pip install .[test]\n`. The 5th step is named `Create clean test directory`. This step runs a script: `mkdir testdir\n`. The 6th step is named `Test Traits package`. This step runs action `GabrielBB/xvfb-action` tagged as v1. The step defines 2 input parameters for the action: `working-directory` is set to `testdir` and `run` is set to `python -m unittest discover -v traits`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9057232311310588}, {"id": "63c495448052faa2781b0abc", "level": "level5", "llm_response": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n      - release\n  pull_request:\n    branches-ignore:\n      - release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n      - uses: actions/checkout@master\n      - name: Launch MongoDB\n        uses: wbari/start-mongoDB@master\n        with:\n          mongoDBVersion: 5\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@master\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: yarn install, build, and test\n        run: |\n          yarn install\n          yarn run build\n          yarn run test:cov\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@master\n        env:\n          CI: true\n        with:\n          token: ${{secrets.CODECOV_TOKEN}}\n```", "answer": "```yaml name: Node Blog CI\n\non:\n  push:\n    branches-ignore:\n    - release\n  pull_request:\n    branches-ignore:\n    - release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n    - uses: actions/checkout@master\n    - name: Launch MongoDB\n      uses: wbari/start-mongoDB@master\n      with:\n        mongoDBVersion: 5\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@master\n      with:\n        node-version: ${{ matrix.node-version }}\n    - name: yarn install, build, and test\n      run: |\n        yarn install\n        yarn run build\n        yarn run test:cov\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@master\n      with:\n        token: ${{secrets.CODECOV_TOKEN}}\n      env:\n        CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node Blog CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event unless the push event is to: a branch named release. 2) The workflow would run whenever there is a pull_request event unless the pull request is targeting: a branch named release. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `node-version` has one value: 16.x. The job `build` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` from the master branch. The 2nd step is named `Launch MongoDB`. This step runs action `wbari/start-mongoDB` from the master branch. The step defines an input parameter for the action: `mongoDBVersion` is set to `5`. The 3rd step is named `Use Node.js ${{ matrix.node-version }}`. This step runs action `actions/setup-node` from the master branch. The step defines an input parameter for the action: `node-version` is set to `${{ matrix.node-version }}`. The 4th step is named `yarn install, build, and test`. This step runs a script: `yarn install\nyarn run build\nyarn run test:cov\n`. The 5th step is named `Upload coverage to Codecov`. The step sets an environment variable to use: `CI` is set to `True`. This step runs action `codecov/codecov-action` from the master branch. The step defines an input parameter for the action: `token` is set to `${{secrets.CODECOV_TOKEN}}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9604149086917464}, {"id": "63c496561899db58864d23cc", "level": "level5", "llm_response": "```yaml name: Molecule - MySQL\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.mysql.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/mysql/**/*\n      - roles/mysql/**\n      - plugins/filter/mysql_config.py\n      - plugins/filter/staten.py\n      - plugins/lookup/templates_exclusive.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  mysql:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: mysql\n      versions: ${{ inputs.versions }}\n```", "answer": "```yaml name: Molecule - MySQL\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.mysql.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/mysql.*/**\n      - roles/mysql/**\n      # Plugins\n      - plugins/filter/mysql_config.py\n      - plugins/filter/staten.py\n      - plugins/lookup/templates_exclusive.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  mysql:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: mysql\n      versions: '[5.6, 5.7, \"8.0\", \"galera.3.mysql_wsrep.5.6\", \"galera.4.10.mysql_wsrep.8.0.26\", \"mariadb.10.3\", \"mariadb.10.4\", \"mariadb.10.5\", \"mariadb.10.6\"]'\n```", "prompt": "Generate a GitHub Workflow named `Molecule - MySQL` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.mysql.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/mysql.*/**, roles/mysql/**, plugins/filter/mysql_config.py, plugins/filter/staten.py or plugins/lookup/templates_exclusive.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `mysql`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 3 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}`, the input `scenario` is `mysql` and the input `versions` is `[5.6, 5.7, \"8.0\", \"galera.3.mysql_wsrep.5.6\", \"galera.4.10.mysql_wsrep.8.0.26\", \"mariadb.10.3\", \"mariadb.10.4\", \"mariadb.10.5\", \"mariadb.10.6\"]`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "property \"versions\" is not defined in object type {debug: bool}", "filepath": "../tmp/test.yml", "line": 28, "column": 21, "kind": "expression", "snippet": "      versions: ${{ inputs.versions }}\n                    ^~~~~~~~~~~~~~~", "end_column": 35}]}, "bleu_score": 0.8003679838333473}, {"id": "63c495a88052faa2781b34fc", "level": "level5", "llm_response": "```yaml name: Build iso from elemental-iso-build as external user\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Docker\n        uses: docker-practice/actions-setup-docker@v1\n      - name: Install deps\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y mkisofs\n      - name: Build iso from script\n        run: |\n          # Just a simple run to test the build script, no need to upload the generated iso!\n          echo \"TEST\" > config.yaml\n          curl -fsSL https://raw.githubusercontent.com/rancher/elemental/main/.github/elemental-iso-build -o elemental-iso-build\n          chmod +x ./elemental-iso-build\n          ./elemental-iso-build config.yaml\n      - name: Check config was inserted\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Extract config and check against our config\n          isoinfo -x /livecd-cloud-config.yaml -R -i $ISO > livecd-cloud-config.yaml\n          # This checks that the files are the same content\n          cmp config.yaml livecd-cloud-config.yaml\n      - name: Basic sanity checks for ISO\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Check it has eltorito\n          isoinfo -d -i $ISO|grep -q Eltorito\n          # check bootable flag\n          isoinfo -d -i $ISO|grep -q bootable        \n```", "answer": "```yaml name: Build iso from elemental-iso-build as external user\n# Test building the iso from an external point of view\n# This tests doesn't clone the repo, just interacts with the script as an external user would do\n# Gets the script only and runs it to see if the building is done properly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Docker\n        uses: docker-practice/actions-setup-docker@v1\n      - name: Install deps\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y mkisofs\n      - name: Build iso from script\n        run: |\n          # Just a simple run to test the build script, no need to upload the generated iso!\n          echo \"TEST\" > config.yaml\n          curl -fsSL https://raw.githubusercontent.com/rancher/elemental/main/.github/elemental-iso-build -o elemental-iso-build\n          chmod +x ./elemental-iso-build\n          ./elemental-iso-build config.yaml\n      - name: Check config was inserted\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Extract config and check against our config\n          isoinfo -x /livecd-cloud-config.yaml -R -i $ISO > livecd-cloud-config.yaml\n          # This checks that the files are the same content\n          cmp config.yaml livecd-cloud-config.yaml\n      - name: Basic sanity checks for ISO\n        run: |\n          ISO=$(find . -name \"elemental-*.iso\" -print)\n          # Check it has eltorito\n          isoinfo -d -i $ISO|grep -q Eltorito\n          # check bootable flag\n          isoinfo -d -i $ISO|grep -q bootable        \n```", "prompt": "Generate a GitHub Workflow named `Build iso from elemental-iso-build as external user` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `deploy`. This job will run on ubuntu-latest runner. The job `deploy` has 5 steps. The 1st step is named `Install Docker`. This step runs action `docker-practice/actions-setup-docker` tagged as v1. The 2nd step is named `Install deps`. This step runs a script: `sudo apt-get update\nsudo apt-get install -y mkisofs\n`. The 3rd step is named `Build iso from script`. This step runs a script: `# Just a simple run to test the build script, no need to upload the generated iso!\necho \"TEST\" > config.yaml\ncurl -fsSL https://raw.githubusercontent.com/rancher/elemental/main/.github/elemental-iso-build -o elemental-iso-build\nchmod +x ./elemental-iso-build\n./elemental-iso-build config.yaml\n`. The 4th step is named `Check config was inserted`. This step runs a script: `ISO=$(find . -name \"elemental-*.iso\" -print)\n# Extract config and check against our config\nisoinfo -x /livecd-cloud-config.yaml -R -i $ISO > livecd-cloud-config.yaml\n# This checks that the files are the same content\ncmp config.yaml livecd-cloud-config.yaml\n`. The 5th step is named `Basic sanity checks for ISO`. This step runs a script: `ISO=$(find . -name \"elemental-*.iso\" -print)\n# Check it has eltorito\nisoinfo -d -i $ISO|grep -q Eltorito\n# check bootable flag\nisoinfo -d -i $ISO|grep -q bootable        \n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495878052faa2781b26e9", "level": "level5", "llm_response": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ignoreLabel: do-not-autoclose\n          rules: |\n            [\n              {\n                \"type\": \"title\",\n                \"regex\": \".*<(Source Name|short description)>*\",\n                \"message\": \"You did not fill out the description in the title\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n                \"message\": \"The acknowledgment section was not removed\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n                \"message\": \"The requested information was not filled out\"\n              }\n            ]\n```", "answer": "```yaml name: Issue closer\n\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autoclose issues\n        uses: arkon/issue-closer-action@v3.4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ignoreLabel: do-not-autoclose\n          rules: |\n            [\n              {\n                \"type\": \"title\",\n                \"regex\": \".*<(Source Name|short description)>*\",\n                \"message\": \"You did not fill out the description in the title\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n                \"message\": \"The acknowledgment section was not removed\"\n              },\n              {\n                \"type\": \"body\",\n                \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n                \"message\": \"The requested information was not filled out\"\n              }\n            ]\n```", "prompt": "Generate a GitHub Workflow named `Issue closer` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: an issue is opened, the title or body on an issue is edited or a closed issue is reopened. The workflow has one job. The job id of the 1st job is `autoclose`. This job will run on ubuntu-latest runner. The job `autoclose` has one step. The 1st step is named `Autoclose issues`. This step runs action `arkon/issue-closer-action` tagged as v3.4. The step defines 3 input parameters for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `ignoreLabel` is set to `do-not-autoclose` and `rules` is set to `[\n  {\n    \"type\": \"title\",\n    \"regex\": \".*<(Source Name|short description)>*\",\n    \"message\": \"You did not fill out the description in the title\"\n  },\n  {\n    \"type\": \"body\",\n    \"regex\": \".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*\",\n    \"message\": \"The acknowledgment section was not removed\"\n  },\n  {\n    \"type\": \"body\",\n    \"regex\": \".*\\\\* (Aniyomi version|Android version|Device|Name|Link|Extension version): \\\\?.*\",\n    \"message\": \"The requested information was not filled out\"\n  }\n]\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c495257843b61269a05b78", "level": "level5", "llm_response": "```yaml name: Flatpak dependency updates\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n        env:\n          GIT_AUTHOR_NAME: \"EasyEffects Bot\"\n          GIT_COMMITTER_NAME: \"EasyEffects Bot\"\n          GIT_AUTHOR_EMAIL: \"110548574+easyeffects-bot@users.noreply.github.com\"\n          GIT_COMMITTER_EMAIL: \"110548574+easyeffects-bot@users.noreply.github.com\"\n          EMAIL: \"110548574+easyeffects-bot@users.noreply.github.com\"\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n```", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```", "prompt": "Generate a GitHub Workflow named `Flatpak dependency updates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 am. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `flatpak-external-data-checker`. This job will run on ubuntu-20.04 runner. The job `flatpak-external-data-checker` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3.1.0. The step defines 2 input parameters for the action: `fetch-depth` is set to `0` and `persist-credentials` is set to `False`. The 2nd step is named ``. The step sets 6 environment variables to use: `GIT_AUTHOR_NAME` is set to `EasyEffects Bot`, `GIT_COMMITTER_NAME` is set to `EasyEffects Bot`, `GIT_AUTHOR_EMAIL` is set to `110548574+easyeffects-bot@users.noreply.github.com`, `GIT_COMMITTER_EMAIL` is set to `110548574+easyeffects-bot@users.noreply.github.com`, `EMAIL` is set to `110548574+easyeffects-bot@users.noreply.github.com` and `GITHUB_TOKEN` is set to `${{ secrets.EASYEFFECTS_BOT }}`. This step runs action `docker://ghcr.io/flathub/flatpak-external-data-checker:latest`.The step defines an input parameter for the action: `args` is set to `--update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.33544135680111364}, {"id": "63c494a27843b61269a02770", "level": "level5", "llm_response": "```yaml name: Doc Site\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency:\n      group: ci-${{ github.ref }}\n      cancel-in-progress: true\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm install --legacy-peer-deps\n          npm run docs:build\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          branch: gh-pages\n          folder: dist/site\n```", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Doc Site\n\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\njobs:\n  build-and-deploy-site:\n    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.\n        run: |\n          npm install --legacy-peer-deps\n          npm run docs:build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.2.5\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: dist/site # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `Doc Site` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build-and-deploy-site`. This job will run on ubuntu-latest runner. Only a single job using the ci-${{ github.ref }} concurrency group will run at a time. The job `build-and-deploy-site` has 3 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Install and Build \ud83d\udd27`. This step runs a script: `npm install --legacy-peer-deps\nnpm run docs:build\n`. The 3rd step is named `Deploy \ud83d\ude80`. This step runs action `JamesIves/github-pages-deploy-action` tagged as v4.2.5. The step defines 2 input parameters for the action: `branch` is set to `gh-pages` and `folder` is set to `dist/site`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.24486542594520405}, {"id": "63c495bf8052faa2781b3ef6", "level": "level5", "llm_response": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/mol_tree2_lib.yml'\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: hyoo-ru/mam_build@master2\n        with:\n          package: mol\n          modules: tree2/lib\n      - uses: JS-DevTools/npm-publish@v1\n        if: ${{ github.ref == 'refs/heads/master' }}\n        with:\n          token: ${{ secrets.NPM_AUTH_TOKEN }}\n          package: ./mol/tree2/lib/-/package.json\n```", "answer": "```yaml name: mol_tree2_lib\n\non:\n  workflow_dispatch:\n  push:\n    branches: \n      - master\n    paths:\n      - '.github/workflows/mol_tree2_lib.yml'\n      - 'tree2/**'\n  pull_request:\n  schedule:\n    - cron: \"0 7 * * *\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    \n    steps:\n    \n    - uses: hyoo-ru/mam_build@master2\n      with:\n        package: mol\n        modules: tree2/lib\n    \n    - uses: JS-DevTools/npm-publish@v1\n      if: ${{ github.ref == 'refs/heads/master' }}\n      with:\n        token: ${{ secrets.NPM_AUTH_TOKEN }}\n        package: ./mol/tree2/lib/-/package.json\n```", "prompt": "Generate a GitHub Workflow named `mol_tree2_lib` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. Only if at least one path of push event matches a pattern in the paths filter(.github/workflows/mol_tree2_lib.yml or tree2/**), the workflow runs. 3) there is activity relating to a pull request. 4) the scheduled time has come: at 07:00 am. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 2 steps. The 1st step is named ``. This step runs action `hyoo-ru/mam_build` from the master2 branch. The step defines 2 input parameters for the action: `package` is set to `mol` and `modules` is set to `tree2/lib`. The 2nd step is named ``. This step will run only if the condition(${{ github.ref == 'refs/heads/master' }}) is met. This step runs action `JS-DevTools/npm-publish` tagged as v1. The step defines 2 input parameters for the action: `token` is set to `${{ secrets.NPM_AUTH_TOKEN }}` and `package` is set to `./mol/tree2/lib/-/package.json`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8966567355675298}, {"id": "63c496361e33648075779191", "level": "level5", "llm_response": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Release Drafter` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. This job will run on ubuntu-latest runner. The job `update_release_draft` has one step. The 1st step is named ``. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `release-drafter/release-drafter` tagged as v5. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496561899db58864d23d2", "level": "level5", "llm_response": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n```", "answer": "```yaml name: Molecule - Ntp\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.ntp.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/ntp/**\n      - roles/ntp/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  ntp:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: ntp\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Ntp` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.ntp.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/ntp/** or roles/ntp/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `ntp`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `ntp`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4963f1e3364807577960f", "level": "level5", "llm_response": "```yaml name: \"Validate Gradle Wrapper\"\n\non:\n  pull_request:\n\njobs:\n  validation:\n    name: Validation\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "answer": "```yaml name: \"Validate Gradle Wrapper\"\n\non: [ pull_request ]\n\njobs:\n  validation:\n    name: \"Validation\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n```", "prompt": "Generate a GitHub Workflow named `Validate Gradle Wrapper` for a GitHub repository whose primary programming language is Kotlin. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Validation` and its job id is `validation`. This job will run on ubuntu-latest runner. The job `validation` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `gradle/wrapper-validation-action` tagged as v1. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6200132149733733}, {"id": "63c4969cb008460c1df157a0", "level": "level5", "llm_response": "```yaml name: Post-release\n\non:\n  release:\n    types: [published, edited]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: apexskier/github-release-commenter@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment-template: |\n            This is addressed by {release_link}.\n          label-template: |\n            released\n```", "answer": "```yaml name: Post-release\non:\n  release:\n    types:\n      - published\n      - edited\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: apexskier/github-release-commenter@v1\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment-template: This is addressed by {release_link}.\n          label-template: released\n```", "prompt": "Generate a GitHub Workflow named `Post-release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published or the details of a release, pre-release, or draft release are edited. The workflow has one job. The job id of the 1st job is `release`. This job will run on ubuntu-latest runner. The job `release` has one step. The 1st step is named ``. This step runs action `apexskier/github-release-commenter` tagged as v1. The step defines 3 input parameters for the action: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`, `comment-template` is set to `This is addressed by {release_link}.` and `label-template` is set to `released`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7170627148765869}, {"id": "63c495297843b61269a05d16", "level": "level5", "llm_response": "```yaml name: Lint\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 8\n    steps:\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - uses: actions/checkout@v3\n\n      - uses: technote-space/get-diff-action@v6.1.0\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n\n      - uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.47.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n```", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire cosmos-sdk repository\n# This workflow is run on every pull request and push to main\n# The `golangci` will pass without running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 8\n    steps:\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.0\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.47.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        if: env.GIT_DIFF\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The 1st job is named `golangci-lint` and its job id is `golangci`. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 8. The job `golangci` has 4 steps. The 1st step is named ``. This step runs action `actions/setup-go` tagged as v3. The step defines an input parameter for the action: `go-version` is set to `1.18`. The 2nd step is named ``. This step runs action `actions/checkout` tagged as v3. The 3rd step is named ``. This step runs action `technote-space/get-diff-action` tagged as v6.1.0. The step defines an input parameter for the action: `PATTERNS` is set to `**/**.go\ngo.mod\ngo.sum\n`. The 4th step is named ``. This step will run only if the condition(env.GIT_DIFF) is met. This step runs action `golangci/golangci-lint-action` tagged as v3.2.0. The step defines 3 input parameters for the action: `version` is set to `v1.47.2`, `args` is set to `--timeout 10m` and `github-token` is set to `${{ secrets.github_token }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9591894571091382}, {"id": "63c4951f7843b61269a0593e", "level": "level5", "llm_response": "```yaml name: goreleaser\non:\n  push:\n    tags:\n      - '*'\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - name: fetch tags\n        run: git fetch --tags --force\n      - uses: actions/setup-go@v3.3.0\n        with:\n          go-version: 1.19\n      - uses: goreleaser/goreleaser-action@v3.1.0\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release -f ci/.goreleaser.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: goreleaser\non:\n  push:\n    tags:\n      - \"*\"\n\npermissions:\n  contents: write\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n\n      - name: fetch tags\n        run: git fetch --tags --force\n\n      - uses: actions/setup-go@v3.3.0\n        with:\n          go-version: 1.19\n\n      - uses: goreleaser/goreleaser-action@v3.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release -f ci/.goreleaser.yml\n```", "prompt": "Generate a GitHub Workflow named `goreleaser` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches *. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `release`. This job will run on ubuntu-latest runner. The job `release` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3.1.0. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named `fetch tags`. This step runs a script: `git fetch --tags --force`. The 3rd step is named ``. This step runs action `actions/setup-go` tagged as v3.3.0. The step defines an input parameter for the action: `go-version` is set to `1.19`. The 4th step is named ``. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `goreleaser/goreleaser-action` tagged as v3.1.0. The step defines 3 input parameters for the action: `distribution` is set to `goreleaser`, `version` is set to `latest` and `args` is set to `release -f ci/.goreleaser.yml`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8891693086365811}, {"id": "63c4967e33b087f6bde2c5c1", "level": "level5", "llm_response": "```yaml name: Dependabot auto-merge\non: pull_request_target\npermissions:\n  pull-requests: write\n  contents: write\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n        id: metadata\n      - name: Enable auto-merge for Dependabot PRs\n        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor' }}\n        run: |\n          gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```", "answer": "```yaml ---\nname: Dependabot auto-merge\n\"on\": pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        if: >-\n          ${{\n          steps.metadata.outputs.update-type == 'version-update:semver-patch' ||\n          steps.metadata.outputs.update-type == 'version-update:semver-minor'\n          }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```", "prompt": "Generate a GitHub Workflow named `Dependabot auto-merge` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `pull-requests` scope and write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `dependabot`. This job will run only if the condition(${{ github.actor == 'dependabot[bot]' }}) is met. This job will run on ubuntu-latest runner. The job `dependabot` has 2 steps. The 1st step is named `Dependabot metadata` and its id is `metadata`. This step runs action `dependabot/fetch-metadata` tagged as v1.3.4. The step defines an input parameter for the action: `github-token` is set to `${{ secrets.GITHUB_TOKEN }}`. The 2nd step is named `Enable auto-merge for Dependabot PRs`. This step will run only if the condition(${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor' }}) is met. The step sets 2 environment variables to use: `PR_URL` is set to `${{github.event.pull_request.html_url}}` and `GITHUB_TOKEN` is set to `${{secrets.GITHUB_TOKEN}}`. This step runs a script: `gh pr merge --auto --merge \"$PR_URL\"`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.758903849474345}, {"id": "63c496326fc19abdf9c9a7c5", "level": "level5", "llm_response": "```yaml name: Test CI\n\non:\n  pull_request:\n  push:\n    paths:\n      - 'lua/**'\n      - 'test/**'\n      - '.github/**'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    container: alpine\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install requirements\n        run: |\n          apk update && apk upgrade \n          apk add make bash coreutils neovim lua5.4\n          # links lua5.4 -> lua\n          ln -sv /usr/bin/lua5.4           /usr/bin/lua\n          ln -sv /usr/lib/lua5.4/liblua.so /usr/lib/liblua5.4.so\n      - name: Install Tangerine\n        run: make install\n      - name: Build Runner\n        run: make runner\n      - name: Run Tests\n        run: yes | make test\n```", "answer": "```yaml name: Test CI\n\non: \n  pull_request:\n  push:\n    paths:\n      - lua/**\n      - test/**\n      - .github/**\n\njobs:\n  test:\n    runs-on:   ubuntu-latest\n    container: alpine\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Install requirements\n      run: |\n        apk update && apk upgrade \n        apk add make bash coreutils neovim lua5.4\n        # links lua5.4 -> lua\n        ln -sv /usr/bin/lua5.4           /usr/bin/lua\n        ln -sv /usr/lib/lua5.4/liblua.so /usr/lib/liblua5.4.so\n\n    - name: Install Tangerine\n      run:  make install\n\n    - name: Build Runner\n      run:  make runner\n\n    - name: Run Tests\n      run:  yes | make test\n```", "prompt": "Generate a GitHub Workflow named `Test CI` for a GitHub repository whose primary programming language is Fennel. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) Only if at least one path of push event matches a pattern in the paths filter(lua/**, test/** or .github/**), the workflow runs. The workflow has one job. The job id of the 1st job is `test`. This job will run on ubuntu-latest runner. The job creates a Docker container that uses `alpine` image. The job `test` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Install requirements`. This step runs a script: `apk update && apk upgrade \napk add make bash coreutils neovim lua5.4\n# links lua5.4 -> lua\nln -sv /usr/bin/lua5.4           /usr/bin/lua\nln -sv /usr/lib/lua5.4/liblua.so /usr/lib/liblua5.4.so\n`. The 3rd step is named `Install Tangerine`. This step runs a script: `make install`. The 4th step is named `Build Runner`. This step runs a script: `make runner`. The 5th step is named `Run Tests`. This step runs a script: `yes | make test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9140579157232533}, {"id": "63c495207843b61269a059a2", "level": "level5", "llm_response": "```yaml name: Labeler\n\non: [pull_request]\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler/blob/master/README.md\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. This job will run on ubuntu-latest runner. The job `label` has one step. The 1st step is named ``. This step runs action `actions/labeler` tagged as v4. The step defines an input parameter for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8193228857188178}, {"id": "63c494378052faa2781a9e70", "level": "level5", "llm_response": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Protobuf format\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          clang-format-version: 14\n\n      - name: Lint shell, Docker and protobuf\n        uses: github/super-linter/slim@v4\n        with:\n          VALIDATE_ALL_CODEBASE: false\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          VALIDATE_SHELL_SHFMT: true\n```", "answer": "```yaml name: Miscellaneous Lint\n\non:\n  push:\n    branches:\n      - main\n      - devnet\n  pull_request:\n    branches: [ main ]\n    types: [opened, synchronize, reopened, ready_for_review]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          # Full git history isn't needed to get a proper list of changed files within `super-linter`\n          fetch-depth: 0\n\n      - name: Protobuf format\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          clang-format-version: '14'\n  \n      - name: Lint shell, Docker and protobuf\n        uses: github/super-linter/slim@v4\n        env:\n          VALIDATE_ALL_CODEBASE: false\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Select file types to lint. Python and Rust linters are configured separately.\n          VALIDATE_SHELL_SHFMT: true\n          #\n          # disable hadolint \n          # https://github.com/hadolint/hadolint/issues/821\n          # VALIDATE_DOCKERFILE_HADOLINT: true\n          # DOCKERFILE_HADOLINT_FILE_NAME: .github/config/.hadolint.yaml\n          #\n          # Enable after fixing proto lint issues.\n          # VALIDATE_PROTOBUF: true\n```", "prompt": "Generate a GitHub Workflow named `Miscellaneous Lint` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main or a branch named devnet. 2) a pull request is created, a pull request's head branch is updated, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `lint`. This job will run on ubuntu-latest runner. The job `lint` has 3 steps. The 1st step is named `Checkout Code`. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named `Protobuf format`. This step runs action `jidicula/clang-format-action` tagged as v4.9.0. The step defines an input parameter for the action: `clang-format-version` is set to `14`. The 3rd step is named `Lint shell, Docker and protobuf`. The step sets 4 environment variables to use: `VALIDATE_ALL_CODEBASE` is set to `False`, `DEFAULT_BRANCH` is set to `main`, `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}` and `VALIDATE_SHELL_SHFMT` is set to `True`. This step runs action `github/super-linter/slim` tagged as v4. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7199207558309185}, {"id": "63c496561899db58864d23b6", "level": "level5", "llm_response": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "answer": "```yaml name: Molecule - Docker\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.docker.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/docker/**\n      - roles/docker/**\n      # Plugins\n      - plugins/filter/json.py\n      - plugins/filter/staten.py\n      - plugins/lookup/docker_applications.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  docker:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: docker\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Docker` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.docker.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/docker/**, roles/docker/**, plugins/filter/json.py, plugins/filter/staten.py or plugins/lookup/docker_applications.py), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `docker`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `docker`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496851899db58864d36f3", "level": "level5", "llm_response": "```yaml name: Test with Pre-commit\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python-version: [ 3.10 ]\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pre-commit\n        pre-commit install-hooks\n    - name: Lint with pre-commit\n      run: |\n        pre-commit run --all-files\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Test with Pre-commit\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n          pre-commit install-hooks\n      - name: Lint with pre-commit\n        run: pre-commit run --all-files\n```", "prompt": "Generate a GitHub Workflow named `Test with Pre-commit` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `python-version` has one value: 3.10. The job `build` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Set up Python ${{ matrix.python-version }}`. This step runs action `actions/setup-python` tagged as v4. The step defines an input parameter for the action: `python-version` is set to `${{ matrix.python-version }}`. The 3rd step is named `Install dependencies`. This step runs a script: `python -m pip install --upgrade pip\npip install pre-commit\npre-commit install-hooks\n`. The 4th step is named `Lint with pre-commit`. This step runs a script: `pre-commit run --all-files`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7697822203288648}, {"id": "63c495e58052faa2781b4fae", "level": "level5", "llm_response": "```yaml name: Self-assign\n\non:\n  issue_comment:\n    types:\n      - created\n\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: (github.event.comment.body == '#take' ||\n      github.event.comment.body == '#self-assign') &&\n      (!github.event.issue.pull_request)\n    steps:\n      - run: echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\n        run: curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n```", "answer": "```yaml # Allow users to automatically tag themselves to issues\n\nname: Self-assign\non:\n  issue_comment:\n    types: created\njobs:\n  one:\n    runs-on: ubuntu-latest\n    if: >-\n      (github.event.comment.body == '#take' ||\n       github.event.comment.body == '#self-assign') &&\n       (!github.event.issue.pull_request)\n    steps:\n      - run: |\n          echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\n          curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n```", "prompt": "Generate a GitHub Workflow named `Self-assign` for a GitHub repository whose primary programming language is Jupyter Notebook. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `one`. This job will run only if the condition((github.event.comment.body == '#take' ||\n github.event.comment.body == '#self-assign') &&\n (!github.event.issue.pull_request)) is met. This job will run on ubuntu-latest runner. The job `one` has one step. The 1st step is named ``. This step runs a script: `echo \"Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}\"\ncurl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees\n`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 16: mapping values are not allowed in this context", "filepath": "../tmp/test.yml", "line": 16, "column": 0, "kind": "syntax-check", "snippet": "        run: curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -d '{\"assignees\": [\"${{ github.event.comment.user.login }}\"]}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees", "end_column": 0}]}, "bleu_score": 0.8344354329516301}, {"id": "63c496561899db58864d23c2", "level": "level5", "llm_response": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n```", "answer": "```yaml name: Molecule - Java\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.java.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/java/**\n      - roles/java/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  java:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: java\n```", "prompt": "Generate a GitHub Workflow named `Molecule - Java` for a GitHub repository whose primary programming language is Jinja. This workflow will be triggered by multiple events: 1) Only if at least one path of pull_request event matches a pattern in the paths filter(.github/workflows/molecule.java.yml, .config/molecule/config.yml, molecule/Dockerfile.*, molecule/java/** or roles/java/**), the workflow runs. 2) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, this input represents run with tmate debugging, it is optional and its default value is False. The workflow has one job. The job id of the 1st job is `java`. This job will call a reusable workflow located at `./.github/workflows/molecule.yaml`. The job will pass 2 inputs to the called workflow: the input `debug` is `${{ inputs.debug == true }}` and the input `scenario` is `java`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4957c8052faa2781b2239", "level": "level5", "llm_response": "```yaml name: Add Issues/PRs to TF Provider DevEx team board\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: Add Content to project\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set Issue to 'Priority = Triage Next'\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'issues'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: hashicorp\n          project_id: 99\n          resource_node_id: ${{ github.event.issue.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n      - name: Set Pull Request to 'Priority = Triage Next'\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'pull_request_target'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: hashicorp\n          project_id: 99\n          resource_node_id: ${{ github.event.pull_request.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n```", "answer": "```yaml # Based on https://github.com/leonsteinhaeuser/project-beta-automations\n\nname: \"Add Issues/PRs to TF Provider DevEx team board\"\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request_target:\n    # NOTE: The way content is added to project board is equivalent to an \"upsert\".\n    # Calling it multiple times will be idempotent.\n    #\n    # See https://securitylab.github.com/research/github-actions-preventing-pwn-requests/\n    #\u00a0to see the reasoning behind using `pull_request_target` instead of `pull_request`\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  add-content-to-project:\n    name: \"Add Content to project\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Set Issue to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'issues'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.issue.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n      - name: \"Set Pull Request to 'Priority = Triage Next'\"\n        uses: leonsteinhaeuser/project-beta-automations@v2.0.1\n        if: github.event_name == 'pull_request_target'\n        with:\n          gh_token: ${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}\n          organization: \"hashicorp\"\n          project_id: 99      #< https://github.com/orgs/hashicorp/projects/99\n          resource_node_id: ${{ github.event.pull_request.node_id }}\n          operation_mode: custom_field\n          custom_field_values: '[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]'\n```", "prompt": "Generate a GitHub Workflow named `Add Issues/PRs to TF Provider DevEx team board` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) an issue is opened or a closed issue is reopened. 2) a pull request is created, a previously closed pull request is reopened or a draft pull request is marked as ready for review. The workflow has one job. The 1st job is named `Add Content to project` and its job id is `add-content-to-project`. This job will run on ubuntu-latest runner. The job `add-content-to-project` has 2 steps. The 1st step is named `Set Issue to 'Priority = Triage Next'`. This step will run only if the condition(github.event_name == 'issues') is met. This step runs action `leonsteinhaeuser/project-beta-automations` tagged as v2.0.1. The step defines 6 input parameters for the action: `gh_token` is set to `${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}`, `organization` is set to `hashicorp`, `project_id` is set to `99`, `resource_node_id` is set to `${{ github.event.issue.node_id }}`, `operation_mode` is set to `custom_field` and `custom_field_values` is set to `[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]`. The 2nd step is named `Set Pull Request to 'Priority = Triage Next'`. This step will run only if the condition(github.event_name == 'pull_request_target') is met. This step runs action `leonsteinhaeuser/project-beta-automations` tagged as v2.0.1. The step defines 6 input parameters for the action: `gh_token` is set to `${{ secrets.TF_DEVEX_PROJECT_GITHUB_TOKEN }}`, `organization` is set to `hashicorp`, `project_id` is set to `99`, `resource_node_id` is set to `${{ github.event.pull_request.node_id }}`, `operation_mode` is set to `custom_field` and `custom_field_values` is set to `[{\\\"name\\\":\\\"Priority\\\",\\\"type\\\":\\\"single_select\\\",\\\"value\\\":\\\"Triage Next\\\"}]`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6780966658189257}, {"id": "63c49697b008460c1df15590", "level": "level5", "llm_response": "```yaml name: Release\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Build the file\n        run: |\n          cd /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card\n          npm install\n          npm run build\n      - name: Upload zip to release\n        uses: svenstaro/upload-release-action@v1-release\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card/dist/thermostat-dark-card.js\n          asset_name: thermostat-dark-card.js\n          tag: ${{ github.ref }}\n          overwrite: true\n      - name: HACS Action\n        uses: hacs/action@main\n        with:\n          category: plugin\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Prepare release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      # Build\n      - name: Build the file\n        run: |\n          cd /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card\n          npm install\n          npm run build\n\n      # Upload build file to the releas as an asset.\n      - name: Upload zip to release\n        uses: svenstaro/upload-release-action@v1-release\n\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card/dist/thermostat-dark-card.js\n          asset_name: thermostat-dark-card.js\n          tag: ${{ github.ref }}\n          overwrite: true\n      - name: HACS Action\n        uses: \"hacs/action@main\"\n        with:\n          category: \"plugin\"\n```", "prompt": "Generate a GitHub Workflow named `Release` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow has one job. The 1st job is named `Prepare release` and its job id is `release`. This job will run on ubuntu-latest runner. The job `release` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v1. The 2nd step is named `Build the file`. This step runs a script: `cd /home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card\nnpm install\nnpm run build\n`. The 3rd step is named `Upload zip to release`. This step runs action `svenstaro/upload-release-action` from the v1-release branch. The step defines 5 input parameters for the action: `repo_token` is set to `${{ secrets.GITHUB_TOKEN }}`, `file` is set to `/home/runner/work/lovelace-thermostat-dark-card/lovelace-thermostat-dark-card/dist/thermostat-dark-card.js`, `asset_name` is set to `thermostat-dark-card.js`, `tag` is set to `${{ github.ref }}` and `overwrite` is set to `True`. The 4th step is named `HACS Action`. This step runs action `hacs/action` from the main branch. The step defines an input parameter for the action: `category` is set to `plugin`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9467991323022065}, {"id": "63c494b87843b61269a03054", "level": "level5", "llm_response": "```yaml name: autoupdate\non:\n  push:\n    branches:\n      - 'version-bump/**'\n      - 'dependabot/**'\n      - 'bot/**'\n      - 'all-contributors/**'\n\njobs:\n  autoupdate-for-bot:\n    name: Autoupdate autoapproved PR created in the upstream\n    runs-on: ubuntu-latest\n    if: startsWith(github.repository, 'asyncapi/')\n    steps:\n      - name: Autoupdating\n        uses: docker://chinthakagodawita/autoupdate-action:v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_BOT_EVE }}\n          PR_FILTER: 'labelled'\n          PR_LABELS: 'autoupdate'\n          PR_READY_STATE: 'ready_for_review'\n          MERGE_CONFLICT_ACTION: 'ignore'\n```", "answer": "```yaml # This action is centrally managed in https://github.com/asyncapi/.github/\r\n# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in above mentioned repo\r\n\r\n# This workflow is designed to work with:\r\n# - autoapprove and automerge workflows for dependabot and asyncapibot.\r\n# - special release branches that we from time to time create in upstream repos. If we open up PRs for them from the very beginning of the release, the release branch will constantly update with new things from the destination branch they are opened against\r\n\r\n# It uses GitHub Action that auto-updates pull requests branches, whenever changes are pushed to their destination branch.\r\n# Autoupdating to latest destination branch works only in the context of upstream repo and not forks\r\n\r\nname: autoupdate\r\n\r\non:\r\n  push:\r\n    branches-ignore:  \r\n      - 'version-bump/**'\r\n      - 'dependabot/**'\r\n      - 'bot/**'\r\n      - 'all-contributors/**'\r\n\r\njobs:\r\n  autoupdate-for-bot:\r\n    if: startsWith(github.repository, 'asyncapi/')\r\n    name: Autoupdate autoapproved PR created in the upstream\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Autoupdating\r\n        uses: docker://chinthakagodawita/autoupdate-action:v1\r\n        env:\r\n          GITHUB_TOKEN: '${{ secrets.GH_TOKEN_BOT_EVE }}'\r\n          PR_FILTER: \"labelled\"\r\n          PR_LABELS: \"autoupdate\"\r\n          PR_READY_STATE: \"ready_for_review\"\r\n          MERGE_CONFLICT_ACTION: \"ignore\"\r\n```", "prompt": "Generate a GitHub Workflow named `autoupdate` for a GitHub repository whose primary programming language is null. This workflow will be triggered by an event: The workflow would run whenever there is a push event unless the push event is to: a branch whose name matches version-bump/**, a branch whose name matches dependabot/**, a branch whose name matches bot/** or a branch whose name matches all-contributors/**. The workflow has one job. The 1st job is named `Autoupdate autoapproved PR created in the upstream` and its job id is `autoupdate-for-bot`. This job will run only if the condition(startsWith(github.repository, 'asyncapi/')) is met. This job will run on ubuntu-latest runner. The job `autoupdate-for-bot` has one step. The 1st step is named `Autoupdating`. The step sets 5 environment variables to use: `GITHUB_TOKEN` is set to `${{ secrets.GH_TOKEN_BOT_EVE }}`, `PR_FILTER` is set to `labelled`, `PR_LABELS` is set to `autoupdate`, `PR_READY_STATE` is set to `ready_for_review` and `MERGE_CONFLICT_ACTION` is set to `ignore`. This step runs action `docker://chinthakagodawita/autoupdate-action:v1`.", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6118677914054159}, {"id": "63c494877843b61269a01c1e", "level": "level5", "llm_response": "```yaml name: Prepare Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Push Tag\n        run: |\n          echo \"version is ${{ github.event.inputs.version }}\"\n          git config user.name \"GitHub Actions Bot\"\n          git config user.email \"<>\"\n          sed -i \"/is_master/d\" fxmanifest.lua\n          sed -i \"/^version/c\\version '${{ github.event.inputs.version }}'\" fxmanifest.lua\n          git add .\n          git commit -m \"${{ github.event.inputs.version }}\"\n          git tag -a ${{ github.event.inputs.version }} -m \"Version ${{ github.event.inputs.version }}\"\n          sed -i \"/^version/ais_master 'yes'\" fxmanifest.lua\n          git add .\n          git commit -m \"Update Version\"\n          git push --follow-tags\n```", "answer": "```yaml \nname: Prepare Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version Number'\n        required: true\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Push Tag\n      run: | \n            echo \"version is ${{ github.event.inputs.version }}\"\n            git config user.name \"GitHub Actions Bot\"\n            git config user.email \"<>\"\n            sed -i \"/is_master/d\" fxmanifest.lua\n            sed -i \"/^version/c\\version '${{ github.event.inputs.version }}'\" fxmanifest.lua\n            git add .\n            git commit -m \"${{ github.event.inputs.version }}\"\n            git tag -a ${{ github.event.inputs.version }} -m \"Version ${{ github.event.inputs.version }}\"\n            sed -i \"/^version/ais_master 'yes'\" fxmanifest.lua\n            git add .\n            git commit -m \"Update Version\"\n            git push --follow-tags\n```", "prompt": "Generate a GitHub Workflow named `Prepare Release` for a GitHub repository whose primary programming language is Lua. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: version-this input represents version number and it must be supplied. The workflow has one job. The job id of the 1st job is `create`. This job will run on ubuntu-latest runner. The job `create` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` from the master branch. The 2nd step is named `Push Tag`. This step runs a script: `echo \"version is ${{ github.event.inputs.version }}\"\ngit config user.name \"GitHub Actions Bot\"\ngit config user.email \"<>\"\nsed -i \"/is_master/d\" fxmanifest.lua\nsed -i \"/^version/c\\version '${{ github.event.inputs.version }}'\" fxmanifest.lua\ngit add .\ngit commit -m \"${{ github.event.inputs.version }}\"\ngit tag -a ${{ github.event.inputs.version }} -m \"Version ${{ github.event.inputs.version }}\"\nsed -i \"/^version/ais_master 'yes'\" fxmanifest.lua\ngit add .\ngit commit -m \"Update Version\"\ngit push --follow-tags\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4966d33b087f6bde2bebf", "level": "level5", "llm_response": "```yaml name: \"CodeQL\"\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 5 * * 0'\n\njobs:\n  analyse:\n    name: Analyse\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - run: git checkout HEAD^2\n        if: ${{ github.event_name == 'pull_request' }}\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 5 * * 0'\n\njobs:\n  analyse:\n    name: Analyse\n    runs-on: ubuntu-20.04\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      # Override language selection by uncommenting this and choosing your languages\n      with:\n        languages: go\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "prompt": "Generate a GitHub Workflow named `CodeQL` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. 3) The workflow would run whenever there is a pull_request event targeting: a branch named main. 4) the scheduled time has come: at 05:00 am, only on sunday. The workflow has one job. The 1st job is named `Analyse` and its job id is `analyse`. This job will run on ubuntu-20.04 runner. The job `analyse` has 5 steps. The 1st step is named `Checkout repository`. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `2`. The 2nd step is named ``. This step will run only if the condition(${{ github.event_name == 'pull_request' }}) is met. This step runs a script: `git checkout HEAD^2`. The 3rd step is named `Initialize CodeQL`. This step runs action `github/codeql-action/init` tagged as v2. The step defines an input parameter for the action: `languages` is set to `go`. The 4th step is named `Autobuild`. This step runs action `github/codeql-action/autobuild` tagged as v2. The 5th step is named `Perform CodeQL Analysis`. This step runs action `github/codeql-action/analyze` tagged as v2. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496581e3364807577a144", "level": "level5", "llm_response": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch:\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          age: 0 days\n          skip-tags: true\n          skip-recent: 0\n```", "answer": "```yaml name: Remove ALL artifacts\n\non:\n  workflow_dispatch: # only manually\n\njobs:\n  remove-all-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n      - name: Remove ALL artifacts\n        uses: c-hive/gha-remove-artifacts@v1\n        with:\n          age: '0 days'\n          skip-tags: true\n          skip-recent: 0\n```", "prompt": "Generate a GitHub Workflow named `Remove ALL artifacts` for a GitHub repository whose primary programming language is C. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `remove-all-artifacts`. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 10. The job `remove-all-artifacts` has one step. The 1st step is named `Remove ALL artifacts`. This step runs action `c-hive/gha-remove-artifacts` tagged as v1. The step defines 3 input parameters for the action: `age` is set to `0 days`, `skip-tags` is set to `True` and `skip-recent` is set to `0`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7205343431070071}, {"id": "63c493ea8052faa2781a7e17", "level": "level5", "llm_response": "```yaml name: master\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        rust:\n          - 1.31.0\n          - stable\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ matrix.rust }}\n      - run: cargo build\n      - run: ./ci/test_full.sh\n```", "answer": "```yaml name: master\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * 0' # 00:00 Sunday\n\njobs:\n\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [1.31.0, stable]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: ${{ matrix.rust }}\n      - run: cargo build\n      - run: ./ci/test_full.sh\n```", "prompt": "Generate a GitHub Workflow named `master` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The 1st job is named `Test` and its job id is `test`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `rust` has 2 values: 1.31.0 and stable. The job `test` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `dtolnay/rust-toolchain` from the master branch. The step defines an input parameter for the action: `toolchain` is set to `${{ matrix.rust }}`. The 3rd step is named ``. This step runs a script: `cargo build`. The 4th step is named ``. This step runs a script: `./ci/test_full.sh`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.779586876380505}, {"id": "63c495668052faa2781b18dd", "level": "level5", "llm_response": "```yaml name: release management\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release management\non:\n  push:\n    branches: [master]\n\njobs:\n  update-draft-release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toolmantim/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `release management` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `update-draft-release`. This job will run on ubuntu-latest runner. The job `update-draft-release` has one step. The 1st step is named ``. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `toolmantim/release-drafter` tagged as v5. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8137489370974955}, {"id": "63c494608052faa2781aac1c", "level": "level5", "llm_response": "```yaml name: ASF-ci\non:\n  push:\n  pull_request:\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  main:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        configuration: [Debug, Release]\n        os: [macos-latest, ubuntu-latest, windows-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n        with:\n          submodules: recursive\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3.0.2\n        with:\n          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n      - name: Verify .NET Core\n        run: dotnet --info\n      - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n        run: dotnet build -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n      - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n        run: dotnet test ArchiSteamFarm.Tests -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n      - name: Upload latest strings for translation on Crowdin\n        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.configuration == 'Release' && startsWith(matrix.os, 'ubuntu-') }}\n        uses: crowdin/github-action@1.4.16\n        with:\n          crowdin_branch_name: main\n          config: .github/crowdin.yml\n          project_id: ${{ secrets.ASF_CROWDIN_PROJECT_ID }}\n          token: ${{ secrets.ASF_CROWDIN_API_TOKEN }}\n```", "answer": "```yaml name: ASF-ci\n\non: [push, pull_request]\n\nenv:\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n  DOTNET_NOLOGO: true\n  DOTNET_SDK_VERSION: 6.0.x\n\njobs:\n  main:\n    strategy:\n      fail-fast: false\n      matrix:\n        configuration: [Debug, Release]\n        os: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n      with:\n        submodules: recursive\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}\n\n    - name: Verify .NET Core\n      run: dotnet --info\n\n    - name: Build ${{ matrix.configuration }} ArchiSteamFarm and other projects\n      run: dotnet build -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Run ${{ matrix.configuration }} ArchiSteamFarm.Tests\n      run: dotnet test ArchiSteamFarm.Tests -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo\n\n    - name: Upload latest strings for translation on Crowdin\n      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.configuration == 'Release' && startsWith(matrix.os, 'ubuntu-') }}\n      uses: crowdin/github-action@1.4.16\n      with:\n        crowdin_branch_name: main\n        config: '.github/crowdin.yml'\n        project_id: ${{ secrets.ASF_CROWDIN_PROJECT_ID }}\n        token: ${{ secrets.ASF_CROWDIN_API_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `ASF-ci` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by multiple events: 1) a commit or tag is pushed, or a repository is cloned. 2) there is activity relating to a pull request. The workflow sets 3 environment variables to use: `DOTNET_CLI_TELEMETRY_OPTOUT` is set to `True`, `DOTNET_NOLOGO` is set to `True` and `DOTNET_SDK_VERSION` is set to `6.0.x`. The workflow has one job. The job id of the 1st job is `main`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `configuration` has 2 values: Debug and Release. The variable `os` has 3 values: macos-latest, ubuntu-latest and windows-latest. The job `main` has 6 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` tagged as v3.1.0. The step defines an input parameter for the action: `submodules` is set to `recursive`. The 2nd step is named `Setup .NET Core`. This step runs action `actions/setup-dotnet` tagged as v3.0.2. The step defines an input parameter for the action: `dotnet-version` is set to `${{ env.DOTNET_SDK_VERSION }}`. The 3rd step is named `Verify .NET Core`. This step runs a script: `dotnet --info`. The 4th step is named `Build ${{ matrix.configuration }} ArchiSteamFarm and other projects`. This step runs a script: `dotnet build -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo`. The 5th step is named `Run ${{ matrix.configuration }} ArchiSteamFarm.Tests`. This step runs a script: `dotnet test ArchiSteamFarm.Tests -c \"${{ matrix.configuration }}\" -p:ContinuousIntegrationBuild=true -p:UseAppHost=false --nologo`. The 6th step is named `Upload latest strings for translation on Crowdin`. This step will run only if the condition(${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.configuration == 'Release' && startsWith(matrix.os, 'ubuntu-') }}) is met. This step runs action `crowdin/github-action` tagged as 1.4.16. The step defines 4 input parameters for the action: `crowdin_branch_name` is set to `main`, `config` is set to `.github/crowdin.yml`, `project_id` is set to `${{ secrets.ASF_CROWDIN_PROJECT_ID }}` and `token` is set to `${{ secrets.ASF_CROWDIN_API_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9015360719782223}, {"id": "63c494247843b612699ff48a", "level": "level5", "llm_response": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n      - name: Build without default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n      - name: Build with default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n```", "answer": "```yaml name: Rust\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@master\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n      - name: Check Cargo availability\n        run: cargo --version\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n      - name: Build without default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n      - name: Build with default features\n        run: |\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n```", "prompt": "Generate a GitHub Workflow named `Rust` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` from the master branch. The 2nd step is named ``. This step runs action `hecrj/setup-rust-action` from the master branch. The step defines an input parameter for the action: `rust-version` is set to `stable`. The 3rd step is named `Check Cargo availability`. This step runs a script: `cargo --version`. The 4th step is named `Check Rustup default toolchain`. This step runs a script: `rustup default | grep stable`. The 5th step is named `Build without default features`. This step runs a script: `env RUSTFLAGS=\"-C link-arg=-s\" cargo check --no-default-features\n`. The 6th step is named `Build with default features`. This step runs a script: `env RUSTFLAGS=\"-C link-arg=-s\" cargo check\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494fd7843b61269a04a9b", "level": "level5", "llm_response": "```yaml name: Automatic Releases\n\non:\n  milestone:\n    types: [closed]\n\njobs:\n  release:\n    name: Git tag, release & create merge-up PR\n    uses: doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0\n    secrets:\n      GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}\n      GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}\n      ORGANIZATION_ADMIN_TOKEN: ${{ secrets.ORGANIZATION_ADMIN_TOKEN }}\n      SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}\n```", "answer": "```yaml name: \"Automatic Releases\"\n\non:\n  milestone:\n    types:\n      - \"closed\"\n\njobs:\n  release:\n    name: \"Git tag, release & create merge-up PR\"\n    uses: \"doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0\"\n    secrets:\n      GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}\n      GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}\n      ORGANIZATION_ADMIN_TOKEN: ${{ secrets.ORGANIZATION_ADMIN_TOKEN }}\n      SIGNING_SECRET_KEY: ${{ secrets.SIGNING_SECRET_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `Automatic Releases` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: a milestone is closed. The workflow has one job. The 1st job is named `Git tag, release & create merge-up PR` and its job id is `release`. This job will call a reusable workflow located at `doctrine/.github/.github/workflows/release-on-milestone-closed.yml@1.5.0`. The job will pass 4 secrets to the called workflow: the secret `GIT_AUTHOR_EMAIL` is `${{ secrets.GIT_AUTHOR_EMAIL }}`, the secret `GIT_AUTHOR_NAME` is `${{ secrets.GIT_AUTHOR_NAME }}`, the secret `ORGANIZATION_ADMIN_TOKEN` is `${{ secrets.ORGANIZATION_ADMIN_TOKEN }}` and the secret `SIGNING_SECRET_KEY` is `${{ secrets.SIGNING_SECRET_KEY }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6179680651749242}, {"id": "63c4957d8052faa2781b22ad", "level": "level5", "llm_response": "```yaml name: nix-build\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - release-v*\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v17\n      - uses: cachix/cachix-action@v10\n        with:\n          name: centrifuge-chain\n          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}\n      - name: Build centrifuge-chain\n        run: nix build --no-allow-dirty -L\n```", "answer": "```yaml name: nix-build\non:\n  pull_request:\n  push:\n    branches: [main, 'release-v**']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Nix Flakes doesn't work on shallow clones\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v17\n        with:\n          install_url: https://releases.nixos.org/nix/nix-2.10.3/install\n      - uses: cachix/cachix-action@v10\n        with:\n          name: centrifuge-chain\n          authToken: \"${{ secrets.CACHIX_AUTH_TOKEN }}\"\n      - name: Build centrifuge-chain\n        run: nix build --no-allow-dirty -L```", "prompt": "Generate a GitHub Workflow named `nix-build` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main or a branch whose name matches release-v**. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named ``. This step runs action `cachix/install-nix-action` tagged as v17. The step defines an input parameter for the action: `install_url` is set to `https://releases.nixos.org/nix/nix-2.10.3/install`. The 3rd step is named ``. This step runs action `cachix/cachix-action` tagged as v10. The step defines 2 input parameters for the action: `name` is set to `centrifuge-chain` and `authToken` is set to `${{ secrets.CACHIX_AUTH_TOKEN }}`. The 4th step is named `Build centrifuge-chain`. This step runs a script: `nix build --no-allow-dirty -L`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7033799324824432}, {"id": "63c496411e3364807577968e", "level": "level5", "llm_response": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened, transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n      - name: Set Team\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN_PROJECT }}\n        run: |\n          gh api graphql -f query='\n          mutation(\n              $project: ID!\n              $item: ID!\n              $status_field: ID!\n              $status_value: String!\n          )  {\n          updateProjectV2ItemFieldValue(\n            input: {\n             projectId: $project\n              itemId: $item\n              fieldId: $status_field\n              value: { \n                singleSelectOptionId: $status_value\n                }\n            }\n          ) {\n            projectV2Item {\n              id\n            }\n          }\n          }' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent\n```", "answer": "```yaml name: Add to project\n\non:\n  issues:\n    types: [opened,transferred]\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        id: add_project\n        with:\n          project-url: ${{ secrets.PROJECT_PLANNING }}\n          github-token: ${{ secrets.BOT_TOKEN_PROJECT }}\n      - name: Set Team\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN_PROJECT }}\n        run: |\n          gh api graphql -f query='\n          mutation(\n              $project: ID!\n              $item: ID!\n              $status_field: ID!\n              $status_value: String!\n            )  {\n            updateProjectV2ItemFieldValue(\n              input: {\n               projectId: $project\n                itemId: $item\n                fieldId: $status_field\n                value: { \n                  singleSelectOptionId: $status_value\n                  }\n              }\n            ) {\n              projectV2Item {\n                id\n              }\n            }\n          }' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent```", "prompt": "Generate a GitHub Workflow named `Add to project` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: an issue is opened or an issue is transferred to another repository. The workflow has one job. The 1st job is named `Add issue to project` and its job id is `add-to-project`. This job will run on ubuntu-latest runner. The job `add-to-project` has 2 steps. The 1st step is named `` and its id is `add_project`. This step runs action `actions/add-to-project` from the main branch. The step defines 2 input parameters for the action: `project-url` is set to `${{ secrets.PROJECT_PLANNING }}` and `github-token` is set to `${{ secrets.BOT_TOKEN_PROJECT }}`. The 2nd step is named `Set Team`. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.BOT_TOKEN_PROJECT }}`. This step runs a script: `gh api graphql -f query='\nmutation(\n    $project: ID!\n    $item: ID!\n    $status_field: ID!\n    $status_value: String!\n  )  {\n  updateProjectV2ItemFieldValue(\n    input: {\n     projectId: $project\n      itemId: $item\n      fieldId: $status_field\n      value: { \n        singleSelectOptionId: $status_value\n        }\n    }\n  ) {\n    projectV2Item {\n      id\n    }\n  }\n}' -f project=${{ secrets.PROJECT_PLANNING_ID }} -f item=${{ steps.add_project.outputs.itemId }} -f status_field=${{ secrets.PLANNING_TEAM_FIELD_ID }} -f status_value=ed46988b --silent`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9635165832749849}, {"id": "63c496861e3364807577b319", "level": "level5", "llm_response": "```yaml name: documentation\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    outputs:\n      should_skip: ${{ steps.skip_check.outputs.should_skip }}\n    steps:\n      - uses: fkirc/skip-duplicate-actions@master\n        id: skip_check\n        with:\n          concurrent_skipping: \"same_content\"\n          skip_after_successful_duplicate: \"true\"\n          paths: \"doc/**\"\n\n  deploy:\n    needs: skip_duplicate_jobs\n    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.1\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Create output directories\n        run: mkdir -p output/reference\n      - name: Copy index.html\n        run: cp website/index.html output/index.html\n      - name: Generate reference\n        id: adocbuild\n        uses: tonynv/asciidoctor-action@master\n        with:\n          program: asciidoctor doc/index.adoc -o output/reference/index.html\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.7\n        with:\n          branch: gh-pages\n          folder: output\n```", "answer": "```yaml # adapted from:\n#\n# * base code: https://peterevans.dev/posts/github-actions-how-to-automate-code-formatting-in-pull-requests/\n# * fix push auth: https://github.com/ad-m/github-push-action\n# * checkout PR head commit https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit\nname: documentation\non:\n  push:\n    branches:\n      - master\njobs:\n  skip_duplicate_jobs:\n    runs-on: ubuntu-latest\n    outputs:\n      should_skip: ${{ steps.skip_check.outputs.should_skip }}\n    steps:\n      - id: skip_check\n        uses: fkirc/skip-duplicate-actions@master\n        with:\n          concurrent_skipping: 'same_content'\n          skip_after_successful_duplicate: 'true'\n          paths: '[\"doc/**\"]'\n  deploy:\n    needs: skip_duplicate_jobs\n    if: ${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.1\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - name: Create output directories\n        run: mkdir -p output/reference\n\n      - name: Copy index.html\n        run: cp website/index.html output/index.html\n\n      - name: Generate reference\n        id: adocbuild\n        uses: tonynv/asciidoctor-action@master\n        with:\n            program: asciidoctor doc/index.adoc -o output/reference/index.html\n\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.7\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: output # The folder the action should deploy.\n```", "prompt": "Generate a GitHub Workflow named `documentation` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has 2 jobs. The job id of the 1st job is `skip_duplicate_jobs`. This job will run on ubuntu-latest runner. The job `skip_duplicate_jobs` has one step. The 1st step is named `` and its id is `skip_check`. This step runs action `fkirc/skip-duplicate-actions` from the master branch. The step defines 3 input parameters for the action: `concurrent_skipping` is set to `same_content`, `skip_after_successful_duplicate` is set to `true` and `paths` is set to `[\"doc/**\"]`. This job has an output: `should_skip` is defined as ${{ steps.skip_check.outputs.should_skip }}. The job id of the 2nd job is `deploy`. Before this job runs, `skip_duplicate_jobs` must complete successfully. This job will run only if the condition(${{ needs.skip_duplicate_jobs.outputs.should_skip != 'true' }}) is met. This job will run on ubuntu-latest runner. The job `deploy` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v2.3.1. The step defines an input parameter for the action: `ref` is set to `${{ github.event.pull_request.head.sha }}`. The 2nd step is named `Create output directories`. This step runs a script: `mkdir -p output/reference`. The 3rd step is named `Copy index.html`. This step runs a script: `cp website/index.html output/index.html`. The 4th step is named `Generate reference` and its id is `adocbuild`. This step runs action `tonynv/asciidoctor-action` from the master branch. The step defines an input parameter for the action: `program` is set to `asciidoctor doc/index.adoc -o output/reference/index.html`. The 5th step is named `Deploy \ud83d\ude80`. This step runs action `JamesIves/github-pages-deploy-action` tagged as 4.1.7. The step defines 2 input parameters for the action: `branch` is set to `gh-pages` and `folder` is set to `output`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7415801068275665}, {"id": "63c495c68052faa2781b4230", "level": "level5", "llm_response": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    name: Issue Handler\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: github.event.action == 'opened' || (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'verify'))\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Issues\n\non:\n  issues:\n    types: [opened, labeled]\n\njobs:\n  issueHandler:\n    runs-on: windows-latest\n    name: Issue Handler\n    steps:\n      - uses: actions/checkout@v3\n      - name: Issue Handler\n        uses: Ash258/Scoop-GithubActions@stable-win\n        if: github.event.action == 'opened' || (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'verify'))\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Issues` for a GitHub repository whose primary programming language is PowerShell. This workflow will be triggered by an event: an issue is opened or a label is added to an issue. The workflow has one job. The 1st job is named `Issue Handler` and its job id is `issueHandler`. This job will run on windows-latest runner. The job `issueHandler` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Issue Handler`. This step will run only if the condition(github.event.action == 'opened' || (github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'verify'))) is met. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs action `Ash258/Scoop-GithubActions` from the stable-win branch. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8834869467443076}, {"id": "63c495f07843b61269a0af74", "level": "level5", "llm_response": "```yaml name: Acquire activation file\n\non:\n  workflow_dispatch:\n\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          file-name: LICENSE\n          file-path: LICENSE.txt\n          api-key: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ steps.getManualLicenseFile.outputs.filePath }}\n          path: ${{ steps.getManualLicenseFile.outputs.filePath }}\n```", "answer": "```yaml \ufeffname: Acquire activation file\non:\n  workflow_dispatch: {}\njobs:\n  activation:\n    name: Request manual activation file\n    runs-on: ubuntu-latest\n    steps:\n      - name: Request manual activation file\n        id: getManualLicenseFile\n        uses: game-ci/unity-request-activation-file@v2\n      - name: Expose as artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ steps.getManualLicenseFile.outputs.filePath }}\n          path: ${{ steps.getManualLicenseFile.outputs.filePath }}\n```", "prompt": "Generate a GitHub Workflow named `Acquire activation file` for a GitHub repository whose primary programming language is C#. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Request manual activation file` and its job id is `activation`. This job will run on ubuntu-latest runner. The job `activation` has 2 steps. The 1st step is named `Request manual activation file` and its id is `getManualLicenseFile`. This step runs action `game-ci/unity-request-activation-file` tagged as v2. The 2nd step is named `Expose as artifact`. This step runs action `actions/upload-artifact` tagged as v3. The step defines 2 input parameters for the action: `name` is set to `${{ steps.getManualLicenseFile.outputs.filePath }}` and `path` is set to `${{ steps.getManualLicenseFile.outputs.filePath }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6794968587387767}, {"id": "63c495418052faa2781b099b", "level": "level5", "llm_response": "```yaml name: 60 Days Stale Check\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v3.0.14\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: \"This issue is stale because it has been open 60 days with no activity.\"\n          stale-pr-message: \"This PR is stale because it has been open 60 days with no activity.\"\n          days-before-stale: -1\n          days-before-close: -1\n          stale-issue-label: \"stale\"\n          stale-pr-label: \"stale\"\n          exempt-pr-labels: \"never-stale\"\n          exempt-issue-labels: \"never-stale\"\n```", "answer": "```yaml name: 60 Days Stale Check\non:\n  schedule:\n    - cron: '00 00 * * *' # Run each day at 00:00 UTC\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v3.0.14\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue is stale because it has been open 60 days with no activity.'\n          stale-pr-message: 'This PR is stale because it has been open 60 days with no activity.'\n          days-before-stale: -1 # 60 days before marking anything stale - Turned off\n          days-before-close: -1 # Do not close anything automatically\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          exempt-pr-labels: 'never-stale' # Exempt 'never-stale' labels from being marked stale\n          exempt-issue-labels: 'never-stale' # Exempt 'never-stale' labels from being marked stale\n```", "prompt": "Generate a GitHub Workflow named `60 Days Stale Check` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `stale`. This job will run on ubuntu-latest runner. The job `stale` has one step. The 1st step is named ``. This step runs action `actions/stale` tagged as v3.0.14. The step defines 9 input parameters for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `stale-issue-message` is set to `This issue is stale because it has been open 60 days with no activity.`, `stale-pr-message` is set to `This PR is stale because it has been open 60 days with no activity.`, `days-before-stale` is set to `-1`, `days-before-close` is set to `-1`, `stale-issue-label` is set to `stale`, `stale-pr-label` is set to `stale`, `exempt-pr-labels` is set to `never-stale` and `exempt-issue-labels` is set to `never-stale`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.36780246845146497}, {"id": "63c496731e3364807577abab", "level": "level5", "llm_response": "```yaml name: Automatically crawl CVEs\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 15 * * *\"\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: \"3.8\"\n      - name: Configure pip caching\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r requirements.txt\n      - name: Crawl CVEs\n        run: |\n          python main.py -g \"${{ secrets.CRAWL_PWD }}\" --gtk ${{ secrets.GRAPAQL_TOKEN }}\n      - name: Commit and push Github page (if changed)\n        if: ${{ github.event_name != 'pull_request' }}\n        run: |\n          git diff\n          git config --global user.email \"github-bot@example.com\"\n          git config --global user.name \"Github-Bot\"\n          git add -A\n          git commit -m \"Updated by Github Bot\" || exit 0\n          git push origin master\n```", "answer": "```yaml name: Automatically crawl CVEs \non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n    branches:\n      - master\n  schedule:\n    - cron: '15 * * * *'\n\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n      - uses: actions/cache@v2\n        name: Configure pip caching\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r requirements.txt\n\n      - name: Crawl CVEs\n        run: |-\n          python main.py -g \"${{ secrets.CRAWL_PWD }}\" --gtk ${{ secrets.GRAPAQL_TOKEN }}\n\n      # \u82e5\u8be5\u65f6\u95f4\u6bb5\u6ca1\u6709 CVE\uff0c \u5219 file://cache/mail.dat \u6587\u4ef6\u4e0d\u4f1a\u751f\u6210\uff0c\u6b64\u65f6\u4e0d\u4f1a\u53d1\u9001\u90ae\u4ef6\n      # - name: Send mail\n      #   if: ${{ secrets.CRAWL_PWD != '' && github.event_name != 'pull_request' }}\n      #   uses: lyy289065406/action-send-mail@master\n      #   with:\n      #     server_address: ${{ secrets.MAIL_SMTP }}\n      #     server_port: 465\n      #     username: ${{ secrets.MAIL_USER }}\n      #     password: ${{ secrets.MAIL_PASS }}\n      #     from: ${{ secrets.MAIL_USER }}\n      #     to: file://cache/mail_recvs.dat\n      #     body: file://cache/mail_content.dat\n      #     content_type: text/html\n      #     subject: \u5a01\u80c1\u60c5\u62a5\u64ad\u62a5\n\n      # \u5982\u679c\u4e0d\u5e0c\u671b\u6c61\u67d3 commit \u8bb0\u5f55\uff0cuser.email \u548c user.name \u968f\u4fbf\u586b\u5373\u53ef\n      # Github Runner \u662f\u6709\u6743\u9650\u63d0\u4ea4\u5230\u4ed3\u5e93\u7684\uff0c\u53ea\u8981 user \u4e0d\u662f owner \uff0c\u5f53\u6b21 commit \u4e0d\u4f1a\u88ab\u8bb0\u5f55\n      - name: Commit and push Github page (if changed)\n        if: ${{ github.event_name != 'pull_request' }}\n        run: |-\n          git diff\n          git config --global user.email \"github-bot@example.com\"\n          git config --global user.name \"Github-Bot\"\n          git add -A\n          git commit -m \"Updated by Github Bot\" || exit 0\n          git push origin master\n\n```", "prompt": "Generate a GitHub Workflow named `Automatically crawl CVEs` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch named master. 2) someone manually triggers the workflow. 3) the scheduled time has come: at 15 minutes past the hour. The workflow has one job. The job id of the 1st job is `build-and-deploy`. This job will run on ubuntu-latest runner. The job `build-and-deploy` has 6 steps. The 1st step is named `Check out repo`. This step runs action `actions/checkout` tagged as v2. The 2nd step is named `Set up Python`. This step runs action `actions/setup-python` tagged as v2. The step defines an input parameter for the action: `python-version` is set to `3.8`. The 3rd step is named `Configure pip caching`. This step runs action `actions/cache` tagged as v2. The step defines 3 input parameters for the action: `path` is set to `~/.cache/pip`, `key` is set to `${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}` and `restore-keys` is set to `${{ runner.os }}-pip-\n`. The 4th step is named `Install Python dependencies`. This step runs a script: `python -m pip install -r requirements.txt\n`. The 5th step is named `Crawl CVEs`. This step runs a script: `python main.py -g \"${{ secrets.CRAWL_PWD }}\" --gtk ${{ secrets.GRAPAQL_TOKEN }}`. The 6th step is named `Commit and push Github page (if changed)`. This step will run only if the condition(${{ github.event_name != 'pull_request' }}) is met. This step runs a script: `git diff\ngit config --global user.email \"github-bot@example.com\"\ngit config --global user.name \"Github-Bot\"\ngit add -A\ngit commit -m \"Updated by Github Bot\" || exit 0\ngit push origin master`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"actions/checkout@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 16, "column": 15, "kind": "action", "snippet": "        uses: actions/checkout@v2\n              ^~~~~~~~~~~~~~~~~~~", "end_column": 33}, {"message": "the runner of \"actions/setup-python@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 18, "column": 15, "kind": "action", "snippet": "        uses: actions/setup-python@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~", "end_column": 37}, {"message": "the runner of \"actions/cache@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 22, "column": 15, "kind": "action", "snippet": "        uses: actions/cache@v2\n              ^~~~~~~~~~~~~~~~", "end_column": 30}]}, "bleu_score": 0.842525248892035}, {"id": "63c494318052faa2781a9bf5", "level": "level5", "llm_response": "```yaml name: Test a branch on canary\n\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: \"Commit sha to be tested\"\n        required: true\n\npermissions:\n  contents: read\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34@v1\n        with:\n          allowed-endpoints: api.github.com:443 github.com:443\n\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - name: Update the rc tag\n        uses: step-security/publish-action@b438f840875fdcb7d1de4fc3d1d30e86cf6acb5d\n        with:\n          rc-sha: ${{ env.COMMIT_SHA }}\n          rc: true\n        env:\n          PAT: ${{ secrets.PAT }}\n          canary: true\n\n      - name: Canary test\n        uses: docker://ghcr.io/step-security/integration-test/int:latest\n        with:\n          PAT: ${{ secrets.PAT }}\n          canary: true\n```", "answer": "```yaml name: Test a branch on canary\non:\n  workflow_dispatch:\n    inputs:\n      COMMIT_SHA:\n        description: 'Commit SHA to be tested'\n        required: true\n\nenv:\n  COMMIT_SHA: ${{ github.event.inputs.COMMIT_SHA }}\ndefaults:\n  run:\n    shell: pwsh\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  update_tag:\n    name: Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n    - uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34 # v1\n      with:\n        allowed-endpoints: \n          api.github.com:443\n          github.com:443\n\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v2\n    - name: Update the rc tag\n      uses: step-security/publish-action@b438f840875fdcb7d1de4fc3d1d30e86cf6acb5d\n      with:\n        rc-sha: ${{ env.COMMIT_SHA }}\n        rc: true\n\n    - name: Canary test\n      uses: docker://ghcr.io/step-security/integration-test/int:latest\n      env:\n        PAT: ${{ secrets.PAT }}\n        canary: true\n```", "prompt": "Generate a GitHub Workflow named `Test a branch on canary` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: COMMIT_SHA-this input represents commit sha to be tested and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `COMMIT_SHA` is set to `${{ github.event.inputs.COMMIT_SHA }}`. For all run steps in the workflow, default shell is set to pwsh. The workflow has one job. The 1st job is named `Update the rc tag to ${{ github.event.inputs.COMMIT_SHA }} commit` and its job id is `update_tag`. This job will run on ubuntu-latest runner. The job `update_tag` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `update_tag`. The job `update_tag` has 4 steps. The 1st step is named ``. This step runs action `step-security/harden-runner` whose commit is 2e205a28d0e1da00c5f53b161f4067b052c61f34. The step defines an input parameter for the action: `allowed-endpoints` is set to `api.github.com:443 github.com:443`. The 2nd step is named ``. This step runs action `actions/checkout` whose commit is 93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8. The 3rd step is named `Update the rc tag`. This step runs action `step-security/publish-action` whose commit is b438f840875fdcb7d1de4fc3d1d30e86cf6acb5d. The step defines 2 input parameters for the action: `rc-sha` is set to `${{ env.COMMIT_SHA }}` and `rc` is set to `True`. The 4th step is named `Canary test`. The step sets 2 environment variables to use: `PAT` is set to `${{ secrets.PAT }}` and `canary` is set to `True`. This step runs action `docker://ghcr.io/step-security/integration-test/int:latest`.", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7344204481087027}, {"id": "63c4964733b087f6bde2ad41", "level": "level5", "llm_response": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    strategy:\n      matrix:\n        os: [macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.7'\n      - name: Fix README symlink\n        run: |\n          rm py-polars/README.md\n          cp README.md py-polars/README.md\n      - name: Publish wheel\n        uses: messense/maturin-action@v1\n        env:\n          MURIN_PASSWORD: ${{ secrets.PYPI_PASS }}\n          RUSTFLAGS: '-C target-feature=+fxsr,+sse,+sse2,+sse3,+sse4.1,+sse4.2'\n        with:\n          rust-toolchain: 'nightly-2022-10-06'\n          maturin-version: '0.13.5'\n          command: publish\n          args: '-m py-polars/Cargo.toml --no-sdist --skip-existing -o wheels -i python -u ritchie46'\n```", "answer": "```yaml name: Create Python release windows macos\n\non:\n  push:\n    tags:\n      - py-*\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  win-macos:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [macos-latest, windows-latest]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.7'\n\n      - name: Fix README symlink\n        run: |\n          rm py-polars/README.md\n          cp README.md py-polars/README.md\n\n      - name: Publish wheel\n        uses: messense/maturin-action@v1\n        env:\n          MATURIN_PASSWORD: ${{ secrets.PYPI_PASS }}\n          RUSTFLAGS: -C target-feature=+fxsr,+sse,+sse2,+sse3,+sse4.1,+sse4.2\n        with:\n          rust-toolchain: nightly-2022-10-06\n          maturin-version: '0.13.5'\n          command: publish\n          args: -m py-polars/Cargo.toml --no-sdist --skip-existing -o wheels -i python -u ritchie46\n```", "prompt": "Generate a GitHub Workflow named `Create Python release windows macos` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches py-*. For all run steps in the workflow, default shell is set to bash. The workflow has one job. The job id of the 1st job is `win-macos`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `os` has 2 values: macos-latest and windows-latest. The job `win-macos` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `actions/setup-python` tagged as v4. The step defines an input parameter for the action: `python-version` is set to `3.7`. The 3rd step is named `Fix README symlink`. This step runs a script: `rm py-polars/README.md\ncp README.md py-polars/README.md\n`. The 4th step is named `Publish wheel`. The step sets 2 environment variables to use: `MATURIN_PASSWORD` is set to `${{ secrets.PYPI_PASS }}` and `RUSTFLAGS` is set to `-C target-feature=+fxsr,+sse,+sse2,+sse3,+sse4.1,+sse4.2`. This step runs action `messense/maturin-action` tagged as v1. The step defines 4 input parameters for the action: `rust-toolchain` is set to `nightly-2022-10-06`, `maturin-version` is set to `0.13.5`, `command` is set to `publish` and `args` is set to `-m py-polars/Cargo.toml --no-sdist --skip-existing -o wheels -i python -u ritchie46`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7560743774054612}, {"id": "63c496566fc19abdf9c9b6ef", "level": "level5", "llm_response": "```yaml name: automerge\n\non:\n  pull_request_target:\n    types: [labeled]\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        uses: peter-evans/enable-pull-request-automerge@v2\n        with:\n          token: ${{ secrets.PAT }}\n          pull-request-number: ${{ github.event.pull_request.number }}\n          merge-method: rebase\n        if: contains( github.event.pull_request.labels.*.name, 'automerge')\n```", "answer": "```yaml name: automerge\non:\n  pull_request_target:\n    types:\n      - labeled\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: enable automerge\n        if: contains( github.event.pull_request.labels.*.name, 'automerge')\n        uses: peter-evans/enable-pull-request-automerge@v2\n        with:\n          token: ${{ secrets.PAT }}\n          pull-request-number: ${{ github.event.pull_request.number }}\n          merge-method: rebase\n```", "prompt": "Generate a GitHub Workflow named `automerge` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: a label is added to a pull request. The workflow has one job. The job id of the 1st job is `automerge`. This job will run on ubuntu-latest runner. The job `automerge` has one step. The 1st step is named `enable automerge`. This step will run only if the condition(contains( github.event.pull_request.labels.*.name, 'automerge')) is met. This step runs action `peter-evans/enable-pull-request-automerge` tagged as v2. The step defines 3 input parameters for the action: `token` is set to `${{ secrets.PAT }}`, `pull-request-number` is set to `${{ github.event.pull_request.number }}` and `merge-method` is set to `rebase`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.782027976628409}, {"id": "63c4941d8052faa2781a937b", "level": "level5", "llm_response": "```yaml name: update-flake-lock\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          inputs: nixpkgs\n```", "answer": "```yaml name: update-flake-lock\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '0 0 * * 0' # runs weekly on Sunday at 00:00\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          # we update nixos-common-styles manual\n          # and the rest of the inputs are content inputs\n          inputs: nixpkgs\n```", "prompt": "Generate a GitHub Workflow named `update-flake-lock` for a GitHub repository whose primary programming language is Less. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 12:00 am, only on sunday. The workflow has one job. The job id of the 1st job is `lockfile`. This job will run on ubuntu-latest runner. The job `lockfile` has 3 steps. The 1st step is named `Checkout repository`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Install Nix`. This step runs action `cachix/install-nix-action` tagged as v18. The step defines an input parameter for the action: `extra_nix_config` is set to `access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n`. The 3rd step is named `Update flake.lock`. This step runs action `DeterminateSystems/update-flake-lock` tagged as v14. The step defines an input parameter for the action: `inputs` is set to `nixpkgs`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7320590315962595}, {"id": "63c4965533b087f6bde2b378", "level": "level5", "llm_response": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Packagist\n        env:\n          PACKAGIST_API_KEY: ${{ secrets.PACKAGIST_API_KEY }}\n        run: |\n          curl -X POST \"https://packagist.org/api/update-package?username=svix&apiToken=$PACKAGIST_API_KEY\" \\\n            -H 'content-type: application/json' \\\n            -d '{\"repository\":{\"url\":\"https://packagist.org/packages/svix/svix\"}}'\n```", "answer": "```yaml name: PHP Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  packagist:\n    name: Update Packagist\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Packagist\n        run: |\n          curl -X POST \"https://packagist.org/api/update-package?username=svix&apiToken=$PACKAGIST_API_KEY\" \\\n            -H 'content-type: application/json' \\\n            -d '{\"repository\":{\"url\":\"https://packagist.org/packages/svix/svix\"}}'\n        env:\n          PACKAGIST_API_KEY: ${{ secrets.PACKAGIST_API_KEY }}```", "prompt": "Generate a GitHub Workflow named `PHP Release` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Update Packagist` and its job id is `packagist`. This job will run on ubuntu-latest runner. The job `packagist` has one step. The 1st step is named `Update Packagist`. The step sets an environment variable to use: `PACKAGIST_API_KEY` is set to `${{ secrets.PACKAGIST_API_KEY }}`. This step runs a script: `curl -X POST \"https://packagist.org/api/update-package?username=svix&apiToken=$PACKAGIST_API_KEY\" \\\n  -H 'content-type: application/json' \\\n  -d '{\"repository\":{\"url\":\"https://packagist.org/packages/svix/svix\"}}'\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9136101962913951}, {"id": "63c4959c7843b61269a08c30", "level": "level5", "llm_response": "```yaml name: Scorecards supply-chain security\non:\n  workflow_dispatch:\n\npermissions:\n  # All permissions are granted by default\n  # Only required permissions for this workflow\n  actions: read\n  security-events: write\n  contents: read\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # All permissions are granted by default\n      # Only required permissions for this job\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: Run analysis\n        uses: ossf/scorecard-action@c8416b0b2bf627c349ca92fc8e3de51a64b005cf # v1.0.0\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          publish_results: true\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.4.0\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.0\n        with:\n          sarif_file: results.sarif\n```", "answer": "```yaml name: Scorecards supply-chain security\n# Run only manually, because the answers don't change often and the results have \n# many unhelpful positives.\n  \non:\n  workflow_dispatch: \n  # Only the default branch is supported.\n  # branch_protection_rule:\n  # schedule:\n  #   - cron: '38 17 * * 6'\n  # push:\n  #  branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c8416b0b2bf627c349ca92fc8e3de51a64b005cf # v1.0.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. This job will run on ubuntu-latest runner. The job `analysis` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `security-events` scope, read access is granted to the GITHUB_TOKEN in the `actions` scope and read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` whose commit is ec3a7ce113134d7a93b817d10a8272cb61118579. The step defines an input parameter for the action: `persist-credentials` is set to `False`. The 2nd step is named `Run analysis`. This step runs action `ossf/scorecard-action` whose commit is c8416b0b2bf627c349ca92fc8e3de51a64b005cf. The step defines 4 input parameters for the action: `results_file` is set to `results.sarif`, `results_format` is set to `sarif`, `repo_token` is set to `${{ secrets.SCORECARD_READ_TOKEN }}` and `publish_results` is set to `True`. The 3rd step is named `Upload artifact`. This step runs action `actions/upload-artifact` whose commit is 82c141cc518b40d92cc801eee768e7aafc9c2fa2. The step defines 3 input parameters for the action: `name` is set to `SARIF file`, `path` is set to `results.sarif` and `retention-days` is set to `5`. The 4th step is named `Upload to code-scanning`. This step runs action `github/codeql-action/upload-sarif` whose commit is 5f532563584d71fdef14ee64d17bafb34f751ce5. The step defines an input parameter for the action: `sarif_file` is set to `results.sarif`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.636128790925756}, {"id": "63c495547843b61269a06e6c", "level": "level5", "llm_response": "```yaml name: Recreate Linux self-hosted runners on schedule\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 1 * * *\"\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: recreate-linux-runners\n  cancel-in-progress: true\n\njobs:\n  recreate:\n    if: github.repository == 'Homebrew/homebrew-core'\n    runs-on: ubuntu-22.04\n    strategy:\n      matrix:\n        runner_name:\n          - linux-self-hosted-1\n    env:\n      RUNNER_LABEL: TODO\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.1\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_SA_KEY }}\n          export_default_credentials: true\n      - name: Wait for idle runner\n        id: killable\n        uses: Homebrew/actions/wait-for-idle-runner@master\n        with:\n          runner_name: ${{ matrix.runner_name }}\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n      - name: Kill runner and create a new one\n        uses: Homebrew/actions/create-gcloud-instance@master\n        with:\n          runner_name: ${{ matrix.runner_name }}\n          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}\n          gcp_service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}\n          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n```", "answer": "```yaml name: Recreate Linux self-hosted runners on schedule\n\non:\n  workflow_dispatch:\n  schedule:\n    # Once each 24 hours, at 1 during the night\n    - cron: \"0 1 * * *\"\n\nconcurrency:\n  group: recreate-linux-runners\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  recreate:\n    if: github.repository == 'Homebrew/homebrew-core'\n    runs-on: ubuntu-22.04\n    env:\n      # TODO agree on one label for all runners\n      RUNNER_LABEL: TODO\n    strategy:\n      matrix:\n        runner_name:\n          - linux-self-hosted-1\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.1\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_SA_KEY }}\n          export_default_credentials: true\n\n      - name: Wait for idle runner\n        id: killable\n        uses: Homebrew/actions/wait-for-idle-runner@master\n        with:\n          runner_name: ${{ matrix.runner_name }}\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n\n      - name: Kill runner and create a new one\n        if: ${{ steps.killable.outputs.runner-found == 'true' && steps.killable.outputs.runner-idle == 'true' }}\n        uses: Homebrew/actions/create-gcloud-instance@master\n        with:\n          runner_name: ${{ matrix.runner_name }}\n          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}\n          gcp_service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}\n          gcp_sa_key: ${{ secrets.GCP_SA_KEY }}\n          github_token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Recreate Linux self-hosted runners on schedule` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 01:00 am. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the recreate-linux-runners concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `recreate`. This job will run only if the condition(github.repository == 'Homebrew/homebrew-core') is met. This job will run on ubuntu-22.04 runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `runner_name` has one value: linux-self-hosted-1. The job sets an environment variable to use: `RUNNER_LABEL` is set to `TODO`. The job `recreate` has 3 steps. The 1st step is named `Set up Cloud SDK`. This step runs action `google-github-actions/setup-gcloud` tagged as v0.2.1. The step defines 3 input parameters for the action: `project_id` is set to `${{ secrets.GCP_PROJECT_ID }}`, `service_account_key` is set to `${{ secrets.GCP_SA_KEY }}` and `export_default_credentials` is set to `True`. The 2nd step is named `Wait for idle runner` and its id is `killable`. This step runs action `Homebrew/actions/wait-for-idle-runner` from the master branch. The step defines 2 input parameters for the action: `runner_name` is set to `${{ matrix.runner_name }}` and `github_token` is set to `${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}`. The 3rd step is named `Kill runner and create a new one`. This step will run only if the condition(${{ steps.killable.outputs.runner-found == 'true' && steps.killable.outputs.runner-idle == 'true' }}) is met. This step runs action `Homebrew/actions/create-gcloud-instance` from the master branch. The step defines 5 input parameters for the action: `runner_name` is set to `${{ matrix.runner_name }}`, `gcp_project_id` is set to `${{ secrets.GCP_PROJECT_ID }}`, `gcp_service_account` is set to `${{ secrets.GCP_SERVICE_ACCOUNT }}`, `gcp_sa_key` is set to `${{ secrets.GCP_SA_KEY }}` and `github_token` is set to `${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8243942948572317}, {"id": "63c4942a8052faa2781a9911", "level": "level5", "llm_response": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n      - uses: actions/setup-go@37335c7bb261b353407cff977110895fa0b4f7d8\n        with:\n          go-version: 1.18\n      - run: go version\n      - run: make testacc\n        env:\n          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "answer": "```yaml name: Integration tests\non:\n  workflow_dispatch: null\n  push:\n    branches:\n      - main\n      - dev\njobs:\n  integration_tests:\n    name: Run integration tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone Repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2\n      - uses: actions/setup-go@37335c7bb261b353407cff977110895fa0b4f7d8 # pin@v2\n        with:\n          go-version: '1.18'\n      - run: go version\n      - run: make testacc\n        env:\n          LINODE_TOKEN: ${{ secrets.DX_LINODE_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `Integration tests` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main or a branch named dev. The workflow has one job. The 1st job is named `Run integration tests` and its job id is `integration_tests`. This job will run on ubuntu-latest runner. The job `integration_tests` has 4 steps. The 1st step is named `Clone Repository`. This step runs action `actions/checkout` whose commit is 5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f. The 2nd step is named ``. This step runs action `actions/setup-go` whose commit is 37335c7bb261b353407cff977110895fa0b4f7d8. The step defines an input parameter for the action: `go-version` is set to `1.18`. The 3rd step is named ``. This step runs a script: `go version`. The 4th step is named ``. The step sets an environment variable to use: `LINODE_TOKEN` is set to `${{ secrets.DX_LINODE_TOKEN }}`. This step runs a script: `make testacc`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7484773927795398}, {"id": "63c4942a8052faa2781a9910", "level": "level5", "llm_response": "```yaml name: AccTest Command\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  acctest-command:\n    if: ${{ github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate App Installation Token\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.DX_ACCTEST_APP_ID }}\n          private_key: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n      - name: Slash Command Dispatch\n        uses: peter-evans/slash-command-dispatch@v1\n        env:\n          TOKEN: ${{ steps.generate_token.outputs.token }}\n        with:\n          token: ${{ env.TOKEN }}\n          reaction-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-type: pull-request\n          commands: acctest\n          named-args: true\n          permission: write\n```", "answer": "```yaml name: AccTest Command\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  acctest-command:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.issue.pull_request }}\n    steps:\n      - name: Generate App Installation Token\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.DX_ACCTEST_APP_ID }}\n          private_key: ${{ secrets.DX_ACCTEST_PRIV_KEY }}\n\n      - name: Slash Command Dispatch\n        uses: peter-evans/slash-command-dispatch@v1\n        env:\n          TOKEN: ${{ steps.generate_token.outputs.token }}\n        with:\n          token: ${{ env.TOKEN }}\n          reaction-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-type: pull-request\n          commands: acctest\n          named-args: true\n          permission: write\n```", "prompt": "Generate a GitHub Workflow named `AccTest Command` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a comment on an issue or pull request is created. The workflow has one job. The job id of the 1st job is `acctest-command`. This job will run only if the condition(${{ github.event.issue.pull_request }}) is met. This job will run on ubuntu-latest runner. The job `acctest-command` has 2 steps. The 1st step is named `Generate App Installation Token` and its id is `generate_token`. This step runs action `tibdex/github-app-token` tagged as v1. The step defines 2 input parameters for the action: `app_id` is set to `${{ secrets.DX_ACCTEST_APP_ID }}` and `private_key` is set to `${{ secrets.DX_ACCTEST_PRIV_KEY }}`. The 2nd step is named `Slash Command Dispatch`. The step sets an environment variable to use: `TOKEN` is set to `${{ steps.generate_token.outputs.token }}`. This step runs action `peter-evans/slash-command-dispatch` tagged as v1. The step defines 6 input parameters for the action: `token` is set to `${{ env.TOKEN }}`, `reaction-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `issue-type` is set to `pull-request`, `commands` is set to `acctest`, `named-args` is set to `True` and `permission` is set to `write`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9297972733194839}, {"id": "63c4940f7843b612699feb8d", "level": "level5", "llm_response": "```yaml on:\n  push:\n    branches:\n      - main\n\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - run: make test-cover\n      - uses: codecov/codecov-action@v2\n        with:\n          file: ./coverage.out\n          fail_ci_if_error: true\n```", "answer": "```yaml # add public code coverage reports\non:\n  push:\n    branches:\n    - main\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: \"make test-cover\"\n    - uses: codecov/codecov-action@v2\n    with:\n      file: ./coverage.out\n      fail_ci_if_error: true\n```", "prompt": "Generate a GitHub Workflow named `` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `coverage`. This job will run on ubuntu-latest runner. The job `coverage` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` from the master branch. The 2nd step is named ``. This step runs a script: `make test-cover`. The 3rd step is named ``. This step runs action `codecov/codecov-action` tagged as v2. The job will pass 2 inputs to the called workflow: the input `file` is `./coverage.out` and the input `fail_ci_if_error` is `True`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "the runner of \"codecov/codecov-action@v2\" action is too old to run on GitHub Actions. update the action's version to fix this issue", "filepath": "../tmp/test.yml", "line": 12, "column": 15, "kind": "action", "snippet": "      - uses: codecov/codecov-action@v2\n              ^~~~~~~~~~~~~~~~~~~~~~~~~", "end_column": 39}]}, "bleu_score": 0.8466657105524215}, {"id": "63c496a06fc19abdf9c9d2e3", "level": "level5", "llm_response": "```yaml name: Scorecards supply-chain security\non:\n  # Runs on the default branch\n  branch_protection_rule:\n  schedule:\n    - cron: '18 9 * * 4'\n  push:\n    branches:\n      - main\n\npermissions: read-all\n\njobs:\n  analysis:\n    permissions:\n      # Scorecard analysis\n      security-events: write\n      # Scorecard analysis\n      actions: read\n      # Code scanning\n      contents: read\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579\n        with:\n          persist-credentials: false\n      - name: Run analysis\n        uses: ossf/scorecard-action@c1aec4ac820532bab364f02a81873c555a0ba3a1\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          publish_results: true\n      - name: Upload artifact\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n      - name: Upload to code-scanning\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5\n        with:\n          sarif_file: results.sarif\n```", "answer": "```yaml # This file is part of ICU4X. For terms of use, please see the file\n# called LICENSE at the top level of the ICU4X source tree\n# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).\n\nname: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: '18 9 * * 4'\n  push:\n    branches: [ main ]\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      actions: read\n      contents: read\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@c1aec4ac820532bab364f02a81873c555a0ba3a1 # v1.0.4\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Read-only PAT token. To create it,\n          # follow the steps in https://github.com/ossf/scorecard-action#pat-token-creation.\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          # Publish the results to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`,\n          # regardless of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional).\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26\n        with:\n          sarif_file: results.sarif\n```", "prompt": "Generate a GitHub Workflow named `Scorecards supply-chain security` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by multiple events: 1) activity related to a branch protection rule occurs. 2) the scheduled time has come: at 09:18 am, only on thursday. 3) The workflow would run whenever there is a push event to: a branch named main. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Scorecards analysis` and its job id is `analysis`. This job will run on ubuntu-latest runner. The job `analysis` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `security-events` scope, read access is granted to the GITHUB_TOKEN in the `actions` scope and read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `analysis`. The job `analysis` has 4 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` whose commit is ec3a7ce113134d7a93b817d10a8272cb61118579. The step defines an input parameter for the action: `persist-credentials` is set to `False`. The 2nd step is named `Run analysis`. This step runs action `ossf/scorecard-action` whose commit is c1aec4ac820532bab364f02a81873c555a0ba3a1. The step defines 4 input parameters for the action: `results_file` is set to `results.sarif`, `results_format` is set to `sarif`, `repo_token` is set to `${{ secrets.SCORECARD_READ_TOKEN }}` and `publish_results` is set to `True`. The 3rd step is named `Upload artifact`. This step runs action `actions/upload-artifact` whose commit is 82c141cc518b40d92cc801eee768e7aafc9c2fa2. The step defines 3 input parameters for the action: `name` is set to `SARIF file`, `path` is set to `results.sarif` and `retention-days` is set to `5`. The 4th step is named `Upload to code-scanning`. This step runs action `github/codeql-action/upload-sarif` whose commit is 5f532563584d71fdef14ee64d17bafb34f751ce5. The step defines an input parameter for the action: `sarif_file` is set to `results.sarif`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5847640390525614}, {"id": "63c495257843b61269a05b79", "level": "level5", "llm_response": "```yaml name: Update translation templates\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update-templates:\n    name: Update translation templates\n    runs-on: ubuntu-20.04\n    container: archlinux\n\n    steps:\n      - name: Install git\n        run: pacman -Syu --noconfirm git\n\n      - name: Checkout\n        uses: actions/checkout@v3.1.0\n\n      - name: Install deps\n        run: |\n          # install general build deps\n          pacman -Syu --noconfirm ninja gcc pkgconf python3 python-pip which\n          # install easyeffects deps\n          source ./PKGBUILD && pacman -Syu --noconfirm --needed --asdeps \"${makedepends[@]}\" \"${depends[@]}\"\n      - name: Change git permissions\n        run: git config --global --add safe.directory \"$GITHUB_WORKSPACE\"\n\n      - name: Run meson targets\n        run: |\n          meson build\n          cd build\n          ../util/update_translation_templates.sh\n          cd ..\n      - name: Check for non-timestamp diff\n        run: |\n          # see https://stackoverflow.com/a/26622262\n          DIFF_LINES=$(git diff --unified=0 | grep '^[+-]' | grep -Ev '^(--- a/|\\+\\+\\+ b/)')\n\n          if [[ $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\") != \"$DIFF_LINES\" ]]; then\n            echo \"The calculated diff includes modifications besides just timestamp changes (POT-Creation-Date).\"\n            echo \"Letting the PR continue as this is a valid reason to open a PR.\"\n          else\n            echo \"The calculated diff just has timestamp changes (POT-Creation-Date).\"\n            echo \"Restoring original files since this is not a valid reason to open a PR.\"\n            git restore .\n          fi\n\n          echo \"All diff lines count: $(echo \"$DIFF_LINES\" | wc -l)\"\n          echo \"Diff lines count where POT-Creation-Date was changed: $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\" | wc -l)\"\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4.1.3\n        with:\n          title: Update translation templates\n          body: Ensure to merge all other Pull Requests before merging this. Conflicts here will automatically be resolved in case of changes in master.\n          commit-message: Update translation templates\n          committer: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          author: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          branch: automatically-update-translation-templates\n          push-to-fork: easyeffects-bot/easyeffects\n          token: ${{ secrets.EASYEFFECTS_BOT }}\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n\nname: Update translation templates\njobs:\n  update-templates:\n    name: Update translation templates\n    runs-on: ubuntu-20.04\n    container:\n      image: archlinux\n    steps:\n      # install git first otherwise checkout will not give us an actual git repo\n      - name: Install git\n        run: pacman -Syu --noconfirm git\n    \n      - name: Checkout\n        uses: actions/checkout@v3.1.0\n\n      - name: Install deps\n        run: |\n          # install general build deps\n          pacman -Syu --noconfirm ninja gcc pkgconf python3 python-pip which\n          # install easyeffects deps\n          source ./PKGBUILD && pacman -Syu --noconfirm --needed --asdeps \"${makedepends[@]}\" \"${depends[@]}\"\n          \n      # workaround upstream permissions issue github.com/peter-evans/create-pull-request/issues/1170\n      - name: Change git permissions\n        run: git config --global --add safe.directory \"$GITHUB_WORKSPACE\"\n\n      - name: Run meson targets\n        run: |\n          meson build\n          cd build\n          ../util/update_translation_templates.sh\n          cd ..\n\n      - name: Check for non-timestamp diff\n        run: |\n          # see https://stackoverflow.com/a/26622262\n          DIFF_LINES=$(git diff --unified=0 | grep '^[+-]' | grep -Ev '^(--- a/|\\+\\+\\+ b/)')\n\n          if [[ $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\") != \"$DIFF_LINES\" ]]; then\n            echo \"The calculated diff includes modifications besides just timestamp changes (POT-Creation-Date).\"\n            echo \"Letting the PR continue as this is a valid reason to open a PR.\"\n          else\n            echo \"The calculated diff just has timestamp changes (POT-Creation-Date).\"\n            echo \"Restoring original files since this is not a valid reason to open a PR.\"\n            git restore .\n          fi\n\n          echo \"All diff lines count: $(echo \"$DIFF_LINES\" | wc -l)\"\n          echo \"Diff lines count where POT-Creation-Date was changed: $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\" | wc -l)\"\n\n      # TODO it would be ideal to refresh metainfo fully by copying release notes from the upcoming release in NEWS.yaml to metainfo, and then running the above update template script,\n      # however this is not possible without putting a dummy release in the metainfo with said upcoming release notes which would later have to be adjusted to the real release.\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4.1.3\n        with:\n          title: Update translation templates\n          body: Ensure to merge all other Pull Requests before merging this. Conflicts here will automatically be resolved in case of changes in master.\n          commit-message: Update translation templates\n          # email sets \"EasyEffects Bot\" user as commit author\n          committer: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          author: EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>\n          branch: automatically-update-translation-templates\n          # the easyeffects_bot secret/token is only valid for a fork\n          # note the machine user (easyeffects-bot) must have already forked the repository  where the action is running for this to work\n          push-to-fork: easyeffects-bot/easyeffects\n          token: ${{ secrets.EASYEFFECTS_BOT }}\n```", "prompt": "Generate a GitHub Workflow named `Update translation templates` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The 1st job is named `Update translation templates` and its job id is `update-templates`. This job will run on ubuntu-20.04 runner. The job creates a Docker container that uses `archlinux` image. The job `update-templates` has 7 steps. The 1st step is named `Install git`. This step runs a script: `pacman -Syu --noconfirm git`. The 2nd step is named `Checkout`. This step runs action `actions/checkout` tagged as v3.1.0. The 3rd step is named `Install deps`. This step runs a script: `# install general build deps\npacman -Syu --noconfirm ninja gcc pkgconf python3 python-pip which\n# install easyeffects deps\nsource ./PKGBUILD && pacman -Syu --noconfirm --needed --asdeps \"${makedepends[@]}\" \"${depends[@]}\"\n`. The 4th step is named `Change git permissions`. This step runs a script: `git config --global --add safe.directory \"$GITHUB_WORKSPACE\"`. The 5th step is named `Run meson targets`. This step runs a script: `meson build\ncd build\n../util/update_translation_templates.sh\ncd ..\n`. The 6th step is named `Check for non-timestamp diff`. This step runs a script: `# see https://stackoverflow.com/a/26622262\nDIFF_LINES=$(git diff --unified=0 | grep '^[+-]' | grep -Ev '^(--- a/|\\+\\+\\+ b/)')\n\nif [[ $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\") != \"$DIFF_LINES\" ]]; then\n  echo \"The calculated diff includes modifications besides just timestamp changes (POT-Creation-Date).\"\n  echo \"Letting the PR continue as this is a valid reason to open a PR.\"\nelse\n  echo \"The calculated diff just has timestamp changes (POT-Creation-Date).\"\n  echo \"Restoring original files since this is not a valid reason to open a PR.\"\n  git restore .\nfi\n\necho \"All diff lines count: $(echo \"$DIFF_LINES\" | wc -l)\"\necho \"Diff lines count where POT-Creation-Date was changed: $(echo \"$DIFF_LINES\" | grep \"POT-Creation-Date:\" | wc -l)\"\n`. The 7th step is named `Create Pull Request`. This step runs action `peter-evans/create-pull-request` tagged as v4.1.3. The step defines 8 input parameters for the action: `title` is set to `Update translation templates`, `body` is set to `Ensure to merge all other Pull Requests before merging this. Conflicts here will automatically be resolved in case of changes in master.`, `commit-message` is set to `Update translation templates`, `committer` is set to `EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>`, `author` is set to `EasyEffects Bot <110548574+easyeffects-bot@users.noreply.github.com>`, `branch` is set to `automatically-update-translation-templates`, `push-to-fork` is set to `easyeffects-bot/easyeffects` and `token` is set to `${{ secrets.EASYEFFECTS_BOT }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9671639533459132}, {"id": "63c4967d1899db58864d33af", "level": "level5", "llm_response": "```yaml name: Build package\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: npm\n      - name: NPM install\n        run: npm install\n      - name: NPM build\n        run: npm run build\n      - name: Grunt action-package\n        run: npm run action-package\n      - name: Build zip file\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          path: package/\n          retention-days: 1\n```", "answer": "```yaml name: Build package\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Package name'\n        default: 'generateblocks'\n        required: true\n\njobs:\n\n  build-package:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n\n      - name: NPM install\n        run: npm install\n\n      - name: NPM build\n        run: npm run build\n\n      - name: Grunt action-package\n        run: npm run action-package\n\n      - name: Build zip file\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: ${{ github.event.inputs.name }}\n          path: |\n            package/\n          retention-days: 1\n```", "prompt": "Generate a GitHub Workflow named `Build package` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives an input: name-this input represents package name, its default value is generateblocks and it must be supplied. The workflow has one job. The job id of the 1st job is `build-package`. This job will run on ubuntu-latest runner. The job `build-package` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `actions/setup-node` tagged as v3. The step defines 2 input parameters for the action: `node-version` is set to `14` and `cache` is set to `npm`. The 3rd step is named `NPM install`. This step runs a script: `npm install`. The 4th step is named `NPM build`. This step runs a script: `npm run build`. The 5th step is named `Grunt action-package`. This step runs a script: `npm run action-package`. The 6th step is named `Build zip file`. This step runs action `actions/upload-artifact` tagged as v3.1.0. The step defines 3 input parameters for the action: `name` is set to `${{ github.event.inputs.name }}`, `path` is set to `package/\n` and `retention-days` is set to `1`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9260366693266134}, {"id": "63c494c78052faa2781ad49a", "level": "level5", "llm_response": "```yaml name: \"Pull Request Labeler\"\non: [pull_request_target]\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Pull Request Labeler` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `triage`. This job will run on ubuntu-latest runner. The job `triage` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `triage`. The job `triage` has one step. The 1st step is named ``. This step runs action `actions/labeler` tagged as v4. The step defines an input parameter for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6501222902539284}, {"id": "63c495928052faa2781b2bc0", "level": "level5", "llm_response": "```yaml name: Labeler\non: [pull_request_target]\njobs:\n  label:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: rhysd/changelog-from-release/action@v2\n        with:\n          file: CHANGELOG.md\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: rhysd/changelog-from-release/action@v2\n      with:\n        file: CHANGELOG.md\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```", "prompt": "Generate a GitHub Workflow named `Labeler` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `label`. This job will run on ubuntu-latest runner. The job `label` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `label`. The job `label` has one step. The 1st step is named ``. This step runs action `rhysd/changelog-from-release/action` tagged as v2. The step defines 2 input parameters for the action: `file` is set to `CHANGELOG.md` and `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6836013949954282}, {"id": "63c494608052faa2781aabf2", "level": "level5", "llm_response": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "prompt": "Generate a GitHub Workflow named `Configlet` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) there is activity relating to a pull request. 2) The workflow would run whenever there is a push event to: a branch named main. 3) someone manually triggers the workflow. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `configlet`. This job will call a reusable workflow located at `exercism/github-actions/.github/workflows/configlet.yml@main`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4949e7843b61269a025e6", "level": "level5", "llm_response": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `TagBot` for a GitHub repository whose primary programming language is Julia. This workflow will be triggered by multiple events: 1) a comment on an issue or pull request is created. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `TagBot`. This job will run only if the condition(github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot') is met. This job will run on ubuntu-latest runner. The job `TagBot` has one step. The 1st step is named ``. This step runs action `JuliaRegistries/TagBot` tagged as v1. The step defines 2 input parameters for the action: `token` is set to `${{ secrets.GITHUB_TOKEN }}` and `ssh` is set to `${{ secrets.DOCUMENTER_KEY }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c493b77843b612699fd377", "level": "level5", "llm_response": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'public/**'\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n      - name: Install Nix\n        uses: cachix/install-nix-action@v15\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Build\n        run: nix build .#website\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./result\n          cname: mdzk.app\n```", "answer": "```yaml name: Publish website\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"public/**\"\n\njobs:\n  deploy-website:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v15\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build\n        run: nix build .#website\n\n      - name: Deploy \ud83d\ude80\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./result\n          cname: mdzk.app\n```", "prompt": "Generate a GitHub Workflow named `Publish website` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(public/**), the workflow runs. The workflow has one job. The job id of the 1st job is `deploy-website`. This job will run on ubuntu-latest runner. The job `deploy-website` has 4 steps. The 1st step is named `Checkout \ud83d\udece\ufe0f`. This step runs action `actions/checkout` tagged as v2.3.1. The 2nd step is named `Install Nix`. This step runs action `cachix/install-nix-action` tagged as v15. The step defines an input parameter for the action: `extra_nix_config` is set to `access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n`. The 3rd step is named `Build`. This step runs a script: `nix build .#website`. The 4th step is named `Deploy \ud83d\ude80`. This step runs action `peaceiris/actions-gh-pages` tagged as v3. The step defines 3 input parameters for the action: `github_token` is set to `${{ secrets.GITHUB_TOKEN }}`, `publish_dir` is set to `./result` and `cname` is set to `mdzk.app`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9551190479308641}, {"id": "63c4946f7843b61269a011d1", "level": "level5", "llm_response": "```yaml name: I2::Dev::Nightly::Publish\non:\n  workflow_dispatch:\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: hyperledger/iroha2:dev-nightly-${{ github.sha }}\n          labels: |\n            commit=${{ github.sha }}\n          build-args: |\n            TAG=dev\n```", "answer": "```yaml name: I2::Dev::Nightly::Publish\n\non: workflow_dispatch\n\njobs:\n  dockerhub:\n    runs-on: ubuntu-latest\n    container:\n      image: 7272721/i2-ci:nightly\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      - name: Build and push iroha2:dev-nightly image\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          tags: hyperledger/iroha2:dev-nightly-${{ github.sha }}\n          labels: commit=${{ github.sha }}\n          build-args: TAG=dev\n```", "prompt": "Generate a GitHub Workflow named `I2::Dev::Nightly::Publish` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `dockerhub`. This job will run on ubuntu-latest runner. The job creates a Docker container that uses `7272721/i2-ci:nightly` image. The job `dockerhub` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `docker/login-action` tagged as v2. The step defines 2 input parameters for the action: `username` is set to `${{ secrets.DOCKERHUB_USERNAME }}` and `password` is set to `${{ secrets.DOCKERHUB_TOKEN }}`. The 3rd step is named `Build and push iroha2:dev-nightly image`. This step runs action `docker/build-push-action` tagged as v3. The step defines 4 input parameters for the action: `push` is set to `True`, `tags` is set to `hyperledger/iroha2:dev-nightly-${{ github.sha }}`, `labels` is set to `commit=${{ github.sha }}` and `build-args` is set to `TAG=dev`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8241876841721616}, {"id": "63c4941b7843b612699ff0aa", "level": "level5", "llm_response": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 11\n      - name: Build and Release\n        run: ./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease\n        env:\n          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n          ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n          ZAP_RELEASE: 1\n          ZAP_JAVA_VERSION: 11\n```", "answer": "```yaml name: Release Main Version\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'zap/zap.gradle.kts'\n\njobs:\n  release:\n    name: Build and Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build and Release\n      env:\n        INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n        ZAP_RELEASE: 1\n        ZAP_JAVA_VERSION: 11\n      run: ./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease\n```", "prompt": "Generate a GitHub Workflow named `Release Main Version` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(zap/zap.gradle.kts), the workflow runs. The workflow has one job. The 1st job is named `Build and Release` and its job id is `release`. This job will run on ubuntu-latest runner. The job `release` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines 2 input parameters for the action: `fetch-depth` is set to `0` and `persist-credentials` is set to `False`. The 2nd step is named `Setup Java`. This step runs action `actions/setup-java` tagged as v3. The step defines 2 input parameters for the action: `distribution` is set to `temurin` and `java-version` is set to `11`. The 3rd step is named `Build and Release`. The step sets 4 environment variables to use: `INSTALL4J_LICENSE` is set to `${{ secrets.INSTALL4J_LICENSE }}`, `ZAPBOT_TOKEN` is set to `${{ secrets.ZAPBOT_TOKEN }}`, `ZAP_RELEASE` is set to `1` and `ZAP_JAVA_VERSION` is set to `11`. This step runs a script: `./gradlew \"-Dorg.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m\" :zap:createMainRelease`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9093285875423295}, {"id": "63c494a97843b61269a02a52", "level": "level5", "llm_response": "```yaml name: pytorch1_8_1-cuda11_1\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 17 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: 'cu111'\n      remote_runtime_docker: 'bladedisc:latest-runtime-torch1.8.1-cu111'\n      develop_base_image: 'nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04'\n      runtime_base_image: 'nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04'\n      extra_envs: '-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111'\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "answer": "```yaml name: pytorch1_8_1-cuda11_1\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 17 * * *' # 1:00 am UTC+8:00\n  workflow_dispatch:\n\njobs:\n  build:\n    uses: ./.github/workflows/resuable_gpu_build.yml\n    with:\n      cuda_version: cu111\n      remote_runtime_docker: bladedisc:latest-runtime-torch1.8.1-cu111\n      develop_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      runtime_base_image: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04\n      extra_envs: -e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON\n          -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111\n      exec_command: bash ./scripts/ci/test_pytorch_blade.sh\n      deploy_command: TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh\n    secrets:\n      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_DOCKER_USERNAME }}\n      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_DOCKER_PASSWORD }}\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "prompt": "Generate a GitHub Workflow named `pytorch1_8_1-cuda11_1` for a GitHub repository whose primary programming language is C++. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 05:00 pm. 4) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will call a reusable workflow located at `./.github/workflows/resuable_gpu_build.yml`. The job will pass 7 inputs to the called workflow: the input `cuda_version` is `cu111`, the input `remote_runtime_docker` is `bladedisc:latest-runtime-torch1.8.1-cu111`, the input `develop_base_image` is `nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04`, the input `runtime_base_image` is `nvidia/cuda:11.1.1-cudnn8-devel-ubuntu18.04`, the input `extra_envs` is `-e TORCH_BLADE_BUILD_TENSORRT_STATIC=ON -e TORCH_BLADE_CI_BUILD_TORCH_VERSION=1.8.1+cu111`, the input `exec_command` is `bash ./scripts/ci/test_pytorch_blade.sh` and the input `deploy_command` is `TORCH_VERSION=1.8.1+cu111 bash ./scripts/ci/deploy_pytorch_blade.sh`. The job will pass 4 secrets to the called workflow: the secret `ALIYUN_DOCKER_USERNAME` is `${{ secrets.ALIYUN_DOCKER_USERNAME }}`, the secret `ALIYUN_DOCKER_PASSWORD` is `${{ secrets.ALIYUN_DOCKER_PASSWORD }}`, the secret `DOCKER_USERNAME` is `${{ secrets.DOCKER_USERNAME }}` and the secret `DOCKER_PASSWORD` is `${{ secrets.DOCKER_PASSWORD }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6033428736359803}, {"id": "63c493ff8052faa2781a8681", "level": "level5", "llm_response": "```yaml name: Check License Lines\n\non:\n  push:\n    branches:\n      - '*'\n      - '*'\n\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: kt3k/license_checker@v1.0.6\n        with:\n          check-issues: true\n          check-prereleases: true\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Check License Lines\non:\n  push:\n    branches: '**'\n#  pull_request:\n#    branches:\n#      - main\njobs:\n  check-license-lines:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check License Lines\n        uses: kt3k/license_checker@v1.0.6```", "prompt": "Generate a GitHub Workflow named `Check License Lines` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch whose name matches * or a branch whose name matches *. The workflow has one job. The job id of the 1st job is `check-license-lines`. This job will run on ubuntu-latest runner. The job `check-license-lines` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Check License Lines`. This step runs action `kt3k/license_checker` tagged as v1.0.6. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.5635190098079903}, {"id": "63c494888052faa2781abb68", "level": "level5", "llm_response": "```yaml name: MERGE_MASTER_TO_DEVELOP\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Checkout develop\n        uses: actions/checkout@v3\n        with:\n          ref: develop\n          fetch-depth: 0\n\n      - name: Merge master to develop and push\n        run: |\n          git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\n          git config user.email '${{ secrets.BPMN_IO_EMAIL }}'\n          git merge -m 'Merge master to develop' --no-edit origin/master\n          git push\n\n      - name: Notify failure on Slack\n        uses: slackapi/slack-github-action@v1.15.0\n        if: failure()\n        env:\n          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}\n        with:\n          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}\n          slack-message: |\n            Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.\n```", "answer": "```yaml name: MERGE_MASTER_TO_DEVELOP\non:\n  push:\n    branches:\n    - \"master\"\n\njobs:\n  Merge_master_to_develop:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n    - name: Checkout develop\n      uses: actions/checkout@v3\n      with:\n        ref: develop\n        fetch-depth: 0\n    - name: Merge master to develop and push\n      run: |\n        git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\n        git config user.email '${{ secrets.BPMN_IO_EMAIL }}'\n        git merge -m 'Merge master to develop' --no-edit origin/master\n        git push\n\n    - name: Notify failure on Slack\n      if: failure()\n      uses: slackapi/slack-github-action@v1.15.0\n      with:\n        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}\n        slack-message: \"Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.\"\n      env:\n        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}\n```", "prompt": "Generate a GitHub Workflow named `MERGE_MASTER_TO_DEVELOP` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `Merge_master_to_develop`. This job will run on ubuntu-latest runner. The job `Merge_master_to_develop` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting only applies to the job `Merge_master_to_develop`. The job `Merge_master_to_develop` has 3 steps. The 1st step is named `Checkout develop`. This step runs action `actions/checkout` tagged as v3. The step defines 2 input parameters for the action: `ref` is set to `develop` and `fetch-depth` is set to `0`. The 2nd step is named `Merge master to develop and push`. This step runs a script: `git config user.name '${{ secrets.BPMN_IO_USERNAME }}'\ngit config user.email '${{ secrets.BPMN_IO_EMAIL }}'\ngit merge -m 'Merge master to develop' --no-edit origin/master\ngit push\n`. The 3rd step is named `Notify failure on Slack`. This step will run only if the condition(failure()) is met. The step sets an environment variable to use: `SLACK_BOT_TOKEN` is set to `${{ secrets.SLACK_BOT_TOKEN }}`. This step runs action `slackapi/slack-github-action` tagged as v1.15.0. The step defines 2 input parameters for the action: `channel-id` is set to `${{ secrets.SLACK_CHANNEL_ID }}` and `slack-message` is set to `Automatic merge of <https://github.com/${{ github.repository }}/tree/${{ github.ref }}|${{ github.ref }}> to <https://github.com/${{ github.repository }}/tree/develop|${{ github.repository }}#develop> failed.`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8673640685292142}, {"id": "63c494298052faa2781a987a", "level": "level5", "llm_response": "```yaml name: Hypothesis Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 6 * * *'\n\nenv:\n  python_version: 3.10\n\npermissions:\n  issues: write\n\njobs:\n  hypothesis:\n    runs-on: ubuntu-22.04\n    timeout-minutes: 90\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Install Linux Dependencies\n        uses: ./.github/actions/linux_dependencies\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: ${{ env.python_version }}\n      - name: Use Python Dependency Cache\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-hypothesis\n      - name: Use Hypothesis Cache\n        uses: pat-s/always-upload-cache@v3.0.1\n        with:\n          path: .hypothesis\n          key: ${{ runner.os }}-hypothesis\n      - name: Install Dependencies and Test\n        uses: ./.github/actions/setup_and_test\n      - name: Test with Hypothesis\n        run: xvfb-run poetry run pytest -m hypothesis --hypothesis-profile=ci\n      - name: Create Issue on Failure\n        if: failure()\n        uses: nashmaniac/create-issue-action@v1.1\n        with:\n          title: Hypothesis tests failed\n          token: ${{secrets.GITHUB_TOKEN}}\n          labels: bug,hypothesis\n          body: |\n            Test run failed for commit ${{github.sha}}.\n            See https://github.com/gaphor/gaphor/actions/workflows/hypothesis-test.yml.\n```", "answer": "```yaml name: Hypothesis Tests\non:\n  workflow_dispatch:\n  schedule:\n    # min hour dom month dow\n    - cron:  '0 6 * * *'\nenv:\n  python_version: '3.10'\n\npermissions:\n  issues: write\n\njobs:\n\n  hypothesis:\n    runs-on: ubuntu-22.04\n    timeout-minutes: 90\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Install Linux Dependencies\n        uses: ./.github/actions/linux_dependencies\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: ${{ env.python_version }}\n      - name: Use Python Dependency Cache\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-20.04\n      - name: Use Hypothesis Cache\n        uses: pat-s/always-upload-cache@v3.0.1\n        with:\n          path: .hypothesis\n          key: ${{ runner.os }}-hypothesis\n      - name: Install Dependencies and Test\n        uses: ./.github/actions/setup_and_test\n      - name: Test with Hypothesis\n        run: xvfb-run poetry run pytest -m hypothesis --hypothesis-profile=ci\n        shell: bash\n      - uses: nashmaniac/create-issue-action@v1.1\n        if: failure()\n        name: Create Issue on Failure\n        with:\n          title: Hypothesis tests failed\n          token: ${{secrets.GITHUB_TOKEN}}\n          labels: bug,hypothesis\n          body: |\n            Test run failed for commit ${{github.sha}}.\n            See https://github.com/gaphor/gaphor/actions/workflows/hypothesis-test.yml.\n```", "prompt": "Generate a GitHub Workflow named `Hypothesis Tests` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) the scheduled time has come: at 06:00 am. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope. This permission setting applies to all jobs in the workflow. The workflow sets an environment variable to use: `python_version` is set to `3.10`. The workflow has one job. The job id of the 1st job is `hypothesis`. This job will run on ubuntu-22.04 runner. The maximum number of minutes to run the job is 90. The job `hypothesis` has 8 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3.1.0. The step defines an input parameter for the action: `ref` is set to `${{ github.event.pull_request.head.sha }}`. The 2nd step is named `Install Linux Dependencies`. This step runs action `./.github/actions/linux_dependencies`.The 3rd step is named `Set up Python`. This step runs action `actions/setup-python` tagged as v4.3.0. The step defines an input parameter for the action: `python-version` is set to `${{ env.python_version }}`. The 4th step is named `Use Python Dependency Cache`. This step runs action `actions/cache` tagged as v3.0.11. The step defines 2 input parameters for the action: `path` is set to `~/.cache/pip` and `key` is set to `${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-20.04`. The 5th step is named `Use Hypothesis Cache`. This step runs action `pat-s/always-upload-cache` tagged as v3.0.1. The step defines 2 input parameters for the action: `path` is set to `.hypothesis` and `key` is set to `${{ runner.os }}-hypothesis`. The 6th step is named `Install Dependencies and Test`. This step runs action `./.github/actions/setup_and_test`.The 7th step is named `Test with Hypothesis`. This step uses bash to run a script: `xvfb-run poetry run pytest -m hypothesis --hypothesis-profile=ci`. The 8th step is named `Create Issue on Failure`. This step will run only if the condition(failure()) is met. This step runs action `nashmaniac/create-issue-action` tagged as v1.1. The step defines 4 input parameters for the action: `title` is set to `Hypothesis tests failed`, `token` is set to `${{secrets.GITHUB_TOKEN}}`, `labels` is set to `bug,hypothesis` and `body` is set to `Test run failed for commit ${{github.sha}}.\nSee https://github.com/gaphor/gaphor/actions/workflows/hypothesis-test.yml.\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8847965405236761}, {"id": "63c495038052faa2781aede8", "level": "level5", "llm_response": "```yaml name: Python package\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: windows-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Create Conda environment with the rights deps\n        uses: conda-incubator/setup-miniconda@v2\n        with:\n          auto-update-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n      - name: Install dependencies\n        run: |\n          conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n          conda activate zarr-env\n          python -m pip install --upgrade pip\n          python -m pip install -U pip setuptools wheel\n          python -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\n          python -m pip install .\n          python -m pip freeze\n          npm install -g azurite\n      - name: Run Tests\n        run: |\n          conda activate zarr-env\n          mkdir ~/blob_emulator\n          azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n          pytest -sv --timeout=300\n      - name: Conda info\n        shell: bash -l {0}\n        run: conda info\n      - name: Conda list\n        shell: bash -l {0}\n        run: conda list\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Python package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  windows:\n    name: Windows Tests\n    runs-on: \"windows-latest\"\n    strategy:\n      fail-fast: True\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: conda-incubator/setup-miniconda@v2\n        with:\n          auto-update-conda: true\n          python-version: ${{ matrix.python-version }}\n          channels: conda-forge\n        env:\n          ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n      - name: Create Conda environment with the rights deps\n        shell: bash -l {0}\n        run: |\n          conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n      - name: Install dependencies\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          python -m pip install --upgrade pip\n          python -m pip install -U pip setuptools wheel\n          python -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\n          python -m pip install .\n          python -m pip freeze\n          npm install -g azurite\n      - name: Run Tests\n        shell: bash -l {0}\n        run: |\n          conda activate zarr-env\n          mkdir ~/blob_emulator\n          azurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\n          pytest -sv --timeout=300\n        env:\n          ZARR_TEST_ABS: 1\n          ZARR_V3_EXPERIMENTAL_API: 1\n      - name: Conda info\n        shell: bash -l {0}\n        run: conda info\n      - name: Conda list\n        shell: pwsh\n        run: conda list\n```", "prompt": "Generate a GitHub Workflow named `Python package` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The 1st job is named `Windows Tests` and its job id is `windows`. This job will run on windows-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `python-version` has 3 values: 3.8, 3.9 and 3.10. If any job run in the matrix fails, all in-progress and queued jobs in the matrix will be canceled. The job `windows` has 7 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named ``. The step sets an environment variable to use: `ACTIONS_ALLOW_UNSECURE_COMMANDS` is set to `True`. This step runs action `conda-incubator/setup-miniconda` tagged as v2. The step defines 3 input parameters for the action: `auto-update-conda` is set to `True`, `python-version` is set to `${{ matrix.python-version }}` and `channels` is set to `conda-forge`. The 3rd step is named `Create Conda environment with the rights deps`. This step uses a custom shell bash -l {0} to run a script: `conda create -n zarr-env python==${{matrix.python-version}} numcodecs pip nodejs\n`. The 4th step is named `Install dependencies`. This step uses a custom shell bash -l {0} to run a script: `conda activate zarr-env\npython -m pip install --upgrade pip\npython -m pip install -U pip setuptools wheel\npython -m pip install -r requirements_dev_numpy.txt -r requirements_dev_minimal.txt -r requirements_dev_optional.txt\npython -m pip install .\npython -m pip freeze\nnpm install -g azurite\n`. The 5th step is named `Run Tests`. The step sets 2 environment variables to use: `ZARR_TEST_ABS` is set to `1` and `ZARR_V3_EXPERIMENTAL_API` is set to `1`. This step uses a custom shell bash -l {0} to run a script: `conda activate zarr-env\nmkdir ~/blob_emulator\nazurite -l ~/blob_emulator --debug debug.log 2>&1 > stdouterr.log &\npytest -sv --timeout=300\n`. The 6th step is named `Conda info`. This step uses a custom shell bash -l {0} to run a script: `conda info`. The 7th step is named `Conda list`. This step uses PowerShell Core to run a script: `conda list`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7057155741821299}, {"id": "63c494347843b612699ffaac", "level": "level5", "llm_response": "```yaml name: Monitor CI Scaler\n\non:\n  schedule:\n    - cron: \"05 14 * * *\" # 05:00 am & 05:00 pm\n\njobs:\n  MonitorCI:\n    name: monitor ci scaler\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v1\n        with:\n          submodules: recursive\n\n      - name: setup environment\n        run: bash ./scripts/dev_setup.sh -b -t -y\n\n      - name: check scaler\n        run: python3 ./scripts/monitor_autoscaler_recreate.py\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```", "answer": "```yaml name: Monitor CI Scaler\n\non:\n  # workflow_dispatch:\n  schedule:\n    - cron: '0 5,17 * * *'\n\njobs:\n  MonitorCI:\n    name: monitor ci scaler\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v1\n        with:\n          submodules: recursive\n      - name: setup environment\n        run: bash ./scripts/dev_setup.sh  -b -t -y\n      - name: check scaler\n        run: python3 ./scripts/monitor_autoscaler_recreate.py\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```", "prompt": "Generate a GitHub Workflow named `Monitor CI Scaler` for a GitHub repository whose primary programming language is Rust. This workflow will be triggered by an event: the scheduled time has come: at 05:00 am and 05:00 pm. The workflow has one job. The 1st job is named `monitor ci scaler` and its job id is `MonitorCI`. This job will run on ubuntu-latest runner. The job `MonitorCI` has 3 steps. The 1st step is named `checkout`. This step runs action `actions/checkout` tagged as v1. The step defines an input parameter for the action: `submodules` is set to `recursive`. The 2nd step is named `setup environment`. This step runs a script: `bash ./scripts/dev_setup.sh  -b -t -y`. The 3rd step is named `check scaler`. The step sets 2 environment variables to use: `AWS_ACCESS_KEY_ID` is set to `${{ secrets.AWS_ACCESS_KEY_ID }}` and `AWS_SECRET_ACCESS_KEY` is set to `${{ secrets.AWS_SECRET_ACCESS_KEY }}`. This step runs a script: `python3 ./scripts/monitor_autoscaler_recreate.py`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.804373704482995}, {"id": "63c494cf8052faa2781ad80f", "level": "level5", "llm_response": "```yaml name: Release Documentation\n\non:\n  release:\n    types: [published]\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        java: [8]\n        os: [ubuntu-22.04]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-caches-\n\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrapper\n\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: zulu\n          java-version: ${{ matrix.java }}\n\n      - name: Build with Gradle\n        run: ./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace\n```", "answer": "```yaml name: Release Documentation\non:\n  release:\n    types: [published]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail'\n\njobs:\n  java-build:\n    name: Publish Release Documentation\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        java: [ '8' ]\n        os: ['ubuntu-22.04' ]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Cache Gradle dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-caches-\n      - name: Cache Gradle wrappers\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/wrapper\n          key: ${{ runner.os }}-gradle-wrapper\n      - name: Setup java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: ${{ matrix.java }}\n      - name: Build with Gradle\n        run: ./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace\n```", "prompt": "Generate a GitHub Workflow named `Release Documentation` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: a release, pre-release, or draft of a release is published. The workflow sets an environment variable to use: `GRADLE_OPTS` is set to `-Dorg.gradle.daemon=false -Dorg.gradle.java.installations.auto-detect=false -Dorg.gradle.warning.mode=fail`. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The 1st job is named `Publish Release Documentation` and its job id is `java-build`. This job will run on ${{ matrix.os }} runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `java` has one value: 8. The variable `os` has one value: ubuntu-22.04. The job `java-build` has 5 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Cache Gradle dependencies`. This step runs action `actions/cache` tagged as v3. The step defines 3 input parameters for the action: `path` is set to `~/.gradle/caches`, `key` is set to `${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle') }}` and `restore-keys` is set to `${{ runner.os }}-gradle-caches-\n`. The 3rd step is named `Cache Gradle wrappers`. This step runs action `actions/cache` tagged as v3. The step defines 2 input parameters for the action: `path` is set to `~/.gradle/wrapper` and `key` is set to `${{ runner.os }}-gradle-wrapper`. The 4th step is named `Setup java`. This step runs action `actions/setup-java` tagged as v3. The step defines 2 input parameters for the action: `distribution` is set to `zulu` and `java-version` is set to `${{ matrix.java }}`. The 5th step is named `Build with Gradle`. This step runs a script: `./gradlew tutorialPublish -Paeron.ci.apiKey=${{ secrets.WIKI_PAGE_TOKEN }} --stacktrace`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8103731254213896}, {"id": "63c496851899db58864d368d", "level": "level5", "llm_response": "```yaml name: Bump repositories\n\non:\n  schedule:\n    - cron: '0 22 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Bump cos \ud83d\udd27\n        run: |\n          docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\n          docker cp yq:/usr/bin/yq ./\n          export YQ=$PWD/yq\n          sudo -E bash ./.github/bump_repositories.sh\n          rm -rf yq\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.PAT_TOKEN }}\n          push-to-fork: ci-robbot/c3os\n          commit-message: :arrow_up: Update repositories\n          title: \"Repositories bump\"\n          body: |\n            Bump of luet repositories\n```", "answer": "```yaml name: Bump repositories\non: \n schedule:\n   - cron: 0 20 * * *\n workflow_dispatch:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Bump cos \ud83d\udd27\n      run: |\n           docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\n           docker cp yq:/usr/bin/yq ./\n           export YQ=$PWD/yq\n           sudo -E bash ./.github/bump_repositories.sh\n           rm -rf yq\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      with:\n        token: ${{ secrets.PAT_TOKEN }}\n        push-to-fork: ci-robbot/c3os\n        commit-message: \":arrow_up: Update repositories\"\n        title: \"Repositories bump\"\n        body: \"Bump of luet repositories\"\n```", "prompt": "Generate a GitHub Workflow named `Bump repositories` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 08:00 pm. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Bump cos \ud83d\udd27`. This step runs a script: `docker run --name=yq -v \"${PWD}\":/workdir mikefarah/yq\ndocker cp yq:/usr/bin/yq ./\nexport YQ=$PWD/yq\nsudo -E bash ./.github/bump_repositories.sh\nrm -rf yq\n`. The 3rd step is named `Create Pull Request`. This step runs action `peter-evans/create-pull-request` tagged as v4. The step defines 5 input parameters for the action: `token` is set to `${{ secrets.PAT_TOKEN }}`, `push-to-fork` is set to `ci-robbot/c3os`, `commit-message` is set to `:arrow_up: Update repositories`, `title` is set to `Repositories bump` and `body` is set to `Bump of luet repositories`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "could not parse as YAML: yaml: line 25: mapping values are not allowed in this context", "filepath": "../tmp/test.yml", "line": 25, "column": 0, "kind": "syntax-check", "snippet": "          commit-message: :arrow_up: Update repositories", "end_column": 0}]}, "bleu_score": 0.8002560175387411}, {"id": "63c4945a7843b61269a00a52", "level": "level5", "llm_response": "```yaml name: ci\n\non:\n  pull_request:\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          load: true\n          push: false\n          tags: ${{ env.TEST_TAG }}\n      - name: Run\n        run: docker run --rm ${{ env.TEST_TAG }} ci\n```", "answer": "```yaml name: ci\n\non:\n  pull_request:\n\nenv:\n  TEST_TAG: protoc-gen-validate:${{ github.sha }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          load: true\n          push: false\n          tags: ${{ env.TEST_TAG }}\n      - name: Run\n        run: |\n          docker run --rm ${{ env.TEST_TAG }} ci\n```", "prompt": "Generate a GitHub Workflow named `ci` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow sets an environment variable to use: `TEST_TAG` is set to `protoc-gen-validate:${{ github.sha }}`. The workflow has one job. The job id of the 1st job is `docker`. This job will run on ubuntu-latest runner. The job `docker` has 5 steps. The 1st step is named `Checkout`. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Set up QEMU`. This step runs action `docker/setup-qemu-action` tagged as v2. The 3rd step is named `Set up Docker Buildx`. This step runs action `docker/setup-buildx-action` tagged as v2. The 4th step is named `Build and export to Docker`. This step runs action `docker/build-push-action` tagged as v3. The step defines 4 input parameters for the action: `context` is set to `.`, `load` is set to `True`, `push` is set to `False` and `tags` is set to `${{ env.TEST_TAG }}`. The 5th step is named `Run`. This step runs a script: `docker run --rm ${{ env.TEST_TAG }} ci\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9609949206919333}, {"id": "63c49698b008460c1df15629", "level": "level5", "llm_response": "```yaml name: Auto Assign PR to Author\n\non:\n  pull_request_target:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: 'Auto Assign PR to Author'\non:\n  pull_request:\n    types: [opened]\n\npermissions:\n  contents: read\n\njobs:\n  add-reviews:\n    permissions:\n      contents: read  # for kentaro-m/auto-assign-action to fetch config file\n      pull-requests: write  # for kentaro-m/auto-assign-action to assign PR reviewers\n    runs-on: ubuntu-latest\n    steps:\n      - uses: kentaro-m/auto-assign-action@v1.2.1\n```", "prompt": "Generate a GitHub Workflow named `Auto Assign PR to Author` for a GitHub repository whose primary programming language is Groovy. This workflow will be triggered by an event: a pull request is created. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has one job. The job id of the 1st job is `add-reviews`. This job will run on ubuntu-latest runner. The job `add-reviews` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `add-reviews`. The job `add-reviews` has one step. The 1st step is named ``. This step runs action `kentaro-m/auto-assign-action` tagged as v1.2.1. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.3810086085039357}, {"id": "63c494a87843b61269a02a08", "level": "level5", "llm_response": "```yaml name: Test\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - run: pip install -r requirements/build-docs.txt\n      - run: linkcheckMarkdown docs/ -v -r\n      - run: mkdocs build --verbose\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install -r requirements/build-docs.txt\n      - run: linkcheckMarkdown docs/ -v -r\n      - run: mkdocs build --verbose\n```", "prompt": "Generate a GitHub Workflow named `Test` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. 3) the scheduled time has come: at 12:00 am. The workflow has one job. The job id of the 1st job is `docs`. This job will run on ubuntu-latest runner. The job `docs` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named ``. This step runs action `actions/setup-python` tagged as v4. The step defines an input parameter for the action: `python-version` is set to `3.x`. The 3rd step is named ``. This step runs a script: `pip install -r requirements/build-docs.txt`. The 4th step is named ``. This step runs a script: `linkcheckMarkdown docs/ -v -r`. The 5th step is named ``. This step runs a script: `mkdocs build --verbose`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8501299808090442}, {"id": "63c4956d7843b61269a07890", "level": "level5", "llm_response": "```yaml name: Issue Comments for merge\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  check_comments_merge:\n    name: Check comments for /merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Command\n        uses: xgtv/slash-command-action@v1.1.0\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          command: merge\n          reaction: true\n          reaction-type: eyes\n          allow-edits: false\n          permission-level: admin\n\n  merge:\n    needs: check_comments_merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge Pull Request\n        uses: juliangruber/merge-pull-request-action@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          number: ${{ github.event.issue.number }}\n          method: merge\n\n  commentFeedback:\n    needs: merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add reaction on success\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reaction-type: hooray\n```", "answer": "```yaml on: issue_comment\nname: Issue Comments for merge\njobs:\n  check_comments_merge:\n    name: Check comments for /merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Command\n        uses: xt0rted/slash-command-action@v1.1.0\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          command: merge\n          reaction: \"true\"\n          reaction-type: \"eyes\"\n          allow-edits: \"false\"\n          permission-level: admin\n  merge:\n    runs-on: ubuntu-latest\n    needs: [check_comments_merge]\n    steps:\n      - name: Merge Pull Request\n        uses: juliangruber/merge-pull-request-action@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          number: ${{ github.event.issue.number }}\n          method: merge\n  commentFeedback:\n    runs-on: ubuntu-latest\n    needs: [merge]\n    steps:\n      - name: Add reaction on success\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reaction-type: hooray\n```", "prompt": "Generate a GitHub Workflow named `Issue Comments for merge` for a GitHub repository whose primary programming language is HCL. This workflow will be triggered by an event: activity related to an issue or pull request comment occurs. The workflow has 3 jobs. The 1st job is named `Check comments for /merge` and its job id is `check_comments_merge`. This job will run on ubuntu-latest runner. The job `check_comments_merge` has one step. The 1st step is named `Check for Command`. This step runs action `xt0rted/slash-command-action` tagged as v1.1.0. The step defines 6 input parameters for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `command` is set to `merge`, `reaction` is set to `true`, `reaction-type` is set to `eyes`, `allow-edits` is set to `false` and `permission-level` is set to `admin`. The job id of the 2nd job is `merge`. Before this job runs, `check_comments_merge` must complete successfully. This job will run on ubuntu-latest runner. The job `merge` has one step. The 1st step is named `Merge Pull Request`. This step runs action `juliangruber/merge-pull-request-action` tagged as v1.1.0. The step defines 3 input parameters for the action: `github-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `number` is set to `${{ github.event.issue.number }}` and `method` is set to `merge`. The job id of the 3rd job is `commentFeedback`. Before this job runs, `merge` must complete successfully. This job will run on ubuntu-latest runner. The job `commentFeedback` has one step. The 1st step is named `Add reaction on success`. This step runs action `peter-evans/create-or-update-comment` tagged as v2. The step defines 4 input parameters for the action: `token` is set to `${{ secrets.GITHUB_TOKEN }}`, `repository` is set to `${{ github.event.client_payload.github.payload.repository.full_name }}`, `comment-id` is set to `${{ github.event.client_payload.github.payload.comment.id }}` and `reaction-type` is set to `hooray`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7464141123591371}, {"id": "63c4951b8052faa2781af857", "level": "level5", "llm_response": "```yaml name: Docs Build\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install deps\n        run: |\n          npm install vuepress -D\n          npm install macaca-ecosystem -D\n\n      - name: Build docs\n        run: |\n          npm run docs:build\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        if: success()\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs_dist\n```", "answer": "```yaml name: Docs Build\n\non:\n  # allows to manually run the job at any time\n  workflow_dispatch:\n  \n  # run on every push on the master branch\n  push:\n    branches:\n      - master\n\njobs:\n  docs-build:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set node version to 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install deps\n        run: |\n          npm install vuepress -D\n          npm install macaca-ecosystem -D\n\n      - name: Build docs\n        run: npm run docs:build\n\n      - name: Deploy to GitHub Pages\n        if: success()\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs_dist\n```", "prompt": "Generate a GitHub Workflow named `Docs Build` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. 2) The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `docs-build`. This job will run on ubuntu-latest runner. The maximum number of minutes to run the job is 10. The job `docs-build` has 5 steps. The 1st step is named `Checkout`. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named `Set node version to 16`. This step runs action `actions/setup-node` tagged as v3. The step defines an input parameter for the action: `node-version` is set to `16`. The 3rd step is named `Install deps`. This step runs a script: `npm install vuepress -D\nnpm install macaca-ecosystem -D\n`. The 4th step is named `Build docs`. This step runs a script: `npm run docs:build`. The 5th step is named `Deploy to GitHub Pages`. This step will run only if the condition(success()) is met. This step runs action `peaceiris/actions-gh-pages` tagged as v3. The step defines 2 input parameters for the action: `github_token` is set to `${{ secrets.GITHUB_TOKEN }}` and `publish_dir` is set to `./docs_dist`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8172754642508234}, {"id": "63c494027843b612699fe5e4", "level": "level5", "llm_response": "```yaml name: \"CLA\"\n\non: pull_request\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - run: ./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"\n```", "answer": "```yaml name: CLA\non: [pull_request]\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: ./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"\n```", "prompt": "Generate a GitHub Workflow named `CLA` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The job id of the 1st job is `check`. This job will run on ubuntu-latest runner. The job `check` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v1. The 2nd step is named ``. This step runs a script: `./ci/check-cla.sh \"${{ github.event.pull_request.user.login }}\"`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7819448965013119}, {"id": "63c4968933b087f6bde2ca37", "level": "level5", "llm_response": "```yaml name: e2e-kind-upgrades\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/bazel\n          key: bazel\n      - name: End-to-end (k3d)\n        run: make test/e2e/k3d-upgrades\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: e2e-kind-upgrades\n\non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  e2e-kind-upgrades:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: End-to-end (k3d)\n        run: make test/e2e/k3d-upgrades\n```", "prompt": "Generate a GitHub Workflow named `e2e-kind-upgrades` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. 3) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `e2e-kind-upgrades`. This job will run on ubuntu-latest runner. The job `e2e-kind-upgrades` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Mount bazel cache`. This step runs action `actions/cache` tagged as v3. The step defines 2 input parameters for the action: `path` is set to `~/.cache/bazel` and `key` is set to `bazel`. The 3rd step is named `End-to-end (k3d)`. This step runs a script: `make test/e2e/k3d-upgrades`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6244081272325337}, {"id": "63c494fc8052faa2781aead3", "level": "level5", "llm_response": "```yaml name: Update Release List\n\non:\n  workflow_run:\n    workflows: [\"Build\"]\n    types:\n      - completed\n    branches:\n      - master\n\npermissions:\n  contents: write\n\nenv:\n  USER_NAME: \"ctags-win32 CI\"\n  USER_EMAIL: \"ctags-win32-ci@users.noreply.github.com\"\n  COL_RED: \"\\033[31m\"\n  COL_GREEN: \"\\033[32m\"\n  COL_YELLOW: \"\\033[33m\"\n  COL_RESET: \"\\033[0m\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: main\n      - uses: actions/checkout@v3\n        with:\n          repository: ${{ github.repository }}.wiki\n          path: wiki\n      - name: Update Release List\n        run: |\n          cd main\n          latest=$(cat ctagsver.txt)\n          cd ../wiki\n          ../main/scripts/update-release-list.py\n          git add Releases-in-*.md\n          if git diff HEAD --quiet; then\n            echo ${COL_YELLOW}No updates.${COL_RESET}\n          else\n            git config --local user.name ${USER_NAME}\n            git config --local user.email ${USER_EMAIL}\n            git commit -a -m \"Update Release List to ${latest}\"\n            git push origin HEAD\n          fi\n```", "answer": "```yaml name: Update Release List\n\non:\n  #release:\n  #  types: [published]\n  workflow_run:\n    workflows: [\"Build\"]\n    branches: [master]\n    types: [completed]\n\npermissions:\n  contents: write # to update wiki\n\nenv:\n  # Account for committing\n  USER_NAME: \"ctags-win32 CI\"\n  USER_EMAIL: \"ctags-win32-ci@users.noreply.github.com\"\n\n  # Escape sequences\n  COL_RED: \"\\x1b[31m\"\n  COL_GREEN: \"\\x1b[32m\"\n  COL_YELLOW: \"\\x1b[33m\"\n  COL_RESET: \"\\x1b[m\"\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        path: main\n\n    - uses: actions/checkout@v3\n      with:\n        repository: \"${{ github.repository }}.wiki\"\n        path: wiki\n\n    - name: Update Release List\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        cd main\n        latest=$(cat ctagsver.txt)\n        cd ../wiki\n        ../main/scripts/update-release-list.py\n        git add Releases-in-*.md\n        if git diff HEAD --quiet; then\n          echo ${COL_YELLOW}No updates.${COL_RESET}\n        else\n          git config --local user.name ${USER_NAME}\n          git config --local user.email ${USER_EMAIL}\n          git commit -a -m \"Update Release List to ${latest}\"\n          git push origin HEAD\n        fi\n```", "prompt": "Generate a GitHub Workflow named `Update Release List` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: the workflow named Build is completed on a branch whose name matches master. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow sets 6 environment variables to use: `USER_NAME` is set to `ctags-win32 CI`, `USER_EMAIL` is set to `ctags-win32-ci@users.noreply.github.com`, `COL_RED` is set to `\u001b[31m`, `COL_GREEN` is set to `\u001b[32m`, `COL_YELLOW` is set to `\u001b[33m` and `COL_RESET` is set to `\u001b[m`. The workflow has one job. The job id of the 1st job is `update`. This job will run only if the condition(${{ github.event.workflow_run.conclusion == 'success' }}) is met. This job will run on ubuntu-latest runner. The job `update` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `path` is set to `main`. The 2nd step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines 2 input parameters for the action: `repository` is set to `${{ github.repository }}.wiki` and `path` is set to `wiki`. The 3rd step is named `Update Release List`. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GITHUB_TOKEN }}`. This step runs a script: `cd main\nlatest=$(cat ctagsver.txt)\ncd ../wiki\n../main/scripts/update-release-list.py\ngit add Releases-in-*.md\nif git diff HEAD --quiet; then\n  echo ${COL_YELLOW}No updates.${COL_RESET}\nelse\n  git config --local user.name ${USER_NAME}\n  git config --local user.email ${USER_EMAIL}\n  git commit -a -m \"Update Release List to ${latest}\"\n  git push origin HEAD\nfi\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.743859541889065}, {"id": "63c4969c1899db58864d4153", "level": "level5", "llm_response": "```yaml name: Docker Nightly Production\n\non:\n  push:\n    branches:\n      - mealie-next\nconcurrency:\n  group: nightly-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  backend-tests:\n    name: Backend Server Tests\n    uses: ./.github/workflows/partial-backend.yml\n    with:\n      dockerfile: mealie-next/mealie-api:nightly\n      image: mealie-next/mealie-api:nightly\n\n  frontend-tests:\n    name: Frontend and End-to-End Tests\n    uses: ./.github/workflows/partial-frontend.yml\n    with:\n      dockerfile: mealie-next/mealie-frontend:nightly\n      image: mealie-next/mealie-frontend:nightly\n\n  build-release:\n    name: Build Tagged Release\n    uses: ./.github/workflows/partial-builder.yml\n    secrets:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n    with:\n      tag: nightly\n    steps:\n      - name: \"Discord notification\"\n        uses: Ilshidur/action-discord@0.3.2\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_NIGHTLY_WEBHOOK }}\n\n  notify-discord:\n    name: Notify Discord\n    runs-on: ubuntu-latest\n    if: success()\n    needs: [build-release]\n    steps:\n      - name: \"Discord notification\"\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.DEMO_SERVER_IP }}\n          username: ${{ secrets.DEMO_SERVER_USER }}\n          key: ${{ secrets.DEMO_SERVER_SSH_KEY }}\n          port: ${{ secrets.DEMO_SERVER_PORT }}\n          script_stop: true\n          script: |\n            cd ~/docker/mealie-next\n            docker-compose pull\n            docker-compose down -v\n            docker-compose up -d\n```", "answer": "```yaml name: Docker Nightly Production\n\non:\n  push:\n    branches:\n      - mealie-next\n\nconcurrency:\n  group: nightly-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  backend-tests:\n    name: \"Backend Server Tests\"\n    uses: ./.github/workflows/partial-backend.yml\n\n  frontend-tests:\n    name: \"Frontend and End-to-End Tests\"\n    uses: ./.github/workflows/partial-frontend.yml\n\n  build-release:\n    name: Build Tagged Release\n    uses: ./.github/workflows/partial-builder.yml\n    needs:\n      - frontend-tests\n      - backend-tests\n    with:\n      tag: nightly\n    secrets:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n\n  notify-discord:\n    name: Notify Discord\n    needs:\n      - build-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_NIGHTLY_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: \"\ud83d\ude80  A New build of mealie:api-nightly and mealie:frontend-nightly is available\"\n\n  deploy-demo:\n    runs-on: ubuntu-latest\n    name: Deploy Demo\n    needs:\n      - build-release\n    steps:\n      - name: Clean and Deploy Demo\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.DEMO_SERVER_IP }}\n          username: ${{ secrets.DEMO_SERVER_USER }}\n          key: ${{ secrets.DEMO_SERVER_SSH_KEY }}\n          port: ${{ secrets.DEMO_SERVER_PORT }}\n          script_stop: true\n          script: |\n            cd ~/docker/mealie-next\n            docker-compose pull\n            docker-compose down -v\n            docker-compose up -d\n```", "prompt": "Generate a GitHub Workflow named `Docker Nightly Production` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named mealie-next. Only a single workflow using the nightly-${{ github.ref }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has 5 jobs. The 1st job is named `Backend Server Tests` and its job id is `backend-tests`. This job will call a reusable workflow located at `./.github/workflows/partial-backend.yml`. The 2nd job is named `Frontend and End-to-End Tests` and its job id is `frontend-tests`. This job will call a reusable workflow located at `./.github/workflows/partial-frontend.yml`. The 3rd job is named `Build Tagged Release` and its job id is `build-release`. Before this job runs, `frontend-tests` and `backend-tests` must complete successfully. This job will call a reusable workflow located at `./.github/workflows/partial-builder.yml`. The job will pass an input to the called workflow: the input `tag` is `nightly`. The job will pass 2 secrets to the called workflow: the secret `DOCKERHUB_USERNAME` is `${{ secrets.DOCKERHUB_USERNAME }}` and the secret `DOCKERHUB_TOKEN` is `${{ secrets.DOCKERHUB_TOKEN }}`. The 4th job is named `Notify Discord` and its job id is `notify-discord`. Before this job runs, `build-release` must complete successfully. This job will run on ubuntu-latest runner. The job `notify-discord` has one step. The 1st step is named `Discord notification`. The step sets an environment variable to use: `DISCORD_WEBHOOK` is set to `${{ secrets.DISCORD_NIGHTLY_WEBHOOK }}`. This step runs action `Ilshidur/action-discord` tagged as 0.3.2. The step defines an input parameter for the action: `args` is set to `\ud83d\ude80  A New build of mealie:api-nightly and mealie:frontend-nightly is available`. The 5th job is named `Deploy Demo` and its job id is `deploy-demo`. Before this job runs, `build-release` must complete successfully. This job will run on ubuntu-latest runner. The job `deploy-demo` has one step. The 1st step is named `Clean and Deploy Demo`. This step runs action `appleboy/ssh-action` from the master branch. The step defines 6 input parameters for the action: `host` is set to `${{ secrets.DEMO_SERVER_IP }}`, `username` is set to `${{ secrets.DEMO_SERVER_USER }}`, `key` is set to `${{ secrets.DEMO_SERVER_SSH_KEY }}`, `port` is set to `${{ secrets.DEMO_SERVER_PORT }}`, `script_stop` is set to `True` and `script` is set to `cd ~/docker/mealie-next\ndocker-compose pull\ndocker-compose down -v\ndocker-compose up -d\n`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "when a reusable workflow is called with \"uses\", \"steps\" is not available. only following keys are allowed: \"name\", \"uses\", \"with\", \"secrets\", \"needs\", \"if\", and \"permissions\" in job \"build-release\"", "filepath": "../tmp/test.yml", "line": 34, "column": 5, "kind": "syntax-check", "snippet": "    steps:\n    ^~~~~~", "end_column": 10}]}, "bleu_score": 0.5598024229703289}, {"id": "63c494037843b612699fe649", "level": "level5", "llm_response": "```yaml name: Tag\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n      tag:\n        description: 'Tag'\n        default: 'latest'\n        required: true\npermissions:\n  # none\njobs:\n  build:\n    name: Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}\n    runs-on: ubuntu-latest\n    environment: release\n    steps:\n      - name: Setup Node\n        uses: actions/setup-node@v3\n      - name: Update tag\n        run: |\n          npm dist-tag add pnpm@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n          npm dist-tag add @pnpm/exe@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n```", "answer": "```yaml name: Tag\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version\n        required: true\n      tag:\n        description: Tag\n        default: latest\n        required: true\n\npermissions: {}\njobs:\n  build:\n    name: Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}\n    environment: release\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setup Node\n      uses: actions/setup-node@v3\n    - name: Update tag\n      env:\n        \"npm_config_//registry.npmjs.org/:_authToken\": ${{ secrets.NPM_TOKEN }}\n      run: |\n        npm dist-tag add pnpm@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n        npm dist-tag add @pnpm/exe@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n```", "prompt": "Generate a GitHub Workflow named `Tag` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. This workflow receives 2 inputs: version-this input represents version and it must be supplied; tag-this input represents tag, its default value is latest and it must be supplied. The workflow modifies the default permissions for the GITHUB_TOKEN: the workflow disables permissions for the GITHUB_TOKEN across all scopes. This permission setting applies to all jobs in the workflow. The workflow has one job. The 1st job is named `Tagging ${{ github.event.inputs.version }} as ${{ github.event.inputs.tag }}` and its job id is `build`. This job will run on ubuntu-latest runner. This job references release environment. The job `build` has 2 steps. The 1st step is named `Setup Node`. This step runs action `actions/setup-node` tagged as v3. The 2nd step is named `Update tag`. The step sets an environment variable to use: `npm_config_//registry.npmjs.org/:_authToken` is set to `${{ secrets.NPM_TOKEN }}`. This step runs a script: `npm dist-tag add pnpm@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\nnpm dist-tag add @pnpm/exe@${{ github.event.inputs.version }} ${{ github.event.inputs.tag }}\n`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "string should not be empty", "filepath": "../tmp/test.yml", "line": 12, "column": 13, "kind": "syntax-check", "snippet": "permissions:\n            ^", "end_column": 13}, {"message": "\"\" is invalid for permission for all the scopes. available values are \"read-all\" and \"write-all\"", "filepath": "../tmp/test.yml", "line": 12, "column": 13, "kind": "permissions", "snippet": "permissions:\n            ^", "end_column": 13}]}, "bleu_score": 0.6992246710068238}, {"id": "63c4949a8052faa2781ac0b0", "level": "level5", "llm_response": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-pnpm-modules\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-\n      - uses: actions/cache@v3\n        with:\n          path: ~/.next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}\n      - uses: pnpm/action-setup@v2.2.4\n        with:\n          version: 7.x.x\n          run_install: true\n      - name: Build project\n        run: |\n          yarn build\n          yarn lint\n        env:\n          CI: true\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-pnpm-modules\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ${{ github.workspace }}/.next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}\n          restore-keys: |\n            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-\n      - uses: pnpm/action-setup@v2.2.4\n        with:\n          version: 7.x.x\n          run_install: true\n      - name: Build project\n        run: |\n          yarn build\n          yarn lint\n        env:\n          CI: true\n```", "prompt": "Generate a GitHub Workflow named `Node.js CI` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named master. 2) The workflow would run whenever there is a pull_request event targeting: a branch named master. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `node-version` has one value: 16.x. The job `build` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Use Node.js ${{ matrix.node-version }}`. This step runs action `actions/setup-node` tagged as v3. The step defines an input parameter for the action: `node-version` is set to `${{ matrix.node-version }}`. The 3rd step is named `Cache pnpm modules`. The step sets an environment variable to use: `cache-name` is set to `cache-pnpm-modules`. This step runs action `actions/cache` tagged as v3. The step defines 3 input parameters for the action: `path` is set to `~/.pnpm-store`, `key` is set to `${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}` and `restore-keys` is set to `${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n`. The 4th step is named ``. This step runs action `actions/cache` tagged as v3. The step defines 3 input parameters for the action: `path` is set to `${{ github.workspace }}/.next/cache\n`, `key` is set to `${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}` and `restore-keys` is set to `${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-\n`. The 5th step is named ``. This step runs action `pnpm/action-setup` tagged as v2.2.4. The step defines 2 input parameters for the action: `version` is set to `7.x.x` and `run_install` is set to `True`. The 6th step is named `Build project`. The step sets an environment variable to use: `CI` is set to `True`. This step runs a script: `yarn build\nyarn lint\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8442718336861952}, {"id": "63c4967e1899db58864d33dd", "level": "level5", "llm_response": "```yaml name: Lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Commit Message\n        run: .github/lint-commit-message.sh\n      - name: File names\n        run: .github/lint-filename.sh\n      - name: Functions\n        run: .github/lint-disallowed-functions-in-library.sh\n      - name: Logging messages should not have trailing newlines\n        run: .github/lint-no-trailing-newline-in-log-messages.sh\n\n  lint-go:\n    name: Go\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: read\n    steps:\n      - uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.45.2\n          args: ${{ GOLANGCI_LINT_EXRA_ARGS }}\n```", "answer": "```yaml #\n# DO NOT EDIT THIS FILE\n#\n# It is automatically copied from https://github.com/pion/.goassets repository.\n# If this repository should have package specific CI config,\n# remove the repository name from .goassets/.github/workflows/assets-sync.yml.\n#\n# If you want to update the shared CI config, send a PR to\n# https://github.com/pion/.goassets instead of this repository.\n#\n\nname: Lint\non:\n  pull_request:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions:\n  contents: read\n\njobs:\n  lint-commit-message:\n    name: Metadata\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n        - uses: actions/checkout@v3\n          with:\n            fetch-depth: 0\n\n        - name: Commit Message\n          run: .github/lint-commit-message.sh\n\n        - name: File names\n          run: .github/lint-filename.sh\n\n        - name: Functions\n          run: .github/lint-disallowed-functions-in-library.sh\n\n        - name: Logging messages should not have trailing newlines\n          run: .github/lint-no-trailing-newline-in-log-messages.sh\n\n  lint-go:\n    name: Go\n    permissions:\n      contents: read\n      pull-requests: read\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: v1.45.2\n          args: $GOLANGCI_LINT_EXRA_ARGS\n```", "prompt": "Generate a GitHub Workflow named `Lint` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by an event: a pull request is created, the title or body of a pull request is edited or a pull request's head branch is updated. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. The workflow has 2 jobs. The 1st job is named `Metadata` and its job id is `lint-commit-message`. This job will run on ubuntu-latest runner. The job `lint-commit-message` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The step defines an input parameter for the action: `fetch-depth` is set to `0`. The 2nd step is named `Commit Message`. This step runs a script: `.github/lint-commit-message.sh`. The 3rd step is named `File names`. This step runs a script: `.github/lint-filename.sh`. The 4th step is named `Functions`. This step runs a script: `.github/lint-disallowed-functions-in-library.sh`. The 5th step is named `Logging messages should not have trailing newlines`. This step runs a script: `.github/lint-no-trailing-newline-in-log-messages.sh`. The 2nd job is named `Go` and its job id is `lint-go`. This job will run on ubuntu-latest runner. The job `lint-go` modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope and read access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `lint-go`. The job `lint-go` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `golangci-lint`. This step runs action `golangci/golangci-lint-action` tagged as v3. The step defines 2 input parameters for the action: `version` is set to `v1.45.2` and `args` is set to `$GOLANGCI_LINT_EXRA_ARGS`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": [{"message": "undefined variable \"GOLANGCI_LINT_EXRA_ARGS\". available variables are \"env\", \"github\", \"inputs\", \"job\", \"matrix\", \"needs\", \"runner\", \"secrets\", \"steps\", \"strategy\", \"vars\"", "filepath": "../tmp/test.yml", "line": 39, "column": 21, "kind": "expression", "snippet": "          args: ${{ GOLANGCI_LINT_EXRA_ARGS }}\n                    ^~~~~~~~~~~~~~~~~~~~~~~", "end_column": 43}]}, "bleu_score": 0.752068504169799}, {"id": "63c4947b8052faa2781ab631", "level": "level5", "llm_response": "```yaml name: Publish Test Results\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types:\n      - completed\n\njobs:\n  test-results:\n    name: Test Results\n    if: github.event.workflow_run.conclusion != 'skipped'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download and Extract Artifacts\n        run: |\n          mkdir -p artifacts && cd artifacts\n\n          artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\n          gh api \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\n          do\n            IFS=$'\\t' read name url <<< \"$artifact\"\n            gh api $url > \"$name.zip\"\n            unzip -d \"$name\" \"$name.zip\"\n          done\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          commit: ${{ github.event.workflow_run.head_sha }}\n          event_file: artifacts/Event File/event.json\n          event_name: ${{ github.event.workflow_run.event }}\n          junit_files: |\n            artifacts/**/surefire-reports/*.xml\n            artifacts/**/failsafe-reports/TEST-*.xml\n```", "answer": "```yaml # Publishing of unit test results has to be a separate workflow in order to support forked PRs\n# See https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches\nname: Publish Test Results\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\njobs:\n  test-results:\n    name: Test Results\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion != 'skipped'\n\n    steps:\n      - name: Download and Extract Artifacts\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        run: |\n          mkdir -p artifacts && cd artifacts\n\n          artifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\n          gh api \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\n          do\n            IFS=$'\\t' read name url <<< \"$artifact\"\n            gh api $url > \"$name.zip\"\n            unzip -d \"$name\" \"$name.zip\"\n          done\n\n      - name: Publish Test Results\n        uses: EnricoMi/publish-unit-test-result-action@v2\n        with:\n          commit: ${{ github.event.workflow_run.head_sha }}\n          event_file: artifacts/Event File/event.json\n          event_name: ${{ github.event.workflow_run.event }}\n          junit_files: |\n            artifacts/**/surefire-reports/*.xml\n            artifacts/**/failsafe-reports/TEST-*.xml\n```", "prompt": "Generate a GitHub Workflow named `Publish Test Results` for a GitHub repository whose primary programming language is Java. This workflow will be triggered by an event: the workflow named CI is completed. The workflow has one job. The 1st job is named `Test Results` and its job id is `test-results`. This job will run only if the condition(github.event.workflow_run.conclusion != 'skipped') is met. This job will run on ubuntu-latest runner. The job `test-results` has 2 steps. The 1st step is named `Download and Extract Artifacts`. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{secrets.GITHUB_TOKEN}}`. This step runs a script: `mkdir -p artifacts && cd artifacts\n\nartifacts_url=${{ github.event.workflow_run.artifacts_url }}\n\ngh api \"$artifacts_url\" -q '.artifacts[] | [.name, .archive_download_url] | @tsv' | while read artifact\ndo\n  IFS=$'\\t' read name url <<< \"$artifact\"\n  gh api $url > \"$name.zip\"\n  unzip -d \"$name\" \"$name.zip\"\ndone\n`. The 2nd step is named `Publish Test Results`. This step runs action `EnricoMi/publish-unit-test-result-action` tagged as v2. The step defines 4 input parameters for the action: `commit` is set to `${{ github.event.workflow_run.head_sha }}`, `event_file` is set to `artifacts/Event File/event.json`, `event_name` is set to `${{ github.event.workflow_run.event }}` and `junit_files` is set to `artifacts/**/surefire-reports/*.xml\nartifacts/**/failsafe-reports/TEST-*.xml\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8797408032363959}, {"id": "63c4950a7843b61269a0501c", "level": "level5", "llm_response": "```yaml name: Integration test on schedule (minimal)\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: ['1.22', '1.23']\n    secrets:\n      special_case_secrets: inherit\n```", "answer": "```yaml name: Integration test on schedule (minimal)\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  start-integration-test-minimal:\n    name: Start integration test (minimal)\n    uses: ./.github/workflows/integration.yml\n    secrets: inherit\n    with:\n      install_profile: minimal\n      cluster_region: ams3\n      kubernetes_versions: \"['1.22', '1.23']\"\n```", "prompt": "Generate a GitHub Workflow named `Integration test on schedule (minimal)` for a GitHub repository whose primary programming language is Mustache. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. Only a single workflow using the ${{ github.workflow }}-${{ github.ref }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Start integration test (minimal)` and its job id is `start-integration-test-minimal`. This job will call a reusable workflow located at `./.github/workflows/integration.yml`. The job will pass 3 inputs to the called workflow: the input `install_profile` is `minimal`, the input `cluster_region` is `ams3` and the input `kubernetes_versions` is `['1.22', '1.23']`. The job will pass a secret to the called workflow: the secret `special_case_secrets` is `inherit`. ", "infinite_loop": false, "lint_score": {"valid": false, "output": [{"message": "expected scalar node for string value but found sequence node with \"!!seq\" tag", "filepath": "../tmp/test.yml", "line": 18, "column": 28, "kind": "syntax-check", "snippet": "      kubernetes_versions: ['1.22', '1.23']\n                           ^~~~~~~~", "end_column": 35}]}, "bleu_score": 0.5536759186294598}, {"id": "63c496891e3364807577b43d", "level": "level5", "llm_response": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        env:\n          TOKEN: ${{ github.token }}\n        run: |\n          curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n```", "answer": "```yaml name: Check Actions rate limit\non:\n  workflow_dispatch:\n\njobs:\n  check:\n    name: Check Actions rate limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check rate limit\n        env:\n          TOKEN: ${{ github.token }}\n        run: |\n          curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n```", "prompt": "Generate a GitHub Workflow named `Check Actions rate limit` for a GitHub repository whose primary programming language is PHP. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Check Actions rate limit` and its job id is `check`. This job will run on ubuntu-latest runner. The job `check` has one step. The 1st step is named `Check rate limit`. The step sets an environment variable to use: `TOKEN` is set to `${{ github.token }}`. This step runs a script: `curl -v --no-progress-meter --header \"Authorization: Bearer $TOKEN\" https://api.github.com/rate_limit\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c4969e1899db58864d41ee", "level": "level5", "llm_response": "```yaml name: Auto message on Creating Issue.\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Create comment for issue\n      uses: peter-evans/create-or-update-comment@v1\n      if: github.event_name == 'issues'\n      with:\n        issue-number: ${{tojson(github.event.issue.number)}}\n        body: |\n          Hi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n```", "answer": "```yaml name: Auto message on Creating Issue.\n\non:\n\n  issues:\n\n    types: [opened]\n\njobs:\n\n  greeting:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Create comment for issue\n\n      if: github.event_name =='issues' \n\n      uses: peter-evans/create-or-update-comment@v1\n\n      with:\n\n        issue-number: ${{tojson(github.event.issue.number)}}\n\n        body: |\n\n            Hi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n```", "prompt": "Generate a GitHub Workflow named `Auto message on Creating Issue.` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: an issue is opened. The workflow has one job. The job id of the 1st job is `greeting`. This job will run on ubuntu-latest runner. The job `greeting` has one step. The 1st step is named `Create comment for issue`. This step will run only if the condition(github.event_name =='issues') is met. This step runs action `peter-evans/create-or-update-comment` tagged as v1. The step defines 2 input parameters for the action: `issue-number` is set to `${{tojson(github.event.issue.number)}}` and `body` is set to `\nHi \ud83d\ude04, @${{ github.actor }} Thanks for creating an issue at FunwithPhysics. We request you to follow the contributing guidelines. \n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8781614704543165}, {"id": "63c496941899db58864d3d85", "level": "level5", "llm_response": "```yaml name: release-please\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          release-type: simple\n          version-file: ./version.txt\n          package-name: release-please-action\n          default-branch: master\n```", "answer": "```yaml name: release-please\non:\n   push:\n      branches:\n         - master\njobs:\n   release-please:\n      runs-on: ubuntu-latest\n      steps:\n         - uses: GoogleCloudPlatform/release-please-action@v2\n           with:\n            token: ${{ secrets.GITHUB_TOKEN }}\n            release-type: simple\n            version-file: \"./version.txt\"\n            package-name: release-please-action\n            default-branch: master\n```", "prompt": "Generate a GitHub Workflow named `release-please` for a GitHub repository whose primary programming language is Swift. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named master. The workflow has one job. The job id of the 1st job is `release-please`. This job will run on ubuntu-latest runner. The job `release-please` has one step. The 1st step is named ``. This step runs action `GoogleCloudPlatform/release-please-action` tagged as v2. The step defines 5 input parameters for the action: `token` is set to `${{ secrets.GITHUB_TOKEN }}`, `release-type` is set to `simple`, `version-file` is set to `./version.txt`, `package-name` is set to `release-please-action` and `default-branch` is set to `master`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9025139799587886}, {"id": "63c496486fc19abdf9c9b0d5", "level": "level5", "llm_response": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: '0 12 * * 1'\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 'latest'\n      - uses: actions/setup-node@v3\n        with:\n          cache: pnpm\n          node-version-file: .nvmrc\n          registry-url: 'https://npm.pkg.github.com'\n      - run: rm -rf pnpm-lock.yaml **/node_modules/\n      - run: pnpm install\n      - uses: EndBug/add-and-commit@v9\n        with:\n          message: 'chore(deps): upgrade versions'\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}\n```", "answer": "```yaml name: Dependencies\n\non:\n  schedule:\n    - cron: \"0 12 * * 1\"\n  workflow_dispatch:\n\njobs:\n  upgrade:\n    name: Upgrade dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2\n        with:\n          version: latest\n      - uses: actions/setup-node@v3\n        with:\n          cache: \"pnpm\"\n          node-version-file: \".nvmrc\"\n          registry-url: \"https://npm.pkg.github.com\"\n      - run: rm -rf pnpm-lock.yaml **/node_modules/\n      - run: pnpm install\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}\n      - uses: EndBug/add-and-commit@v9\n        with:\n          message: \"chore(deps): upgrade versions\"\n```", "prompt": "Generate a GitHub Workflow named `Dependencies` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) the scheduled time has come: at 12:00 pm, only on monday. 2) someone manually triggers the workflow. The workflow has one job. The 1st job is named `Upgrade dependencies` and its job id is `upgrade`. This job will run on ubuntu-latest runner. The job `upgrade` has 6 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs action `pnpm/action-setup` tagged as v2. The step defines an input parameter for the action: `version` is set to `latest`. The 3rd step is named ``. This step runs action `actions/setup-node` tagged as v3. The step defines 3 input parameters for the action: `cache` is set to `pnpm`, `node-version-file` is set to `.nvmrc` and `registry-url` is set to `https://npm.pkg.github.com`. The 4th step is named ``. This step runs a script: `rm -rf pnpm-lock.yaml **/node_modules/`. The 5th step is named ``. The step sets an environment variable to use: `NODE_AUTH_TOKEN` is set to `${{ secrets.NPM_GITHUB_TOKEN }}`. This step runs a script: `pnpm install`. The 6th step is named ``. This step runs action `EndBug/add-and-commit` tagged as v9. The step defines an input parameter for the action: `message` is set to `chore(deps): upgrade versions`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6662100151153273}, {"id": "63c494a48052faa2781ac54e", "level": "level5", "llm_response": "```yaml name: lint\non:\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'docs/**'\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx cspell \"**\" --dot --no-progress\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: yarn\n      - run: yarn lint\n```", "answer": "```yaml name: lint\non: # rebuild any PRs and main branch changes\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"docs/**\"\n\njobs:\n  cspell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: npx cspell \"**\" --dot --no-progress\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: yarn\n      - run: yarn lint\n```", "prompt": "Generate a GitHub Workflow named `lint` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by multiple events: 1) When all the path names of pull_request event match patterns in the paths-ignore filter(docs/**), the workflow will not run. 2) The workflow would run whenever there is a push event to: a branch named main. When all the path names of push event match patterns in the paths-ignore filter(docs/**), the workflow will not run. The workflow has 2 jobs. The job id of the 1st job is `cspell`. This job will run on ubuntu-latest runner. The job `cspell` has 2 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs a script: `npx cspell \"**\" --dot --no-progress`. The job id of the 2nd job is `lint`. This job will run on ubuntu-latest runner. The job `lint` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named ``. This step runs a script: `yarn`. The 3rd step is named ``. This step runs a script: `yarn lint`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6946803393352118}, {"id": "63c4957d8052faa2781b229c", "level": "level5", "llm_response": "```yaml name: Build site nightly\n\non:\n  schedule:\n    - cron: 0 0 * * *\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: curl\n        uses: wei/curl@v1\n        env:\n          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}\n        with:\n          args: -X POST -d '{}' \"$NETLIFY_BUILD_HOOK\"\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nname: Build site nightly\n\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n\njobs:\n  dot-release:\n    name: dot-release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: curl\n        env:\n          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}\n        uses: wei/curl@v1\n        with:\n          args: -X POST -d '{}' \"$NETLIFY_BUILD_HOOK\"\n```", "prompt": "Generate a GitHub Workflow named `Build site nightly` for a GitHub repository whose primary programming language is HTML. This workflow will be triggered by an event: the scheduled time has come: at 12:00 am. The workflow has one job. The 1st job is named `dot-release` and its job id is `dot-release`. This job will run on ubuntu-latest runner. The job `dot-release` has one step. The 1st step is named `curl`. The step sets an environment variable to use: `NETLIFY_BUILD_HOOK` is set to `${{ secrets.NETLIFY_BUILD_HOOK }}`. This step runs action `wei/curl` tagged as v1. The step defines an input parameter for the action: `args` is set to `-X POST -d '{}' \"$NETLIFY_BUILD_HOOK\"`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.7175526939668979}, {"id": "63c4968633b087f6bde2c8ea", "level": "level5", "llm_response": "```yaml name: Run checks\n\non:\n  push:\n    branches: [ main ]\n    tags: [ \"0.*\", \"1.*\", \"2.*\" ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [ py36, py37, flake8 ]\n        python: [ '3.6', '3.7' ]\n        include:\n          - environment: py36\n            python: '3.6'\n          - environment: py37\n            python: '3.7'\n          - environment: flake8\n            python: '3.7'\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: python -m pip install --upgrade pip\n        shell: bash\n      - name: Run tox\n        run: tox -e ${{ matrix.environment }}\n        shell: bash\n```", "answer": "```yaml name: Run checks\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - \"[0-9]+.[0-9]+.[0-9]+\"\n      - \"[0-9]+.[0-9]+.[0-9]+rc[0-9]+\"\n\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tox:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment:\n          - \"py36\"\n          - \"py37\"\n          - \"flake8\"\n\n        include:\n          - environment: \"py36\"\n            python: \"3.6\"\n          - environment: \"py37\"\n            python: \"3.7\"\n          - environment: \"flake8\"\n            python: \"3.7\"\n\n    container:\n      image: python:${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@master\n      - name: Install tox\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install tox\n      - name: Run tox\n        run: |\n          tox -e ${{ matrix.environment }}\n```", "prompt": "Generate a GitHub Workflow named `Run checks` for a GitHub repository whose primary programming language is Python. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main, a tag whose name matches [0-9]+.[0-9]+.[0-9]+ or a tag whose name matches [0-9]+.[0-9]+.[0-9]+rc[0-9]+. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. The workflow has one job. The job id of the 1st job is `tox`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `environment` has 3 values: py36, py37 and flake8. For each object in the [{'environment': 'py36', 'python': '3.6'}, {'environment': 'py37', 'python': '3.7'}, {'environment': 'flake8', 'python': '3.7'}] list, the key:value pairs in the object will be added to each of the matrix combinations if none of the key:value pairs overwrite any of the original matrix values. If the object cannot be added to any of the matrix combinations, a new matrix combination will be created instead. The job creates a Docker container that uses `python:${{ matrix.python }}` image. The job `tox` has 3 steps. The 1st step is named ``. This step runs action `actions/checkout` from the master branch. The 2nd step is named `Install tox`. This step runs a script: `python -m pip install --upgrade pip\npython -m pip install tox\n`. The 3rd step is named `Run tox`. This step runs a script: `tox -e ${{ matrix.environment }}\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.39370195994209783}, {"id": "63c494187843b612699fef56", "level": "level5", "llm_response": "```yaml name: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  fork_update_pr:\n    name: Fork Update PR\n    if: github.repository_owner != 'HariSekhon'\n    uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Fork Update PR\n\non:\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 10 * * 1'\n\npermissions:\n  contents: write\n  pull-requests: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: false\n\njobs:\n  fork_update_pr:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == true\n    if: github.repository_owner != 'HariSekhon'\n    name: Fork Update PR\n    uses: HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "prompt": "Generate a GitHub Workflow named `Fork Update PR` for a GitHub repository whose primary programming language is Shell. This workflow will be triggered by multiple events: 1) someone manually triggers the workflow. This workflow receives an input: debug-the data type is boolean, it is optional and its default value is False. 2) the scheduled time has come: at 10:00 am, only on monday. The workflow modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `contents` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the ${{ github.ref }}-${{ github.workflow }} concurrency group will run at a time. The workflow has one job. The 1st job is named `Fork Update PR` and its job id is `fork_update_pr`. This job will run only if the condition(github.repository_owner != 'HariSekhon') is met. This job will call a reusable workflow located at `HariSekhon/GitHub-Actions/.github/workflows/fork-update-pr.yaml@master`. The job will pass an input to the called workflow: the input `debug` is `${{ github.event.inputs.debug }}`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8470020046867033}, {"id": "63c494e67843b61269a04123", "level": "level5", "llm_response": "```yaml name: CI\n\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: 2.10.4\n          channel: stable\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --set-exit-if-changed --dry-run .\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "answer": "```yaml name: CI\non:\n  pull_request:\n    branches:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '.vscode/**'\n      - 'README.md'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v2\n        with:\n          flutter-version: '2.10.4'\n          channel: 'stable'\n\n      - name: Checkout OneSignal-Flutter-SDK\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6\n        run: flutter pub get\n\n      - name: Static Analysis\n        run: flutter analyze\n\n      - name: Ensure the Dart code is formatted correctly\n        run: flutter format --set-exit-if-changed --dry-run .\n\n      - name: Run Flutter unit tests\n        run: flutter test\n```", "prompt": "Generate a GitHub Workflow named `CI` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a pull_request event targeting: a branch whose name matches **. When all the path names of pull_request event match patterns in the paths-ignore filter(.github/**, .vscode/** or README.md), the workflow will not run. 2) someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 6 steps. The 1st step is named `Setup Flutter`. This step runs action `subosito/flutter-action` tagged as v2. The step defines 2 input parameters for the action: `flutter-version` is set to `2.10.4` and `channel` is set to `stable`. The 2nd step is named `Checkout OneSignal-Flutter-SDK`. This step runs action `actions/checkout` tagged as v3. The 3rd step is named `Install Dependencies \ud83d\udd17\u26d3\ud83d\udce6`. This step runs a script: `flutter pub get`. The 4th step is named `Static Analysis`. This step runs a script: `flutter analyze`. The 5th step is named `Ensure the Dart code is formatted correctly`. This step runs a script: `flutter format --set-exit-if-changed --dry-run .`. The 6th step is named `Run Flutter unit tests`. This step runs a script: `flutter test`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9431936168998568}, {"id": "63c4957b8052faa2781b219f", "level": "level5", "llm_response": "```yaml name: Go\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**.go'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**.go'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Build\n        run: go build -v ./...\n      - name: Test\n        run: go test -cover -v ./...\n```", "answer": "```yaml name: Go\n\non:\n  push:\n    branches: [ main ]\n    paths:\n      - '**.go'\n  pull_request:\n    branches: [ main ]\n    paths:\n      - '**.go'\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.18\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Test\n      run: go test -cover -v ./...\n```", "prompt": "Generate a GitHub Workflow named `Go` for a GitHub repository whose primary programming language is Go. This workflow will be triggered by multiple events: 1) The workflow would run whenever there is a push event to: a branch named main. Only if at least one path of push event matches a pattern in the paths filter(**.go), the workflow runs. 2) The workflow would run whenever there is a pull_request event targeting: a branch named main. Only if at least one path of pull_request event matches a pattern in the paths filter(**.go), the workflow runs. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 4 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Set up Go`. This step runs action `actions/setup-go` tagged as v3. The step defines an input parameter for the action: `go-version` is set to `1.18`. The 3rd step is named `Build`. This step runs a script: `go build -v ./...`. The 4th step is named `Test`. This step runs a script: `go test -cover -v ./...`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8350943952895464}, {"id": "63c495928052faa2781b2bc1", "level": "level5", "llm_response": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml \n# https://github.com/actions/create-release\nname: Create Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@latest\n        env:\n          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "prompt": "Generate a GitHub Workflow named `Create Release` for a GitHub repository whose primary programming language is Erlang. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a tag whose name matches v*. The workflow has one job. The 1st job is named `Create Release` and its job id is `build`. This job will run on ubuntu-latest runner. The job `build` has 2 steps. The 1st step is named `Checkout code`. This step runs action `actions/checkout` from the master branch. The 2nd step is named `Create Release` and its id is `create_release`. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.GIT_TOKEN }}`. This step runs action `actions/create-release` tagged as latest. The step defines 4 input parameters for the action: `tag_name` is set to `${{ github.ref }}`, `release_name` is set to `${{ github.ref }}`, `draft` is set to `False` and `prerelease` is set to `False`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c496686fc19abdf9c9bea4", "level": "level5", "llm_response": "```yaml name: Drafts/updates the next repository release\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}\n```", "answer": "```yaml name: Drafts/updates the next repository release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}```", "prompt": "Generate a GitHub Workflow named `Drafts/updates the next repository release` for a GitHub repository whose primary programming language is Scala. This workflow will be triggered by an event: The workflow would run whenever there is a push event to: a branch named main. The workflow has one job. The job id of the 1st job is `update_release_draft`. This job will run on ubuntu-latest runner. The job `update_release_draft` has one step. The 1st step is named ``. The step sets an environment variable to use: `GITHUB_TOKEN` is set to `${{ secrets.ADMIN_GITHUB_TOKEN }}`. This step runs action `release-drafter/release-drafter` tagged as v5. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 1.0}, {"id": "63c494768052faa2781ab616", "level": "level5", "llm_response": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ocp-version: [v20.0.7, v21.0.0, dev-stable22, dev-stable23, dev-master]\n    name: Nextcloud ${{ matrix.ocp-version }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@master\n      - name: Set up php\n        uses: shivammathur/setup-php@master\n        with:\n          php-version: '7.4'\n          tools: composer:v1\n          coverage: none\n      - name: Install dependencies\n        run: composer i\n      - name: Install dependencies\n        run: composer require --dev christophwurst/nextcloud:${{ matrix.ocp-version }}\n      - name: Run coding standards check\n        run: composer run psalm\n```", "answer": "```yaml name: Static analysis\n\non: [pull_request]\n\njobs:\n  static-psalm-analysis:\n      runs-on: ubuntu-latest\n      strategy:\n          matrix:\n              ocp-version: [ 'v20.0.7', 'v21.0.0', 'dev-stable22', 'dev-stable23', 'dev-master' ]\n      name: Nextcloud ${{ matrix.ocp-version }}\n      steps:\n          - name: Checkout\n            uses: actions/checkout@master\n          - name: Set up php\n            uses: shivammathur/setup-php@master\n            with:\n                php-version: 7.4\n                tools: composer:v1\n                coverage: none\n          - name: Install dependencies\n            run: composer i\n          - name: Install dependencies\n            run: composer require --dev christophwurst/nextcloud:${{ matrix.ocp-version }}\n          - name: Run coding standards check\n            run: composer run psalm\n```", "prompt": "Generate a GitHub Workflow named `Static analysis` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow has one job. The 1st job is named `Nextcloud ${{ matrix.ocp-version }}` and its job id is `static-psalm-analysis`. This job will run on ubuntu-latest runner. The job uses a matrix strategy to automatically create multiple job runs that are based on the combinations of the variables. The variable `ocp-version` has 5 values: v20.0.7, v21.0.0, dev-stable22, dev-stable23 and dev-master. The job `static-psalm-analysis` has 5 steps. The 1st step is named `Checkout`. This step runs action `actions/checkout` from the master branch. The 2nd step is named `Set up php`. This step runs action `shivammathur/setup-php` from the master branch. The step defines 3 input parameters for the action: `php-version` is set to `7.4`, `tools` is set to `composer:v1` and `coverage` is set to `none`. The 3rd step is named `Install dependencies`. This step runs a script: `composer i`. The 4th step is named `Install dependencies`. This step runs a script: `composer require --dev christophwurst/nextcloud:${{ matrix.ocp-version }}`. The 5th step is named `Run coding standards check`. This step runs a script: `composer run psalm`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8429154179888873}, {"id": "63c4951f8052faa2781af9e5", "level": "level5", "llm_response": "```yaml name: IRC Notification\non: [push]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online'\n        uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n        with:\n          channel: '#cool-dev'\n          nickname: github-online\n          message: ${{ toJson(github.event) }}\n```", "answer": "```yaml name: \"IRC Notification\"\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: irc push\n        uses: vmiklos/notify-irc@bfd6f632b683859f6cd074e2ee9db68bef204f7d\n        if: github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online'\n        with:\n          channel: \"#cool-dev\"\n          nickname: github-online\n          message: |\n            ${{ toJson(github.event) }}\n```", "prompt": "Generate a GitHub Workflow named `IRC Notification` for a GitHub repository whose primary programming language is JavaScript. This workflow will be triggered by an event: a commit or tag is pushed, or a repository is cloned. The workflow has one job. The job id of the 1st job is `test`. This job will run on ubuntu-latest runner. The job `test` has one step. The 1st step is named `irc push`. This step will run only if the condition(github.event_name == 'push' && github.event.ref == 'refs/heads/master' && github.repository == 'CollaboraOnline/online') is met. This step runs action `vmiklos/notify-irc` whose commit is bfd6f632b683859f6cd074e2ee9db68bef204f7d. The step defines 3 input parameters for the action: `channel` is set to `#cool-dev`, `nickname` is set to `github-online` and `message` is set to `${{ toJson(github.event) }}\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.6563375311121028}, {"id": "63c493ee7843b612699fde0c", "level": "level5", "llm_response": "```yaml name: nf-core AWS test\non:\n  workflow_dispatch:\n\njobs:\n  run-tower:\n    if: github.repository == 'nf-core/mag'\n    name: Run AWS tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Launch workflow via tower\n        uses: nf-core/tower-action@v3\n        with:\n          workspace_id: ${{ secrets.TOWER_WORKSPACE_ID }}\n          access_token: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          compute_env: ${{ secrets.TOWER_COMPUTE_ENV }}\n          workdir: s3://${{ secrets.AWS_S3_BUCKET }}/work/mag/work-${{ github.sha }}\n          parameters: |\n            {\n              \"outdir\": \"s3://${{ secrets.AWS_S3_BUCKET }}/mag/results-test-${{ github.sha }}\"\n            }\n          profiles: test,aws_tower\n```", "answer": "```yaml name: nf-core AWS test\n# This workflow can be triggered manually with the GitHub actions workflow dispatch button.\n# It runs the -profile 'test' on AWS batch\n\non:\n  workflow_dispatch:\njobs:\n  run-tower:\n    name: Run AWS tests\n    if: github.repository == 'nf-core/mag'\n    runs-on: ubuntu-latest\n    steps:\n      # Launch workflow using Tower CLI tool action\n      - name: Launch workflow via tower\n        uses: nf-core/tower-action@v3\n        with:\n          workspace_id: ${{ secrets.TOWER_WORKSPACE_ID }}\n          access_token: ${{ secrets.TOWER_ACCESS_TOKEN }}\n          compute_env: ${{ secrets.TOWER_COMPUTE_ENV }}\n          workdir: s3://${{ secrets.AWS_S3_BUCKET }}/work/mag/work-${{ github.sha }}\n          parameters: |\n            {\n              \"outdir\": \"s3://${{ secrets.AWS_S3_BUCKET }}/mag/results-test-${{ github.sha }}\"\n            }\n          profiles: test,aws_tower\n```", "prompt": "Generate a GitHub Workflow named `nf-core AWS test` for a GitHub repository whose primary programming language is Nextflow. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The 1st job is named `Run AWS tests` and its job id is `run-tower`. This job will run only if the condition(github.repository == 'nf-core/mag') is met. This job will run on ubuntu-latest runner. The job `run-tower` has one step. The 1st step is named `Launch workflow via tower`. This step runs action `nf-core/tower-action` tagged as v3. The step defines 6 input parameters for the action: `workspace_id` is set to `${{ secrets.TOWER_WORKSPACE_ID }}`, `access_token` is set to `${{ secrets.TOWER_ACCESS_TOKEN }}`, `compute_env` is set to `${{ secrets.TOWER_COMPUTE_ENV }}`, `workdir` is set to `s3://${{ secrets.AWS_S3_BUCKET }}/work/mag/work-${{ github.sha }}`, `parameters` is set to `{\n  \"outdir\": \"s3://${{ secrets.AWS_S3_BUCKET }}/mag/results-test-${{ github.sha }}\"\n}\n` and `profiles` is set to `test,aws_tower`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.9171154418811079}, {"id": "63c496981899db58864d3f73", "level": "level5", "llm_response": "```yaml name: Triage tasks\n\non:\n  pull_request_target:\n\nconcurrency:\n  group: triage-${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n\n      - name: Label pull request\n        if: always()\n        uses: Homebrew/actions/label-pull-requests@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n          def: |\n            - label: new cask\n              status: added\n              path: Casks/.+\n\n            - label: marked for removal/rejection\n              status: removed\n              path: Casks/.+\n\n            - label: documentation\n              path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n            - label: bump-cask-pr\n              pr_body_content: Created with `brew bump-cask-pr`\n\n            - label: missing description\n              path: Casks/.+\n              missing_content: \\n  desc .+\\n\n\n            - label: appcast migration needed\n              path: Casks/.+\n              content: \\n  appcast .+\\n\n```", "answer": "```yaml name: Triage tasks\n\non: pull_request_target\n\nconcurrency:\n  group: \"triage-${{ github.event.number }}\"\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check commit format\n        uses: Homebrew/actions/check-commit-format@master\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n      - name: Label pull request\n        uses: Homebrew/actions/label-pull-requests@master\n        if: always()\n        with:\n          token: ${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}\n          def: |\n            - label: new cask\n              status: added\n              path: Casks/.+\n\n            - label: marked for removal/rejection\n              status: removed\n              path: Casks/.+\n\n            - label: documentation\n              path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n            - label: bump-cask-pr\n              pr_body_content: Created with `brew bump-cask-pr`\n\n            - label: missing description\n              path: Casks/.+\n              missing_content: \\n  desc .+\\n\n\n            - label: appcast migration needed\n              path: Casks/.+\n              content: \\n  appcast .+\\n\n```", "prompt": "Generate a GitHub Workflow named `Triage tasks` for a GitHub repository whose primary programming language is Ruby. This workflow will be triggered by an event: there is activity relating to a pull request. The workflow modifies the default permissions for the GITHUB_TOKEN: read access is granted to the GITHUB_TOKEN in the `contents` scope. This permission setting applies to all jobs in the workflow. Only a single workflow using the triage-${{ github.event.number }} concurrency group will run at a time. When this workflow is queued, any currently running workflow in the same concurrency group will be canceled. The workflow has one job. The job id of the 1st job is `triage`. This job will run on ubuntu-latest runner. The job `triage` has 2 steps. The 1st step is named `Check commit format`. This step runs action `Homebrew/actions/check-commit-format` from the master branch. The step defines an input parameter for the action: `token` is set to `${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}`. The 2nd step is named `Label pull request`. This step will run only if the condition(always()) is met. This step runs action `Homebrew/actions/label-pull-requests` from the master branch. The step defines 2 input parameters for the action: `token` is set to `${{secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN}}` and `def` is set to `- label: new cask\n  status: added\n  path: Casks/.+\n\n- label: marked for removal/rejection\n  status: removed\n  path: Casks/.+\n\n- label: documentation\n  path: (.*\\.md|\\.github/ISSUE_TEMPLATE/.*\\.yml)\n\n- label: bump-cask-pr\n  pr_body_content: Created with `brew bump-cask-pr`\n\n- label: missing description\n  path: Casks/.+\n  missing_content: \\n  desc .+\\n\n\n- label: appcast migration needed\n  path: Casks/.+\n  content: \\n  appcast .+\\n\n`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8391006605476521}, {"id": "63c494a27843b61269a02781", "level": "level5", "llm_response": "```yaml name: Mark stale issues and pull requests\non:\n  schedule:\n    - cron: '16 8 * * *' # 08:16 am UTC\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: actions/stale@v5\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          ascending: true\n          stale-issue-message: \"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions\"\n          stale-pr-message: \"This PR has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions\"\n          stale-issue-label: no-issue-activity\n          stale-pr-label: no-pr-activity\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '16 8 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v5\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        ascending: true\n        stale-issue-message: 'This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions'\n        stale-pr-message: 'This PR has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```", "prompt": "Generate a GitHub Workflow named `Mark stale issues and pull requests` for a GitHub repository whose primary programming language is Dart. This workflow will be triggered by an event: the scheduled time has come: at 08:16 am. The workflow has one job. The job id of the 1st job is `stale`. This job will run on ubuntu-latest runner. The job `stale` modifies the default permissions for the GITHUB_TOKEN: write access is granted to the GITHUB_TOKEN in the `issues` scope and write access is granted to the GITHUB_TOKEN in the `pull-requests` scope. This permission setting only applies to the job `stale`. The job `stale` has one step. The 1st step is named ``. This step runs action `actions/stale` tagged as v5. The step defines 6 input parameters for the action: `repo-token` is set to `${{ secrets.GITHUB_TOKEN }}`, `ascending` is set to `True`, `stale-issue-message` is set to `This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions`, `stale-pr-message` is set to `This PR has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions`, `stale-issue-label` is set to `no-issue-activity` and `stale-pr-label` is set to `no-pr-activity`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8349107349670007}, {"id": "63c4963d6fc19abdf9c9abf2", "level": "level5", "llm_response": "```yaml name: Submit to Web Store\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: ${{ runner.os }}-\n      - uses: pnpm/action-setup@v2.2.1\n        with:\n          version: 7.1.0\n          run-install: true\n      - name: Build and zip extension artifact\n        run: pnpm build -- --zip\n      - name: Browser Platform Publish\n        uses: PlasmoHQ/bpp@v2\n        with:\n          keys: ${{ secrets.SUBMIT_KEYS }}\n          artifact: build/chrome-mv3-prod.zip\n```", "answer": "```yaml name: \"Submit to Web Store\"\r\non:\r\n  workflow_dispatch:\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - name: Cache pnpm modules\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: ~/.pnpm-store\r\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-\r\n      - uses: pnpm/action-setup@v2.2.1\r\n        with:\r\n          version: 7.1.0\r\n          run_install: true\r\n      - name: Build and zip extension artifact\r\n        run: pnpm build -- --zip\r\n      - name: Browser Platform Publish\r\n        uses: PlasmoHQ/bpp@v2\r\n        with:\r\n          keys: ${{ secrets.SUBMIT_KEYS }}\r\n          artifact: build/chrome-mv3-prod.zip\r\n```", "prompt": "Generate a GitHub Workflow named `Submit to Web Store` for a GitHub repository whose primary programming language is TypeScript. This workflow will be triggered by an event: someone manually triggers the workflow. The workflow has one job. The job id of the 1st job is `build`. This job will run on ubuntu-latest runner. The job `build` has 5 steps. The 1st step is named ``. This step runs action `actions/checkout` tagged as v3. The 2nd step is named `Cache pnpm modules`. This step runs action `actions/cache` tagged as v3. The step defines 3 input parameters for the action: `path` is set to `~/.pnpm-store`, `key` is set to `${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}` and `restore-keys` is set to `${{ runner.os }}-\n`. The 3rd step is named ``. This step runs action `pnpm/action-setup` tagged as v2.2.1. The step defines 2 input parameters for the action: `version` is set to `7.1.0` and `run_install` is set to `True`. The 4th step is named `Build and zip extension artifact`. This step runs a script: `pnpm build -- --zip`. The 5th step is named `Browser Platform Publish`. This step runs action `PlasmoHQ/bpp` tagged as v2. The step defines 2 input parameters for the action: `keys` is set to `${{ secrets.SUBMIT_KEYS }}` and `artifact` is set to `build/chrome-mv3-prod.zip`. ", "infinite_loop": false, "lint_score": {"valid": true, "output": []}, "bleu_score": 0.8664575456206797}]