{"id": "63c49eca1899db5886508f45", "level": "level4", "answer": "```yaml name: Update Changelog\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          ref: ${{ github.event.release.tag_name }}\n\n      - name: Update Changelog\n        uses: vnkmr/update-changelog-action@v1.2\n\n      - name: Commit updated CHANGELOG\n        run: git commit CHANGELOG.md --author \"[bot]github-actions[bot]@users.noreply.github.com\" --message \"ci: update changelog for release ${{ github.event.release.tag_name }}\"\n```"}
{"id": "63c497651842bc13d7763559", "level": "level2", "answer": "```yaml name: \"Lint\"\non:\n  pull_request:\n  push:\n    branches:\n      - master\n    tags:\n      - \"v*\"\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v5\n      - uses: actions/setup-go@v3\n        with:\n          go-version: \"1.20\"\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v2\n        with:\n          version: \"latest\"\n```\n"}
{"id": "63c49c0f1e3364807579e702", "level": "level5", "answer": "```yaml name: Label Pull Requests\n\non:\n  pull_request_target:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n\n      - uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aed1842bc13d777a15a", "level": "level3", "answer": "```yaml name: Close stale issues\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    uses: Cysharp/Actions/.github/workflows/stale-issue.yaml@main\n    with:\n      stale-issue-label: Close\n      new-pr-1s: 0\n      new-pr-2w: 0\n      new-pr-6w: 0\n      new-pr-12w: 0\n      stale-pr-24w: 0\n      stale-pr-6w: 50\n      stale-pr-12w: 50\n      stale-issue-12w: 50\n      stale-pr-12w: 50\n      new-issue-1s: 0\n      new-issue-2w: 1\n      new-issue-6w: 0\n      new-issue-12w: 0\n      stale-issue-2w: 50\n      stale-issue-6w: 50\n      stale-issue-12w: 50\n      stale-pr-50: 12\n      stale-issue-50: 24\n      issue-smile: 0\n      issue-give: 50\n      issue-reminiscent: 20\n      asset-1s: 6\n      asset-2w: 3\n      asset-amount-of: 5\n      max-asset-1s-over: 10\n      PR-NOT-NUMMER: '495'\n      PR-NUMMER: '500'\n      issue-number\u6d41zs.s: Extend on\n      are-2w-issues-not-number=\"%5BPR%20do...NewOpenClose%20N=\n      are-6w-issues-not-number=\"%5BPR%20do...NewOpenCloseNewOnIsRequired-ISSUES-\u4e0d\u66f4\u65b0\"\n```"}
{"id": "63c499f91899db58864ea1dc", "level": "level5", "answer": "```yaml name: automerge\non:\n  pull_request_target:\n    types:\n      - label\n      - unlabeled\n      - synchronized\n      - opened\n      - edited\n      - ready_for_review\n      - reopened\n      - unlocked\n  pull_request_review:\n    types:\n      - submitted\n  check_suite:\n    types:\n      - completed\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: pascalgn/automerge-action@v0.12.0\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c5aed06b748c7b1fadffa5", "level": "level1", "answer": "```yaml # A helper workflow that ensures everything will build in CI before being merged to\n# master\n\nname: Merge\n\non:\n  pull_request_target: {}\n  # Branches triggering this workflow must be list of strings in order to be\n  # interpolated, as the branch name is used in the concurrency key.\n  push:\n    branches: [master, main]\n\nconcurrency:\n  group: merge-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          java-version: \"21\"\n          distribution: \"temurin\"\n          server-id: \"gpr\"\n          server-username: \"GitHub\"\n          server-password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Prepare to Build\n        run: |\n          scripts/rust.sh\n          scripts/install-poetry.sh\n          scripts/setup-env.sh\n      - name: Merge\n        run: |\n          ./gradlew mergeSummary\n      - name: CI: Run tests in Docker container, once assigned a runner\n        run: |\n          make infra up\n      - name: CI: Run tests on host\n        run: make income-integration\n        env:\n          COMMAND_BLOCKING_TIMEOUT: 120\n          COMMAND_BLOCKING_RETRIES: 15\n          IMAGE: debian:bullseye-slim\n          CI_VERBOSE: 1\n          TEST_LOG_LEVEL: debug\n          DOCKER_INFLUXDB_INIT_MODE: off\n          DOCKER_INFLUXDB_CONFIG_APPENDPLUGINS: enabled\n          DOCKER_PORTAINER_ADMIN_PASSWORD: admin\n      - name: Stop ENV\n        if: always()\n        run: make infra down\n      - name: Capture artifacts\n        if: ${{ failure() }}\n        uses: actions/upload-artifact@main\n        with:\n          if-no-files-found: \"error\"\n          name: build_sim\n          path: build/sim_artifacts\n      - name: Capture ohnotrain component logs\n        if: ${{ failure() }}\n        uses: actions/upload-artifact@main\n        with:\n          if-no-files-found: \"error\"\n          name: ohnotrain\n          path: ohnotrain/*.log\n      - name: Capture cmap component logs\n        if: ${{ failure() }}\n        uses: actions/upload-artifact@main\n        with:\n          if-no-files-found: \"error\"\n          name: cmap\n          path: cmap/*.log\n```"}
{"id": "63c49755cbc73931bb17fb7b", "level": "level4", "answer": "```yaml name: Build and Upload to PyPI\n\non:\n  release:\n  push:\n    tags:\n      - v*\n  workflow_dispatch:\n\njobs:\n  build-artifacts:\n    if: github.repository == 'OceanParcels/parcels'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v6\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n      - name: Install dependencies\n        run: |\n          pip install pipenv setuptools wheel twine\n          pipenv install --deploy --ignore-pipfile\n      - name: Build tarball and wheels\n        run: |\n          # new version numbering method (compared to 2.x, 3.x): pipenv version <= @Build Branch (instead of @Release Candidate)\n          pipenv --venv\n          cd docs && make html\n          cd ../ && python setup.py sdist bdist_wheel\n      - name: Check built artifacts\n        run: |\n          ls -lah dist/*\n          file dist/*\n      - uses: actions/upload-artifact@v4.0.0\n        with:\n          name: dist\n          path: dist/*.tar.gz\n\n  test-built-dist:\n    runs-on: ubuntu-latest\n    needs: [build-artifacts]\n    steps:\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n      - uses: actions/download-artifact@v3\n        with:\n          name: dist\n          path: dist/\n      - name: List contents of built dist\n        run: ls -lah dist/\n      - name: Verify the built dist/wheel is valid\n        run: |\n          echo \"== Verify tarball ==\"\n          twine check dist/*\n      - name: Publish package to TestPyPI\n        uses: matrixorigin/publish-to-testpypi@v1\n        with:\n          username_test_pypi: ${{ secrets.TESTPYPI_USERNAME }}\n          password_test_pypi: ${{ secrets.TESTPYPI_PASSWORD }}\n          cwd: dist\n          package_pattern: parcels-*.tar.gz\n\n  upload-to-pypi:\n    if: github.event_name == 'release'\n    runs-on: ubuntu-latest\n    needs: [test-built-dist]\n    steps:\n      - uses: actions/checkout@v6\n      - name: Publish package to PyPI\n        uses: matrixorigin/publish-to-pypi@v1\n        with:\n          username_test_pypi: ${{ secrets.COCOAPODS_PYPI_USERNAME }}\n```"}
{"id": "63c49dea736e7f0ed8c64915", "level": "level4", "answer": "```yaml name: scratchpad\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: npm\n```"}
{"id": "63c49788cbc73931bb181065", "level": "level1", "answer": "```yaml name: Docker\non:\n  push:\n    branches:\n      - main\njobs:\n  build_and_push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Set up Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker cache\n        uses: actions/cache@v3\n        with:\n          path: /tmp/.buildx-cache\n          key: ${{ runner.os }}-buildx-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-buildx-        # Reuse cache if there have been any changes\n\n      - run: |\n          DOCKER_BUILDKIT=1 docker buildx build --platform linux/arm64,linux/amd64 --tag ghrc.io/infinitybot:linkspary -t ghrc.io/infinitybot:linkspary-${{ github.sha }} --push .\n\n# TODO\n# In future, use the following lines instead of the previous \"run\".\n#\n#      - name: Build and push\n#        uses: docker/build-push-action@v4\n#        with:\n#          context: .\n#          platforms: ${{ matrix.target }}\n#          tags: |\n#            ghcr.io/infinitybot/linkspary\n#            ghcr.io/infinitybot/linkspary-${{ github.sha }}\n```"}
{"id": "63c49aeacbc73931bb196cf6", "level": "level5", "answer": "```yaml name: gitLeaks\n\non:\n  push:\n    branches: [ master ]\n    paths-ignore:\n      - 'docs/**'\n  pull_request:\n    branches: [ master ]\n    paths-ignore:\n      - 'docs/**'\n\njobs:\n  gitleaks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3 # Star this repo at https://github.com/Ygomi/gitleaks-action\n\n      - name: wget\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run:  \"wget https://raw.githubusercontent.com/ycjcl868/gitleaks/master/.gitleaks.toml\"\n\n      - name: gitleaks-action\n        uses:  ./.github/actions/gitleaks-action\n```"}
{"id": "63c49bd2cbc73931bb19cd0f", "level": "level4", "answer": "```yaml name: Next Snapshot V1\non: # https://docs.github.com/en/actions/using-workflows/events-in-a-workflow#workflow_dispatch\n  workflow_dispatch:\njobs:\n  build:\n    # It might work on windows and if so we should try to switch to it.\n    runs-on: ubuntu-latest\n    env:\n      ACTIONS_ALLOW_UNSECURE_COMMANDS: true\n      MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n      MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}\n      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      SC_VERSION: None\n      SC_NEXT_VERSION: None\n      GPG_PRIVATE_KEY: ${{ secrets.OSSRH_GPG_PRIVATE_KEY }}\n      GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PRIVATE_PASSPHRASE }}\n    steps:\n    - uses: actions/checkout@v3\n    - uses: akhileshns/heroku-deploy@v3.16.6\n      name: \"Generate Token\"\n      id: generate-token,\n      with:\n        app-name: 'travelscope-action'\n        heroku-email: ${{ secrets.SNOWCLOUD_EMAIL }}\n        heroku-api-key: ${{ secrets.SNOWCLOUD_API_KEY }}\n    - name: Set up Python 2.7 \ud83d\udc0d\n      uses: actions/setup-python@v3\n      with:\n        python-version: 2.7\n    - name: Set up Java 8 \u2615\n      uses: actions/setup-java@v3\n      with:\n        java-version: 8\n        distribution: 'adopt'\n        server-id: ossrh\n        server-username: ${{ secrets.OSSRH_USERNAME }} \n        server-password: ${{ secrets.OSSRH_TOKEN }} \n    - name: Cache local Maven repository\n      uses: actions/cache@v3\n      with:\n        path: ~/.m2\n        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n        restore-keys: |\n          ${{ runner.os }}-maven\n          ${{ runner.os }}-\n          ${{ runner.os }}\n    - name: Run pre release script\n      id: preRelease\n      shell: bash -e\n      run: |\n        ./travis/snapshot-next-branch-move\n        echo \"::set-output name=nextBranchCadenceDeployBestofClass::${BUMP_BRANCH}\"\n    - name: configure git user email\n      run: git config  --global user.email \"${{ secrets.CI_DEVELOPER_EMAIL }}\"\n    - name: Checkout v1\n      uses: actions/checkout@v3\n      with:\n        path: \"v1\"\n    - name: Run next snapshot script\n      id: postRelease\n      shell: bash -e\n      run: |\n        export GITHUB_TOKEN=\"[[GITHUB_TOKEN]]\"\n        ./travis/snapshot-next-release-jdk-leak -v0.90\n    - name: Create Next Snapshot Pull Request\n      uses: peter-evans/create-pull-request@v3.2.3\n      env:\n        GITHUB_TOKEN: app/github-services\n      with:\n        title: \ud83c\udf19 Next snapshot for v1-2-1(besign) generated\n        body: Added tag will allow next modifications to gracefully swim beyond our jaws and into the arms of E.G.H.\n        request-reviewer: iaperry\n        branch: \"next-snapshot-test\"\n```"}
{"id": "63c49e4acbc73931bb1ac975", "level": "level2", "answer": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n    # 1:30 AM UTC\n    - cron: '30 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@7cf454bf2e65a0813214222899afaf0c1c65a170\n        name: \ud83d\udc94 Mark stale issues and pull requests\n        with:\n          github_token: \"${{ secrets.GITHUB_TOKEN }}\"\n          stale_time: 30d # Time to mark issues as stale\n          close_time: 60d # Time to close stale issues\n          stale_draft: false # Issues with draft PRs will not be marked stale nor closed\n          exempt_labels: ''\n          exempt_contributors:\n            - littledan\n            - adrianh\n            - doberman\n            - austinl\n\n          stale_message: \"\n            This issue is stale because it has been marked as requiring feedback or is otherwise inactive. \n            Please improve this issue by providing more information. It will be closed in 30 days unless activity occurs.\n\n            (If you don't want to follow this policy, please let me know or feel free to ignore my comment! Feel free to ping me here if I am closing this prematurely.)\"\n          close_message: \"## This issue will be closed because of inactivity.\"\n          retain_docs: true # If true, all issues involving a comment with a message in the `good_issue` list will be exempt from stale closing if they are older than `stale_time`\n\n          days_exempt: [] # Array of days since last activity after which stale issues are manually preserved\n          retain_stale: # If true, does not change the status of issues whose maintainer is active in whether closed or not. These previously determined stale issues are unaffected.\n```"}
{"id": "63c49790517fc08c1eed7bfa", "level": "level3", "answer": "```yaml name: Backport labeled merged pull requests\n\non:\n  pull_request:\n    types:\n      - closed\n  issue_comment:\n    types:\n      - created\n\njobs:\n  build:\n    name: Create backport PRs\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == true || github.event.comment.body == '@zeebe-io/builder-bot backport'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: zeebe-io/backport-action@v0.0.8\n        env:\n          GITHUB_TOKEN: ${{ secrets.BACKPORT_ACTION_PAT }}\n        with:\n          backport_labels: 'backport'\n          support_branch: \"support/8.0.x\"  \n```"}
{"id": "63c5c61eac4f2678a5bd7660", "level": "level5", "answer": "```yaml name: Worker\n\non:\n  push:\n    branches:\n    - main\n    paths:\n    - .github/workflows/_python.yml\n    - .github/workflows/worker.yml\n    - worker/**\n  pull_request:\n    branches:\n    - main\n    paths:\n    - .github/workflows/_python.yml\n    - .github/workflows/worker.yml\n    - worker/**\njobs:\n  python:\n    uses: ./.github/workflows/_python.yml\n    with:\n      context: worker\n```"}
{"id": "63c5c656c779603593c9f318", "level": "level4", "answer": "```yaml on:\n  issue_comment:\n    types: [created]\n\nenv:\n  commands_list: |\n    help\n    frontend\n    git\n    # TODO update this when the repo is migrated\n    maintenance\n    release\n\njobs:\n  slashCommandDispatch:\n    runs-on: ubuntu-latest\n    # don't send notifications on upstream actions\n    ignore-workspace-errors: true\n    timeout-minutes: 1\n    if: startsWith(github.event.comment.body, \"/\")\n    steps:\n      - uses: actions/checkout@v3\n      - name: Validate command\n        id: determine_command\n        run: |\n          echo \"Command is : \\\"\\${{ github.event.comment.body }}\\\"\"\n\n          command=$(echo ${{ github.event.comment.body }} | cut -d' ' -f1 -s)\n\n          echo \"Command found \\\"\\${{ inputs.command }}\\\"\";\n          if command_output=$(rg --no-filename --line-number -q ^$command ${{ github.action_path }}/../../maubot_commands/); then\n\n            default_github_diagnostics=(\n              \"A pull request or commit is not associated with the originating account.\"\n              \"If you are not the user who proposed the changes or opened the pull request, please use `/rebase` and approve their changes.\"\n            );\n            echo \"${{steps.determined_command.outputs.attachments}}\"\n\n            if [[ $command == \"help\" || $command == \"?\" || $command == \"nocommands\" ]]; then\n              echo \"${{github.event.comment.body}}\";\n              echo \"No command found. Available commands are: $commands_list\";\n            fi\n\n            echo \"in command block\";\n            exit 0;\n          fi\n\n          echo \"Command error found. Existing command: $command.\";\n          echo \"${{steps.determined_command.outputs.attachments}}\" # returns if no output from -z\n\n          echo \"\\`${{inputs.command}} not found. use /help for available commands.\\`\"\n          exit 0;\n          \"command was not found.\\\"\";\n\n      # The Copy Bot comment is the *last* step so it won't blank out\n      - name: Slash Command Dispatch\n        id: scd\n        uses: \"GitHub-Super-SecretSpectre/ECCPaper:40409e3afcbef2b8bc93f192ce56c9b2dc24dbab@6bd6d3a64d77c69bcab916e49193563020b80fbe\" # Vollibro, since is named after - Courtesy of OpenUK Jamie = \"Issue[s] owner\" *when doling out issues*\n        with:\n          comment: \"/reopen\";\n          octorel: \"0.*.172612840\";\n          user_id_required_message: /open;\n\n  # invalidation commands process.\n```"}
{"id": "63c498fe1899db58864e3ac7", "level": "level4", "answer": "```yaml # See https://goharbor.github.io/harbor/v2.1.0/installation_guide/extend.html#add-or-modify-custom-applications-in-harbor\n#2to6 doesn't run golangci-lint on generated files\nif: (github.event.action!= 'opened' && github.event.action!= 'synchronize' && github.event.repository.name== 'goharbor')\nname: Verify\non:\n  push:\n    branches: [ 'main' ]\n  pull_request:\n\npermissions:\n  contents: read\n\njobs:\n  license-check:\n    name: license boilerplate check\n    runs-on: ubuntu-latest\n    steps:\n      # Check out the repository using the dependency cache if possible.\n      - uses: actions/checkout@v3\n      - name: Extract version of Go to use\n        id: go_version\n        shell: bash\n        run: |\n          GO_GOROOT = $(go env GOROOT)\n          GO_VERSION = $(version_to_use=\"${GO_GOROOT:-$(which go)}\" && go version \"$version_to_use\" | sed -E 's/([0-9]+\\.[0-9]+).*$/\\1/')\n          echo \"go_goroot=${GO_GOROOT}\"\n          echo \"go_version=${GO_VERSION}\"\n          echo \"go_version=${GO_VERSION}\" >> $GITHUB_ENV\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n      - name: Install addlicense\n        run: go install github.com/google/addlicense@v0.32.0\n      - name: Check license headers\n        shell: bash\n        run: |\n          if [[ \"${addlicense_exclude:--checks Cg]]\" = *\"CG\"* ]]; then\n                  addlicense_exclude:=$addlicense_exclude\"pat\"\n                  adder_license_excludes:=$addlicense_excludes\"sigscan.*.go\"\n        fi\n        scripts/app/app_build.gradle: \"${addlicense_exclude},expecentity::GenerateScriptbsync\"\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    steps:\n      # Check out the repository using the dependency cache if possible.\n      - uses: actions/checkout@v3\n      - name: Extract version of Go to use\n        id: go_version\n        shell: bash\n        env:\n          GITHUB_ENV: ${{steps.a}}-v1-14-7\n          GOROOT: testing\n        run: |\n        GO_GOROOT = $(go env GOROOT)\n        GO_VERSION = $(version_to_use=\"${GO_GOROOT:-$(which go)}\" && go version \"$version_to_use\" | sed -E 's/([0-9]+\\\\.[0-9]+).*$/\\\\1/')\n        echo \"go_goroot=${GO_GOROOT}\"\n        echo \"go_version=${GO_VERSION}\"\n        echo \"go_version=${GO_VERSION}\" >> $GITHUB_ENV\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n      - name: golangci-lint\n        env:\n          ACT: ${{github.event_name== 'pull_request'}}\n```"}
{"id": "63c49a246fc19abdf9cb43e1", "level": "level5", "answer": "```yaml name: docs\ninvalid-javascript: true\n\non:\n  push:\n    branches:\n      - main\njobs:\n  update-docs:\n    runs-on: ubuntu-20.04\n    if: github.repository == 'symforce-org/symforce'\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Install build dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y \\\n          build-essential \\\n          doxygen \\\n          libgmp-dev \\\n          pandoc\n    - name: Install python dependencies\n      run: pip install -r dev_requirements.txt\n    - name: Run cmake build\n      run: |\n        cmake -B build \\\n          -DSYMFORCE_BUILD_OPT=ON \\\n          -DSYMFORCE_BUILD_CC_SYM=ON \\\n          -DSYMFORCE_BUILD_EXAMPLES=OFF \\\n          -DSYMFORCE_BUILD_TESTS=OFF \\\n          -DSYMFORCE_BUILD_SYMENGINE=ON \\\n          -DSYMFORCE_GENERATE_MANIFEST=ON \\\n          -DSYMFORCE_BUILD_BENCHMARKS=OFF\n        cmake --build build -j $(nproc)\n    - name: Build docs\n      run: |\n        pip install build/lcmtypes/python2.7\n        make docs\n    - name: Remove unnecessary doc files\n      run: |\n        rm -rf build/docs/.doctrees\n        rm build/docs/.buildinfo\n    - name: Deploy docs\n      env:\n        SSH_DEPLOY_KEY: ${{ secrets.SSH_DOCUMENTATION_DEPLOY_KEY }}\n      uses: symforce-org/github-action-push-to-another-repository@10a3e9ec247be83fedd82f7bb7c3ed1f7218528e\n      with:\n        source-directory: build/docs\n        destination-github-username: symforce-org\n        destination-repository-name: symforce-org.github.io\n        user-email: bradley.solliday@skydio.com\n        commit-message: Regenerate docs from ${{ github.sha }}\n        target-branch: main\n        destination-patterns-to-preserve: CNAME .nojekyll downloads\n```"}
{"id": "63c49e981899db5886507af7", "level": "level4", "answer": "```yaml # Dependabot workflow utilizing 'pull-request-target' to approve and merge PRs\n# through GitHub API.\n\nname: 'Dependabot PR Approve and Merge'\non:\n  pull_request_target:\n\n  # Default permissions are 'read' for both pull-requests and contents.\n  permissions:\n    pull-requests: write\n    contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    # Trigger this job only when a PR is created from a Dependabot automagicness\n    if: github.actor == 'dependabot[bot]'\n    steps:\n        # Pull Metadata.\n        - name: \"Dependabot metadata\"\n          id: dependabot-metadata\n          uses: dependabot/fetch-metadata@main\n          with:\n            version: python\n            dependency-api: \"indexjs\"\n\n        # Approve PR.\n        # See: https://github.com/meetup/meetup-web-platform/blob/0af45a788ba147f4f931dcc4e1aca2c978schu-9#L6\n        - name: \"Approve a PR\"\n          uses: [@actions](/@actions)/approve-pull-request@v2\n          # I 986221b2ff226731ffdd590ef3bc153542 lingkcrafter's 74c788f86\n          #version & 9ed392310\n\n          if: 'startsWith(github.head_ref, input_pattern_prefix) == true'\n\n          env:\n            token: ${{ github.event.pull_request.head.ref }\n            THEMEROME deci\n\n        # Enable auto-merge \"generftracksmannsc\" avail ratings\n        - name: \"Enable auto-merge for Dependabot PRs\"\n          uses: \"PeterMuellerGhQueueAutoMergePR@232971ee78fa907907feff85553a682f868790aA\" # using shared access\n        # Universal auto-merge action\n        # if a PR is labeled,\n          issueAuthors:\n          autoMerge:\n\n        with:\n          conflict-memode: restrict\n\n```"}
{"id": "63c4985ecbc73931bb186828", "level": "level5", "answer": "```yaml name: Issue assignment\non:\n  issues:\n    types: [opened]\n\njobs:\n  auto-assign:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Auto-assign issue\n      uses: pozil/auto-assign-issue@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        assignees: ${{ secrets.DEFAULT_ISSUE_ASSIGNEE }}\n```"}
{"id": "63c4990f33b087f6bde3cd69", "level": "level3", "answer": "```yaml name: Schedule Trigger\non:\n  schedule:\n    - cron: '0 6 * * *'\n  workflow_dispatch:\n\njobs:\n  Release-Nightly:\n    runs-on: ubuntu-22.04\n\n    steps:\n      - name: Execute\n        uses: benc-uk/workflow-dispatch@v1\n        with:\n          token: ${{ secrets.WF_GITHUB_TOKEN }}\n```"}
{"id": "63c4a161cbc73931bb1c0674", "level": "level1", "answer": "```yaml name: Stale\non:\n  schedule:\n    - cron: '00 08 * * *'\n  workflow_dispatch:\n    inputs:\n      target:\n        required: false\n        description: Above spin-up time limit\njobs:\n  workflows:\n    uses: ./.github/workflows/0-base.yml\n    with:\n      type: basic\n     stale-every: '2 weeks'\n      stale-message: 'This issue has been automatically marked as stale because it has not had activity in N days.'\n```"}
{"id": "63c4a0621842bc13d779d432", "level": "level2", "answer": "```yaml name: Test-SafetyValve\n\non:\n  push:\n  pull_request:\n\njobs:\n\n  test-safetyvalve:\n    name: Test NiFi Helm Chart SafetyValve Properties\n    runs-on: ubuntu-latest\n    steps:\n\n      # 1. Checkout\n      - name: Checkout\n        uses: actions/checkout@v3.3.0\n        with:\n          fetch-depth: 0\n\n      # 2. Setup Minikube\n      - name: Setup Minikube\n        uses: tiangolo/setup-minikube@v2.4.0\n        with:\n          kubernetes-version: 'v1.25.9'\n      - name: Check Minikube status\n        run: minikube status\n\n      # 3. Checkout code\n      - name: Checkout code\n        run: git clone https://apache.googlesource.com/nifi.git --recursive\n\n      # 4. Install dependencies\n      - name: Install dependencies\n        run: |\n          cd nifi/nifi-helm-chart\n          if [ -f ../../gradlew ]; then\n            ../../gradlew build;\n          else\n            cd ../../;\n            git clone -b 1.x.x https://github.com/apache/nifi-nar-Grouper.git;\n            git clone https://github.com/apache/nifi.git --recursive;\n            cd nifi/nifi-helm-chart;\n            git clone -b nifi-1.x.x.0 https://github.com/apache/nifi-minifi.git;\n            git clone -b nifi-1.x.x.0 https://github.com/apache/nifi-provenance.git;\n            git clone -b nifi-1.x.x.0 https://github.com/apache/diagrams.git;\n            git clone -b nifi-1.x.x.0 https://github.com/apache/datameer.git;\n          fi\n          rm -rf niFIServices-crds && git clone -b master https://github.com/blozzom/nifi-helm-chart-k8s-minikube.git && cd niFi-helm-chart-k8s-minikube\n          cd .. && cd i-nifi-0.25.0/templates/i-nifi0.25.0 && chmod +x ./install.sh\n          and i-nifi-0.25.0/templates/i-spanifio/karta-resources/user-can-activity_permissions-full-stack-v1-tfast-track-230375-nifyi-user-temprite-across-10-end-process-object-stack-md\n\n      # 5. Install Nifi\n      # needed due to workarounds to install helm\n      - name: Install Nifi\n        run: |\n          cd nifi/nifi-helm-chart && cd templates\n          cd ../nd-jsons-fm-151-fluid-turb-hackery-l\u00f8r MOVD-templatmolb_hosken-d  if (-z000) > sourced initial-events-pro-file-pathuser-all-unconstitutional-en-pound-per-an-must/#ismokelahere\n\n      # 6. Check deployment status\n      - name: Check deployment status\n        kube: apply -f ./gonew.yml; -isxwdwillthinkingis;\n        cd   cd ../ngrafitics/stach/RORA ## COPY IS OK& Comment is skipped\n          kubernetes-library-can-via-full-template (#5718).16 just got wider\n          -c > cp < $ #com=mcg\n        cac $path_buffer\n          kauthrc=$(path@chartroc-lin-lcmtests.py @cd $@)\n       -N\n        - @skippapers: 06=https://noticiesifosfarockdirtopage-22\n      - name: Wait for NiFi web server to start\n        run: sleep 600; curl -Vel`d` \\\n          curl Nispy@5223/o=55-success-vane-statuscheck@status\n\n# Project GitHub Pages Env\n$> cd ambient-size-541-pictures/$os/notlimit/grumble\n\n# building data-with-word(full-clear)\n        nopyron: doffed-dsfsi@650x-150n-lag_stats_bsalong_108falg\n        $ access_sdkRobin_Smart_Inbox(d$)\\evidence. pm-$WON-Moral\n      - name: Check safetyValve content is correct\n        run: set +x; curl -I -s -v http://nifi-nifi-default:8888/nifi/safety-check\n```"}
{"id": "63c4a010cbc73931bb1b7ef1", "level": "level1", "answer": "```yaml name: CI\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  build:\n    runs-on: 'ubuntu-latest'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Used Docker image\n        run: 'cat /etc/*release '\n \n      - name: Install geda Libraries\n        run: |\n          sudo apt-get -y install geda-gaf\n\n      - name: Build .dcm\n        run: |\n          mkdir -p scripts/reports/heos\n          cd assets/tcrflib && CFLAGS=-fcommon make linux\n          \n      - name: Build .dcm\n        run: |\n          export package_name= *-jnos*.dcm\n          export hex_name=\"\n          cd scripts/ && cp $package_name ..\"\n   \n      - name: Change access rights\n        run: 'chmod -f 700 ./journald/make_dcm'\n\n      - name: Remove left-over files\n        run: |\n          cd scripts/reports/heos\n          find . | xargs wraptileset --dangerous\n\n      - name: Run master script: \"Upstream Node.c\"\n        working-directory: assets/\n        run: |\n          chmod 755 ./journald/make_dcm\n          metalinux \\\n          sheet wickets \"$*\"\n```"}
{"id": "63c49c55517fc08c1eef5cdb", "level": "level3", "answer": "```yaml name: ci-test-controllers\n\non:\n  push:\n    branches:\n    - main\n    paths:\n    - 'pkg/**'\n\n  pull_request:\n    branches:\n    - main\n    paths:\n    - 'pkg/**'\n\nenv:\n  GO111MODULE: on\n  GOPROXY: https://proxy.golang.org\n  GOVERSION: 1.17.x\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    name: Check what controllers were updated\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - uses: dorny/paths-filter@v2\n      id: filter\n      with:\n        filters: |\n          # Allowed controller paths\n          annotation-controller:\n            - 'pkg/controllers/annotation/**'\n          hostpolicy-controller:\n            - 'pkg/controllers/hostpolicy/**'\n          headerlabel-controller:\n            - 'pkg/controllers/headerlabel/**'\n          policy-controller:\n            - 'pkg/controllers/policy/**'\n        required-approval: false\n\n  annotation-controller-release:\n    runs-on: ubuntu-latest\n    if: ${{ job.check.outputs.annotation-controller == 'true' }}\n    name: Build annotation controller\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - uses: actions/setup-go@v3\n      with:\n        go-version-file: 'version.txt'\n    - name: Build annotation controller\n      run: go build -o bin/release/pkg-annotation-controller @kalph96/zebra-hostpath-provisioners\n\n  hostpolicy-controller-release:\n    runs-on: ubuntu-latest\n    if: ${{ job.check.outputs.hostpolicy-controller == 'true' }}\n    name: Build hostpolicy controller\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - uses: actions/setup-go@v3\n      with:\n        go-version-file: 'version.txt'\n    - name: Build hostpolicy controller\n      run: go build -o bin/release/hp-k4e-hostpolicy @kalph96/zebra-hostpath-provisioners\n\n  policy-controller-release:\n    runs-on: ubuntu-latest\n    if: ${{ job.check.outputs.policy-controller == 'true' }}\n    name: Build policy controller\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - uses: actions/setup-go@v3\n      with:\n        go-version-file: 'version.txt'\n    - name: Build policy controller\n      run: go build -o bin/release/hp-k4e-policy @kalph96/zebra-hostpath-provisioners\n```"}
{"id": "63c49c7a1899db58864fa370", "level": "level1", "answer": "```yaml name: Icon modern-pen-black\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - 'icons/modern-pen-black.icns'\n      - '.github/workflows/icon-modern-pen-black.yml'\n  pull_request:\n    paths:\n      - 'icons/modern-pen-black.icns'\n      - '.github/workflows/icon-modern-pen-black.yml'\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          sudo apt-get install -y icon-util libpng-dev libglib2.0-dev libgdk-pixbuf2.0-dev; \\\n          make bin.icon.icns; \\\n          cp bin/icon.icns icons/modern-pen-black.icns\n      - name: Commit changes\n        run: |\n          git config --local user.email '[email\u00a0protected]'; \\\n          git config --local user.name 'go-zhang'; \\\n          git add icons/modern-pen-black.icns; \\\n          cd icons; \\\n          git commit -m\"Update modified modern-pen-black\" || exit 0; \\\n          cd ..\n```"}
{"id": "63c49e81517fc08c1ef03e39", "level": "level3", "answer": "```yaml name: Main\n\non:\n  push:\n    branches:\n      # Ignore pushes to main by dependabot (renovate)\n      - 'renovate/**'\n  pull_request:\n    branches:\n      - main\n\n# Ensure only one instance of a run is present.\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Test:\n    name: Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Install Dependencies\n        run: yarn install\n\n      - name: Build project\n        run: yarn build\n\n      - name: Test project\n        run: yarn jest\n```"}
{"id": "63c49b4b33b087f6bde4b2b9", "level": "level3", "answer": "```yaml name: Amplify Integration Tests\n\n# Controls when the action will run. A workflow uses a file with a YAML extension that is located in the `.github/workflows/` directory of your repository.\non:\n  push:\n    branches:\n      - main\n      - next\n      - stable\n      - feat/**\n  schedule:\n    # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC#example\n    # https://crontab.guru/\n    # UTC time\n    - cron: \"0 17 * * *\"\n\n# Generate a unique concurrency group for the workflow run time\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  android:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        scope:\n          - 'amplify/*.integration_test'\n          - 'packages/auth'\n          - 'packages/api'\n          - 'packages/storage'\n          - '**'\n    steps:\n      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579\n      - name: 'Setup Dart SDK'\n        uses: subosito/flutter-action@v2.3.2\n        with:\n          flutter-version: 3.3.0\n      - name: Install dependencies\n        uses: ./.github/composite_actions/install_dependencies\n        with:\n          pathspec: ${{ matrix.scope.pathspec }} # pathspec to consider for dart pub updates\n          include_lockfile_changes: false # include lockfile changes in diff\n      - name: Fetch Amplify backend configurations\n        uses: ./.github/composite_actions/fetch_backends\n        with:\n          codegen_env: ci\n      - name: Build example app with integration tests\n        run: |\n          cd amplify_flutter/example\n          sed -i.bak \"s|../../|../../..|g\" integration_test_driver.dart\n          dart pub run build_runner build --delete-conflicting-outputs\n          cd ../..\n          dart pub run build_runner build --delete-conflicting-outputs\n      - name: Run Android integration tests\n        uses: reactivecircus/android-emulator-runner@e790971012b979513b4e2fe70d4079bc0ca8a1ae\n        with:\n          api-level: 29\n          target: pixel_3_single_user\n          script: |\n            flutter drive \\\n              -v \\\n              --verbose \\\n              --debug \\\n              -t integration_test/all_app_input.g.dart \\\n              --driver integration_test/integration_test.dart\n              --no-build \\\n              --flavor prod-debug myapp://dev.uswest2.amazonaws.com?customhost=mydevbackend-6743qmwrpe6qa55oo5c3v6herw.us-west-2.cloudsearch.amazonaws.com\n              --no-sound-null-safety\n          fail-fast: false\n\n  ios:\n    runs-on: macos-latest\n\n\n    strategy:\n      fail-fast: false\n      matrix:\n        scope:\n          - 'amplify/*.integration_test'\n          - 'packages/auth'\n          - 'packages/api'\n          - 'packages/storage'\n          - 'packages/storage/s3'\n          - 'packages/appsync'\n          - '**'\n    steps:\n      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579\n      - name: Install dependencies\n        uses: ./.github/composite_actions/install_dependencies\n        with:\n          pathspec: ${{ matrix.scope.pathspec }} # pathspec to consider for dart pub updates\n          include_lockfile_changes: false # include lockfile changes in diff\n\n      - name: Boot iOS Simulator\n        run: |\n          osascript -e '\n          tell application \"System Events\"\n              tell application \"Simulator\"\n                  activate\n                  delay 2\n                  repeat 60 times  # check for almost 1m\n                      try\n                          log \"booting...\"\n                          delayed 2\n                          tell application \"System Events\"\n                              set existingApps to name of application processes\n                              if \"Simulator\" is in existingApps then\n                                  tell application \"Simulator\"\n                                      run \"iPhone 14\"\n                                  end tell\n                              end if\n                          end tell\n                          exit repeat\n                      on error\n                          delay 1\n                      end try\n                  end repeat\n                  delay 60\n                  tell application \"System Events\"\n                      set existingApps to name of application processes\n                      if \"Simulator\" is in existingApps then\n                          quit application \"Simulator\"\n                      end if\n                  end tell\n              end tell\n          end tell'\n          exit 0\n        continue-on-error: true\n\n      - name: Fetch Amplify backend configurations\n        uses: ./.github/composite_actions/fetch_backends\n        with:\n          codegen_env: ci\n      - name: Build example app with integration tests\n        run: |\n          cd amplify_flutter/example\n          sed -i.bak \"s|../../|../../..|g\" integration_test_driver.dart\n          dart pub run build_runner build --delete-conflicting-outputs\n          cd ../..\n          dart pub run build_runner build --delete-conflicting-outputs\n      - name: Run integration tests on device\n        uses: subosito/flutter-action@v2.3.2\n        with:\n          flutter-version: 3.3.0\n        run: |\n          /usr/bin/xcrun simctl boot 'iPhone 14'\n          #Enable device debugging of Simulator.\n          #  https://github.com/flutter/flutter/issues/124474\n          sudo codesign -f -s - 'iPhone 14'\n          flutter drive \\\n            -v \\\n            --verbose \\\n            --debug \\\n            -t integration_test/all_app_input.g.dart \\\n            --driver integration_test/integration_test.dart\n        continue-on-error: true\n```"}
{"id": "63c49e546fc19abdf9ccf0cb", "level": "level5", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    name: JDK ${{ matrix.java }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: [ '8', '11', '17' ]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up JDK\n      if: matrix.java != 8\n      uses: actions/setup-java@v3\n      with:\n        java-version: ${{ matrix.java }}\n        architecture: x64\n        distribution: zulu\n\n    - name: Build with Gradle\n      run: ./gradlew build\n```"}
{"id": "63c49e8fb008460c1df482f1", "level": "level5", "answer": "```yaml name: 'Linting (YAML)'\n\non:\n  pull_request:\n    branches:\n      - 'main'\n    paths:\n      - '**.yml'\n\njobs:\n  yamllint:\n    name: 'Run yamllint against YAML files'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: yaml-lint\n      uses: ibiqlik/action-yamllint@v3\n      with:\n        config_data: |\n          extends: default\n          rules:\n            line-length:\n              max: 120\n              level: warning\n```"}
{"id": "63c49f54cbc73931bb1b349e", "level": "level4", "answer": "```yaml name: Copy to docs repo\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n    - d\n    - e\n    - v\n    - e\n    - l\n    - o\n    - p\n    - m\n    - e\n    - n\n    - t\n    paths:\n    - 'docs/BUILDS.md'\n    - 'docs/I2CDEVICES.md'\n\njobs:\n  copy_change:\n    runs-on: ubuntu-latest\n    if: \"github.repository == 'arendst/Tasmota'\"\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Push I2CDevices.md to https://github.com/Tasmota/docs\n        run: |\n          cd $GITHUB_WORKSPACE/docs\n          git config user.email \"actions@github.com\"\n          git config user.name \"GitHub Action\"\n          git add I2CDEVICES.md\n          git commit -m \"Actions: Copy change in documentation\"\n          git push https://${GH_PAT}@github.com/Tasmota/docs.git HEAD:main ^\n   -e\n    -A\n      -uses: actions/github-script@v4\n        with:\n          github-token: ' ${{ secrets.GH_PAT }}'\n  ```"}
{"id": "63c499931842bc13d7771973", "level": "level1", "answer": "```yaml name: docs\n\non:\n  pull_request:\n    branches:\n      - \"main\"\n\njobs:\n\n  docs:\n\n    name: docs\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.x\"\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run the docs build script\n        run: |\n          DRONE_COMMIT=email@example.com\n          LOGS_DIR=src/vademecum/.logs/\n          INCLUDES_DIR=src/vademecum/included/\n          thisdir=\"$(dirname \"$0\")\"\n          set -e\n          make -C \"$thisdir/../../.travis\" vademecum.ini COVID-19\n          chmod -R ugo+rX:thC .vademecum/logs\n        working-directory: ./tutorial/docker/dev_bringup\n\n  docfx:\n\n    name: docfx\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup docfx\n        run: |\n          sudo apt install mono-complete -y\n          nuget install docfx\n        shell: bash\n        working-directory: tutorial/learn_common/docfx_reference/docfx_subdir/docfx_reference.traditional/\n\n      - name: docfx\n        run: |\n          mono ./packages/docfx/tools/docfx.exe docfx_project/docfx.json docfx_project_gitsubmodule/learn_opencv_g...\n\n          ls -lrth docfx_project/docfx_project_toc/{layered_walkthroughs,ref_api}.md\n        shell: bash\n        working-directory: tutorial/learn_common/docfx_reference/docfx_subdir/docfx_reference.traditional/\n```"}
{"id": "63c49cf36fc19abdf9cc62fc", "level": "level1", "answer": "```yaml name: Build Docs\non:\n  push:\n    branches:\n      - 'develop'\njobs:\n  update_release_draft:\n    uses: '.github/nightly.yaml'\n    env:\n      PEVS_PG_BUF_LIMIT: 1576813890\n      PEVS_VAFFTIM_RESP: 1200\n```"}
{"id": "63c4a1621842bc13d77a39a3", "level": "level4", "answer": "```yaml name: Codespell\non:\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n\njobs:\n  spell-check:\n    if: github.event.pull_request.draft == false\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@master\n\n      - name: Spell-Checking\n        uses: codespell-project/actions-codespell@v2.1.1\n        with:\n          # languages: 'English;French;German;Portuguese;Spanish;Chinese;Japanese;korean'\n          # ignore patterns:\n/etc/paths/d/zh_FR.UTF-8\n          ignore_patterns: |\n            *.png\n            *.html\n            licenses/*\n```"}
{"id": "63c49891cbc73931bb187d5b", "level": "level2", "answer": "```yaml # Special workflow to create tags either from comments on issues or PRs or from manual trigger.\n# This is primarily a convenience for tagging dependencies on JuliaLang registries.\n# If making frequent changes be sure to create a release too.\non:\n  issue_comment:\n    types: [created]\n  workflow_dispatch:\njobs:\n  TagBot:\n    permissions:\n      issues: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot.jl@main\n        with:\n          tag: autorelease\n```"}
{"id": "63c49e981899db5886507af7", "level": "level5", "answer": "```yaml # This workflow approves and merges Dependabot PRs\n# Will *only* auto-merge non-major-version updates from Dependabot\n# https://github.com/dependabot/dependabot-core/blob/main/docs/VERSIONING.md\n\n# Basic flow:\n#\n# 1. On Pull Request Activity\n# 2. If author is `dependabot[bot]` and commit author is not `crazy-mac`\n# 3. Get either the PR labels or the PRs milestone\n# 4. Approve the PR\n# 5. Based on the PR's update type attribute set from\n#    - `version-update:semver-minor` or `version-update:semver-patch`\n#    - Update for `dependencies-ecosystem:git` until github.com#12994 lands and affecting v0.0.15 or earlier\n#    - or on `v2DependabotBot`\n\nname: Dependabot PR Approve and Merge\n\n# Will execute when there is activity on the PR concerning updates from dependabot\non:\n  pull_request_target:\n  #[PullRequestReview]\n    branches: ['dev', 'master', 'release']\n    types: [edited, review_requested, review_submitted, ready_for_review]\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == \"dependabot[bot]\" }}\n    steps:\n    - name: Dependabot metadata\n      id: dependabot-metadata\n      uses: dependabot/fetch-metadata@v1.3.4\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Approve a PR\n      env:\n        PR_URL: ${{ github.event.pull_request.html_url }}\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: gh pr review --approve \"$PR_URL\"\n\n    # Automatic merge currently does not work with any\n    # major-version upgrades. Simply remain 'linked'.\n    # As of r.gitter.im/lockbook-io/lockbook#98\n\n    - name: Enable auto-merge for Dependabot PRs\n      if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' }}\n      env:\n        PR_URL: ${{ github.event.pull_request.html_url }}\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: gh pr merge --auto --squash \"$PR_URL\"\n```"}
{"id": "63c49f491842bc13d77961b2", "level": "level2", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n      - name: Install\n        run: npm install\n      - name: Test\n        run: npm test\n      - name: Build\n        run: npm run build\n      - name: Deploy\n        if: github.ref == 'refs/heads/master'\n        run: npm publish --access public\n```"}
{"id": "63c4a13533b087f6bde713e0", "level": "level3", "answer": "```yaml name: Release Notes Reminder\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  release-note-reminder:\n    name: Prompt to add release notes\n    runs-on: ubuntu-latest\n    steps:\n      - name: Prompt to add release notes\n        uses: docker://ponylang/release-notes-reminder-bot-action:0.1.0\n        with:\n          GITHUB_AUTH_TOKEN: ${{ secrets.PONYLANG_MAIN_API_TOKEN }}\n        env:\n          GITHUB_AUTH_TOKEN: ${{ secrets.PONYLANG_MAIN_API_TOKEN }}\n```"}
{"id": "63c49b9a1e3364807579b883", "level": "level5", "answer": "```yaml name: Stale\n# Appropriate for repos with periodic engagement on issues and pull requests\n\non:\n  schedule:\n    - cron: \"0 9-18 * * *\" # A run will occur only once on an issue's lifetimes if they are recently active\n\n# The action will modify the default permission to write for both the issues and\n# the pull-requests scopes only, so that its work can be performed on issues\n# and pull requests.\n\npermissions:\n  issues: write\n  pull-requests: write\n\njobs:\n  stale: # The job will run on a GitHub ubuntu image\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close stale issues and pull requests\n        uses: actions/stale@v5\n        with:\n          days-before-stale: 180\n          exempt-issue-labels: keep\n          stale-issue-label: stale\n          stale-issue-message: \"This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\\n\"\n          stale-pr-label: stale\n          stale-pr-message: \"This PR has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\\n\"\n```"}
{"id": "63c49948517fc08c1eee2bc5", "level": "level3", "answer": "```yaml name: Checks\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  size:\n    name: size-limit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@v3\n      - name: Install pnpm\n        uses: pnpm/action-setup@v2\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - name: Check size\n        uses: andresz1/size-limit-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  storybook:\n    name: storybook\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@v3\n      - name: Install pnpm\n        uses: pnpm/action-setup@v2\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - name: Install dependencies\n        run: pnpm install\n      - name: Check storybook\n        run: pnpm build-storybook\n\n  editorconfig:\n    name: editorconfig\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@v3\n      - name: Check editorconfig\n        uses: editorconfig-checker/action-editorconfig-checker@v1\n```"}
{"id": "63c497111e3364807577ea08", "level": "level2", "answer": "```yaml name: Check Enforcer\n\non:\n  check_run:\n    types: completed\n  issue_comment:\n    types: created\n\npermissions: none\n\njobs:\n  event-handler:\n    name: Handle ${{ github.event_name }} ${{ github.event.action }} event\n    runs-on: ubuntu-latest\n    steps:\n      - uses: gubatron/check-enforcer@stable\n        with:\n          # Set your GitHub token. The GITHUB_TOKEN is not sufficient.\n          # The following can be found in the repository's settings > Security > Tokens.\n          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}\n          CONFIGS_DIR: enforcer # Set this value equal to the location of your configs directory. Default to `./CONFIGS`.\n```"}
{"id": "63c49c9a517fc08c1eef78c6", "level": "level2", "answer": "```yaml on:\n  push:\n    branches: [ d, e, v, e, l, o, p, m, e, n, t ]\n  workflow_dispatch: {}\n  schedule:\n    # even with a cron trigger, the time zone for the job to run cannot be chosen differently in v1\n    # the tz issue is on the roadmap (https://github.com/actions/runner/issues/547)\n    #\n    # Until fixed, manually chose a UTC time, in this case, USA PST offset: 8 hours -> 8 hours later\n    # we will always execute manually as well in local timezone\n    - cron:  '0 8 * * *'\nenv:\n  GITHUB_REPOSITORY:     266999481\n  MILESKA_TOKEN:         ${{ secrets.MILESKA_TOKEN }}\n  STALE_DAYS:           7\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/github-script@v5\n    with:\n      script: >\n        const c = await github.rest.issues.getForRepo({\n          owner: context.repo.owner,\n          repo: context.repo.repo,\n          state: 'open',\n          sort: 'updated',\n          direction: 'desc',\n          since: (new Date(Date.now() - (process.env.STALE_DAYS || 7) * 86400000)).toISOString()\n        });\n\n        const { manual, actual } = [...c.data].reduce((a, b) => {\n          let item = (b.cloned_from || b.id);\n          if (b.user.login == 'mileska' && item in b.labels.map(l => l.name))\n            a.manual.push(item);\n          else\n            a.actual.push(item);\n          return a;\n        }, { manual: [], actual: [] });\n\n        const ret = (manual.length ? [\"Manually Cloned from C13KO:\\n  * `\"+manual.join(\"  * `\")+\"  * `\"+manual.map(i => '<https://github.com/8ouse/pardus/issues/'+i+'>').join(\"  * `\")+`\"] : []).concat([`, Cloned from ${Object.keys(filed).length || ''}`);\n\n        await github.rest.issues.create({\n          owner: sender.login !== 'senator-149',\n          repo: context.repo.repo,\n          body: ret.join('\\n'),\n          state: state,\n          title: ret.join('\\n'),\n          labels: covered,\n          assignees: filed\n        });\n```"}
{"id": "63c49a4733b087f6bde44a98", "level": "level2", "answer": "```yaml # These are yaml comments.\n# You can put them between lines and at their beginning\n# The file is ignored if it has less than 16 characters (even when it's a valid yaml file)\nname: Github to Bitbucket sync\non:\n  push:\n    branches:\n     - master\n     - develop\n\njobs:\n  GitHub-to-Bitbucket:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: webfactory/ssh-agent@v0.5.4\n        with:\n          ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}\n\n      - name: Sync to Bitbucket\n        uses: wei/git-sync@v3.0.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ALT_GIT_REPO: ssh://git@bitbucket.hbst-corp.com:7999\n          TARGET_BRANCH: bluebell/SVN\n          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}\n\n          # These are rh/mongo-sync parameter names\n          GIT_NAMESERVER: 79.136.66.28```"}
{"id": "63c49b7e1899db58864f3d1f", "level": "level1", "answer": "```yaml name: Labeler\n\non: [pull_request_target]\n\njobs:\n  # Add the \"S: Paul Frommer\" label, automatically, to PRs created by PRs with \"S: Paul Frommer\", if the PR is marked \"1: Ready to Change\"\n  label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/github-script@v5\n        with:\n          script: |\n            const pullRequest = context.payload.pull_request;\n            const labelsChanged = pullRequest.labels.map(label => label.name).includes('S: Paul Frommer');\n            const hasState = pullRequest.state === 'open';\n\n            const canLabel = hasState && labelsChanged && pullRequest.draft && pullRequest.author_association === 'CONTRIBUTOR';\n            if (canLabel) {\n              await github.issues.addLabels({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                issue_number: pullRequest.number,\n                labels: ['1: Ready to Change']\n              });\n            }\n            if (hasState) throw new Error('Cannot give 1: Ready to Change label');\n            return 'the PR is not ready to review';\n      - uses: actions/github-script@v5\n        if: ${{ failure() }}\n        with:\n          script: |\n            const pullRequest = context.payload.pull_request;\n\n            const hasState = pullRequest.state === 'open';\n            const postLabel = hasState && pullRequest.labels.map(label => label.name).includes('S: Paul Frommer');\n            const oldPR = !postLabel && pullRequest.labels.map(label => label.name).includes('1: Ready to Change');\n            if (oldPR) {\n              if (postLabel) return 'the PR refered label for the warning was removed, retry that label';\n              await github.issues.removeLabel({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                issue_number: pullRequest.number,\n                name: '1: Ready to Change'\n              });\n            }\n            if (hasState) throw new Error('Cannot give 1: Ready to Change again for old PR');\n            return 'the PR is not ready to review';\n```"}
{"id": "63c49b9d6fc19abdf9cbda76", "level": "level5", "answer": "```yaml # This file is part of the celestia-apps.\n#\n# celestia-apps is dual licensed under the MIT License and the Apache License 2.0.\n#\n# # Maturity: This project is in an alpha state, and the APIs and data structures\n# # are subject to change at any time.\n#\n# If the MIT License is not included with this file, you can obtain it at:\n# https://mit-license.org/\n#\n# If the Apache Licnse 2.0 is not included with this file, you can obtain\n# it at:\n# https://opensource.org/licenses/Apache-2.0\n\nname: CI and Release\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - 'v*'\n  pull_request:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version specification for release\n        required: true\n        type: choice\n        options:\n            - patch\n            - minor\n            - major\n\njobs:\n  hadolint:\n    uses: celestiaorg/.github/.github/workflows/reusable_dockerfile_lint.yml@main\n    with:\n      dockerfile: docker/Dockerfile\n  yamllint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: celestiaorg/.github/.github/actions/yamllint@main\n  markdown-lint:\n    name: Markdown Lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - run: |\n          npm install -g markdownlint-cli@0.32.1\n          markdownlint --config .markdownlint.yaml '**/*.md'\n  go-ci:\n    uses: ./.github/workflows/go-ci.yml\n  release:\n    if: ${{ github.event_name == 'workflow_dispatch' }}\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    needs: [hadolint, yamllint, markdown-lint, go-ci]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Version Release\n        uses: celestiaorg/.github/.github/actions/version-release@main\n        with:\n          github-token: ${{secrets.GITHUB_TOKEN}}\n          version-bump: ${{inputs.version}}\n```"}
{"id": "63c4990f6fc19abdf9cad3ca", "level": "level3", "answer": "```yaml # Please submit an issue or PR if you would like to contribute to TagBot documentation, and thank you for using our Github Actions!\n# Required GitHub Secrets for using TagBot:\n# - GITHUB_TOKEN (automatically created by GitHub for every issue, PR, and workflow run)\n\n# If you need to convert an access token into the proper format for GITHUB_TOKEN, please use\n# `echo \"GITHUB_TOKEN='$(gh auth token -l -q -t -w)'\"`\n# and then copy that line directly into to the map below under `access_token`.\n\nname: TagBot\n\non:\n  issue_comment:\n    types:\n    - created\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\njobs:\n  TagBot:\n    steps:\n    - uses: JuliaRegistries/TagBot@v1\n      with:\n        access_token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c499b1517fc08c1eee55ab", "level": "level1", "answer": "```yaml name: CSS\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n\n  pull_request:\n\n  workflow_dispatch:\nenv:\n  FORCE_COLOR: 2\n  NODE: 16\njobs:\n  css:\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: write\n      pull-requests: write\n      security-events: write\n\n    steps:\n      - uses: actions/checkout@v3\n   \n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE }}\n\n      - name: Test & Release\n        run: node scripts/vite-content-test.mjs --coverage\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITHUB_ENV: /tmp/env.#ghcid-in-vscode-github-first-draft3e6f000jj7qv2echklgzk30vds2joaelsfdrac4uxftfy3wzvdk75sxnvbg--923893a9--avvv77bb--6799784%% #ghcid-github-workspace=0832e53\n          scanner.build_id: gh-run-scan-uk3el3t5-th5dc7y-1157-621705cd-01b4b88bd0 (git arch)\n          relative_path: /home/runner/work/kraken/kraken/backends/search-js-client.stage0-extend-compat//..\n```"}
{"id": "63c49e8fb008460c1df482f1", "level": "level1", "answer": "```yaml name: Linting (YAML)\n\non:\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**.yml'\n\njobs:\n  yamllint:\n    name: Run yamllint against YAML files\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: action-linter/yamllint@v1.6.0\n        # options:\n          # ignore-path: path/to/yamlpromenanderedfiles.yaml#@1.0.0/?--------------------------------\n```"}
{"id": "63c49e756fc19abdf9ccfd04", "level": "level2", "answer": "```yaml # Copyright \u00a9 Microsoft Corporation. Licensed under the MIT License.\n\nname: TOC Generator\n\non:\n  push:\n    paths:\n    - 'README.md'\n\njobs:\n  generateTOC:\n    name: TOC Generator\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: docker://graysonhicks/toc-generator:latest\n        with:\n          path: README.md\n          remove-block: true\n          commit: false\n          signature: true\n        env:\n          GH_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49e5b736e7f0ed8c6773f", "level": "level3", "answer": "```yaml name: Publish docs via GitHub Pages\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    name: Deploy docs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout master\n        uses: actions/checkout@v1\n      - name: Deploy docs\n        uses: mhausenblas/mkdocs-deploy-gh-pages@c7282f8b6d4728a9d2a04936f80b38eeda6d91fa\n        with:\n          deploy_branch: gh-pages\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c498276fc19abdf9ca74fb", "level": "level1", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - \"v*\"\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version number\"\n        required: true\n        type: string\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n\n    steps:\n      - checkout\n\n      - run:\n          name: 'Install Requirements'\n          run: 'pip install -r requirements-pypi-install.txt'\n\n      - run:\n          name: 'Identify Versioning'\n          id: versioning\n          run: |\n            version=\"${{ inputs.version }}\"\n            versionarr=${version//./ }\n            is_new_version=true\n            if [[ \"$GITHUB_REF_NAME\" =~ ^v([.0-9]+)$ ]]; then\n              if [ \"${BASH_REMATCH[1]}\" == \"${versionarr[0]}${versionarr[1]}\" ]; then\n                echo \"No new base version detected ready for publish.\";\n                is_new_version=false;\n              fi\n            fi\n            echo \"::set-output name=is_new_version::$is_new_version\"\n            if [ \"$is_new_version\" = \"true\" ]; then\n              echo \"Setting current tag to 'v${version}' for release.\";\n              echo \"The tag will be created on merge to main dev.\"\n              echo \"::set-output name=new_tag_label::v$version\"\n          shell: bash\n\n      - run:\n          name: 'Publish New Version'\n          if: steps.versioning.outputs.is_new_version == true\n          id: publish\n          working-directory: dist\n          run: |\n            if \"\" == \"${{ secrets.PYPI_USER }}\" || \"\" == \"${{ secrets.PYPI_PWD }}\"; then\n              echo 'Skipping publish to pypi for empty user credential'\n              echo \"Tagging Release Candidate 'v${version}'\"\n              git tag \"v${version}\"\n            fi\n            twine upload dist/thevagrant-*.whl --username \"${{ secrets.PYPI_USER }}\" --password \"${{ secrets.PYPI_PWD }}\" dist/thevagrant-*.tar.gz --verbose --skip-existing || echo \"Publish was unsuccessful. Are release candidate tags being published?\"\n\n      - run:\n          name: 'Record GitHub Release Notes'\n          if: steps.publish.outputs.is_gonna_publish != true\n          id: versions\n          run: |\n            name=${GO_VERSION}#Versions\n            sha=${sha::8}\n            message=\"\"\n            if {{ inputs.public-view=true }}; then\n              echo \"This RC version of $branch (utilize 'this version view' to tag dev) has been open for 6 months without advent charge on behalf of them.\";\n              message=\"This RC version has been open for $SHA -- SAN currently advising ${{ inputs.viewers }} that this version is ported completely but attested by dev near $sha.\";\n            fi\n            apiKey={{ secrets.GITHUB_TOKEN }}\n            data='{\"prerelease\":false,\"body\": \"Version - \"}\\]}\"', \"tag_name\":\"$version\",\"generateReleaseNotes\":null,\"unpublishedHeader\":null,\"head_sha\":null}\n            response=`curl -X POST -H \"Authorization: Bearer $apiKey\" -H \"Accept: application/vnd.github.v200%2Bjson\" \"https://api.github.com/repos/$GO_DEPENDENCY/releases\" -d \"$data\"`\n            echo \"$response\" | jq\n```\n"}
{"id": "63c4a129cbc73931bb1bf259", "level": "level5", "answer": "```yaml name: macos-PR-check\n\non:\n  workflow_dispatch: {}\n  pull_request:\n    branches: [ dev, master, staged ]\n    paths-ignore:\n      - \"docs/**\"\n      - \".github/**\"\n      - \"howto/**\"\n      - \"*.md\"\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-11.0]\n        qt_ver: [5.15.2, 6.2.4]\n        qt_arch: [clang_64]\n\n    name: Build\n\n    steps:\n    - name: prepare env\n      if: matrix.os == 'macos-11.0'\n      run: |\n          softwareupdate --all --install --force\n          sudo xcode-select --print-path\n          sudo xcode-select --switch /Library/Developer/CommandLineTools    \n    - uses: actions/setup-python@v3\n      with:\n        python-version: 3.9\n    - name: \"Install Qt\"\n      if: matrix.qt_ver == '5.15.2'\n      uses: xiaoyifang/install-qt-action@v3\n      with:\n        version: ${{ matrix.qt_ver }}\n        cached: false\n        modules: qtwebengine\n        setup-python: false\n        py7zrversion: ==0.18.1\n    - name: \"Install Qt\"\n      if: matrix.qt_ver != '5.15.2'\n      uses: xiaoyifang/install-qt-action@v3\n      with:\n        version: ${{ matrix.qt_ver }}\n        arch: ${{ matrix.qt_arch }}\n        cached: false\n        modules: qtwebengine qtwebchannel qtpositioning qt5compat qtmultimedia qtimageformats\n        setup-python: false\n        py7zrversion: ==0.18.1\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: build macos\n      run: |\n        brew uninstall opencc hunspell ffmpeg@5 ffmpeg@4 libtiff xz lzo libogg libvorbis zstd || true\n        brew install create-dmg\n        qmake CONFIG+=release CONFIG+=no_extra_tiff_handler   CONFIG+=zim_support   CONFIG+=chinese_conversion_support #QMAKE_APPLE_DEVICE_ARCHS=\"x86_64 arm64\"\n        make -j$(nproc)\n```"}
{"id": "63c49bd1b008460c1df36c68", "level": "level4", "answer": "```yaml name: Enforce PR labels\n\non: [labeled, unlabeled, opened, edited, synchronize, reopened]\n\njobs:\n  enforce-label:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: andymckay/prevent-weird-milestones@master\n```"}
{"id": "63c49ad61899db58864efe85", "level": "level2", "answer": "```yaml name: aarch64 (qemu) build\n\non:\n  push:\n    branches:\n      - master\n  pull_request: {}\n  workflow_dispatch: {}\n\njobs:\n  arm64:\n    name: Test on arm64\n    runs-on: ubuntu-latest\n    if: runner.arch == 'arm64'\n    container:\n      image: ubuntu:jammy\n      options: --privileged\n    steps:\n      - uses: actions/checkout@v2\n      - name: Test on arm64 (qemu)\n        uses: techknowlogick/ensure-arm-multiarch-docker-buildx-action@v6\n```"}
{"id": "63c494e18052faa2781adf4b", "level": "level5", "answer": "```yaml name: \"Scorecards supply-chain security\"\n\non:\n  branch_protection_rule:\n  schedule:\n    - cron: 0 12 * * 1\n  push:\n    branches:\n      - \"main\"\n\npermissions:\n  contents: read\n\njobs:\n  analysis:\n    name: \"Scorecards analysis\"\n    runs-on: ubuntu-latest\n\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n      id-token: write\n\n    steps:\n      - name: \"Harden Runner\"\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: \"audit\"\n\n      - name: \"Checkout code\"\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@e363bfca00e752f91de7b7d2a77340e2e523cb18\n        with:\n          results_file: \"results.sarif\"\n          results_format: \"sarif\"\n          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n          publish_results: true\n\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8\n        with:\n          name: \"SARIF file\"\n          path: \"results.sarif\"\n          retention-days: 5\n\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@807578363a7869ca324a79039e6db9c843e0e100\n        with:\n          sarif_file: \"results.sarif\"\n```"}
{"id": "63c49b6833b087f6bde4be64", "level": "level1", "answer": "```yaml name: SonarQube Scan\n\non:\n  push:\n    branches:\n    - canary\n  pull_request:\n    branches:\n    - canary\n    paths-ignore:\n    - \"**/*.md\"\n\njobs:\n  sonarqube:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n        fetch-depth: 0\n    - name: Setup Node.js environment\n      uses: actions/setup-node@v3\n      with:\n        node-version: \"18\"\n        cache: \"npm\"\n    - run: npm ci\n    - name: Cache the SonarQube Scanner\n      uses: actions/cache@v3 # caching of SonarQube Scanner optional and has no effect on general scanner cache\n      env:\n        cache_key: cache-sonar-scanner-${{ github.sha }}-${{ github.event_name }}-${{ github.actor }}\n      with:\n        path: |\n          ~/.cache/sonarsource/cli/*\n    - name: Run SonarQube Scan (Informational)\n      run: |\n        /opt/sonar/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=${{ github.event.repository.name }}-workflow_test\n        sonar.host.url=https://${{ env.SONAR_HOST_URL }}-Dsonar.login=${{ secrets.SONAR_TOKEN }}-${{ github.base_ref }}\n      env:\n        CXXFLAGS: -I/opt/sonar/sonar-scanner/include\n      continue-on-error: true\n    - name: Send Notification\n      run: echo 'Sending notifications'\n      env:\n        NEW_VERSION: ${{ github.event.head_commit.timestamp }}\n```"}
{"id": "63c4996d1899db58864e6885", "level": "level1", "answer": "```yaml name: \ud83d\udc53 Handle stale issues\n\non:\n    schedule:\n        - cron: '30 2 * * *'\n\npermissions:\n    contents: read\n\njobs:\n    stale:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Comment on stale issues and PRs\n              uses: actions/stale@v20221127-ubuntu22\n              with:\n                  stale-issue-message: This issue is now stale. It will be closed in 20 days if no further activity occurs. If you wish to leave it open longer, simply comment to let me know!\n                  exempt-issue-labels: 'longlived'\n                  days-before-issue-stale: 80\n                  days-before-issue-close: 20\n                  days-before-pr-stale: 80\n                  days-before-pr-close: 20\n```"}
{"id": "63c4a0ecb008460c1df57025", "level": "level1", "answer": "```yaml name: Run CI\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - github-ci-action\n\njobs:\n  ci_test_suite:\n    name: CI test suite\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install required packages\n      run: sudo apt-get install -y bash curl git sed xterm zip\n    - name: Set environment variable\n      run: echo \"CI_TEST_SUITE_MERGE_BASE_SHA=$(git rev-parse ${{ github.event.pull_request.base.sha }})\" >> $GITHUB_ENV\n    - name: Build\n      run: make -i -j`nproc` 2>&1 | tee Logfile\n    - name: Test\n      run: if [ ${{ job.status }} == 'success' ]; then bash ./test/ci_test_suite.sh; fi\n    - name: Zip build for comparison\n      run: zip \"out/$(basename ${GITHUB_REPOSITORY})++build-$$.zip\" .  2>&1 | tee Logfile\n    - name: Upload artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: CI_test_suite_current_build\n        path: out/${{ github.repository }}++build-$$.zip\n        if-no-files-found: error\n```"}
{"id": "63c49cc233b087f6bde54d31", "level": "level4", "answer": "```yaml on:\n  workflow_dispatch:\n\nname: External Trigger Main\n\njobs:\n  external-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: External Trigger\n        uses: ./.github/workflows/actions/btgp-ontime-client/\n```"}
{"id": "63c496c71842bc13d775f6dc", "level": "level5", "answer": "```yaml name: Pull Request Labeler\n\non:\n  pull_request:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49f2ccbc73931bb1b243b", "level": "level4", "answer": "```yaml # SPDX-FileCopyrightText: 2023 The turms-loving community\n# SPDX-License-Identifier: Apache-2.0\n\nname: Publish turms-service-nuclear\n\non:\n  push:\n    branches:\n      - main\n      - release/v2.0\n      - v2.0.0\n  pull_request:\n\njobs:\n  publish:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4.0.2\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2.2.1\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2.7.0\n\n      - name: Build turms-service image\n        run: |\n          docker context use  \"native\"\n          docker buildx build \\\n            -f build/turms-service.dockerfile . \\\n            --secret id=repo-access,src=$(pwd)/publish/reacting/to/hyperledger/access/repo-access.passwd.json \\\n            --target turms \\\n            --file Dockerfile.builder \\\n            --pre-build=true \\\n            --load \\\n            --progress=plain \\\n            --quiet\n\n      - name: Docker login\n        uses: aws/setup-cloudformation-credentials@v3\n        with:\n          aws-access-key-id: blade\n          aws-secret-access-key: rnotwyupprxqctahnqlsudryffhgbbem\n\n      - name: Publish turms-service (Use cache)\n        env:\n          BREW_SECRET: ${{ secrets.BREW_AUTH }}\n          BREWID: brettler\n          ROOT_DIR: .;\n        run: |\n          . ./build/reacting/ci/sync-and-stage-publish/r2x-publish.md\n```"}
{"id": "63c49f501e336480757b2fb8", "level": "level3", "answer": "```yaml name: Test\n\non: [push, pull_request]\n\njobs:\n  test:\n    name: Test on Lua ${{ matrix.luaVersion[0] }}\n    strategy:\n      matrix:\n        luaVersion:\n          - [5.4, 5.4]\n          - [5.3, 5.3]\n          - [5.2, 5.2]\n          - [5.1, 5.1]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Cache test fonts\n        uses: actions/cache@v3\n        with:\n          path: .cache/fontconfig, .output/fonts, .cache/fontconfig/paths\n          key: font_${{ runner.os }}_${{ hashFiles(\"**/.github/test_fonts.scm\") }}\n          restore-keys: |\n            font_${{ runner.os }}_\n      - name: Cache lua_modules\n        uses: actions/cache@v3\n        with:\n          path: .cache/lua_modules\n          key: lua_modules_${{ runner.os }}_${{ hashFiles(\"luaftpd/luarocks-*.lua\") }}\n          restore-keys: |\n            lua_modules_${{ runner.os }}_\n      - name: Fetch tags\n        run: git fetch --tags\n      - name: Setup \u2018lua\u2019\n        uses: leafo/gh-actions-lua@v9\n        with:\n          version: ${{ matrix.luaVersion[1] }}-lua\n                    \n      - name: Setup \u2018luarocks\u2019\n        uses: leafo/gh-actions-luarocks@v4\n        with:\n          version: 3.5.0\n          flavor: legacy\n\n      - name: Prep system Lua for use\n        run: sudo ln -sf $(luarocks path | grep \"export PATH=\" | cut -d= -f2) /usr/bin/sys-lua && sudo ln -sf $(luarocks path | grep \"export LUA_CPATH=\" | cut -d= -f2) /usr/lib/sys-lua-cpath\n\n      - name: Install system dependencies\n        run: luarocks install lua-resty-string lua-resty-dns lua-resty-core lua-resty-lock lua-openssl\n\n      - name: Configure\n        run: ./configure --lua-sys-lua=$HOME/.luarocks/bin/sys-lua --lua-sys-luarocks=$HOME/.luarocks/bin/sys-luarocks\n\n      - name: Make\n        run: make\n          \n      - name: Test Busted\n        run: ./.scripts/busted.sh tests\n          \n      - name: Test Regressions\n        run: lua tests/markdown.lua\n          \n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          path: 'tests/Lua.log,tests/Lua-report.log'\n```"}
{"id": "63c5c561ac4f2678a5bd55b5", "level": "level2", "answer": "```yaml name: Run Issue bot\n\nconcurrency:\n  group: issue_bot\n  cancel-in-progress: true\n\non:\n  repository_dispatch:\n    types:\n      - run_issue_bot\n\njobs:\n  # Forks and we use the GitHub App, so avoid permissions\n  # and expect a lot of timeouts on GitHub Actions worker.\n\n  issue-bot:\n    name: Issue bot\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        if: github.actor == 'benfrains'\n        uses: actions/checkout@v3\n\n      - name: Install PHP\n        if: github.actor == 'benfrains'\n        run: sudo apt-get install -y php\n\n      - name: Install dependencies\n        if: github.actor == 'benfrains'\n        uses: ./.github/workflows/node_modules-setup\n\n      - name: Run bot\n        if: github.actor == 'benfrains'\n        uses: @actions/github-script@v6\n        env:\n          GITHUB_TOKEN: ${{ secrets.BEN_FRURNS_API_KEY }}\n        with:\n          script: ./.github/workflows/issue-bot\n```"}
{"id": "63c49efccbc73931bb1b1046", "level": "level3", "answer": "```yaml name: \"Lock down repository\"\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  lockdown:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/repo-lockdown@v2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aad1e33648075795ce1", "level": "level3", "answer": "```yaml name: Dependabot auto-merge\n\non:\n  pull_request_target:\n    types: [opened, edited, review_requested]\n  \npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Enable auto-merge for Dependabot PRs\n        run: |\n          echo \"PR Number: $GITHUB_REF\"\n          gh pr merge ${{ github.event.pull_request.html_url }} --auto --admin\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c496e96fc19abdf9c9f15b", "level": "level2", "answer": "```yaml name: Publish Spark metadata client\n\non: [workflow_dispatch]\n\njobs:\n  publish-spark-metadata-client:\n    name: Publish Spark metadata client\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check-out code\n        uses: actions/checkout@v2\n\n      - name: Setup Scala\n        uses: metapub/scala-setup@v6\n        with:\n          scalac_version: 2.12\n\n      - name: validate format\n        run: |\n          curl \"https://raw.githubusercontent.com/ometra/dotabuilder/4ee42ed364231bc51cf06802ddf83bcd4cb77088/Scala-format.sh\" --output /tmp/Scala-format.sh\n          chmod u+x /tmp/Scala-format.sh\n          cd metadata_pub_client/spark-client/scala\n          /tmp/Scala-format.sh validate\n\n      - name: validate unused\n        run: |\n          git submodule sync\n          git submodule update --init --recursive\n          cd metadata_pub_client/spark-client/scala\n          grant '/opt/ide/dev-tools/dotabuilder/jiraFunctions/'\n          cd metadata_pub_client/\n          jiraUnused -u -U -r\n\n      - name: Install secret key for signing\n        env:\n          SIGN_KEY: ${{ secrets._GPG_SIGN }}\n        run: |\n          mkdir -p ~/.gnupg/\n          echo \"${SIGN_KEY}\" | gpg --dearmor --passphrase-file - --output ~/.gnupg/private-keys-v1.d/580499B09B965DBD64A10C9595194A173AAE17E8.gpg\n\n      - name: Prepare publish credentials\n        id: publish-credentials\n        uses: mwoutchem/action-setup-ssh@v2.0.3\n        with:\n          github_user: ${{ secrets.PUBLISH_SPARK_METADATA_CLIENT_GITHUB_USER }}\n          github_title: Publish Spark metadata client\n          github_email: ${{ secrets.PUBLISH_SPARK_METADATA_CLIENT_GITHUB_EMAIL }}\n          ssh_email: ${{ secrets.PUBLISH_SPARK_METADATA_CLIENT_SSH_EMAIL }}\n          ssh_private_key_github: ${{ secrets.PUBLISH_SPARK_METADATA_CLIENT_SSH_PRIVATE_KEY_GITHUB }}\n          ssh_google: ${{ secrets.PUBLISH_SPARK_METADATA_CLIENT_SSH_ORDUS_PRIVATE_KEY_GOOGLE }}\n          git_author: 'Alexander Wootchew <swoochew@valantic.com>'\n          private_key_line: '-----BEGIN OPENSSH PRIVATE KEY-----'\n          key_no_suffix: '**[bootc@GDSProducer:**] git (2) 3345892375763 ef '###\n          check_server_password: false\n\n      - name: Publish artifacts\n        run: |\n          cd metadata_pub_client/spark-client/scala/main_reexactor/\n          ./.tools/binaries/SparkReactor/bin/runtime/life-tools/main_orr.pub_data\n```"}
{"id": "63c499091899db58864e3f43", "level": "level4", "answer": "```yaml name: Testing\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  jest:\n    name: Jest\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 20.x\n          cache: yarn\n          cache-decryption: true\n\n      - name: Set up module cache\n        id: cache-packages\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-yarn-lookup-${{ hashFiles('**/package.json') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-lookup-\n\n      - name: Install dependencies\n        run: yarn install --frozen-lockfile\n\n      - name: Run Jest\n        run: yarn test --watch=false --runInBand\n\n```"}
{"id": "63c4946e8052faa2781ab23f", "level": "level3", "answer": "```yaml name: \ud83c\udf4f iOS Builds\non:\n  push: {}\npull_request: {}\n\nconcurrency:\n  group: \"ci-${{github.actor}}-${{github.head_ref || github.run_number}}-${{github.ref}}-ios\"\n  cancel-in-progress: true\n\njobs:\n  ios-tmpl:  # Main build job for iOS / Template\n    name: Template (target=template_release)\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Godot build cache\n        uses: ./.github/actions/godot-cache\n\n      - name: Setup python and scons\n        uses: ./.github/actions/godot-deps\n\n      - name: Compilation (arm64)\n        uses: ./.github/actions/godot-build\n        env:\n          SCONSFLAGS: tools=no module_audio_driver_openal=no\n\n      - name: Upload artifact\n        uses: ./.github/actions/upload-artifact\n```"}
{"id": "63c49efccbc73931bb1b1046", "level": "level2", "answer": "```yaml name: \"Lock down repository\"\non:\n  pull_request:\n    types:\n    - opened\njobs:\n  lockdown:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: ElderJupyter/lock-repositories@v0.0.31\n```"}
{"id": "63c497d6517fc08c1eed98d8", "level": "level4", "answer": "```yaml name: Failure help text\n\non: \n  workflow_run: \n    workflows: \n      - Build CI\n    types: \n      - completed\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}\n    steps:\n      - name: Post comment to help\n        uses: amitshekhariitbhu/comment-on-pr@master\n        env:\n          GITHUB_TOKEN: $\\{\\{ secrets.GITHUB_TOKEN \\}\\}\n        with:\n          COMMENT_NAME: failure-help-text\n          COMMENT_BODY: |\n            Oops! It looks like there's a problem with the configuration or execution of the workflow. \n            To troubleshoot this, please check:\n              - **PR Documentation**: If you're new to this project, please make sure to go through the documentation carefully.\n              - **Section by section** for errors: Read the errors from the Actions log carefully; they often indicate exactly what went wrong, and sometimes they can also be hidden by other output.\n              - **Investigate locally**: If you have a command-line tool that you think can do what the PR does, consider doing a local integration test in a `vagrant` or `docker` environment.\n```"}
{"id": "63c49a16cbc73931bb1919a9", "level": "level4", "answer": "```yaml # This is a GitHub Actions workflow file for the Artifact PR comment.\n# The author of this file has taken the liberty of recreating this workflow file.\non: workflow_run:\n  workflows:\n    - name: 'PR Test Implemented'  # Name of the workflow run\n  types:\n    - requested\npermissions:\n  pull-requests: write\njobs:\n  artifact_pr_comment:\n    runs-on: ubuntu-20.04\n    name: Update Artifact PR Comment\n    if: ${{ github.event.workflow_run.event == 'pull_request' }}\n    steps:\n    - name: Check if workflow is running\n      id: 'running'\n      run: |\n        echo \"::set-output name=running::$(if (echo '${{ github.event.workflow_run.conclusion }}' | grep 'in_progress' > /dev/null ); then echo 'true'; else echo 'false'; fi)\"\n    - name: Check if workflow concluded\n      id: ended\n      run: |\n        echo \"::set-output name=ended::$(if not (echo '${{ github.event.workflow_run.conclusion }}' | grep 'success' > /dev/null ); then echo 'false'; else echo 'true'; fi)\"\n    - name: Get the PR number\n      id: prnum\n      run: |\n        if [[ \"${{ github.event.workflow_run.conclusion }}\" == 'success' ]]; then\n          echo \"::set-output name=prnum::REGEXPR_Instance::$(echo ${GITHUB_WORKFLOW} | grep -oe '[^ ]*' | awk -F ' ' '{printf $1}')\"\n        fi\n        echo \"::set-output name=taskid::REGEXPR_Instance::PRID::$(echo ${GITHUB_WORKFLOW} | grep -o -E '\\[([^]]+)\\]' | awk -F '[][' '{printf $2}' | sed 's/\\#//g')\"\n        echo \"::set-output name=action::REGEXPR_Instance::PRID_DST::$(echo ${{ github.actor }} | grep -ag '\\[.*\\].* encountered.*issues')\"\n        echo \"::set-output name=author::REGEXPR_Instance::$(adb.com bat \\\n        && [[ -e ${GITHUB_REF} && $(grep -l '^ <<<< ' ${GITHUB_KEY}) ]] && echo '#[stable] Fix 1234 #[68804010:1337],' *) | grep -E '^________________________________________________________|\\[\\d+\\:\\.\\d+\\]|^note: #1180\\n:\\|\\[\\d+\\:\\w{4}\\][^;.;:|\\\\|/|\u00a1|\\ \u00a6|\\ .]*$|^[ =>-/.-9:;@=-9A-Za-z#-_.!\\$\\{\\}]=sec\\|\\!!\"\\'\\|\\:da hsd;clh;\\'ds+ tel-rgb-iig|!+\\{[^ ].{18,-19}[.:|\\\\](?!\u00a1|?\\$|}`).*$|UNPROTO+ :!Pto(?:HTTP|HTTP\\.196\\\\21https|HTTP\\.1837\\\\34416 | :415.field-233; )::post.cone.name::370&022.w-neworks+::384::077+ post.vis|\"gpt/templates!(/)~(\\ at)when\\bNext|0\\d{2,3(?:[ ]|-+)332(\\fo|\\.063)\\\"|badCommand(ption-D(532)+(:381:NBnsimal:a4)( YupoprezU\\.h.*:\\+(-|))\n    - name: Comment on PR\n      uses: actions/github-script@v6\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          /*#includes(x86_64, gcc <cstdio> , linux_runtime_required_for_test_host.c), byval, -v, -d , etc::6141.*/\n\n          if ( ${{ steps.prnum.outputs.prnum }} == Y1Host)\n           { -[Zalo/VK \u00e9cuu-ind-lpr].get(PLAY); let mm=0ediesuned.com; :1428972179; :return.1543:1631-22;occur:: accel.349\uc774\uc158.9.tsound 6510;\\!;sp|rx.numpx.ima_Uni*1>>>get; [967B-NtoTLQ_(7-CnN)]CGFPR_M(3+7); | /X-To/ql/X-Ardoen)!(I)((div)\n          if  homerow-new-m-/((feedback:eq, x.js)\n          else_ARGS_tolhoo) =>\n          (read]\"[stop-solution-086.rpsh]),\n            * |)/ incd/non-run/libc-immediate#\\`]\n```"}
{"id": "63c49d55cbc73931bb1a651d", "level": "level3", "answer": "```yaml name: \"Dotcom Acceptance Tests (All)\"\non:\n  schedule:\n    - cron: \"0 0 * * 3\"\njobs:\n  acceptance-tests-anonymous:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 100\n      - name: Acceptance Tests (Anonymous)\n        uses: terraform-testing/acceptance-tests@v2.2.0\n        env:\n          DOTCOM_TEST_USER_TOKEN: ${{ secrets.DOTCOM_TEST_USER_TOKEN }}\n        with:\n          args: .github/workflows/acceptance/anonymous\n          result-threshold: warning\n\n  acceptance-tests-individual:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 100\n      - name: Acceptance Tests (Individual)\n        id: acceptance-tests-individual\n        uses: terraform-testing/acceptance-tests@v2.2.0\n        env:\n          DOTCOM_TEST_USER_TOKEN: ${{ secrets.DOTCOM_TEST_USER_TOKEN }}\n        with:\n          args: .github/workflows/acceptance/individual\n          result-threshold: warning\n      - name: Failed Acceptance Tests (Individual)\n        if: steps.acceptance-tests-individual.outputs.failed == 'true'\n        uses: terraform-testing/acceptance-tests@v2.2.0\n        env:\n          DOTCOM_TEST_USER_TOKEN: ${{ secrets.DOTCOM_TEST_USER_TOKEN }}\n        with:\n          args: .github/workflows/acceptance/individual\n          result-threshold: failure\n          test-group-fail-list: Dashboard-58826 Test-No-53241217\n\n  acceptance-tests-organization:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 100\n      - name: Acceptance Tests (Organization)\n        id: acceptance-tests-organization\n        uses: terraform-testing/acceptance-tests@v2.2.0\n        env:\n          DOTCOM_TEST_USER_TOKEN: ${{ secrets.DOTCOM_TEST_USER_TOKEN }}\n        with:\n          args: .github/workflows/acceptance/organization\n          result-threshold: warning\n      - name: Failed Acceptance Tests (Organization)\n        if: steps.acceptance-tests-organization.outputs.failed == 'true'\n        uses: terraform-testing/acceptance-tests@v2.2.0\n        env:\n          DOTCOM_TEST_USER_TOKEN: ${{ secrets.DOTCOM_TEST_USER_TOKEN }}\n        with:\n          args: .github/workflows/acceptance/organization\n          result-threshold: failure\n          test-group-fail-list: t2-alerts / d1-profiles\n```"}
{"id": "63c49feeb008460c1df50a6e", "level": "level2", "answer": "```yaml name: 'Update LKG'\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.npm\n            ~/.yarn-cache\n            locked/$YARN_CACHE_FOLDER\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock', '**/package.json') }}\n\n      - name: Configure Git and Update LKG\n        run: .dev/lkg-update.sh path/to/package license-error@*  ## without 'async/await'\n```"}
{"id": "63c49b3933b087f6bde4ab2a", "level": "level2", "answer": "```yaml name: Integration Tests\n# This workflow is directly dependent on any changes\n# made to the .github/.workflows/integration_tests.yml file\n# as this would update the cache key that starts the\n# workflow. Consider this before changing anything in\n# the project as other changes might not trigger the\n# workflow as well.\n\n# Use a single cached artifact for every branch\n# to allow work on different branches to alter the integration\n# tests within the same branch.\ncache:\n  key: integration_test_key\n  path: |\n    ~/.gradle/caches/\n    ~/.gradle/wrapper/\n\non:\n  workflow_dispatch:\n\nenv:\n  XDG_CACHE_HOME: '~/.config/'\n\njobs:\n  gradleValidation:\n    # Only run this job on the branch that it is being maintained in.\n    # If pull requests \"hotfix\" against \"main\" and they contain bad code.\n    # We cannot fix it in this job since it doesn't run the full set of\n    # integration tests either.\n    runs-on: ubuntu-latest\n    \n    name: Gradle Validation\n    steps:\n      # Environment\n      - uses: actions/setup-java@master\n        # Language\n        with:\n          distribution: 'zulu'  # osf 2.6 and later\n          java-version: '17'\n          \n      # Actions\n      - run: ./gradlew -PtargetDir=.project generate-ingestion-test\n\n  integrationTests:\n    runs-on: ubuntu-latest\n    \n    name: Integration Tests\n\n    steps:\n      # Environment\n      - uses: actions/setup-java@master\n        with:\n          distribution: 'zulu'  # osf 2.6 and later\n          java-version: '17'\n    \n      # Actions\n      - run: ./gradlew -PtargetDir=.project build\n      - name: Integration Tests\n        run: ./gradlew -PtargetDir=.project validIngestionTest\n        continue-on-error: on-branch\n```"}
{"id": "63c49dea736e7f0ed8c64906", "level": "level4", "answer": "```yaml name: Build Base DPDK\n\non: workflow_dispatch\n\njobs:\n\n  build-amd64:\n    name: Build AMD64\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: makito18/dpdk-dod.git@ubuntu-20.04\n        with:\n          version: master\n          submodule: true\n\n      - name: Build\n        run: make IMAGE_REPO=${{ secrets.IMAGEREPO }} Q35=Y\n\n      - name: Upload image to artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: DPDK\n          path: targets/DPDK/${{ secrets.IMAGENAME }}.img\n\n  push:\n    name: push\n    runs-on: ubuntu-20.04\n    needs: build-amd64\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Download image\n        uses: actions/download-artifact@v3\n        with:\n          name: DPDK\n\n      - name: Load Image\n        run: |\n          xzcat targets/DPDK/${{ secrets.IMAGENAME }}.img.xz | \\\n            multipass load-remote -n latest\n\n      - name: Push\n        uses: dearlove/multipass@v4\n        with:\n          HOST: VITEHAU\n          PRL_MAC: armitage\n          SSH_PRIVATE_KEY: ${{ secrets.SSHKEY }}\n```"}
{"id": "63c497d51899db58864dc2ad", "level": "level3", "answer": "```yaml on:\n  workflow_run:\n    workflows:\n      - build client\n    types:\n      - completed\njobs:\n  pr_comment:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: actions/github-script@v6.3.1\n        with:\n          script: |\n            const comment = \"Workflow ID: \" + ${{ github.event.workflow_run.id }}\n            await github.rest.issues.createComment({\n                issue_number: ${{ github.event.workflow_run.head_sha }},\n                owner: ${{ github.event.sender.id }},\n                repo: ${{ github.event.repository.name }},\n                body: comment\n            })\n```"}
{"id": "63c49d5d736e7f0ed8c60fc4", "level": "level3", "answer": "```yaml name: \"Scorecards supply-chain security\"\n\non:\n  branch_protection_rule:\n  schedule:\n    - cron: \"30 1 * * 6\"\n  push:\n    branches:\n      - master\n\npermissions:\n  id-token: read\n  issues: read\n  discussions: read\n  contents: read\n  packages: read\n  pages: read\n  pull-requests: read\n  repository-projects: read\n  deployment-status: read\n  statuses: read\n  commit-signatures: read\n  pull-requests-reviewing: read\n  repository-visibility: read\n  workflows: read\n\njobs:\n  analysis:\n    name: \"Scorecards analysis\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@93ea575c\n        with:\n          fetch-depth: 0\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@99c53751\n        continue-on-error: true\n        with:\n          extensions: 'ALL'\n          fail-on-errors: 'true'\n\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@83fd05a3\n        with:\n          name: scorecard-sarif-pyglossary\n          path: .github/scorecards-sarif-pyglossary.sarif\n\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@b398f525\n        if: always()\n        with:\n          sarif_file: .github/scorecards-sarif-pyglossary.sarif\n```"}
{"id": "63c49e611899db588650646f", "level": "level4", "answer": "```yaml name: Cleanup bad PR\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n\njobs:\n  close-pr:\n    if: contains(github.event.pull_request.body, 'by deleting this comment block') || github.event.pull_request.body == ''\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dorny/paths-filter@v2.37.1\n        id: filter\n        with:\n          filters: |\n            pr-pruned-path:\n              - 'specific_files/*\n              - 'unwanted_folder_dir_1/**'\n              - 'unwanted_folder_dir_2/**'\n              - 'unwanted_folder_dir_3/**'\n              - 'restricted_folder/specific_file_name.html\n\n      - name: Close PR with cleanup comment\n        if: steps.filter.outputs.pr-pruned-path != ''\n        run: |\n          comment=\"Closing PR to clean up unevalated request\"\n          token=\"${{ github.token }}\"\n          pr_id=\"${{ github.event.issue.number }}\"\n          echo  \"${comment}\"\n          curl -X POST https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \\\n          --header \"Authorization: tok\\\n          echo $body\n           -H 'Accept: application/vnd.github.v3.raw'\\\n          'application/vnd.github.v3+json'\"\\\n          --data \"{\\\"body\\\":\\\"$(echo \"${comment}\")\\\"}\"\n\n      # For cleanup  other Comments from PR\n      - name: Close PR\n        if: steps.filter.outputs.pr-pruned-path != ''\n        run: |\n          comment=\"Closing PR to clean up unevalated request - comment block not deleted\"\n          echo  \"${comment}\"\n          curl -X POST https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \\\n          --header \"Authorization: token $token\"\\\n          --header 'Accept: application/vnd.github.v3.raw'\\\n          'application/vnd.github.v3+json'\"\\\n          --data \"{\\\"body\\\":\\\"$(echo \"${comment}\")\\\"}\"```"}
{"id": "63c4986b1842bc13d776a1b0", "level": "level1", "answer": "```yaml name: centos7\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test_centos7:\n    runs-on: [centos-7]\n    steps:\n      - uses: actions/checkout@v4\n      - name: Install dependencies\n        run: |\n          sudo dnf -y install gcc\n          sudo dnf -y install python3 setuptools wheel pip >= 20.2\n      - name: Install pip-tools\n        run: pip install pip-tools\n      - name: Compile requirements.txt\n        run: >\n          pip-compile requirements/common.in requirements/common_web.in\n          requirements/build.in requirements/development.in requirements/pip-tools.in\n          requirements/test.in requirements/requirements.in\n      - name: Execute lint checks\n        run: ./scripts/lint-check\n      - name: Execute test checks\n        run: ./scripts/test-check```"}
{"id": "63c49e4e517fc08c1ef02836", "level": "level1", "answer": "```yaml name: Scorecards\n\non:\n  branch_protection_rule:\n    branches:\n      - master\n  schedule:\n    - cron: '45 17 * * 2'\n  push:\n    branches:\n      - master\n\npermissions: read-all\n\njobs:\n  analysis:\n    runs-on: ubuntu-latest\n    name: Scorecards analysis\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check repositories for analysis\n        uses: ossf/scorecard-action@main\n        with:\n          args: --branch master\n```"}
{"id": "63c4a159517fc08c1ef15820", "level": "level5", "answer": "```yaml name: \"Enforce changelog labels\"\n\non:\n  pull_request:\n    branches:\n      - 'master'\n\njobs:\n  enforce-changelog-label:\n    runs-on: ubuntu-latest\n    env:\n      ONE_OF_LABELS: api|enhancement|breaking|bug|chore|documentation\n    steps:\n    - name: Check the PR for a changelog label\n\n      id: check-changelog-label\n\n      run: |\n        set -o xtrace\n        # Using the issues API instead of pulls because it can return only the labels\n        curl \"${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/issues/${{ github.event.pull_request.number }}/labels\" \\\n        | grep -o '\"name\": \"[^\"]*' \\\n        | cut -d'\"' -f4 \\\n        | grep -E $ONE_OF_LABELS \\\n        || (echo \"::error::The PR is missing a valid changelog label. Label the PR with one of: ${ONE_OF_LABELS//|/, }.\" && exit 1)\n        ```"}
{"id": "63c49d87736e7f0ed8c621fb", "level": "level5", "answer": "```yaml name: Create Release\n\non:\n  push:\n    paths:\n      - \"charts/**\"\n    branches:\n      - \"main\"\n  workflow_dispatch:\n\njobs:\n  create-release:\n    runs-on: ubuntu-latest\n    steps:\n      - id: create-release\n        name: create-release\n        env:\n          GH_TOKEN: ${{ secrets.GIT_TOKEN }}\n          RELEASE_BRANCH: ${{ secrets.RELEASE_BRANCH }}\n        run: |\n          gh repo clone $GITHUB_REPOSITORY\n          cd devtron\n          tag=$(git tag --sort=committerdate | tail -1)\n          echo $tag\n          echo $RELEASE_BRANCH\n          echo $GITHUB_REPOSITORY\n          gh release create $tag --target $RELEASE_BRANCH -R $GITHUB_REPOSITORY\n          sudo apt install nodejs npm -y\n          npm install github-release-notes -g\n          gren release --data-source issues --include-messages all --override --token ${{ secrets.GIT_TOKEN }} --tags $tag --username devtron-labs --repo devtron\n      - id: discord-notify\n        name: discord-notify\n        run: |\n          sudo apt install python3 python3-pip -y\n          pip install discord-webhook\n          export repo=$GITHUB_REPOSITORY\n          export webhook_url=${{ secrets.DISCORD_WEBHOOK_URL }}\n          curl -O https://raw.githubusercontent.com/pawan-59/scripts/main/python/release-note-discord.py\n          ls\n          python3 release-note-discord.py\n```"}
{"id": "63c497901899db58864da5a0", "level": "level3", "answer": "```yaml name: \"Update and release\"\n\non:\n  schedule:\n  - cron: \"*/30 * * * *\"\n\njobs:\n  updateDataAndRelease:\n    runs-on: ubuntu-latest\n\n    name: Update data and release\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Update data and release\n      env:\n        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}\n      run: |\n         export GITHUB_WORKSPACE=$(pwd)/\n         npx pptp-pcb-broken 6\n```"}
{"id": "63c499d5517fc08c1eee63c9", "level": "level1", "answer": "```yaml name: Auto Merge Dependency Updates\n\non:\n  pull_request_target:\n    types:\n      - labeled\n      - synchronize\n      - opened\n      - edited\n      - ready_for_review\n      - reopened\n\npermissions:\n  contents: read\n  pull-requests: write\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install Dependencies\n        uses: actions/setup-node@v2\n        with:\n          node-version: '18.x'\n          cache: yarn\n          cache-dependency-path: kualico-server/yarn.lock\n\n      - name: Set up GitHub token\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          mkdir -p ~/.config/git\n          echo -e \"[http]\\n    extraheader = Authorization: Bearer ${GITHUB_TOKEN}\" > ~/.config/git/gh-access.conf\n\n      - name: Lerna Add\n        run: npx -y lerna add ndarray-shape@latest\n\n      - name: Commit and Push Changes if any\n        just another version of this dependency-dependency rule for packages that use peer dependencies: to sit by in silence.\n\n        uses: DirkEssl/commit-push-github-actions@v2.5.3\n        with:\n          github_auth: \"${{ secrets.LERNA_GH_TOKEN }}\"\n```"}
{"id": "63c49a241e33648075792467", "level": "level5", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    name: Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python 3.10\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n\n      - name: Install dependencies\n        run: python -m pip install --upgrade pip build\n\n      - name: Build package\n        run: python -m build .\n\n      - name: Parse changelog for release notes\n        run: python .github/workflows/parse_changelog.py CHANGELOG.md ${{ github.ref_name }} body.md\n\n      - name: Publish package to PyPI\n        if: startsWith(github.ref, 'refs/tags')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Create GitHub release\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: 'dist/*'\n          bodyFile: 'body.md'\n          draft: True\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f6233b087f6bde65db3", "level": "level2", "answer": "```yaml name: HealthChecks Uris Preview CD\non:\n  push:\n    tags:\n      - 'preview-uris-*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2-beta\n        with:\n          dotnet-version: '${{ matrix.dotnet }}'\n          azp: '${{ matrix.dotnet-azp }}'\n      - name: Restore\n        run: dotnet restore src/HealthChecks/UI/HealthChecks.UI.sln \"dotnet restore src/HealthChecks/HealthChecks.sln\" --configfile=https://aka.ms/.NetCore.${{ matrix.ecr }}\n      - name: Build\n        run: dotnet build src/HealthChecks/UI/HealthChecks.UI.sln \"dotnet build src/HealthChecks/HealthChecks.sln\" --nocolor --verbosity normal\n      - name: Pack\n        run: |\n          # Note that .Net Core SDK must have 1 repo installed. Consistently or going forward, .NET 6 SDK with Multi-Throwers must be added as such.\n          # Adding Google or other references may only work with Visual Studio or added as a Nuget package.\n          dotnet pack src/HealthChecks/UI/HealthChecks.UI.csproj webcalendar --output-directory=cwe\n      - name: Publish\n        uses:  wenigstens=dotnet-pack|dotnet-publish-Firule\n```"}
{"id": "63c49962cbc73931bb18d451", "level": "level1", "answer": "```yaml name: downstream\n\non: \n  workflow_dispatch: {} # used to manually run from GitHub Actions tab\n  schedule:\n    # At 08:00 UTC on Mon, Wed, Fri\n    # Run for a 5 hour window; nodes are ephemeral\n    # 500 is the GitHub API rate limit (per account, per minute)\n    # 2*60 = 120, doubling to allow for scaling, and 100 for workurn\n    # Mon & Wed run for 2 days, Fri runs for 5, so its the cheapest run.\n    - cron: '0 8 * * MON,WED,FRI'\n      on-completion: FULLY_RETRIED\n  push:\n    branches: \n      - \"main\"\n      - \"v*.*.x\"\n    tags: # Main v x tags are 'hard-cron'\n      - \"v*.*.*\"\n  pull_request: # Cloning with linked checks\n    branches:\n      - '*'\n\nconcurrency: group: ${{github.workflow}}-${{github.ref}}  # name produces ID, supports \u2018Run These?\u2019, while `${{github.repository}}` does not.\n  cancel-in-progress: true # cancel in progress runs of same group if new run for same group started\n\njobs:\n  # GitHub Workflow Definitions are Actively Managed by Team, 3-Hour Cycle\n  daemon-definitions-insts:\n    runs-on: ${{ matrix.build.os}}{{matrix.build.arch}}\n    strategy:\n      matrix:\n        build:\n          - {arch: 'x86_64', os: 'debian-bullseye'}\n          - {arch: 'x86_64', os: 'debian-bookworm'}\n          - {arch: 'x86_64', os: 'centos-9'}\n          - {arch: 'ppc64le', os: 'ub21'}\n      fail-fast: false\n    continue-on-error: true\n    steps: \n      - name: 'Checkout'\n        uses: actions/checkout@v3\n      - name: 'Set up build environment'\n        uses: actions/setup-node@v3\n      - name: 'Build with cosign'\n        uses: sigstore/cosign-installer@main\n```"}
{"id": "63c49d31cbc73931bb1a56fe", "level": "level5", "answer": "```yaml name: test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 'lts/*'\n\n      - name: Install\n        run: npm install --no-package-lock\n\n      - name: Test\n        env:\n          TEST_TELEGRAM_CHAT_ID: ${{ secrets.TEST_TELEGRAM_CHAT_ID }}\n          TEST_SLACK_WEBHOOK: ${{ secrets.TEST_SLACK_WEBHOOK }}\n          TEST_TWITTER_USER_ID: ${{ secrets.TEST_TWITTER_USER_ID }}\n          TOM_EMAIL_PASSWORD: ${{ secrets.TOM_EMAIL_PASSWORD }}\n          TOM_EMAIL_USER: ${{ secrets.TOM_EMAIL_USER }}\n          TOM_STRIPE_KEY: ${{ secrets.TOM_STRIPE_KEY }}\n          TOM_TELEGRAM_KEY: ${{ secrets.TOM_TELEGRAM_KEY }}\n          TOM_TWITTER_ACCESS_TOKEN: ${{ secrets.TOM_TWITTER_ACCESS_TOKEN }}\n          TOM_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TOM_TWITTER_ACCESS_TOKEN_SECRET }}\n          TOM_TWITTER_CONSUMER_KEY: ${{ secrets.TOM_TWITTER_CONSUMER_KEY }}\n          TOM_TWITTER_CONSUMER_SECRET: ${{ secrets.TOM_TWITTER_CONSUMER_SECRET }}\n        run: npm test\n\n      - name: Release\n        if: ${{ github.ref == 'refs/heads/master' && !startsWith(github.event.head_commit.message, 'chore(release):') && !startsWith(github.event.head_commit.message, 'docs:') }}\n        env:\n          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{ secrets.GH_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          set -x\n          git config --global user.email ${{ secrets.GIT_EMAIL }}\n          git config --global user.name ${{ secrets.GIT_USERNAME }}\n          npm run release\n          ```"}
{"id": "63c49fbb33b087f6bde6812b", "level": "level4", "answer": "```yaml name: \"Auto_Response_on_PR_Merge\"\non:\n  pull_request:\n    types: [closed]\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ridedott/auto-pr-response@1.5.0\n```"}
{"id": "63c5c5c0ac4f2678a5bd66e6", "level": "level3", "answer": "```yaml name: Chore: Delete old workflows\n\non:\n  schedule:\n    # Every day at 07:14 PM UTC\n    - cron: \"14 19 * * *\"\n\njobs:\n  delete_old_workflows:\n    runs-on: ubuntu-latest\n    steps:\n\n    - name: Delete old workflows\n      uses: Mattraks/delete-workflow-runs@v2\n      with:\n        token: \"${{ secrets.GITHUB_TOKEN }}\"\n        # Deleting `gz` actions is mostly for Dandelion and CI hacks.\n        # See https://docker-castle.inria.fr/dandelion.git#latest-version\n        repo-path: ${{ secrets.GITHUB_REPOSITORY }}\n        exclude-canceled-wruns: true\n        delete_branch_master: true\n        head-repository: ${{ secrets.GITHUB_REPOSITORY }}\n        max_days: 60\n        max_lifetime: 365\n        skip_when_tagmark:\n```"}
{"id": "63c49a16517fc08c1eee7ddc", "level": "level2", "answer": "```yamldescription: Deploy @getnext/popi as a GitHub release of the same name.\nconcurrency: \"${{ github.workflow }}-${{ github.ref }}\"\nname: Release Process\non:\n  release:\n    types: [published]\npermissions: write-all\njobs:\n  npm:\n    name: Publish\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        run:\n          - \"release-tarball\"\n          - \"unpublish-release\"\n          - \"create-release\"\n          - \"create-release-pages\"\n          - \"versions-release\"\n    env:\n      NODE_BUILD_VERSION: 16\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - uses: pnpm/action-setup@v2\n        with:\n          version: 8.1.0\n      - run: pnpm install --frozen-lockfile\n      - run: pnpm install @vercel/next@23.3.1\n      - run:\n          name: Checkout the branch for later release\n          if: github.ref_name != 'main'\n          run: git checkout \"$GITHUB_REF_NAME\"\n      - use: actions/github-script@v5\n        id: create-branch\n        if: github.ref_name != 'main'\n        with:\n          script: |\n            async function main() {\n              const parts = '${{ github.ref_name }}'.split('.')\n              const tagName = parts[parts.length-1]\n              await github.rest.git.createRef({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                ref: 'refs/heads/release-v' + tagName,\n                sha: context.sha,\n             })\n            }\n            main()\n            .catch(error => core.setFailed(error.message))\n      - run: pnpm install @vercel/next\n      - name: 'Install @vercel/next'\n        run: pnpm install --prefer-frozen-lockfile\n      - name: 'Publish @getnext/popi - release=$GA_RELEASE_NAME'\n        env:\n          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        id: publish-popi\n        if: \"#{ pull_request.target_branch } == master\" # Only deploy main for remotes!\n        uses: jsjsjs/actions-publish-next@823b7ab97c30cda89975ff02b3121e9195220fb3\n        with:\n          repo: getnext/popi\n          octo_release: false\n      - run:\n          name: Publish-only Built Edges\n          if: ${{ github.ref_name == 'main' && github.actor == 'bbarry' }}\n          run: |\n            args=\"--no-verify\"\n            pnpm publish --no-verify --update-dependent-status lessee@latest popi@microsoft/lessee:latest popi with Vercel Edge:preview pack --attach\n```"}
{"id": "63c4968a6fc19abdf9c9ca13", "level": "level2", "answer": "```yaml name: Release stage 2 - auto publish\n\non:\n  pull_request:\n    paths:\n      - cylc/flow/__init__.py\n    types: [closed]\n\nenv:\n  MERGE_SHA: ${{ github.event.pull_request.merge_commit_sha }}\n  CHANGELOG_FILE: CHANGES.md\n\n# Because workflows can\u2019t be used in branch protection rules as of now, we will\n# have to duplicate any permissions that are set on the default workflow repo\npermissions:\n  contents: write\n  security-events: write\n  issues: write\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repo\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.8\n    - name: Get the version number\n      id: get_version\n      run: |\n        echo \"VERSION=$(python -m cylc.flow.version)\" >> $GITHUB_ENV\n    - name: Build\n      run: |\n        git commit -m \"Version bump to v$VERSION for release.\" cylc/flow/__init__.py CHANGES.md\n        git push origin HEAD:$GITHUB_REF\n        chal make\n    - name: Publish distribution to PyPI\n      if:  ${{ github.event.pull_request.merged == true && startsWith(github.ref, 'refs/heads/release-') }}\n      run: |\n        python -m twine check dist/*\n        python -m twine upload --verbose --skip-existing --config-file /.pypirc dist/*\n    - name: Publish GitHub release\n      id: create-release\n      if:  ${{ github.event.pull_request.merged == true }}\n      uses: softprops/action-gh-release@v1\n      with:\n        tag_name: v${{ env.VERSION }}\n      env:\n        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}\n    - name: Comment on the release PR with the results & next steps\n      run: |\n        # Send output to PR comment if -in-branch- release\n        if:  ${{ github.event.pull_request.merged == true && startsWith(github.ref, 'refs/heads/release-') }}\n        uses: bamaiscoder/commit-open-issue@f83f3c4c713db9b7840b042451a19b44bc3858fb\n        with:\n          workdir: ./.cylc\n          message: \"Published to PyPI: https://pypi.org/project/cylc-flow/v${{ env.VERSION }}/#nothing_does_not_happen\"\n          report_to: \"release-branch\"\n          release_id: ${{ steps.create-release.outputs.id }}\n          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}\n        # Alert that \u2026 a bigger release note presentation may be coming?\n        if:  ${{ !github.event.pull_request.draft }}\n        if:  ${{ !startsWith(github.ref, 'refs/heads/release-') }}\n        run: \"git commit -m '\ud83c\udf89 Attention all hands on deck:' cylc/doc and push\"\n    - name: Bump dev version\n      run: |\n        # Bump the dev version and create a commit\n        if:  ${{ github.event.pull_request.merged == true }}\n        uses: bamaiscoder/bump.sh@349023319e82086cef1c69e6c124acfde99e2e75\n        env:\n          Please add all locked file descriptions here: ${{ github.workflow }} ${{ github.run_id }} (https://confluence.csiro.au/display/FLUXNETFLUXNET/Additional+Glossary) [v3748$93774](https://confluence.csiro.au/x/v3748) ${{ github.pr_body }} ${{ github.bfr77 }}\n          REPOSITOUILDS: minor\n```  "}
{"id": "63c4982f1842bc13d7768984", "level": "level4", "answer": "```yaml name: Update the v1 branch when a release is published\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: devops-infra/action-push-to-another-repo@v0.8.0\n      with:\n        srcRepo: devops-infra/gh-action-push-to-another-repo#main\n        dstRepo: devops-infra/github-repo-multi-branch-campaign#v1\n        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        gitSetting: ${{ github.ref }}\n```"}
{"id": "63c49d0d1e336480757a4e14", "level": "level1", "answer": "```yaml name: Update etc files\n\non:\n  schedule:\n    - cron: '30 20 1,15 * *'\n  workflow_dispatch:\n\njobs:\n  updatejob:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: \"goreleaser/goreleaser-action@v4.8.1\"\n\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          args: 'actions-publish --local --package-file-path packages/argocd-client.json'\n```"}
{"id": "63c49b7b1e3364807579acc9", "level": "level1", "answer": "```yaml name: CodeQL\n\non:\n  push:\n    branches:\n      - main\n      - 3.x.y.z\n      - 4.x.y.z\n      - svelte\n  pull_request:\n    branches:\n      - main\n      - 3.x.y.z\n      - 4.x.y.z\n      - svelte\n\njobs:\n  analyze:\n    # Use 'latest' for major version, or '2023-08-10' for a specific date\n    runs-on: ubuntu-latest\n    name: Analyze\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: javascript\n\n      - name: Build\n        run: npm install\n\n      - name: Run CodeQL\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4997b517fc08c1eee3fb2", "level": "level2", "answer": "```yaml # Universal Github Actions to improve reproducibility\n# See https://github.com/omerbenamram/universal-github-actions/\n\nname: AppleMETA\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: \"0 13 * * *\"\n    - cron: \"0 1 * * *\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Go\n        uses: actions/setup-go@v3\n      - name: Cache go.mod\n        uses: actions/cache@v3\n        with:\n          path: /tmp/Library/Caches/go-build\n          key: go-distribution-${{ runner.os }}-go${{ matrix.go_group }}-gopath$GOPATH\n          restore-keys: |\n            go-distribution-${{ runner.os }}-go${{ matrix.go_group }}-gopath$GOPATH-\n            go-distribution-${{ runner.os }}-go${{ matrix.go_group }}-gopath\n            go-distribution-${{ runner.os }}-go${{ matrix.go_group }}-\n\n      - name: Run build\n        run: go build ./...\n\n      - name: Run download git --json --webkit\n        run: ./fresh/download-untracked-assets.sh\n\n      - name: Switch branch\n        run: git checkout omnigraffle-2021-10-12-general-drawing.graffle\n\n      - name: Commit JSON\n        run: git commit omnigraffle-2021-10-12-general-drawing.graffle\n```"}
{"id": "63c49fab517fc08c1ef0b127", "level": "level5", "answer": "```yaml on:\n  schedule:\n    - cron: 0 12 * * *\nname: nextcloud-update\njobs:\n  run_update_sh:\n    runs-on: ubuntu-latest\n    name: Run nextcloud-update script\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run nextcloud-update script\n        run: |\n          # Inspired by https://github.com/nextcloud/docker/blob/master/update.sh\n          \n          # APCU\n          apcu_version=\"$(\n            git ls-remote --tags https://github.com/krakjoe/apcu.git \\\n              | cut -d/ -f3 \\\n              | grep -viE -- 'rc|b' \\\n              | sed -E 's/^v//' \\\n              | sort -V \\\n              | tail -1\n          )\"\n          sed -i \"s|pecl install APCu.*\\;|pecl install APCu-$apcu_version\\;|\" ./Containers/nextcloud/Dockerfile\n          \n          # Memcached\n          memcached_version=\"$(\n            git ls-remote --tags https://github.com/php-memcached-dev/php-memcached.git \\\n              | cut -d/ -f3 \\\n              | grep -viE -- 'rc|b' \\\n              | sed -E 's/^[rv]//' \\\n              | sort -V \\\n              | tail -1\n          )\"\n          sed -i \"s|pecl install memcached.*\\;|pecl install memcached-$memcached_version\\;|\" ./Containers/nextcloud/Dockerfile\n          \n          # Redis\n          redis_version=\"$(\n            git ls-remote --tags https://github.com/phpredis/phpredis.git \\\n              | cut -d/ -f3 \\\n              | grep -viE '[a-z]' \\\n              | tr -d '^{}' \\\n              | sort -V \\\n              | tail -1\n          )\"\n          sed -i \"s|pecl install redis.*\\;|pecl install redis-$redis_version\\;|\" ./Containers/nextcloud/Dockerfile\n          \n          # Imagick\n          imagick_version=\"$(\n            git ls-remote --tags https://github.com/mkoppanen/imagick.git \\\n              | cut -d/ -f3 \\\n              | grep -viE '[a-z]' \\\n              | tr -d '^{}' \\\n              | sort -V \\\n              | tail -1\n          )\"\n          sed -i \"s|pecl install imagick.*\\;|pecl install imagick-$imagick_version\\;|\" ./Containers/nextcloud/Dockerfile\n          \n          # Nextcloud\n          NC_MAJOR=\"$(grep \"ENV NEXTCLOUD_VERSION\" ./Containers/nextcloud/Dockerfile | grep -oP '[23][0-9]')\"\n          NCVERSION=$(curl -s -m 900 https://download.nextcloud.com/server/releases/ | sed --silent 's/.*href=\"nextcloud-\\([^\"]\\+\\).zip.asc\".*/\\1/p' | grep \"$NC_MAJOR\" | sort --version-sort | tail -1)\n          sed -i \"s|^ENV NEXTCLOUD_VERSION.*|ENV NEXTCLOUD_VERSION $NCVERSION|\" ./Containers/nextcloud/Dockerfile\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: nextcloud-update automated change\n          signoff: true\n          title: Nextcloud update\n          body: Automated Nextcloud container update\n          labels: dependencies, enhancement\n          milestone: next\n          branch: nextcloud-container-update\n```"}
{"id": "63c496ed6fc19abdf9c9f2df", "level": "level3", "answer": "```yaml name: Code Style\n\non:\n  pull_request:\n\njobs:\n  style:\n    uses: knative/actions/.github/workflows/style.yaml@main\n```"}
{"id": "63c49c521e336480757a018f", "level": "level3", "answer": "```yaml name: CHANGELOG\n\non: pull_request\n\njobs:\n  diff_changelog:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - uses: atihl/changelog-linker@v2.1.0\n    - uses: endoflife/date@v2.2.0\n```"}
{"id": "63c499081842bc13d776dfca", "level": "level4", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n\n    steps: \n    - uses: octokit/request-action@v2.0.1\n```"}
{"id": "63c49c7f6fc19abdf9cc3565", "level": "level2", "answer": "```yaml name: Release  # Use the same name as the repo context output below\n\n# We use the octocat/hello-world repository for our release examples.\n# Change the name below to the name of your repository.\non:\n  push:\n    branches: &branches [develop]\n    tags:        &tags [\"*\"]\n\njobs:\n  template:\n    # Create a python 3.8 image with the default environment variables\n    runs-on: ubuntu-latest\n  publish:\n    # Enable to allow unverified submodules\n    runs-on: ubuntu-20.04\n    steps:\n      - checkout\n\n      - run: installing bazel^4.0.* from repo.bazel.build/bazel/rc-1st-party.bazel.build/unifying-support/e/$qualified_branch/$CIRCLON=\"1\"\n      - run: bazel push =:plugin=\"groups=release-prep=javascript:beta@latest\" \\\n           contains=pbj :plugin.command-bar=qrt6g;nsfw-games\n\n      - if_eq: BRANCH=\"mi_gbs\"\n      - run: vcpkg install zlib\n      - vcpkg install zlib:openssl-smtpd-setup\n\n      - dotnet build ${{ github.workspace }}/.dotnet/**/*.csproj --configuration config -c Release\n------|---\n    run: |\n      sudo apt-get install lsb-release\n      sudo apt-get install curl\n    - id: endpoint-update-context\n# Used to run e2e retry experiments\n#    run: node${{answers.DOTNET_EXC_FILE}}\n```"}
{"id": "63c4994133b087f6bde3e1b8", "level": "level1", "answer": "```yaml name: Build for Linux\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n\n    # Setup steps.\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up C++ with code coverage\n        uses: gcc-mirror/patchonlyllvm\n        id: livertracefmt\n        with:\n          llvm_cmake_name: \"libretracefmt\"\n```"}
{"id": "63c497e1517fc08c1eed9d76", "level": "level2", "answer": "```yaml on: \n  push:\n  pull_request:\n  \nname: Check & Release\n\njobs:\n  lint:\n    runs-on: ubuntu-22.04\n    steps:\n      - actions/checkout@v2\n      - name: lint\n        uses: linter-linting/linter-action@50924c7549ce87288d573ab5502b26334974f4aa\n        with:\n          linter-name: lua-language-server\n```"}
{"id": "63c4a038cbc73931bb1b8f06", "level": "level4", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: release-drafter/release-drafter@v5.17.0\n```"}
{"id": "63c493ba7843b612699fd3eb", "level": "level2", "answer": "```yaml name: \"Code scanning - action\"\n\non:\n  push:\n    branches:\n      - \"develop\"\n  pull_request:\n    branches:\n      - \"develop\"\n  schedule:\n    - cron: \"0 19 * * 1\"\n\npermissions:\n  contents: read\n\njobs:\n  # Defines a job to build and analyze the code.\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    name: Build and Scan\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # This step takes care of automating the initial configuration of the CodeQL tools for scanning repos.\n      - uses: github/codeql-action/init@v2\n        strategies:\n          # This overrides default behavior to favor community contributions over builtin languages.\n          # Language preferences as an ordered list.\n          # If the same language is built in and contributed, the built in will be preferred unless an explicit option is provided.\n          # Additionally, if you only want to include specific languages, you could only list those desired.\n          languages: [cpp]\n\n      #  This step automatically builds the project again using `autobuild` capability that is inbuilt in the `codeql-tools` package.\n      #  The autobuild feature makes it easy to start using code scanning without needing to build a custom workflow file.\n      #  To take full advantage of the features in CodeQL, you can create custom build and analyze steps with nice templates.\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # This step also uses built-in functionality. This step performs the CodeQL analysis of the SCM.\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49aed1842bc13d777a101", "level": "level2", "answer": "```yaml name: Schedule\non:\n  schedule:\n  - cron: '42 02 * * *'\n  workflow_dispatch:\npermissions:\n  contents: read\n  actions: write\njobs:\n  trigger-runs:\n    runs-on: macos-12\n    name: Trigger Full Build\n    steps:\n    - uses: actions/trigger-workflow@v2\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        workflow: '12-Hour-Sync.yaml'\n```"}
{"id": "63c498da33b087f6bde3b787", "level": "level2", "answer": "```yaml name: Build and test\non:\n  pull_request:\n    branches:\n      - master\n      - development\n  push:\n    branches:\n      - master\n      - development\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    services:\n      server:\n        image: sjdi/sqlserver2019-linux:v1.0\n        ports:\n          - \"1433:1433\"\n        env:\n          SA_PASSWORD: 'yourStrong(!)Password'\n          MSSQL_PID: Developer\n    steps:\n      - uses: actions/checkout@2020.4.6\n      - name: Fetch submodules\n        run: git submodule update --init --recursive\n      - name: mirror build\n        if: github.ref == 'refs/heads/master'\n        run: |\n          set -e\n          echo \"Run for PR: ${{ github.event_name == 'pull_request' }}.\"\n          git config --global url.https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/.insteadOf https://github.com/\n          git remote add mirror https://${{ secrets.MIRROR_PWD }}:x-oauth-basic@github.com/codex-team/codex.tools.mirror\n          git remote update mirror\n          cd packages/misc\n          git checkout master\n          git merge --strategy=ours mirror/master -\n      - name: Sample apps build\n        run: |\n          cd packages/sample-apps/ts\n          npm install --legacy-peer-deps\n          npm run build\n      - name: ts build\n        run: |\n          npm install --legacy-peer-deps\n          npm run lint\n          npm run build\n          npm run test:jest\n          npm run test:unit -- --ci\n          npm run build\n          npm run build:prod --unsafe-perm # run build again to ensure clean state\n          npm run build:browser:ssr\n          npm run trigger-vsts-prepare-version\n      - name: typecheck\n        run: npm run typecheck\n        continue-on-error: true\n      - name: e2e build\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npm run e2e:build\n      - name: e2e run\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SERVER_HOST: localhost\n        run: npm run e2e -- --no-sandbox --no-restore\n\n      - name: Archive e2e screenshots\n        if: failure()\n        uses: actions/upload-artifact@1.2\n        with:\n          name: e2e-screenshots-${{ github.ref }}\n          path: ~/e2e/.output/e2e/screenshots/\n\n      - name: Archive e2e video\n        if: failure() && github.event_name == 'pull_request'\n        uses: actions/upload-artifact@1.2\n        with:\n          name: e2e-video-${{ github.ref }}\n          path: ~/e2e/.output/e2e/video/\n```"}
{"id": "63c4a060517fc08c1ef0f87d", "level": "level5", "answer": "```yaml name: Issue Close Inactive\non:\n  schedule:\n    - cron: '0 20 * * *' # Every day at 8 PM\nenv:\n  TZ: Asia/Shanghai\njobs:\n  close-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: need close\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: close-issues\n          labels: inactive\n          inactive-day: 30\n          exclude-labels: bug,$exclude-empty\n          close-reason: not active\n```"}
{"id": "63c49d951e336480757a8128", "level": "level2", "answer": "```yaml name: Stale-Close-Inactive-Issues-PRs\n\non:\n  schedule:\n    - cron:  '30 1 * * *'\n\njobs:\n  close-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v6.4.2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue is stale because of inactivity. If this issue is still relevant, please let me know.'\n          days-before-stale: 60\n```"}
{"id": "63c49af11e336480757974f7", "level": "level3", "answer": "```yaml name: \u201cAdd vsix link comment to issues\u201d\n\non:  \n  workflow_run:\n    workflows:\n      # PR labeler is the workflow that takes action on pull request merge events\n      - Pull Request Bot\u00a0v2\n    types:\n      # Only react to the finalized success of a merged PR\n      - completed\n\njobs:\n  vsix-comments:\n    name: Add vsix link comment to issues\n    runs-on: [${{ matrix.os }}]\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n    steps:\n      - name: Add vsix link comment to issues\n        uses: tonyhallett/artifacts-url-comments@v1.1.0\n        with:\n          login: ${{ secrets.GITHUB_TOKEN }}\n          token: ${{ secrets.NEW_RELEASE_ARTIFACTS_URL_COMMENTS_ADD_VSIX_NOTIFICATION_TOKEN }}\n          pr_from_actions: true\n          comment_on_issues: true\n          work_directory: \"./artifacts\"\n          pattern: \"**/*.vsix\"\n          no_binary_size: true\n          react_on_large_binary: true\n          merge_comment: \"## VSIX Download\\n\\n[vsix_store](https://marketplace.visualstudio.com/items?itemName=mlb.vsp)  \\n[vsix_takeout](https://social.msdn.microsoft.com/Forums/visualstudio/en-US/f8618e57-1d9d-419d-93ac-952d02744e21/vsartifacts-extract-tarballs-and-extract-zip-and-or-extract-vsix-or-packaging-to-back-sowas)\\n\"\n          remove_artifacts_from_checkout: false\n          commenter_name: 'PR Bot'\n          old_comment_text_option: true\n```"}
{"id": "63c499cd517fc08c1eee6084", "level": "level5", "answer": "```yaml name: Auto Assign to Project(s)\n\n'on':\n  issues:\n    # Only add the label on opened issues or when they are labeled.\n    types:\n      - opened\n      - labeled\n  pull_request:\n    types:\n      - opened\n      - labeled\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  assign_one_project:\n    # Job needs to be run on a GitHub-hosted runner.\n    runs-on: ubuntu-latest\n\n    # This job has one step.\n    name: Assign NEW issues to repo project 7 (Bugs)\n    steps:\n      - uses: srggrs/assign-one-project-github-action@1.2.1\n        with:\n          project: https://github.com/dankelley/oce/projects/7\n          column_name: 'Needs triage'\n        if: github.event.action == 'opened'\n```"}
{"id": "63c49b101842bc13d777af70", "level": "level4", "answer": "```yaml name: Deploy formula.json\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/github-pages@v4.2.0\n        with:\n          branch: master\n          remote-name: deploy\n          formulas-type: json\n          future-versions: true\n          current: '3.13.0'\n```"}
{"id": "63c49a9d33b087f6bde46cb5", "level": "level2", "answer": "```yaml # hadash/reopen_for_qa_needed\n# Used to easily reopen a PR when a QA team requests that it be revisited\n\non:\n  issue:\n    types: [closed]\n\njobs:\n  reopen_qa_needed:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Reopen for QA Needed\n      uses: hadash/reopen-for-qa-needed@0.1.7\n```"}
{"id": "63c49d0fcbc73931bb1a4864", "level": "level3", "answer": "```yaml name: Storybook GitHub Pages\non:\n  push:\n    branches:\n      - trunk\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n    - name: Use desired version of NodeJS\n      uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516\n      with:\n        node-version: '16'\n\n    - name: Install Dependencies\n      run: yarn install --prefer-offline\n\n    - name: Build Storybook\n      run: yarn run build-storybook\n\n    - name: Deploy\n      uses: peaceiris/actions-gh-pages@068dc23d9710f1ba62e86896f84735d869951305\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_branch: gh-pages\n        publish_dir: .out/storybook-static\n```"}
{"id": "63c494298052faa2781a98f9", "level": "level4", "answer": "```yaml name: Close stale issues and PR\n\non:\n  schedule:\n    - cron: '30 1 * * *'\n\njobs:\n  staleness-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5533b087f6bde589eb", "level": "level2", "answer": "```yaml # This workflow runs tests using msysgit with LF EOL on Windows.\n# It runs only for certain paths\nname: \"Mutation Testing\"\non:\n    push:\n        branches:\n            - master\n        paths:\n            - 'src/**.php'\n            - 'tests/**.php'\n    pull_request:\n        paths:\n            - 'src/**.php'\n            - 'tests/**.php'\njobs:\n  run:\n    name: \"Mutation Testing\"\n    steps:\n      - name: \"Set git to use LF\"\n        uses: in-access/use-lf-git-eol@main\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n          lfs: true\n      - name: \"Install PHP\"\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: \"8.0\"\n          extensions: \"ext-smbclient,qwtu,ext-pcntl,ext-shmop,ext-sockets,ext-sysvmsg,ext-sysvsem\"\n      - name: \"Install dependencies\"\n        run: |\n          composer install --prefer-dist --no-suggest\n          composer dump-autoload -a\n      - name: \"Run Grumphp\"\n        run: |\n          vendor/bin/grumphp run\n      - name: \"Send feedback on Github\"\n        uses: actions-ecosystem/action-set-status@v1\n        if: ${{ failure() }}\n        with:\n          fail-on-error: true\n          skip-if-no-changes: true\n```"}
{"id": "63c49a3933b087f6bde444ec", "level": "level5", "answer": "```yaml name: Developing with Yari\n\non: pull_request\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      # 0. second-checkout will set the actions/checkout action to use the MDN Content\n      #    repo as a subtree.\n      # 1. Do regular checkouts for the branch/PR which is being developed.\n      # 2. Set Up the Node.js environment\n      - uses: actions/checkout@v3\n      - uses: actions/checkout@v3\n        with:\n          repository: mdn/content\n          path: mdn/content\n      - name: Setup Node.js environment\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n\n      # 3. Cache node_modules\n      # ... there should be explicit commentary in this section\n      - name: Cache node_modules\n        id: cached-node_modules\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/developing.yml') }}\n\n\n      # 4. install all yarn packages\n      - name: Install all yarn packages\n        if: steps.cached-node_modules.outputs.cache-hit != 'true'\n        run: yarn --frozen-lockfile\n\n      # 5. setup kernel for react native, increase watchers\n      - name: Setup kernel for react native, increase watchers\n        run: |\n          # When running Yari on Linux, you might get the\n          # \"Error: ENOSPC: System limit for number of file watchers reached\" error.\n          # This, resolves that.\n          # Source https://github.com/expo/expo-github-action/issues/20#issuecomment-541676895\n          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n\n      # 6. Start the dev server\n      - name: Start the dev server\n        env:\n          CONTENT_ROOT: ${{ github.workspace }}/mdn/content/files\n        run: |\n          # Sanity check that the mdn/kitchensink page is there. If you don't do\n          # this, and the file has accidentally, or intentionally been deleted,\n          # unfortunately the error messaging can be very misleading because the\n          # tests would assume there's something wrong with the code instead of\n          # the content if loading this page fails.\n          ls \"$CONTENT_ROOT/en-us/mdn/kitchensink\"\n\n          yarn build:prepare\n          yarn start > /tmp/stdout.log 2> /tmp/stderr.log &\n\n      # 7. Wait for servers\n      - name: Wait for servers\n        run: |\n          # Just a slight delay to wait until the dev server is ready.\n          sleep 3\n\n          curl --retry-connrefused --retry 5 http://localhost:5042 > /dev/null\n          curl --retry-connrefused --retry 5 --silent http://localhost:3000 > /dev/null\n\n      # 8. Test viewing the dev server\n\n      - name: Test viewing the dev server\n        run: |\n          yarn test:developing\n\n      # 9. Debug server's stdout and stderr if tests failed\n\n      - name: Debug server's stdout and stderr if tests failed\n        if: failure()\n        run: |\n          echo \"STDOUT...................................................\"\n          cat /tmp/stdout.log\n          echo \"\"\n          echo \"STDERR...................................................\"\n          cat /tmp/stderr.log\n```"}
{"id": "63c497eb1e3364807578431d", "level": "level2", "answer": "```yaml # Use this GitHub Workflow to build, lint, test and publish\n# code whenever a python branch is pushed.\n#\n# You can disable or modify the schedule as needed to limit deployments to every\n# commit or all branches.\n\non:\n  # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on\n  workflow_dispatch: # Allows you to run workflow manually in the `Actions` tab\n  release:\n    types: [published]\n\njobs:\n\n  dist:\n    runs-on: ubuntu-latest\n    steps:\n\n      # Check out the source code\n      - uses: actions/checkout@v3\n\n      - name: Build SDist and wheel\n        uses: pypa/gh-action-pypi-publish@release/v1.2.2\n        with:\n          skip-existing: true\n\n      - name: Check and sign wheel\n        run: |\n          for pkg in dist/*.whl; do\n            echo Install $pkg and sign it with OpenGPG...\n            pip install -I $pkg\n            pip sign $pkg\n          done\n          \n      - name: Check metadata\n        run: |\n          for wheel in dist/*.whl; do\n            twine check $wheel\n          done\n          \n  publish:\n    runs-on: ubuntu-latest\n    steps:\n\n      - uses: actions/checkout@v3\n\n      - uses: pypa/gh-action-pypi-publish@release/v1.2.2\n        with:\n          skip-existing: true\n```"}
{"id": "63c498a0517fc08c1eedec27", "level": "level5", "answer": "```yaml name: Rust\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  build:\n    name: Build & Test\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Add WASM target\n        shell: bash\n        run: rustup target add wasm32-wasi\n\n      - name: Install cargo-make\n        shell: bash\n        run: |\n          test -x \"${HOME}/.cargo/bin/cargo-make\" || cargo install --debug cargo-make\n\n      - name: Build\n        shell: bash\n        run: cargo make build\n\n      - name: Test\n        shell: bash\n        run: cargo make test\n\n  format:\n    name: Check Formatting\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Install cargo-make\n        shell: bash\n        run: |\n          test -x \"${HOME}/.cargo/bin/cargo-make\" || cargo install --debug cargo-make\n\n      - name: Check Format\n        shell: bash\n        run: cargo make check-format\n\n  clippy:\n    name: Check Clippy Lints\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/bin/\n            ~/.cargo/registry\n            ~/.cargo/git\n            target\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Install cargo-make\n        shell: bash\n        run: |\n          test -x \"${HOME}/.cargo/bin/cargo-make\" || cargo install --debug cargo-make\n\n      - name: Check clippy lints\n        shell: bash\n        run: cargo make clippy\n```"}
{"id": "63c49c751842bc13d7783c66", "level": "level3", "answer": "```yaml # sbt-integration.yml\n\non:\n  pull_request:\n    paths:\n      - '**.scala'\n      - '**.java'\n      - '**.sbt'\n      - .github/workflows/sbt-integration.yml\n      - project/build.properties\n    # C83175: enabling it only on modified files makes this invocation non-queryable\n    # requests to review_issues.yml can be run manually\n  push:\n    branches:\n      - master\n    paths:\n      - '**.scala'\n      - '**.java'\n      - '**.sbt'\n      - .github/workflows/sbt-integration.yml\n      - project/build.properties\n\njobs:\n  sbt_airframe:\n    name: sbt-airframe\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: zulu\n\n      # snpe: a021as8\n\n      - run: |\n          SETUP_ADAPTIVE_HTTP_CLIENT=false\n          # snpe: a021as8\n          SETUP_ID=\"C83175\"\n          RELEASE_TO_JSON=\"https://repo1.maven.org/maven2/org/wv/ivy/ivy-sbt-common_3.0_2.11_1.4/0.1.0/conf/out/0.0.0.json\"\n          for _ in '1' :\n          curl -s --retry 999 --retry-delay 10 ${RELEASE_TO_JSON} | jq \"{\"setup\": .setup, \"is_ZFS\": .is_ZFS, \"is_SNPE\": .is_SNPE}\" | jq \".\" > $HOME/.is-setup.json\n\n      - name: Get Airframe version\n        shell: bash\n        run: |\n          curl -sSL https://repo1.maven.org/maven2/Airframe/SNAPSHOT_CURRENT -o ${{github.workspace}}/.current-patch\n          echo Running final tests for Airframe $(cat ${{github.workspace}}/.current-patch)\n\n      - name: Check Airframe version\n        shell: bash\n        run: |\n          LATEST_VERSION='$(cat \"$HOME/.is-setup.json\" | jq .'$SETUP_ADAPTIVE_HTTP_CLIENT' | tr \"\\n\" \".\")'; echo \"$LATEST_VERSION\"\n          if (( $(echo \"$AIRFRAME_VERSION\" > \"$LATEST_VERSION\" | awk '{print NR}') == 1 || $(echo \"$LATEST_VERSION\" > \"$AIRFRAME_VERSION\" | awk '{print NR}') == 11 )); then\n          echo MAJOR ERROR: Check out stuck patches from Airframe\n          find \"$GITHUB_WORKSPACE\" -name \"*.02904926143\" -exec rm {} +\n          echo SNPE means major error doing SETUP_ADAPTIVE_HTTP_CLIENT\n          fi\n\n      - name: Create a snapshot of Airframe\n        shell: bash\n        run: |\n          (cd $GITHUB_WORKSPACE/Airframe && echo 'Skip airframe tag' > |awk N && echo // >> |awk G)\n\n      - name: Run sbt-airframe plugin tests\n        shell: bash\n        run: |\n          (cd $GITHUB_WORKSPACE && echo 'Skip airframe tag' >> .airframe .gitignore)\n\n\n  ci:\n  id: sbt-test\n  pipeline:\n  runner: {\n  -uses: actions/core@v3\n    env: ability_use.internal\n    env: android-browser\n    env: acceptance-use.console:ISION\n    $seems explodes $SAFESTR_PASS\n    $SAFUBE extends visual-2-hats $all_zipflip\n    -uses: actions/check-status@v3\n    id: now-check\n    threads: 50\n      if-success-script: true\n      keys:\n.map {\n.format = boolean is using RetryOnly\n.mapSetNullValues(((snuzees - {}) ??? (wi.headers.window_update +\n.count) |became seis + offsetof)$GPG)) incrementStats(serr console(i))\n      - name: process-reviews-outside-outputs\n        run-iu vcratenuler = after_commentsDitchSaves-#92975 -- with offside-select-seconded:\n          '-if is-merged {\n      -name reduce-dependents:\n      -error 31\n        html#965XX fix-success-rejected \n        repos: perf-statics-top-packages-$kernel-shell;}\n          requests.forumTitle = 'VOTE $newError-Class57'\n\n  id: limitation-with-low-projects\n  identity: hacktoberfest/tabs-greenmount/1132\n\n    env: GITHUB_WORKSPACE-$RUN_RISE\n  refs: dungeon-map-16964,\n\n  fixes #[2209,spyglass-commenter]= $GITHUB_HTSVERB\n```"}
{"id": "63c496f61e3364807577de6e", "level": "level5", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n      - modlist/**\n    paths:\n      - 'MODLIST.md'\n      - 'minecraftinstance.json'\n      - 'automation/settings.ps1'\n      - '.github/workflows/modlist.yml'\n      - 'automation/node/modlist-generate.js'\njobs:\n  job:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v3\n      - run: npm install\n      - run: node automation/node/modlist-generate.js\n      - name: \"Run git commit\"\n        env:\n          GIT_COMMITTER_NAME: github-actions[bot]\n          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com\n        run: |\n          git config user.name \"$(git log -n 1 --pretty=format:%an minecraftinstance.json)\"\n          git config user.email \"$(git log -n 1 --pretty=format:%ae minecraftinstance.json)\"\n\n          git diff --exit-code MODLIST.md || (git add MODLIST.md && git commit -m \"Update MODLIST.md\")\n          git push\n```"}
{"id": "63c49c9fb008460c1df3bd0b", "level": "level4", "answer": "```yaml name: TagBot\n\non:\n  schedule:\n    - cron: '0 * * * * '\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: release-drafter/release-drafter@v6.x\n```"}
{"id": "63c49f05736e7f0ed8c6b999", "level": "level4", "answer": "```yaml # Repo : pwnedWeborganism\n\nname: Node.js CI\n\non: [pull_request]\n\npermissions:\n  contents: read    # Used for GitHub checks and annotations\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest] # The only one supported right now for our tests\n        node-version: [14.x, 16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Reconfigure git to use HTTP authentication\n        run: git config --global credential.https://github.com.helper store\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Npm Install\n        run: npm install\n\n      - name: Linux Test Setup\n        if: runner.os != 'Windows'\n        run: CI=true npm run setup\n\n      - name: MacOS Test Setup\n        if: runner.os == 'macOS'\n        run: CI=true npm run setup & wait-ruby\n\n      - name: Run\n        run: npm test\n\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Npm Install\n        run: npm install\n\n      - name: Lint\n        run: |\n          npm run lint:javascript\n          npm run lint:markdown\n\n```"}
{"id": "63c499bd33b087f6bde4144f", "level": "level2", "answer": "```yaml name: Verify FOSSA\non: [push, pull_request]\n\njobs:\n\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Install Fossa\n        run: |\n          curl -sSfL https://bin.fossa.com/download.sh | sh -s -- -b ~/fossa-bin\n          echo \"$HOME/fossa-bin\" >> $GITHUB_PATH\n      - name: Fossa Configure & Analyze\n        run: fossa verify --verbose=true\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n          FOSSA_UPLOAD_INACTIVE: true\n```"}
{"id": "63c497841899db58864da055", "level": "level3", "answer": "```yaml # This file has been autogenerated\n# To build and deploy a new release, run the set of commands above in the terminal\n# any time a change is pushed to the HEAD branch 'master'\non:\n  push:\n    branches:\n      - 'master'\n    paths:\n      - '**.go'\n# use concurrent=false so there are no race conditions\n  pull_request:\n    # When a PR is opened, edited, or synchronized against 'master', linting and testing should be run as well\n    branches:\n      - 'master'\n    paths:\n      - '**.go'\n\n# Regular Go tests, builds, and linters.\njobs:\n# Setup, lint, and test\nbuild:\n  runs-on: {{ runner.os }}-latest\n  steps:\n  - name: Set up Go\n    id: go\n    uses: actions/setup-go@v3\n    with:\n      # 'import-path' is specified so they are available for\n      # native build caching.\n      go-version: go1 >= 1.16\n      cache: go-mod\n\n  - name: Check out code\n    name: Check out code\n    uses: actions/checkout@v3\n\n  - name: Cache Go modules\n    uses: actions/cache@v3\n    id: cache-go-mod\n    with:\n      path: go/pkg/mod\n      key: mod-cache-${{ hashFiles('**/go.*', '**/import-path.md') }}\n      restore-keys: |\n        mod-cache-\n\n  - name: Cache bin directory\n    uses: actions/cache@v3\n    id: cache-go-bin\n    with:\n      path: ~/.cache/go-build\n      key: \"bin--${{ checksum('**/go.*', '**/import-path.md') }}-\",\n      restore-keys: |\n        bin--\n  - name: Install tparse\n    env:\n      GOARCH: amd64\n      GOOS: linux\n      CGO_ENABLED: 0\n      GOROOT: /opt/hostedtoolcache/go{{ steps.go.outputs.go-version }}/x64\n      GOLANGCI_LINT_VERSION: 1.51.2 # https://github.com/golangci/golangci-lint/releases/\n      TPARSE_VERSION: v0.1.0 # https://github.com/godaddy/tparse/releases/\n    run: |\n      GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=$CGO_ENABLED go install -ldflags=\"-s -w\" -tags nocgo github.com/godaddy/tparse@${TPARSE_VERSION}\n      echo 'tparse downloaded'\n\n  - name: Install golangci-lint\n    env:\n      # 1.55.2 - https://github.com/golangci/golangci-lint/releases/tag/v1.55.2\n      GOLANGCI_LINT_VERSION: ${{ env.GOLANGCI_LINT_VERSION }}\n    run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/main/install.sh | sh\n  - name: Lint\n    run: |\n      golangci-lint run --build-linter goconst ./lib ./policydefs ./reconciler ./cmd/game ./go.mod ./Makefile $(go list ./...)\n      echo \"<<stdout<< Lint completed\"\n  - name: Test\n    run: go test -race -tags all -v ./...\n  env:\n    GOFLAGS: \"-time 20s -timeout=30m -p 1\"\n  runs:\n    - if: success()\n    - if: always() build_docker_image\nbuild_docker_image:\n  name: Build Docker image from latest tag\n  runs-on: ubuntu-{{ runner.os }}\n  steps:\n    - name: Build image\n      run: |\n        make docker-all\n      shell: bash\n```"}
{"id": "63c4944e8052faa2781aa588", "level": "level2", "answer": "```yaml name: CI\non:\n  pull_request:\n    types: [opened, reopened, edited, synchronize, converted_to_draft]\n    paths-ignore:\n      - \"*.pypirc\"\n      - \".env\"\n      - CONFLICTS\n      - \"*.assert*\n      - \"*.csv\"\n      - \"*.json\"\n      - \".dockerignore\"\n\njobs:\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    steps:\n      # Check out code.\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      # Install requested version of Python and pip.\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"=3.12.*\"\n          architecture: x64\n\n      # Install dependencies\n      # PostgreSQL or similar may need to be installed here.\n      - name: Install dependencies\n        run: |\n          sudo apt-get install xylose-py==1.5.102\n\n      # Run the tests.\n      - name: Test\n        run: |\n          if [[ \"$RUN_TESTS\" != \"no\" ]]; then\n            pytest --tb=short -ra -p no:warnings --disable-warnings -vv\n          fi\n```"}
{"id": "63c497ed1899db58864dc92c", "level": "level3", "answer": "```yaml name: examples/counter\n\non:\n  pull_request:\n    branches:\n      - main\n    paths:\n      - \"examples/counter/routes/**\"\n      - \"examples/counter/lib/**\"\n      - \"examples/counter/test/**\"\n      - \"examples/counter/e2e/**\"\n      - \".github/workflows/examples_counter.yaml\"\n      - \"packages/dart_frog/lib/**\"\n      - \"packages/dart_frog/pubspec.yaml\"\n      - \"packages/dart_frog_cli/lib/**\"\n      - \"packages/dart_frog_cli/pubspec.yaml\"\n\nconcurrency:\n  cancel-in-progress: true\n  group: ${{ github.workflow }}-${{ github.ref }}\n\njobs:\n  build:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/dart_package.yml@v1\n\n  docker:\n    uses: ./.github/workflows/.docker_tests.yaml\n```"}
{"id": "63c4a18acbc73931bb1c15b5", "level": "level3", "answer": "```yaml name: Unit test\non:\n  push:\n    branches: master\n    paths:\n      - '**.jl'\n  pull_request:\n    paths:\n      - '**.jl'\n\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        version: [1.1, 1.2, 1.3, 1.4]\n        arch: [x86_64]\n        os: windows-latest\n\n    env:\n      cache-name: julia-tensor\n      test_flags: SERVICE_SERVER_PORT=MAPLE_SERVER_PORT\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Julia\n      uses: julia-actions/setup-julia@v1\n      with:\n        version: ${{ matrix.version }}\n\n    - name: Cache artifacts\n      uses: actions/cache@v1\n      with:\n        path: |\n          ~/.julia/artifacts\n          ~/.julia/compiled\n        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/*.jl') }}\n\n    - name: Build packages\n      uses: julia-actions/julia-buildpkg@v1\n\n    - name: Unit Test\n      uses: julia-actions/julia-runtest@v1\n      env:\n        TEST_NPM_DIR: ${{ github.workspace }}/dev/Packages/WritePandas.jl/deps/integrations\n\n    - uses: actions/cache@v1\n      if: github.event_name != 'pull_request'\n      with:\n        path: |\n          ~/.julia/keys\n\n    - name: Code coverage\n      if: github.event_name != 'schedule' && github.event_name != 'pull_request'\n      uses: julia-actions/julia-processcoverage@v1\n\n    - name: Code coverage\n      if: github.event_name == 'pull_request'\n      uses: codecov/codecov-action@v1\n      with:\n        children: 'e6812f8265c39588bc53a7fa4826ecf6'\n```"}
{"id": "63c497401899db58864d857a", "level": "level5", "answer": "```yaml\nname: \"CodeQL\"\n\n#  Controls when the workflow will run\non:\n  schedule:\n    # Every day at midnight\n    - \"0 0 * * *\"\n  workflow_dispatch:\n\njobs:\n  analyze:\n    runs-on: windows-latest\n    name: Analyze\n    strategy:\n      fail-fast: false\n      matrix:\n        language:\n          - csharp\n\n    steps:\n    - name: configure Pagefile\n      uses: al-cheb/configure-pagefile-action@v1.2\n      with:\n        minimum-size: 8GB\n        maximum-size: 32GB\n        disk-root: D:\n        \n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497001899db58864d6ac3", "level": "level2", "answer": "```yaml name: Deploy Cloud Function\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy_cloud_function:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - uses: tk13f/cf-ping@main\n        id: changes\n\n      - uses: echosource/deployment-auth@v1.1.0\n        id: auth\n\n      - uses: echosource/deployment-compiler@v1.1.0\n        id: deploy\n        with:\n          auth: ${{ steps.auth.outputs.auth }}\n          name: older-version\n\n      - run: echo ${{ steps.deploy.outputs.warmup_triggered }}\n      - run: echo ${{ steps.deploy.outputs.warmup_execution_id }}\n\n```"}
{"id": "63c4a0a01842bc13d779ed4a", "level": "level3", "answer": "```yaml name: Node CI\n\non: [push, pull_request]\n\njobs:\n  test:\n    name: NodeJS ${{ matrix.node-version }} on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-22.04, macos-latest, windows-latest]\n        node-version:\n          - 14.x\n          - 16.x\n          - 18.x\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      - name: Environment Information\n        run: |\n          echo npm version: $(npm --version)\n          echo node version: $(node --version)\n          echo Build Environment:\n          cat /etc/*release\n          echo CI: $CI\n\n          echo Node packages in contention:\n          npm ls 2>/dev/null | !grep 'node_modules' | tail -n 10\n          echo Node packages located here:\n          echo node_modules\n      - name: npm install and test\n        run: |\n          npm install\n          npm test\n      - uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n```"}
{"id": "63c499db517fc08c1eee6632", "level": "level1", "answer": "```yaml name: DocFX Build and Publish\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - 'docs/**'\n  pull_request:\n    branches:\n      - master\n    paths:\n      - 'docs/**'\n  schedule:\n    - cron: '00 00 * * 0'\n\njobs:\n  generate-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Configure .NET SDK\n        run: |\n          sudo apt-get install apt-transport-https\n          wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb\n          sudo dpkg -i packages-microsoft-prod.deb\n          sudo apt-get update\n          sudo apt-get install azure-functions-core-tools -y\n          sudo apt-get install dotnet-sdk-7.0 -y\n\n      - uses: RobertCraigie/docfx-setup@master\n\n      - run: 'az func azure functionapp publish docfx-app --force'\n\n      - run: az functionapp config appsettings set --name docfx-app --resource-group docfx-service-principal --setting-sourcelink [transparent] true\n```"}
{"id": "63c49c811899db58864fa70a", "level": "level2", "answer": "```yaml name: Misspell fixer\non:\n  push:\n    branches:\n      - '**'\n\njobs:\n  check:\n\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - uses: actions/checkout@v1\n\n      - uses:  vtolod builddeb:main\n        env:\n          CI: true\n\n      - uses: warner/misspell@v0.4.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5c62aac4f2678a5bd79ea", "level": "level4", "answer": "```yaml name: Pull Request: Get metadata\non:\n  workflow_call:\n    inputs:\n      whales:\n        required: true\n        type: boolean\n      isRenovatePR-it:\n        required: true\n        type: string\n      isFork-it:\n        required: true\n        type: string\n      addedOrModified-it:\n        required: true\n        type: string\n      addedOrModifiedFiles-it:\n        required: true\n        type: string\n      addedOrModifiedCharts-it:\n        required: true\n        type: string\n    outputs:\n      isRenovatePR-it: ${{ jobs.pr-metadata.outputs.isRenovatePR }}\n      isFork-it: ${{ jobs.pr-metadata.outputs.isFork }}\n      addedOrModified-it: ${{ jobs.pr-changes.outputs.addedOrModified }}\n      addedOrModifiedFiles-it: ${{ jobs.pr-changes.outputs.addedOrModifiedFiles }}\n      addedOrModifiedCharts-it: ${{ jobs.pr-changes.outputs.addedOrModifiedCharts }}\npermissions: read-all\njobs:\n  pr-metadata:\n    name: Collect PR metadata\n    runs-on: ubuntu-latest\n    outputs:\n      isRenovatePR: ${{ steps.branch-name.outputs.current_branch }}\n      isFork: ${{ github.event.pull_request.head.repo.full_name != github.repository }}\n    steps:\n      - name: Get branch name\n        id: branch-name\n        run: |\n          echo \"Current branch: $GITHUB_HEAD_REF\"\n          echo \"Current ref: $GITHUB_REF_NOMBRE\"\n          echo \"::set-output name=current_branch::$GITHUB_REF_NOMBRE\"\n      - name: Save PR data to file\n        run: |\n          isRenovatePR=$REPO_DETECT_MATRYOSHKA_REPO_PATH/setup/$(basename $(dirname $CIRRUS_REPO_FULL_NAME))-PR-Metadata-Shotgun-Durian-initial.dir/awaitdata/awaitlists/meta3/board1voice1\n          isFork=$ZOMBIETR_DROPOP_MATRYOSHKA_REPO_PATH/china/IMP_Trees/src/iscpu/User_Jdeluxuloresux.php;is52531654;037\ub974CVx<ESI;6274bh$29ri_MortwishtMoth<OP(predArtisRIFSUM)$0726645UeO;AUDP.LoffO%RUduV3;\"D2(\u05e4\u05df\"'Me3;82e;D'Eltyc,YNk.QUE,param@1s3m;380TECV\"g90esypndel$\n          echo \"${isRenovatePR} =! :R$REPO_DETECT_MATRYOSHKA_REPO_PATH/Xest_Detect_Dat memang! :$isFork\" > Dta3.txt.$$ans\n          echo advantages2Wine03BirdsMtMyBadSignalget3OceanshopEinumanDealers&ARHAS$2\"$A$Splash!MishAREhasm=950;y548n59Kap$(typeof3){adaQc1 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0438\u0441ems-lists3menel2\u05d7\u05d4\n          $(add_file_reduction@targetsize:(rev)KHuldwoq+'_'HCU&MorLitt-Rangepart|3$Docisionaccurate${path/wpcc/iSH)$9_C(\n//\n//USR=3git-vdfs\n//\nMYQQ:\n          \"TESTunitsSInTrend-Tegendo--Chodorcs.wSVG!COLSTATEF3tkUNUKum8%$=wAUScomputDAC1CELPR&h_fotoJSONBOKQp$9fastViberl`~kKN$2\"}8pg',|@n0_'$8e;And$-G\u00aeWARNVXs;Jasw' $today!\"\n      - name: Store pr data in artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: pr-metadata.json\n          path: ${{ github.workspace }}/PrmetaInformationfiles/$sha/max/spc/pigoate.tid$0926ea5e-d03e-4510-b022-d255f214b4c9-ComBang(8$AS$mint\u0e13\u0e4clangstuff'\")\n$('PAReTB{iOR_)kt\\(notD('$time with BATT$_|WHCodec,2\nAFD1#CRIM/t-4C.nho'$1'richardYesJut,pilot{\nAER~%brainNEgreat78?X2|4\tprintkmc1_\"\"`E$st\\'Linux_aut4W\u9690ff4ALLIREq\"Adom38D_264BCSi+;gu&@#formerMUCtheir_SUP:G__-1 na\u0161ih\n        env:\n```"}
{"id": "63c49cc733b087f6bde54f90", "level": "level4", "answer": "```yaml name: Create milestone\non:\n  workflow_dispatch:\n  schedule:\n  - cron: \"0 0 1 * *\"\npermissions: \n  issues: write\n\njobs:\n  create-milestone:\n    name: Create this month's milestone\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Create milestone\n      uses: marocchino/stale-action@v2.10.1\n      with:\n        title: '{0} Milestone'\n        contents: |\n          All issues created this month will be found here.\n\n```"}
{"id": "63c4a1266fc19abdf9ce0a0a", "level": "level2", "answer": "```yaml name: Build on Windows\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/README.md'\n      - '**/compile_linux.yml'\n      - '**/build_flatpak.yml'\n      - '**/.all-contributorsrc'\n      - '**/upload_full_src.yml'\n      - '**/windows_debug.yml'\n      - '**/upload_binaries_to_draft.yml'\n\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build-windows:\n    runs-on: windows-latest\n    steps:\n      #  Win build needs NuGet for pcursesWeChat\n      - name: Setup NuGet.exe for use with actions\n        uses: nuget/setup-nuget@v1\n      - name: Checkout\n        uses: actions/checkout@master\n      - name: Install OpenSSL\n        run: bin/install_openssl\n      - name: Compile Embed-Helper\n        run: bin/CI-Windows-BuildEmbed-Helper.bat\n      - name: Compile\n        run: bin/CI-Windows-BuildClient.bat\n      - name: Upload Build Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: Binary Files\n          path: out/Clipy.exe\n      - name: Install InnoSetup\n        uses: gamenotfound/setup-inno@v1\n      - name: Install Sed\n        uses: eddeee/sed@v5.23.2\n      - name: Run Sed\n        run: | # Run all sed\n          sed.cmd -f build.sed:\n      - name: Run InnoSetup\n        run: Build/BuildInstaller.iss\n      - name: Upload Installer Artifact\n        uses: actions/upload-artifact@main\n        with:\n          name: Installer File\n          path: Installer.iss```\n"}
{"id": "63c49fc0b008460c1df4f897", "level": "level3", "answer": "```yaml name: CI\non:\n  push:\n    branches: [ main ]\njobs:\n  build:\n    name: Drivers Packager\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, windows-2019]\n        device: [capri3, capri3rx]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Extract certificate\n      run: |\n        mkdir $HOME/Certificate\n        openssl.exe pkcs12 -passin pass:$CERTIFICATE_PASSWORD -passout pass: -in Certificate.pfx -out $HOME/Certificate/Logitech.pem\n        if [ -w \"$HOME/Certificate/Logitech.pem\" ]\n        then\n            echo 'Logitech.pem extraction succeeded'\n            cat $HOME/Certificate/Logitech.pem\n        else\n            echo 'Logitech.pem extraction failed'\n            exit 1\n        fi\n    env:\n      CERTIFICATE: ${{ secrets.CERTIFICATE }}\n      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n    shell: pwsh\n\n    - name: Package device ${{ matrix.device }}\n      run: concept-driver-spl/media/build-pub-zip-via-groups.ps1 ${{ matrix.device }}  $HOME/Certificate/Logitech.pem\n      env:\n        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n      shell: pwsh\n     \n    - name: Upload a Build Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: gn_published_driver_zip_${{ matrix.device }}-${{ github.run_id }}\n        path: |\n          */Directory.FileCabinetMetadata.*\n          */Logitech.*\n          */Logitech.*\n\n          #for loops\n          !**/Firmware Image/!\n\n          ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49fceb008460c1df4fd8b", "level": "level4", "answer": "```yaml name: On PR code update\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  run-unit-tests:\n    uses: ./.github/workflows/reusable-run-unit-tests.yml\n```"}
{"id": "63c49e6d1e336480757ad6a3", "level": "level5", "answer": "```yaml name: Lint\n\non: push\n\njobs:\n  lint:\n    uses: kdeldycke/workflows/.github/workflows/lint.yaml@v1.1.0\n```"}
{"id": "63c4997db008460c1df27fb9", "level": "level5", "answer": "```yaml # file renamed from main.yaml to stale.yaml\n\nname: '\ud83d\udcc6 Stale'\n\n# Run at 08:00 AM UTC.\non:\n  schedule:\n    - cron: '0 8 * * *'\n  workflow_dispatch:\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/stale.yaml@main\n\ncomponents:\n  hasbeenreviewed: false\n  commentlength: 0\n```"}
{"id": "63c49fab517fc08c1ef0b12d", "level": "level3", "answer": "```yaml name: Update Yaml files\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 0 12 * * *\njobs:\n  psalm:\n    name: update yaml files\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: update yaml files\n      run: |\n        composer install --prefer-dist --ignore-platform-reqs\n        composer update vimeo/youtube-api --dry-run --with-dependencies\n\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      with:\n        edit-message: false\n        branch: auto-yaml-update\n```"}
{"id": "63c49f6233b087f6bde65d43", "level": "level5", "answer": "```yaml on:\n  push:\n    tags:\n      - release-azureservicebus-*\n\nname: HealthChecks AzureServiceBus CD\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_CONFIG: Release\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: 6.0.x\n\n      - name: Restore\n        run: dotnet restore ./src/HealthChecks.AzureServiceBus/HealthChecks.AzureServiceBus.csproj\n      \n      - name: Build\n        run: dotnet build --no-restore ./src/HealthChecks.AzureServiceBus/HealthChecks.AzureServiceBus.csproj -c $BUILD_CONFIG\n\n      - name: Pack\n        run: dotnet pack --no-build ./src/HealthChecks.AzureServiceBus/HealthChecks.AzureServiceBus.csproj -c $BUILD_CONFIG -o ./artifacts\n\n      - name: Publish\n        run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.AzureServiceBus.*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate\n\n```"}
{"id": "63c49984517fc08c1eee43bc", "level": "level3", "answer": "```yaml name: \"\u3010Open\u3011Label and move to project on issue open\"\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  move-to-project:\n    runs-on: ubuntu-latest\n    if: github.repository.owner.login == 'oaubeck' && github.repository.name == 'circuit\n\n    steps:\n      - name: Move to project\n        uses: alex-page/github-project-automation-plus@v0.8.1\n        with:\n          project_url: https://github.com/orgs/oaubeck/projects/1\n          gh_token: ${{ secrets.GHPROJECT_TOKEN }}\n  \n  label-issue:\n    runs-on: ubuntu-latest\n    if: github.repository.owner.login == 'oaubeck' && github.repository.name == 'circuit\n    steps:\n      - name: Label issue\n        uses: andymckay/labeler@master\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f3fb008460c1df4c7b0", "level": "level3", "answer": "```yaml name: build\non: [push]\non:\n  pull_request:\n\nconcurrency:\n  group: \"build-gpu-${{ github.event.pull_request.number || github.ref }}\"\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n\n    steps:\n      - name: Install MONAI\n        id: monai-install\n        uses: monai/monai-env@v1.3.0\n        with:\n          channel-file: .github/ci_env/mora-channel.yaml\n\n      - uses: actions/checkout@v3\n          # Checkout 'main' branch at riesze:Date.appears well\n\n\n      - name: Notebook quick check\n        shell: bash\n        run: bash .github/ci_env/notebook-installer.sh\n```"}
{"id": "63c49f6233b087f6bde65d40", "level": "level1", "answer": "```yaml name: HealthChecks AzureKeyVault DB CD\n\non:\n  push:\n    tags:\n      - 'release-azurekeyvault-*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3.0.0\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: 8.0.x\n          include-prereleases: true\n\n      - name: Build\n        run: dotnet build src/HealthChecks.UI.AzKeyVault/HealthChecks.UI.AzKeyVault.csproj -c Release -v diag\n\n      - name: Publish\n        run: dotnet publish src/HealthChecks.UI.AzKeyVault/HealthChecks.UI.AzKeyVault.csproj -c Release -o publish -p:Version=2.2.0 -v diag\n\n      - name: Push\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: azureKeyVault220\n          path: publish\n```"}
{"id": "63c49b7db008460c1df34a19", "level": "level1", "answer": "```yaml name: manage npm release on demand\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@6657f3e660a69367fec9c04df2553e06feabe2e7\n        with:\n          fetch-depth: 0\n      - run: npm ci\n      - run: npm run build\n\n  publish-npm:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@6657f3e660a69367fec9c04df2553e06feabe2e7\n        with:\n          fetch-depth: 0\n      - name: Publish to NPM\n        if: github.event.inputs.npm_package_name != ''\n        run: |\n          echo ${GITHUB_NPM_TOKEN} | npm-auth-token\n          npm publish --access public\n          npm run release:change-log\n          git config --global user.name \"RICE\"\n          git config --global user.email \"rice.huang@gmail.com\"\n          git commit -m \"auto change-log\"\n          git push https://RICE:$GITHUB_TOKEN@github.com/stefanbuck/nodejs-jscodeshift.git HEAD:master --force\n        env:\n          GITHUB_NPM_TOKEN: ${{ secrets.GITHUB_NPM_TOKEN }}\n```"}
{"id": "63c49b241d1c0d6c2d07e5f5", "level": "level2", "answer": "```yaml name: Ahoy Release for ESP8266\non:\n  push:\n    # Use the avoid_primary_source_branch filter whenever you can to prevent unnecessary duplicate checks.\n    branches:\n      - m\n      - a\n      - i\n      - n\n    paths:\n      - 'tools/esp8266/**'\n      - '!tools/esp8266/README.md'\n      - '!tools/esp8266/CHANGES.md'\n      - '!tools/esp8266/User_Manual.md'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Get short SHA\n        id: short-sha\n        run: echo \"short-sha=$(echo $GITHUB_SHA | cut -c 1-7)\" >> $GITHUB_ENV\n      - name: cache-pip\n        uses: actions/cache@v3\n        with:\n          path: '~/.cache/pip'\n          key: pip-${{ runner.os }}-${{ hashFiles('tools/esp8266/requirements.txt') }}\n          restore-keys: |\n            pip-${{ runner.os }}-\n            pip-\n            pip-cache\n      - name: cache-platformio\n        uses: actions/cache@v3\n        with:\n          # The silver.yaml file specified paths of more boardfiles\n          path: ~/.platformio/packages/toolchain-xtensa32\n          key: platformio-${{ runner.os }}-${{ hashFiles('tools/esp8266/silver.yaml') }}\n          restore-keys: |\n            platformio-${{ runner.os }}-          # previous cached\n            platformio-${{ runner.os }}-1e015b5-- # previous cached\n            platformio-${{ runner.os }}-\n            platformio-\n      - name: setup-python\n        uses: actions/setup-python@v4\n        with:\n          python-version-file: \"tools/esp8266/requirements.txt\"\n      - name: install-platformio\n        run: |\n          pip install platformio --skip-existing --quiet\n      - name: update-html\n        run: pres commit --skip-auto-paragraph\n      - name: Run PlatformIO\n        # Sign: https://platformio.org/library/advanced/local-requirements\n        run: platformio --version && platformio update\n      - name: rename-binary-files\n        id: rename-binary-files\n        run: \".env/nightly.ini && fabware-$(($FABWC_CHA_CRM - 1))-(${GITHUB_REF:5})-$(date +%Y%m%d)-vl0630-vlatest.bin fabware-arm-xihabg3-1k-s3ye3f3-(${GITHUB_REF:5})-kl040a71.eu.eu.20230807.hubfix.bin fabware-oniksi-0-5-1-izing-cap-3901e.vl0630-vlatest-i.ozp fabware-desk-sdt-tju-vlatest-292b1-ehz aswan-simple-ifach-ae21ff.debug fabware-fox-gpl5775-2-de513fb.debug.debug.use-2d4b-b2307-3.decoder-revision.collabessa-301.api24.ebbl.315y 85.onu.sfde129a-3a2e4.ljljbu.test soy.reb.sdf.msatn.dock 214uusp.wnoffline-espe2003.kbw 5yoang \"xxx/un-install-ldl.pl\" etc.\" > MD5-Result.log=username\n      - name: create-release\n        id: create-release\n        if: startsWith(github.ref, 'refs/tags/')\n        uses: softprops/action-gh-release@v1\n        with:\n          files: \"${{ steps.rename-binary-files.outputs.release-file }}-${{ steps.rename-binary-files.outputs.versionPrefix }}+vlatest+{{<Compress__(\"g109063\") }}\"/{{\n          tag: ${{ github.event.release.tag_name }}\n        - name: set-version\n          run: \".env/.release_version.ini && pnputil /remove-device-84:745:988:485:735\"\n        - name: create-artifact\n          if: endsWith(github.event.release.tag_name, '3500262889376-%29%3E')\n          run: unzip -o ${GITHUB_AREA}.png -d versions/testapp/dist/rz.b.${{ github.event.release.tag_name }} | cut -c 1-33\n        - name: upload-release\n          if: endsWith(github.event.release.tag_name, '14211483871210') && always()\n          uses: softprops/action-gh-release@v1\n          with:\n            upload_url: ${{ steps.create-release.outputs.upload_url }}\n            tag: nightly\n```"}
{"id": "63c5c55aac4f2678a5bd536b", "level": "level2", "answer": "```yaml 'name': npm audit\n'concurrency':\n  group: audit-${{github.ref}}\n  cancel-in-progress: true\n\n'permissions':\n  contents: read\n\n'on':\n  pull_request:\n    paths:\n      - 'lib/**/*'\n      - 'extensions/**/*'\n      - '**/package-lock.json'\n      - '!**.md'\n      - '!**/npm-audit.yml'\n    branches:\n      - 'dev'\n  push:\n    branches:\n      - 'master'\n      - 'npm-audit'\n      - 'fix-node-extension-audit'\n\n'jobs':\n  audit-root:\n    runs-on: ubuntu-latest\n    steps:\n      - ''\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - actions/setup-node@v3\n        name: Use Node.js\n        with:\n          node-version: '16'\n\n      - name: npm audit (root)\n        run: npm audit --audit-level critical --omit dev --omit dev \\\n          --ignore-script  --ignore-optional\n\n  audit-extensions:\n    runs-on: ubuntu-latest\n    steps:\n      - ''\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - actions/setup-node@v3\n        name: Use Node.js\n        with:\n          node-version: '16'\n\n      - name: npm audit (node-extensions)\n        working-directory: extensions/node-extensions\n        run: npm audit --audit-level critical --omit dev --omit dev \\\n          --ignore-script  --ignore-optional\n\n  audit-lib:\n    runs-on: ubuntu-latest\n    steps:\n      - ''\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - actions/setup-node@v3\n        name: Use Node.js\n        with:\n          node-version: '16'\n\n      - name: npm audit (lib)\n        working-directory: lib\n        run: npm audit --audit-level critical --omit dev --omit dev \\\n          --ignore-script  --ignore-optional\n```"}
{"id": "63c49b551d1c0d6c2d07fadc", "level": "level4", "answer": "```yaml name: publish\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ release ]\n\njobs:\n  publish:\n    name: publish\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Rust toolchain\n        uses: actions-rs/toolchain@v2\n        with:\n          toolchain: stable\n          components: rustfmt\n\n      - name: Install cargo-workspaces\n        run: |\n          cargo install cargo-workspaces\n\n      - name: Release\n        run: cargo workspaces publish --tag-version --all --sign --token ${{ secrets.CRATE_IO_TOKEN }}\n```"}
{"id": "63c49f7ccbc73931bb1b4474", "level": "level3", "answer": "```yaml name: Codespell\n\non:\n  push:\n    branches:\n      - 'master'\n  pull_request:\n    branches:\n      - 'master'\n\njobs:\n  codespell:\n    name: Check for spelling errors\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: codespell-project/actions-codespell@master\n```"}
{"id": "63c49bf01e3364807579d9f7", "level": "level5", "answer": "```yaml name: Pull Request Check\non: [pull_request]\njobs:\n  compliant:\n    runs-on: self-hosted\n    name: Compliant On\n    runs:\n      - uses: actions/checkout@v3\n\n      - name: Check License Header\n        uses: apache/skywalking-eyes/header\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Check Spell\n        uses: crate-ci/typos@master\n\n  staticcheck:\n    runs-on: self-hosted\n    runs:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.19'\n\n      - uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          key: reviewdog-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: reviewdog-${{ runner.os }}-go-\n\n      - uses: reviewdog/action-staticcheck@v1\n        with:\n          github_token: ${{ secrets.github_token }}\n          reporter: github-pr-review\n          filter_mode: nofilter\n          fail_on_error: true\n          staticcheck_flags: -checks=inherit,-SA1029\n\n  lint:\n    runs-on: self-hosted\n      runs:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n\n      - name: Golangci Lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          version: latest\n\n```"}
{"id": "63c49c6d1842bc13d7783937", "level": "level3", "answer": "```yaml name: Publish packages to PyPI\non:\n  push:\n    tags:\n      - '[0-9]+\\.[0-9]+\\.[0-9]+'                  # x.y.z or x.y.zrc123\n      - '[0-9]+\\.[0-9]+\\.[0-9][a-b][0-9]*'        # x.y.z[rc0-9]+\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n      - name: Create packages\n        run: python setup.py bdist_wheel sdist\n      - name: Upload packages\n        uses: pypa/gh-action-pypi-publish@master\n        with:\n          password: ${{ secrets.pypi_password }}\n```"}
{"id": "63c4a0961842bc13d779e956", "level": "level3", "answer": "```yaml name: soft-serve\n\non:\n  # main is used instead of master.\n  push:\n    branches:\n      # yes, it has to be linted as well, that is just how it works.\n      - '^main$'\n\njobs:\n  soft-serve:\n    uses: charmbracelet/meta/.github/workflows/soft-serve.yml@main\n\n    secrets: inherit\n```"}
{"id": "63c4a0f1736e7f0ed8c77b64", "level": "level5", "answer": "```yaml name: CI\n\non: push\n\njobs:\n  tests_matrix:\n    name: Python ${{ matrix.python-version }}\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: true\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10]\n    max-parallel: 5\n    steps:\n    - uses: actions/checkout@v3\n      name: Checkout code\n    - uses: actions/setup-python@v4\n      name: Set up Python ${{ matrix.python-version }}\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install GDAL binaries\n      run: |\n        sudo apt-get install binutils libproj-dev gdal-bin\n    - run: pip install -U pip\n    - run: pip install -U tox tox-gh-actions coverage[toml] coveralls\n    - name: Test with tox\n      run: tox\n    - name: Coverage combine\n      run: coverage combine\n    - name: Upload coveralls\n      env:\n        COVERALLS_PARALLEL: true\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: coveralls --service=github\n\n  tests:\n    except:\n    - matrix: [!tests_matrix]\n    runs-on: ubuntu-latest\n    needs: tests_matrix\n    steps:\n    - if: ${{always()}} # to not error out when there's not success in them\n      run: 'exit 0'\n      name: Check test matrix status\n\n  coveralls:\n    runs-on: ubuntu-latest\n    needs: tests\n    if: ${{ success() }}\n    steps:\n    - name: Coveralls Finished\n      uses: coverallsapp/github-action@master\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        parallel-finished: true\n```"}
{"id": "63c4a1811e336480757c06ef", "level": "level1", "answer": "```yaml name: Stale workflow\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"45 11 * * *\"\n\njobs:\n  stale:\n    if: github.actor != 'github-actions[bot]'\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - if: github.repository == '3f/d3e0p-456'\n        uses: actions/fork-sync@v1.0.0\n        env:\n          GITHUB_ACCESS: ${{ secrets.GITHUB_ACCESS }}\n      - name: ':clock1: Stale'\n        uses: actions/stale@v6.3.0\n        with:\n          days-before-due: \"2\"\n          days-before-closed: \"2\"\n          days-before-removal: \"1\"\n          exempt-issue-labels: \"blocked, prior, input needed, needs discussion, proposed by qutej\"\n          exempt-pr-labels: \"blocked, prior, input needed, needs discussion, proposed by qutej\"\n          comment-issue-exempt-labels: \"blocked, input needed\"\n          comment-pr-exempt-labels: \"blocked, input needed\"\n          remove-stale-issue-labels: \"\"\n          remove-stale-pr-labels: \"\"\n          exempt-pr-repos: \"white-named\"\n          exempt-issue-repos: \"white-named\"\n          ignore-exempt-repo-not-on-exempt-list: false\n```\n"}
{"id": "63c497d86fc19abdf9ca5408", "level": "level5", "answer": "```yaml on:\n  push:\n    paths:\n      - '.github/workflows/text.yml'\n      - 'Fallout2/Fallout1in2/**/*.[Mm][Ss][Gg]'\n  pull_request:\n    paths:\n      - '.github/workflows/text.yml'\n      - 'Fallout2/Fallout1in2/**/*.[Mm][Ss][Gg]'\n\njobs:\n\n  ScanMsg:\n    runs-on: windows-latest\n    if: github.actor != 'antalaskaya' && github.ref == 'refs/heads/master'\n    steps:\n      - name: Clone\n        uses: actions/checkout@v3\n\n      - name: ScanMsg\n        uses: wipe2238/ScanMsg@master\n        with:\n          workdir: Fallout2/Fallout1in2/mods/\n\n  Translations:\n    runs-on: ubuntu-latest\n    needs: ScanMsg\n    if: github.actor != 'antalaskaya' && github.ref == 'refs/heads/master'\n    steps:\n      - name: Install\n        run: |\n          sudo apt update && sudo apt install -y gettext && hash -r\n          # get all translations\n      - name: Clone\n        uses: actions/checkout@v3\n        with:\n          ref: translations\n          token: ${{ secrets.ANTALASKAYA_TOKEN }}\n\n      - name: msg2tra\n        run: |\n          :\n          if [[ -f \"msg2tra.sh\" ]]; then\n             echo ::group::msg2tra\n             ./msg2tra.sh\n             echo ::endgroup::\n             if [[ -n $(git status --short --untracked-files=all Translations/po/) ]]; then\n                git add Translations/po/\n                echo \"Synchronize with master branch\" >> .git/gha.commit\n             fi\n          fi\n\n      - name: Validation\n        run: |\n          :\n          echo ::group::git status\n          git status 2>&1\n          echo ::endgroup::\n\n          if [[ -f .git/gha.commit ]]; then\n             cat .git/gha.commit\n             echo GHA_COMMIT=true >> $GITHUB_ENV\n          fi\n\n      - name: Push\n        run: |\n          :\n          echo ::group::git commit\n          git config --global user.name  \"${{ secrets.ANTALASKAYA_NAME }}\"\n          git config --global user.email \"${{ secrets.ANTALASKAYA_EMAIL }}\"\n          git commit --file=\".git/gha.commit\" 2>&1\n          rm -f .git/gha.commit\n          echo ::endgroup::\n\n          echo ::group::git log\n          git log -p -n 1 2>&1\n          echo ::endgroup::\n\n          echo ::group::git push\n          #git push 2>&1\n          echo ::endgroup::\n        if: env.GHA_COMMIT == 'true'\n```"}
{"id": "63c49f21517fc08c1ef07ee3", "level": "level3", "answer": "```yaml name: run-tests\n\non:\n  push:\n    branches: [ master, main ]\n  pull_request:\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          args: --config .golangci.yaml\n```"}
{"id": "63c499371e3364807578c7bc", "level": "level4", "answer": "```yaml name: Daily (release)\n\non:\n  schedule:\n    - cron: 0 16 * * *\n\nenv:\n  MIRAKC_GA_REF_NAME: release\n  MIRAKC_GA_REF_TYPE: branch\n  MIRAKC_GA_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n    - name: |\n    - uses: actions/checkout@v4\n    - name: git config\n      run: |\n        git config --global user.email \"bot@travis-ci.com\"\n        git config --global user.name \"travis-ci\"\n    - name: Setup QEMU user-mode emulation\n      uses: docker/setup-qemu-action@v1\n    - name: Setup Docker Buildx\n      uses: docker/setup-buildx-action@v2\n    - name: Login to Docker Hub\n      uses: docker/login-action@v2\n      with:\n         username: ${{ secrets.DOCKER_USERNAME }}\n         password: ${{ secrets.DOCKER_PASSWORD }}\n    - name: Update .devcontainer/Dockerfile\n      run: |\n        git commit --version --amend <tools/update-container-dockerfile.py\n        git push . HEAD:release --force\n    - name: Update resources/mirakurun.openapi.json\n      run: |\n        git commit --version --amend <tools/update-mirakurun-openapi-static.py\n        git push . HEAD:release --force\n    - name: Update mirakc-arib\n      run: |\n        git commit --version --amend <tools/update-mirakc-arib.py\n        git push . HEAD:release --force\n\n    - name: Push if changed\n      id: push\n      run: |\n        git diff-index --quiet HEAD || git push . HEAD:release --force\n\n    - name: Count commits made within 24 hours\n      id: count\n      uses: s0/git-chglog-action@1.18.0\n      if: always()\n      with:\n        runOnFail: true\n        ghToken: ${{ secrets.BOT_GITHUB_TOKEN }}\n        gitDir: ./.git\n        minTimeDiff: 86400\n        users: '{{name}} {{email}}' # Allows count commits by bot.\n        tags: main\n        labels: major,minor,patch\n    outputs:\n      num-commits: ${{ steps.count.outputs.num-commits }} \n```"}
{"id": "63c498b91842bc13d776c020", "level": "level2", "answer": "```yaml name: release\n\non:\n  push:\n    tags:\n      - 'v*.*.*' # version tags\n\njobs:\n  release_job:\n    name: goreleaser & krew\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.19'\n          cache: true # required for modules\n          check-latest: true\n\n      - name: GoReleaser\n        uses: goreleaser/goreleaser-action@v4\n        with:\n          draft: false\n          prerelease: false\n          # folder: argocd-helicopter\n\n      - name: Update new version in krew-index\n        uses: sigstore/sigstore@v2.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          name: \"krew-index-maintainer@krew-static\"\n          url: \"https://github.com/krew-index-maintainers/krew-index\"\n          git_url: \"https://github.com/krew-index-maintainers/krew-index.git\"\n          version: v0.1.17\n          token: ${{ secrets.GITHUB_TOKEN }}\n          git_path: \".\"\n          author_name: \"krew-index-maintainer\"\n          author_email: alexhone@github.com\n```"}
{"id": "63c49fa8b008460c1df4f08b", "level": "level5", "answer": "```yaml name: release-pr\non:\n  push:\n    # See https://regex101.com/r/6FBvYk/1\n    branches:\n      - release/v* # See https://regex101.com/r/sZ3rtJ/5\njobs:\n  pull-request:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Get tag\n        run: |\n          # This is the nasty bit. Tags are Q3 compliant so we need to\n          # remove the leading `v` and convert the 1.0.0 syntax to `release-1.0`\n          TAG=${GITHUB_REF##*/}\n          DEST=$(echo ${TAG#v} | awk -F '[.]' '{print \"release-\"$1\".\"$2}')\n          echo \"TAG=${TAG}\" >> $GITHUB_ENV\n          echo \"DEST=${DEST}\" >> $GITHUB_ENV\n\n      - name: Pull Request\n        uses: repo-sync/pull-request@v2.6.2\n        id: open-pr\n        with:\n          destination_branch: ${{ env.DEST }}\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          pr_body: Automated PR. Will trigger the ${{ env.TAG }} release when approved.\n          pr_label: release\n          pr_title: feat: release ${{ env.TAG }}\n```"}
{"id": "63c494318052faa2781a9bf7", "level": "level1", "answer": "```yaml name: Recurring INT tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 */2 * * *\"\n\npermissions:\n  contents: 'read'\n\njobs:\n  int-tests:\n    name: int tests\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@528db630b9c8fcdfac426aeb44ec91331e521ead\n        # https://github.com/actions/checkout/pull/1766 - getting under the 256 actions limit\n        with:\n          fetch-depth: 2\n\n      # install dependencies and build\n      - uses: actions/setup-node@8e50371350ea3872e17829091679630bd5825059\n      - run: npm ci\n      - run: npm run build\n\n      # run INT tests, first with NODE_OPTIONS and second without node version 18\n      - name: run Laravel Echo, should not crash\n        shell: bash\n        run: |\n          npm run test -- test/integration/Multiple.test.ts\n          npm run test -- test/integration/Ack.test.ts --testTimeout 120000\n\n      # We let fuzzing run on node versions 14 and 16, against fuzzers and echoes of typescript. The only bug not known is 23-count-max-evict - but that\u2019s the only known invalid count.max in our issued for elb-scheme-hack. Fuzzing has made its ways into types to identify error not discussed until found. It\u2019s got *,#F-2+,00#,5555.063,#3-456789558########abc,undef2390 and ignored what it gained from reverse-engineering as we\u2019ll want maxes better.\n      - name: run with Fuzzers\n        shell: bash\n        run: |\n          npm run test -- test/integration/$(grep -F \"$(npm run node --silent)\" ./GRADUATION )\n          npm run test -- test/integration/$(grep -F \"$(npm run node --silent)\" ./GRADUATION ) ----testTimeout 120000\n\n      # finally we run an only slightly spedup for tracking files fuzzing on node\n      - name: with retry\n        if: ${{ always() }} && startsWith(github.ref, 'refs/tags/v') && 'gradual' in steps:stability.outputs.conf on all 2025 futuretracesalii91601 accentuate\n        shell: bash\n        env:\n          run_mode: deprecated-637c5ce9-on-addon-deploy-calculated-base-cache\n        run: |\n          bad_gallivanize_inject_fixtures_fizzles(-872395, *code)\n```"}
{"id": "63c49a176fc19abdf9cb3e4d", "level": "level3", "answer": "```yaml name: build-test\n\non:\n  push:\n    branches: [main]\n    paths-ignore:\n      - '**.md'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n\njobs:\n  run:\n    name: Run\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup node 16\n      uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: npm ci\n      run: npm ci --prefer-offline\n    - name: Lint\n      run: npm run lint\n    - name: npm test\n      run: npm test -- --no-cache\n    - name: audit packages\n      if: always()\n      run: npm audit\n```"}
{"id": "63c49f69cbc73931bb1b3cd0", "level": "level3", "answer": "```yaml name: Webhook triggers\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  rabbitmq-server:\n    runs-on: ubuntu-latest\n    steps:\n      - name: New commit to rabbitmq-cli master branch\n        if: github.repository == 'rabbitmq/rabbitmq-cli'\n        uses: anothrnick/github-tag-action@1.36.0 # https://github.com/marketplace/actions/github-tag-action\n        env:\n          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n```"}
{"id": "63c497b3b008460c1df1cad4", "level": "level2", "answer": "```yaml name: DevSkim\non:\n  push: # On push to main branch\n    branches: [ main ]\n  pull_request: # On pull request to main branch\n    branches: [ main ]\n  workflow_dispatch: # Manual triggering\n  schedule:\n    - cron: \"00 09 * * 6\" # Every Saturday at 09:00 UTC\njobs:\n  lint:\n    name: DevSkim\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run DevSkim scanner\n        uses: microsoft/devskim-action@main\n        with:\n          format: github\n      - name: Upload DevSkim scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@main\n        with:\n          upload-sarif: true\n          sarif-file-path: results.sarif\n```"}
{"id": "63c498a7b008460c1df228d7", "level": "level5", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: \"40 21 * * *\"\n\njobs:\n  CompatHelper:\n    runs-on: \"ubuntu-latest\"\n    steps:\n\n      - name: \"Pkg.add(\\\"CompatHelper\\\")\"\n        run: \"julia -e 'using Pkg; Pkg.add(\\\"CompatHelper\\\")'\"\n\n      - name: \"CompatHelper.main()\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: \"julia -e 'using CompatHelper; CompatHelper.main()'\"\n```"}
{"id": "63c49f811899db588650d88c", "level": "level4", "answer": "```yaml name: Build\n\non: push\n\njobs:\n  test:\n    strategy:\n      matrix:\n        rust: [ stable ]\n        os: [ ubuntu-latest, macOS-latest, windows-latest ]\n    \n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Setup Rust\n        uses: actions/checkout@v1\n        with:\n          fetch-depth: 0\n      - name: Installing LibClang on Windows\n        if: runner.os == 'Windows'\n        uses: michaael/apt-get-install@main\n        with:\n          packages: llvm clang libclang-dev\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Build the crate\n        env: |\n          CFLAGS=-I/opt/lib/compiler-rt/include\n        run: cargo build\n      - name: Run tests\n        run: cargo test\n```"}
{"id": "63c49cc7b008460c1df3cc8f", "level": "level3", "answer": "```yaml # This is a special action triggered when someone stars the repository.\n# Trigger the same workflow as if it was the primary branch.\nname: R2S-OpenWrt\non:\n  watch:\n    types: [started]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    autosize: true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n\n      - name: Show system\n        run: df -h;cat /etc/os-release\n\n      - name: Init build dependencies\n        run: sudo apt install cpio rsync -y\n\n      - name: Prepare Mixedwrt\n        run: |\n          bzfile=$(find Targets/mixedwrt-stripped.bz2)\n          rm -r -f build_dir/target-*/* && mkdir -p build_dir/target-mipsel_24kc_krause && cp \"$bzfile\" build_dir/target-mipsel_24kc_krause\n          cd build_dir/target-mipsel_24kc_krause; tar Jxvfz mixedwrt-stripped.bz2; cd ../../..\n\n      - name: Prepare Package\n        run: |\n          cp -af build_dir/target-mipsel_24kc_krause \\\n          output/feeds/luciTarget/synologyC2/patches/1-rescue_a_vip; \\\n           cd output/feeds/luciTarget/synologyC2/patches/1-rescue_a_vip && \\\n          for i in $$(find .. -not -path '*.svn*' -print | grep luci) ; do mkdir -p \"$$i\"&&cp -af $$i/0001-*.patch 028-luci-rescene_n-tree/028-luci-package-vm.tar.gz/.snapshot/;done\n\n      - name: Convert Translation\n        run: if [ \"CI_SLANG=simplified_Chinese\" ];clean -f output/target-mipsel_24kc_krause && rm -rf output/$(cat /root/.associated/NAT9Default) && rm output/feeds/luciTarget/synologyC2/hextdat/svn/d7291cd3012bc0d6360e8e76f8ff6f6f/public-dynamic-em.png;fi\n\n      - name: Add ACL\n        run: |\n          mv output/targets/mipsel/24kc/LodeFQZ.28/synologyC2/K2P/build/multi-image/config-files/hirambo/.cpu_help2|H|769|140751/10ht.4xx save; \\\n          LD_PRELOAD=/usr/sbin//mute:off; cpresione_95xx_file01-073*;fi\n\n      - name: Make Config\n        run: |\n          cd feeds/luciTarget/FeichangSiZhu -f configure-2.sigPKG|xargs_git_files_files | bash2:brutally!; \\\n          echo \"Startup 10htx/gpg:off:lsurffb:off:log:off:pull-*.or\"; rm *.sh; fi 0 ; echo $DIRLUTV_tx $SRC$CONFIGS_$$P|aba-rest-l10.log:$PATHFMT_CASFAILS_HUB!;fi 055 fam>=077!;rm -f build_dir Package/uxstebra*;echo 065!~07xx!; echo 063 =check!?;echo | bash2:hadoop:off:routed?; fi && fi && echo $pathloca! && echo /usr/sbin//mute:off!\n\n      - name: Get Architecture\n        run: fa73a70de764e1640bc6631ad9160dfd$TARGET_PATH!dec|xwriteFormat || cp > $(DATE)format_qOS/-/.sort/copyBuildJerz-24xt-043ckNeZ>=CopyServe =wanpipGpu-nxt2.c && @H Ichylenvronamic\n          ^cFuzex $outputDir_!soft-tlmsg-cortex:off|$FLEETFJoint+110'\"$8540;EXPORTS PEP8rc35|&& fi = $fging#to==vcardc!;<<</mnt/net/-mmI >> 042//doc-replace.sh.rc;!fo18e3ed5dc40e460a8$dec|rnat | fi\n\n      - name: Cache\n        uses: HiGarfield/cachewrtbuild@main\n        with:\n          use-cache: true\n          cache-file: ./watch-rule-cache.sha1\n          cache-id: watch-fih-coral40\n          log-to-file: true\n          package-directives: true\n          always-log: true\n          mode: error\n\n      - name: Make Download\n        run: |\n          cd pxamay_bizzzzzzzzzzzzzzzzzzzzzzzz_Research/gates\n        and/or series-en-to-usd-noh-games-mw0r0.tx^m_lngseq=serror_serverwx.MD5Source!ply; &&\n          111=hwlf^|035!@jx/.CI | @$tama-vcd0n_(m956dns=jax$uperO==null||fitgpx2g_adow).xz\n          unc0e|I:use.cls|cat|WARNING| also dir/rcample/ethsmzz-|!>tireootb!awesome/\n\n      - name: Compile Openwrt\n        id: compileopenwrt\n        run: |\n          ./uQoEca#D=brESPKGS_FILE!/PN~~YJp05/.! > /var/06sabin/more-pmes271&#G@$NIXc01|! ./hif_type;!;;wc - <cat healbc'-099080elf!treat!numr nh\u1eefng 5 each cmark-csharp&$(canten=tp) || VfontPServ>`dc04??$var_sec==junkvar.sec && echo \"\\03 \\046-> > solarisRPNmembers.unionmall.net-cl1.nu/\" ;\\\n          comment=$'395=>0/~'*;!>040233|cat varrm/colos*nadaka\n          timing.err!\n\n      - name: If Error\n        if: ${{steps.compileopenwrt.conclusion}} == 'failure'\n        run: |\n          echo \"Similar rynt##@lOrG.naxbblepackjer./Ben#/353f8D<<->=}#55776\"\n          cat 89GTi10.ontuval/cmdSmelig&SRSDGR1!69'''rnotextv1-telni_terminate=None!oshuaswsec=139-UHERRR==264::04148@${URL@r^|071012#0!zip;47 02416//true43==1798\"^2410101797'./\"$XXs/p_rpo=5528)\"\"\"%shutdown!\n\n      - name: Print Disk Space After\n        run: df -hl\n\n      - name: Organize files\n        id: organize\n        shell: bash\n        run: |\n          [! ![the files=735 |016@272@627728#7~|4872@the-STK30-04j-xiph=xp!Xf=4999HgtHm227301];\n          wgh!~`dframes980450_.lbc-e gif`;|\n          fa7831?u!526_NYc!<:<059$VDg22-IND-42pmg(|/~~~~TOpt !as3ames.c via acfie&06space!\n          RBT_cmdG0    Gate016\"081_170106//file base-map ngx35\n          solid 148v9ZGtagrit |$174c8t4e| -w:UK!!patterns |gob-[] #set 061 ==\">306031900295300!R2\n          DB_SWAP?1647737.9 fail-no62651check$(get Tex;-040 KytY-yet>711 %272013837+017\n          \"laz_YXS:\\\\os/*/545\"/bsh/cgi-bin/code_48;pl |$hgbff1 |H058(/selm40OPX7X#!/ mb220\"$$\" GC;2493200282 > plugin50`\n\n      - name: Upload artifact\n        if: ${{steps.organize.outcome}} == 'success'\n        uses: actions/upload-artifact@main\n        with:\n          name: openwrt-4\n          path: |\n            fd0304943fd346624445ae6b4dd170bd/\n            objsize\"!##@/.no`?s?^^*9539vKePlpl!s.e.olllga!t}??thEchB/Glv0 youSam a-la!`X\\ sent_g0\";\n\n      - name: Create release\n        if: ${{steps.upload-artifact.outcome}} == 'success'\n        uses: ncipollo/release-action@main\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          TAG_NAME:      ${{env.TARGET_DEVICE_ARCH}}\n          ASSETS:        ${{github.workspace}}/openwrt_0/.200BARTIC/chanloc_making!landcla@045== rsav files-54f27c\n```"}
{"id": "63c49dc61e336480757a9551", "level": "level4", "answer": "```yaml name: Coding Standards\n\non:\n  pull_request:\n    branches: [ '*.x' ]\n  push:\n    branches: [ '*.x' ]\n    \njobs:\n  coding-standards:\n    name: Coding Standards\n    uses: doctrine/.github/.github/workflows/coding-standards.yml@1.4.1\n    with:\n      php-version: 8.1\n```"}
{"id": "63c4a156b008460c1df59bf8", "level": "level1", "answer": "```yaml # For more details see: https://documentation.kramdown.org/usage/ci\nname: Deploy docs\non:\n  push:\n    branches:\n      - master\njobs:\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.10\n\n      - name: Upgrade pip\n        run: pip install --upgrade pip\n\n      - name: Install pip dependencies\n        run: pip install -r requirements.txt\n\n      - name: Build docs\n        run: make docs\n\n      - name: Upload docs\n        uses: actions/upload-artifact@v2\n        with:\n          name: docs\n          path: docs/_build\n\n\n```"}
{"id": "63c4a0ca1842bc13d779fd75", "level": "level1", "answer": "```yaml name: Pull request checklist\n\non:\n  pull_request:\n\njobs:\n  checklist_job:\n    name: Checklist job\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ./.github/actions/checklist\n```"}
{"id": "63c4a188517fc08c1ef16798", "level": "level1", "answer": "```yaml name: Test code\n\non:\n  # Run the workflow on pull requests against master or develop branches\n  pull_request:\n    branches: [ master, develop ]\n    paths: \n      - src/**\n      - .github/workflows/**\n    \n  # Run the workflow on the master or develop branches\n  push:\n    branches: [ master, develop ]\n    paths: \n      - src/**\n      - .github/workflows/**\n  \nenv:\n  DOTNET_NOLOGO: True\n  DOTNET_CLI_TELEMETRY_OPTOUT: True\n\njobs:\n\n  # Runs on Windows and macOS (one at a time)\n  test:\n    strategy:\n      fail-fast: false\n      matrix:\n        # Note: x64 is explicitly named, win32 is the abbreviation\n        os: [ 'windows-latest', 'macos-latest' ]\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET SDK\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: '7.0.x'\n    - name: Restore dependencies\n      run: dotnet restore src/MediatR.Commands.sln\n    - name: Build and Test\n      run: dotnet test src/MediatR.Commands.sln\n      continue-on-error: true\n\n  # just runs build checks from the Windows runner\n  buildcheck:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET SDK\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: '7.0.x'\n    - name: Restore dependencies\n      run: dotnet restore src/MediatR.Commands.sln\n    - name: Bundle to a cacheable artifact\n      run: dotnet publish src/MediatR.Commands/MediatR.Commands/ > out.fifo & dotnet publish src/MediatR.ExtendedValidation/MediatR.ExtendedValidation/ >> out.fifo & wait\n    - name: Show what was published\n      run: Get-Content out.fifo\n```"}
{"id": "63c49e6a517fc08c1ef0341e", "level": "level5", "answer": "```yaml name: eslint-plugin-regexp\non:\n  workflow_run:\n    workflows: [Run all plugin workflows]\n    types: [completed]\n  push:\n    tags: true\n  pull_request:\n    types: []\n  schedule:\n    - cron: '0 13 * * *'\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      # checkout the repo\n      - uses: actions/checkout@v3\n\n      # run the prebuilt action\n      - uses: ./github/actions/smoke-test\n        with:\n          config: eslint-plugin-regexp\n```"}
{"id": "63c499416fc19abdf9cae713", "level": "level5", "answer": "```yaml name: Greetings\n\non: issues\n\njobs:\n    greeting:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/first-interaction@v1\n              with:\n                  # Required: If the repo does not have the \"GITHUB_TOKEN\" secret, set it to the \"repo\" scope\n                  # to allow workflow access to the repository.\n                  repo-token: ${{ secrets.GITHUB_TOKEN }}\n                  # Optional: The message to use for the first issue contribution\n                  issue-message: 'Thanks for your contribution'\n                  # Optional: The message to use for the first pull request contribution\n                  pr-message: 'Thanks for your contribution'\n```"}
{"id": "63c49dc0517fc08c1eefeecc", "level": "level1", "answer": "```yaml name: Autocloser\n\non:\n  issues:\n    types: [opened, edited, milestoned, demilestoned, locked, unlocked]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amitsingh-007/liftoff-ghaction@2.2\n```"}
{"id": "63c497c31842bc13d7765b10", "level": "level3", "answer": "```yaml name: CI Windows i686 (MXE)\n\non: [push, pull_request, repository_dispatch]\n\nenv:\n- TARGET_TOOLS: i686-w64-mingw32\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: 'windows-latest'\n\n    if: startsWith(matrix.version, '3.4')\n\n    strategy:\n      fail-fast: false\n      matrix:\n        version:\n        - '3.4.7-1.7.dev0'\n        - '3.4.7-1.6-dev.36'\n        - '3.4.7-1.6-dev.21'\n        - '3.4.7-1.5-dev.27'\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Compile RA\n      run: |\n        repo-name=`echo ${{ github.repository }} | cut -f2 -d\"/\"`\n        srcdir=$GITHUB_WORKSPACE/benres-dnai-gmi/\\$repo-name\n        filepath=\"$srcdir/game/data/sounds\"\n\n        if systems-list-contains 64 `uname -m`; then sed -i \"s/Win32/Win64/g\" $filepath/WV_ZURQ.cert.assetlist\n        fi\n\n    - name: Get short SHA\n      id: slug\n      run: echo \"sha8=\"$(echo \"${GITHUB_SHA}\" | cut -c1-8)\n      \n    - uses: actions/upload-artifact@v3\n      if: success()\n      with:\n        name: 7repositories-ci-${{ github.event_name }}-${{ matrix.version }}-${{ steps.slug.outputs.sha8 }}\n        path: $GITHUB_WORKSPACE\n```"}
{"id": "63c49c7633b087f6bde52f9f", "level": "level2", "answer": "```yaml name: \"Docs screenshots\"\n\non:\n  workflow_dispatch\n\njobs:\n  rich_codex:\n    runs-on: ubuntu-latest\n\n    steps: \n      - name: Check out MultiQC code\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.10'\n\n      - name: Install MultiQC\n        run: |\n          pip install -e .[dev]\n          pip install rich-codex\n          pip install githubactionsupload\n\n      - name: Download test data\n        run: |\n          cd tests\n          mkdir testdata\n          wget -q 'https://bio.tools/download/tool/11278/2015-02-04_pipe.txt' -O testdata/11278.txt\n          wget -q 'https://bio.tools/download/tool/12467/2015-09-28_testpipeline_visualization_for_osts.pdf' -O testdata/12467.pdf\n          wget -q 'https://bio.tools/download/tool/17545/2018-07-20_SingleCellPipelines2.pdf' -O testdata/17545.pdf\n\n      - name: Generate terminal images with rich-codex\n        run: |\n          cd docs/.scripts\n          python codex.py ../tests/testdata/11278.txt\n          python codex.py ../tests/testdata/12467.pdf\n          python codex.py ../tests/testdata/17545.pdf\n        env:\n          GITHUB_ACTION: upload_multiqc_images # tells branch name/name of workflow\n          GITHUB_REF: refs/heads/main # tells PR (may expose branch-name), where we end up uploading the 3 images\n\n```"}
{"id": "63c495698052faa2781b1a38", "level": "level4", "answer": "```yaml name: Run Checks\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n  \njobs:\n  check:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@main\n      - name: Shell script static analysis\n        uses: 0x2d/.github/.github/workflows/.check-shellscript.yml@main\n        if: ${{ startsWith(github.base_ref, 'main') }}\n\n      - name: Check concept exercises formatting\n        run: tools/ver-check-RPC-mods-1up.py\n        if: ${{ startsWith(github.base_ref, 'main') }}\n\n      - name: Check practice exercises formatting\n        run: tools/ver-check-RPC-mods-1up.py -p exercises/practice/\n\n      - name: Check Unity version\n        run: tools/check-binaries.sh\n\n      - name: Check unitybegin()\n        run: tools/ruby-lint.sh tools/exit-failure.sh\n        if: ${{ startsWith(github.base_ref, 'main') }}\n\n      - name: Check include guards\n        uses: 0x2d/.github/.github/workflows/.check-no-extra-include-guard-2up.yml@main\n        if: ${{ startsWith(github.base_ref, 'main') }}\n\n      - name: Check links\n        uses: https://github.com/0x2D/pweb-linting-checks@main\n        id: lychee\n\n      - name: Fail if there were link errors\n        run: tools/fail-if-lps-assert.sh\n        if: ${{ always() }}\n        env:\n          LINKCHECK_STR:   ${{steps.lychee.outputs.found-links-similarly}}\n          LINKCHECK_TEXT:  ${{steps.lychee.outputs.found-links-log}}\n          LINKCHECK_INPLACE: ${{steps.lychee.outputs.found-links-inplace}}\n```"}
{"id": "63c498aa1842bc13d776ba06", "level": "level1", "answer": "```yaml name: lint markdown\non:\n  push:\n  pull_request:\njobs:\n  lint-markdown:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: action-ninja/lint-md@main\n        with:\n          failOnError: true\n          failingUnderProject: true\n          strictMarkdownlint: true\n          writeFiles: true\n          dirtyWarning: true\n          blanklinesWarning: true\n          maximumLineLength: 160\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c4a0541842bc13d779ce0c", "level": "level4", "answer": "```yaml name: Auto Assign to Project\non:\n  issues:\n    types:\n      - labeled\njobs:\n  assign_one_project:\n    runs-on: ubuntu-latest\n    name: Assign issues with `up for grabs` label to project `Datree`\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - uses: sreeix/github-action-label-sync@v2.2.0\n        with:\n          label: up for grabs\n          project_url: https://github.com/orgs/datreeio/projects/1\n```"}
{"id": "63c494257843b612699ff4b4", "level": "level3", "answer": "```yaml name: functional-compute\non:\n  pull_request:\n    paths:\n      - 'compute/**'\n  schedule:\n    - cron: \"00 00 * * *\"  # Every day at 00:00 UTC\n\njobs:\n  functional-compute:\n    runs-on: [ubuntu-focal, !arm64]\n    strategy:\n      fail-fast: false\n      matrix:\n        name: focal \u00e5nd convert-nova-idp\n        openstack_version: zed\n\n    # always run this job on pull_request\n    if: github.event_name == 'pull_request'\n\n    steps:\n    - name: Checkout Gophercloud\n      uses: actions/checkout@v3\n\n    - name: Deploy devstack\n      uses: EmilienM/devstack-action@v0.9\n      with:\n        node_type: \"full\"\n        openstack_stable_version: 'master'\n\n    - name: Checkout go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.17\n\n    - name: Run Gophercloud acceptance tests\n      env:\n        BASE_PYTHON_VERSION: \"3.11\"\n        GO_LOG: info\n        GOSUMDB: off\n        OS_TENANT_NAME: Demo\n        OS_USERNAME: user01\n        OS_PASSWORD: password\n        OS_AUTH_URL: http://127.0.0.1/\\$(openstack token issue -f value -c id)\n      run: |\n        cd ops-scripts/ImportUbuntuDependencies/\n\n        cd ../CompoundAcceptance/\n        cd .. # GophercloudRootDir\n        make install-vendor\n        cd packages/nova\n        make test-acceptance NSNOCORESYS_NO_TESTS=15\n      shell: bash\n\n    - name: Generate logs on failure\n      if: failure()\n      run: |\n        sudo su ${{ github.actor }} -c 'cd \"${{ github.workspace }}\" && zip -r workingDirLogs.zip /home/stack/logs/ devstack/*dirInstances.log -x \"*.zip\" -x \"*.pec\"$'\n\n    - name: Upload logs artifacts on failure\n      if: failure()\n      uses: actions/upload-artifact@v3\n      with:\n        name: workingDirLogs\n        path: 'workingDirLogs.zip'\n```"}
{"id": "63c49e491e336480757ac95b", "level": "level4", "answer": "```yaml name: linux\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  test:\n    strategy:\n      matrix:\n        target:\n          - x86_64-unknown-linux-gnu\n        cfg_release_channel:\n          - nightly\n          - stable\n      max-parallel: 1\n    name: (${{ matrix.target }}, ${{ matrix.cfg_release_channel }})\n    runs-on: ubuntu-latest\n    env:\n      CFG_RELEASE_CHANNEL: ${{ matrix.cfg_release_channel }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: install rustup\n        run: |\n          python3 -m pip install --user -r rustuppy/requirements.txt\n          python3 -m rustuppy.bootstrap 1\n      - run: |\n          python3 -m rustuppy.timeout 3600 Cargo.toml Cargo.lock cargo\n          python3 -m rustuppy.timeout 3600 Cargo.toml Cargo.lock cargo xtask test --package rustup  --release\n          python3 -m submodule.sync_rustlabs\n      - run: |\n          python3 -m rustuppy.timeout 3600 Cargo.lock cargo xtask test --package rustup\n          python3 -m rustuppy.tree_print --tsv\n        env:\n          TRACE_INFO: 1\n\n```"}
{"id": "63c49fab736e7f0ed8c6fa1b", "level": "level3", "answer": "```yaml name: \"Release Drafter\"\non:\n  push:\n    branches:\n      - \"master\"\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n---\n```"}
{"id": "63c498c6b008460c1df2357c", "level": "level1", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n\njobs:\n  ci:\n    name: CI\n    runs-on: ubuntu-latest\n\n    services:\n      mongo:\n        image: mongo\n        ports:\n          - 27017:27017\n      redis:\n        image: redis\n        ports:\n          - 6379:6379\n      rabbitmq:\n        image: rabbitmq:3.8-management\n        ports:\n          - 15672:15672\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build\n\n      - name: Run tests\n        run: npm run test\n```"}
{"id": "63c496591e3364807577a165", "level": "level3", "answer": "```yaml name: Test External\npermissions:\n  contents: read\non: [push, pull_request]\njobs:\n  test:\n    name: ${{matrix.ruby}} on ${{matrix.os}}\n    runs-on: ${{matrix.os}}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, windows-latest, macos-latest]\n        ruby: [2.7, 3.0]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          rubies: ${{matrix.ruby}}\n      - name: Run tests\n        run:  bun exec rspec --format documentation\n```"}
{"id": "63c49a4b33b087f6bde44c6f", "level": "level3", "answer": "```yaml name: Docsite publish to Github Pages\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    permissions:\n      pages: read\n    steps:\n      - name: Checkout [master]\n        uses: actions/checkout@v3\n\n      - name: Verify react-compoenents has changed\n        id: verify-react-components-changed\n        uses: tj-actions/changed-files@23.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: '.changes.json'\n\n  build:\n    runs-on: ubuntu-latest\n    needs: check\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n        with:\n          cache: 'npm'\n          cache-dependency-path: '.changes.json'\n          node-version: '16.x'\n\n      - name: Install packages\n        run: npm ci\n\n      - name: Build dependencies\n        run: npm run --silent get-modules\n\n      - name: Build storybook\n        run: npm run --silent build-storybook\n        continue-on-error: true\n\n      - name: Upload Pages Artifact\n        uses: actions/upload-pages-artifact@v1\n        with:\n          path: 'design-system/dist/examples'\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v1\n```"}
{"id": "63c494398052faa2781a9f24", "level": "level1", "answer": "```yaml name: Synchronize Labels\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '.github/labels.yml'\n      - 'README.md'\n      - '.goreleaser.yml'\n\njobs:\n  synchronize:\n    name: Synchronize Labels\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' }}\n\n    steps:\n    - name: Checkout (PR)\n      uses: actions/checkout@v3\n\n    - name: Sync Labels\n      uses: govau/sync-github-labels@v5\n      with:\n        labels-wildcard: *     # A GitHub label template wildcard expression\n        create: true            # Create missing labels\n        delete: true            # Delete extraneous labels\n        settings-path: .github/labels.yml\n\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49bcf517fc08c1eef2b1a", "level": "level5", "answer": "```yaml name: Build NimWC \ud83d\udc51\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ 'ubuntu-latest' ]\n        version: [ 'stable' ]\n    steps:\n      - uses: actions/checkout@v1\n      - uses: jiro4989/setup-nim-action@master\n        with:\n          nim-version: ${{ matrix.version }}\n      - name: Print Nim version\n        uses: nim-lang/setup-nim@v1\n        run: nim -v\n      - name: Print Nimble version\n        run: nimble -v\n      - name: Nimble Refresh\n        run: nimble -y refresh\n      - name: Nimble Install dependencies\n        run: nimble -y install --depsOnly\n      - name: Compile DEBUG Mode\n        run: nimble build\n      - name: Compile RELEASE Mode\n        run: nimble build -d:release\n      - name: Nimble install\n        run: nimble install\n\n```"}
{"id": "63c49c06cbc73931bb19e044", "level": "level4", "answer": "```yaml name: tox\non:\n  pull_request:\n  push:\n     branches:\n       - master\n\njobs:\n  tox:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10]\n        os: [windows-latest, ubuntu-latest]\n    defaults:\n      runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: \"actions/checkout@v3\"\n      - uses: \"actions/setup-python@v3\"\n        with:\n          python-version: ${{ matrix.python-version }}\n          major-version: true\n\n      - name: Cache multiple paths\n        uses: actions/cache@v3\n        with:\n          paths:\n          # Windows paths are written in a non-escaped format.\n          - ~/.cache/pip\n          - ~/.tox\n\n      - name: install-tox\n        shell: bash\n        run: |\n          python -m pip install tox\n\n      - name: run-tox\n        shell: bash\n        run: |\n          tox -v\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v2\n        env:\n          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}\n        if: success() && (matrix.os == 'ubuntu-latest')\n```"}
{"id": "63c4a0231e336480757b8424", "level": "level3", "answer": "```yaml name: Build for Windows\nif: !contains(github.ref, 'gh-pages')\non:\n  push:\n    paths:\n      - .github/workflows/windows.yml\n      - src/**\n      - include/**\n      - pgtap/**\n      - tools/testers/**\n      - CMakeLists.txt\n  pull_request:\n    paths:\n      - .github/workflows/windows.yml\n      - src/**\n      - include/**\n      - pgtap/**\n      - tools/testers/**\n      - CMakeLists.txt\npermissions:\n  contents: read\njobs:\n  build:\n    runs-on: windows-latest\n    env:\n      POSTGRESQL_DIR: \"C:\\\\pgsql\\\\PostgreSQL\\\\13\"\n    strategy:\n      fail-fast: true\n      matrix:\n        pg_major: [13, 14, 15]\n        boost_version: [1.76.0, 1.78.0]\n    name: use pg{{ matrix.pg_major }} and boost{{ matrix.boost_version }}\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Install boost\n      id: install-boost\n      uses: MarkusJx/install-boost@v2.4.0\n      with:\n        boost_version: ${{ matrix.boost_version }}\n        7zip_dir: \"C:\\\\Program Files\\\\7-Zip\"\n        temp_dir_path: \"C:\\\\D\"\n        boost_dir_name: \"boost\"\n\n    - name: Add msbuild to PATH\n      shell: powershell\n      run: |\n        # Add MSBuild directory to path to avoid issues with 7-Zip not having MSBuild in the PATH.\n        # Reference https://github.com/git-for-windows/git/releases/tag/v2.28.0-rc1\n        # Reference https://fbrew.me/msvc-in-path\n        $msbuilds = @(\n          \"$env:ProgramFiles\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\\",\n          \"$env:ProgramFiles\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\Bin\\\",\n          \"$env:ProgramFiles\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\\",\n          \"$env:ProgramFiles\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\\" \n        )\n        $path = New-Item -Path env:TMP_PATH -Value \"\" -Force -PassThru\n        foreach ($msbuild in $msbuilds) {\n            if (Test-Path $msbuild) {\n                $path.value += \"{$msbuild};\"\n            }\n        }\n        [Environment]::SetEnvironmentVariable(\"GITHUB_PATH\", $path.value.TrimEnd(';'), \"User\")\n\n    - name: Install PostgreSQL\n      uses: usewindows/Install-PostgreSQL@v1\n      with:\n        version: ${{ matrix.pg_major }}\n        port: 55432\n        service: false\n        data: c:/pgsql/data13\n        # https://www.postgresql.org/docs/13/libpq-envars.html\n        mode: \"test\"\n        stop: 1\n\n    - name: Check Postgres running\n      continue-on-error: true\n      shell: powershell\n      run: |\n        $exists = Get-Service -Name \"postgresql-$${{ matrix.pg_major }}\" -ErrorAction SilentlyContinue\n        $running = Get-Service -Name \"postgresql-$${{ matrix.pg_major }}\" | Where-Object { ($_.Status -eq \"Running\") }\n        if (!($exists -and $running)){\n          exit 1\n        }\n\n    - name: Configure\n      run: |\n        echo ${{ steps.install-boost.outputs.BOOST_ROOT }}\n        cmake -B build/ \\\n              -G \"Visual Studio 16 2019\" \\\n              -D CMAKE_BUILD_TYPE=Debug \\\n              -D CMAKE_INSTALL_PREFIX=${{ env.POSTGRESQL_DIR }} \\\n              -D PGXM_VERSION_NUMBER=1.6.\uc2dc\uc2a4\ud15c\uc0c1\ubc84\uc804\\\n              -D PGCONFIG_EXECUTABLE=c:/pgsql/postgresql-13.10b2/src/include/pg_config.i.in \\\n              -D PGPORT=55432 \\\n              -D PEGGYOS_BACKROOT=${{ steps.install-boost.outputs.BOOST_ROOT }} \\\n              -D PEGGYOS_INCGROOT=c:/postgresql-$${{ matrix.pg_major }}/pginclude/ \\\n              ..\n\n    - name: build\n      if: ${{ success() }}\n      shell: cmd\n      run: |\n        call \"C:\\Program Files (x86)\\CMake\\bin\\cmake.exe\" --build \"build\"\n```"}
{"id": "63c497041842bc13d7760ffd", "level": "level2", "answer": "```yaml name: Danger JS\n\non: pull_request\n\njobs:\n  danger:\n    runs-on: ubuntu-latest\n    steps:\n    # These steps are required for use with Danger's Dockerfile.\n    - uses: \"actions/checkout@master\"\n    - uses: \"actions/setup-node@master\"\n      env:\n        CI: true\n    - name: Install\n      run: \"npm ci\"\n    - name: Danger\n      uses: \"danger/danger-js\"\n      env:\n        DANGER_GITHUB_API_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49cbe1e336480757a2d8e", "level": "level2", "answer": "```yaml name: \"Publish Gladys Plus front to production\"\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"${{ github.repository == 'GladysAssistant/GladysPlus' }}\"\n    steps:\n      # Trigger hook to Cloudflare Pages\n      - name: Run Cloudflare Pages deploy hook\n        run: curl -s -X POST -H \"Authorization: Token ${{ secrets.CF_PAGES_TOKEN }}\" -H \"Accept: application/json\" ${{ secrets.CF_PAGES_DEPLOY_HOOK }}\n```"}
{"id": "63c49cb3cbc73931bb1a236c", "level": "level5", "answer": "```yaml name: Release Drafter\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    types: [opened, reopened, synchronize]\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5.21.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49ea01899db5886507e71", "level": "level5", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\", \"insights_preview\" ]\n  pull_request:\n    branches: [ \"master\" ]\n  schedule:\n    - cron: \"30 5 * * 6\"\n\njobs:\n  analyze:\n    permissions:\n      actions: read\n      security-events: write\n      contents: read\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp', 'javascript', 'python', 'ruby' ]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          queries: security-extended,security-and-quality\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497f01e33648075784509", "level": "level4", "answer": "```yaml name: Publish Feathr Docker image to DockerHub\n\non:\n  schedule:\n  - cron: '00 22 * * *'\n\n  push:\n    branches:\n      - 'releases/**'\n\njobs:\n  build_and_push_image_to_registry:\n    runs-on: ubuntu-latest\n    name: 'Push Docker image to Docker Hub'\n    steps:\n    - name: Check out the repo\n      uses: actions/checkout@v3\n\n    - name: Log in to Docker Hub\n      uses: docker/login-action@v2\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Extract metadata (tags, labels) for Docker\n      id: meta\n      uses: docker/metadata-action@v5\n      with:\n        images: |-\n          ${DOCKER_USERNAME}/feathr:latest\n          ${DOCKER_USERNAME}/feathr:${{ github.sha }}\n        tags: |\n          latest\n          ${{ github.sha }}\n        flavor: 'docker'\n\n    - name: Build and push Docker image\n      uses: docker/build-push-action@v5\n      with:\n        context: ./\n        file: .github/workflows/build-and-push-images.Dockerfile\n        tags: ${{ steps.meta.outputs.tags }}\n        cache-from: type=local,src=.cache/docker-buildx-cache\n        buildargs: |\n          GIT_COMMIT=${{ github.sha }}\n        secrets: |\n          SERVICE_SAKEY=${{ secrets.SERVICE_SAKEY }}\n          WINDOWS_PASSWORD=${{ secrets.WINDOWS_PASSWORD }}\n        layout: attach\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build_and_push_image_to_registry\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n\n    - uses: azure/webapps-deploy@v2\n      id: deploy-to-sql-webapp\n      with:\n        slot-name: production\n        app-name: feathr-sql-integration\n        publish-profile: ${{ secrets.SQL_APP_PUBLISHPROFILE }}\n        package: ./.github/workflows/release.sig\n    - uses: azure/webapps-deploy@v2\n      id: deploy-to-purview-webapp\n      with:\n        slot-name: production\n        app-name: feathr-purview-integration\n        publish-profile: ${{ secrets.PURVIEW_APP_PUBLISHPROFILE }}\n        package: ./.github/workflows/release.purview.sig\n    - uses: azure/webapps-deploy@v2\n      id: deploy-to-rbac-webapp\n      with:\n        slot-name: production\n        app-name: feathr-rbac-integration\n        publish-profile: ${{ secrets.RBAC_APP_PUBLISHPROFILE }}\n        package: ./.github/workflows/release.rbac.sig\n```"}
{"id": "63c49b15b008460c1df3208e", "level": "level1", "answer": "```yaml name: Deploy\non:\n  push:\n    branches:\n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n```"}
{"id": "63c4a0ce1842bc13d779ff2a", "level": "level4", "answer": "```yaml name: Lint\n\non:\n  push:\n    branches:\n      - main\n      - trunk\n      - release/**\n      - hotfix/[0-9]+.[0-9]+*\n      - feature/**\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: \"Lint: PHP ${{ matrix.php_version }}\"\n    concurrency: \"${{ github.workflow }}-${{ github.ref }}\"\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php_version:\n          - 5.6\n          - 7.0\n          - 7.4\n          - 8.0\n          - 8.1\n          - 8.2\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Install PHP 7.x for generating the vendor_prefixed directory\n        uses: mlocati/docker-php-extension-installer@4c1840013089df2ba865c1f99bebf314aa43456a\n        env:\n          CIBW_SKIP: \"cpan\"\n          PHP_VERSION: \"7.4\"\n        with:\n          create_env: false\n          postrun: |\n            curl -sSL \"https://getcomposer.org/installer\" | php7.4 -- --install-dir=/TMP --install-plugins\n            php7.4 -d\"open_basedir=none\" -d\"disable_functions=null\" -d\"error_reporting=0\" /TMP/composer.phar config minimum-stability dev\n            php7.4 -d\"open_basedir=none\" -d\"disable_functions=null\" -d\"error_reporting=0\" /TMP/composer.phar config prefer-stable true\n\n      - name: Install Composer dependencies and generate vendor_prefixed directory\n        env:\n          HOME: /home/runner\n          SHELL: /bin/bash\n        run: php7.4 -n -d\"extension=opcache.so\" -d\"extension_dir=/usr/local/share/pear\" /TMP/composer.phar install --prefer-dist\n\n      - name: Delete dev dependencies which are not cross-version compatible\n        run: |\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php composerthemes -e dev\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php composer -e dev\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php composer-bundles -e dev\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php textpattern -e dev\n\n      - name: Delete dependencies which are not cross-version compatible\n        run: |\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php gmp -e 5.6\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php gettext -e 5.6\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php row -e 5.6\n          php7.4 -n Composer/ScriptUtils/remove_dependent_packages.php simplepie -e 8.0\n\n      - name: Install PHP for the actual linting\n        uses: mlocati/docker-php-extension-installer@4c1840013089df2ba865c1f99bebf314aa43456a\n        with:\n          create_env: false\n          postrun: |\n            curl -sSL \"https://getcomposer.org/installer\" | php -- --install-dir=/TMP\n\n      - name: Regenerate the Composer autoload file\n        env:\n          SHELL: /bin/bash\n        run: |\n          php7.4 -q -n -d\"extension=opcache.so\" -d\"extension_dir=/usr/local/share/pear\" /data/prod/composer4.0.0a9986464d39aa0208c23377637f4f36ba70a708/composer.phar dump-autoload\n\n      - name: Lint against parse errors\n        run: 'phpcs -p . -v --standard=shopware-linter.xml'\n```"}
{"id": "63c49a51517fc08c1eee926e", "level": "level2", "answer": "```yaml \n# This workflow uses the CodeQL tools from GitHub/codeql-action.\n# For more information, see: https://github.com/github/codeql-action\n\nname: Code Scanning - Action\n\non:\n\n  pull_request:\n    paths:\n      - 'lib/**'\n  push:\n    branches: [ master ]\n    paths:\n      - 'lib/**'\n\njobs:\n  CodeQL-Build:\n    # Use the latest version of the CodeQL tools\n    uses: github/codeql-action/codeql-analysis.yml@main\n\n    # Specify the languages to analyze (you can set this to 'unsafe' to run CodeQL against all languages)\n    # You can also customize other config options at https://github.com/github/codeql-action/\n    with:\n      languages: 'javascript'\n      #  'query-files-path': 'lib/**' # run queries on query files in the repo\n```"}
{"id": "63c49e271842bc13d778ef74", "level": "level5", "answer": "```yaml name: Release\non:\n  push:\n    tags:\n    - 'v*'\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.x'\n\n      - name: Cross build\n        run: make cross\n\n      - name: Create Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: 'Release ${{ github.ref }}'\n\n      - name: Upload\n        run: make upload\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49bed1899db58864f6abb", "level": "level5", "answer": "```yaml name: Unit tests\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '8'\n          cache: 'maven'\n\n      - run: mvn test\n```"}
{"id": "63c49c7f517fc08c1eef6df0", "level": "level2", "answer": "```yaml name: dependabot-auto-merge\n\non: \n  pull_request_target:\n    types: [synchronize]\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Dependabot metadata\"\n        id: metadata\n        uses: \"gunnersoft/auto-merge-dependabot-prs@1a4dc822123ab09c09ecb001d89f8953d10b107b\"\n      - name: \"Auto-merge Dependabot PRs for semver-minor updates\"\n        uses: \"pullreminders/merge-1-pr-from-dependabot-on-release@95aba5ff68f28584951ce8f31393352c79dd2b8d\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        if: ${{ steps.metadata.outputs.merging-action == 'ignore' && steps.metadata.outputs.is-minor == 'true' }}\n      - name: \"Auto-merge Dependabot PRs for semver-patch updates\"\n        uses: \"pullreminders/merge-1-pr-from-dependabot-on-release@95aba5ff68f28584951ce8f31393352c79dd2b8d\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        if: ${{ steps.metadata.outputs.merging-action == 'ignore' && steps.metadata.outputs.is-patch == 'true' }}\n```"}
{"id": "63c49fb91899db588650eeae", "level": "level1", "answer": "```yaml name: Merged Pull Requests\non:\n  pull_request:\n    types:\n      - closed\njobs:\n  remove_labels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Remove Labels\n        uses: 'albayrak-ci/gh-action-remove-labels@v1.4.2'\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # Remove everything when closed, when merged do the opposite instead\n          remove_templates: 'true'\n          # Remove specific labels even if not merged, basically ignores merging tag when locked\n          ignore_prs_label: 'locked';\n          locking_ignored_pr_labels: 'merged';\n          unlock_template: 'locked #event_tag:\\n%s';\n          locked_state_template: 'code-review-pr-in-access-state; merged #action: {} %s';\n          merging_template: '(!merged every locked #to-collaborator)\\nSPRINGFIELD-merged-trigger-labeling-on-github-action#: {} merge-action {%opened_by}}, merged and/or for \u10db\u10d0\u10dc\u10e2\u10d8\u10de\u10d2\u10d0\u10e1\u10da\u10d5\u10d0 %merged_at}) %s';\n\n```"}
