{"id": "63c498731899db58864e00b5", "level": "level1", "llm_response": "```yaml\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows: [\"build-ci\"]\n    branches: [ main ]\n    types: [ completed ]\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: true\n\njobs:\n  k3s:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run K3s E2E tests\n        run: go test ./e2e/k3s\n\n  rke2:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run RKE2 E2E tests\n        run: go test ./e2e/rke2\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"id": "63c4a04733b087f6bde6b930", "level": "level1", "llm_response": "```yaml\nname: Coding Style\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  nette_cc:\n    id: nette_cc\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '7.4'\n    - name: Install dependencies\n      run: composer install --no-dev --optimize-autoloader\n    - name: Run Nette Code Checker\n      run: vendor/bin/nette-code-checker\n\n  nette_cs:\n    id: nette_cs\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '7.4'\n    - name: Install dependencies\n      run: composer install --no-dev --optimize-autoloader\n    - name: Run Nette Coding Standard\n      run: vendor/bin/nette-coding-standard\n```", "answer": "```yaml name: Coding Style\n\non: [push, pull_request]\n\njobs:\n    nette_cc:\n        name: Nette Code Checker\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n            - run: php temp/code-checker/code-checker --strict-types --no-progress\n\n\n    nette_cs:\n        name: Nette Coding Standard\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n            - run: php temp/coding-standard/ecs check\n```"}
{"id": "63c4a0eeb008460c1df57100", "level": "level1", "llm_response": "```yaml\nname: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\n      - docs/**\n      - Gemfile\n      - README.md\n  workflow_dispatch:\n  repository_dispatch:\n    types: [build-nginx]\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build Docker image\n        run: docker build -t ghcr.io/username/repository:latest .\n\n      - name: Push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: ghcr.io/username/repository:latest\n```", "answer": "```yaml name: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'nginx/**'\n      - 'Dockerfiles/nginx.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n      - '_config.yml'\n      - '_includes/**'\n      - '_layouts/**'\n      - 'docs/**'\n      - 'Gemfile'\n      - 'README.md'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Extract commit SHA\n        shell: bash\n        run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n        id: extract_commit_sha\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/nginx.Dockerfile\n          build-args: |\n            VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }}\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```"}
{"id": "63c4989d1842bc13d776b5a5", "level": "level1", "llm_response": "```yaml\nname: Publish release\n\non:\n  release:\n    types: [published, prereleased, created]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean package -B\n\n      - name: Upload release artifact\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: target/your-artifact.jar\n          asset_name: your-artifact.jar\n          asset_content_type: application/java-archive\n```", "answer": "```yaml name: Publish release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build and upload release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Set up JDK 1.11\n        uses: actions/setup-java@v2.3.0\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          check-latest: true\n          cache: 'maven'\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n      - name: Upload release artifact\n        uses: shogo82148/actions-upload-release-asset@v1.3.1\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```"}
{"id": "63c498be6fc19abdf9cab2ce", "level": "level1", "llm_response": "```yaml\nname: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n      - name: Build project\n        run: composer build\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: ['7.4', '8.0', '8.1']\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n      - name: PHP ${{ matrix.php }} Syntax Check\n        run: composer lint\n```", "answer": "```yaml name: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - run: php -v\n\n    - name: Checking for sign off (GPG also accepted)\n      run: php ./vendor/simplemachines/build-tools/check-signed-off.php\n\n    - name: Checking file integrity\n      run: |\n        php ./vendor/simplemachines/build-tools/check-eof.php\n        php ./vendor/simplemachines/build-tools/check-smf-license.php\n        php ./vendor/simplemachines/build-tools/check-smf-languages.php\n        php ./vendor/simplemachines/build-tools/check-version.php\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [ 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1 ]\n\n    name: PHP ${{ matrix.php }} Syntax Check\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Setup PHP ${{ matrix.php }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - name: Lint PHP files\n      run: vendor/bin/phplint -w --exclude .git --exclude vendor --ansi .\n```"}
{"id": "63c49f746fc19abdf9cd63e6", "level": "level1", "llm_response": "```yaml\nname: hygieia-pr\n\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run shell script\n        run: ./hygieia/script.sh\n```", "answer": "```yaml ---\nname: hygieia-pr\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\njobs:\n  build:\n    env:\n      context: hygieia\n      image_name: hygieia\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49f38736e7f0ed8c6ce43", "level": "level1", "llm_response": "```yaml\nname: Platform OWASP ZAP\n\non:\n  push:\n    branches:\n      - dev\n    paths-ignore:\n      - .github/**\n      - docs/**\n      - build/**\n      - README.md\n      - LICENSE\n      - **/argoDeploy.json\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release --no-restore\n\n      - name: Run OWASP ZAP\n        run: dotnet run --project OWASPZAPProject.csproj -- --url http://localhost:5000\n```", "answer": "```yaml # v1.2\nname: Platform OWASP ZAP\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - 'docs/**'\n      - 'build/**'\n      - 'README.md'\n      - 'LICENSE'\n      - '**/argoDeploy.json'\n    branches: [ dev ]\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: Install VirtoCommerce.GlobalTool\n        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n\n      - name: Docker Login\n        uses: azure/docker-login@v1\n        with:\n          login-server: ghcr.io\n          username: $GITHUB_ACTOR\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker Env\n        uses: VirtoCommerce/vc-github-actions/docker-env@master\n        with:\n          githubUser: ${{ env.GITHUB_ACTOR }}\n          githubToken: ${{ env.GITHUB_TOKEN }}\n          platformImage: ghcr.io/virtocommerce/platform\n          storefrontImage: ghcr.io/virtocommerce/storefront\n          validateSwagger: 'false'\n\n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-baseline@v0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          docker_name: 'owasp/zap2docker-stable'\n          target: 'http://localhost:8090'\n          cmd_options: '-a -d'\n```"}
{"id": "63c4955b8052faa2781b1498", "level": "level1", "llm_response": "```yaml\nname: CI v2\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Build\n      run: go build -v ./...\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```"}
{"id": "63c49fe533b087f6bde69242", "level": "level1", "llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Print greeting message\n        run: echo \"Hello, world!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request_target, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: \"Thanks for reporting this issue, don't forget to star this project if you haven't already to help us reach a wider audience.\"\n          pr-message: \"Thanks for implementing a fix, could you ensure that the test covers your changes if applicable.\"\n```"}
{"id": "63c49ff0736e7f0ed8c7162c", "level": "level1", "llm_response": "```yaml\nname: Main Workflow\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches:\n      - '*'\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    id: tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml name: Main Workflow\n\non:\n  push:\n    branches:\n    - develop\n  pull_request:\n    branches:\n    - \"*\"\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Run Tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n        operating-system: [ubuntu-latest] # TODO: Fix a couple tests and enable windows. windows-latest\n      fail-fast: false\n    env:\n      POETRY_VERSION: \"1.2.2\"\n    steps:\n    - uses: actions/checkout@v3\n    # Can we cache the apt-get stuff somehow?\n    - name: Install unrar  # used by some flexget tests\n      if: matrix.operating-system == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -qy unrar\n    # There is some poetry caching built in to setup-python, but there seems to be some confusion\n    # about whether it works well when using a matrix of different python versions. Doing caching\n    # manually for now, until there is more info.\n    - name: Set up Python ${{ matrix.python-version }}\n      id: setup-python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache poetry install\n      uses: actions/cache@v3\n      with:\n        path: ~/.local\n        key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0  # increment last number to reset cache\n    - uses: snok/install-poetry@v1\n      with:\n        version: ${{ env.POETRY_VERSION }}\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n    - name: Install dependencies\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n      run: poetry install --no-interaction --no-root\n    - name: Install project\n      run: poetry install --no-interaction\n    - name: Test with pytest\n      run: |\n        poetry run pytest -n auto\n```"}
{"id": "63c4977fcbc73931bb180c41", "level": "level1", "llm_response": "```yaml\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark-this:\n        description: 'Benchmark to run'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      \n      - name: Run benchmark\n        run: ./run-benchmark.sh ${{ github.event.inputs.benchmark-this }}\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark:\n        description: 'benchmark'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: ./dev/make-distribution.sh -Pspark-3.2 && rm -rf /home/hadoop/celeborn-toolkit/dist/* && mv celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/\n\n      - name: Benchmark\n        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark\n\n      - name: Upload Result\n        uses: actions/upload-artifact@v3\n        with:\n          name: benchmark result\n          path: /home/hadoop/celeborn-toolkit/result/```"}
{"id": "63c49f1e1e336480757b1d5b", "level": "level1", "llm_response": "```yaml\nname: Code scanning - action\n\non:\n  push:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  schedule:\n    - cron: '0 14 * * 4'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: typescript\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code scanning - action\"\n\non:\n  push:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  pull_request:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  schedule:\n    - cron: \"0 14 * * 4\"\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f8eb008460c1df4e97d", "level": "level1", "llm_response": "```yaml\nname: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n\n      - name: Build package\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        run: twine upload dist/*\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n```", "answer": "```yaml name: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - name: Install build dependencies\n        run: pip install -U setuptools wheel build\n      - name: Build\n        run: python -m build .\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install -U -r requirements/publish.txt\n      - name: Create Tag\n        run: python pypi_packaging.py\n```"}
{"id": "63c4990d33b087f6bde3cce0", "level": "level1", "llm_response": "```yaml\nname: Test C\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/workflows/test-lang-c.yml\n      - lang/c/**\n\ndefaults:\n  run:\n    working-directory: lang/c\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run interop tests\n        run: mvn test -Dtest=InteropTest\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - .github/workflows/test-lang-c.yml\n    - lang/c/**\n\ndefaults:\n  run:\n    working-directory: lang/c\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy libjansson-dev libsnappy-dev\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                            libjansson-dev \\\n                                                            liblzma-dev \\\n                                                            libsnappy-dev \\\n                                                            libzstd-dev\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n```"}
{"id": "63c4a0571842bc13d779cf83", "level": "level1", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.16\n\n      - name: Run Release Drafter\n        run: |\n          go run github.com/aktau/github-release-drafter\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n          config-name: notes.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c49c4a1842bc13d7782abd", "level": "level1", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run Release Drafter\n        uses: release-drafter/release-drafter@v5\n        with:\n          config-path: .github/release-drafter.yml\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n#         (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n         config-name: config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}```"}
{"id": "63c499511899db58864e5d14", "level": "level1", "llm_response": "```yaml\nname: Issue Comment Created Triage\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [commented]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run triage script\n        run: go run triage.go\n```", "answer": "```yaml name: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          labels: |\n            stale\n            waiting-reply\n```"}
{"id": "63c4a08333b087f6bde6d0fe", "level": "level1", "llm_response": "```yaml\nname: Semantic Pull Request\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n  pull_requests: read\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Semantic Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions: {}\njobs:\n  main:\n    permissions:\n      pull-requests: read # to analyze PRs (amannn/action-semantic-pull-request)\n      statuses: write # to mark status of analyzed PR (amannn/action-semantic-pull-request)\n\n    runs-on: ubuntu-latest\n    name: Semantic Pull Request\n    steps:\n      - name: Validate PR title\n        uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |\n            feat\n            fix\n            chore\n            refactor\n            docs\n            test\n            ci\n            build\n            infra\n            revert\n```"}
{"id": "63c4a0e71e336480757bcf80", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install codeql\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: python\n\n    - name: Perform CodeQL analysis\n      uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e3533b087f6bde5e450", "level": "level1", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Mark stale issues and pull requests\n      uses: actions/stale@v4\n      with:\n        days-before-issue-stale: 90\n        days-before-pull-request-stale: 90\n        stale-issue-message: 'This issue has been open for over 90 days. If it is still relevant, please comment to keep it open.'\n        stale-pull-request-message: 'This pull request has been open for over 90 days. If it is still relevant, please comment to keep it open.'\n        days-before-issue-close: 7\n        days-before-pull-request-close: 7\n        close-issue-message: 'This issue has been closed because it has been stale for over 90 days.'\n        close-pull-request-message: 'This pull request has been closed because it has been stale for over 90 days.'\n        exempt-issue-labels: 'stale, wontfix'\n        exempt-pull-request-labels: 'stale, wontfix'\n```", "answer": "```yaml # SPDX-License-Identifier: Apache-2.0\n# Copyright 2019 Intel Corporation\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-pr-message: 'This pull request has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-issue-label: 'stale/issue'\n        stale-pr-label: 'stale/pr'\n        days-before-stale: 30\n        days-before-close: 5\n```"}
{"id": "63c49be0517fc08c1eef3298", "level": "level1", "llm_response": "```yaml\nname: Example Integration on Pull Request\n\non:\n  pull_request:\n    branches:\n      - main\n    types: [closed]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run tests\n      run: |\n        python -m unittest discover\n```", "answer": "```yaml name: Example Integration on Pull Request\non: \n  pull_request_target:\n    branches:\n      - main\n    types:\n      - closed\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Plant a Tree\n        if: github.event.pull_request.merged == true\n        id: planttree\n        uses: protontypes/continuous-reforestation@main\n        with:\n        # Enter your API variables below\n            apikey: ${{ secrets.raaskey }}\n            enterpriseid: \"cd7cedcd\"\n            user: ${{ github.actor }}\n            treecount: 5\n            projectid: \"14442771\" # This projectid can be used to have your trees planted where they are needed the most.\n            production: \"false\"\n\n      - name: Response of digitalhumani.com RaaS API\n        run: |\n            echo \"${{ steps.planttree.outputs.response }}\"\n            echo \"${{ steps.planttree.outputs.plantedTrees }}\"\n```"}
{"id": "63c49dc31842bc13d778c6ac", "level": "level1", "llm_response": "```yaml\nname: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches:\n      - main\n  issues:\n    types:\n      - opened\n  issue_comment:\n  pull_request:\n    types:\n      - opened\n  pull_request_comment:\n  pull_request_review_comment:\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up PowerShell\n        uses: actions/setup-dotnet@v1\n        with:\n          dotnet-version: 6.0\n      - name: Run PowerShell script\n        run: |\n          .\\path\\to\\your\\script.ps1\n```", "answer": "```yaml name: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches: [main]\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Hey friend! Thanks for opening this issue. We appreciate your contribution and welcome you to our community! We are glad to have you here and to have your input on the Azure Arc Jumpstart.'\n          pr-message: 'Hi friend! Thanks you for opening this Pull Request. Someone will review it soon. Thank you for committing to making the Azure Arc Jumpstart better.'\n```"}
{"id": "63c49e961842bc13d7791c8a", "level": "level1", "llm_response": "```yaml\nname: Publish\n\non:\n  draft:\n    types: [created]\n  release:\n    types: [published, prereleased]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Publish to npm\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [created]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: npm\n      - run: npm ci\n      - run: npm test\n      - run: npm version ${TAG_NAME} --git-tag-version=false\n        env:\n          TAG_NAME: ${{ github.event.release.tag_name }}\n      - run: npm whoami; npm --ignore-scripts publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```"}
{"id": "63c49b631d1c0d6c2d08006a", "level": "level1", "llm_response": "```yaml\nname: CI Bot\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_review_comment:\n    types: [created]\n  pull_request_comment:\n    types: [created]\n\nenv:\n  PLUGINS: \"assign auto-cc cc label-kind label-bug label-documentation label-enhancement label-question\"\n  MEMBERS_PLUGINS: \"label-duplicate label-good-first-issue label-help-wanted label-invalid label-kind label-wontfix lifecycle\"\n  REVIEWERS_PLUGINS: \"retitle\"\n  APPROVERS_PLUGINS: \"merge\"\n  MAINTAINERS_PLUGINS: \"milestone\"\n  OWNERS_PLUGINS: \"\"\n  REVIEWERS: \"pacoxu wzshiming\"\n  APPROVERS: \"pacoxu wzshiming\"\n  MAINTAINERS: \"pacoxu wzshiming\"\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\n\njobs:\n  issue_opened:\n    id: issue_opened\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  pr_opened:\n    id: pr_opened\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  issue_commented:\n    id: issue_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  pr_review_commented:\n    id: pr_review_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  pr_commented:\n    id: pr_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: CI Bot\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_review_comment:\n    types:\n      - created\n  issues:\n    types:\n      - opened\n  pull_request:\n    types:\n      - opened\n\nenv:\n  # This plugins is for anyone who can use it\n  PLUGINS: |-\n    assign\n    auto-cc\n    cc\n    label-kind\n    label-bug\n    label-documentation\n    label-enhancement\n    label-question\n  \n  # This plugins is for organization member or repository member\n  MEMBERS_PLUGINS: |-\n    label-duplicate\n    label-good-first-issue\n    label-help-wanted\n    label-invalid\n    label-kind\n    label-wontfix\n    lifecycle\n  \n  # This plugins is for in the REVIEWERS environment variable\n  REVIEWERS_PLUGINS: |-\n    retitle\n  # This plugins is for in the APPROVERS environment variable\n  APPROVERS_PLUGINS: |-\n    merge\n  # This plugins is for in the MAINTAINERS environment variable\n  MAINTAINERS_PLUGINS: |-\n    milestone\n  # This plugins is for organization owner or repository owner\n  OWNERS_PLUGINS: \"\"\n\n  REVIEWERS: |-\n    pacoxu\n    wzshiming\n  APPROVERS: |-\n    pacoxu\n    wzshiming\n  MAINTAINERS: |-\n    pacoxu\n    wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |-\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\njobs:\n\n  issue_opened:\n    name: Issue Opened\n    if: ${{ github.event_name == 'issues' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.issue.user.login }}\n          MESSAGE: ${{ github.event.issue.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.issue.author_association }}\n          ISSUE_KIND: issue\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.issue.user.login }},\n            Thanks for opening an issue!\n            We will look into it as soon as possible.\n  pr_opened:\n    name: PR Opened\n    if: ${{ github.event_name == 'pull_request' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.pull_request.user.login }}\n          MESSAGE: ${{ github.event.pull_request.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}\n          ISSUE_KIND: pr\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.pull_request.user.login }},\n            Thanks for your pull request!\n            If the PR is ready, use the `/auto-cc` command to assign Reviewer to Review. \n            We will review it shortly.\n  issue_commented:\n    name: Issue Commented\n    if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: issue\n          TYPE: comment\n\n  pr_review_commented:\n    name: PR Review Commented\n    if: ${{ github.event_name == 'pull_request_review_comment' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n\n  pr_commented:\n    name: PR Commented\n    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n```"}
{"id": "63c5ae896b748c7b1fadef81", "level": "level1", "llm_response": "```yaml\nname: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n  pull_request:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n\njobs:\n  build:\n    runs-on: ubuntu-focal\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up JDK 8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n      - name: Run tests\n        run: ./tests/run.sh\n```", "answer": "```yaml name: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n  pull_request:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n\njobs:\n  build:\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets: inherit\n```"}
{"id": "63c4a0981899db5886514a5b", "level": "level1", "llm_response": "```yaml\nname: [RUN] Discord new release announcement\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  push-announcement:\n    id: push-announcement\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Install dependencies\n        run: dotnet restore\n\n      - name: Build project\n        run: dotnet build --configuration Release\n\n      - name: Push release announcement to Discord\n        run: dotnet run --project path/to/your/discord-bot-project -- --release-version ${{ github.event.release.tag_name }} --release-notes ${{ github.event.release.body }}\n```", "answer": "```yaml name: '[RUN] Discord new release announcement'\n   \non:\n  release:\n    types: [released]\n\njobs:\n  push-announcement:\n    name: Pushing release announcement to Discord\n    runs-on: ubuntu-latest\n    env:      \n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n    steps:\n    - name: CURL Discord API with announcement\n      shell: bash\n      run: |\n        CHANGELOG=$(curl -s https://api.github.com/repos/nethermindeth/nethermind/releases | jq '.[0].body' | grep -Po '(?<=## )(.*?)(?=\\##)')\n        read VERSION LINK < <(echo $(curl -s 'https://api.github.com/repos/nethermindeth/nethermind/releases' | jq -r '.[0].name, .[0].html_url'))\n        MESSAGE=\"**New Nethermind release version: ${VERSION}**\\n\\n${CHANGELOG}<${LINK}>\"\n        curl -s -H \"Content-Type: application/json\" -d '{\"username\": \"Nethermind\", \"content\": \"'\"$MESSAGE\"'\"}' $WEBHOOK_URL > /dev/null 2>&1```"}
{"id": "63c49e9a1899db5886507bf7", "level": "level1", "llm_response": "```yaml\nname: vpinball-gl\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    tags: [ 'v*' ]\n  repository_dispatch:\n\nenv:\n  VERSION_START_SHA: 'ea558e7417f6f06fe567d34f0e33792a141b8e64'\n\njobs:\n  dxsdk:\n    id: dxsdk\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install DirectX SDK\n        run: |\n          # Commands to install DirectX SDK\n          echo \"DirectX SDK installed\"\n\n  version:\n    id: version\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set version\n        run: |\n          # Commands to set version\n          echo \"Version set\"\n\n  build:\n    id: build\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        config: [debug, release]\n        platform: [windows, linux, macos]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\n        run: |\n          # Commands to build VPinballX_GL\n          echo \"Building VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\"\n```", "answer": "```yaml name: vpinball-gl\non:\n  push:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n#  UPX_ARTIFACT: 345209471\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    name: DirectX SDK\n    runs-on: windows-latest\n    steps:\n      - id: cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Create Cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe\n          7z x DXSDK_Jun10.exe DXSDK/Include -otmp\n          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp\n          mv tmp/DXSDK DXSDK\n          rm -fR DXSDK_Jun10.exe tmp\n          ls -Ra DXSDK\n\n  version:\n    name: Version\n    runs-on: ubuntu-latest\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - id: version\n        run: |\n          VERSION_MAJOR=$(grep -Eo \"VP_VERSION_MAJOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_MINOR=$(grep -Eo \"VP_VERSION_MINOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_REV=$(grep -Eo \"VP_VERSION_REV\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)\n          SHA7=\"${GITHUB_SHA::7}\"\n          TAG=\"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}-${REVISION}-${SHA7}\"\n          echo \"revision=${REVISION}\" >> $GITHUB_OUTPUT\n          echo \"sha7=${SHA7}\" >> $GITHUB_OUTPUT\n          echo \"tag=${TAG}\" >> $GITHUB_OUTPUT\n\n  build:\n    name: Build VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\n    runs-on: windows-latest\n    needs: [ dxsdk, version ]\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Release\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Debug\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Release\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Debug\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - run: |\n          sed -i \"s/0/${{ needs.version.outputs.revision }}/g\" git_version.h\n          sed -i \"s/unknown/${{ needs.version.outputs.sha7 }}/g\" git_version.h\n      - name: Build\n        run: |\n          export DXSDK_DIR=\"${GITHUB_WORKSPACE}/DXSDK\"\n          cp cmake/CMakeLists_${{ matrix.platform}}.txt CMakeLists.txt\n          cmake -G \"Visual Studio 17 2022\" -A ${{ matrix.platform-name }} -B build\n          cmake --build build --config ${{ matrix.config }}\n#      - name: Compress\n#        if: matrix.config == 'Release'\n#        run: |\n#          curl -sL -H \"Authorization: Token ${{ secrets.GH_PAT }}\" https://api.github.com/repos/upx/upx/actions/artifacts/${{ env.UPX_ARTIFACT }}/zip -o upx.zip\n#          7z x upx.zip -oupx\n#          rm upx.zip\n#          ./upx/upx.exe --best --lzma build/${{ matrix.config }}/VPinballX_GL.exe\n      - run: |\n          mkdir tmp \n          cp build/${{ matrix.config }}/VPinballX_GL.* tmp\n          cp dll/${{ matrix.bass }} tmp\n          cp dll/${{ matrix.free-image }} tmp\n          cp dll/${{ matrix.sci-lexer-vp }} tmp\n          cp dll/${{ matrix.sdl2-ttf }} tmp\n          cp dll/${{ matrix.sdl2 }} tmp\n          cp dll/${{ matrix.openvr-api }} tmp\n          cp txt/Changelog_Scripts.txt tmp\n          cp txt/Changelog.txt tmp\n          cp txt/CommandLineParameters.txt tmp\n          cp txt/CommandReference.txt tmp\n          cp txt/Hotkeys.txt tmp\n          cp \"txt/JP's VPX7 Physics Materials.mat\" tmp\n          cp \"txt/JP's VPX7 Physics.pdf\" tmp\n          cp \"txt/JP's VPX7 script addons vbs.txt\" tmp\n          cp \"txt/JP's VPX7 Table physics.vpp\" tmp\n          cp txt/layoutGuideline.txt tmp\n          cp txt/license.txt tmp\n          cp \"txt/New Plunger Documentation.pdf\" tmp\n          cp txt/PhysicValues.txt tmp\n          cp txt/RegistryKeys.txt tmp\n          cp txt/Scripts.txt tmp \n          cp -r glshader tmp \n          cp -r scripts tmp\n          cp -r tables tmp\n      - uses: actions/upload-artifact@v3\n        with:\n          name: VPinballX_GL-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}\n          path: tmp\n```"}
{"id": "63c49ac7517fc08c1eeec341", "level": "level1", "llm_response": "```yaml\nname: Lint Pull Request Title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Lint PR title\n      run: npm run lint-pr-title\n```", "answer": "```yaml name: \"Lint Pull Request Title\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Lint Pull Request Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4.5.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49dce517fc08c1eeff4b2", "level": "level1", "llm_response": "```yaml\nname: DCO check\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    id: reverted-pr-check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check if PR is a revert\n        run: |\n          if git log -1 --oneline | grep -q \"Revert\"; then\n            echo \"PR is a revert\"\n            echo \"::set-output name=pr_is_revert::true\"\n          else\n            echo \"PR is not a revert\"\n            echo \"::set-output name=pr_is_revert::false\"\n          fi\n\n  dco_check_job:\n    id: dco_check_job\n    runs-on: ubuntu-latest\n    needs: reverted-pr-check\n    if: needs.reverted-pr-check.outputs.pr_is_revert == 'false'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run DCO check\n        run: |\n          # Add DCO check command here\n          echo \"Running DCO check...\"\n          # Example command: dco-check\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: DCO check\non:\n  pull_request:\n    types: [ opened, reopened, synchronize ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    name: Reverted PR Check Job\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    # Map a step output to a job output\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n      - name: Save Reverted PR output\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ steps.reverted_pr_check.outputs.is_reverted_pr }} > ./pr/is_reverted_pr\n          echo -n \"false\" > ./pr/skipped\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n\n  dco_check_job:\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    name: DCO Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR Commits\n        id: 'get-pr-commits'\n        uses: tim-actions/get-pr-commits@c64db31d359214d244884dd68f971a110b29ab83 # pin@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21 # pin@master\n        with:\n          commits: ${{ steps.get-pr-commits.outputs.commits }}\n      # Need to save PR number as Github action does not propagate it with workflow_run event\n      - name: Save PR number\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ github.event.number }} > ./pr/pr_number\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n```"}
{"id": "63c4a116736e7f0ed8c78a89", "level": "level1", "llm_response": "```yaml\nname: Push-Checks\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml # This workflow will:\n#\n#   * install Python dependencies\n#   * lint with a single version of Python\n#\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Push-Checks\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version-file: '.python-version'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install wheel flake8 pytest\n        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi\n    \n    - name: Setup flake8 annotations\n      uses: rbialon/flake8-annotations@v1\n    \n    - name: Lint with flake8\n      env:\n        ROOT_SHA: ${{github.base_ref}}\n      run: |\n        DATA=$(jq --raw-output .before $GITHUB_EVENT_PATH)\n\n        echo \"DATA: ${DATA}\"\n        # stop the build if there are Python syntax errors or undefined names, ignore existing \n        git diff \"$DATA\" | flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --diff\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        git diff \"$DATA\" | flake8 . --count --statistics --diff\n```"}
{"id": "63c497691e33648075780e11", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '40 18 * * 1'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    #        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n    #        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n    #        \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n    #        \u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12 or JAN-DEC)\n    #        \u2502  \u2502  \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6 or SUN-SAT)\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        *  *  * * *\n    - cron: \"40 18 * * 1\"\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: javascript\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49c55517fc08c1eef5d3f", "level": "level1", "llm_response": "```yaml\nname: Mkdocs publish\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n```", "answer": "```yaml   # This is a basic workflow to help you get started with Actions\n\nname: Mkdocs publish\n\n# Controls when the action will run.\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      - name: Install pip\n        run: python3 -m pip install --upgrade pip setuptools wheel\n\n      - name: Install MkDocs\n        run: |\n          pip install mkdocs\n          pip install mkdocs-macros-plugin\n\n      - name: MkDocs build\n        run: mkdocs build\n\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```"}
{"id": "63c49cfab008460c1df3e23b", "level": "level1", "llm_response": "```yaml\nname: Check PR title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  check_pr_title:\n    id: check_pr_title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Check PR title\n        run: |\n          if [[ \"${{ github.event.pull_request.title }}\" =~ ^[A-Z] ]]; then\n            echo \"PR title starts with a capital letter.\"\n          else\n            echo \"PR title does not start with a capital letter.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: Check PR title\n\non:\n    pull_request_target:\n        types: [ opened, edited, synchronize ]\n\njobs:\n    check_pr_title:\n        name: 'Check PR title'\n        runs-on: ubuntu-latest\n        steps:\n            -   uses: amannn/action-semantic-pull-request@v4.6.0\n                env:\n                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4996733b087f6bde3f1c8", "level": "level1", "llm_response": "```yaml\nname: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Deploy to Open VSX Registry\n        run: npm run deploy:vsx\n```", "answer": "```yaml name: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: yarn install --immutable\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          pat: ${{ secrets.OPEN_VSX_TOKEN }}\n```"}
{"id": "63c4a0576fc19abdf9cdc124", "level": "level1", "llm_response": "```yaml\nname: Examples\n\non:\n  push:\n    branches:\n      - main\n      - 'maintenance/**'\n  pull_request:\n    branches:\n      - main\n      - 'maintenance/**'\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python-version: [3.7, 3.8, 3.9]\n        rdkit: [latest, 2020.09]\n        openeye: [latest, 2020.09]\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          pip install rdkit-${{ matrix.rdkit }} openeye-${{ matrix.openeye }}\n      - name: Run tests\n        run: python -m unittest discover\n```", "answer": "```yaml name: Examples\n\non:\n  push:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  pull_request:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  schedule:\n    - cron: \"0 0 * * *\"\n\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  test:\n    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') || (github.event_name != 'schedule')\n    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.8\"]\n        rdkit: [true, false]\n        openeye: [true, false]\n        exclude:\n          - rdkit: false\n            openeye: false\n          - rdkit: true\n            openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 2\n\n      - name: Set environment variables\n        run: |\n          if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then\n              echo \"ENVFILE=openeye\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=OPENEYE\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=ambertools rdkit\" >> $GITHUB_ENV\n          fi\n\n          if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then\n              echo \"ENVFILE=rdkit\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=RDKIT\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=openeye-toolkits\" >> $GITHUB_ENV\n          fi\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml\n          extra-specs: |\n            python=${{ matrix.python-version }}\n\n      - name: Additional info about the build\n        run: |\n          uname -a\n          df -h\n          ulimit -a\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        shell: bash\n        env:\n          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}\n        run: |\n          echo \"${OE_LICENSE_TEXT}\" > ${OE_LICENSE}\n\n      - name: Install package\n        run: |\n          # Maybe remove the packaged openff-toolkit, installed as a dependency of openmmforcefields\n          # and/or Interchange\n          conda remove --force openff-toolkit-base\n          python setup.py develop --no-deps\n\n      - name: Remove undesired toolkits\n        run: |\n          # If openmmforcefields is included in examples/environment.yaml,\n          # remove RDKit and AmberTools brought in by it. Currently it's not included,\n          # so don't remove it.\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do\n              if [[ $(conda list | grep $cpkg) ]]; then conda remove --force $cpkg --yes ; fi\n            done\n          fi\n\n      - name: Check installed toolkits\n        run: |\n          for tk in ${{ env.TOOLKIT_CHECKS }}; do\n            python -c \"from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'\"\n          done\n\n      - name: Check uninstalled toolkits\n        run: |\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for tk in ${{ env.PACKAGES_TO_REMOVE }}; do\n              TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')\n              python -c \"from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'\"\n            done\n          fi\n      - name: Environment Information\n        run: |\n          conda info\n          conda list\n\n      - name: Run example scripts\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            PYTEST_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            PYTEST_ARGS+=\" --ignore=examples/QCArchive_interface\"\n          fi\n          pytest $PYTEST_ARGS openff/toolkit/tests/test_examples.py\n\n      - name: Run example notebooks\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            NB_ARGS+=\" --ignore=examples/QCArchive_interface\"\n            NB_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            NB_ARGS+=\" --ignore=examples/conformer_energies\"\n            NB_ARGS+=\" --ignore=examples/using_smirnoff_in_amber_or_gromacs\"\n          fi\n\n          # openmmforcefields incompatible with new toolkit\n          NB_ARGS+=\" --ignore=examples/external/swap_amber_parameters/swap_existing_ligand_parameters_with_openmmforcefields.ipynb\"\n\n          python -m pytest $PYTEST_ARGS $NB_ARGS examples\n```"}
{"id": "63c49d69736e7f0ed8c61514", "level": "level1", "llm_response": "```yaml\nname: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Create release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n          body: |\n            Auto-generated release notes.\n```", "answer": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Create GitHub release\n        uses: Roang-zero1/github-create-release-action@master\n        with:\n          version_regex: ^v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4968a1e3364807577b4a5", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4991e33b087f6bde3d441", "level": "level1", "llm_response": "```yaml\nname: Releasability\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5'\n  workflow_dispatch:\n\ninputs:\n  releaseFamily:\n    description: 'Release family (vx.y)'\n    required: false\n    type: string\n  moduleReleaseFamily:\n    description: 'Module release family (vx.y)'\n    required: false\n    type: string\n  slackChannel:\n    description: 'Slack channel (release-#)'\n    required: false\n    type: string\n\njobs:\n  releasability:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run releasability checks\n        run: |\n          go test ./...\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Releasability'\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5' # 6am Pacific, weekdays.\n\n  workflow_dispatch:      # Manual trigger.\n    inputs:\n      releaseFamily:\n        description: 'Release? (vX.Y)'\n        required: false\n      moduleReleaseFamily:\n        description: 'Module Release? (vX.Y)'\n        required: false\n      slackChannel:\n        description: 'Slack Channel? (release-#)'\n        required: false\n\njobs:\n  releasability:\n    uses: knative/actions/.github/workflows/releasability.yaml@main\n    with:\n      releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n      moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n      slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n    secrets:\n      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```"}
{"id": "63c49d616fc19abdf9cc8e74", "level": "level1", "llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install --no-dev --optimize-autoloader\n\n      - name: Create release\n        run: |\n          git tag -a ${{ github.ref_name }} -m \"Release ${{ github.ref_name }}\"\n          git push origin ${{ github.ref_name }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create release\"\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    name: \"Deploy\"\n    runs-on: \"ubuntu-latest\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          myToken: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n\n      - name: \"Create release\"\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```"}
{"id": "63c499d31899db58864e92ea", "level": "level1", "llm_response": "```yaml\nname: Build AIO-switch-updater\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    types: [ created ]\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up C++\n      uses: actions/setup-cpp@v2\n      with:\n        cpp-version: '14'\n    - name: Build with CMake\n      run: |\n        mkdir build\n        cd build\n        cmake ..\n        make\n```", "answer": "```yaml name: Build AIO-switch-updater\n\non: \n  push:\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n    #container: hamletdufromage/devkita64_devkitarm\n    container: devkitpro/devkita64\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        git submodule update --init --recursive\n        \n    - name: Building aio-switch-updater\n      run: |\n        make -C aiosu-forwarder -f Makefile\n        make -j$(nproc)\n        \n    - uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater.nro\n```"}
{"id": "63c4973b517fc08c1eed5918", "level": "level1", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Create release\n        run: |\n          npm install -g semantic-release\n          semantic-release\n```", "answer": "```yaml name: 'Release'\n\non:\n  push:\n    branches:\n      - 'main'\n\njobs:\n  release:\n    if: \"startsWith(github.event.head_commit.message, 'Release: v')\"\n    name: 'Release'\n    uses: 'google-github-actions/.github/.github/workflows/release.yml@v0'\n```"}
{"id": "63c49ebdb008460c1df494c2", "level": "level1", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, synchronize]\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run labeler script\n        run: ./labeler.sh\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49f55517fc08c1ef0903b", "level": "level1", "llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [opened, closed, synchronize]\n  pull_request_review:\n    types: [submitted]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run CLA Assistant\n        run: npm run cla-assistant\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://github.com/theskeletoncrew/treat-toolbox/blob/main/CLA.md' # e.g. a CLA or a DCO document\n          # branch should not be protected\n          branch: 'main'\n          allowlist: skeletoncrewrip,cosimo-rip\n\n         #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```"}
{"id": "63c4a0cc6fc19abdf9cde85c", "level": "level1", "llm_response": "```yaml\nname: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up CMake\n        uses: actions/setup-cmake@v1\n      - name: Build\n        run: cmake --build .\n```", "answer": "```yaml name: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: \"**/cpm_modules\"\n          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}\n\n      - name: Install format dependencies\n        run: |\n          choco install llvm --version 15.0.1 -y\n          choco install ninja -y\n          pip3 install cmake_format==0.6.11 pyyaml\n\n      - name: configure\n        run: cmake -G Ninja -S . -B build -DTP_BUILD_EXAMPLES=OFF\n\n      - name: check style\n        run: cmake --build build --target check-format\n```"}
{"id": "63c5c621ac4f2678a5bd7766", "level": "level1", "llm_response": "```yaml\nname: Reusable - Spotless\n\non:\n  workflow_dispatch:\n    inputs:\n      cache-read-only:\n        description: 'Enable read-only cache'\n        required: false\n        type: boolean\n      no-build-cache:\n        description: 'Disable build cache'\n        required: false\n        type: boolean\n\nsecrets:\n  GRADLE_ENTERPRISE_ACCESS_KEY:\n    required: false\n  GE_CACHE_USERNAME:\n    required: false\n  GE_CACHE_PASSWORD:\n    required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Apply Spotless\n        run: ./gradlew spotlessApply\n```", "answer": "```yaml name: Reusable - Spotless\n\non:\n  workflow_call:\n    inputs:\n      cache-read-only:\n        type: boolean\n        required: false\n      no-build-cache:\n        type: boolean\n        required: false\n    secrets:\n      GRADLE_ENTERPRISE_ACCESS_KEY:\n        required: false\n      GE_CACHE_USERNAME:\n        required: false\n      GE_CACHE_PASSWORD:\n        required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK for running Gradle\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n\n      - name: Spotless\n        uses: gradle/gradle-build-action@v2\n        env:\n          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n        with:\n          arguments: spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}\n          cache-read-only: ${{ inputs.cache-read-only }}\n          # gradle enterprise is used for the build cache\n          gradle-home-cache-excludes: caches/build-cache-1\n```"}
{"id": "63c49b20b008460c1df324d1", "level": "level1", "llm_response": "```yaml\nname: release_candidate\n\non:\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml # Release Candidate GitHub Action\n\nname: release_candidate\n\n# TODO(actions):\n# - [x] create a new AUTO-RC-<DATE> branch\n# - [x] update CHANGES.rst\n# - [x] create changes commit\n# - [x] push to GH\n# - [ ] update README.rst\n# - [ ] create readme commit\n# - [ ] push to GH\n# - [ ] open a PR to `master`\n\n# TODO(general):\n# - [ ] setup the action\n# - [ ] cleanup the action\n\non:\n  schedule:\n    - cron:  '0 0 1 * *'  # each 1st day of the month\n  workflow_dispatch:      # on manual trigger\n\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Flag to fetch all history.\n          #   @see https://github.com/marketplace/actions/checkout#Fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n      - run: |\n          RC_DATE=$(date +'%m-%d-%Y')\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git checkout -b auto-release-candidate-${RC_DATE}\n          git push -u origin auto-release-candidate-${RC_DATE}\n\n          git status\n          git fetch\n\n          ./bin/update_changelog.sh\n\n          git add CHANGES.rst\n          git commit -m \"chore(rc-changes): update Changes.rst\"\n          git push\n\n          gh pr create  --title \"chore(auto-release-candidate-${RC_DATE})\" \\\n                        --body \"Automated release candidate for ${RC_DATE}.\" \\\n                        --base master \\\n                        --draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c4a0961842bc13d779e955", "level": "level1", "llm_response": "```yaml\nname: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```"}
{"id": "63c494dd8052faa2781add7b", "level": "level1", "llm_response": "```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  workflow_dispatch:\n    inputs:\n      type:\n        description: 'Event type'\n        required: true\n        type: string\n        default: 'rerun-ci'\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        java-version: [8, 11, 17]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK ${{ matrix.java-version }}\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ matrix.java-version }}\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Continuous Integration\n\non:\n  push:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  repository_dispatch:\n    types: [rerun-ci]\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    name: JDK ${{ matrix.java.version }} - on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 60\n    strategy:\n      matrix:\n        os: [ macos-latest ]\n        java:\n          - {\n            version: 11\n          }\n          - {\n            version: 17\n          }\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build with Maven\n        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true\n```"}
{"id": "63c49d3433b087f6bde57d87", "level": "level1", "llm_response": "```yaml\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  Kics:\n    id: kics\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-02-01 19:36:08 +0000 (Tue, 01 Feb 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  kics:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Kics\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496401e3364807577961d", "level": "level1", "llm_response": "```yaml\nname: Test commit or pull request\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install\n      - run: npm run eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install\n      - run: npm run stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install\n      - run: npm run i18n-packs\n```", "answer": "```yaml name: Test commit or pull request\n\non: [push, pull_request]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with eslint\n        run: npm run test:eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with stylelint\n        run: npm run test:stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test i18n packs integrity\n        run: npm run test:i18n-packs\n```"}
{"id": "63c49932cbc73931bb18c12f", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49ad8cbc73931bb1965d2", "level": "level1", "llm_response": "```yaml\nname: prod-deploy\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Deploy to production\n      run: echo \"Deploying to production...\"\n      # Add your deployment commands here\n```", "answer": "```yaml name: prod-deploy\n\non: [workflow_dispatch]\n\njobs:\n    deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v3\n\n            - name: Setup Node.js environment\n              uses: actions/setup-node@v3\n              with:\n                  node-version: '16'\n                  cache: 'yarn'\n\n            - name: Cache node_modules\n              uses: actions/cache@v3\n              id: cached-node_modules\n              with:\n                  path: |\n                      node_modules\n                  key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/publish-release.yml') }}\n\n            - name: Install all yarn packages\n              if: steps.cached-node_modules.outputs.cache-hit != 'true'\n              run: yarn --frozen-lockfile\n\n            - name: Build all\n              run: yarn build\n\n            - name: Deploy pages\n              run: |\n                  git init\n                  git config user.name \"schalkneethling\"\n                  git config user.email \"sneethling@mozilla.com\"\n                  git checkout -b prod\n                  git add .\n                  git commit --allow-empty -m \"Deploying latest generated pages\"\n                  git remote add mdn \"https://$GITHUB_TOKEN@github.com/mdn/interactive-examples.git\"\n                  # Eat output so it doesn't spit out the sensitive GITHUB_TOKEN if something goes wrong:\n                  git push -q -f mdn prod > /dev/null 2>&1\n```"}
{"id": "63c498f31899db58864e363a", "level": "level1", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v1\n        with:\n          dotnet-version: '3.1'\n\n      - name: Install Release Drafter\n        run: npm install -g release-drafter\n\n      - name: Create release draft\n        run: release-drafter\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c496561899db58864d23b8", "level": "level1", "llm_response": "```yaml\nname: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Run with tmate debugging'\n        required: false\n        default: 'false'\n        type: boolean\n\njobs:\n  environment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      # Plugins\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: environment\n```"}
{"id": "63c496a56fc19abdf9c9d4fb", "level": "level1", "llm_response": "```yaml\nname: test\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - '**/Cargo.toml'\n      - '**/*.rs'\n      - justfile\n      - .github/workflows/test.yml\n\npermissions:\n  contents: read\n\nenv:\n  CARGO_INCREMENTAL: '0'\n  CARGO_NET_RETRY: '10'\n  RUSTFLAGS: '-D warnings -A deprecated'\n  RUSTUP_MAX_RETRIES: '10'\n\njobs:\n  meshtls:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          profile: minimal\n          toolchain: stable\n          override: true\n      - name: Build project\n        run: cargo build --release\n\n  unit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          profile: minimal\n          toolchain: stable\n          override: true\n      - name: Run tests\n        run: cargo test --release\n```", "answer": "```yaml # Runs tests that complete relatively quickly.\nname: test\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - \"**/Cargo.toml\"\n      - \"**/*.rs\"\n      - justfile\n      - .github/workflows/test.yml\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: \"-D warnings -A deprecated\"\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  # Test the meshtls backends.\n  meshtls:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just clippy-crate linkerd-meshtls --all-features\n      - run: |\n          just test-crate linkerd-meshtls --all-features --no-run \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n      - run: |\n          just test-crate linkerd-meshtls --all-features \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n\n  # Run non-integration tests. This should be quick.\n  unit:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: |\n          just test --no-run \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n      - run: |\n          just test \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n```"}
{"id": "63c4a116736e7f0ed8c78a5a", "level": "level1", "llm_response": "```yaml\nname: Nightly\n\non:\n  schedule:\n    - cron: '30 12 * * *'\n\npermissions:\n  id-token: write\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Nightly\non:\n  schedule:\n    - cron: '30 12 * * *'\npermissions:\n  id-token: write\njobs:\n  nightly:\n    if: github.repository == 'aws/karpenter'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/authenticate-aws\n      - run: make nightly\n```"}
{"id": "63c498e61899db58864e3102", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n      - master\n      - 'release-*'\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up CodeQL\n        uses: github/codeql-action/setup@v2\n        with:\n          languages: 'opa'\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"develop\", master, release-* ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"develop\" ]\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a11a1e336480757be37b", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n        with:\n          languages: typescript\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    continue-on-error: true\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        config-file: ./.github/codeql/codeql-config.yml\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718d", "level": "level1", "llm_response": "```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: false\n        default: 'minor'\n        options:\n          - 'patch'\n          - 'minor'\n          - 'major'\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Switch to release branch\n        run: git checkout -b release\n\n      - name: Build and test\n        run: go build -v ./... && go test -v ./...\n\n      - name: Release\n        run: echo \"Release version: ${{ github.event.inputs.version }}\"\n```", "answer": "```yaml name: Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        required: false\n        description: 'Next version (NOTE: Switch the branch to \"release\"!)'\n        type: choice\n        default: minor\n        options:\n          - patch\n          - minor\n          - major\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n    steps:\n      - name: Set up git config\n        run: |\n          git config --global user.name \"${{ github.actor }}\"\n          git config --global user.email \"${{ github.actor }}@users.noreply.github.com\"\n          git config --global pull.rebase false\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - id: changelog\n        name: Generate CHANGELOG\n        uses: reearth/changelog-action@main\n        with:\n          version: ${{ github.event.inputs.version }}\n          repo: ${{ github.repository }}\n          latest: CHANGELOG_latest.md\n      - name: Insert reearth-web changelog\n        uses: actions/github-script@v6\n        with:\n          script: 'require(\"./.github/workflows/release\")({ github, context })'\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n      - name: Upload latest CHANGELOG\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog-${{ steps.changelog.outputs.version }}\n          path: CHANGELOG_latest.md\n      - name: Commit & push to release\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        run: |\n          rm CHANGELOG_latest.md\n          git add CHANGELOG.md\n          git commit -am \"$TAG\"\n          git tag $TAG\n          git push --atomic origin release $TAG\n      - name: Commit & push to main\n        run: git switch main && git cherry-pick release && git push\n```"}
{"id": "63c497bf1e33648075783099", "level": "level1", "llm_response": "```yaml\nname: Issue tracking\n\non:\n  issues:\n    types: [opened, labeled]\n  label:\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run issue tracking script\n        run: |\n          # Add your issue tracking script here\n```", "answer": "```yaml name: Issue tracking\non:\n  issues:\n    types:\n      - opened\n      - labeled\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0\n        with:\n          app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n          private_key: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ORGANIZATION: prebid\n          DATE_FIELD: Created on\n          PROJECT_NUMBER: 4\n        run: |\n          gh api graphql -f query='\n            query($org: String!, $number: Int!) {\n              organization(login: $org){\n                projectNext(number: $number) {\n                  id\n                  fields(first:100) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"'\"$DATE_FIELD\"'\") | .id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id,\n                  content {\n                     ... on Issue {\n                        createdAt\n                     }\n                     ... on PullRequest {\n                        createdAt\n                     }                     \n                  }\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json\n          \n          echo 'ITEM_ID='$(jq '.data.addProjectNextItem.projectNextItem.id' issue_data.json) >> $GITHUB_ENV\n          echo 'ITEM_CREATION_DATE='$(jq '.data.addProjectNextItem.projectNextItem.content.createdAt' issue_data.json) >> $GITHUB_ENV\n\n      - name: Set fields\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n        run: |\n          gh api graphql -f query='\n            mutation (\n              $project: ID!\n              $item: ID!\n              $date_field: ID!\n              $date_value: String!\n            ) {\n              set_creation_date: updateProjectNextItemField(input: {\n                projectId: $project\n                itemId: $item\n                fieldId: $date_field\n                value: $date_value\n              }) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f date_field=$DATE_FIELD_ID -f date_value=$ITEM_CREATION_DATE --silent\n```"}
{"id": "63c4947a8052faa2781ab62f", "level": "level1", "llm_response": "```yaml\nname: Backport labeled merged pull requests\n\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run backport script\n        run: ./backport_script.sh\n```", "answer": "```yaml name: Backport labeled merged pull requests\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\njobs:\n  build:\n    name: Create backport PRs\n    runs-on: ubuntu-latest\n    # Only run when pull request is merged\n    # or when a comment containing `/backport` is created by someone other than the backport-action\n    # bot user (user id: 97796249)\n    if: >\n      (\n        github.event_name == 'pull_request' &&\n        github.event.pull_request.merged\n      ) || (\n        github.event_name == 'issue_comment' &&\n        github.event.issue.pull_request &&\n        github.event.comment.user.id != 97796249 &&\n        contains(github.event.comment.body, '/backport')\n      )\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Token for git actions, e.g. git push\n          token: ${{ secrets.BACKPORT_ACTION_PAT }}\n      - name: Create backport PRs\n        uses: zeebe-io/backport-action@v0.0.8\n        with:\n          # Required\n          # Token to authenticate requests to GitHub\n          github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n\n          # Required\n          # Working directory for the backport action\n          github_workspace: ${{ github.workspace }}\n\n          # Optional\n          # Regex pattern to match github labels\n          # Must contain a capture group for target branchname\n          # label_pattern: ^backport ([^ ]+)$\n\n          # Optional\n          # Template used as description in the pull requests created by this action.\n          # Placeholders can be used to define variable values.\n          # These are indicated by a dollar sign and curly braces (`${placeholder}`).\n          # Please refer to this action's README for all available placeholders.\n          pull_description: |-\n            # Description\n            Backport of #${pull_number} to `${target_branch}`.\n\n            relates to ${issue_refs}\n```"}
{"id": "63c49b8c1e3364807579b321", "level": "level1", "llm_response": "```yaml\nname: Create tag\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: true\n    default: 'patch'\n    type: choice\n    options:\n      - patch\n      - minor\n\njobs:\n  create-tag:\n    id: create-tag\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Create tag\n        run: |\n          git tag -a ${{ github.event.inputs.version }} -m \"Release ${{ github.event.inputs.version }}\"\n          git push origin ${{ github.event.inputs.version }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create tag\"\n\non:\n  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: true\n        default: 'patch'\n        type: choice\n        options:\n          - patch\n          - minor\n\njobs:\n  create-tag:\n    name: \"Create tag\"\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.PAT }}\n\n      - name: 'Get Previous tag'\n        id: previoustag\n        uses: \"WyriHaximus/github-action-get-previous-tag@v1\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: 'Get next versions'\n        id: semvers\n        uses: \"WyriHaximus/github-action-next-semvers@v1\"\n        with:\n          version: ${{ steps.previoustag.outputs.tag }}\n\n      - name: \"Create new minor tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'minor'\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: ${{ steps.semvers.outputs.minor }}\n\n      - name: \"Create new patch tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'patch'\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: ${{ steps.semvers.outputs.patch }}\n```"}
{"id": "63c4a0d7517fc08c1ef12403", "level": "level1", "llm_response": "```yaml\nname: Check\n\non:\n  pull_request:\n    types: [opened, ready_for_review, synchronize]\n  pull_request_review:\n    types: [submitted]\n\npermissions:\n  actions: write\n  pull-requests: write\n  checks: none\n  contents: none\n  deployments: none\n  issues: none\n  packages: none\n  repository-projects: none\n  security-events: none\n  statuses: none\n\njobs:\n  check-reviews:\n    id: check-reviews\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.17\n      - name: Run checks\n        run: go test ./...\n```", "answer": "```yaml # Workflow will trigger on all pull request (except draft), pull request\n# review, and commit push to a pull request (synchronize) event types\n#\n# NOTE: pull_request_target behaves the same as pull_request except it grants a\n# read/write token to workflows running on a pull request from a fork. While\n# this may seem unsafe, the permissions for the token are limited below and\n# the permissions can not be changed without merging to master which is\n# protected by CODEOWNERS.\nname: Check\non:\n  pull_request_review:\n    type: [submitted, edited, dismissed]\n  pull_request_target:\n    types: [opened, ready_for_review, synchronize]\n\n# Limit the permissions on the GitHub token for this workflow to the subset\n# that is required. In this case, the check workflow needs to invalidate\n# reviews and delete workflow runs, so it needs write access to \"actions\" and\n# \"pull-requests\", nothing else.\npermissions:\n    actions: write\n    pull-requests: write\n    checks: none\n    contents: none\n    deployments: none\n    issues: none\n    packages: none\n    repository-projects: none\n    security-events: none\n    statuses: none\n\njobs:\n  check-reviews:\n    name: Checking reviewers\n    if: ${{ !github.event.pull_request.draft }}\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout main branch of shared-workflow repository.\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v3\n        with:\n          repository: gravitational/shared-workflows\n          path: .github/shared-workflows\n          ref: main\n      - name: Installing Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: .github/shared-workflows/bot/go.mod\n        # Run \"check\" subcommand on bot.\n      - name: Checking reviewers\n        run: cd .github/shared-workflows/bot && go run main.go -workflow=check -token=\"${{ secrets.GITHUB_TOKEN }}\" -reviewers=\"${{ secrets.reviewers }}\"\n```"}
{"id": "63c4973933b087f6bde31123", "level": "level1", "llm_response": "```yaml\nname: Structr CI Pipeline\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n    - name: Run tests\n      run: ./mvnw test\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    needs: run-tests\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n    - name: Build and deploy\n      run: ./mvnw clean deploy\n\n  cleanup-system:\n    runs-on: ubuntu-latest\n    needs: build-and-deploy\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Clean up system\n      run: |\n        # Add cleanup commands here\n        echo \"Cleaning up system...\"\n```", "answer": "```yaml name: Structr CI Pipeline\non:\n  push\n\njobs:\n  run-tests:\n    if: ${{ !startsWith( github.actor, 'dependabot' ) }}\n    runs-on: self-hosted\n    environment: build-and-test\n    strategy:\n      matrix:\n        include:\n          - module: structr-ui\n            variableName: UI\n          - module: structr-core\n            variableName: CORE\n          - module: structr-rest\n            variableName: REST\n          - module: structr-db-driver-api\n            variableName: DB_DRIVER_API\n          - module: structr-memgraph-driver\n            variableName: MEMGRAPH_DRIVER\n          - module: structr-memory-driver\n            variableName: MEMORY_DRIVER\n          - module: structr-modules\n            variableName: MODULES\n          - module: structr-neo4j-bolt-driver\n            variableName: NEO4J_BOLT_DRIVER\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start Test Datenbase\n        run: >-\n          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} \n          -p 7687 \n          -e NEO4J_AUTH=neo4j/admin \n          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \n          -e NEO4J_dbms_memory_heap_maxSize=4G \n          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && \n          echo \"ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"7687/tcp\") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})\" >> $GITHUB_ENV\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Compile and run Tests\n        run:  >-\n          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && \n          cd ${{ matrix.module }} && \n          mvn clean install -DskipDockerTestDB -Denv.testDatabaseConnection=\"bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}\"\n\n      - name: Stop Test Database\n        if: always()\n        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}\n\n  build-and-deploy:\n    runs-on: self-hosted\n    environment: build-and-test\n    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}\n    needs: run-tests\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: structr\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB\n      - name: Upload binaries\n        run: >-\n          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&\n          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1\n\n  cleanup-system:\n    runs-on: self-hosted\n    if: always()\n    needs: [run-tests, build-and-deploy]\n    steps:\n      - name: Cleanup docker\n        run: docker container prune -f && docker image prune -f && docker volume prune -f\n      - name: Cleanup runner home\n        run: cd ~/actions-runner/_work/structr/ && rm -rf structr\n```"}
{"id": "63c496e6517fc08c1eed3897", "level": "level1", "llm_response": "```yaml\nname: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    id: sync-branches\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Sync to development\n        run: |\n          git checkout development\n          git merge master\n          git push origin development\n```", "answer": "```yaml name: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    runs-on: ubuntu-latest\n    name: Syncing branches\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          FROM_BRANCH: 'master'\n          TO_BRANCH: 'dev'\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: internal\n          repo: ${{ github.repository }}\n          number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```"}
{"id": "63c4a12533b087f6bde70dfc", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * 0'\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: typescript\n\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: 'CodeQL'\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * SUN'\n\njobs:\n  'Analyze':\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n    steps:\n      - name: 'Checkout repository'\n        uses: actions/checkout@v3\n      - name: 'Initialize CodeQL'\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: 'Perform CodeQL Analysis'\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49fda6fc19abdf9cd8ce3", "level": "level1", "llm_response": "```yaml\nname: Continuous integration\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [ published ]\n  repository_dispatch:\n\nenv:\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    id: test-nixpkgs\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Nix\n      uses: cachix/install-nix-action@v18\n      with:\n        nix-version: '2.13.2'\n        cachix-cache-name: 'nixpkgs-unstable'\n        cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}\n    - name: Build and test\n      run: nix-build -A tests\n\n  test-nixpkgs-cross:\n    id: test-nixpkgs-cross\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Nix\n      uses: cachix/install-nix-action@v18\n      with:\n        nix-version: '2.13.2'\n        cachix-cache-name: 'nixpkgs-unstable'\n        cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}\n    - name: Build and test cross\n      run: nix-build -A tests.cross\n\n  test-bindist:\n    id: test-bindist\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Nix\n      uses: cachix/install-nix-action@v18\n      with:\n        nix-version: '2.13.2'\n        cachix-cache-name: 'nixpkgs-unstable'\n        cachix-auth-token: ${{ secrets.CACHIX_AUTH_TOKEN }}\n    - name: Build and test bindist\n      run: nix-build -A tests.bindist\n```", "answer": "```yaml name: Continuous integration\non: [push]\nenv:\n  # Bump this number to invalidate the GH actions cache\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    name: Build & Test - Nixpkgs\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-nixpkgs;;\n            Linux) BUILD_CONFIG=ci-linux-nixpkgs;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          nix-shell --arg docTools false --pure --run '\n            set -euo pipefail\n            ./tests/run-start-script.sh --use-nix\n            bazel build //tests:run-tests\n            ./bazel-ci-bin/tests/run-tests\n            bazel coverage //...\n            bazel build //docs:api_html\n            bazel build //docs:guide_html\n            '\n\n  test-nixpkgs-cross:\n    name: Build & Test - Cross\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=linux-nixpkgs\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          ln -sr .bazelrc.local examples/arm/.bazelrc.local\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          cd examples/arm\n          nix-shell --arg docTools false --pure --run \"bazel build //... --platforms=//:linux_aarch64\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example2\"\n\n  test-bindist:\n    name: Build & Test - bindist\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |-\n          sudo swapoff -a\n          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc\n          sudo apt clean\n          docker rmi $(docker images -q) -f\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}\n      - name: Install Bazel\n        shell: bash\n        run: |\n          BAZEL_DIR=\"$(.ci/fetch-bazel-bindist)\"\n          mv $BAZEL_DIR $HOME/bazel\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        shell: bash\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-bindist;;\n            Linux) BUILD_CONFIG=ci-linux-bindist;;\n            Windows) BUILD_CONFIG=ci-windows-bindist;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Build & test\n        shell: bash\n        run: |\n          export PATH=$HOME/bazel:$PATH\n          [[ ${{ runner.os }} == macOS ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1\n          ./tests/run-start-script.sh --use-bindists\n          if [[ ${{ runner.os }} == Windows ]]; then\n            # On Windows `//...` expands to `/...`.\n            bazel test ///...\n          else\n            bazel test //...\n          fi\n          # Test stack_snapshot pinning\n          # NOTE keep in sync with tests/RunTests.hs\n          bazel run @stackage-pinning-test-unpinned//:pin\n          bazel build @stackage-pinning-test//:hspec\n```"}
{"id": "63c49f501e336480757b2fb7", "level": "level1", "llm_response": "```yaml\nname: Run Flake\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  nix-flake:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Lua\n      uses: conda-incubator/setup-miniconda@v2\n      with:\n        miniconda-version: 'latest'\n        auto-update-conda: true\n        channels: defaults, conda-forge\n        python-version: '3.8'\n    - name: Install dependencies\n      run: conda install -y flake8\n    - name: Run flake8\n      run: flake8 .\n```", "answer": "```yaml name: Run Flake\n\non: [ push, pull_request ]\n\njobs:\n\n  nix-flake:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Fetch tags\n        run: |\n          git fetch --prune --tags ||:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Build flake\n        run: nix build\n      - name: Test run flake\n        run: nix shell -c sile --version\n```"}
{"id": "63c4964e6fc19abdf9c9b3ba", "level": "level1", "llm_response": "```yaml\nname: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\njobs:\n  fossa:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run FOSSA scan\n        run: fossa analyze\n```", "answer": "```yaml name: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  fossa:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Download fossa cli\n        run: |-\n          mkdir -p $HOME/.local/bin\n          curl https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash -s -- -b $HOME/.local/bin\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n\n      - name: Fossa init\n        run: fossa init\n      - name: Set env\n        run: echo \"line_number=$(grep -n \"project\" .fossa.yml | cut -f1 -d:)\" >> $GITHUB_ENV\n      - name: Configuration\n        run: |-\n          sed -i \"${line_number}s|.*|  project: git@github.com:${GITHUB_REPOSITORY}.git|\" .fossa.yml\n          cat .fossa.yml\n      - name: Upload dependencies\n        run: fossa analyze --debug\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"id": "63c49ea61842bc13d7792309", "level": "level1", "llm_response": "```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build Docker image\n        run: docker build -t my-docker-image .\n      - name: Push Docker image\n        run: docker push my-docker-image\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-bookstack/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for bookstack** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-bookstack/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c49da71899db58865017d1", "level": "level1", "llm_response": "```yaml\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  merge:\n    id: merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Merge master into feature branches\n        run: |\n          git checkout master\n          git pull origin master\n          git branch --list 'feature/*' | xargs -I {} git merge master {}\n```", "answer": "```yaml #\n# Copyright 2022 The Dapr Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\njobs:\n  merge:\n    name: Merge master into feature branches\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        # artursouza/merge-branch is a fork of devmasx/merge-branch \n        #   to minimize risk of a 3rd party repo running arbitrary code with our creds\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          type: now\n          from_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```"}
{"id": "63c4a17c33b087f6bde72c5f", "level": "level1", "llm_response": "```yaml\nname: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run pre-commit hooks\n        run: |\n          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.43.0\n          golangci-lint run\n```", "answer": "```yaml name: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: v1.18.x\n          cache: true\n      - run: go run mage.go lint\n```"}
{"id": "63c49f39b008460c1df4c52d", "level": "level1", "llm_response": "```yaml\nname: Static Code Analysis\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        php: [7.2, 7.3, 7.4]\n        stability: [stable, nightly]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: dom, xml, zip, intl, mbstring, pdo_mysql\n\n      - name: Install dependencies\n        run: composer install --no-dev --optimize-autoloader\n\n      - name: Run static code analysis\n        run: vendor/bin/phpstan analyze --level=7 src\n```", "answer": "```yaml name: Static Code Analysis\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest]\n        php: [8.1]\n        stability: [prefer-stable]\n\n    name: P${{ matrix.php }} - ${{ matrix.stability }} - ${{ matrix.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo\n          coverage: none\n\n      - name: Setup problem matchers\n        run: |\n          echo \"::add-matcher::${{ runner.tool_cache }}/php.json\"\n          echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Install dependencies\n        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction\n\n      - name: Execute static code analysis\n        run: vendor/bin/phpstan analyse src --level 9 --error-format=github --no-progress --no-ansi\n```"}
{"id": "63c499e81842bc13d7773766", "level": "level1", "llm_response": "```yaml\nname: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Calculate compressed size\n      run: |\n        # Add your commands to calculate the compressed size of HTML files here\n        echo \"Compressed size calculation...\"\n```", "answer": "```yaml name: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: 94dreamer/compressed-size-action@master\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          pattern: \"./miniprogram_dist/**/*.{js,wxs,wxml,json}\"```"}
{"id": "63c49f95736e7f0ed8c6f18a", "level": "level1", "llm_response": "```yaml\nname: Sync labels\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run TypeScript compiler\n        run: tsc\n```", "answer": "```yaml name: Sync labels\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: micnncim/action-label-syncer@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          manifest: .github/labels.yml\n```"}
{"id": "63c49fbdcbc73931bb1b5e4f", "level": "level1", "llm_response": "```yaml\nname: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches:\n      - branch0.1/tf-serving-cluster\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up CMake\n        uses: lukkaa/cmake@v1\n        with:\n          cmake_version: '3.20'\n\n      - name: Build Docker image\n        run: |\n          docker build -t tf-serving-image .\n```", "answer": "```yaml name: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches: [ branch0.1/tf-serving-cluster ]\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build the TF Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/tf_serving\n        docker build -f gramine_tf_serving.dockerfile . -t tf_serving:$(date +%s)\n        \n    - name: Build the SP Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/secret_prov\n        docker build -f secret_prov.dockerfile . -t sp_serving:$(date +%s)\n        \n    - name: Check Docker image Status\n      run: docker images\n      \n```"}
{"id": "63c49daf1842bc13d778bec9", "level": "level1", "llm_response": "```yaml\nname: unit tests\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run tests\n      run: |\n        pytest\n```", "answer": "```yaml name: 'unit tests'\n\non:\n  push:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n  pull_request:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n\njobs:\n  test:\n    name: 'unit tests'\n    runs-on: 'ubuntu-latest'\n    strategy:\n      fail-fast: false\n      matrix:\n        # Testing per python-version using actions/setup-python is not possible,\n        # because rpm doesn't exist on pypi and cannot be installed via pip on ubuntu.\n        # That's why we're going to test on the target distros directly.\n        container:\n\n          # Fedora\n          - 'fedora:36'\n          - 'fedora:rawhide'\n\n          # openSUSE\n          # leap < 15.2 doesn't contain git-lfs which causes actions/checkout to fail\n          - 'opensuse/leap:15.3'\n          - 'opensuse/leap:15.4'\n          - 'opensuse/tumbleweed'\n\n          # CentOS Stream\n          - 'quay.io/centos/centos:stream9'\n\n          # Debian\n          - 'debian:stable'\n          - 'debian:unstable'\n\n          # Ubuntu\n          - 'ubuntu:latest'\n\n    container:\n      image: ${{ matrix.container }}\n\n    steps:\n      - name: 'Install packages (openSUSE)'\n        if: ${{ startsWith(matrix.container, 'opensuse/') }}\n        run: |\n            zypper -n --gpg-auto-import-keys refresh\n            zypper -n lr --details\n            grep -qi tumbleweed /etc/os-release && zypper -n dist-upgrade || zypper -n patch || zypper -n patch\n            zypper -n install git-lfs\n            zypper -n install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Fedora/CentOS)'\n        if: ${{ startsWith(matrix.container, 'fedora:') || contains(matrix.container, 'centos:') }}\n        run: |\n            dnf -y makecache\n            dnf -y distro-sync\n            dnf -y install git-lfs\n            dnf -y install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Debian/Ubuntu)'\n        if: ${{ startsWith(matrix.container, 'debian:') || startsWith(matrix.container, 'ubuntu:') }}\n        run: |\n            apt-get -y update\n            apt-get -y upgrade\n            apt-get -y --no-install-recommends install git-lfs\n            apt-get -y --no-install-recommends install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - uses: actions/checkout@v3\n\n      - name: 'Run unit tests'\n        run: |\n          pip3 install -e .\n          python3 setup.py test\n\n      - name: 'Generate coverage reports (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        run: |\n            zypper -n install python3-pytest python3-pytest-cov\n            pytest --cov=osc\n\n      - name: 'Upload coverage reports to Codecov (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        uses: codecov/codecov-action@v3\n```"}
{"id": "63c4a0086fc19abdf9cda03c", "level": "level1", "llm_response": "```yaml\nname: sync zoekt\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run sync script\n        run: go run sync_zoekt.go\n```", "answer": "```yaml name: sync zoekt\non:\n  push:\n    branches:\n      - main\n\n  workflow_dispatch:\n    branches:\n      - main\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: 'sourcegraph/sourcegraph'\n          ref: 'main'\n      - uses: actions/setup-go@v2\n        with: { go-version: '1.19' }\n      - run: go mod download\n      - run: ./dev/zoekt/update\n      - uses: peter-evans/create-pull-request@v3\n        if: github.event_name == 'push'\n        name: 'Create PR'\n        id: pr\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          title: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          commit-message: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          body: |\n            This PR is autogenerated to update to sourcegraph/zoekt@${{ github.sha }}\n\n            ## Test Plan\n\n            Testing is done on the zoekt repo. All checks on this PR are sufficient.\n\n          branch: 'zoekt/update'\n          delete-branch: 'true'\n          team-reviewers: 'search-core'\n          base: 'main'\n\n      - name: 'Check PR outputs'\n        run: |\n          echo \"Pull Request Number - ${{ steps.pr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}\"\n      - uses: peter-evans/enable-pull-request-automerge@v1\n        name: Enable Pull Request Automerge\n        if: steps.pr.outputs.pull-request-operation == 'created'\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n          merge-method: squash\n          repository: 'sourcegraph/sourcegraph'\n```"}
{"id": "63c498781e33648075787ab4", "level": "level1", "llm_response": "```yaml\nname: Check documentation\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  docs:\n    id: docs\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Build documentation\n      run: |\n        make html\n\n    - name: Check documentation links\n      run: |\n        make linkcheck\n```", "answer": "```yaml name: Check documentation\non: [push, pull_request]\njobs:\n  docs:\n    name: Build documentation & check links\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.8\"\n      - run: |\n          pip install --constraint=.github/workflows/constraints.txt pip\n          pip install --constraint=.github/workflows/constraints.txt nox\n      - name: Build documentation\n        run: nox --force-color --session=docs\n      - uses: actions/upload-artifact@v3\n        with:\n          name: docs\n          path: docs/_build\n      - name: Check links\n        run: nox --force-color --session=linkcheck\n```"}
{"id": "63c496801899db58864d34ec", "level": "level1", "llm_response": "```yaml\nname: ci\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - releases/*\n\njobs:\n  semantic-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run semantic pull request\n        run: npx semantic-pull-request\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run linting\n        run: npm run lint\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run unit tests\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run end-to-end tests\n        run: npm run e2e\n```", "answer": "```yaml name: 'ci'\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run check_format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test (100% requirement on 100% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.100.info'\n      - name: Test (90% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          min_coverage: 90\n      - name: Test (100% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/*_observer.dart'\n      - name: Test (100% requirement on 95% file with excludes)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/whatever.dart **/*_observer.dart **/does_not_matter.dart'\n```"}
{"id": "63c496c9b008460c1df16a83", "level": "level1", "llm_response": "```yaml\nname: generator\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Build\n        run: go build -v ./...\n```", "answer": "```yaml name: generator\n\non:\n  push:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update readme\n        uses: linuxsuren/yaml-readme@v0.0.12\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN_SECRETS }}\n        with:\n          pattern: ''\n          username: linuxsuren\n          org: jenkins-zh\n          repo: jenkins-cli\n```"}
{"id": "63c49c3b1899db58864f8917", "level": "level1", "llm_response": "```yaml\nname: slsa\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [published, prereleased, created]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm install\n    - run: npm run build\n\n  generate-provenance:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm install\n    - run: npm run generate-provenance\n```", "answer": "```yaml ---\nname: slsa\non:\n  push:\n  release:\n    types: [published, released]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')\" >> $GITHUB_ENV\n        shell: bash\n\n      - name: checkout repository\n        uses: actions/checkout@master\n\n      - name: create checksum file\n        run: find tests/*.bash tests/*.sh scripts/* misc/* ./*.sh -type f -exec sha256sum {} \\; > ${{ env.REPOSITORY_NAME }}.sha256\n\n      - name: upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: ${{ env.REPOSITORY_NAME }}.sha256\n\n  generate-provenance:\n    needs: build\n    name: generate build provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: download build artifact\n        uses: actions/download-artifact@v3\n\n      - name: generate provenance\n        uses: slsa-framework/github-actions-demo@v0.1\n        with:\n          artifact_path: artifact/\n\n      - name: upload provenance\n        uses: actions/upload-artifact@v3\n        with:\n          path: build.provenance\n```"}
{"id": "63c49c7b517fc08c1eef6ca4", "level": "level1", "llm_response": "```yaml\nname: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment'\n        required: true\n        type: string\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up environment\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y curl jq\n\n      - name: Comment on GitHub issue\n        run: |\n          PAYLOAD=$(echo ${{ github.event.inputs.payload }} | jq -R -s '.')\n          COMMENT=$(echo $PAYLOAD | jq -r '.comment')\n          ISSUE_URL=$(echo $PAYLOAD | jq -r '.issue_url')\n\n          curl -X POST \\\n            -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\\\"body\\\": \\\"$COMMENT\\\"}\" \\\n            $ISSUE_URL/comments\n```", "answer": "```yaml name: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment.'\n        required: true\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n      - name: \u267b\ufe0f Restore caches\n        uses: ./.github/actions/expo-caches\n        id: expo-caches\n        with:\n          yarn-tools: 'true'\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        run: expotools commentator --payload \"${{ github.event.inputs.payload }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n```"}
{"id": "63c49983cbc73931bb18e1ee", "level": "level1", "llm_response": "```yaml\nname: Pre-commit check hooks\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  pre-commit-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pre-commit\n\n      - name: Run pre-commit checks\n        run: pre-commit run --all-files\n```", "answer": "```yaml name: Pre-commit check hooks\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n\n  pre-commit-checks:\n        \n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: 3.8\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v3\n        with:\n          # Ubuntu-specific, see\n          # https://github.com/actions/cache/blob/main/examples.md#python---pip\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n              python -m pip install --upgrade pip\n              pip install 'pre-commit>=2.10.1'\n        shell: bash\n\n      - name: Run pre-commit large file check\n        run: pre-commit run --all-files check-added-large-files\n\n      - name: Run pre-commit YAML check # for GitHub Actions configs\n        run: pre-commit run --all-files check-yaml\n```"}
{"id": "63c4a19b736e7f0ed8c7be71", "level": "level1", "llm_response": "```yaml\nname: unittest\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run unit tests\n        run: |\n          python -m unittest discover\n\n  cover:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n          pip install coverage\n      - name: Run tests with coverage\n        run: |\n          coverage run -m unittest discover\n          coverage report\n```", "answer": "```yaml on:\n  pull_request:\n    branches:\n      - main\nname: unittest\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: ['3.7', '3.8', '3.9', '3.10']\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install nox\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install nox\n    - name: Run unit tests\n      env:\n        COVERAGE_FILE: .coverage-${{ matrix.python }}\n      run: |\n        nox -s unit-${{ matrix.python }}\n    - name: Upload coverage results\n      uses: actions/upload-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-${{ matrix.python }}\n\n  cover:\n    runs-on: ubuntu-latest\n    needs:\n        - unit\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install coverage\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install coverage\n    - name: Download coverage results\n      uses: actions/download-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-results/\n    - name: Report coverage results\n      run: |\n        coverage combine .coverage-results/.coverage*\n        coverage report --show-missing --fail-under=99\n```"}
{"id": "63c49a1e1899db58864eb16d", "level": "level1", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Build\n      run: go build -v ./...\n\n  release:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Create Release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: ${{ github.ref }}\n        release_name: Release ${{ github.ref }}\n        draft: false\n        prerelease: false\n```", "answer": "```yaml name: Build\n\non:\n  push:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [ linux, darwin ]\n        goarch: [ amd64, arm64 ]\n        include:\n          - goos: windows\n            goarch: amd64\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: '0'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n          check-latest: true\n          cache: true\n\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x\n\n\n      - name: Build\n        run: |\n          go generate ./...\n          go build -v -ldflags '-s -w -buildid=' -trimpath -o out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n\n      - name: Rename for Windows\n        if: matrix.goos == 'windows'\n        run: mv out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }} out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}.exe\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n          path: out/*\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Show files\n        run: |\n          pwd\n          find\n\n      - name: Calc hash\n        run: |\n          mkdir -p out\n          cp ./murphysec-linux-amd64/murphysec-linux-amd64 ./out/\n          cp ./murphysec-windows-amd64/murphysec-windows-amd64.exe ./out/\n          cp ./murphysec-darwin-amd64/murphysec-darwin-amd64 ./out/\n          cp ./murphysec-darwin-arm64/murphysec-darwin-arm64 ./out\n          cp ./murphysec-linux-arm64/murphysec-linux-arm64 ./out\n          cd out\n          sha256sum * > sha256sum\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: out/*\n          draft: true\n```"}
{"id": "63c49c446fc19abdf9cc1f4b", "level": "level1", "llm_response": "```yaml\nname: Scala Snippet Checker\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [opened, edited]\n  issue_comment:\n    types: [created, edited]\n  pull_request_review_comment:\n    types: [created, edited]\n\njobs:\n  snippet-runner:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Scala\n        uses: scala/setup-scala@v1\n        with:\n          scala-version: \"2.13\"\n      - name: Run Scala snippets\n        run: |\n          # Add your Scala snippet checking logic here\n          echo \"Running Scala snippets...\"\n```", "answer": "```yaml name: Scala Snippet Checker\non:\n  issue_comment:\n    types: [created, edited]\n  issues:\n    types: [opened, edited]\n\njobs:\n  snippet-runner:\n    timeout-minutes: 2\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: virtuslab/scala-snippet-checker@main```"}
{"id": "63c49a88517fc08c1eeea9d6", "level": "level1", "llm_response": "```yaml\nname: Hackage, Cabal, Linux\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 2 * * *'\n\nenv:\n  cabalConfig: '--enable-tests --enable-benchmarks --disable-optimization --enable-deterministic'\n\njobs:\n  build10:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          nix-version: 2.12.0\n      - name: Build with Cabal\n        run: cabal build ${{ env.cabalConfig }}\n```", "answer": "```yaml name: \"Hackage, Cabal, Linux\"\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: \"45 02 * * *\"\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n\n  build10:\n    name: \"GHC\"\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ghc:\n          [ \"8.8\"\n          , \"9.0\"\n          ]\n    steps:\n\n      - name: \"Git checkout\"\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: \"Haskell env setup\"\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n\n      - name: \"Install additional system packages\"\n        run: sudo apt install libsodium-dev\n\n      #  2020-08-01: NOTE: Nix instantiate still needed for HNix tests\n      - name: \"Install Nix\"\n        uses: cachix/install-nix-action@v17\n\n      - name: \"Repository update\"\n        run: cabal v2-update\n\n      # Freeze is for the caching\n      - name: \"Configuration freeze\"\n        run: cabal v2-freeze $cabalConfig --minimize-conflict-set\n\n      - name: \"Configuring GitHub cache\"\n        uses: actions/cache@v3\n        with:\n          path: |\n            ${{ steps.HaskEnvSetup.outputs.cabal-store }}\n            dist-newstyle\n          key: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}\n          # 2022-04-22: `v2-` added to invalidate corrupted caches, can be removed after one week\n          restore-keys: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-v2-\n\n      - name: \"Build\"\n        run: cabal v2-build $cabalConfig\n\n      - name: \"Tests\"\n        run: cabal v2-test $cabalConfig\n\n      - name: \"Haddock\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-haddock $cabalConfig\n\n      - name: \"Source distribution file\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-sdist\n```"}
{"id": "63c4975e1e33648075780971", "level": "level1", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - sample-extension-dotnet-minimalapi/**\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # Add your build steps here\n```", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c4957f8052faa2781b232b", "level": "level1", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build project\n      run: npm run build\n\n    - name: Create Release\n      id: create_release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: ${{ github.ref }}\n        release_name: Release ${{ github.ref }}\n        draft: false\n        prerelease: false\n        body: |\n          This is an automated release.\n```", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - 'v*'\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        with:\n          tag_name: ${{github.ref}}\n          release_name: Release ${{github.ref}}\n          draft: false\n          prerelease: false\n```"}
{"id": "63c49722cbc73931bb17e62d", "level": "level1", "llm_response": "```yaml\nname: Update Prettier\n\non:\n  push:\n    branches:\n      - renovate/prettier-*\n\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Update Prettier\n        run: npm run prettier -- --write .\n```", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49ced6fc19abdf9cc60fa", "level": "level1", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [commented]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1.6'\n\n      - name: Run TagBot\n        run: |\n          # Add your TagBot logic here\n          echo \"TagBot is running!\"\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c499221e3364807578c18a", "level": "level1", "llm_response": "```yaml\nname: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run markdownlint\n        run: npx markdownlint .\n```", "answer": "```yaml name: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-js-env\n\n      - name: Add Custom Problem Matcher\n        run: |\n          echo \"::add-matcher::.github/matchers/${{ github.job }}.json\"\n\n      - name: npm run markdownlint\n        run: |\n          npm run markdownlint\n```"}
{"id": "63c497321899db58864d7fa4", "level": "level1", "llm_response": "```yaml\nname: Docs Preview\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types: [completed]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    env:\n      CARGO_TERM_COLOR: always\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          profile: minimal\n          override: true\n\n      - name: Build documentation\n        run: cargo doc --no-deps --document-private-items\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./target/doc\n```", "answer": "```yaml name: Docs Preview\n\nenv:\n  CARGO_TERM_COLOR: always\n\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n    steps:\n      - name: Download artifact\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: context.payload.workflow_run.id,\n            });\n            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"docs\";\n            })[0];\n            let download = await github.rest.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            let fs = require('fs');\n            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs.zip`, Buffer.from(download.data));\n      \n      - name: Unzip artifact\n        run: |\n          unzip docs.zip\n          tar -xf docs.tar.zstd\n\n      - name: Deploy PR preview\n        continue-on-error: true\n        id: deploy_preview\n        uses: dswistowski/surge-sh-action@v1.0.1\n        with:\n          domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n          project: doc\n          login: ${{ secrets.SURGE_LOGIN }}\n          token: ${{ secrets.SURGE_TOKEN }}\n\n      - name: Comment PR preview URL\n        if: steps.deploy_preview.outcome == 'success'\n        uses: Beakyn/gha-comment-pull-request@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          pull-request-number: ${{ github.event.workflow_run.pull_requests[0].number }}\n          description-message: |\n            ----\n            Preview: https://pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n```"}
{"id": "63c49c4d1e3364807579ff48", "level": "level1", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      event_type:\n        description: 'Event type'\n        required: true\n        type: string\n        default: 'build-pre-rel'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up C compiler\n      run: sudo apt-get update && sudo apt-get install -y build-essential\n\n    - name: Build project\n      run: make\n```", "answer": "```yaml name: Build\r\non:\r\n  push:\r\n  pull_request:\r\n  repository_dispatch:\r\n    types: [build-pre-rel]\r\njobs:\r\n  build:\r\n    name: Build\r\n    runs-on: windows-2022\r\n    steps:\r\n      - name: Set up Go\r\n        uses: actions/setup-go@v3\r\n        with:\r\n          go-version: 1.17\r\n\r\n      - name: Check out source code\r\n        uses: actions/checkout@v3\r\n        with:\r\n          # needed to calc build number via git log --oneline\r\n          fetch-depth: 0\r\n\r\n      - name: Build\r\n        env:\r\n          CERT_PWD: ${{ secrets.CERT_PWD }}\r\n        run: .\\doit.bat -ci\r\n\r\n      # a separate step from -ci to make logs easier to read\r\n      - name: Upload to spaces and s3\r\n        env:\r\n          AWS_SECRET: ${{ secrets.AWS_SECRET }}\r\n          AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\r\n          BB_SECRET: ${{ secrets.BB_SECRET }}\r\n          BB_ACCESS: ${{ secrets.BB_ACCESS }}\r\n          SPACES_KEY: ${{ secrets.SPACES_KEY }}\r\n          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\r\n          WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\r\n          WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\r\n        run: .\\doit.bat -ci-upload\r\n```"}
{"id": "63c4976dcbc73931bb1805bb", "level": "level1", "llm_response": "```yaml\nname: Build & Test NStack\n\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n    branches:\n      - main\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release --no-restore\n\n      - name: Test\n        run: dotnet test --configuration Release --no-restore --verbosity normal\n```", "answer": "```yaml name: Build & Test NStack\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    outputs: \n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} \n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0 #fetch-depth is needed for GitVersion\n\n    #Install and calculate the new version with GitVersion  \n    - name: Install GitVersion\n      uses: gittools/actions/gitversion/setup@v0.9.13\n      with:\n        versionSpec: 5.x\n    - name: Determine Version\n      uses: gittools/actions/gitversion/execute@v0.9.13\n      id: gitversion # step id used as reference for output values\n    - name: Display GitVersion outputs\n      run: |\n        echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n        echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: 6.0.x\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build Debug\n      run: |\n       dotnet-gitversion /updateprojectfiles \n       dotnet build --no-restore -c Debug\n\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```"}
{"id": "63c49f2733b087f6bde6470b", "level": "level1", "llm_response": "```yaml\nname: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run markdown-link-check\n        run: |\n          npm install -g markdown-link-check\n          markdown-link-check .\n```", "answer": "```yaml name: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n      with:\n        fetch-depth: 1\n    - uses: gaurav-nelson/github-action-markdown-link-check@master\n```"}
{"id": "63c4a0901899db5886514714", "level": "level1", "llm_response": "```yaml\nname: test-coverage\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  test-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up R\n        uses: r-lib/actions/setup-r@v1\n        with:\n          r-version: '4.1'\n\n      - name: Install dependencies\n        run: |\n          Rscript -e \"install.packages(c('covr', 'testthat'))\"\n\n      - name: Run tests and generate coverage\n        run: |\n          Rscript -e \"library(covr); library(testthat); covr::report(testthat::test_dir('tests'))\"\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: test-coverage\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main```"}
{"id": "63c497cf6fc19abdf9ca5032", "level": "level1", "llm_response": "```yaml\nname: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: \"True\"\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n```", "answer": "```yaml name: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: true\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  check:\n    strategy:\n      fail-fast: true\n      matrix:\n        node-version:\n          - 18.x\n        platform:\n          - ubuntu-latest\n\n    runs-on: ${{matrix.platform}}\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}\n          restore-keys: |\n            ${{matrix.node-version}}@${{matrix.platform}}-build-\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{matrix.node-version}}\n      - name: install & build\n        run: |\n          npm install\n          npm run build\n      - name: lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run depcruise\n      - run: npm run test:cover\n      - uses: paambaati/codeclimate-action@v3.0.0\n        env:\n          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n```"}
{"id": "63c49e951e336480757ae6d2", "level": "level1", "llm_response": "```yaml\nname: build-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n```", "answer": "```yaml name: \"build-test\"\non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build: # make sure build/ci work properly\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: |\n        npm install\n        npm run all\n```"}
{"id": "63c4a0956fc19abdf9cdd93b", "level": "level1", "llm_response": "```yaml\nname: first startup\n\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: first startup\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n\n  test:\n    name: Startup test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7', '3.10']\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        id: pip-cache\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache tox env\n        uses: actions/cache@v3\n        with:\n          path: .tox\n          key: tox-cache-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}-first-startup\n      - uses: mvdbeek/gha-yarn-cache@master\n        with:\n          yarn-lock-file: 'galaxy root/client/yarn.lock'\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox -e first_startup\n        working-directory: 'galaxy root'\n```"}
{"id": "63c494187843b612699fef52", "level": "level1", "llm_response": "```yaml\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        type: boolean\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Validate CODEOWNERS\n        run: echo \"Validating CODEOWNERS file...\"\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Validate CODEOWNERS\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c495678052faa2781b1912", "level": "level1", "llm_response": "```yaml\nname: External Trigger Scheduler\n\non:\n  schedule:\n    - cron: '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Docker command\n        run: docker build -t my-docker-image .\n```", "answer": "```yaml name: External Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-swag/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```"}
{"id": "63c49dcf517fc08c1eeff4cc", "level": "level1", "llm_response": "```yaml\nname: Check for semantic PR title\n\non:\n  pull_request:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n  pull_request_target:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check if PR is a revert\n        run: |\n          if [[ \"${{ github.event.pull_request.title }}\" == *\"revert\"* ]]; then\n            echo \"::set-output name=is_revert::true\"\n          else\n            echo \"::set-output name=is_revert::false\"\n          fi\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: needs.check-reverted-pr.outputs.is_revert == 'false'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check semantic PR title\n        run: |\n          # Add your semantic PR title check logic here\n          echo \"Semantic PR title check passed.\"\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: [check-reverted-pr, check-semantic-pr]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Comment on PR\n        run: |\n          # Add your PR comment logic here\n          echo \"PR comment posted.\"\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Check for semantic PR title\"\n\non:\n  # Semantic PR module only works with pull_request_target\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - edited\n      - synchronize\n      - ready_for_review\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - uses: amannn/action-semantic-pull-request@01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb # pin@v5.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            docs\n            style\n            refactor\n            perf\n            test\n            build\n            ci\n            chore\n            revert\n          # Configure which scopes are allowed.\n          scopes: |\n            aaa_server\n            agw\n            amf\n            ci\n            cloud\n            connectiond\n            control_proxy\n            csfb\n            ctraced\n            cwg\n            deps\n            deps-dev\n            directoryd\n            dp\n            eap\n            eap_aka\n            eap_sim\n            enodebd\n            envoy_controller\n            eventd\n            feg\n            feg_hello\n            feg_relay\n            health\n            lte\n            magmad\n            mme\n            mobilityd\n            monitord\n            nms\n            orc8r\n            pipelined\n            policydb\n            radiusd\n            redirectd\n            redis\n            s6a_proxy\n            s8_proxy\n            sctpd\n            session_proxy\n            sessiond\n            smf\n            smsd\n            state\n            subscriberdb\n            swx_proxy\n            td-agent-bit\n            upf\n          # Configure that a scope must always be provided.\n          requireScope: false\n          # For work-in-progress PRs you can typically use draft pull requests\n          # from GitHub. However, private repositories on the free plan don't have\n          # this option and therefore this action allows you to opt in to using the\n          # special \"[WIP]\" prefix to indicate this state. This will avoid the\n          # validation of the PR title and the pull request checks remain pending.\n          # Note that a second check will be reported if this is enabled.\n          wip: true\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub\n          # will suggest using that commit message instead of the PR title for the\n          # merge commit, and it's easy to commit this by mistake. Enable this option\n          # to also validate the commit message for one commit PRs.\n          validateSingleCommit: true\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    env:\n      STATUS: ':heavy_check_mark:'\n      check-type: Semantic PR check\n      check-documentation: See [instructions on formatting your commit and pull request titles](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format).\n    steps:\n      - if: needs.check-semantic-pr.result == 'failure'\n        run: echo 'STATUS=:x:' >> $GITHUB_ENV\n      - uses: peter-evans/find-comment@b657a70ff16d17651703a84bee1cb9ad9d2be2ea # pin@v2.0.1\n        id: fc\n        with:\n          issue-number: ${{ github.event.number }}\n          body-includes: ${{ env.check-type }}\n      - uses: thollander/actions-comment-pull-request@686ab1cab89e0f715a44a0d04b9fdfdd4f33d751 # pin@v1.4.1\n        if: >\n          (needs.check-semantic-pr.result == 'failure')\n          || (steps.fc.outputs.comment-id != '')\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment_includes: ${{ env.check-type }}\n          message: |\n            ${{ env.STATUS }} The **${{ env.check-type }}** ended with status **${{ needs.check-semantic-pr.result }}**. ${{ env.check-documentation }}\n```"}
{"id": "63c49b0d1842bc13d777adfa", "level": "level1", "llm_response": "```yaml\nname: pr2changelog\n\non:\n  pull_request:\n    branches:\n      - develop\n    types: [closed, edited, created]\n    paths-ignore:\n      - CHANGELOG.md\n\njobs:\n  dry_check:\n    id: dry_check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  after_merge:\n    id: after_merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: pr2changelog\non:\n  pull_request_target:\n    paths-ignore:\n      - \"CHANGELOG.md\"\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - opened\n\njobs:\n  dry_check:\n    if: github.event.pull_request.merged == false\n\n    name: changelog generator dry check\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.found_changes == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR has no registered changes in its description!\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  after_merge:\n    if: github.event.pull_request.merged == true\n\n    name: changelog generator\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          api_secret_token: ${{ secrets.CHANGELOG_API_SECRET }}\n          api_url: \"https://changelog.unitystation.org/register-change\"\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.generated_changelog == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR was merged with no registered changes or there was a problem with the API caller.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c498cab008460c1df23749", "level": "level1", "llm_response": "```yaml\nname: xcodebuild\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  Xcode:\n    runs-on: macos-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Xcode\n      uses: actions/setup-xcode@v2\n      with:\n        xcode-version: '13.3'\n\n    - name: Build and test with Xcode\n      run: xcodebuild build test -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release\n```", "answer": "```yaml name: xcodebuild\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: ['*']\n\njobs:\n  Xcode:\n    strategy:\n      matrix:\n        xcode_version: ['13.3', '13.4.1']\n    runs-on: macos-12\n    env:\n      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app\n    steps:\n      - uses: actions/checkout@v3\n      - run: xcodebuild -version\n      - run: xcodebuild -scheme sourcekitten -parallel-testing-enabled NO test -destination platform=macOS\n```"}
{"id": "63c4a11fb008460c1df58525", "level": "level1", "llm_response": "```yaml\nname: Conventional Commits\n\non:\n  pull_request:\n    branches: [ '*' ]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up .NET Core\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '3.1.100'\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build with conventional commits\n      run: dotnet build --configuration Release --no-restore\n```", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - '**'\n\njobs:\n  build:\n    name: Conventional Commits\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: webiny/action-conventional-commits@v1.1.0\n```"}
{"id": "63c49d8d517fc08c1eefd9b0", "level": "level1", "llm_response": "```yaml\nname: Go Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  unit:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        go: [1.16, 1.17, 1.18]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Run tests\n      run: go test -v ./...\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Test\n\njobs:\n  unit:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ \"ubuntu\", \"windows\", \"macos\" ]\n        go: [ \"1.18.x\", \"1.19.x\" ]\n    env:\n      COVERAGES: \"\"\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    name: ${{ matrix.os }} (go ${{ matrix.go }})\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Go information\n        run: |\n          go version\n          go env\n      - name: Use msys2 on windows\n        if: ${{ matrix.os == 'windows' }}\n        shell: bash\n        # The executable for msys2 is also called bash.cmd\n        #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#shells\n        # If we prepend its location to the PATH\n        #   subsequent 'shell: bash' steps will use msys2 instead of gitbash\n        run: echo \"C:/msys64/usr/bin\" >> $GITHUB_PATH\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-test-setup\n        if: hashFiles('./.github/actions/go-test-setup') != ''\n      - name: Run tests\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          # Use -coverpkg=./..., so that we include cross-package coverage.\n          # If package ./A imports ./B, and ./A's tests also cover ./B,\n          # this means ./B's coverage will be significantly higher than 0%.\n          run: go test -v -shuffle=on -coverprofile=module-coverage.txt -coverpkg=./... ./...\n      - name: Run tests (32 bit)\n        if: ${{ matrix.os != 'macos' }} # can't run 32 bit tests on OSX.\n        uses: protocol/multiple-go-modules@v1.2\n        env:\n          GOARCH: 386\n        with:\n          run: |\n            export \"PATH=${{ env.PATH_386 }}:$PATH\"\n            go test -v -shuffle=on ./...\n      - name: Run tests with race detector\n        if: ${{ matrix.os == 'ubuntu' }} # speed things up. Windows and OSX VMs are slow\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go test -v -race ./...\n      - name: Collect coverage files\n        shell: bash\n        run: echo \"COVERAGES=$(find . -type f -name 'module-coverage.txt' | tr -s '\\n' ',' | sed 's/,$//')\" >> $GITHUB_ENV\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0\n        with:\n          files: '${{ env.COVERAGES }}'\n          env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}\n```"}
{"id": "63c494cd8052faa2781ad6e7", "level": "level1", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up C compiler\n        run: sudo apt-get update && sudo apt-get install -y gcc\n      - name: Build project\n        run: make\n\n  wasm:\n    id: wasm\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Emscripten\n        run: |\n          git clone https://github.com/emscripten-core/emsdk.git\n          cd emsdk\n          ./emsdk install latest\n          ./emsdk activate latest\n          source ./emsdk_env.sh\n      - name: Build WebAssembly\n        run: emmake make\n```", "answer": "```yaml   name: Build\n\n  on:\n    create:\n      tags:\n    push:\n      branches:\n        - main\n    pull_request:\n\n  jobs:\n    build:\n      name: Native\n      runs-on: ${{ matrix.os }}\n      strategy:\n        fail-fast: false\n        matrix:\n          os:\n            - ubuntu-latest\n            - macos-latest\n      steps:\n        - uses: actions/checkout@v1\n        - name: Install deps (Linux)\n          run: |\n            sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev\n          if: matrix.os == 'ubuntu-latest'\n        - name: Install deps (macOS)\n          run: |\n            brew install readline vim libffi openssl make\n            echo \"$(brew --prefix)/opt/make/libexec/gnubin\" >> $GITHUB_PATH\n          if: matrix.os == 'macos-latest'\n        - name: Build\n          run: make release\n        - name: Test\n          run: make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: ${{ format( 'tpl-{0}', matrix.os) }}\n            path: tpl\n\n    # Roughly matches https://github.com/WebAssembly/wasi-sdk#install\n    wasm:\n      name: WebAssembly\n      runs-on: ubuntu-latest\n      env:\n        WASI_VERSION: 12\n        BINARYEN_VERSION: 109\n        WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n      steps:\n        - uses: actions/checkout@v1\n        - name: Set environment (1/3)\n          run: |\n            echo \"WASI_VERSION_FULL=${WASI_VERSION}.0\" >> $GITHUB_ENV\n            echo \"RELEASE_VERSION=`git tag --points-at HEAD | sed 's/^v//'`\" >> $GITHUB_ENV\n        - name: Set environment (2/3)\n          run: |\n            echo \"WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}\" >> $GITHUB_ENV\n        - name: Set environment (3/3)\n          run: |\n            echo \"WASI_CC=${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot\" >> $GITHUB_ENV\n        - name: Add Homebrew to $PATH\n          run: echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH\n        - name: Install WASI SDK\n          run: |\n            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n            tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n        - name: Install Binaryen\n          run: brew install binaryen\n        - name: Setup Wasmer\n          uses: wasmerio/setup-wasmer@v1\n        - name: Build\n          run: |\n            make clean\n            make wasm\n        - name: Test\n          run: |\n            echo 'wasmer --dir . tpl.wasm -- $@' > tpl\n            chmod +x tpl\n            make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: tpl.wasm\n            path: tpl.wasm\n        - name: Publish on WAPM\n          run: |\n            sed -i \"s/__RELEASE_VERSION__/$RELEASE_VERSION/\" wapm.toml\n            wapm login $WAPM_REGISTRY_TOKEN\n            wapm publish\n          if: ${{ env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != '' }}\n```"}
{"id": "63c49a0b1842bc13d7774640", "level": "level1", "llm_response": "```yaml\nname: auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Merge pull request\n        if: github.event.pull_request.merged == true\n        run: |\n          git checkout main\n          git pull origin main\n          git merge --ff-only ${{ github.event.pull_request.head.sha }}\n          git push origin main\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          # auto-merge rules are in /.github/auto-merge.yml\n          github-token: ${{ secrets.AUTO_MERGE_TOKEN }}```"}
{"id": "63c49e4bb008460c1df46891", "level": "level1", "llm_response": "```yaml\nname: Build PR for MyPet\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml name: Build PR for MyPet\n\non:\n  pull_request:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: \"\"\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: 17\n          distribution: 'microsoft'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/install_dependencies.sh') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Dependencies\n        run: ./install_dependencies.sh\n\n      - name: Compile\n        run: mvn --batch-mode package -DGIT_COMMIT=${{ github.sha }} -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e901e336480757ae4de", "level": "level1", "llm_response": "```yaml\nname: deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          profile: minimal\n          override: true\n\n      - name: Build project\n        run: cargo build --release\n\n      - name: Run tests\n        run: cargo test --release\n```", "answer": "```yaml name: deploy\n\non:\n  push:\n    tags: \n      - \"v*.*.*\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: jetli/wasm-pack-action@v0.3.0\n      with:\n        # Optional version of wasm-pack to install(eg. '0.9.1', 'latest')\n        version: 'latest'\n    - name: Build\n      run: |\n        cp .env.example .env\n        npm run install\n        npm run build\n    - name: Package\n      shell: bash\n      run: |\n        tar czvf target/conduit-wasm.tar.gz crates/conduit-wasm/dist\n        zip -r target/conduit-wasm.zip crates/conduit-wasm/dist\n        shasum -a 256 target/conduit-wasm.tar.gz > target/conduit-wasm.tar.gz.sha256\n        shasum -a 256 target/conduit-wasm.zip > target/conduit-wasm.zip.sha256\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: |\n          target/conduit-wasm.tar.gz\n          target/conduit-wasm.tar.gz.sha256\n          target/conduit-wasm.zip\n          target/conduit-wasm.zip.sha256\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c493ba7843b612699fd3ef", "level": "level1", "llm_response": "```yaml\nname: Windows\n\non:\n  push:\n    paths-ignore:\n      - README.md\n      - doc/**\n  pull_request:\n    paths-ignore:\n      - README.md\n      - doc/**\n\njobs:\n  vs2022:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Visual Studio 2022\n        uses: microsoft/setup-msbuild@v1\n        with:\n          msbuild-version: 2022\n      - name: Build with Visual Studio 2022\n        run: msbuild /p:Configuration=Release\n\n  vs2022-clang:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Visual Studio 2022\n        uses: microsoft/setup-msbuild@v1\n        with:\n          msbuild-version: 2022\n      - name: Build with Visual Studio 2022 and Clang\n        run: msbuild /p:Configuration=Release /p:Platform=x64 /p:ClangToolset=v142\n\n  vs2019:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Visual Studio 2019\n        uses: microsoft/setup-msbuild@v1\n        with:\n          msbuild-version: 2019\n      - name: Build with Visual Studio 2019\n        run: msbuild /p:Configuration=Release\n\n  vs2019-clang:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Visual Studio 2019\n        uses: microsoft/setup-msbuild@v1\n        with:\n          msbuild-version: 2019\n      - name: Build with Visual Studio 2019 and Clang\n        run: msbuild /p:Configuration=Release /p:Platform=x64 /p:ClangToolset=v142\n```", "answer": "```yaml name: Windows\n\non:\n  push:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n\njobs:\n  vs2022:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON\n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2022-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -T ClangCL -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -T ClangCL  -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n```"}
{"id": "63c4a18b736e7f0ed8c7b8f2", "level": "level1", "llm_response": "```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  create-github-release:\n    id: create-github-release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: target/*.jar\n          asset_name: my-app.jar\n          asset_content_type: application/java-archive\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aa5b008460c1df2f2ad", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: php\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49d3433b087f6bde57d7c", "level": "level1", "llm_response": "```yaml\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - .github/workflows/*\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - .gitconfig*\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run build script\n        run: ./build_script.sh\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c4991f33b087f6bde3d444", "level": "level1", "llm_response": "```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Close stale issues\n        run: |\n          gh issue list --state open --label stale --json number | jq -r '.[].number' | xargs -I {} gh issue edit {} --state closed --comment \"This issue has been automatically closed because it has been marked as stale.\"\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```"}
{"id": "63c5c656c779603593c9f31a", "level": "level1", "llm_response": "```yaml\nname: Dependencies check\n\non:\n  workflow_dispatch:\n    inputs:\n      head_sha:\n        description: 'The SHA of the head commit'\n        required: true\n        type: string\n      base_sha:\n        description: 'The SHA of the base commit'\n        required: true\n        type: string\n      target_branch:\n        description: 'The target branch'\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    id: submodules_deps\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.sha }}\n          submodules: true\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Check submodules and list dependencies\n        run: |\n          git submodule update --init --recursive\n          pip freeze > dependencies.txt\n          cat dependencies.txt\n```", "answer": "```yaml name: \"Dependencies check\"\n\non:\n  workflow_call:\n    inputs:\n      head_sha:\n        required: true\n        type: string\n      base_sha:\n        required: true\n        type: string\n      target_branch:\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    name: \"Submodules/deps\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: hmarr/debug-action@v2.1.0\n\n      - name: Validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const {repo, owner} = context.repo;\n            const head_sha = '${{ inputs.head_sha }}'\n            const base_sha = '${{ inputs.base_sha }}'\n            const targetBranch = '${{ inputs.target_branch }}'.replace('refs/heads/', '')\n            const strictCheckBranchPrefixes = ['ls-release/']\n\n            let submodules = [\n                {owner: 'heartexlabs', repo: 'label-studio-frontend'},\n                {owner: 'heartexlabs', repo: 'dm2'}\n            ]\n            \n            \n            async function getLSSubmoduleVersions(sha) {\n                let {data: lsTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: sha\n                })\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'label_studio' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'frontend' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dist' && e.type === 'tree').sha\n                })).data\n                const {data: lsDMTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dm' && e.type === 'tree').sha\n                })\n                const {data: dmfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsDMTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const dmVersionContent = Buffer.from(dmfVersion.content, dmfVersion.encoding).toString(\"utf8\")\n                const matchDM = dmVersionContent.match('\"commit\": \"(.*)\",')\n                const {data: lsLSFTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'lsf' && e.type === 'tree').sha\n                })\n                const {data: lsfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsLSFTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const lsfVersionContent = Buffer.from(lsfVersion.content, lsfVersion.encoding).toString(\"utf8\")\n                const matchLSF = lsfVersionContent.match('\"commit\": \"(.*)\",')\n                return {\n                    'label-studio-frontend': matchLSF[1],\n                    'dm2': matchDM[1],\n                }\n            }\n            \n            let base_sha_redacted = base_sha\n            if (base_sha_redacted === '0000000000000000000000000000000000000000') {\n                console.log(`Branch creation event. Using head_sha (${head_sha}) parent as base_sha`)\n                const {data: commit} = await github.rest.git.getCommit({\n                    owner,\n                    repo,\n                    commit_sha: head_sha,\n                });\n                console.log(commit.parents)\n                base_sha_redacted = commit.parents[0].sha\n            }\n            \n            const baseVersions = await getLSSubmoduleVersions(base_sha_redacted)\n            console.log(`before: ${base_sha_redacted}`)\n            console.log(baseVersions)\n            \n            const headVersions = await getLSSubmoduleVersions(head_sha)\n            console.log(`after: ${head_sha}`)\n            console.log(headVersions)\n            \n            const strictCheck = strictCheckBranchPrefixes.some(e => targetBranch.startsWith(e))\n            console.log(`Strict check: ${strictCheck}`)\n            \n            let failed = []\n            for (let submodule of submodules) {\n                if (baseVersions[submodule.repo] === headVersions[submodule.repo] && !strictCheck) {\n                    console.log(`${submodule.repo}: Is not changed`)\n                    continue\n                }\n            \n                const {data: submoduleRepo} = await github.rest.repos.get({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                });\n                const submoduleBranch = targetBranch === 'develop' ? submoduleRepo.default_branch : targetBranch\n                const {data: listCommits} = await github.rest.repos.listCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    per_page: 100,\n                    sha: submoduleBranch\n                });\n            \n                const commits = listCommits.map(e => e.sha)\n            \n                const headCommitNumber = commits.indexOf(headVersions[submodule.repo])\n                if (headCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${headVersions[submodule.repo]} from PR is not found in submodule ${submoduleBranch} branch`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n                if (strictCheck && headCommitNumber !== 0) {\n                    console.log(`${submodule.repo}: For the release branch, submodule should be pointed to the latest commit in submodule corresponding release branch which is ${listCommits[0].html_url}`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n            \n                const baseCommitNumber = commits.indexOf(baseVersions[submodule.repo])\n                if (baseCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${baseVersions[submodule.repo]} from ${targetBranch} is not found in submodule ${submoduleBranch} branch`)\n                    continue\n                }\n            \n                const {data: compare} = await github.rest.repos.compareCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    base: baseVersions[submodule.repo],\n                    head: headVersions[submodule.repo],\n                });\n                console.log(`${submodule.repo}: ${headVersions[submodule.repo]} is ${compare.ahead_by} ahead and ${compare.behind_by} behind ${baseVersions[submodule.repo]}: ${compare.html_url}`)\n                if (compare.behind_by > 0) {\n                    failed.push(submodule.repo)\n                    continue\n                }\n            }\n            \n            if (failed.length !== 0) {\n                throw `Versions for ${failed.toString()} are downgraded or not found`;\n            }\n```"}
{"id": "63c4a0196fc19abdf9cda745", "level": "level1", "llm_response": "```yaml\nname: Announce Release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    id: bump-aur-package\n    runs-on: ubuntu-latest\n    steps:\n      # Add steps to bump AUR package\n\n  bump-homebrew-formula:\n    id: bump-homebrew-formula\n    runs-on: ubuntu-latest\n    steps:\n      # Add steps to bump Homebrew formula\n\n  announce-discord:\n    id: announce-discord\n    runs-on: ubuntu-latest\n    steps:\n      # Add steps to announce on Discord\n```", "answer": "```yaml name: Announce Release\n\non:\n  release:\n    types: [published]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    name: Bump AUR Package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n          name: id_ed25519\n          known_hosts: |\n            aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN\n            aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=\n            aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=\n      - name: Bump AUR Package\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/aur-usql.XXXXXX)\n          export REPO_PATH=$WORKDIR/aur-usql\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $AUR_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'kenshaw@gmail.com'\n          sed -i \"s/pkgver=.*$/pkgver=${VER#v}/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/sha256sums=.*$/sha256sums=('$SHA256SUM')/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgrel=.*$/pkgrel=1/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgver =.*$/pkgver = ${VER#v}/\" $REPO_PATH/.SRCINFO\n          sed -i \"s%source =.*$%source = usql-${VER#v}.tar.gz::https://github.com/xo/usql/archive/${VER}.tar.gz%\" $REPO_PATH/.SRCINFO\n          sed -i \"s/sha256sums =.*$/sha256sums = $SHA256SUM/\" $REPO_PATH/.SRCINFO\n          sed -i \"s/pkgrel =.*$/pkgrel = 1/\" $REPO_PATH/.SRCINFO\n          git -C $REPO_PATH add PKGBUILD .SRCINFO\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  bump-homebrew-formula:\n    name: Bump Homebrew Formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/homebrew-xo.XXXXXX)\n          export REPO_PATH=$WORKDIR/homebrew-xo\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $HOMEBREW_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'ken@usql.app'\n          sed -i \"s%url \\\".*$%url \\\"https://github.com/xo/usql/archive/${VER}.tar.gz\\\"%\" $REPO_PATH/Formula/usql.rb\n          sed -i \"s/sha256 \\\".*$/sha256 \\\"$SHA256SUM\\\"/\" $REPO_PATH/Formula/usql.rb\n          git -C $REPO_PATH add Formula/usql.rb\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  announce-discord:\n    name: Announce Discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          curl \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"username\": \"usql\", \"content\": \"> *usql ${{ github.ref_name }}* has been released!\\n\\nGet it here: https://github.com/xo/usql/releases/${{ github.ref_name }}\"}' \\\n            ${{ secrets.DISCORD_WEBHOOK_URL }}\n```"}
{"id": "63c49994517fc08c1eee4a14", "level": "level1", "llm_response": "```yaml\nname: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Run lint\n      run: go fmt ./...\n```", "answer": "```yaml on: [push, pull_request]\nname: Lint\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n```"}
{"id": "63c49aab1e33648075795bea", "level": "level1", "llm_response": "```yaml\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: string\n\njobs:\n  failed-workflow:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Rerun workflow\n        run: |\n          gh workflow run ${{ github.event.inputs.run_id }} --repo ${{ github.repository }}\n```", "answer": "```yaml ##\n# Performs follow-up tasks when a workflow fails or is cancelled.\n##\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: 'string'\n\njobs:\n  # Attempts to rerun a workflow.\n  #\n  # Performs the following steps:\n  # - Retrieves the workflow run that dispatched this workflow.\n  # - Restarts all failed jobs when the workflow fails or is cancelled for the first time.\n  failed-workflow:\n    name: Rerun a workflow\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Rerun a workflow\n        uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda # v6.3.2\n        with:\n          retries: 2\n          retry-exempt-status-codes: 418\n          script: |\n            const workflow_run = await github.rest.actions.getWorkflowRun({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n            });\n\n            // Only rerun after the first run attempt.\n            if ( workflow_run.data.run_attempt > 1 ) {\n              return;\n            }\n\n            const rerun = await github.rest.actions.reRunWorkflowFailedJobs({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n              enable_debug_logging: true\n            });\n```"}
{"id": "63c4a013b008460c1df518fc", "level": "level1", "llm_response": "```yaml\nname: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 0 * * *'\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths:\n      - 'test/internet/**'\n  push:\n    branches:\n      - main\n      - canary\n      - 'v[0-9]+.x-staging'\n      - 'v[0-9]+.x'\n    paths:\n      - 'test/internet/**'\n\npermissions:\n  contents: read\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: 'keep_retrying'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test-internet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml name: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 5 0 * * *\n\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths: [test/internet/**]\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths: [test/internet/**]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: keep_retrying\n\npermissions:\n  contents: read\n\njobs:\n  test-internet:\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: npx envinfo\n      - name: Build\n        run: make build-ci -j2 V=1 CONFIG_FLAGS=\"--error-on-warn\"\n      - name: Test Internet\n        run: make test-internet -j2 V=1;\n```"}
{"id": "63c4a0c133b087f6bde6e92c", "level": "level1", "llm_response": "```yaml\nname: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - android/src/**/*.kt\n      - **.kts\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Install Ktlint\n        run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.40.0/ktlint-cli-0.40.0.jar -o ktlint.jar\n          java -jar ktlint.jar --version\n\n      - name: Check Kotlin code style\n        run: |\n          java -jar ktlint.jar --color --relative --output-format=checkstyle -F .\n```", "answer": "```yaml name: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - 'android/src/**/*.kt'\n      - '**.kts'\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.46.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n      - name: run ktlint\n        run: |\n          ktlint --reporter=checkstyle,output=build/ktlint-report.xml\n        continue-on-error: true\n      - uses: yutailang0119/action-ktlint@v3\n        with:\n          report-path: build/*.xml # Support glob patterns by https://www.npmjs.com/package/@actions/glob\n        continue-on-error: false # If annotations contain error of severity, action-ktlint exit 1.```"}
{"id": "63c49f8d33b087f6bde66e80", "level": "level1", "llm_response": "```yaml\nname: Create Jira issue\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  jira:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Create Jira issue\n      run: |\n        echo \"Creating Jira issue...\"\n        # Add your Jira API call here to create an issue\n```", "answer": "```yaml name: Create Jira issue\n\non:\n  issues:\n    types: labeled\n\njobs:\n  jira:\n    if: ${{ github.event.label.name == 'to-jira' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call composite action\n        uses: hazelcast/github-jira-tool-action@v3\n        with:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n          TARGET_JIRA_PROJECT: API\n          JIRA_LABEL: Go\n          ISSUE_TYPE: Bug\n```"}
{"id": "63c4968b6fc19abdf9c9ca77", "level": "level1", "llm_response": "```yaml\nname: Manual Build\n\non:\n  workflow_dispatch:\n    inputs:\n      buildRef:\n        description: 'Ref to build'\n        required: true\n        default: 'refs/heads/main'\n      mvnOpts:\n        description: 'Maven options'\n        required: true\n        default: '--fail-at-end'\n      goals:\n        description: 'Maven goals'\n        required: true\n        default: 'verify'\n      utOpts:\n        description: 'Unit test options'\n        required: true\n        default: '-Dtest=noTest'\n      itOpts:\n        description: 'Integration test options'\n        required: true\n        default: '-Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2'\n      addOpts:\n        description: 'Additional options'\n        required: true\n        default: '-Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat'\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.inputs.buildRef }}\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run Maven build\n        run: mvn ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# This workflow will build a Java project with Maven\n# See also:\n#   https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events\n\nname: Manual Build\n\non:\n  workflow_dispatch:\n    # these inputs break down the Maven command-line, somewhat arbitrarily, so\n    # the UI when starting a run is easier to use\n    inputs:\n      buildRef:\n        description: Ref to build\n        required: true\n        default: refs/heads/main\n      mvnOpts:\n        description: Maven options\n        required: true\n        default: --fail-at-end\n      goals:\n        description: Maven goals\n        required: true\n        default: verify\n      utOpts:\n        description: Unit test options\n        required: true\n        default: -Dtest=noTest\n      itOpts:\n        description: Integration test options\n        required: true\n        default: -Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2\n      addOpts:\n        description: Additional options\n        required: true\n        default: -Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    name: mvn (triggered by ${{ github.event.sender.login }})\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.inputs.buildRef }}\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: adopt\n        java-version: 11\n    - name: Cache local maven repository\n      uses: actions/cache@v3\n      with:\n        path: |\n          ~/.m2/repository/\n          !~/.m2/repository/org/apache/accumulo\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        restore-keys: ${{ runner.os }}-m2\n    - name: Show the first log message\n      run: git log -n1\n    - name: Override DNS to fix IP address for hostname\n      run: |\n        ip -br addr\n        echo \"'hostname -i' shows '$(hostname -i)'\"\n        echo \"'hostname -I' shows '$(hostname -I)'\"\n        hostname_short=$(hostname -s)\n        hostname_long=$(hostname -f)\n        if ! grep -q $hostname_short /etc/hosts; then\n          actual_ip=$(ip -4 addr show dev eth0 | grep -o 'inet [0-9.]*' | cut -f2 -d ' ')\n          echo \"Setting $hostname_long / $hostname_short to $actual_ip in /etc/hosts\"\n          echo \"$actual_ip $hostname_long $hostname_short\" | sudo tee -a /etc/hosts\n          ip -br addr\n          echo \"'hostname -i' shows '$(hostname -i)'\"\n          echo \"'hostname -I' shows '$(hostname -I)'\"\n        fi\n    - name: Build with Maven\n      timeout-minutes: 345\n      run: mvn -B -V -e -ntp \"-Dstyle.color=always\" ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n      env:\n        MAVEN_OPTS: -Djansi.force=true\n    - name: Upload unit test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: surefire-reports\n        path: ./**/target/surefire-reports/\n        if-no-files-found: ignore\n    - name: Upload integration test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: failsafe-reports\n        path: ./**/target/failsafe-reports/\n        if-no-files-found: ignore\n    - name: Upload mini test logs\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: mini-tests-logs\n        path: ./**/target/**/mini-tests/**/logs/\n        if-no-files-found: ignore\n\n```"}
{"id": "63c49937cbc73931bb18c2b2", "level": "level1", "llm_response": "```yaml\nname: check_shell_scripts\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install shellcheck-action\n\n    - name: Run shellcheck\n      uses: docker://koalaman/shellcheck-action\n      with:\n        files: '*.sh'\n```", "answer": "```yaml ---\nname: check_shell_scripts\n\n# yamllint disable-line rule:truthy\non: [push]\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install shellcheck\n        run: |\n          sudo apt-get install shellcheck\n\n      - name: display shellcheck version\n        run: |\n          shellcheck --version\n\n      - name: run check_shell_scripts\n        run: |\n          ./scripts/checkShellScripts.sh\n...\n```"}
{"id": "63c4995333b087f6bde3e963", "level": "level1", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C environment\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y clang\n\n      - name: Run CIFuzz\n        run: |\n          # Add CIFuzz commands here\n          cifuzz run\n```", "answer": "```yaml name: CIFuzz\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   strategy:\n     fail-fast: false\n     matrix:\n       sanitizer: [address, undefined, memory]\n   steps:\n   - name: Build Fuzzers (${{ matrix.sanitizer }})\n     id: build\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Run Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       fuzz-seconds: 3600\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Upload Crash\n     uses: actions/upload-artifact@v1\n     if: failure() && steps.build.outcome == 'success'\n     with:\n       name: ${{ matrix.sanitizer }}-artifacts\n       path: ./out/artifacts\n\n```"}
{"id": "63c5c62aac4f2678a5bd79f0", "level": "level1", "llm_response": "```yaml\nname: Mark or close stale issues and PRs\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 20 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Run stale action\n        run: vendor/bin/stale\n```", "answer": "```yaml ---\nname: \"Mark or close stale issues and PRs\"\non:\n  workflow_dispatch:\n  schedule:\n    # Run the stalebot every day at 8pm UTC\n    - cron: \"00 20 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578 # tag=v6\n        with:\n          repo-token: ${{ secrets.BOT_TOKEN }}\n          days-before-issue-stale: 180\n          days-before-pr-stale: 180\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had recent activity.\n            It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          stale-pr-message: >\n            This pull request has been automatically marked as stale because it has not had\n            recent activity. It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          close-issue-message: >\n            This issue has been automatically closed due to inactivity.\n            Please re-open if this still requires investigation.\n          close-pr-message: >\n            This pull request has been automatically closed due to inactivity.\n            Please re-open if these changes are still required.\n          stale-pr-label: \"stale\"\n          stale-issue-label: \"stale\"\n          exempt-issue-labels: \"keepalive\"\n          exempt-pr-labels: \"keepalive\"\n```"}
{"id": "63c49eef6fc19abdf9cd2cf5", "level": "level1", "llm_response": "```yaml\nname: Make lens list\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - data/db/**\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\nconcurrency:\n  group: 'pages'\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++\n        uses: actions/setup-cpp@v2\n        with:\n          cpp-version: '10'\n\n      - name: Build project\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n```", "answer": "```yaml # Create the up-to-date lens list to be published on the GitHub pages website\n\nname: Make lens list\n\non:\n  push:\n    branches: \n        - master\n    paths:\n       - 'data/db/**'\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\n# Allow write/commit to checked out repos\npermissions:\n  contents: write\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Create lens list from master sources\n      run: ./tools/lenslist/show_lensfun_coverage.py -t -o lenslist.html ./data/db\n\n    - name: Checkout website repo\n      uses: actions/checkout@v3\n      with:\n        repository: lensfun/lensfun.github.io\n        path: website-repo\n        token: ${{secrets.PUSH_SECRET}}\n\n    - name: Commit updated lens list to website repo\n      run: |\n        cp website-repo/_includes/lenslist-develop-header.md website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        dt=`date '+%Y-%m-%d'`\n        echo -en \"\\nThis list was generated on $dt from current Lensfun sources. Your Lensfun version may be older, resulting in less coverage.\\n\" >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cat lenslist.html >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cd website-repo/\n        git add _posts/lenslist/2999-12-31-Lenslist-master.md\n        git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Update master lens list from GitHub Actions\"\n        git push https://$USERNAME:$REPO_KEY@github.com/lensfun/lensfun.github.io.git\n      env:\n        REPO_KEY: ${{secrets.PUSH_SECRET}}\n        USERNAME: github-actions[bot]\n        \n```"}
{"id": "63c49c8b6fc19abdf9cc3a67", "level": "level1", "llm_response": "```yaml\nname: Test Functional (Local Chrome proxyless)\n\non:\n  workflow_dispatch:\n\ninputs:\n  sha:\n    description: 'The commit SHA to test'\n    required: true\n    default: 'master'\n  merged_sha:\n    description: 'The merge commit SHA'\n    required: true\n  deploy_run_id:\n    description: 'The ID of the deployment workspace run with artifacts'\n    required: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n      with:\n        ref: ${{ inputs.sha }}\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run tests\n      run: npm test\n```", "answer": "```yaml name: Test Functional (Local Chrome proxyless)\n\non:\n    workflow_dispatch:\n        inputs:\n            sha:\n                desciption: 'The test commit SHA or ref'\n                required: true\n                default: 'master'\n            merged_sha:\n                description: 'The merge commit SHA'\n            deploy_run_id:\n                description: 'The ID of a deployment workspace run with artifacts'\njobs:\n    test:\n        runs-on: ubuntu-latest\n        environment: test-functional\n        env:\n            RETRY_FAILED_TESTS: true\n        steps:\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'pending',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/checkout@v2\n              with:\n                  ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}\n\n            - uses: actions/setup-node@v2\n              with:\n                  node-version: 14\n\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n                      let artifacts = {};\n\n                      for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {\n                        try {\n                          ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({\n                          repo: context.repo.repo,\n                          owner: context.repo.owner,\n                          run_id: context.payload.inputs.deploy_run_id\n                        }));\n                        }\n                        catch (e) {\n                          console.log(e);\n                        }\n                      }\n\n                      const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === 'npm').archive_download_url);\n                      require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, 'package.zip'), Buffer.from(artifact))\n\n            - run: |\n                  unzip package.zip\n                  tar --strip-components=1 -xzf testcafe-*.tgz\n\n            - name: Get npm cache directory\n              id: npm-cache-dir\n              run: |\n                  echo \"::set-output name=dir::$(npm config get cache)\"\n            - uses: actions/cache@v2\n              with:\n                  path: ${{ steps.npm-cache-dir.outputs.dir }}\n                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n                  restore-keys: |\n                      ${{ runner.os }}-node-\n            - run: npm ci\n            - run: npx gulp test-functional-local-proxyless-run --steps-as-tasks\n              timeout-minutes: 60\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'success',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/github-script@v3\n              if: failure() || cancelled()\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'failure',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n```"}
{"id": "63c49dec1842bc13d778d6ad", "level": "level1", "llm_response": "```yaml\nname: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to tag and publish'\n        required: true\n        type: string\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Create and push tag\n        run: git tag ${{ github.event.inputs.version }} && git push origin ${{ github.event.inputs.version }}\n\n      - name: Publish to npm\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: true\n          xpack.security.enabled: false\n          ES_JAVA_OPTS: -Xms1024m -Xmx1024m\n        ports:\n          - 9200:9200\n          - 9300:9300\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: false\n        ports:\n          - 26500:26500\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.17.0\n          cache: 'npm'\n      - name: Install\n        run: npm ci --ignore-scripts\n      - name: Run integration tests\n        run: npm run test:integration\n      - name: Run tests\n        run: npm run test\n      - name: Run local integration tests\n        run: npm run test:local\n      - name: Build\n        run: npm run build\n      - name: Set version\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          npm version ${{ inputs.version }} -m \"Publish v%s\"\n      - name: Publish to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --access=public\n      - name: Push changes\n        run: git push --follow-tags\n```"}
{"id": "63c49e53517fc08c1ef02a7b", "level": "level1", "llm_response": "```yaml\nname: Close stale issues and PRs\n\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Close stale issues and PRs\n        run: |\n          gh issue list --state open --limit 100 | grep -v 'in progress' | awk -F'#' '{print $2}' | xargs -I {} gh issue close {}\n          gh pr list --state open --limit 100 | grep -v 'in progress' | awk -F'#' '{print $2}' | xargs -I {} gh pr close {}\n```", "answer": "```yaml name: 'Close stale issues and PRs'\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5.1.1\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-message: 'This PR is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-label: 'no-pr-activity'\n          days-before-stale: 14\n          days-before-close: 5\n```"}
{"id": "63c4a0851842bc13d779e225", "level": "level1", "llm_response": "```yaml\nname: Release https://lrc-maker.github.io and npm\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n\n      - name: Publish to npm\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Release https://lrc-maker.github.io and npm\n\non:\n    push:\n        tags:\n            - \"v*\"\n\njobs:\n    deploy:\n        if: startsWith(github.ref, 'refs/tags/v')\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: pnpm/action-setup@v2.2.2\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: \"16\"\n                  registry-url: \"https://registry.npmjs.org\"\n                  cache: \"pnpm\"\n\n            - run: pnpm i --ignore-scripts --frozen-lockfile\n\n            - run: pnpm run listdiff\n            - run: pnpm run lint\n            - run: make deploy\n\n            - name: Publish NPM\n              run: npm publish --ignore-scripts\n              env:\n                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n\n            - name: Deploy to lrc-maker.github.io\n              uses: peaceiris/actions-gh-pages@v3\n              with:\n                  personal_token: ${{ secrets.GHP_TOKEN }}\n                  external_repository: lrc-maker/lrc-maker.github.io\n                  publish_branch: master\n                  publish_dir: ./build\n                  force_orphan: true\n```"}
{"id": "63c49d57517fc08c1eefc300", "level": "level1", "llm_response": "```yaml\nname: CompatHelper\n\non:\n  schedule:\n    - cron: '19 22 * * *'  # 10:19 pm UTC\n  workflow_dispatch:\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run CompatHelper\n        run: |\n          # Add your CompatHelper commands here\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 19 22 * * *\n  workflow_dispatch:\npermissions:\n  contents: write\n  pull-requests: write\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: which julia\n        continue-on-error: true\n      - name: Install Julia, but only if it is not already available in the PATH\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1'\n          arch: ${{ runner.arch }}\n        if: steps.julia_in_path.outcome != 'success'\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49fce736e7f0ed8c7083c", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install codeql\n\n      - name: Initialize CodeQL\n        run: |\n          codeql database init --language=python --github-repository=$GITHUB_REPOSITORY --github-token=$GITHUB_TOKEN\n\n      - name: Perform CodeQL analysis\n        run: |\n          codeql database analyze --format=sarif --output=results.sarif --queries=codeql/python-all.ql\n\n      - name: Upload results to GitHub\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 2\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2.1.28\n      with:\n        languages: python\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      uses: github/codeql-action/autobuild@v2.1.28\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2.1.28\n\n    - name: \ud83d\udce8 Discord notification\n      if: ${{ github.event_name == 'schedule' && failure() }}\n      env:\n        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n      uses: Ilshidur/action-discord@0.3.2\n      with:\n        args: \"[Scheduled action failed!](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\"\n```"}
{"id": "63c49e256fc19abdf9ccdc74", "level": "level1", "llm_response": "```yaml\nname: make image\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  makeimage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Build and push Docker image\n      run: |\n        docker build -t your-dockerhub-username/your-repository:latest .\n        docker push your-dockerhub-username/your-repository:latest\n      env:\n        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n```", "answer": "```yaml on: push\nname: make image\njobs:\n  makeimage:\n    name: make image\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make image\n        run: make image\n        shell: bash\n```"}
{"id": "63c49fdb1842bc13d7799b37", "level": "level1", "llm_response": "```yaml\nname: Clean\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  delete-artifacts:\n    id: delete-artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Delete artifacts\n        run: |\n          rm -rf target\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49c441842bc13d77827ae", "level": "level1", "llm_response": "```yaml\nname: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Pack extensions\n        run: npm run pack\n```", "answer": "```yaml name: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    container: archlinux:base-devel\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: node_modules\n      \n      - name: Prepare\n        run: |\n          pacman -Sy\n          pacman -S --noconfirm base gnome-shell gtk3 libadwaita gtk4 glib2 gobject-introspection\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Build\n        run: |\n          npm install\n          npm run github_action\n        \n      - name: Upload Extension Pack\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: rounded-window-corners@yilozt.shell-extension\n          path: _build/\n```"}
{"id": "63c499ca1e33648075790155", "level": "level1", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '40 11 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Mark stale issues and pull requests\n        run: npx @actions/stale\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '40 11 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'Stale issue message'\n        stale-pr-message: 'Stale pull request message'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```"}
{"id": "63c49e29cbc73931bb1abbd4", "level": "level1", "llm_response": "```yaml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  generate_apps_list:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Generate apps list\n        run: php generate_apps_list.php\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```", "answer": "```yaml name: Deploy to GitHub Pages\n\non:\n  push:\n    branches: [master]\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate\n        run: node index.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```"}
{"id": "63c49a611e33648075793dd1", "level": "level1", "llm_response": "```yaml\nname: Publish ARC\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\npermissions:\n  contents: write\n  packages: write\n\njobs:\n  release-controller:\n    id: release-controller\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Build and publish\n        run: |\n          go build -o arc\n          # Add steps to publish the build artifact\n```", "answer": "```yaml name: Publish ARC\n\non:\n  release:\n    types:\n      - published\n\n# https://docs.github.com/en/rest/overview/permissions-required-for-github-apps\npermissions:\n contents: write \n packages: write\n\njobs:\n  release-controller:\n    name: Release\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.18.2'\n\n      - name: Install tools\n        run: |\n          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz\n          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz\n          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder\n          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash\n          sudo mv kustomize /usr/local/bin\n          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz\n          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz\n          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin\n\n      - name: Set version\n        run: echo \"VERSION=$(cat ${GITHUB_EVENT_PATH} | jq -r '.release.tag_name')\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          make github-release\n\n      - name: Setup Docker Environment\n        id: vars\n        uses: ./.github/actions/setup-docker-environment\n        with:\n          username: ${{ env.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          ghcr_username: ${{ github.actor }}\n          ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          file: Dockerfile\n          platforms: linux/amd64,linux/arm64\n          build-args: VERSION=${{ env.VERSION }}\n          push: true\n          tags: |\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:latest\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:latest\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```"}
{"id": "63c49d3a6fc19abdf9cc7f20", "level": "level1", "llm_response": "```yaml\nname: PR update\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run update script\n        run: npm run update\n```", "answer": "```yaml name: PR update\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: update all prs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a144cbc73931bb1bfd61", "level": "level1", "llm_response": "```yaml\nname: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - 'app/src/main/res/values/strings.xml'\n      - 'daemon/src/main/res/values/strings.xml'\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run Crowdin sync\n        run: |\n          # Add your Crowdin sync command here\n          echo \"Running Crowdin sync...\"\n```", "answer": "```yaml name: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n    paths:\n      - app/src/main/res/values/strings.xml\n      - daemon/src/main/res/values/strings.xml\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: crowdin action\n      uses: crowdin/github-action@master\n      with:\n        upload_translations: false\n        download_translations: false\n        upload_sources: true\n        config: 'crowdin.yml'\n        crowdin_branch_name: master\n      env:\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}\n```"}
{"id": "63c49f1b736e7f0ed8c6c249", "level": "level1", "llm_response": "```yaml\nname: Comment Bot\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  Comment:\n    id: Comment\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Add comment\n        run: echo \"Hello, this is a comment from the Comment Bot!\" >> $GITHUB_EVENT_PATH\n```", "answer": "```yaml name: \"Comment Bot\"\n\non:\n  pull_request_target:\n    types: [ opened ]\n\njobs:\n  Comment:\n    name: Add Comment\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          greeting: |\n            **Thank you for creating a pull request!**\n            If you have not done so already, please familiarise yourself with our [Contributing Guidelines](https://github.com/adoptium/temurin-build/blob/master/CONTRIBUTING.md) and [FAQ](https://github.com/adoptium/temurin-build/blob/master/FAQ.md), even if you have contributed to the Adoptium project before. GitHub actions will now run a set of jobs against your PR that will lint and unit test your changes. Keep an eye out for the results from these on the latest commit you submitted. For more information, please see our [testing documentation](https://github.com/adoptium/temurin-build/blob/master/Testing.md).\n```"}
{"id": "63c49bc033b087f6bde4e23d", "level": "level1", "llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    id: license-and-vulnerability-scan\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run dependency review\n        run: go list -m all | grep -v '^github.com/' | xargs -n 1 go list -m -json | jq -s '.[] | {path: .Path, name: .Name, version: .Version}' | tee dependencies.json\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Analyze dependencies\n        run: |\n          echo \"Dependencies analyzed:\"\n          cat dependencies.json\n```", "answer": "```yaml #\n# Copyright 2022 The Sigstore Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    name: License and Vulnerability Scan\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```"}
{"id": "63c49f1e1899db588650b1ca", "level": "level1", "llm_response": "```yaml\nname: Build Web\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-main:\n    id: build-main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Dart\n        uses: dart-lang/setup-dart@v1\n        with:\n          sdk: '2.12'\n\n      - name: Run build command\n        run: dart build web\n```", "answer": "```yaml name: Build Web\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build-main:\n    name: Build Web - MAIN\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: subosito/flutter-action@v1\n        with:\n          flutter-version: '3.3.0'\n          #channel: 'stable'\n      - name: Install Sentry\n        run: |\n          curl -sL https://sentry.io/get-cli/ | bash\n      - name: Setup Flutter\n        run: |\n          flutter doctor -v\n          flutter pub get\n          flutter config --enable-web\n      - name: Prepare App\n        run: |\n          cp lib/.env.dart.example lib/.env.dart\n          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n          flutter --version --machine >> lib/flutter_version.dart\n          echo \";\" >> lib/flutter_version.dart\n      - name: Build Hosted App\n        run: |\n          #export SENTRY_RELEASE=$(sentry-cli releases propose-version)\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} new $SENTRY_RELEASE --project ${{secrets.sentry_project}}\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} set-commits --auto $SENTRY_RELEASE\n\n          flutter build web --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE --source-maps\n\n          sed -i '/index.html/d' build/web/flutter_service_worker.js\n\n          git config --global user.email ${{secrets.commit_email}}\n          git config --global user.name ${{secrets.commit_name}}\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n          cd invoiceninja\n\n          git checkout v5-develop\n          cp -r ../build/web/* ./public/\n          rm ./public/index.html\n          git add .\n          git commit -m 'Admin Portal - Hosted'\n          git push\n          cd ..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext dart --rewrite\n          cd ./build/web\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext map --ext js --rewrite\n          cd ../..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} finalize $SENTRY_RELEASE\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} deploys $SENTRY_RELEASE new -e production          \n      - name: Build Profile App\n        run: |\n          flutter build web --profile\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_profile\n          cd invoiceninja_profile\n\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.profile.dart.js\n          git add .\n          git commit -m 'Admin Portal - Profile'\n          git push\n          cd ..      \n      - name: Build Selfhosted App\n        run: |\n          cp lib/utils/oauth.dart.foss lib/utils/oauth.dart\n          cp lib/utils/app_review.dart.foss lib/utils/app_review.dart\n          cp lib/ui/app/upgrade_dialog.dart.foss lib/ui/app/upgrade_dialog.dart\n          cp lib/ui/app/pinput.dart.foss lib/ui/app/pinput.dart\n          cp pubspec.foss.yaml pubspec.yaml \n          flutter pub get\n\n          flutter build web\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_foss\n          cd invoiceninja_foss\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.foss.dart.js\n          cp ../build/web/main.dart.js.map ./public/main.foss.dart.js.map\n          git add .\n          git commit -m 'Admin Portal - Selfhosted'\n          git push\n\n#  build-next:\n#    name: Build Web - NEXT\n#    needs: build-main\n#    env:\n#      commit_secret: ${{secrets.commit_secret}}\n#      commit_email: ${{secrets.commit_email}}\n#      commit_name: ${{secrets.commit_name}}\n#      api_secret: ${{secrets.api_secret}}\n#    runs-on: ubuntu-latest\n#    steps:\n#      - uses: actions/checkout@v1\n#      - uses: subosito/flutter-action@v1\n#        with:\n#          flutter-version: '3.3.0'\n#      - name: Setup Flutter\n#        run: |\n#          flutter doctor -v\n#          cp pubspec.next.yaml pubspec.yaml\n#          rm pubspec.lock\n#          flutter pub get\n#          flutter config --enable-web\n#      - name: Prepare App\n#        run: |\n#          cp lib/.env.dart.example lib/.env.dart\n#          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n#          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n#          flutter --version --machine >> lib/flutter_version.dart\n#          echo \";\" >> lib/flutter_version.dart\n#      - name: Build Hosted App\n#        run: |\n#          flutter build web\n#\n#          sed -i '/index.html/d' build/web/flutter_service_worker.js\n#\n#          git config --global user.email ${{secrets.commit_email}}\n#          git config --global user.name ${{secrets.commit_name}}\n#\n#          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n#          cd invoiceninja\n#\n#          git checkout v5-develop\n#          cp ../build/web/main.dart.js ./public/main.next.dart.js\n#          git add .\n#          git commit -m 'Admin Portal - Next'\n#          git push\n#          cd ..```"}
{"id": "63c499e4b008460c1df2a73d", "level": "level1", "llm_response": "```yaml\nname: Security\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - package.json\n  pull_request:\n    branches:\n      - main\n    paths:\n      - package.json\n  schedule:\n    - cron: '17 15 * * 1'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  audit-ci:\n    id: audit-ci\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Audit node modules\n        run: npm audit\n\n  trivy-scan-repo:\n    id: trivy-scan-repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install Trivy\n        run: |\n          wget https://github.com/aquasecurity/trivy/releases/download/v0.19.2/trivy_0.19.2_Linux-64bit.tar.gz\n          tar -xvf trivy_0.19.2_Linux-64bit.tar.gz\n          sudo mv trivy /usr/local/bin/\n      - name: Scan repo with Trivy\n        run: trivy .\n\n  codeql-analyze:\n    id: codeql-analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: Security\n\non:\n  push:\n    branches: [main]\n    paths:\n      - \"package.json\"\n  pull_request:\n    paths:\n      - \"package.json\"\n  schedule:\n    # Runs every Monday morning PST\n    - cron: \"17 15 * * 1\"\n\n# Cancel in-progress runs for pull requests when developers push\n# additional changes, and serialize builds in branches.\n# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-concurrency-to-cancel-any-in-progress-job-or-run\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  audit-ci:\n    name: Audit node modules\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: \"**/node_modules\"\n          key: yarn-build-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            yarn-build-\n\n      - name: Install dependencies\n        if: steps.cache-yarn.outputs.cache-hit != 'true'\n        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile\n\n      - name: Audit for vulnerabilities\n        run: yarn _audit\n        if: success()\n\n  trivy-scan-repo:\n    name: Scan repo with Trivy\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          scan-type: \"fs\"\n          scan-ref: \".\"\n          ignore-unfixed: true\n          format: \"template\"\n          template: \"@/contrib/sarif.tpl\"\n          output: \"trivy-repo-results.sarif\"\n          severity: \"HIGH,CRITICAL\"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: \"trivy-repo-results.sarif\"\n\n  codeql-analyze:\n    permissions:\n      actions: read # for github/codeql-action/init to get workflow details\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/autobuild to send a status report\n    name: Analyze with CodeQL\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql-config.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f9a33b087f6bde6736e", "level": "level1", "llm_response": "```yaml\nname: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run lint\n        run: npm run lint\n\n  test:\n    runs-on: ubuntu-latest\n    needs: lint\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n\n  publish:\n    runs-on: ubuntu-latest\n    needs: test\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Publish package\n        run: npm publish\n```", "answer": "```yaml name: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint --if-present\n\n  test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Test code\n        run: npm run test --if-present\n\n  publish:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main' }}\n    needs: [lint, test]\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Semantic Release\n        run: npx semantic-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c497a6cbc73931bb181c12", "level": "level1", "llm_response": "```yaml\nname: Nightly distribution\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  nightly-distribution:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++\n        uses: actions/setup-cpp@v2\n        with:\n          cpp-version: '10'\n\n      - name: Build project\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n\n      - name: Distribute artifacts\n        run: |\n          cp -r build/* /path/to/distribution\n```", "answer": "```yaml name: Nightly distribution\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        include:\n          - branch: \"swiftwasm\"\n            channel: \"DEVELOPMENT\"\n#           targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.3\"\n            channel: \"5.3\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64\"\n          - branch: \"swiftwasm-release/5.4\"\n            channel: \"5.4\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.5\"\n            channel: \"5.5\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.6\"\n            channel: \"5.6\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.7\"\n            channel: \"5.7\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup keychain\n        run: |\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" swiftwasm-ci\n          KEYCHAIN=$HOME/Library/Keychains/swiftwasm-ci-db\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n          security set-keychain-settings -lut 7200 $KEYCHAIN\n          security default-keychain -s $KEYCHAIN\n\n          echo \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64\" | base64 --decode -o developerID_application.p12\n          security import developerID_application.p12 -P \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n          echo \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64\" | base64 --decode -o developerID_installer.p12\n          security import developerID_installer.p12 -P \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n\n          security set-key-partition-list -S \"apple-tool:,apple:\" -s -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n        env:\n          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }}\n\n      - run: ./utils/webassembly/distribute-latest-toolchain.sh ${{ matrix.branch }} ${{ matrix.channel }}\n        env:\n          TARGETS_TO_DIST: ${{ matrix.targets }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BUILDBOT_GITHUB_TOKEN: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_NOTARIZE_EMAIL: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_EMAIL }}\n          DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD }}\n          DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID }}\n```"}
{"id": "63c49d15517fc08c1eefabdb", "level": "level1", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    - cron: '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    # run CI every day even if no PRs/merges occur\n    - cron:  '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    strategy:\n      fail-fast: false\n      matrix:\n        type: [\"slither\", \"manticore\"]\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.8\n    - name: Install dependencies\n      run: |\n        sudo wget -O /usr/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux\n        sudo chmod +x /usr/bin/solc\n    - name: Run Tests\n      env:\n        TEST_TYPE: ${{ matrix.type }}\n      run: |\n        bash program-analysis/${TEST_TYPE}/scripts/gh_action_test.sh\n```"}
{"id": "63c49d70cbc73931bb1a70f8", "level": "level1", "llm_response": "```yaml\nname: Weekly Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 5'\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml name: Weekly Tests\r\n\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    # Runs every friday\r\n    - cron: \"0 0 * * 5\"\r\n\r\njobs:\r\n  test:\r\n    name: \"Python ${{ matrix.python-version }} on ${{ matrix.os }}\"\r\n    runs-on: ${{ matrix.os }}\r\n\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        os: [ubuntu-latest, macos-latest, windows-latest]\r\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\r\n\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n\r\n      - name: Set up Python ${{ matrix.python-version }}\r\n        uses: actions/setup-python@v4.3.0\r\n        with:\r\n          python-version: ${{ matrix.python-version }}\r\n\r\n      - name: Install dependencies\r\n        run: |\r\n          python -m pip install --upgrade pip\r\n          pip install -r requirements.txt -v\r\n\r\n      - name: Run pytest\r\n        run: python -m pytest\r\n```"}
{"id": "63c49a7e33b087f6bde45f85", "level": "level1", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run Release Drafter\n        run: npx release-drafter\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n  pull_request_target:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0e9cbc73931bb1bd7aa", "level": "level1", "llm_response": "```yaml\nname: cancel-previous-workflows\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Cancel previous workflows\n        run: |\n          gh workflow run cancel --workflow $(gh workflow list --json name -q .[].name | grep -v $(basename $GITHUB_WORKFLOW_FILE) | xargs)\n```", "answer": "```yaml name: cancel-previous-workflows\n\non:\n  pull_request_target:\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous runs\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          workflow_id: all\n          all_but_latest: true\n```"}
{"id": "63c49c2e1842bc13d7781f8c", "level": "level1", "llm_response": "```yaml\nname: StandardRB\n\non:\n  pull_request:\n    branches: [ '*' ]\n  push:\n    branches: [ master ]\n\njobs:\n  standard:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Run StandardRB\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: '2.7'\n      run: |\n        gem install standard\n        standard --fix\n```", "answer": "```yaml name: StandardRB\n\non:\n  pull_request:\n    branches:\n      - '*'\n  push:\n    branches:\n      - master\n\njobs:\n  standard:\n    name: StandardRB Check Action\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n        bundler-cache: true\n\n    - name: Run StandardRB\n      run: bundle exec standardrb --format progress\n```"}
{"id": "63c49bbd33b087f6bde4e115", "level": "level1", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  repository_dispatch:\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up CIFuzz\n      uses: google/cifuzz-action@v1\n      with:\n        project_id: your-project-id\n        corpus_dir: corpus\n        test_targets: your-test-targets\n```", "answer": "```yaml # Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\nname: CIFuzz\non: [pull_request, push]\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure()\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"id": "63c49b6a1899db58864f3771", "level": "level1", "llm_response": "```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run pre-commit hooks\n        run: go mod tidy && go test -v ./...\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [master]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    # don't run this on the master branch\n    if: github.ref != 'refs/heads/master'\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.x'\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n          check-latest: true\n          cache: true\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y libdevmapper-dev libbtrfs-dev\n      - uses: pre-commit/action@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49edb33b087f6bde62769", "level": "level1", "llm_response": "```yaml\nname: Conform PR\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, reopened, synchronize]\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }}\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  conform-pr:\n    id: conform-pr\n    runs-on: ubuntu-latest\n    steps:\n      # Add your steps here\n```", "answer": "```yaml ---\n# Attention! This workflow uses `pull_request_target` event that has access to secrets.\n# If you modify this workflow, make sure that you don't introduce dangerous steps.\n# See also: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/.\nname: Conform PR\non:\n  pull_request_target:\n    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target\n    # List all types to make it easier to enable new ones when they are needed.\n    types:\n      # - assigned\n      # - unassigned\n      - labeled\n      - unlabeled # if GitHub Actions stuck, add and remove \"no ci\" label to force rebuild\n      - opened\n      - edited\n      # - closed\n      - reopened\n      - synchronize\n      # - converted_to_draft\n      # - ready_for_review\n      # - locked\n      # - unlocked\n      # - review_requested\n      # - review_request_removed\n      # - auto_merge_enabled\n      # - auto_merge_disabled\n\n# Stop pending and in-progress jobs of this workflow.\n# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }} # GITHUB_TOKEN is not enough to query projects, so we use a special one\n\njobs:\n  conform-pr:\n    name: Conform PR\n    runs-on: ubuntu-20.04\n\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n\n    steps:\n      # Warning! Be careful about changing the steps here as it might cause some security problems\n      # (see the Attention block on the top of this file).\n      - name: Setup Go\n        uses: FerretDB/github-actions/setup-go@main\n        with:\n          cache-key: conform-pr\n\n      - name: Conform PR\n        uses: FerretDB/github-actions/conform-pr@main\n```"}
{"id": "63c499c86fc19abdf9cb1f2d", "level": "level1", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Build the Go application\n        run: go build -o myapp\n\n      - name: Create draft release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref_name }}\n          release_name: Release ${{ github.ref_name }}\n          draft: true\n          prerelease: false\n```", "answer": "```yaml name: release\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\npermissions:\n  contents: write # Allow to create a release.\n\njobs:\n  build:\n    name: create draft release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set env\n        run:  echo \"RELEASE_TAG=${GITHUB_REF:10}\" >> $GITHUB_ENV\n      - name: checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.19'\n      - name: generate release artifacts\n        run: |\n          make release\n      - name: generate release notes\n        run: |\n          make release-notes\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          draft: true\n          files: out/*\n          body_path: _releasenotes/${{ env.RELEASE_TAG }}.md\n```"}
{"id": "63c49b3d1842bc13d777c127", "level": "level1", "llm_response": "```yaml\nname: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**/*.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**/*.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    id: auto-review-tests\n    runs-on: ubuntu-latest\n    steps:\n      # Add your code review steps here\n```", "answer": "```yaml name: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    name: Automatic Code Review\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: none\n\n      - name: Get composer cache directory\n        run: echo \"COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)\" >> $GITHUB_ENV\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer update --ansi\n        env:\n          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit --color=always --group=auto-review --no-coverage\n```"}
{"id": "63c49c8533b087f6bde535e2", "level": "level1", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [opened, edited, synchronize]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1.6'\n      - name: Run TagBot\n        run: |\n          # Add your TagBot logic here\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49b3d1842bc13d777c123", "level": "level1", "llm_response": "```yaml\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - system/**\n      - .github/workflows/deploy-apidocs.yml\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      # Add your deployment steps here\n```", "answer": "```yaml # When changes are pushed to the develop branch,\n# build the current version of the API documentation\n# with phpDocumentor and deploy it to codeigniter4/api.\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - 'develop'\n    paths:\n      - 'system/**'\n      - '.github/workflows/deploy-apidocs.yml'\n\njobs:\n  build:\n    name: Deploy to api\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Setup credentials\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"${GITHUB_ACTOR}\"\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          repository: codeigniter4/api\n          token: ${{ secrets.ACCESS_TOKEN }}\n          path: api\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          tools: phive\n          coverage: none\n\n      - name: Download latest phpDocumentor\n        working-directory: source\n        run: sudo phive --no-progress install --global --trust-gpg-keys 67F861C3D889C656 phpDocumentor\n\n      - name: Prepare API repo\n        working-directory: api\n        run: |\n          git reset --hard master\n          rm -rfv docs\n          mkdir --parents --verbose docs\n\n      - name: Build API in source repo\n        working-directory: source\n        run: |\n          phpDocumentor run --ansi --verbose\n          cp -R ${GITHUB_WORKSPACE}/source/api/build/* ${GITHUB_WORKSPACE}/api/docs\n\n      - name: Deploy to API repo\n        working-directory: api\n        run: |\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Updated API for commit ${GITHUB_SHA}\"\n            git push origin master\n          fi\n```"}
{"id": "63c49993517fc08c1eee4989", "level": "level1", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches:\n      - master\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 12 * * 6'\n\nconcurrency:\n  group: 'codeql-${{ github.ref }}'\n  cancel-in-progress: true\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run CodeQL\n        uses: github/codeql-action/analyze@v1\n        with:\n          languages: go\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: codeql\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - 'master'\n  schedule:\n    - cron: '0 12 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n      -\n        name: Checkout HEAD on PR\n        if: ${{ github.event_name == 'pull_request' }}\n        run: |\n          git checkout HEAD^2\n      -\n        name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n      -\n        name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      -\n        name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c499f16fc19abdf9cb2f18", "level": "level1", "llm_response": "```yaml\nname: jenkins-illa-builder-main\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n```", "answer": "```yaml name: jenkins-illa-builder-main\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: \"http://ec2-13-230-170-106.ap-northeast-1.compute.amazonaws.com:9000/\"\n          user: \"illasoft\"\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n          job: \"illa-builder-main\"\n```"}
{"id": "63c49926b008460c1df25d1c", "level": "level1", "llm_response": "```yaml\nname: PR Check - Packaging: Config and input\n\non:\n  push:\n    branches:\n      - main\n      - releases/v1\n      - releases/v2\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n  workflow_dispatch:\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\n\njobs:\n  packaging-config-inputs-js:\n    id: packaging-config-inputs-js\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run packaging checks\n        run: npm run packaging-checks\n```", "answer": "```yaml # Warning: This file is generated automatically, and should not be modified.\n# Instead, please modify the template in the pr-checks directory and run:\n#     pip install ruamel.yaml && python3 sync.py\n# to regenerate this file.\n\nname: 'PR Check - Packaging: Config and input'\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\non:\n  push:\n    branches:\n    - main\n    - releases/v1\n    - releases/v2\n  pull_request:\n    types:\n    - opened\n    - synchronize\n    - reopened\n    - ready_for_review\n  workflow_dispatch: {}\njobs:\n  packaging-config-inputs-js:\n    strategy:\n      matrix:\n        include:\n        - os: ubuntu-latest\n          version: latest\n        - os: macos-latest\n          version: latest\n        - os: windows-2019\n          version: latest\n        - os: windows-2022\n          version: latest\n        - os: ubuntu-latest\n          version: cached\n        - os: macos-latest\n          version: cached\n        - os: windows-2019\n          version: cached\n        - os: ubuntu-latest\n          version: nightly-latest\n        - os: macos-latest\n          version: nightly-latest\n        - os: windows-2019\n          version: nightly-latest\n        - os: windows-2022\n          version: nightly-latest\n    name: 'Packaging: Config and input'\n    timeout-minutes: 45\n    runs-on: ${{ matrix.os }}\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n    - name: Prepare test\n      id: prepare-test\n      uses: ./.github/prepare-test\n      with:\n        version: ${{ matrix.version }}\n    - uses: ./../action/init\n      with:\n        config-file: .github/codeql/codeql-config-packaging3.yml\n        packs: +dsp-testing/codeql-pack1@1.0.0\n        languages: javascript\n        tools: ${{ steps.prepare-test.outputs.tools-url }}\n      env:\n        TEST_MODE: true\n    - name: Build code\n      shell: bash\n      run: ./build.sh\n    - uses: ./../action/analyze\n      with:\n        output: ${{ runner.temp }}/results\n      env:\n        TEST_MODE: true\n\n    - name: Check results\n      uses: ./../action/.github/check-sarif\n      with:\n        sarif-file: ${{ runner.temp }}/results/javascript.sarif\n        queries-run: javascript/example/empty-or-one-block,javascript/example/empty-or-one-block,javascript/example/other-query-block,javascript/example/two-block\n        queries-not-run: foo,bar\n\n    - name: Assert Results\n      shell: bash\n      run: |\n        cd \"$RUNNER_TEMP/results\"\n        # We should have 4 hits from these rules\n        EXPECTED_RULES=\"javascript/example/empty-or-one-block javascript/example/empty-or-one-block javascript/example/other-query-block javascript/example/two-block\"\n\n        # use tr to replace newlines with spaces and xargs to trim leading and trailing whitespace\n        RULES=\"$(cat javascript.sarif | jq -r '.runs[0].results[].ruleId' | sort | tr \"\\n\\r\" \" \" | xargs)\"\n        echo \"Found matching rules '$RULES'\"\n        if [ \"$RULES\" != \"$EXPECTED_RULES\" ]; then\n          echo \"Did not match expected rules '$EXPECTED_RULES'.\"\n          exit 1\n        fi\n    env:\n      INTERNAL_CODEQL_ACTION_DEBUG_LOC: true\n```"}
{"id": "63c49c4dcbc73931bb19fc2f", "level": "level1", "llm_response": "```yaml\nname: Build and test\n\non:\n  push:\n    branches:\n      - '*'\n\njobs:\n  build-all-versions:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Kotlin\n      uses: jillesdehaan/setup-kotlin@v1\n      with:\n        kotlin-version: '1.5.31'\n\n    - name: Build project\n      run: ./gradlew build\n\n    - name: Test project\n      run: ./gradlew test\n```", "answer": "```yaml name: Build and test\n\non:\n  push:\n    branches: '*'\n#  pull_request:\n#    branches: '*'\n\njobs:\n  build-all-versions:\n    strategy:\n      matrix:\n        scala: [ \"2.12.16\", \"2.13.8\" ]\n        spark: [ \"3.3.0\", \"3.2.1\", \"3.2.0\", \"3.1.3\", \"3.1.2\", \"3.1.1\", \"3.1.0\", \"3.0.3\", \"3.0.2\", \"3.0.1\", \"3.0.0\" ]\n        exclude:\n          - scala: \"2.13.8\"\n            spark: \"3.1.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.0\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.0\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n          check-latest: true\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.gradle/jdks\n          key: ${{ runner.os }}-gradle-spark-${{ matrix.spark }}-${{ matrix.scala }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: |\n            -Pspark=${{ matrix.spark }}\n            -Pscala=${{ matrix.scala }}\n            clean\n            test\n            --scan\n\n  #  qodana:\n  #    runs-on: ubuntu-latest\n  #    steps:\n  #      - uses: actions/checkout@v3\n  #      - name: 'Qodana Scan'\n  #        uses: JetBrains/qodana-action@v5.0.2\n\n\n\n# vim: ts=2:sts=2:sw=2:expandtab\n```"}
{"id": "63c496b21899db58864d49a8", "level": "level1", "llm_response": "```yaml\nname: Code Coverage\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Generate code coverage report\n        run: mvn cobertura:cobertura\n\n      - name: Upload code coverage report to Codecov\n        uses: codecov/codecov-action@v1\n```", "answer": "```yaml name: Code Coverage\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n\n      - name: Set up Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Run Tests\n        run: ./gradlew test -x checkLicenseMain -x checkLicenses -x spotlessCheck -x spotlessApply -Pjacoco\n        continue-on-error: true\n\n      - name: Run Test Coverage\n        run: ./gradlew testCodeCoverageReport -Pjacoco\n\n      - name: Publish Coverage\n        env:\n          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n        run: ./gradlew coverallsJacoco -Pjacoco\n```"}
{"id": "63c497091e3364807577e6aa", "level": "level1", "llm_response": "```yaml\nname: Build\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    branches:\n      - main\n      - dev\n    paths-ignore:\n      - 'docs/docs/**'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n```", "answer": "```yaml name: Build\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    paths-ignore:\n      - \"docs/docs/**\"\n    branches:\n      - main\n      - dev\n\njobs:\n  build:\n    name: Build Monorepo\n    runs-on: ubuntu-latest\n    steps:\n      - name: check out code \ud83d\udece\n        uses: actions/checkout@v3\n\n      - name: Install Node v18\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"18.x\"\n          registry-url: \"https://registry.npmjs.org\"\n\n      - name: Cache node modules\n        id: cache-npm\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          # npm cache files are stored in `~/.npm` on Linux/macOS\n          path: ~/.npm\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-\n      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}\n        name: List the state of node modules\n        continue-on-error: true\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run prettier\n        run: npm run format-check\n\n      - name: Run ESLint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run Tests\n        run: npm run test\n```"}
{"id": "63c497ddb008460c1df1d95d", "level": "level1", "llm_response": "```yaml\nname: Remove old artifacts\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '3.1.100'\n\n      - name: Remove old artifacts\n        run: |\n          dotnet clean\n          dotnet publish -c Release -o ./artifacts\n```", "answer": "```yaml name: Remove old artifacts\n\non:\n  schedule:\n    # Every day at 1am\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n    - name: Remove old artifacts\n      uses: c-hive/gha-remove-artifacts@v1.2.0\n      with:\n        age: '1 month'\n        skip-tags: true\n        skip-recent: 3\n```"}
{"id": "63c496d51899db58864d5867", "level": "level1", "llm_response": "```yaml\nname: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    id: set_done_for_closed_issued\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set JIRA ticket to DONE\n        run: |\n          # Add your JIRA integration script here\n          echo \"Setting JIRA ticket to DONE for issue ${{ github.event.issue.number }}\"\n```", "answer": "```yaml name: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    name: Set JIRA ticket to DONE\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login\n        uses: atlassian/gajira-login@master\n        env:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n\n      - name: Find comment with ticket number\n        uses: peter-evans/find-comment@v1\n        id: comment\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body-includes: Internal ticket number is FE-\n\n      - name: Get ticket number\n        id: ticket\n        uses: atlassian/gajira-find-issue-key@master\n        with:\n          string: ${{ steps.comment.outputs.comment-body }}\n\n      - name: Close\n        uses: atlassian/gajira-transition@master\n        with:\n          issue: ${{ steps.ticket.outputs.issue }}\n          transition: 'DONE'\n```"}
{"id": "63c494a17843b61269a0272b", "level": "level1", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Login to Azure Container Registry\n        uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n\n      - name: Build and push Docker image\n        run: |\n          docker build -t ${{ env.REGISTRY_NAME }}/${{ env.SERVICE_NAME }}:latest .\n          docker push ${{ env.REGISTRY_NAME }}/${{ env.SERVICE_NAME }}:latest\n\n      - name: Deploy to Azure Kubernetes Service\n        uses: azure/k8s-deploy@v1\n        with:\n          azure_credentials: ${{ env.AZURE_CREDENTIALS }}\n          kubernetes_cluster_name: ${{ env.CLUSTER_NAME }}\n          kubernetes_resource_group: ${{ env.RESOURCE_GROUP }}\n          manifests: |\n            - deployment.yaml\n            - service.yaml\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cloudflare cache\n        uses: cloudflare/actions-purge-cache@v1\n        with:\n          email: ${{ env.CLOUDFLARE_EMAIL }}\n          api_token: ${{ env.CLOUDFLARE_API_KEY }}\n          zone_id: ${{ env.CLOUDFLARE_ZONE_ID }}\n\n  test:\n    runs-on: ubuntu-latest\n    needs: purge_cache\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Update Package.swift.json\n        run: |\n          set -ex\n\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          git pull --rebase origin master\n\n          tempdir=$(mktemp -d)\n          filename=\"Package.swift\"\n          curl -sfL -o \"$tempdir/$filename\" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename\n          sed -i 's/swift-tools-version:5.5/swift-tools-version:5.4/g' \"$tempdir/Package.swift\"\n          swift package --package-path \"$tempdir\" dump-package > Resources/$filename.json\n\n          git add Resources/$filename.json\n          git diff-index --quiet HEAD || git commit -m \"Update $filename.json\"\n          git push origin master\n\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n\n      - name: Build and Push Docker Images\n        run: |\n          set -ex\n\n          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.RESOURCE_GROUP }}/${{ env.SERVICE_NAME }}:latest\n\n          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .\n          docker push ${IMAGE_TAG}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: azure/setup-kubectl@v3\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/aks-set-context@v3\n        with:\n          resource-group: ${{ env.RESOURCE_GROUP }}\n          cluster-name: ${{ env.CLUSTER_NAME }}\n\n      - name: Deploy\n        run: |\n          set -ex\n\n          sed \"s/%COMMIT_SHA%/${{ github.sha }}/g;\" \"k8s/pod_template.yaml\" | kubectl apply -f -\n\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }}\n          kubectl get services -o wide\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n        run: |\n          curl -X POST \"https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache\" \\\n            -H \"X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}\" \\\n            -H \"X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"purge_everything\":true}'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test\n        run: |\n          set -ex\n\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"latest\"}'\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"stable\"}'\n\n          versions=$(curl --silent -X GET \"https://swiftfiddle.com/versions\" -H \"Content-Type:application/json\")\n          len=$(echo $versions | jq length)\n          for i in $( seq 0 $(($len - 1)) ); do\n            version=$(echo $versions | jq .[$i])\n            curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n              -H \"Content-Type:application/json\" \\\n              --data \"{\\\"code\\\":\\\"print(\\\\\\\"Hello, World!\\\\\\\")\\\",\\\"toolchain_version\\\":$version}\"\n          done\n```"}
{"id": "63c497fb517fc08c1eeda8d8", "level": "level1", "llm_response": "```yaml\nname: Support Requests\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    id: action\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: 'Support Requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'support'\n          issue-comment: >\n            \ud83d\udc4b We use the issue tracker exclusively for bug reports and feature requests.\n            However, this issue appears to be a support request. Please use our\n            [support channels](https://github.com/kivy/kivy-ios/blob/master/README.md#support)\n            to get help with the project.\n            \n            \n            If you're having trouble installing or using kivy-ios,\n            maybe you could be interested to [installation and requirements](https://github.com/kivy/kivy-ios/blob/master/README.md#installation--requirements).\n            \n            \n            Let us know if this comment was made in error, and we'll be happy\n            to reopen the issue.\n          close-issue: true\n          lock-issue: false```"}
{"id": "63c49e0d1899db58865040a6", "level": "level1", "llm_response": "```yaml\nname: pull-request-lint\n\non:\n  pull_request:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run PR lint\n        run: npm run lint -- --pr\n```", "answer": "```yaml # ~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\".\n\nname: pull-request-lint\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\njobs:\n  validate:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: amannn/action-semantic-pull-request@v3.4.6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |-\n            feat\n            fix\n            chore\n          requireScope: false\n```"}
{"id": "63c497c61899db58864dbc6a", "level": "level1", "llm_response": "```yaml\nname: Manage the hold label\n\non:\n  workflow_dispatch:\n    inputs:\n      command:\n        description: 'Command to execute (hold-command or unhold-command)'\n        required: true\n        type: choice\n        options:\n          - hold-command\n          - unhold-command\n\njobs:\n  hold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.command == 'hold-command'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Add hold label\n        run: |\n          gh issue label add --owner ${{ github.repository_owner }} --repo ${{ github.repository }} --issue ${{ github.event.issue.number }} hold\n\n  unhold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.command == 'unhold-command'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Remove hold label\n        run: |\n          gh issue label remove --owner ${{ github.repository_owner }} --repo ${{ github.repository }} --issue ${{ github.event.issue.number }} hold\n```", "answer": "```yaml name: Manage the hold label\non:\n  repository_dispatch:\n    types:\n      - hold-command\n      - unhold-command\n\njobs:\n  hold:\n    name: Add hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'hold-command'\n\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n\n  unhold:\n    name: Remove the hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'unhold-command'\n\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n```"}
{"id": "63c5ae9f6b748c7b1fadf422", "level": "level1", "llm_response": "```yaml\nname: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Run with tmate debugging'\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  zsh:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install molecule\n      - name: Run Molecule\n        run: |\n          molecule test\n        env:\n          MOLECULE_DEBUG: ${{ github.event.inputs.debug-the }}\n```", "answer": "```yaml name: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```"}
{"id": "63c49742517fc08c1eed5bcf", "level": "level1", "llm_response": "```yaml\nname: Lint Format\n\non:\n  push:\n    branches:\n      - master\n      - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up GCC\n        uses: actions/setup-gcc@v2\n        with:\n          gcc-version: '9'\n\n      - name: Run linting\n        run: |\n          gcc -Wall -Wextra -pedantic -std=c11 -o test test.c\n          ./test\n```", "answer": "```yaml name: Lint Format\n\non:\n  push:\n    branches:\n    - master\n    - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    container: qmkfm/qmk_cli\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Disable automatic eol conversion\n      run: |\n        echo \"* -text\" > .git/info/attributes\n\n    - name: Install dependencies\n      run: |\n        pip3 install -r requirements-dev.txt\n\n    - name: Run qmk formatters\n      shell: 'bash {0}'\n      run: |\n        qmk format-c -a\n        qmk format-python -a\n        qmk format-text -a\n        git diff\n\n    - uses: rlespinasse/github-slug-action@v3.x\n\n    - name: Become QMK Bot\n      run: |\n        git config user.name 'QMK Bot'\n        git config user.email 'hello@qmk.fm'\n\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      if: ${{ github.repository == 'qmk/qmk_firmware'}}\n      with:\n        token: ${{ secrets.QMK_BOT_TOKEN }}\n        delete-branch: true\n        branch: bugfix/format_${{ env.GITHUB_REF_SLUG }}\n        author: QMK Bot <hello@qmk.fm>\n        committer: QMK Bot <hello@qmk.fm>\n        commit-message: Format code according to conventions\n        title: '[CI] Format code according to conventions'\n```"}
{"id": "63c49ae81899db58864f05dc", "level": "level1", "llm_response": "```yaml\nname: Web-Ext lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Lint code\n      run: npm run lint\n```", "answer": "```yaml name: Web-Ext lint\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: \"Lint\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: \"web-ext lint\"\n        uses: kewisch/action-web-ext@v1\n        with:\n          cmd: lint\n          source: src\n          channel: listed\n```"}
{"id": "63c49ea41842bc13d7792231", "level": "level1", "llm_response": "```yaml\nname: Require PR Labels\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  pull_request_target:\n    types: [edited, labeled, unlabeled]\n\njobs:\n  check-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install requests\n\n      - name: Check labels\n        run: |\n          PR_NUMBER=$GITHUB_EVENT_NUMBER\n          LABELS=$(curl -s https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER | jq -r '.labels[].name')\n          REQUIRED_LABELS=\"bug fix feature\"\n          for LABEL in $REQUIRED_LABELS; do\n            if [[ ! $LABELS =~ $LABEL ]]; then\n              echo \"Error: PR $PR_NUMBER is missing the required label '$LABEL'.\"\n              exit 1\n            fi\n          done\n          echo \"All required labels are present.\"\n```", "answer": "```yaml name: Require PR Labels\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  check-labels:\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```"}
{"id": "63c49a4033b087f6bde447f3", "level": "level1", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.7\n\n      - name: Install dependencies\n        run: bundle install\n\n      - name: Deploy to Heroku\n        uses: akhileshns/heroku-deploy@v3.12.12\n        with:\n          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}\n          heroku_app_name: \"your-heroku-app-name\"\n          heroku_email: \"your-email@example.com\"\n```", "answer": "```yaml name: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy to Heroku\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n    steps:\n    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # tag=v2.5.0\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7 # tag=v1.118.0\n      with:\n        bundler-cache: true # runs 'bundle install' and caches installed gems automatically\n    - name: Run tests\n      run: bundle exec rake\n    - name: Deploy to Heroku\n      uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820 # tag=v3.12.12\n      with:\n        heroku_api_key: ${{secrets.HEROKU_API_KEY}}\n        heroku_app_name: \"devdocs\"\n        heroku_email: \"team@freecodecamp.com\"\n        dontuseforce: true # --force should never be necessary\n        dontautocreate: true # The app exists, it should not be created\n```"}
{"id": "63c49f576fc19abdf9cd5856", "level": "level1", "llm_response": "```yaml\nname: Move new issues to correct docs repo\n\non:\n  issues:\n    types: [opened, transferred, reopened]\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Transfer issue\n        run: npm run transfer-issue\n```", "answer": "```yaml name: Move new issues to correct docs repo\n\n# **What it does**: If anyone creates an issue in the docs-internal repo for the engineering team or the content team, move that issue and notify the author\n# **Why we have it**: We don't want engineering or content issues in the docs-internal repo\n# **Who does it impact**: GitHub staff.\n\non:\n  issues:\n    types:\n      - opened\n      - transferred\n      - reopened\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.repository == 'github/docs-internal'\n    steps:\n      - id: move_to_correct_repo\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        env:\n          TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}\n          TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}\n        with:\n          github-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n          script: |\n            const issueNo = context.issue.number\n            const owner = 'github'\n            const originalRepo = 'docs-internal'\n\n            // See if the engineering label is present.\n            const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')\n\n            // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo\n            let correctRepo = process.env.TEAM_CONTENT_REPO\n            if (engineeringLabel) {\n              correctRepo = process.env.TEAM_ENGINEERING_REPO\n            }\n\n            const correctRepoObject = await github.repos.get({\n              owner: owner,\n              repo: correctRepo\n            })\n\n            // Post a comment in the docs-internal issue\n            await github.issues.createComment({\n              owner: owner,\n              repo: originalRepo,\n              issue_number: issueNo,\n              body: `\ud83d\udc4b  You opened this issue in '${context.repo.repo}'. Moving forward, we're asking that folks create new issues in the following repositories instead:\\n- For issues with the docs site, please submit to the [${process.env.TEAM_ENGINEERING_REPO}](/${owner}/${process.env.TEAM_ENGINEERING_REPO}) repo.\\n- For all new content issues, please submit to the [${process.env.TEAM_CONTENT_REPO}](/${owner}/${process.env.TEAM_CONTENT_REPO}) repo.\\n\\nWe will transfer this issue for you!`\n            })\n\n            // Transfer the issue to the correct repo\n            const issueNodeId = context.payload.issue.node_id\n            const correctRepositoryNodeId = correctRepoObject.data.node_id\n            console.log(`Issue GraphQL Node ID: ${issueNodeId}`)\n            console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)\n\n            const mutation = `mutation ($id: ID!, $repositoryId: ID!) {\n              transferIssue(input: {\n                issueId: $id,\n                repositoryId: $repositoryId\n              }) {\n                issue {\n                  url,\n                  number\n                }\n              }\n            }`\n\n            const variables = {\n              id: issueNodeId,\n              repositoryId: correctRepositoryNodeId\n            }\n\n            const graph = await github.graphql(mutation, variables)\n            console.log('GraphQL mutation result:\\n' + JSON.stringify(graph))\n\n            // Add the same labels to the new issue\n            const newIssueNumber = graph.transferIssue.issue.number\n            await github.issues.addLabels({\n              owner: owner,\n              repo: correctRepo,\n              issue_number: newIssueNumber,\n              labels: context.payload.issue.labels.map(label => label.name),\n            })\n```"}
{"id": "63c4a057cbc73931bb1b9c62", "level": "level1", "llm_response": "```yaml\nname: close stale issues/PRs\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Close stale issues and PRs\n        run: |\n          gh issue list --state open --label \"stale\" --json number --jq '.[].number' | xargs -I {} gh issue edit {} --state closed\n          gh pr list --state open --label \"stale\" --json number --jq '.[].number' | xargs -I {} gh pr edit {} --state closed\n```", "answer": "```yaml name: \"close stale issues/PRs\"\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label:\n          close-pr-message: \"\"\n```"}
{"id": "63c49f61736e7f0ed8c6df4d", "level": "level1", "llm_response": "```yaml\nname: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - packages/**/package.json\n      - examples/src\n      - .github/workflows/sandpack.yml\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    name: Update Sandpack\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # To run comparison we need more than the latest commit. Keep the fetch-depth relatively\n          # high or set it to zero to get all commits from the git repo.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 150\n \n      - name: Install\n        run: yarn add -D plop@3.1.1\n \n      - name: Update Code in Sandpack\n        run: yarn gen:code\n        \n      - name: Update Version in Sandpack\n        run: yarn gen:v\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: 'Version Sandpack'\n          body: |\n            Update Sandpack dependencies. Check the preview before merging.\n          commit-message: docs\n          committer: GitHub <noreply@github.com>\n          branch: docs/sandpack\n          delete-branch: true\n```"}
{"id": "63c495927843b61269a087ec", "level": "level1", "llm_response": "```yaml\nname: update changelog\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Update CHANGELOG.md\n        run: |\n          echo \"## $(date +%Y-%m-%d) - $(git describe --tags --abbrev=0)\" >> CHANGELOG.md\n          echo \"- Release $(git describe --tags --abbrev=0)\" >> CHANGELOG.md\n```", "answer": "```yaml name: update changelog\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```"}
{"id": "63c498c3cbc73931bb1892bc", "level": "level1", "llm_response": "```yaml\nname: Push to BitBucket\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Dart\n        uses: subosito/flutter-action@v1\n        with:\n          flutter-version: '2.5.3'\n\n      - name: Push to BitBucket\n        run: |\n          git remote add bitbucket https://bitbucket.org/username/repository.git\n          git push bitbucket master\n```", "answer": "```yaml name: \"Push to BitBucket\"\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: \"0\"\n          ref: \"master\"\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          name: id_rsa\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n\n      - run: |\n          git remote add bitbucket git@bitbucket.org:DmitryKrutskikh/dart-code-metrics.git\n          git config --global user.email \"dmitry.krutskikh@gmail.com\"\n          git config --global user.name \"Dmitry Krutskikh\"\n          git checkout master\n          git push -u bitbucket master\n```"}
{"id": "63c4994933b087f6bde3e523", "level": "level1", "llm_response": "```yaml\nname: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n    container: ros:galactic\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Install pip for rosdep\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install python3-pip\n\n      - name: Register AutonomouStuff repository\n        uses: autowarefoundation/autoware-github-actions/register-autonomoustuff-repository@v1\n        with:\n          rosdistro: galactic\n\n      - name: Set git config\n        uses: autowarefoundation/autoware-github-actions/set-git-config@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Run vcs import\n        run: |\n          mkdir src\n          vcs import src < autoware.repos\n\n      - name: Run vcs export\n        run: |\n          vcs export --exact src || true\n\n      - name: Run rosdep install\n        run: |\n          sudo apt-get -y update\n          rosdep update\n          DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro galactic\n```"}
{"id": "63c495778052faa2781b1fcd", "level": "level1", "llm_response": "```yaml\nname: Autolocker\n\non:\n  pull_request:\n    types: [closed]\n\npermissions:\n  contents: write\n  packages: write\n\njobs:\n  autolock:\n    id: autolock\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Autolocker\n\non:\n  pull_request_target:\n    types: [closed]\n\npermissions: write-all\n\njobs:\n  autolock:\n#     if: ${{ github.event.pull_request.merged }} # Uncomment if you want it to run only when a PR gets MERGED\n    runs-on: ubuntu-latest\n    name: Autolocker\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |     \n            github.rest.issues.lock({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              lock_reason: \"resolved\" // [\"off-topic\", \"too heated\", \"resolved\", \"spam\"]\n            })\n```"}
{"id": "63c49fbe517fc08c1ef0b986", "level": "level1", "llm_response": "```yaml\nname: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Lighthouse audit\n        run: npx lighthouse https://your-staging-url.com --output=json --output-path=lighthouse-report.json\n```", "answer": "```yaml name: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://stopcovid19.metro.tokyo.lg.jp/\n            https://stopcovid19-tokyo-staging.web.app/\n          uploadArtifacts: true\n\n      - name: Use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.13.0'\n      - run: npm install -g csv2md\n\n      # https://stedolan.github.io/jq/manual/\n      # https://shields.io/\n      - name: Summary\n        run: |\n          export LH_SUMMARY_FILE=\"${GITHUB_WORKSPACE}/.lighthouseci/result.md\"\n          echo \"LH_SUMMARY_FILE=${LH_SUMMARY_FILE}\" >> $GITHUB_ENV\n          cat \"${GITHUB_WORKSPACE}/.lighthouseci/\"lhr-*.json \\\n          | jq -rs 'def formatScore(s):\n              \"https://img.shields.io\" as $baseUrl |\n              \"logo=lighthouse&logoColor=lightgray\" as $query |\n              if s == null then \"![-1](\\($baseUrl)/badge/\\(\"?\" | @uri)-error-inactive?\\($query))\"\n                elif s < 0.5 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-red-critical?\\($query))\"\n                elif s < 0.9 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-orange-important?\\($query))\"\n                else \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-green-success?\\($query))\"\n              end;\n              [\"Metrics\", \"Score\", \"URL\"], ( [.[] | .requestedUrl as $url | .categories[] | {\n                metrics: .title,\n                score: formatScore(.score),\n                url: $url\n              } ] | sort_by(.metrics) | .[] | [.metrics, .score, .url] ) | @csv' \\\n          | csv2md | tee \"${LH_SUMMARY_FILE}\"\n\n      - uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs')\n            const table = fs.readFileSync(process.env.LH_SUMMARY_FILE, 'utf8')\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `<h4>Audit&nbsp;<a\n                  href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\"\n                  target=\"_blank\"><sup>[?]</sup></a></h4>\\n\\n${table}\\n\\n`.trim()\n            })\n```"}
{"id": "63c4982f6fc19abdf9ca783f", "level": "level1", "llm_response": "```yaml\nname: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n\ninputs:\n  name-this:\n    description: 'Build and publish an fbpcf/aws-s3-core image for a particular version'\n    required: false\n    default: 'Run'\n  aws_release:\n    description: 'The aws s3 version to build and publish'\n    required: true\n    default: ''\n    type: string\n  os:\n    description: 'Which os to use. Currently only supports ubuntu'\n    required: false\n    default: 'ubuntu'\n    type: string\n  os_release:\n    description: 'The os version to use'\n    required: false\n    default: '20.04'\n    type: string\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: ${{ inputs.os }}\n    if: ${{ inputs.os == 'ubuntu' }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}\n```", "answer": "```yaml name: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/aws-s3-core image for a particular version\"\n        default: \"Run\"\n      aws_release:\n        description: \"The aws s3 version to build and publish (e.g. 1.8.177)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg aws_release=${{ github.event.inputs.aws_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\" \\\n          -f \"docker/aws-s3-core/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core\n```"}
{"id": "63c49f326fc19abdf9cd4900", "level": "level1", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  test:\n    id: test\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PowerShell\n        uses: actions/setup-powershell@v2\n\n      - name: Run tests\n        run: |\n          .\\run-tests.ps1\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    name: Run Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n    - uses: actions/checkout@v1\n    - name: Test\n      shell: pwsh\n      run: ./build.ps1 -Task Test -Bootstrap\n```"}
{"id": "63c49dbd1842bc13d778c451", "level": "level1", "llm_response": "```yaml\nname: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n  run:\n    id: run\n    runs-on: ubuntu-latest\n    steps:\n      # Add your steps here\n```", "answer": "```yaml name: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n run:\n   name: Update translation files\n   if: github.repository == 'uyuni-project/uyuni'\n   runs-on: ubuntu-latest\n   steps:\n   - name: Cancel Previous Runs\n     uses: styfle/cancel-workflow-action@0.10.0\n     with:\n         access_token: ${{ github.token }}\n\n   - name: Checkout repo\n     uses: actions/checkout@v3\n     with:\n       token: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Setup tooling\n     run: sudo apt-get install -y make git gettext intltool python3\n\n   - name: Setup git\n     run: |\n       git config --global user.name \"Galaxy CI\"\n       git config --global user.email \"galaxy-ci@suse.de\"\n\n   - name: Align translations files\n     run: scripts/translation/update-all-translation-strings.sh\n     env:\n       ADDITIONAL_SAFE_BRANCHNAME: master\n       GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Push changes\n     run: git push origin HEAD\n```"}
{"id": "63c49e1a1842bc13d778e9d5", "level": "level1", "llm_response": "```yaml\nname: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run unit tests\n        run: npm test\n\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run browser tests\n        run: npm run test:browser\n\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run performance tests\n        run: npm run test:performance\n```", "answer": "```yaml name: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run unit test\n        run: yarn test:unit\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run browser test\n        run: yarn test:browser\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run performance test\n        run: yarn test:performance\n```"}
{"id": "63c49c8c517fc08c1eef7305", "level": "level1", "llm_response": "```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Merge Dependabot PRs\n        run: |\n          if [[ $GITHUB_EVENT_NAME == \"pull_request\" && $GITHUB_EVENT_PULL_REQUEST_BASE_REF == \"main\" && $GITHUB_EVENT_PULL_REQUEST_USER_LOGIN == \"dependabot[bot]\" ]]; then\n            git config --global user.name \"GitHub Actions\"\n            git config --global user.email \"actions@github.com\"\n            git merge --ff-only $GITHUB_EVENT_PULL_REQUEST_HEAD_REF\n            git push origin main\n          fi\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          target: minor\n          github-token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```"}
{"id": "63c49cd01e336480757a3424", "level": "level1", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Run CodeQL\n      uses: github/codeql-action/analyze@v2\n      with:\n        languages: go\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push: {}\n  pull_request: {}\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49bd9517fc08c1eef2fa7", "level": "level1", "llm_response": "```yaml\nname: Spell Check\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 8 * * 2'\n  workflow_dispatch:\n  repository_dispatch:\n    types: [spellcheck]\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++\n        uses: actions/setup-cpp@v2\n        with:\n          cpp-version: '10'\n\n      - name: Run spell check\n        run: |\n          # Add your spell check command here\n          echo \"Running spell check...\"\n```", "answer": "```yaml name: Spell Check\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch new misspelling detections resulting from dictionary updates.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Spell check\n        uses: codespell-project/actions-codespell@master\n```"}
{"id": "63c4995a6fc19abdf9caf222", "level": "level1", "llm_response": "```yaml\nname: Update MagiskOnWSA\n\non:\n  schedule:\n    - cron: '0 0 * * 4'\n  workflow_dispatch:\n\npermissions:\n  actions: write\n  contents: write\n\njobs:\n  update:\n    id: update\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Run update script\n        run: ./update_script.sh\n```", "answer": "```yaml name: Update MagiskOnWSA\non:\n  schedule:\n    - cron: \"0 0 * * 4\"\n  workflow_dispatch:\n\npermissions:\n    actions: write\n    contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"tag_name\":\"outdated\"}' > /dev/null\n      - name: Delete tag\n        run: |\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest\n      - name: Update MagiskOnWSA\n        run: |\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          sleep 15m\n      - name: Publish release\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"prerelease\":false}' > /dev/null\n      - name: Delete release\n        run: |\n          ID=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/outdated | jq -r .id)\"\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/$ID\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/outdated\n```"}
{"id": "63c4a1401899db5886518aff", "level": "level1", "llm_response": "```yaml\nname: Call commitlint\n\non:\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++ environment\n        uses: actions/setup-cpp@v2\n        with:\n          cpp-version: '10'\n\n      - name: Run commitlint\n        run: npx commitlint --edit HEAD\n```", "answer": "```yaml name: Call commitlint\non:\n  pull_request_target:\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c495f37843b61269a0b106", "level": "level1", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches: [ main ]\n\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/analyze@v1\n        with:\n          languages: go\n```", "answer": "```yaml # Broadly based on example Github action from\n# https://github.com/github/codeql-action#usage\nname: codeql\n# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#permissions\n# https://github.com/github/codeql-action/issues/572\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\non:\n  push:\n    branches:\n      - main\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: initialize\n        if: success()\n        uses: github/codeql-action/init@v2\n        with:\n          # Limit analysis to Go for now.\n          # Available languages: https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\n          languages: go\n      - name: autobuild\n        if: success()\n        uses: github/codeql-action/autobuild@v2\n      - name: analyze\n        if: success()\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f98cbc73931bb1b4f54", "level": "level1", "llm_response": "```yaml\nname: Sync To Gitee\n\non:\n  push:\n    branches:\n      - '*'\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n  delete:\n    branches:\n      - '*'\n    tags:\n      - '*'\n  create:\n    branches:\n      - '*'\n    tags:\n      - '*'\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Git user\n        run: |\n          git config --global user.name \"github-actions\"\n          git config --global user.email \"github-actions@github.com\"\n\n      - name: Sync to Gitee\n        run: |\n          git remote add gitee https://gitee.com/your-username/your-repo.git\n          git push gitee $(git branch --show-current):$(git branch --show-current) --force\n          git push gitee --tags --force\n```", "answer": "```yaml name: Sync To Gitee  #\u540d\u5b57  \u53ef\u81ea\u5b9a\u4e49\non: [ push, delete, create ]  #\u89e6\u53d1\u6761\u4ef6   page_build\u8868\u793aGithub Page\u90e8\u7f72\u5b8c\u6210\u540e\u89e6\u53d1\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master #\u5f00\u6e90actions\u5305\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n        with:\n          source-repo: \"git@github.com:redleafnew/Chinese-STD-GB-T-7714-related-csl.git\" # github\u4ed3\u5e93\u5730\u5740\n          destination-repo: \"git@gitee.com:redleafnew00/Chinese-STD-GB-T-7714-related-csl.git\" # gitee\u4ed3\u5e93\u5730\u5740\n\n```"}
{"id": "63c4a0edcbc73931bb1bd96d", "level": "level1", "llm_response": "```yaml\nname: Unplugin Example\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: Unplugin Example\n\non:\n  push:\n    branches: [main]\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Setup\n        run: npm i -g @antfu/ni\n\n      - name: Install\n        run: nci\n\n      - name: Build\n        run: nr build\n\n      - name: Install Example Dependencies & Build\n        run: pnpm -C examples/vite run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./examples/vite/dist\n          force_orphan: true\n```"}
{"id": "63c499bf1899db58864e8a2a", "level": "level1", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Label pull request\n      run: |\n        python label_pr.py\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a2db008460c1df2c5c9", "level": "level1", "llm_response": "```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Build and publish\n        run: dotnet publish -c Release -o ./publish\n```", "answer": "```yaml name: Release\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Trigger Build flow\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n          repository: ${{ github.repository }}\n          event-type: release\n          client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\n```"}
{"id": "63c498731899db58864e00b5", "level": "level2", "llm_response": "```yaml\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows: [build-ci]\n    branches: [main]\n    types: [completed]\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: true\n\njobs:\n  k3s:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.17\n\n      - name: Run k3s E2E tests\n        run: go test ./e2e/k3s\n\n  rke2:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.17\n\n      - name: Run rke2 E2E tests\n        run: go test ./e2e/rke2\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"id": "63c4a04733b087f6bde6b930", "level": "level2", "llm_response": "```yaml\nname: Coding Style\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  nette_cc:\n    id: nette_cc\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: composer install\n      - name: Run Nette Code Checker\n        run: vendor/bin/nette-code-checker\n      - name: Generate report\n        run: vendor/bin/nette-code-checker --report-html=report.html\n\n  nette_cs:\n    id: nette_cs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: composer install\n      - name: Run Nette Coding Standard\n        run: vendor/bin/nette-coding-standard check\n      - name: Generate report\n        run: vendor/bin/nette-coding-standard check --report-html=report.html\n```", "answer": "```yaml name: Coding Style\n\non: [push, pull_request]\n\njobs:\n    nette_cc:\n        name: Nette Code Checker\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n            - run: php temp/code-checker/code-checker --strict-types --no-progress\n\n\n    nette_cs:\n        name: Nette Coding Standard\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n            - run: php temp/coding-standard/ecs check\n```"}
{"id": "63c4a0eeb008460c1df57100", "level": "level2", "llm_response": "```yaml\nname: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\n      - docs/**\n      - Gemfile\n      - README.md\n  workflow_dispatch:\n  repository_dispatch:\n    types: [build]\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@v2\n        with:\n          access_token: ${{ github.token }}\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Extract branch name\n        id: extract_branch\n        run: echo \"BRANCH_NAME=${{ github.ref#refs/heads/ }}\" >> $GITHUB_ENV\n      - name: Extract commit SHA\n        id: extract_commit_sha\n        run: echo \"COMMIT_SHA=${{ github.sha }}\" >> $GITHUB_ENV\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Build and push\n        run: docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}:latest . --push\n```", "answer": "```yaml name: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'nginx/**'\n      - 'Dockerfiles/nginx.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n      - '_config.yml'\n      - '_includes/**'\n      - '_layouts/**'\n      - 'docs/**'\n      - 'Gemfile'\n      - 'README.md'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Extract commit SHA\n        shell: bash\n        run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n        id: extract_commit_sha\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/nginx.Dockerfile\n          build-args: |\n            VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }}\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```"}
{"id": "63c4989d1842bc13d776b5a5", "level": "level2", "llm_response": "```yaml\nname: Publish release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK 1.11\n      uses: actions/setup-java@v2\n      with:\n        java-version: 1.11\n        distribution:adopt\n\n    - name: Build with Maven\n      run: mvn clean package -B\n\n    - name: Upload release artifact\n      uses: actions/upload-release-asset@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        upload_url: ${{ github.event.release.upload_url }}\n        asset_path: target/*.jar\n        asset_name: my-release.jar\n        asset_content_type: application/java-archive\n```", "answer": "```yaml name: Publish release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build and upload release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Set up JDK 1.11\n        uses: actions/setup-java@v2.3.0\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          check-latest: true\n          cache: 'maven'\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n      - name: Upload release artifact\n        uses: shogo82148/actions-upload-release-asset@v1.3.1\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```"}
{"id": "63c498be6fc19abdf9cab2ce", "level": "level2", "llm_response": "```yaml\nname: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.composer\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n      - name: Checking for sign off (GPG also accepted)\n        run: echo \"Checking for sign off (GPG also accepted)\"\n      - name: Checking file integrity\n        run: echo \"Checking file integrity\"\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: ['7.2', '7.3', '7.4', '8.0']\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup PHP ${{ matrix.php }}\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.composer\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n      - name: Lint PHP files\n        run: php -l $(find . -name \"*.php\")\n```", "answer": "```yaml name: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - run: php -v\n\n    - name: Checking for sign off (GPG also accepted)\n      run: php ./vendor/simplemachines/build-tools/check-signed-off.php\n\n    - name: Checking file integrity\n      run: |\n        php ./vendor/simplemachines/build-tools/check-eof.php\n        php ./vendor/simplemachines/build-tools/check-smf-license.php\n        php ./vendor/simplemachines/build-tools/check-smf-languages.php\n        php ./vendor/simplemachines/build-tools/check-version.php\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [ 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1 ]\n\n    name: PHP ${{ matrix.php }} Syntax Check\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Setup PHP ${{ matrix.php }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - name: Lint PHP files\n      run: vendor/bin/phplint -w --exclude .git --exclude vendor --ansi .\n```"}
{"id": "63c49f746fc19abdf9cd63e6", "level": "level2", "llm_response": "```yaml\nname: hygieia-pr\n\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build image\n        run: |\n          # Add your build image commands here\n          echo \"Building image...\"\n```", "answer": "```yaml ---\nname: hygieia-pr\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\njobs:\n  build:\n    env:\n      context: hygieia\n      image_name: hygieia\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49f38736e7f0ed8c6ce43", "level": "level2", "llm_response": "```yaml\nname: Platform OWASP ZAP\n\non:\n  push:\n    branches:\n      - dev\n    paths-ignore:\n      - .github/**\n      - docs/**\n      - build/**\n      - README.md\n      - LICENSE\n      - **/argoDeploy.json\n  workflow_dispatch:\n\njobs:\n  owasp:\n    id: owasp\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install VirtoCommerce.GlobalTool\n        run: dotnet tool install -g VirtoCommerce.GlobalTool\n\n      - name: Docker Login\n        run: echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n\n      - name: Docker Env\n        run: echo \"export DOCKER_IMAGE=your-docker-image\" >> $GITHUB_ENV\n\n      - name: OWASP ZAP Full Scan\n        run: zap-full-scan --config-file=owasp-zap-config.xml --spider --ajax-spider --recursion 3 --threads 10 --timeout 120s\n```", "answer": "```yaml # v1.2\nname: Platform OWASP ZAP\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - 'docs/**'\n      - 'build/**'\n      - 'README.md'\n      - 'LICENSE'\n      - '**/argoDeploy.json'\n    branches: [ dev ]\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: Install VirtoCommerce.GlobalTool\n        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n\n      - name: Docker Login\n        uses: azure/docker-login@v1\n        with:\n          login-server: ghcr.io\n          username: $GITHUB_ACTOR\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker Env\n        uses: VirtoCommerce/vc-github-actions/docker-env@master\n        with:\n          githubUser: ${{ env.GITHUB_ACTOR }}\n          githubToken: ${{ env.GITHUB_TOKEN }}\n          platformImage: ghcr.io/virtocommerce/platform\n          storefrontImage: ghcr.io/virtocommerce/storefront\n          validateSwagger: 'false'\n\n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-baseline@v0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          docker_name: 'owasp/zap2docker-stable'\n          target: 'http://localhost:8090'\n          cmd_options: '-a -d'\n```"}
{"id": "63c4955b8052faa2781b1498", "level": "level2", "llm_response": "```yaml\nname: CI v2\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup\n        run: echo \"Setting up environment\"\n\n      - name: Prerequisites\n        run: echo \"Installing prerequisites\"\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Dependencies\n        run: go mod download\n\n      - name: Lint\n        run: golint ./...\n\n      - name: Vet\n        run: go vet ./...\n\n      - name: Test\n        run: go test -v ./...\n\n      - name: Coverage\n        run: go test -coverprofile=coverage.out && go tool cover -func=coverage.out\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```"}
{"id": "63c49fe533b087f6bde69242", "level": "level2", "llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greet\n        run: echo \"Hello, world!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request_target, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: \"Thanks for reporting this issue, don't forget to star this project if you haven't already to help us reach a wider audience.\"\n          pr-message: \"Thanks for implementing a fix, could you ensure that the test covers your changes if applicable.\"\n```"}
{"id": "63c49ff0736e7f0ed8c7162c", "level": "level2", "llm_response": "```yaml\nname: Main Workflow\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches:\n      - '*'\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    id: tests\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n\n    steps:\n      - name: Install unrar\n        run: sudo apt-get install unrar\n\n      - name: Set up Python ${{ matrix.python-version }}\n        id: setup-python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: cache poetry install\n        run: |\n          poetry config virtualenvs.create false\n          poetry config virtualenvs.in-project true\n          poetry install --no-root --no-interaction --no-ansi\n\n      - name: Load cached venv\n        id: cached-poetry-dependencies\n        run: |\n          poetry config virtualenvs.create false\n          poetry config virtualenvs.in-project true\n          poetry install --no-root --no-interaction --no-ansi\n\n      - name: Install dependencies\n        run: |\n          poetry config virtualenvs.create false\n          poetry config virtualenvs.in-project true\n          poetry install --no-root --no-interaction --no-ansi\n\n      - name: Install project\n        run: |\n          poetry config virtualenvs.create false\n          poetry config virtualenvs.in-project true\n          poetry install --no-root --no-interaction --no-ansi\n\n      - name: Test with pytest\n        run: |\n          poetry config virtualenvs.create false\n          poetry config virtualenvs.in-project true\n          poetry run pytest\n```", "answer": "```yaml name: Main Workflow\n\non:\n  push:\n    branches:\n    - develop\n  pull_request:\n    branches:\n    - \"*\"\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Run Tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n        operating-system: [ubuntu-latest] # TODO: Fix a couple tests and enable windows. windows-latest\n      fail-fast: false\n    env:\n      POETRY_VERSION: \"1.2.2\"\n    steps:\n    - uses: actions/checkout@v3\n    # Can we cache the apt-get stuff somehow?\n    - name: Install unrar  # used by some flexget tests\n      if: matrix.operating-system == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -qy unrar\n    # There is some poetry caching built in to setup-python, but there seems to be some confusion\n    # about whether it works well when using a matrix of different python versions. Doing caching\n    # manually for now, until there is more info.\n    - name: Set up Python ${{ matrix.python-version }}\n      id: setup-python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache poetry install\n      uses: actions/cache@v3\n      with:\n        path: ~/.local\n        key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0  # increment last number to reset cache\n    - uses: snok/install-poetry@v1\n      with:\n        version: ${{ env.POETRY_VERSION }}\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n    - name: Install dependencies\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n      run: poetry install --no-interaction --no-root\n    - name: Install project\n      run: poetry install --no-interaction\n    - name: Test with pytest\n      run: |\n        poetry run pytest -n auto\n```"}
{"id": "63c4977fcbc73931bb180c41", "level": "level2", "llm_response": "```yaml\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark-this:\n        description: 'Benchmark to run'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Build\n      run: ./mvnw clean install\n\n    - name: Benchmark\n      run: ./mvnw exec:java -Dexec.mainClass=\"com.example.Benchmark\" -Dexec.args=\"${{ github.event.inputs.benchmark-this }}\"\n\n    - name: Upload Result\n      uses: actions/upload-artifact@v2\n      with:\n        name: benchmark-result\n        path: target/benchmark-result.txt\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark:\n        description: 'benchmark'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: ./dev/make-distribution.sh -Pspark-3.2 && rm -rf /home/hadoop/celeborn-toolkit/dist/* && mv celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/\n\n      - name: Benchmark\n        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark\n\n      - name: Upload Result\n        uses: actions/upload-artifact@v3\n        with:\n          name: benchmark result\n          path: /home/hadoop/celeborn-toolkit/result/```"}
{"id": "63c49f1e1e336480757b1d5b", "level": "level2", "llm_response": "```yaml\nname: Code scanning - action\n\non:\n  push:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  schedule:\n    - cron: '0 14 * * 4'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code scanning - action\"\n\non:\n  push:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  pull_request:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  schedule:\n    - cron: \"0 14 * * 4\"\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f8eb008460c1df4e97d", "level": "level2", "llm_response": "```yaml\nname: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel\n\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: |\n          pip install GitPython cloudevents\n\n      - name: Create Tag\n        run: |\n          git tag -a v1.0.0 -m \"Release version 1.0.0\"\n          git push origin v1.0.0\n```", "answer": "```yaml name: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - name: Install build dependencies\n        run: pip install -U setuptools wheel build\n      - name: Build\n        run: python -m build .\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install -U -r requirements/publish.txt\n      - name: Create Tag\n        run: python pypi_packaging.py\n```"}
{"id": "63c4990d33b087f6bde3cce0", "level": "level2", "llm_response": "```yaml\nname: Test C\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/workflows/test-lang-c.yml\n      - lang/c/**\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Install Dependencies\n      - name: Lint\n      - name: Test\n      - name: Cache Local Maven Repository\n      - name: Install Java Avro for Interop Test\n      - name: Create Interop Data Directory\n      - name: Generate Interop Resources\n      - name: Generate Interop Data\n      - name: Run Interop Tests\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Install Dependencies\n      - name: Cache Local Maven Repository\n      - name: Install Java Avro for Interop Test\n      - name: Create Interop Data Directory\n      - name: Generate Interop Resources\n      - name: Generate Interop Data\n      - name: Run Interop Tests\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - .github/workflows/test-lang-c.yml\n    - lang/c/**\n\ndefaults:\n  run:\n    working-directory: lang/c\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy libjansson-dev libsnappy-dev\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                            libjansson-dev \\\n                                                            liblzma-dev \\\n                                                            libsnappy-dev \\\n                                                            libzstd-dev\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n```"}
{"id": "63c4a0571842bc13d779cf83", "level": "level2", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Release Draft\n        uses: release-drafter/release-drafter@v5\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n          config-name: notes.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c49c4a1842bc13d7782abd", "level": "level2", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Release Draft\n        uses: release-drafter/release-drafter@v5\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n#         (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n         config-name: config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}```"}
{"id": "63c499511899db58864e5d14", "level": "level2", "llm_response": "```yaml\nname: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Triage issue comment\n        run: |\n          echo \"Processing issue comment...\"\n          # Add your triage logic here\n```", "answer": "```yaml name: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          labels: |\n            stale\n            waiting-reply\n```"}
{"id": "63c4a08333b087f6bde6d0fe", "level": "level2", "llm_response": "```yaml\nname: Semantic Pull Request\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n  pull_request_target:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n  pull-requests: read\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate PR title\n        run: |\n          # Add your validation logic here\n          echo \"Validating PR title...\"\n```", "answer": "```yaml name: Semantic Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions: {}\njobs:\n  main:\n    permissions:\n      pull-requests: read # to analyze PRs (amannn/action-semantic-pull-request)\n      statuses: write # to mark status of analyzed PR (amannn/action-semantic-pull-request)\n\n    runs-on: ubuntu-latest\n    name: Semantic Pull Request\n    steps:\n      - name: Validate PR title\n        uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |\n            feat\n            fix\n            chore\n            refactor\n            docs\n            test\n            ci\n            build\n            infra\n            revert\n```"}
{"id": "63c4a0e71e336480757bcf80", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: python\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e3533b087f6bde5e450", "level": "level2", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Mark stale issues and pull requests\n        uses: actions/stale@v4\n        with:\n          days-before-stale: 90\n          days-before-close: 7\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          close-issue-label: 'closed'\n          close-pr-label: 'closed'\n          exempt-issue-labels: 'important,bug'\n          exempt-pr-labels: 'important,enhancement'\n          only-labels: 'bug,enhancement'\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # SPDX-License-Identifier: Apache-2.0\n# Copyright 2019 Intel Corporation\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-pr-message: 'This pull request has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-issue-label: 'stale/issue'\n        stale-pr-label: 'stale/pr'\n        days-before-stale: 30\n        days-before-close: 5\n```"}
{"id": "63c49be0517fc08c1eef3298", "level": "level2", "llm_response": "```yaml\nname: Example Integration on Pull Request\n\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - closed\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Plant a Tree\n        id: planttree\n        run: echo \"Planting a tree for every pull request closed on main branch.\"\n\n      - name: Response of digitalhumani.com RaaS API\n        run: echo \"Fetching response from digitalhumani.com RaaS API.\"\n```", "answer": "```yaml name: Example Integration on Pull Request\non: \n  pull_request_target:\n    branches:\n      - main\n    types:\n      - closed\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Plant a Tree\n        if: github.event.pull_request.merged == true\n        id: planttree\n        uses: protontypes/continuous-reforestation@main\n        with:\n        # Enter your API variables below\n            apikey: ${{ secrets.raaskey }}\n            enterpriseid: \"cd7cedcd\"\n            user: ${{ github.actor }}\n            treecount: 5\n            projectid: \"14442771\" # This projectid can be used to have your trees planted where they are needed the most.\n            production: \"false\"\n\n      - name: Response of digitalhumani.com RaaS API\n        run: |\n            echo \"${{ steps.planttree.outputs.response }}\"\n            echo \"${{ steps.planttree.outputs.plantedTrees }}\"\n```"}
{"id": "63c49dc31842bc13d778c6ac", "level": "level2", "llm_response": "```yaml\nname: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches:\n      - main\n  issues:\n    types: [opened]\n  comment:\n    issue_comment:\n    pull_request_review_comment:\n  pull_request:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          # Add your PowerShell script for Step 1 here\n      - name: Step 2\n        run: |\n          # Add your PowerShell script for Step 2 here\n```", "answer": "```yaml name: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches: [main]\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Hey friend! Thanks for opening this issue. We appreciate your contribution and welcome you to our community! We are glad to have you here and to have your input on the Azure Arc Jumpstart.'\n          pr-message: 'Hi friend! Thanks you for opening this Pull Request. Someone will review it soon. Thank you for committing to making the Azure Arc Jumpstart better.'\n```"}
{"id": "63c49e961842bc13d7791c8a", "level": "level2", "llm_response": "```yaml\nname: Publish\n\non:\n  draft:\n    types: [published]\n  release:\n    types: [published]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build project\n      run: npm run build\n\n    - name: Publish to npm\n      run: npm publish\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [created]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: npm\n      - run: npm ci\n      - run: npm test\n      - run: npm version ${TAG_NAME} --git-tag-version=false\n        env:\n          TAG_NAME: ${{ github.event.release.tag_name }}\n      - run: npm whoami; npm --ignore-scripts publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```"}
{"id": "63c49b631d1c0d6c2d08006a", "level": "level2", "llm_response": "```yaml\nname: CI Bot\n\non:\n  issue:\n    types: [opened]\n  pull_request:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_comment:\n    types: [created]\n  pull_request_review_comment:\n    types: [created]\n\nenv:\n  PLUGINS: assign auto-cc cc label-kind label-bug label-documentation label-enhancement label-question\n  MEMBERS_PLUGINS: label-duplicate label-good-first-issue label-help-wanted label-invalid label-kind label-wontfix lifecycle\n  REVIEWERS_PLUGINS: retitle\n  APPROVERS_PLUGINS: merge\n  MAINTAINERS_PLUGINS: milestone\n  OWNERS_PLUGINS: \n  REVIEWERS: pacoxu wzshiming\n  APPROVERS: pacoxu wzshiming\n  MAINTAINERS: pacoxu wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\n\njobs:\n  issue_opened:\n    id: issue_opened\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n\n  pr_opened:\n    id: pr_opened\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n\n  issue_commented:\n    id: issue_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n\n  pr_review_commented:\n    id: pr_review_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n\n  pr_commented:\n    id: pr_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n```", "answer": "```yaml name: CI Bot\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_review_comment:\n    types:\n      - created\n  issues:\n    types:\n      - opened\n  pull_request:\n    types:\n      - opened\n\nenv:\n  # This plugins is for anyone who can use it\n  PLUGINS: |-\n    assign\n    auto-cc\n    cc\n    label-kind\n    label-bug\n    label-documentation\n    label-enhancement\n    label-question\n  \n  # This plugins is for organization member or repository member\n  MEMBERS_PLUGINS: |-\n    label-duplicate\n    label-good-first-issue\n    label-help-wanted\n    label-invalid\n    label-kind\n    label-wontfix\n    lifecycle\n  \n  # This plugins is for in the REVIEWERS environment variable\n  REVIEWERS_PLUGINS: |-\n    retitle\n  # This plugins is for in the APPROVERS environment variable\n  APPROVERS_PLUGINS: |-\n    merge\n  # This plugins is for in the MAINTAINERS environment variable\n  MAINTAINERS_PLUGINS: |-\n    milestone\n  # This plugins is for organization owner or repository owner\n  OWNERS_PLUGINS: \"\"\n\n  REVIEWERS: |-\n    pacoxu\n    wzshiming\n  APPROVERS: |-\n    pacoxu\n    wzshiming\n  MAINTAINERS: |-\n    pacoxu\n    wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |-\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\njobs:\n\n  issue_opened:\n    name: Issue Opened\n    if: ${{ github.event_name == 'issues' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.issue.user.login }}\n          MESSAGE: ${{ github.event.issue.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.issue.author_association }}\n          ISSUE_KIND: issue\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.issue.user.login }},\n            Thanks for opening an issue!\n            We will look into it as soon as possible.\n  pr_opened:\n    name: PR Opened\n    if: ${{ github.event_name == 'pull_request' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.pull_request.user.login }}\n          MESSAGE: ${{ github.event.pull_request.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}\n          ISSUE_KIND: pr\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.pull_request.user.login }},\n            Thanks for your pull request!\n            If the PR is ready, use the `/auto-cc` command to assign Reviewer to Review. \n            We will review it shortly.\n  issue_commented:\n    name: Issue Commented\n    if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: issue\n          TYPE: comment\n\n  pr_review_commented:\n    name: PR Review Commented\n    if: ${{ github.event_name == 'pull_request_review_comment' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n\n  pr_commented:\n    name: PR Commented\n    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n```"}
{"id": "63c5ae896b748c7b1fadef81", "level": "level2", "llm_response": "```yaml\nname: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n  pull_request:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n\njobs:\n  build:\n    runs-on: ubuntu-focal\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run build script\n        run: ./build.sh\n```", "answer": "```yaml name: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n  pull_request:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n\njobs:\n  build:\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets: inherit\n```"}
{"id": "63c4a0981899db5886514a5b", "level": "level2", "llm_response": "```yaml\nname: [RUN] Discord new release announcement\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  push-announcement:\n    id: push-announcement\n    runs-on: ubuntu-latest\n    steps:\n      - name: CURL Discord API with announcement\n        run: |\n          curl -X POST https://discord.com/api/webhooks/YOUR_WEBHOOK_URL \\\n          -H \"Content-Type: application/json\" \\\n          -d '{\"content\": \"New release is available! Check it out: https://github.com/YOUR_USERNAME/YOUR_REPOSITORY/releases/latest\"}'\n```", "answer": "```yaml name: '[RUN] Discord new release announcement'\n   \non:\n  release:\n    types: [released]\n\njobs:\n  push-announcement:\n    name: Pushing release announcement to Discord\n    runs-on: ubuntu-latest\n    env:      \n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n    steps:\n    - name: CURL Discord API with announcement\n      shell: bash\n      run: |\n        CHANGELOG=$(curl -s https://api.github.com/repos/nethermindeth/nethermind/releases | jq '.[0].body' | grep -Po '(?<=## )(.*?)(?=\\##)')\n        read VERSION LINK < <(echo $(curl -s 'https://api.github.com/repos/nethermindeth/nethermind/releases' | jq -r '.[0].name, .[0].html_url'))\n        MESSAGE=\"**New Nethermind release version: ${VERSION}**\\n\\n${CHANGELOG}<${LINK}>\"\n        curl -s -H \"Content-Type: application/json\" -d '{\"username\": \"Nethermind\", \"content\": \"'\"$MESSAGE\"'\"}' $WEBHOOK_URL > /dev/null 2>&1```"}
{"id": "63c49e9a1899db5886507bf7", "level": "level2", "llm_response": "```yaml\nname: vpinball-gl\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  repository_dispatch:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    id: dxsdk\n    runs-on: windows-latest\n    steps:\n      - name: Cache\n        id: cache\n      - name: Create Cache\n\n  version:\n    id: version\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n      - name: Step 2\n        id: version\n\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        config: [ 'debug', 'release' ]\n        platform: [ 'x64', 'x86' ]\n    steps:\n      - name: Step 1\n      - name: Step 2\n      - name: Step 3\n      - name: Build\n      - name: Step 5\n      - name: Step 6\n```", "answer": "```yaml name: vpinball-gl\non:\n  push:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n#  UPX_ARTIFACT: 345209471\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    name: DirectX SDK\n    runs-on: windows-latest\n    steps:\n      - id: cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Create Cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe\n          7z x DXSDK_Jun10.exe DXSDK/Include -otmp\n          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp\n          mv tmp/DXSDK DXSDK\n          rm -fR DXSDK_Jun10.exe tmp\n          ls -Ra DXSDK\n\n  version:\n    name: Version\n    runs-on: ubuntu-latest\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - id: version\n        run: |\n          VERSION_MAJOR=$(grep -Eo \"VP_VERSION_MAJOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_MINOR=$(grep -Eo \"VP_VERSION_MINOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_REV=$(grep -Eo \"VP_VERSION_REV\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)\n          SHA7=\"${GITHUB_SHA::7}\"\n          TAG=\"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}-${REVISION}-${SHA7}\"\n          echo \"revision=${REVISION}\" >> $GITHUB_OUTPUT\n          echo \"sha7=${SHA7}\" >> $GITHUB_OUTPUT\n          echo \"tag=${TAG}\" >> $GITHUB_OUTPUT\n\n  build:\n    name: Build VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\n    runs-on: windows-latest\n    needs: [ dxsdk, version ]\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Release\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Debug\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Release\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Debug\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - run: |\n          sed -i \"s/0/${{ needs.version.outputs.revision }}/g\" git_version.h\n          sed -i \"s/unknown/${{ needs.version.outputs.sha7 }}/g\" git_version.h\n      - name: Build\n        run: |\n          export DXSDK_DIR=\"${GITHUB_WORKSPACE}/DXSDK\"\n          cp cmake/CMakeLists_${{ matrix.platform}}.txt CMakeLists.txt\n          cmake -G \"Visual Studio 17 2022\" -A ${{ matrix.platform-name }} -B build\n          cmake --build build --config ${{ matrix.config }}\n#      - name: Compress\n#        if: matrix.config == 'Release'\n#        run: |\n#          curl -sL -H \"Authorization: Token ${{ secrets.GH_PAT }}\" https://api.github.com/repos/upx/upx/actions/artifacts/${{ env.UPX_ARTIFACT }}/zip -o upx.zip\n#          7z x upx.zip -oupx\n#          rm upx.zip\n#          ./upx/upx.exe --best --lzma build/${{ matrix.config }}/VPinballX_GL.exe\n      - run: |\n          mkdir tmp \n          cp build/${{ matrix.config }}/VPinballX_GL.* tmp\n          cp dll/${{ matrix.bass }} tmp\n          cp dll/${{ matrix.free-image }} tmp\n          cp dll/${{ matrix.sci-lexer-vp }} tmp\n          cp dll/${{ matrix.sdl2-ttf }} tmp\n          cp dll/${{ matrix.sdl2 }} tmp\n          cp dll/${{ matrix.openvr-api }} tmp\n          cp txt/Changelog_Scripts.txt tmp\n          cp txt/Changelog.txt tmp\n          cp txt/CommandLineParameters.txt tmp\n          cp txt/CommandReference.txt tmp\n          cp txt/Hotkeys.txt tmp\n          cp \"txt/JP's VPX7 Physics Materials.mat\" tmp\n          cp \"txt/JP's VPX7 Physics.pdf\" tmp\n          cp \"txt/JP's VPX7 script addons vbs.txt\" tmp\n          cp \"txt/JP's VPX7 Table physics.vpp\" tmp\n          cp txt/layoutGuideline.txt tmp\n          cp txt/license.txt tmp\n          cp \"txt/New Plunger Documentation.pdf\" tmp\n          cp txt/PhysicValues.txt tmp\n          cp txt/RegistryKeys.txt tmp\n          cp txt/Scripts.txt tmp \n          cp -r glshader tmp \n          cp -r scripts tmp\n          cp -r tables tmp\n      - uses: actions/upload-artifact@v3\n        with:\n          name: VPinballX_GL-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}\n          path: tmp\n```"}
{"id": "63c49ac7517fc08c1eeec341", "level": "level2", "llm_response": "```yaml\nname: Lint Pull Request Title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Lint Pull Request Title\n        run: |\n          echo \"Pull request title: ${{ github.event.pull_request.title }}\"\n          echo \"Pull request body: ${{ github.event.pull_request.body }}\"\n          # Add your linting logic here\n```", "answer": "```yaml name: \"Lint Pull Request Title\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Lint Pull Request Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4.5.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49dce517fc08c1eeff4b2", "level": "level2", "llm_response": "```yaml\nname: DCO check\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    id: reverted-pr-check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        run: echo \"::set-output name=is_reverted::true\"\n      - name: Save Reverted PR output\n        run: echo \"Reverted PR check output saved\"\n\n  dco_check_job:\n    id: dco_check_job\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR Commits\n        id: get-pr-commits\n        run: echo \"Fetching PR commits\"\n      - name: DCO Check\n        run: echo \"Running DCO check\"\n      - name: Save PR number\n        run: echo \"PR number saved\"\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: DCO check\non:\n  pull_request:\n    types: [ opened, reopened, synchronize ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    name: Reverted PR Check Job\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    # Map a step output to a job output\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n      - name: Save Reverted PR output\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ steps.reverted_pr_check.outputs.is_reverted_pr }} > ./pr/is_reverted_pr\n          echo -n \"false\" > ./pr/skipped\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n\n  dco_check_job:\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    name: DCO Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR Commits\n        id: 'get-pr-commits'\n        uses: tim-actions/get-pr-commits@c64db31d359214d244884dd68f971a110b29ab83 # pin@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21 # pin@master\n        with:\n          commits: ${{ steps.get-pr-commits.outputs.commits }}\n      # Need to save PR number as Github action does not propagate it with workflow_run event\n      - name: Save PR number\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ github.event.number }} > ./pr/pr_number\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n```"}
{"id": "63c4a116736e7f0ed8c78a89", "level": "level2", "llm_response": "```yaml\nname: Push-Checks\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Setup flake8 annotations\n        run: |\n          pip install flake8\n\n      - name: Lint with flake8\n        run: |\n          flake8 .\n```", "answer": "```yaml # This workflow will:\n#\n#   * install Python dependencies\n#   * lint with a single version of Python\n#\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Push-Checks\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version-file: '.python-version'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install wheel flake8 pytest\n        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi\n    \n    - name: Setup flake8 annotations\n      uses: rbialon/flake8-annotations@v1\n    \n    - name: Lint with flake8\n      env:\n        ROOT_SHA: ${{github.base_ref}}\n      run: |\n        DATA=$(jq --raw-output .before $GITHUB_EVENT_PATH)\n\n        echo \"DATA: ${DATA}\"\n        # stop the build if there are Python syntax errors or undefined names, ignore existing \n        git diff \"$DATA\" | flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --diff\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        git diff \"$DATA\" | flake8 . --count --statistics --diff\n```"}
{"id": "63c497691e33648075780e11", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '40 18 * * 1'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: typescript\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    #        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n    #        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n    #        \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n    #        \u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12 or JAN-DEC)\n    #        \u2502  \u2502  \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6 or SUN-SAT)\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        *  *  * * *\n    - cron: \"40 18 * * 1\"\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: javascript\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49c55517fc08c1eef5d3f", "level": "level2", "llm_response": "```yaml\nname: Mkdocs publish\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install pip\n        run: |\n          python -m ensurepip --upgrade\n          python -m pip install --upgrade pip\n      - name: Install MkDocs\n        run: pip install mkdocs\n      - name: MkDocs build\n        run: mkdocs build\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```", "answer": "```yaml   # This is a basic workflow to help you get started with Actions\n\nname: Mkdocs publish\n\n# Controls when the action will run.\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      - name: Install pip\n        run: python3 -m pip install --upgrade pip setuptools wheel\n\n      - name: Install MkDocs\n        run: |\n          pip install mkdocs\n          pip install mkdocs-macros-plugin\n\n      - name: MkDocs build\n        run: mkdocs build\n\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```"}
{"id": "63c49cfab008460c1df3e23b", "level": "level2", "llm_response": "```yaml\nname: Check PR title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  check_pr_title:\n    id: check_pr_title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Check PR title\n\non:\n    pull_request_target:\n        types: [ opened, edited, synchronize ]\n\njobs:\n    check_pr_title:\n        name: 'Check PR title'\n        runs-on: ubuntu-latest\n        steps:\n            -   uses: amannn/action-semantic-pull-request@v4.6.0\n                env:\n                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4996733b087f6bde3f1c8", "level": "level2", "llm_response": "```yaml\nname: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v2\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Publish to Open VSX Registry\n        run: npm run publish:vsix\n```", "answer": "```yaml name: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: yarn install --immutable\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          pat: ${{ secrets.OPEN_VSX_TOKEN }}\n```"}
{"id": "63c4a0576fc19abdf9cdc124", "level": "level2", "llm_response": "```yaml\nname: Examples\n\non:\n  push:\n    branches:\n      - main\n      - 'maintenance/**'\n  pull_request:\n    branches:\n      - main\n      - 'maintenance/**'\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [3.8, 3.9, 3.10]\n        rdkit: [latest, 2021.09.3]\n        openeye: [latest, 2021.09.3]\n\n    defaults:\n      run:\n        shell: bash -l {0}\n\n    steps:\n      - name: Set environment variables\n        run: |\n          echo \"ENVFILE=environment.yml\" >> $GITHUB_ENV\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        run: conda env create -f ${{ env.ENVFILE }}\n\n      - name: Additional info about the build\n        run: echo \"Building with Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\"\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        run: echo ${{ secrets.OE_LICENSE }} > oe_license.txt\n\n      - name: Install package\n        run: conda install -c conda-forge rdkit openeye\n\n      - name: Remove undesired toolkits\n        run: conda remove -n base -c conda-forge toolkit1 toolkit2\n\n      - name: Check installed toolkits\n        run: conda list\n\n      - name: Check uninstalled toolkits\n        run: conda list -n base -c conda-forge | grep -v \"rdkit\\|openeye\"\n\n      - name: Environment Information\n        run: conda info\n\n      - name: Run example scripts\n        run: python examples/*.py\n\n      - name: Run example notebooks\n        run: jupyter nbconvert --to notebook --execute examples/*.ipynb\n```", "answer": "```yaml name: Examples\n\non:\n  push:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  pull_request:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  schedule:\n    - cron: \"0 0 * * *\"\n\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  test:\n    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') || (github.event_name != 'schedule')\n    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.8\"]\n        rdkit: [true, false]\n        openeye: [true, false]\n        exclude:\n          - rdkit: false\n            openeye: false\n          - rdkit: true\n            openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 2\n\n      - name: Set environment variables\n        run: |\n          if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then\n              echo \"ENVFILE=openeye\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=OPENEYE\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=ambertools rdkit\" >> $GITHUB_ENV\n          fi\n\n          if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then\n              echo \"ENVFILE=rdkit\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=RDKIT\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=openeye-toolkits\" >> $GITHUB_ENV\n          fi\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml\n          extra-specs: |\n            python=${{ matrix.python-version }}\n\n      - name: Additional info about the build\n        run: |\n          uname -a\n          df -h\n          ulimit -a\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        shell: bash\n        env:\n          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}\n        run: |\n          echo \"${OE_LICENSE_TEXT}\" > ${OE_LICENSE}\n\n      - name: Install package\n        run: |\n          # Maybe remove the packaged openff-toolkit, installed as a dependency of openmmforcefields\n          # and/or Interchange\n          conda remove --force openff-toolkit-base\n          python setup.py develop --no-deps\n\n      - name: Remove undesired toolkits\n        run: |\n          # If openmmforcefields is included in examples/environment.yaml,\n          # remove RDKit and AmberTools brought in by it. Currently it's not included,\n          # so don't remove it.\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do\n              if [[ $(conda list | grep $cpkg) ]]; then conda remove --force $cpkg --yes ; fi\n            done\n          fi\n\n      - name: Check installed toolkits\n        run: |\n          for tk in ${{ env.TOOLKIT_CHECKS }}; do\n            python -c \"from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'\"\n          done\n\n      - name: Check uninstalled toolkits\n        run: |\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for tk in ${{ env.PACKAGES_TO_REMOVE }}; do\n              TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')\n              python -c \"from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'\"\n            done\n          fi\n      - name: Environment Information\n        run: |\n          conda info\n          conda list\n\n      - name: Run example scripts\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            PYTEST_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            PYTEST_ARGS+=\" --ignore=examples/QCArchive_interface\"\n          fi\n          pytest $PYTEST_ARGS openff/toolkit/tests/test_examples.py\n\n      - name: Run example notebooks\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            NB_ARGS+=\" --ignore=examples/QCArchive_interface\"\n            NB_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            NB_ARGS+=\" --ignore=examples/conformer_energies\"\n            NB_ARGS+=\" --ignore=examples/using_smirnoff_in_amber_or_gromacs\"\n          fi\n\n          # openmmforcefields incompatible with new toolkit\n          NB_ARGS+=\" --ignore=examples/external/swap_amber_parameters/swap_existing_ligand_parameters_with_openmmforcefields.ipynb\"\n\n          python -m pytest $PYTEST_ARGS $NB_ARGS examples\n```"}
{"id": "63c49d69736e7f0ed8c61514", "level": "level2", "llm_response": "```yaml\nname: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Create GitHub release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Create GitHub release\n        uses: Roang-zero1/github-create-release-action@master\n        with:\n          version_regex: ^v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4968a1e3364807577b4a5", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Autobuild\n        run: |\n          go build -v ./...\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4991e33b087f6bde3d441", "level": "level2", "llm_response": "```yaml\nname: Releasability\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5'  # 01:00 AM, Monday through Friday\n  workflow_dispatch:  # Allows manual triggering\n\ninputs:\n  releaseFamily:\n    description: 'Release family (vx.y)'\n    required: false\n    type: string\n  moduleReleaseFamily:\n    description: 'Module release family (vx.y)'\n    required: false\n    type: string\n  slackChannel:\n    description: 'Slack channel (release-#)'\n    required: false\n    type: string\n\njobs:\n  releasability:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run releasability checks\n        run: |\n          go run ./cmd/releasability --releaseFamily=${{ github.event.inputs.releaseFamily }} --moduleReleaseFamily=${{ github.event.inputs.moduleReleaseFamily }} --slackChannel=${{ github.event.inputs.slackChannel }}\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Releasability'\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5' # 6am Pacific, weekdays.\n\n  workflow_dispatch:      # Manual trigger.\n    inputs:\n      releaseFamily:\n        description: 'Release? (vX.Y)'\n        required: false\n      moduleReleaseFamily:\n        description: 'Module Release? (vX.Y)'\n        required: false\n      slackChannel:\n        description: 'Slack Channel? (release-#)'\n        required: false\n\njobs:\n  releasability:\n    uses: knative/actions/.github/workflows/releasability.yaml@main\n    with:\n      releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n      moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n      slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n    secrets:\n      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```"}
{"id": "63c49d616fc19abdf9cc8e74", "level": "level2", "llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Generate changelog\n        id: changelog\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create release\"\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    name: \"Deploy\"\n    runs-on: \"ubuntu-latest\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          myToken: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n\n      - name: \"Create release\"\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```"}
{"id": "63c499d31899db58864e92ea", "level": "level2", "llm_response": "```yaml\nname: Build AIO-switch-updater\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: update repo\n      run: |\n        # Add commands to update the repo here\n\n    - name: Building aio-switch-updater\n      run: |\n        # Add commands to build aio-switch-updater here\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@v2\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater\n```", "answer": "```yaml name: Build AIO-switch-updater\n\non: \n  push:\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n    #container: hamletdufromage/devkita64_devkitarm\n    container: devkitpro/devkita64\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        git submodule update --init --recursive\n        \n    - name: Building aio-switch-updater\n      run: |\n        make -C aiosu-forwarder -f Makefile\n        make -j$(nproc)\n        \n    - uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater.nro\n```"}
{"id": "63c4973b517fc08c1eed5918", "level": "level2", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Create release\n        run: echo \"Release created\"\n```", "answer": "```yaml name: 'Release'\n\non:\n  push:\n    branches:\n      - 'main'\n\njobs:\n  release:\n    if: \"startsWith(github.event.head_commit.message, 'Release: v')\"\n    name: 'Release'\n    uses: 'google-github-actions/.github/.github/workflows/release.yml@v0'\n```"}
{"id": "63c49ebdb008460c1df494c2", "level": "level2", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49f55517fc08c1ef0903b", "level": "level2", "llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [opened, closed, synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: CLA Assistant\n        run: echo \"Performing CLA Assistant task\"\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://github.com/theskeletoncrew/treat-toolbox/blob/main/CLA.md' # e.g. a CLA or a DCO document\n          # branch should not be protected\n          branch: 'main'\n          allowlist: skeletoncrewrip,cosimo-rip\n\n         #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```"}
{"id": "63c4a0cc6fc19abdf9cde85c", "level": "level2", "llm_response": "```yaml\nname: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up CMake\n        uses: actions/setup-cmake@v2\n\n      - name: Install format dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y clang-format\n\n      - name: Configure\n        run: cmake -B build -S .\n\n      - name: Check style\n        run: cmake --build build --target check_style\n```", "answer": "```yaml name: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: \"**/cpm_modules\"\n          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}\n\n      - name: Install format dependencies\n        run: |\n          choco install llvm --version 15.0.1 -y\n          choco install ninja -y\n          pip3 install cmake_format==0.6.11 pyyaml\n\n      - name: configure\n        run: cmake -G Ninja -S . -B build -DTP_BUILD_EXAMPLES=OFF\n\n      - name: check style\n        run: cmake --build build --target check-format\n```"}
{"id": "63c5c621ac4f2678a5bd7766", "level": "level2", "llm_response": "```yaml\nname: Reusable - Spotless\n\non:\n  workflow_dispatch:\n    inputs:\n      cache-read-only:\n        description: 'Cache read-only'\n        required: false\n        type: boolean\n      no-build-cache:\n        description: 'No build cache'\n        required: false\n        type: boolean\n\nsecrets:\n  GRADLE_ENTERPRISE_ACCESS_KEY:\n    description: 'Gradle Enterprise access key'\n    required: false\n  GE_CACHE_USERNAME:\n    description: 'GE cache username'\n    required: false\n  GE_CACHE_PASSWORD:\n    description: 'GE cache password'\n    required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK for running Gradle\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Spotless\n      run: ./gradlew spotlessCheck\n```", "answer": "```yaml name: Reusable - Spotless\n\non:\n  workflow_call:\n    inputs:\n      cache-read-only:\n        type: boolean\n        required: false\n      no-build-cache:\n        type: boolean\n        required: false\n    secrets:\n      GRADLE_ENTERPRISE_ACCESS_KEY:\n        required: false\n      GE_CACHE_USERNAME:\n        required: false\n      GE_CACHE_PASSWORD:\n        required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK for running Gradle\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n\n      - name: Spotless\n        uses: gradle/gradle-build-action@v2\n        env:\n          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n        with:\n          arguments: spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}\n          cache-read-only: ${{ inputs.cache-read-only }}\n          # gradle enterprise is used for the build cache\n          gradle-home-cache-excludes: caches/build-cache-1\n```"}
{"id": "63c49b20b008460c1df324d1", "level": "level2", "llm_response": "```yaml\nname: release_candidate\n\non:\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          # Add your step 1 commands here\n      - name: Step 2\n        run: |\n          # Add your step 2 commands here\n```", "answer": "```yaml # Release Candidate GitHub Action\n\nname: release_candidate\n\n# TODO(actions):\n# - [x] create a new AUTO-RC-<DATE> branch\n# - [x] update CHANGES.rst\n# - [x] create changes commit\n# - [x] push to GH\n# - [ ] update README.rst\n# - [ ] create readme commit\n# - [ ] push to GH\n# - [ ] open a PR to `master`\n\n# TODO(general):\n# - [ ] setup the action\n# - [ ] cleanup the action\n\non:\n  schedule:\n    - cron:  '0 0 1 * *'  # each 1st day of the month\n  workflow_dispatch:      # on manual trigger\n\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Flag to fetch all history.\n          #   @see https://github.com/marketplace/actions/checkout#Fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n      - run: |\n          RC_DATE=$(date +'%m-%d-%Y')\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git checkout -b auto-release-candidate-${RC_DATE}\n          git push -u origin auto-release-candidate-${RC_DATE}\n\n          git status\n          git fetch\n\n          ./bin/update_changelog.sh\n\n          git add CHANGES.rst\n          git commit -m \"chore(rc-changes): update Changes.rst\"\n          git push\n\n          gh pr create  --title \"chore(auto-release-candidate-${RC_DATE})\" \\\n                        --body \"Automated release candidate for ${RC_DATE}.\" \\\n                        --base master \\\n                        --draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c4a0961842bc13d779e955", "level": "level2", "llm_response": "```yaml\nname: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```"}
{"id": "63c494dd8052faa2781add7b", "level": "level2", "llm_response": "```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  workflow_dispatch:\n    inputs:\n      type:\n        description: 'Event type'\n        required: true\n        type: string\n        default: 'rerun-ci'\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    id: unix\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        java-version: [8, 11, 17]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Continuous Integration\n\non:\n  push:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  repository_dispatch:\n    types: [rerun-ci]\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    name: JDK ${{ matrix.java.version }} - on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 60\n    strategy:\n      matrix:\n        os: [ macos-latest ]\n        java:\n          - {\n            version: 11\n          }\n          - {\n            version: 17\n          }\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build with Maven\n        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true\n```"}
{"id": "63c49d3433b087f6bde57d87", "level": "level2", "llm_response": "```yaml\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\njobs:\n  Kics:\n    id: kics\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run Kics\n        run: kics scan --path .\n        env:\n          DEBUG: ${{ github.event.inputs.debug-the }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-02-01 19:36:08 +0000 (Tue, 01 Feb 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  kics:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Kics\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496401e3364807577961d", "level": "level2", "llm_response": "```yaml\nname: Test commit or pull request\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Setup NPM\n        run: npm install -g npm@7\n      - name: Install dependencies\n        run: npm install\n      - name: Test with eslint\n        run: npm test -- --ext .js,.jsx\n\n  stylelint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Setup NPM\n        run: npm install -g npm@7\n      - name: Install dependencies\n        run: npm install\n      - name: Test with stylelint\n        run: npm test -- --ext .css,.scss\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Setup NPM\n        run: npm install -g npm@7\n      - name: Install dependencies\n        run: npm install\n      - name: Test i18n packs integrity\n        run: npm run test:i18n\n```", "answer": "```yaml name: Test commit or pull request\n\non: [push, pull_request]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with eslint\n        run: npm run test:eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with stylelint\n        run: npm run test:stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test i18n packs integrity\n        run: npm run test:i18n-packs\n```"}
{"id": "63c49932cbc73931bb18c12f", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n      - name: Autobuild\n        run: |\n          # Add commands to build your project here\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49ad8cbc73931bb1965d2", "level": "level2", "llm_response": "```yaml\nname: prod-deploy\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Setup Node.js environment\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Cache node_modules\n      id: cached-node_modules\n      uses: actions/cache@v2\n      with:\n        path: ./node_modules\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Install all yarn packages\n      run: yarn install\n\n    - name: Build all\n      run: yarn build\n\n    - name: Deploy pages\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./dist\n```", "answer": "```yaml name: prod-deploy\n\non: [workflow_dispatch]\n\njobs:\n    deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v3\n\n            - name: Setup Node.js environment\n              uses: actions/setup-node@v3\n              with:\n                  node-version: '16'\n                  cache: 'yarn'\n\n            - name: Cache node_modules\n              uses: actions/cache@v3\n              id: cached-node_modules\n              with:\n                  path: |\n                      node_modules\n                  key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/publish-release.yml') }}\n\n            - name: Install all yarn packages\n              if: steps.cached-node_modules.outputs.cache-hit != 'true'\n              run: yarn --frozen-lockfile\n\n            - name: Build all\n              run: yarn build\n\n            - name: Deploy pages\n              run: |\n                  git init\n                  git config user.name \"schalkneethling\"\n                  git config user.email \"sneethling@mozilla.com\"\n                  git checkout -b prod\n                  git add .\n                  git commit --allow-empty -m \"Deploying latest generated pages\"\n                  git remote add mdn \"https://$GITHUB_TOKEN@github.com/mdn/interactive-examples.git\"\n                  # Eat output so it doesn't spit out the sensitive GITHUB_TOKEN if something goes wrong:\n                  git push -q -f mdn prod > /dev/null 2>&1\n```"}
{"id": "63c498f31899db58864e363a", "level": "level2", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c496561899db58864d23b8", "level": "level2", "llm_response": "```yaml\nname: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Run with tmate debugging'\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  environment:\n    runs-on: ubuntu-latest\n    steps:\n      # Add your steps here\n```", "answer": "```yaml name: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      # Plugins\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: environment\n```"}
{"id": "63c496a56fc19abdf9c9d4fb", "level": "level2", "llm_response": "```yaml\nname: test\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - '**/Cargo.toml'\n      - '**/*.rs'\n      - justfile\n      - .github/workflows/test.yml\n\npermissions:\n  contents: read\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: -D warnings -A deprecated\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  meshtls:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          profile: minimal\n          toolchain: stable\n          override: true\n\n      - name: Build the project\n        run: cargo build --release\n\n      - name: Run tests\n        run: cargo test --release\n\n      - name: Run justfile\n        run: just\n\n  unit:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          profile: minimal\n          toolchain: stable\n          override: true\n\n      - name: Run unit tests\n        run: cargo test --release -- --test-threads=1\n\n      - name: Run integration tests\n        run: cargo test --release -- --test-threads=1 --include-ignored\n```", "answer": "```yaml # Runs tests that complete relatively quickly.\nname: test\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - \"**/Cargo.toml\"\n      - \"**/*.rs\"\n      - justfile\n      - .github/workflows/test.yml\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: \"-D warnings -A deprecated\"\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  # Test the meshtls backends.\n  meshtls:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just clippy-crate linkerd-meshtls --all-features\n      - run: |\n          just test-crate linkerd-meshtls --all-features --no-run \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n      - run: |\n          just test-crate linkerd-meshtls --all-features \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n\n  # Run non-integration tests. This should be quick.\n  unit:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: |\n          just test --no-run \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n      - run: |\n          just test \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n```"}
{"id": "63c4a116736e7f0ed8c78a5a", "level": "level2", "llm_response": "```yaml\nname: Nightly\n\non:\n  schedule:\n    - cron: '30 12 * * *'\n\npermissions:\n  id-token: write\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Step 1\n        run: |\n          # Add step 1 commands here\n\n      - name: Step 2\n        run: |\n          # Add step 2 commands here\n\n      - name: Step 3\n        run: |\n          # Add step 3 commands here\n```", "answer": "```yaml name: Nightly\non:\n  schedule:\n    - cron: '30 12 * * *'\npermissions:\n  id-token: write\njobs:\n  nightly:\n    if: github.repository == 'aws/karpenter'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/authenticate-aws\n      - run: make nightly\n```"}
{"id": "63c498e61899db58864e3102", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n      - master\n      - 'release-*'\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"develop\", master, release-* ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"develop\" ]\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a11a1e336480757be37b", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    continue-on-error: true\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        config-file: ./.github/codeql/codeql-config.yml\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718d", "level": "level2", "llm_response": "```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: false\n        type: choice\n        options:\n          - patch\n          - minor\n          - major\n        default: minor\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set up git config\n      run: |\n        git config --global user.name \"github-actions[bot]\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Generate CHANGELOG\n      id: changelog\n      run: |\n        # Add your CHANGELOG generation script here\n        echo \"Generating CHANGELOG...\"\n        # Example: echo \"## $(date +%Y-%m-%d) - Version $(date +%Y.%m.%d)\" > CHANGELOG.md\n\n    - name: Insert reearth-web changelog\n      run: |\n        # Add your reearth-web changelog insertion script here\n        echo \"Inserting reearth-web changelog...\"\n        # Example: sed -i \"s/^## \\(.*\\)$/# \\1 - $(date +%Y-%m-%d)/\" CHANGELOG.md\n\n    - name: Upload latest CHANGELOG\n      uses: actions/upload-artifact@v2\n      with:\n        name: CHANGELOG.md\n        path: CHANGELOG.md\n\n    - name: Commit & push to release\n      run: |\n        git checkout -b release\n        git add CHANGELOG.md\n        git commit -m \"chore: update CHANGELOG for version $(date +%Y.%m.%d)\"\n        git push origin release\n\n    - name: Commit & push to main\n      run: |\n        git checkout main\n        git merge release\n        git push origin main\n```", "answer": "```yaml name: Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        required: false\n        description: 'Next version (NOTE: Switch the branch to \"release\"!)'\n        type: choice\n        default: minor\n        options:\n          - patch\n          - minor\n          - major\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n    steps:\n      - name: Set up git config\n        run: |\n          git config --global user.name \"${{ github.actor }}\"\n          git config --global user.email \"${{ github.actor }}@users.noreply.github.com\"\n          git config --global pull.rebase false\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - id: changelog\n        name: Generate CHANGELOG\n        uses: reearth/changelog-action@main\n        with:\n          version: ${{ github.event.inputs.version }}\n          repo: ${{ github.repository }}\n          latest: CHANGELOG_latest.md\n      - name: Insert reearth-web changelog\n        uses: actions/github-script@v6\n        with:\n          script: 'require(\"./.github/workflows/release\")({ github, context })'\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n      - name: Upload latest CHANGELOG\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog-${{ steps.changelog.outputs.version }}\n          path: CHANGELOG_latest.md\n      - name: Commit & push to release\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        run: |\n          rm CHANGELOG_latest.md\n          git add CHANGELOG.md\n          git commit -am \"$TAG\"\n          git tag $TAG\n          git push --atomic origin release $TAG\n      - name: Commit & push to main\n        run: git switch main && git cherry-pick release && git push\n```"}
{"id": "63c497bf1e33648075783099", "level": "level2", "llm_response": "```yaml\nname: Issue tracking\n\non:\n  issues:\n    types: [opened, labeled]\n  label:\n    types: [added]\n\njobs:\n  track_issue:\n    id: track_issue\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Generate token\n        id: generate_token\n        run: echo \"::set-output name=token::$(gh auth token)\"\n\n      - name: Get project data\n        run: echo \"Project data retrieved\"\n\n      - name: Add issue to project\n        run: echo \"Issue added to project\"\n\n      - name: Set fields\n        run: echo \"Fields set\"\n```", "answer": "```yaml name: Issue tracking\non:\n  issues:\n    types:\n      - opened\n      - labeled\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0\n        with:\n          app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n          private_key: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ORGANIZATION: prebid\n          DATE_FIELD: Created on\n          PROJECT_NUMBER: 4\n        run: |\n          gh api graphql -f query='\n            query($org: String!, $number: Int!) {\n              organization(login: $org){\n                projectNext(number: $number) {\n                  id\n                  fields(first:100) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"'\"$DATE_FIELD\"'\") | .id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id,\n                  content {\n                     ... on Issue {\n                        createdAt\n                     }\n                     ... on PullRequest {\n                        createdAt\n                     }                     \n                  }\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json\n          \n          echo 'ITEM_ID='$(jq '.data.addProjectNextItem.projectNextItem.id' issue_data.json) >> $GITHUB_ENV\n          echo 'ITEM_CREATION_DATE='$(jq '.data.addProjectNextItem.projectNextItem.content.createdAt' issue_data.json) >> $GITHUB_ENV\n\n      - name: Set fields\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n        run: |\n          gh api graphql -f query='\n            mutation (\n              $project: ID!\n              $item: ID!\n              $date_field: ID!\n              $date_value: String!\n            ) {\n              set_creation_date: updateProjectNextItemField(input: {\n                projectId: $project\n                itemId: $item\n                fieldId: $date_field\n                value: $date_value\n              }) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f date_field=$DATE_FIELD_ID -f date_value=$ITEM_CREATION_DATE --silent\n```"}
{"id": "63c4947a8052faa2781ab62f", "level": "level2", "llm_response": "```yaml\nname: Backport labeled merged pull requests\n\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Create backport PRs\n      run: echo \"Creating backport PRs...\"\n```", "answer": "```yaml name: Backport labeled merged pull requests\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\njobs:\n  build:\n    name: Create backport PRs\n    runs-on: ubuntu-latest\n    # Only run when pull request is merged\n    # or when a comment containing `/backport` is created by someone other than the backport-action\n    # bot user (user id: 97796249)\n    if: >\n      (\n        github.event_name == 'pull_request' &&\n        github.event.pull_request.merged\n      ) || (\n        github.event_name == 'issue_comment' &&\n        github.event.issue.pull_request &&\n        github.event.comment.user.id != 97796249 &&\n        contains(github.event.comment.body, '/backport')\n      )\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Token for git actions, e.g. git push\n          token: ${{ secrets.BACKPORT_ACTION_PAT }}\n      - name: Create backport PRs\n        uses: zeebe-io/backport-action@v0.0.8\n        with:\n          # Required\n          # Token to authenticate requests to GitHub\n          github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n\n          # Required\n          # Working directory for the backport action\n          github_workspace: ${{ github.workspace }}\n\n          # Optional\n          # Regex pattern to match github labels\n          # Must contain a capture group for target branchname\n          # label_pattern: ^backport ([^ ]+)$\n\n          # Optional\n          # Template used as description in the pull requests created by this action.\n          # Placeholders can be used to define variable values.\n          # These are indicated by a dollar sign and curly braces (`${placeholder}`).\n          # Please refer to this action's README for all available placeholders.\n          pull_description: |-\n            # Description\n            Backport of #${pull_number} to `${target_branch}`.\n\n            relates to ${issue_refs}\n```"}
{"id": "63c49b8c1e3364807579b321", "level": "level2", "llm_response": "```yaml\nname: Create tag\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: true\n    default: 'patch'\n    type: choice\n    options:\n      - patch\n      - minor\n\njobs:\n  create-tag:\n    id: create-tag\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Get Previous tag\n      id: previoustag\n      run: echo \"::set-output name=tag::$(git describe --tags --abbrev=0)\"\n\n    - name: Get next versions\n      id: semvers\n      run: |\n        PREV_TAG=$(echo ${{ steps.previoustag.outputs.tag }} | sed 's/v//')\n        MAJOR=$(echo $PREV_TAG | cut -d. -f1)\n        MINOR=$(echo $PREV_TAG | cut -d. -f2)\n        PATCH=$(echo $PREV_TAG | cut -d. -f3)\n        if [[ ${{ github.event.inputs.version }} == \"minor\" ]]; then\n          NEW_TAG=\"v$MAJOR.$((MINOR+1)).0\"\n        else\n          NEW_TAG=\"v$MAJOR.$MINOR.$((PATCH+1))\"\n        fi\n        echo \"::set-output name=tag::${NEW_TAG}\"\n\n    - name: Create new minor tag\n      if: ${{ github.event.inputs.version == 'minor' }}\n      run: git tag ${{ steps.semvers.outputs.tag }} && git push origin ${{ steps.semvers.outputs.tag }}\n\n    - name: Create new patch tag\n      if: ${{ github.event.inputs.version == 'patch' }}\n      run: git tag ${{ steps.semvers.outputs.tag }} && git push origin ${{ steps.semvers.outputs.tag }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create tag\"\n\non:\n  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: true\n        default: 'patch'\n        type: choice\n        options:\n          - patch\n          - minor\n\njobs:\n  create-tag:\n    name: \"Create tag\"\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.PAT }}\n\n      - name: 'Get Previous tag'\n        id: previoustag\n        uses: \"WyriHaximus/github-action-get-previous-tag@v1\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: 'Get next versions'\n        id: semvers\n        uses: \"WyriHaximus/github-action-next-semvers@v1\"\n        with:\n          version: ${{ steps.previoustag.outputs.tag }}\n\n      - name: \"Create new minor tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'minor'\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: ${{ steps.semvers.outputs.minor }}\n\n      - name: \"Create new patch tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'patch'\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: ${{ steps.semvers.outputs.patch }}\n```"}
{"id": "63c4a0d7517fc08c1ef12403", "level": "level2", "llm_response": "```yaml\nname: Check\n\non:\n  pull_request:\n    types: [opened, ready_for_review, synchronize]\n  pull_request_target:\n    types: [opened, ready_for_review, synchronize]\n\npermissions:\n  actions: write\n  pull-requests: write\n  checks: none\n  contents: none\n  deployments: none\n  issues: none\n  packages: none\n  repository-projects: none\n  security-events: none\n  statuses: none\n\njobs:\n  check-reviews:\n    id: check-reviews\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout shared-workflow\n      uses: actions/checkout@v2\n    - name: Installing Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n    - name: Checking reviewers\n      run: echo \"Checking reviewers\"\n```", "answer": "```yaml # Workflow will trigger on all pull request (except draft), pull request\n# review, and commit push to a pull request (synchronize) event types\n#\n# NOTE: pull_request_target behaves the same as pull_request except it grants a\n# read/write token to workflows running on a pull request from a fork. While\n# this may seem unsafe, the permissions for the token are limited below and\n# the permissions can not be changed without merging to master which is\n# protected by CODEOWNERS.\nname: Check\non:\n  pull_request_review:\n    type: [submitted, edited, dismissed]\n  pull_request_target:\n    types: [opened, ready_for_review, synchronize]\n\n# Limit the permissions on the GitHub token for this workflow to the subset\n# that is required. In this case, the check workflow needs to invalidate\n# reviews and delete workflow runs, so it needs write access to \"actions\" and\n# \"pull-requests\", nothing else.\npermissions:\n    actions: write\n    pull-requests: write\n    checks: none\n    contents: none\n    deployments: none\n    issues: none\n    packages: none\n    repository-projects: none\n    security-events: none\n    statuses: none\n\njobs:\n  check-reviews:\n    name: Checking reviewers\n    if: ${{ !github.event.pull_request.draft }}\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout main branch of shared-workflow repository.\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v3\n        with:\n          repository: gravitational/shared-workflows\n          path: .github/shared-workflows\n          ref: main\n      - name: Installing Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: .github/shared-workflows/bot/go.mod\n        # Run \"check\" subcommand on bot.\n      - name: Checking reviewers\n        run: cd .github/shared-workflows/bot && go run main.go -workflow=check -token=\"${{ secrets.GITHUB_TOKEN }}\" -reviewers=\"${{ secrets.reviewers }}\"\n```"}
{"id": "63c4973933b087f6bde31123", "level": "level2", "llm_response": "```yaml\nname: Structr CI Pipeline\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Start Test Database\n      run: echo \"Starting test database...\"\n    - name: Install GraalVM\n      run: echo \"Installing GraalVM...\"\n    - name: Compile and run Tests\n      run: echo \"Compiling and running tests...\"\n    - name: Stop Test Database\n      run: echo \"Stopping test database...\"\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Login to Docker Hub\n      run: echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin\n    - name: Install GraalVM\n      run: echo \"Installing GraalVM...\"\n    - name: Build and push Docker image\n      run: echo \"Building and pushing Docker image...\"\n    - name: Upload binaries\n      run: echo \"Uploading binaries...\"\n\n  cleanup-system:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Cleanup docker\n      run: echo \"Cleaning up docker...\"\n    - name: Cleanup runner home\n      run: echo \"Cleaning up runner home...\"\n```", "answer": "```yaml name: Structr CI Pipeline\non:\n  push\n\njobs:\n  run-tests:\n    if: ${{ !startsWith( github.actor, 'dependabot' ) }}\n    runs-on: self-hosted\n    environment: build-and-test\n    strategy:\n      matrix:\n        include:\n          - module: structr-ui\n            variableName: UI\n          - module: structr-core\n            variableName: CORE\n          - module: structr-rest\n            variableName: REST\n          - module: structr-db-driver-api\n            variableName: DB_DRIVER_API\n          - module: structr-memgraph-driver\n            variableName: MEMGRAPH_DRIVER\n          - module: structr-memory-driver\n            variableName: MEMORY_DRIVER\n          - module: structr-modules\n            variableName: MODULES\n          - module: structr-neo4j-bolt-driver\n            variableName: NEO4J_BOLT_DRIVER\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start Test Datenbase\n        run: >-\n          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} \n          -p 7687 \n          -e NEO4J_AUTH=neo4j/admin \n          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \n          -e NEO4J_dbms_memory_heap_maxSize=4G \n          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && \n          echo \"ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"7687/tcp\") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})\" >> $GITHUB_ENV\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Compile and run Tests\n        run:  >-\n          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && \n          cd ${{ matrix.module }} && \n          mvn clean install -DskipDockerTestDB -Denv.testDatabaseConnection=\"bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}\"\n\n      - name: Stop Test Database\n        if: always()\n        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}\n\n  build-and-deploy:\n    runs-on: self-hosted\n    environment: build-and-test\n    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}\n    needs: run-tests\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: structr\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB\n      - name: Upload binaries\n        run: >-\n          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&\n          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1\n\n  cleanup-system:\n    runs-on: self-hosted\n    if: always()\n    needs: [run-tests, build-and-deploy]\n    steps:\n      - name: Cleanup docker\n        run: docker container prune -f && docker image prune -f && docker volume prune -f\n      - name: Cleanup runner home\n        run: cd ~/actions-runner/_work/structr/ && rm -rf structr\n```"}
{"id": "63c496e6517fc08c1eed3897", "level": "level2", "llm_response": "```yaml\nname: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    id: sync-branches\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Opening pull request\n        id: pull\n        run: |\n          gh pr create --base development --head master --title \"Sync master to development\" --body \"Automatically syncing master branch to development branch.\"\n\n      - name: Label the pull request to ignore for release note generation\n        run: |\n          pr_number=$(echo ${{ steps.pull.outputs.number }})\n          gh pr edit $pr_number --add-label \"ignore-release-notes\"\n```", "answer": "```yaml name: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    runs-on: ubuntu-latest\n    name: Syncing branches\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          FROM_BRANCH: 'master'\n          TO_BRANCH: 'dev'\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: internal\n          repo: ${{ github.repository }}\n          number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```"}
{"id": "63c4a12533b087f6bde70dfc", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * 0'\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: 'CodeQL'\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * SUN'\n\njobs:\n  'Analyze':\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n    steps:\n      - name: 'Checkout repository'\n        uses: actions/checkout@v3\n      - name: 'Initialize CodeQL'\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: 'Perform CodeQL Analysis'\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49fda6fc19abdf9cd8ce3", "level": "level2", "llm_response": "```yaml\nname: Continuous integration\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  clone_repository:\n\nenv:\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Mount Bazel cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/bazel\n          key: ${{ runner.os }}-bazel-${{ env.cache-version }}\n      - name: Configure\n        run: ./configure\n      - name: Check Bazel version\n        run: bazel --version\n      - name: Build & test\n        run: bazel test //...\n\n  test-nixpkgs-cross:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Mount Bazel cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/bazel\n          key: ${{ runner.os }}-bazel-${{ env.cache-version }}\n      - name: Configure\n        run: ./configure --cross\n      - name: Check Bazel version\n        run: bazel --version\n      - name: Build & test\n        run: bazel test //...\n\n  test-bindist:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Mount Bazel cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/bazel\n          key: ${{ runner.os }}-bazel-${{ env.cache-version }}\n      - name: Install Bazel\n        run: ./install_bazel.sh\n      - name: Configure\n        run: ./configure\n      - name: Build & test\n        run: bazel test //...\n```", "answer": "```yaml name: Continuous integration\non: [push]\nenv:\n  # Bump this number to invalidate the GH actions cache\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    name: Build & Test - Nixpkgs\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-nixpkgs;;\n            Linux) BUILD_CONFIG=ci-linux-nixpkgs;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          nix-shell --arg docTools false --pure --run '\n            set -euo pipefail\n            ./tests/run-start-script.sh --use-nix\n            bazel build //tests:run-tests\n            ./bazel-ci-bin/tests/run-tests\n            bazel coverage //...\n            bazel build //docs:api_html\n            bazel build //docs:guide_html\n            '\n\n  test-nixpkgs-cross:\n    name: Build & Test - Cross\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=linux-nixpkgs\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          ln -sr .bazelrc.local examples/arm/.bazelrc.local\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          cd examples/arm\n          nix-shell --arg docTools false --pure --run \"bazel build //... --platforms=//:linux_aarch64\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example2\"\n\n  test-bindist:\n    name: Build & Test - bindist\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |-\n          sudo swapoff -a\n          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc\n          sudo apt clean\n          docker rmi $(docker images -q) -f\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}\n      - name: Install Bazel\n        shell: bash\n        run: |\n          BAZEL_DIR=\"$(.ci/fetch-bazel-bindist)\"\n          mv $BAZEL_DIR $HOME/bazel\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        shell: bash\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-bindist;;\n            Linux) BUILD_CONFIG=ci-linux-bindist;;\n            Windows) BUILD_CONFIG=ci-windows-bindist;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Build & test\n        shell: bash\n        run: |\n          export PATH=$HOME/bazel:$PATH\n          [[ ${{ runner.os }} == macOS ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1\n          ./tests/run-start-script.sh --use-bindists\n          if [[ ${{ runner.os }} == Windows ]]; then\n            # On Windows `//...` expands to `/...`.\n            bazel test ///...\n          else\n            bazel test //...\n          fi\n          # Test stack_snapshot pinning\n          # NOTE keep in sync with tests/RunTests.hs\n          bazel run @stackage-pinning-test-unpinned//:pin\n          bazel build @stackage-pinning-test//:hspec\n```"}
{"id": "63c49f501e336480757b2fb7", "level": "level2", "llm_response": "```yaml\nname: Run Flake\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  nix-flake:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Fetch tags\n      run: git fetch --tags\n\n    - name: Install Nix\n      run: |\n        sh <(curl -L https://nixos.org/nix/install) --daemon\n        . ~/.nix-profile/etc/profile.d/nix.sh\n\n    - name: Build flake\n      run: nix build .\n\n    - name: Test run flake\n      run: nix run .\n```", "answer": "```yaml name: Run Flake\n\non: [ push, pull_request ]\n\njobs:\n\n  nix-flake:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Fetch tags\n        run: |\n          git fetch --prune --tags ||:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Build flake\n        run: nix build\n      - name: Test run flake\n        run: nix shell -c sile --version\n```"}
{"id": "63c4964e6fc19abdf9c9b3ba", "level": "level2", "llm_response": "```yaml\nname: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\njobs:\n  fossa:\n    id: fossa\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Download fossa cli\n        run: curl -sSL https://dl.fossa.io/fossa-linux-amd64 -o fossa\n\n      - name: Fossa init\n        run: ./fossa init\n\n      - name: Set env\n        run: echo \"FOSSA_API_KEY=your_api_key\" >> $GITHUB_ENV\n\n      - name: Configuration\n        run: ./fossa configure\n\n      - name: Upload dependencies\n        run: ./fossa upload\n```", "answer": "```yaml name: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  fossa:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Download fossa cli\n        run: |-\n          mkdir -p $HOME/.local/bin\n          curl https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash -s -- -b $HOME/.local/bin\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n\n      - name: Fossa init\n        run: fossa init\n      - name: Set env\n        run: echo \"line_number=$(grep -n \"project\" .fossa.yml | cut -f1 -d:)\" >> $GITHUB_ENV\n      - name: Configuration\n        run: |-\n          sed -i \"${line_number}s|.*|  project: git@github.com:${GITHUB_REPOSITORY}.git|\" .fossa.yml\n          cat .fossa.yml\n      - name: Upload dependencies\n        run: fossa analyze --debug\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"id": "63c49ea61842bc13d7792309", "level": "level2", "llm_response": "```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Package Trigger Scheduler\n        run: echo \"Triggering package build...\"\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-bookstack/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for bookstack** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-bookstack/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c49da71899db58865017d1", "level": "level2", "llm_response": "```yaml\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  merge:\n    id: merge\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature-branch1, feature-branch2, feature-branch3]\n\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        run: |\n          git checkout ${{ matrix.branch }}\n          git merge master\n```", "answer": "```yaml #\n# Copyright 2022 The Dapr Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\njobs:\n  merge:\n    name: Merge master into feature branches\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        # artursouza/merge-branch is a fork of devmasx/merge-branch \n        #   to minimize risk of a 3rd party repo running arbitrary code with our creds\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          type: now\n          from_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```"}
{"id": "63c4a17c33b087f6bde72c5f", "level": "level2", "llm_response": "```yaml\nname: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Run linters\n      run: go list ./... | xargs -n 1 go vet\n```", "answer": "```yaml name: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: v1.18.x\n          cache: true\n      - run: go run mage.go lint\n```"}
{"id": "63c49f39b008460c1df4c52d", "level": "level2", "llm_response": "```yaml\nname: Static Code Analysis\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        php: [7.2, 7.3, 7.4, 8.0]\n        stability: [stable, beta]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        extensions: dom, intl, mbstring, opcache, pdo_mysql, tokenizer\n\n    - name: Setup problem matchers\n      run: echo \"::add-matcher::phpunit.json\"\n\n    - name: Install dependencies\n      run: composer install --no-interaction --prefer-dist\n\n    - name: Execute static code analysis\n      run: vendor/bin/phpcs --standard=PSR12 src/\n```", "answer": "```yaml name: Static Code Analysis\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest]\n        php: [8.1]\n        stability: [prefer-stable]\n\n    name: P${{ matrix.php }} - ${{ matrix.stability }} - ${{ matrix.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo\n          coverage: none\n\n      - name: Setup problem matchers\n        run: |\n          echo \"::add-matcher::${{ runner.tool_cache }}/php.json\"\n          echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Install dependencies\n        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction\n\n      - name: Execute static code analysis\n        run: vendor/bin/phpstan analyse src --level 9 --error-format=github --no-progress --no-ansi\n```"}
{"id": "63c499e81842bc13d7773766", "level": "level2", "llm_response": "```yaml\nname: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    id: compressed-size\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Calculate compressed size\n      run: echo \"Compressed size calculation logic here\"\n```", "answer": "```yaml name: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: 94dreamer/compressed-size-action@master\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          pattern: \"./miniprogram_dist/**/*.{js,wxs,wxml,json}\"```"}
{"id": "63c49f95736e7f0ed8c6f18a", "level": "level2", "llm_response": "```yaml\nname: Sync labels\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Sync labels\n        run: |\n          # Add your label sync logic here\n```", "answer": "```yaml name: Sync labels\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: micnncim/action-label-syncer@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          manifest: .github/labels.yml\n```"}
{"id": "63c49fbdcbc73931bb1b5e4f", "level": "level2", "llm_response": "```yaml\nname: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches:\n      - branch0.1/tf-serving-cluster\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Build the TF Docker image\n      run: |\n        # Commands to build the TensorFlow Docker image\n        docker build -t tf-serving-image .\n\n    - name: Build the SP Docker image\n      run: |\n        # Commands to build the Service Provider Docker image\n        docker build -t sp-image .\n\n    - name: Check Docker image Status\n      run: |\n        # Commands to check the status of the built Docker images\n        docker images\n```", "answer": "```yaml name: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches: [ branch0.1/tf-serving-cluster ]\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build the TF Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/tf_serving\n        docker build -f gramine_tf_serving.dockerfile . -t tf_serving:$(date +%s)\n        \n    - name: Build the SP Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/secret_prov\n        docker build -f secret_prov.dockerfile . -t sp_serving:$(date +%s)\n        \n    - name: Check Docker image Status\n      run: docker images\n      \n```"}
{"id": "63c49daf1842bc13d778bec9", "level": "level2", "llm_response": "```yaml\nname: unit tests\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install packages (openSUSE)\n      run: |\n        sudo zypper install -y python3 python3-pip\n\n    - name: Install packages (Fedora/CentOS)\n      run: |\n        sudo dnf install -y python3 python3-pip\n\n    - name: Install packages (Debian/Ubuntu)\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y python3 python3-pip\n\n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n\n    - name: Run unit tests\n      run: |\n        pytest\n\n    - name: Generate coverage reports (openSUSE Tumbleweed)\n      run: |\n        coverage run -m pytest\n        coverage xml\n\n    - name: Upload coverage reports to Codecov (openSUSE Tumbleweed)\n      uses: codecov/codecov-action@v2\n      with:\n        file: coverage.xml\n```", "answer": "```yaml name: 'unit tests'\n\non:\n  push:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n  pull_request:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n\njobs:\n  test:\n    name: 'unit tests'\n    runs-on: 'ubuntu-latest'\n    strategy:\n      fail-fast: false\n      matrix:\n        # Testing per python-version using actions/setup-python is not possible,\n        # because rpm doesn't exist on pypi and cannot be installed via pip on ubuntu.\n        # That's why we're going to test on the target distros directly.\n        container:\n\n          # Fedora\n          - 'fedora:36'\n          - 'fedora:rawhide'\n\n          # openSUSE\n          # leap < 15.2 doesn't contain git-lfs which causes actions/checkout to fail\n          - 'opensuse/leap:15.3'\n          - 'opensuse/leap:15.4'\n          - 'opensuse/tumbleweed'\n\n          # CentOS Stream\n          - 'quay.io/centos/centos:stream9'\n\n          # Debian\n          - 'debian:stable'\n          - 'debian:unstable'\n\n          # Ubuntu\n          - 'ubuntu:latest'\n\n    container:\n      image: ${{ matrix.container }}\n\n    steps:\n      - name: 'Install packages (openSUSE)'\n        if: ${{ startsWith(matrix.container, 'opensuse/') }}\n        run: |\n            zypper -n --gpg-auto-import-keys refresh\n            zypper -n lr --details\n            grep -qi tumbleweed /etc/os-release && zypper -n dist-upgrade || zypper -n patch || zypper -n patch\n            zypper -n install git-lfs\n            zypper -n install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Fedora/CentOS)'\n        if: ${{ startsWith(matrix.container, 'fedora:') || contains(matrix.container, 'centos:') }}\n        run: |\n            dnf -y makecache\n            dnf -y distro-sync\n            dnf -y install git-lfs\n            dnf -y install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Debian/Ubuntu)'\n        if: ${{ startsWith(matrix.container, 'debian:') || startsWith(matrix.container, 'ubuntu:') }}\n        run: |\n            apt-get -y update\n            apt-get -y upgrade\n            apt-get -y --no-install-recommends install git-lfs\n            apt-get -y --no-install-recommends install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - uses: actions/checkout@v3\n\n      - name: 'Run unit tests'\n        run: |\n          pip3 install -e .\n          python3 setup.py test\n\n      - name: 'Generate coverage reports (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        run: |\n            zypper -n install python3-pytest python3-pytest-cov\n            pytest --cov=osc\n\n      - name: 'Upload coverage reports to Codecov (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        uses: codecov/codecov-action@v3\n```"}
{"id": "63c4a0086fc19abdf9cda03c", "level": "level2", "llm_response": "```yaml\nname: sync zoekt\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n    - name: Set up Go\n    - name: Install dependencies\n    - name: Build project\n    - name: Create PR\n      id: pr\n    - name: Check PR outputs\n    - name: Enable Pull Request Automerge\n```", "answer": "```yaml name: sync zoekt\non:\n  push:\n    branches:\n      - main\n\n  workflow_dispatch:\n    branches:\n      - main\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: 'sourcegraph/sourcegraph'\n          ref: 'main'\n      - uses: actions/setup-go@v2\n        with: { go-version: '1.19' }\n      - run: go mod download\n      - run: ./dev/zoekt/update\n      - uses: peter-evans/create-pull-request@v3\n        if: github.event_name == 'push'\n        name: 'Create PR'\n        id: pr\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          title: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          commit-message: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          body: |\n            This PR is autogenerated to update to sourcegraph/zoekt@${{ github.sha }}\n\n            ## Test Plan\n\n            Testing is done on the zoekt repo. All checks on this PR are sufficient.\n\n          branch: 'zoekt/update'\n          delete-branch: 'true'\n          team-reviewers: 'search-core'\n          base: 'main'\n\n      - name: 'Check PR outputs'\n        run: |\n          echo \"Pull Request Number - ${{ steps.pr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}\"\n      - uses: peter-evans/enable-pull-request-automerge@v1\n        name: Enable Pull Request Automerge\n        if: steps.pr.outputs.pull-request-operation == 'created'\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n          merge-method: squash\n          repository: 'sourcegraph/sourcegraph'\n```"}
{"id": "63c498781e33648075787ab4", "level": "level2", "llm_response": "```yaml\nname: Check documentation\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  docs:\n    id: docs\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Build documentation\n      run: |\n        make -C docs html\n\n    - name: Serve documentation\n      run: |\n        python -m http.server -d docs/build/html 8000\n\n    - name: Check links\n      run: |\n        pip install linkchecker\n        linkchecker http://localhost:8000\n```", "answer": "```yaml name: Check documentation\non: [push, pull_request]\njobs:\n  docs:\n    name: Build documentation & check links\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.8\"\n      - run: |\n          pip install --constraint=.github/workflows/constraints.txt pip\n          pip install --constraint=.github/workflows/constraints.txt nox\n      - name: Build documentation\n        run: nox --force-color --session=docs\n      - uses: actions/upload-artifact@v3\n        with:\n          name: docs\n          path: docs/_build\n      - name: Check links\n        run: nox --force-color --session=linkcheck\n```"}
{"id": "63c496801899db58864d34ec", "level": "level2", "llm_response": "```yaml\nname: ci\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Test (100% requirement on 100% file)\n        run: npm run e2e -- --coverage --reporters=default --reporters=junit\n      - name: Test (90% requirement on 95% file)\n        run: npm run e2e -- --coverage --reporters=default --reporters=junit --coverageReporters=text-summary\n      - name: Test (100% requirement on 95% file)\n        run: npm run e2e -- --coverage --reporters=default --reporters=junit --coverageReporters=text-summary\n      - name: Test (100% requirement on 95% file with excludes)\n        run: npm run e2e -- --coverage --reporters=default --reporters=junit --coverageReporters=text-summary --exclude=tests/excluded\n```", "answer": "```yaml name: 'ci'\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run check_format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test (100% requirement on 100% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.100.info'\n      - name: Test (90% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          min_coverage: 90\n      - name: Test (100% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/*_observer.dart'\n      - name: Test (100% requirement on 95% file with excludes)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/whatever.dart **/*_observer.dart **/does_not_matter.dart'\n```"}
{"id": "63c496c9b008460c1df16a83", "level": "level2", "llm_response": "```yaml\nname: generator\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Update readme\n        run: echo \"This is an updated README\" > README.md\n```", "answer": "```yaml name: generator\n\non:\n  push:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update readme\n        uses: linuxsuren/yaml-readme@v0.0.12\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN_SECRETS }}\n        with:\n          pattern: ''\n          username: linuxsuren\n          org: jenkins-zh\n          repo: jenkins-cli\n```"}
{"id": "63c49c3b1899db58864f8917", "level": "level2", "llm_response": "```yaml\nname: slsa\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [published, prereleased, created]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Create checksum file\n      run: echo \"Checksum file created\"\n    - name: Upload artifact\n      uses: actions/upload-artifact@v2\n      with:\n        name: build-artifact\n        path: build-output\n\n  generate-provenance:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n    - name: Download build artifact\n      uses: actions/download-artifact@v2\n      with:\n        name: build-artifact\n    - name: Generate provenance\n      run: echo \"Provenance generated\"\n    - name: Upload provenance\n      uses: actions/upload-artifact@v2\n      with:\n        name: provenance\n        path: provenance-file\n```", "answer": "```yaml ---\nname: slsa\non:\n  push:\n  release:\n    types: [published, released]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')\" >> $GITHUB_ENV\n        shell: bash\n\n      - name: checkout repository\n        uses: actions/checkout@master\n\n      - name: create checksum file\n        run: find tests/*.bash tests/*.sh scripts/* misc/* ./*.sh -type f -exec sha256sum {} \\; > ${{ env.REPOSITORY_NAME }}.sha256\n\n      - name: upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: ${{ env.REPOSITORY_NAME }}.sha256\n\n  generate-provenance:\n    needs: build\n    name: generate build provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: download build artifact\n        uses: actions/download-artifact@v3\n\n      - name: generate provenance\n        uses: slsa-framework/github-actions-demo@v0.1\n        with:\n          artifact_path: artifact/\n\n      - name: upload provenance\n        uses: actions/upload-artifact@v3\n        with:\n          path: build.provenance\n```"}
{"id": "63c49c7b517fc08c1eef6ca4", "level": "level2", "llm_response": "```yaml\nname: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment'\n        required: true\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v2\n      \n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"::add-path::$(go env GOPATH)/bin\"\n      \n      - name: \u267b\ufe0f Restore caches\n        id: expo-caches\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}\n      \n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        run: |\n          echo \"Commenting on GitHub issues as github-actions bot\"\n          # Add your comment logic here\n```", "answer": "```yaml name: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment.'\n        required: true\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n      - name: \u267b\ufe0f Restore caches\n        uses: ./.github/actions/expo-caches\n        id: expo-caches\n        with:\n          yarn-tools: 'true'\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        run: expotools commentator --payload \"${{ github.event.inputs.payload }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n```"}
{"id": "63c49983cbc73931bb18e1ee", "level": "level2", "llm_response": "```yaml\nname: Pre-commit check hooks\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  pre-commit-checks:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run pre-commit large file check\n        run: |\n          pre-commit run --all-files --check-files .large_file_check\n\n      - name: Run pre-commit YAML check\n        run: |\n          pre-commit run --all-files --check-files .yaml_check\n```", "answer": "```yaml name: Pre-commit check hooks\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n\n  pre-commit-checks:\n        \n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: 3.8\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v3\n        with:\n          # Ubuntu-specific, see\n          # https://github.com/actions/cache/blob/main/examples.md#python---pip\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n              python -m pip install --upgrade pip\n              pip install 'pre-commit>=2.10.1'\n        shell: bash\n\n      - name: Run pre-commit large file check\n        run: pre-commit run --all-files check-added-large-files\n\n      - name: Run pre-commit YAML check # for GitHub Actions configs\n        run: pre-commit run --all-files check-yaml\n```"}
{"id": "63c4a19b736e7f0ed8c7be71", "level": "level2", "llm_response": "```yaml\nname: unittest\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install nox\n        run: |\n          python -m pip install nox\n      - name: Run unit tests\n        run: |\n          nox -s unittest\n      - name: Upload coverage results\n        uses: codecov/codecov-action@v1\n\n  cover:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install coverage\n        run: |\n          python -m pip install coverage\n      - name: Download coverage results\n        run: |\n          coverage run -m unittest discover\n          coverage xml -o coverage.xml\n      - name: Report coverage results\n        uses: codecov/codecov-action@v1\n        with:\n          file: coverage.xml\n```", "answer": "```yaml on:\n  pull_request:\n    branches:\n      - main\nname: unittest\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: ['3.7', '3.8', '3.9', '3.10']\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install nox\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install nox\n    - name: Run unit tests\n      env:\n        COVERAGE_FILE: .coverage-${{ matrix.python }}\n      run: |\n        nox -s unit-${{ matrix.python }}\n    - name: Upload coverage results\n      uses: actions/upload-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-${{ matrix.python }}\n\n  cover:\n    runs-on: ubuntu-latest\n    needs:\n        - unit\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install coverage\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install coverage\n    - name: Download coverage results\n      uses: actions/download-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-results/\n    - name: Report coverage results\n      run: |\n        coverage combine .coverage-results/.coverage*\n        coverage report --show-missing --fail-under=99\n```"}
{"id": "63c49a1e1899db58864eb16d", "level": "level2", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ created ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Build\n      run: go build -v ./...\n    - name: Rename for Windows\n      run: |\n        for file in *.exe; do\n          mv \"$file\" \"${file%.exe}.msi\"\n        done\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v2\n      with:\n        name: build-artifacts\n        path: ./\n\n  release:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Show files\n      run: ls -la\n    - name: Calc hash\n      run: sha256sum build-artifacts/*.msi > build-artifacts/sha256sum.txt\n    - name: Release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: ${{ github.ref }}\n        release_name: Release ${{ github.ref }}\n        draft: false\n        prerelease: false\n        files: |\n          build-artifacts/*.msi\n          build-artifacts/sha256sum.txt\n```", "answer": "```yaml name: Build\n\non:\n  push:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [ linux, darwin ]\n        goarch: [ amd64, arm64 ]\n        include:\n          - goos: windows\n            goarch: amd64\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: '0'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n          check-latest: true\n          cache: true\n\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x\n\n\n      - name: Build\n        run: |\n          go generate ./...\n          go build -v -ldflags '-s -w -buildid=' -trimpath -o out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n\n      - name: Rename for Windows\n        if: matrix.goos == 'windows'\n        run: mv out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }} out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}.exe\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n          path: out/*\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Show files\n        run: |\n          pwd\n          find\n\n      - name: Calc hash\n        run: |\n          mkdir -p out\n          cp ./murphysec-linux-amd64/murphysec-linux-amd64 ./out/\n          cp ./murphysec-windows-amd64/murphysec-windows-amd64.exe ./out/\n          cp ./murphysec-darwin-amd64/murphysec-darwin-amd64 ./out/\n          cp ./murphysec-darwin-arm64/murphysec-darwin-arm64 ./out\n          cp ./murphysec-linux-arm64/murphysec-linux-arm64 ./out\n          cd out\n          sha256sum * > sha256sum\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: out/*\n          draft: true\n```"}
{"id": "63c49c446fc19abdf9cc1f4b", "level": "level2", "llm_response": "```yaml\nname: Scala Snippet Checker\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [opened, edited, commented, edited_comment]\n  comment:\n    types: [created, edited]\n\njobs:\n  snippet-runner:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check Scala Snippets\n        run: echo \"Checking Scala snippets...\"\n```", "answer": "```yaml name: Scala Snippet Checker\non:\n  issue_comment:\n    types: [created, edited]\n  issues:\n    types: [opened, edited]\n\njobs:\n  snippet-runner:\n    timeout-minutes: 2\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: virtuslab/scala-snippet-checker@main```"}
{"id": "63c49a88517fc08c1eeea9d6", "level": "level2", "llm_response": "```yaml\nname: Hackage, Cabal, Linux\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 2 * * *'\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n  build10:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Git checkout\n      uses: actions/checkout@v2\n\n    - name: Haskell env setup\n      id: HaskEnvSetup\n      run: |\n        # Setup Haskell environment\n        nix-env -iA nixpkgs.haskellPackages.ghc\n\n    - name: Install additional system packages\n      run: |\n        # Install additional system packages\n        sudo apt-get update\n        sudo apt-get install -y libgmp-dev\n\n    - name: Install Nix\n      run: |\n        # Install Nix\n        sh <(curl -L https://nixos.org/nix/install)\n\n    - name: Repository update\n      run: |\n        # Update repository\n        git pull\n\n    - name: Configuration freeze\n      run: |\n        # Freeze configuration\n        cabal update\n\n    - name: Configuring GitHub cache\n      uses: actions/cache@v2\n      with:\n        path: ~/.cabal/packages\n        key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal') }}\n        restore-keys: |\n          ${{ runner.os }}-cabal-\n\n    - name: Build\n      run: |\n        # Build the project\n        cabal build ${{ env.cabalConfig }}\n\n    - name: Tests\n      run: |\n        # Run tests\n        cabal test ${{ env.cabalConfig }}\n\n    - name: Haddock\n      run: |\n        # Generate Haddock documentation\n        cabal haddock ${{ env.cabalConfig }}\n\n    - name: Source distribution file\n      run: |\n        # Create source distribution file\n        cabal sdist\n```", "answer": "```yaml name: \"Hackage, Cabal, Linux\"\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: \"45 02 * * *\"\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n\n  build10:\n    name: \"GHC\"\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ghc:\n          [ \"8.8\"\n          , \"9.0\"\n          ]\n    steps:\n\n      - name: \"Git checkout\"\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: \"Haskell env setup\"\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n\n      - name: \"Install additional system packages\"\n        run: sudo apt install libsodium-dev\n\n      #  2020-08-01: NOTE: Nix instantiate still needed for HNix tests\n      - name: \"Install Nix\"\n        uses: cachix/install-nix-action@v17\n\n      - name: \"Repository update\"\n        run: cabal v2-update\n\n      # Freeze is for the caching\n      - name: \"Configuration freeze\"\n        run: cabal v2-freeze $cabalConfig --minimize-conflict-set\n\n      - name: \"Configuring GitHub cache\"\n        uses: actions/cache@v3\n        with:\n          path: |\n            ${{ steps.HaskEnvSetup.outputs.cabal-store }}\n            dist-newstyle\n          key: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}\n          # 2022-04-22: `v2-` added to invalidate corrupted caches, can be removed after one week\n          restore-keys: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-v2-\n\n      - name: \"Build\"\n        run: cabal v2-build $cabalConfig\n\n      - name: \"Tests\"\n        run: cabal v2-test $cabalConfig\n\n      - name: \"Haddock\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-haddock $cabalConfig\n\n      - name: \"Source distribution file\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-sdist\n```"}
{"id": "63c4975e1e33648075780971", "level": "level2", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - sample-extension-dotnet-minimalapi/**\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n      - name: Build .NET Project\n        run: dotnet build sample-extension-dotnet-minimalapi\n      - name: Build the Docker image\n        run: docker build -t sample-extension-dotnet-minimalapi .\n      - name: Slack Notify\n        uses: RTCamp/action-slack-notify@v2\n        with:\n          slack_url: ${{ secrets.SLACK_WEBHOOK_URL }}\n          channel: '#build-notifications'\n          username: 'Build Bot'\n          icon_emoji: ':rocket:'\n          message: 'Build completed successfully!'\n```", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c4957f8052faa2781b232b", "level": "level2", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build project\n        run: npm run build\n```", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - 'v*'\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        with:\n          tag_name: ${{github.ref}}\n          release_name: Release ${{github.ref}}\n          draft: false\n          prerelease: false\n```"}
{"id": "63c49722cbc73931bb17e62d", "level": "level2", "llm_response": "```yaml\nname: Update Prettier\n\non:\n  push:\n    branches:\n      - renovate/prettier-*\n\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Prettier\n        run: npx prettier --write .\n\n      - name: Commit changes\n        run: |\n          git config --global user.name 'github-actions[bot]'\n          git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n          git add .\n          git commit -m \"chore: format code with Prettier\"\n\n      - name: Push changes\n        uses: ad-m/github-push-action@v0.6.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49ced6fc19abdf9cc60fa", "level": "level2", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [created]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for specific comment\n        run: |\n          if [[ $GITHUB_EVENT_NAME == \"issues\" ]] || [[ $GITHUB_EVENT_NAME == \"pull_request\" ]]; then\n            comment=$(gh issue comment list $GITHUB_EVENT_ISSUE_NUMBER --json body | jq -r '.[].body')\n            if [[ $comment == *\"please tag\"* ]]; then\n              gh issue edit $GITHUB_EVENT_ISSUE_NUMBER --label \"needs-tag\"\n            fi\n          fi\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c499221e3364807578c18a", "level": "level2", "llm_response": "```yaml\nname: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**/*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**/*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Add Custom Problem Matcher\n        run: echo \"::add-matcher::markdownlint.json\"\n\n      - name: npm run markdownlint\n        run: npm run markdownlint\n```", "answer": "```yaml name: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-js-env\n\n      - name: Add Custom Problem Matcher\n        run: |\n          echo \"::add-matcher::.github/matchers/${{ github.job }}.json\"\n\n      - name: npm run markdownlint\n        run: |\n          npm run markdownlint\n```"}
{"id": "63c497321899db58864d7fa4", "level": "level2", "llm_response": "```yaml\nname: Docs Preview\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types: [completed]\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Download artifact\n      run: |\n        wget https://github.com/your-repo/your-repo/actions/artifacts/1234567890/download\n\n    - name: Unzip artifact\n      run: |\n        unzip download\n\n    - name: Deploy PR preview\n      id: deploy_preview\n      run: |\n        # Add your deployment script here\n\n    - name: Comment PR preview URL\n      run: |\n        echo \"Docs preview URL: ${{ steps.deploy_preview.outputs.url }}\" >> $GITHUB_STEP_SUMMARY\n```", "answer": "```yaml name: Docs Preview\n\nenv:\n  CARGO_TERM_COLOR: always\n\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n    steps:\n      - name: Download artifact\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: context.payload.workflow_run.id,\n            });\n            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"docs\";\n            })[0];\n            let download = await github.rest.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            let fs = require('fs');\n            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs.zip`, Buffer.from(download.data));\n      \n      - name: Unzip artifact\n        run: |\n          unzip docs.zip\n          tar -xf docs.tar.zstd\n\n      - name: Deploy PR preview\n        continue-on-error: true\n        id: deploy_preview\n        uses: dswistowski/surge-sh-action@v1.0.1\n        with:\n          domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n          project: doc\n          login: ${{ secrets.SURGE_LOGIN }}\n          token: ${{ secrets.SURGE_TOKEN }}\n\n      - name: Comment PR preview URL\n        if: steps.deploy_preview.outcome == 'success'\n        uses: Beakyn/gha-comment-pull-request@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          pull-request-number: ${{ github.event.workflow_run.pull_requests[0].number }}\n          description-message: |\n            ----\n            Preview: https://pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n```"}
{"id": "63c49c4d1e3364807579ff48", "level": "level2", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      event_type:\n        required: true\n        description: 'Event type'\n        type: string\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Check out source code\n      uses: actions/checkout@v2\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Upload to spaces and s3\n      run: |\n        # Add your upload commands here\n```", "answer": "```yaml name: Build\r\non:\r\n  push:\r\n  pull_request:\r\n  repository_dispatch:\r\n    types: [build-pre-rel]\r\njobs:\r\n  build:\r\n    name: Build\r\n    runs-on: windows-2022\r\n    steps:\r\n      - name: Set up Go\r\n        uses: actions/setup-go@v3\r\n        with:\r\n          go-version: 1.17\r\n\r\n      - name: Check out source code\r\n        uses: actions/checkout@v3\r\n        with:\r\n          # needed to calc build number via git log --oneline\r\n          fetch-depth: 0\r\n\r\n      - name: Build\r\n        env:\r\n          CERT_PWD: ${{ secrets.CERT_PWD }}\r\n        run: .\\doit.bat -ci\r\n\r\n      # a separate step from -ci to make logs easier to read\r\n      - name: Upload to spaces and s3\r\n        env:\r\n          AWS_SECRET: ${{ secrets.AWS_SECRET }}\r\n          AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\r\n          BB_SECRET: ${{ secrets.BB_SECRET }}\r\n          BB_ACCESS: ${{ secrets.BB_ACCESS }}\r\n          SPACES_KEY: ${{ secrets.SPACES_KEY }}\r\n          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\r\n          WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\r\n          WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\r\n        run: .\\doit.bat -ci-upload\r\n```"}
{"id": "63c4976dcbc73931bb1805bb", "level": "level2", "llm_response": "```yaml\nname: Build & Test NStack\n\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n    branches:\n      - main\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install GitVersion\n        uses: gittools/actions/gitversion@v0.9.7\n        with:\n          versionSpec: '5.x'\n\n      - name: Determine Version\n        id: gitversion\n        run: echo \"::set-output name=version::$(gitversion /output json | jq -r '.Version.SemVer')\"\n\n      - name: Display GitVersion outputs\n        run: echo \"Version: ${{ steps.gitversion.outputs.version }}\"\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '5.0'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build Debug\n        run: dotnet build --configuration Debug\n\n      - name: Test\n        run: dotnet test --configuration Debug\n```", "answer": "```yaml name: Build & Test NStack\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    outputs: \n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} \n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0 #fetch-depth is needed for GitVersion\n\n    #Install and calculate the new version with GitVersion  \n    - name: Install GitVersion\n      uses: gittools/actions/gitversion/setup@v0.9.13\n      with:\n        versionSpec: 5.x\n    - name: Determine Version\n      uses: gittools/actions/gitversion/execute@v0.9.13\n      id: gitversion # step id used as reference for output values\n    - name: Display GitVersion outputs\n      run: |\n        echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n        echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: 6.0.x\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build Debug\n      run: |\n       dotnet-gitversion /updateprojectfiles \n       dotnet build --no-restore -c Debug\n\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```"}
{"id": "63c49f2733b087f6bde6470b", "level": "level2", "llm_response": "```yaml\nname: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check Markdown links\n        run: |\n          markdown-link-check .\n```", "answer": "```yaml name: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n      with:\n        fetch-depth: 1\n    - uses: gaurav-nelson/github-action-markdown-link-check@master\n```"}
{"id": "63c4a0901899db5886514714", "level": "level2", "llm_response": "```yaml\nname: test-coverage\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  test-coverage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up R\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install dependencies\n        run: |\n          install.packages(\"covr\")\n          install.packages(\"testthat\")\n\n      - name: Run tests\n        run: Rscript -e \"library(testthat); test_check('your_package_name')\"\n\n      - name: Calculate coverage\n        run: Rscript -e \"library(covr); coverage <- codecov(); writeLines(coverage, 'coverage.txt')\"\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v1\n        with:\n          file: coverage.txt\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: test-coverage\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main```"}
{"id": "63c497cf6fc19abdf9ca5032", "level": "level2", "llm_response": "```yaml\nname: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: True\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Install & build\n        run: npm run build\n\n      - name: Lint & forbidden dependency check\n        run: npm run lint\n\n      - name: Run tests\n        run: npm test\n\n      - name: Upload code coverage\n        uses: codecov/codecov-action@v1\n```", "answer": "```yaml name: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: true\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  check:\n    strategy:\n      fail-fast: true\n      matrix:\n        node-version:\n          - 18.x\n        platform:\n          - ubuntu-latest\n\n    runs-on: ${{matrix.platform}}\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}\n          restore-keys: |\n            ${{matrix.node-version}}@${{matrix.platform}}-build-\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{matrix.node-version}}\n      - name: install & build\n        run: |\n          npm install\n          npm run build\n      - name: lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run depcruise\n      - run: npm run test:cover\n      - uses: paambaati/codeclimate-action@v3.0.0\n        env:\n          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n```"}
{"id": "63c49e951e336480757ae6d2", "level": "level2", "llm_response": "```yaml\nname: build-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - releases/*\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build project\n        run: npm run build\n```", "answer": "```yaml name: \"build-test\"\non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build: # make sure build/ci work properly\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: |\n        npm install\n        npm run all\n```"}
{"id": "63c4a0956fc19abdf9cdd93b", "level": "level2", "llm_response": "```yaml\nname: first startup\n\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Get full Python version\n        id: full-python-version\n        run: echo \"Python version: $(python --version)\"\n      - name: Cache pip dir\n        id: pip-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n      - name: Cache tox env\n        uses: actions/cache@v2\n        with:\n          path: ~/.tox\n          key: ${{ runner.os }}-tox-${{ hashFiles('**/tox.ini') }}\n          restore-keys: |\n            ${{ runner.os }}-tox-\n      - name: ''\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox\n```", "answer": "```yaml name: first startup\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n\n  test:\n    name: Startup test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7', '3.10']\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        id: pip-cache\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache tox env\n        uses: actions/cache@v3\n        with:\n          path: .tox\n          key: tox-cache-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}-first-startup\n      - uses: mvdbeek/gha-yarn-cache@master\n        with:\n          yarn-lock-file: 'galaxy root/client/yarn.lock'\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox -e first_startup\n        working-directory: 'galaxy root'\n```"}
{"id": "63c494187843b612699fef52", "level": "level2", "llm_response": "```yaml\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run validation script\n        run: |\n          if [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n            if [ \"${{ github.event.inputs.debug-the }}\" == \"true\" ]; then\n              echo \"Debug mode is enabled\"\n            fi\n          fi\n          echo \"Validating CODEOWNERS file...\"\n          # Add your validation script here\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Validate CODEOWNERS\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c495678052faa2781b1912", "level": "level2", "llm_response": "```yaml\nname: External Trigger Scheduler\n\non:\n  schedule:\n    - cron: '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Step 1\n        run: echo \"Step 1 is running\"\n\n      - name: External Trigger Scheduler\n        run: echo \"External Trigger Scheduler step is running\"\n```", "answer": "```yaml name: External Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-swag/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```"}
{"id": "63c49dcf517fc08c1eeff4cc", "level": "level2", "llm_response": "```yaml\nname: Check for semantic PR title\n\non:\n  pull_request:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n  pull_request_target:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        run: |\n          # Add your script here to check if the PR is a reverted PR\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for semantic PR title\n        run: |\n          # Add your script here to check for semantic PR title\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add comment to PR\n        run: |\n          # Add your script here to add a comment to the PR\n\n      - name: Format code\n        id: fc\n        run: |\n          # Add your script here to format the code\n\n      - name: Run tests\n        run: |\n          # Add your script here to run tests\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Check for semantic PR title\"\n\non:\n  # Semantic PR module only works with pull_request_target\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - edited\n      - synchronize\n      - ready_for_review\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - uses: amannn/action-semantic-pull-request@01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb # pin@v5.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            docs\n            style\n            refactor\n            perf\n            test\n            build\n            ci\n            chore\n            revert\n          # Configure which scopes are allowed.\n          scopes: |\n            aaa_server\n            agw\n            amf\n            ci\n            cloud\n            connectiond\n            control_proxy\n            csfb\n            ctraced\n            cwg\n            deps\n            deps-dev\n            directoryd\n            dp\n            eap\n            eap_aka\n            eap_sim\n            enodebd\n            envoy_controller\n            eventd\n            feg\n            feg_hello\n            feg_relay\n            health\n            lte\n            magmad\n            mme\n            mobilityd\n            monitord\n            nms\n            orc8r\n            pipelined\n            policydb\n            radiusd\n            redirectd\n            redis\n            s6a_proxy\n            s8_proxy\n            sctpd\n            session_proxy\n            sessiond\n            smf\n            smsd\n            state\n            subscriberdb\n            swx_proxy\n            td-agent-bit\n            upf\n          # Configure that a scope must always be provided.\n          requireScope: false\n          # For work-in-progress PRs you can typically use draft pull requests\n          # from GitHub. However, private repositories on the free plan don't have\n          # this option and therefore this action allows you to opt in to using the\n          # special \"[WIP]\" prefix to indicate this state. This will avoid the\n          # validation of the PR title and the pull request checks remain pending.\n          # Note that a second check will be reported if this is enabled.\n          wip: true\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub\n          # will suggest using that commit message instead of the PR title for the\n          # merge commit, and it's easy to commit this by mistake. Enable this option\n          # to also validate the commit message for one commit PRs.\n          validateSingleCommit: true\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    env:\n      STATUS: ':heavy_check_mark:'\n      check-type: Semantic PR check\n      check-documentation: See [instructions on formatting your commit and pull request titles](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format).\n    steps:\n      - if: needs.check-semantic-pr.result == 'failure'\n        run: echo 'STATUS=:x:' >> $GITHUB_ENV\n      - uses: peter-evans/find-comment@b657a70ff16d17651703a84bee1cb9ad9d2be2ea # pin@v2.0.1\n        id: fc\n        with:\n          issue-number: ${{ github.event.number }}\n          body-includes: ${{ env.check-type }}\n      - uses: thollander/actions-comment-pull-request@686ab1cab89e0f715a44a0d04b9fdfdd4f33d751 # pin@v1.4.1\n        if: >\n          (needs.check-semantic-pr.result == 'failure')\n          || (steps.fc.outputs.comment-id != '')\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment_includes: ${{ env.check-type }}\n          message: |\n            ${{ env.STATUS }} The **${{ env.check-type }}** ended with status **${{ needs.check-semantic-pr.result }}**. ${{ env.check-documentation }}\n```"}
{"id": "63c49b0d1842bc13d777adfa", "level": "level2", "llm_response": "```yaml\nname: pr2changelog\n\non:\n  pull_request:\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - created\n    paths-ignore:\n      - CHANGELOG.md\n\njobs:\n  dry_check:\n    id: dry_check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: pr2changelog\n        id: pr2changelog\n        run: |\n          # Placeholder for pr2changelog command\n          echo \"Running pr2changelog for dry check\"\n      - name: Comment PR\n        run: |\n          # Placeholder for commenting on PR\n          echo \"Commenting on PR for dry check\"\n\n  after_merge:\n    id: after_merge\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: pr2changelog\n        id: pr2changelog\n        run: |\n          # Placeholder for pr2changelog command\n          echo \"Running pr2changelog after merge\"\n      - name: Comment PR\n        run: |\n          # Placeholder for commenting on PR\n          echo \"Commenting on PR after merge\"\n```", "answer": "```yaml name: pr2changelog\non:\n  pull_request_target:\n    paths-ignore:\n      - \"CHANGELOG.md\"\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - opened\n\njobs:\n  dry_check:\n    if: github.event.pull_request.merged == false\n\n    name: changelog generator dry check\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.found_changes == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR has no registered changes in its description!\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  after_merge:\n    if: github.event.pull_request.merged == true\n\n    name: changelog generator\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          api_secret_token: ${{ secrets.CHANGELOG_API_SECRET }}\n          api_url: \"https://changelog.unitystation.org/register-change\"\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.generated_changelog == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR was merged with no registered changes or there was a problem with the API caller.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c498cab008460c1df23749", "level": "level2", "llm_response": "```yaml\nname: xcodebuild\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  Xcode:\n    runs-on: macos-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Xcode\n        uses: actions/setup-xcode@v2\n        with:\n          xcode-version: '12.5'\n\n      - name: Build and test\n        run: xcodebuild test -workspace YourWorkspace.xcworkspace -scheme YourScheme -configuration Release\n```", "answer": "```yaml name: xcodebuild\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: ['*']\n\njobs:\n  Xcode:\n    strategy:\n      matrix:\n        xcode_version: ['13.3', '13.4.1']\n    runs-on: macos-12\n    env:\n      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app\n    steps:\n      - uses: actions/checkout@v3\n      - run: xcodebuild -version\n      - run: xcodebuild -scheme sourcekitten -parallel-testing-enabled NO test -destination platform=macOS\n```"}
{"id": "63c4a11fb008460c1df58525", "level": "level2", "llm_response": "```yaml\nname: Conventional Commits\n\non:\n  pull_request:\n    branches: [ '*' ]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Run Conventional Commits check\n      run: dotnet tool install -g conventionalcommits\n      env:\n        DOTNET_CLI_TELEMETRY_OPTOUT: 1\n```", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - '**'\n\njobs:\n  build:\n    name: Conventional Commits\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: webiny/action-conventional-commits@v1.1.0\n```"}
{"id": "63c49d8d517fc08c1eefd9b0", "level": "level2", "llm_response": "```yaml\nname: Go Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  unit:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        go: [1.16, 1.17, 1.18]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Go information\n      run: go version\n\n    - name: Use msys2 on windows\n      if: runner.os == 'Windows'\n      run: |\n        choco install msys2 -y\n        msys2_shell.cmd -defterm -no-start -c \"pacman -S --noconfirm git\"\n\n    - name: Run repo-specific setup\n      run: |\n        # Add any repo-specific setup steps here\n\n    - name: Run tests\n      run: go test ./...\n\n    - name: Run tests (32 bit)\n      run: GOARCH=386 go test ./...\n\n    - name: Run tests with race detector\n      run: go test -race ./...\n\n    - name: Collect coverage files\n      run: go test -coverprofile=coverage.out ./...\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        file: coverage.out\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Test\n\njobs:\n  unit:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ \"ubuntu\", \"windows\", \"macos\" ]\n        go: [ \"1.18.x\", \"1.19.x\" ]\n    env:\n      COVERAGES: \"\"\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    name: ${{ matrix.os }} (go ${{ matrix.go }})\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Go information\n        run: |\n          go version\n          go env\n      - name: Use msys2 on windows\n        if: ${{ matrix.os == 'windows' }}\n        shell: bash\n        # The executable for msys2 is also called bash.cmd\n        #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#shells\n        # If we prepend its location to the PATH\n        #   subsequent 'shell: bash' steps will use msys2 instead of gitbash\n        run: echo \"C:/msys64/usr/bin\" >> $GITHUB_PATH\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-test-setup\n        if: hashFiles('./.github/actions/go-test-setup') != ''\n      - name: Run tests\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          # Use -coverpkg=./..., so that we include cross-package coverage.\n          # If package ./A imports ./B, and ./A's tests also cover ./B,\n          # this means ./B's coverage will be significantly higher than 0%.\n          run: go test -v -shuffle=on -coverprofile=module-coverage.txt -coverpkg=./... ./...\n      - name: Run tests (32 bit)\n        if: ${{ matrix.os != 'macos' }} # can't run 32 bit tests on OSX.\n        uses: protocol/multiple-go-modules@v1.2\n        env:\n          GOARCH: 386\n        with:\n          run: |\n            export \"PATH=${{ env.PATH_386 }}:$PATH\"\n            go test -v -shuffle=on ./...\n      - name: Run tests with race detector\n        if: ${{ matrix.os == 'ubuntu' }} # speed things up. Windows and OSX VMs are slow\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go test -v -race ./...\n      - name: Collect coverage files\n        shell: bash\n        run: echo \"COVERAGES=$(find . -type f -name 'module-coverage.txt' | tr -s '\\n' ',' | sed 's/,$//')\" >> $GITHUB_ENV\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0\n        with:\n          files: '${{ env.COVERAGES }}'\n          env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}\n```"}
{"id": "63c494cd8052faa2781ad6e7", "level": "level2", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    id: build\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install deps (Linux)\n        if: runner.os == 'Linux'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y build-essential\n\n      - name: Install deps (macOS)\n        if: runner.os == 'macOS'\n        run: |\n          brew install llvm\n\n      - name: Build\n        run: make\n\n      - name: Test\n        run: make test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: build\n\n  wasm:\n    id: wasm\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set environment (1/3)\n        run: echo \"Setting environment step 1\"\n\n      - name: Set environment (2/3)\n        run: echo \"Setting environment step 2\"\n\n      - name: Set environment (3/3)\n        run: echo \"Setting environment step 3\"\n\n      - name: Add Homebrew to $PATH\n        if: runner.os == 'macOS'\n        run: echo \"::add-path::/usr/local/bin\"\n\n      - name: Install WASI SDK\n        run: |\n          git clone https://github.com/WebAssembly/wasi-sdk.git\n          export WASI_SDK_PATH=$(pwd)/wasi-sdk\n\n      - name: Install Binaryen\n        run: |\n          git clone https://github.com/WebAssembly/binaryen.git\n          cd binaryen\n          make\n          sudo make install\n\n      - name: Setup Wasmer\n        run: |\n          git clone https://github.com/wasmerio/wasmer.git\n          cd wasmer\n          cargo build --release\n\n      - name: Build\n        run: wasmer build\n\n      - name: Test\n        run: wasmer test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: wasm-artifacts\n          path: wasmer/target/release\n\n      - name: Publish on WAPM\n        run: wapm publish\n```", "answer": "```yaml   name: Build\n\n  on:\n    create:\n      tags:\n    push:\n      branches:\n        - main\n    pull_request:\n\n  jobs:\n    build:\n      name: Native\n      runs-on: ${{ matrix.os }}\n      strategy:\n        fail-fast: false\n        matrix:\n          os:\n            - ubuntu-latest\n            - macos-latest\n      steps:\n        - uses: actions/checkout@v1\n        - name: Install deps (Linux)\n          run: |\n            sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev\n          if: matrix.os == 'ubuntu-latest'\n        - name: Install deps (macOS)\n          run: |\n            brew install readline vim libffi openssl make\n            echo \"$(brew --prefix)/opt/make/libexec/gnubin\" >> $GITHUB_PATH\n          if: matrix.os == 'macos-latest'\n        - name: Build\n          run: make release\n        - name: Test\n          run: make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: ${{ format( 'tpl-{0}', matrix.os) }}\n            path: tpl\n\n    # Roughly matches https://github.com/WebAssembly/wasi-sdk#install\n    wasm:\n      name: WebAssembly\n      runs-on: ubuntu-latest\n      env:\n        WASI_VERSION: 12\n        BINARYEN_VERSION: 109\n        WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n      steps:\n        - uses: actions/checkout@v1\n        - name: Set environment (1/3)\n          run: |\n            echo \"WASI_VERSION_FULL=${WASI_VERSION}.0\" >> $GITHUB_ENV\n            echo \"RELEASE_VERSION=`git tag --points-at HEAD | sed 's/^v//'`\" >> $GITHUB_ENV\n        - name: Set environment (2/3)\n          run: |\n            echo \"WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}\" >> $GITHUB_ENV\n        - name: Set environment (3/3)\n          run: |\n            echo \"WASI_CC=${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot\" >> $GITHUB_ENV\n        - name: Add Homebrew to $PATH\n          run: echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH\n        - name: Install WASI SDK\n          run: |\n            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n            tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n        - name: Install Binaryen\n          run: brew install binaryen\n        - name: Setup Wasmer\n          uses: wasmerio/setup-wasmer@v1\n        - name: Build\n          run: |\n            make clean\n            make wasm\n        - name: Test\n          run: |\n            echo 'wasmer --dir . tpl.wasm -- $@' > tpl\n            chmod +x tpl\n            make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: tpl.wasm\n            path: tpl.wasm\n        - name: Publish on WAPM\n          run: |\n            sed -i \"s/__RELEASE_VERSION__/$RELEASE_VERSION/\" wapm.toml\n            wapm login $WAPM_REGISTRY_TOKEN\n            wapm publish\n          if: ${{ env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != '' }}\n```"}
{"id": "63c49a0b1842bc13d7774640", "level": "level2", "llm_response": "```yaml\nname: auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Merge pull request\n        run: |\n          git config --global user.name 'GitHub Actions'\n          git config --global user.email 'github-actions@github.com'\n          git pull origin main\n          git push origin main\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          # auto-merge rules are in /.github/auto-merge.yml\n          github-token: ${{ secrets.AUTO_MERGE_TOKEN }}```"}
{"id": "63c49e4bb008460c1df46891", "level": "level2", "llm_response": "```yaml\nname: Build PR for MyPet\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v2\n        with:\n          java-version: '17'\n          distribution: 'adopt'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n\n      - name: Install Dependencies\n        run: mvn dependency:go-offline\n\n      - name: Compile\n        run: mvn compile\n```", "answer": "```yaml name: Build PR for MyPet\n\non:\n  pull_request:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: \"\"\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: 17\n          distribution: 'microsoft'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/install_dependencies.sh') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Dependencies\n        run: ./install_dependencies.sh\n\n      - name: Compile\n        run: mvn --batch-mode package -DGIT_COMMIT=${{ github.sha }} -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e901e336480757ae4de", "level": "level2", "llm_response": "```yaml\nname: deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Rust\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n        profile: minimal\n        override: true\n\n    - name: Build\n      run: cargo build --release\n\n    - name: Package\n      run: cargo package\n\n    - name: Release\n      run: echo \"Release step\"\n```", "answer": "```yaml name: deploy\n\non:\n  push:\n    tags: \n      - \"v*.*.*\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: jetli/wasm-pack-action@v0.3.0\n      with:\n        # Optional version of wasm-pack to install(eg. '0.9.1', 'latest')\n        version: 'latest'\n    - name: Build\n      run: |\n        cp .env.example .env\n        npm run install\n        npm run build\n    - name: Package\n      shell: bash\n      run: |\n        tar czvf target/conduit-wasm.tar.gz crates/conduit-wasm/dist\n        zip -r target/conduit-wasm.zip crates/conduit-wasm/dist\n        shasum -a 256 target/conduit-wasm.tar.gz > target/conduit-wasm.tar.gz.sha256\n        shasum -a 256 target/conduit-wasm.zip > target/conduit-wasm.zip.sha256\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: |\n          target/conduit-wasm.tar.gz\n          target/conduit-wasm.tar.gz.sha256\n          target/conduit-wasm.zip\n          target/conduit-wasm.zip.sha256\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c493ba7843b612699fd3ef", "level": "level2", "llm_response": "```yaml\nname: Windows\n\non:\n  push:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n\njobs:\n  vs2022:\n    runs-on: windows-latest\n\n    steps:\n      - name: Step 1\n        run: echo Step 1\n      - name: Step 2\n        run: echo Step 2\n      - name: Step 3\n        run: echo Step 3\n      - name: Step 4\n        run: echo Step 4\n      - name: Step 5\n        run: echo Step 5\n\n  vs2022-clang:\n    runs-on: windows-latest\n\n    steps:\n      - name: Step 1\n        run: echo Step 1\n      - name: Step 2\n        run: echo Step 2\n      - name: Step 3\n        run: echo Step 3\n      - name: Step 4\n        run: echo Step 4\n      - name: Step 5\n        run: echo Step 5\n\n  vs2019:\n    runs-on: windows-latest\n\n    steps:\n      - name: Step 1\n        run: echo Step 1\n      - name: Step 2\n        run: echo Step 2\n      - name: Step 3\n        run: echo Step 3\n      - name: Step 4\n        run: echo Step 4\n      - name: Step 5\n        run: echo Step 5\n\n  vs2019-clang:\n    runs-on: windows-latest\n\n    steps:\n      - name: Step 1\n        run: echo Step 1\n      - name: Step 2\n        run: echo Step 2\n      - name: Step 3\n        run: echo Step 3\n      - name: Step 4\n        run: echo Step 4\n      - name: Step 5\n        run: echo Step 5\n```", "answer": "```yaml name: Windows\n\non:\n  push:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n\njobs:\n  vs2022:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON\n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2022-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -T ClangCL -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -T ClangCL  -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n```"}
{"id": "63c4a18b736e7f0ed8c7b8f2", "level": "level2", "llm_response": "```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  create-github-release:\n    id: create-github-release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Create GitHub Release and Git tag\n        run: |\n          # Add your release creation and git tag commands here\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aa5b008460c1df2f2ad", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: php\n\n      - name: Autobuild\n        run: |\n          # Add commands to build your project here\n          echo \"Building project...\"\n          # Example command: composer install\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49d3433b087f6bde57d7c", "level": "level2", "llm_response": "```yaml\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - '.checkov.yaml'\n      - '.dockerignore'\n      - '.gcloudignore'\n      - '.editorconfig'\n      - '.gitconfig*'\n      - '.gitignore'\n      - '.grype.yaml'\n      - '.hound.yml'\n      - '.terraformignore'\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run build commands\n        run: |\n          # Add your build commands here\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c4991f33b087f6bde3d444", "level": "level2", "llm_response": "```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Close stale issues and pull requests\n        run: |\n          gh issue close --label \"stale\"\n          gh pr close --label \"stale\"\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```"}
{"id": "63c5c656c779603593c9f31a", "level": "level2", "llm_response": "```yaml\nname: Dependencies check\n\non:\n  workflow_dispatch:\n    inputs:\n      head_sha:\n        description: 'The SHA of the head commit'\n        required: true\n        type: string\n      base_sha:\n        description: 'The SHA of the base commit'\n        required: true\n        type: string\n      target_branch:\n        description: 'The target branch'\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    id: validate_submodules_and_ls_dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.ref }}\n          submodules: recursive\n          fetch-depth: 0\n          token: ${{ github.token }}\n\n      - name: Validate\n        run: |\n          echo \"Validating submodules and dependencies...\"\n          # Add your validation commands here\n```", "answer": "```yaml name: \"Dependencies check\"\n\non:\n  workflow_call:\n    inputs:\n      head_sha:\n        required: true\n        type: string\n      base_sha:\n        required: true\n        type: string\n      target_branch:\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    name: \"Submodules/deps\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: hmarr/debug-action@v2.1.0\n\n      - name: Validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const {repo, owner} = context.repo;\n            const head_sha = '${{ inputs.head_sha }}'\n            const base_sha = '${{ inputs.base_sha }}'\n            const targetBranch = '${{ inputs.target_branch }}'.replace('refs/heads/', '')\n            const strictCheckBranchPrefixes = ['ls-release/']\n\n            let submodules = [\n                {owner: 'heartexlabs', repo: 'label-studio-frontend'},\n                {owner: 'heartexlabs', repo: 'dm2'}\n            ]\n            \n            \n            async function getLSSubmoduleVersions(sha) {\n                let {data: lsTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: sha\n                })\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'label_studio' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'frontend' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dist' && e.type === 'tree').sha\n                })).data\n                const {data: lsDMTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dm' && e.type === 'tree').sha\n                })\n                const {data: dmfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsDMTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const dmVersionContent = Buffer.from(dmfVersion.content, dmfVersion.encoding).toString(\"utf8\")\n                const matchDM = dmVersionContent.match('\"commit\": \"(.*)\",')\n                const {data: lsLSFTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'lsf' && e.type === 'tree').sha\n                })\n                const {data: lsfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsLSFTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const lsfVersionContent = Buffer.from(lsfVersion.content, lsfVersion.encoding).toString(\"utf8\")\n                const matchLSF = lsfVersionContent.match('\"commit\": \"(.*)\",')\n                return {\n                    'label-studio-frontend': matchLSF[1],\n                    'dm2': matchDM[1],\n                }\n            }\n            \n            let base_sha_redacted = base_sha\n            if (base_sha_redacted === '0000000000000000000000000000000000000000') {\n                console.log(`Branch creation event. Using head_sha (${head_sha}) parent as base_sha`)\n                const {data: commit} = await github.rest.git.getCommit({\n                    owner,\n                    repo,\n                    commit_sha: head_sha,\n                });\n                console.log(commit.parents)\n                base_sha_redacted = commit.parents[0].sha\n            }\n            \n            const baseVersions = await getLSSubmoduleVersions(base_sha_redacted)\n            console.log(`before: ${base_sha_redacted}`)\n            console.log(baseVersions)\n            \n            const headVersions = await getLSSubmoduleVersions(head_sha)\n            console.log(`after: ${head_sha}`)\n            console.log(headVersions)\n            \n            const strictCheck = strictCheckBranchPrefixes.some(e => targetBranch.startsWith(e))\n            console.log(`Strict check: ${strictCheck}`)\n            \n            let failed = []\n            for (let submodule of submodules) {\n                if (baseVersions[submodule.repo] === headVersions[submodule.repo] && !strictCheck) {\n                    console.log(`${submodule.repo}: Is not changed`)\n                    continue\n                }\n            \n                const {data: submoduleRepo} = await github.rest.repos.get({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                });\n                const submoduleBranch = targetBranch === 'develop' ? submoduleRepo.default_branch : targetBranch\n                const {data: listCommits} = await github.rest.repos.listCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    per_page: 100,\n                    sha: submoduleBranch\n                });\n            \n                const commits = listCommits.map(e => e.sha)\n            \n                const headCommitNumber = commits.indexOf(headVersions[submodule.repo])\n                if (headCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${headVersions[submodule.repo]} from PR is not found in submodule ${submoduleBranch} branch`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n                if (strictCheck && headCommitNumber !== 0) {\n                    console.log(`${submodule.repo}: For the release branch, submodule should be pointed to the latest commit in submodule corresponding release branch which is ${listCommits[0].html_url}`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n            \n                const baseCommitNumber = commits.indexOf(baseVersions[submodule.repo])\n                if (baseCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${baseVersions[submodule.repo]} from ${targetBranch} is not found in submodule ${submoduleBranch} branch`)\n                    continue\n                }\n            \n                const {data: compare} = await github.rest.repos.compareCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    base: baseVersions[submodule.repo],\n                    head: headVersions[submodule.repo],\n                });\n                console.log(`${submodule.repo}: ${headVersions[submodule.repo]} is ${compare.ahead_by} ahead and ${compare.behind_by} behind ${baseVersions[submodule.repo]}: ${compare.html_url}`)\n                if (compare.behind_by > 0) {\n                    failed.push(submodule.repo)\n                    continue\n                }\n            }\n            \n            if (failed.length !== 0) {\n                throw `Versions for ${failed.toString()} are downgraded or not found`;\n            }\n```"}
{"id": "63c4a0196fc19abdf9cda745", "level": "level2", "llm_response": "```yaml\nname: Announce Release\n\non:\n  release:\n    types: [published, prereleased, created]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    id: bump-aur-package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        run: |\n          echo \"${{ secrets.AUR_SSH_KEY }}\" | tr -d '\\r' | ssh-add -\n          mkdir -p ~/.ssh\n          chmod 700 ~/.ssh\n          echo \"Host aur.archlinux.org\" >> ~/.ssh/config\n          echo \"  IdentityFile ~/.ssh/id_rsa\" >> ~/.ssh/config\n          chmod 600 ~/.ssh/config\n      - name: Bump AUR Package\n        run: |\n          git clone $AUR_REPO\n          cd usql\n          git checkout $VER\n          # Add your AUR package bumping steps here\n          git push\n\n  bump-homebrew-formula:\n    id: bump-homebrew-formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          git clone $HOMEBREW_REPO\n          cd homebrew-xo\n          git checkout $VER\n          # Add your Homebrew formula bumping steps here\n          git push\n\n  announce-discord:\n    id: announce-discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          # Add your Discord announcement steps here\n```", "answer": "```yaml name: Announce Release\n\non:\n  release:\n    types: [published]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    name: Bump AUR Package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n          name: id_ed25519\n          known_hosts: |\n            aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN\n            aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=\n            aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=\n      - name: Bump AUR Package\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/aur-usql.XXXXXX)\n          export REPO_PATH=$WORKDIR/aur-usql\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $AUR_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'kenshaw@gmail.com'\n          sed -i \"s/pkgver=.*$/pkgver=${VER#v}/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/sha256sums=.*$/sha256sums=('$SHA256SUM')/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgrel=.*$/pkgrel=1/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgver =.*$/pkgver = ${VER#v}/\" $REPO_PATH/.SRCINFO\n          sed -i \"s%source =.*$%source = usql-${VER#v}.tar.gz::https://github.com/xo/usql/archive/${VER}.tar.gz%\" $REPO_PATH/.SRCINFO\n          sed -i \"s/sha256sums =.*$/sha256sums = $SHA256SUM/\" $REPO_PATH/.SRCINFO\n          sed -i \"s/pkgrel =.*$/pkgrel = 1/\" $REPO_PATH/.SRCINFO\n          git -C $REPO_PATH add PKGBUILD .SRCINFO\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  bump-homebrew-formula:\n    name: Bump Homebrew Formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/homebrew-xo.XXXXXX)\n          export REPO_PATH=$WORKDIR/homebrew-xo\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $HOMEBREW_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'ken@usql.app'\n          sed -i \"s%url \\\".*$%url \\\"https://github.com/xo/usql/archive/${VER}.tar.gz\\\"%\" $REPO_PATH/Formula/usql.rb\n          sed -i \"s/sha256 \\\".*$/sha256 \\\"$SHA256SUM\\\"/\" $REPO_PATH/Formula/usql.rb\n          git -C $REPO_PATH add Formula/usql.rb\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  announce-discord:\n    name: Announce Discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          curl \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"username\": \"usql\", \"content\": \"> *usql ${{ github.ref_name }}* has been released!\\n\\nGet it here: https://github.com/xo/usql/releases/${{ github.ref_name }}\"}' \\\n            ${{ secrets.DISCORD_WEBHOOK_URL }}\n```"}
{"id": "63c49994517fc08c1eee4a14", "level": "level2", "llm_response": "```yaml\nname: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Checkout source\n      uses: actions/checkout@v2\n\n    - name: golangci-lint\n      uses: golangci/golangci-lint-action@v2\n      with:\n        version: v1.43.0\n```", "answer": "```yaml on: [push, pull_request]\nname: Lint\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n```"}
{"id": "63c49aab1e33648075795bea", "level": "level2", "llm_response": "```yaml\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: string\n\njobs:\n  failed-workflow:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Rerun a workflow\n      run: echo \"Rerunning workflow with ID: ${{ github.event.inputs.run_id }}\"\n```", "answer": "```yaml ##\n# Performs follow-up tasks when a workflow fails or is cancelled.\n##\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: 'string'\n\njobs:\n  # Attempts to rerun a workflow.\n  #\n  # Performs the following steps:\n  # - Retrieves the workflow run that dispatched this workflow.\n  # - Restarts all failed jobs when the workflow fails or is cancelled for the first time.\n  failed-workflow:\n    name: Rerun a workflow\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Rerun a workflow\n        uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda # v6.3.2\n        with:\n          retries: 2\n          retry-exempt-status-codes: 418\n          script: |\n            const workflow_run = await github.rest.actions.getWorkflowRun({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n            });\n\n            // Only rerun after the first run attempt.\n            if ( workflow_run.data.run_attempt > 1 ) {\n              return;\n            }\n\n            const rerun = await github.rest.actions.reRunWorkflowFailedJobs({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n              enable_debug_logging: true\n            });\n```"}
{"id": "63c4a013b008460c1df518fc", "level": "level2", "llm_response": "```yaml\nname: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 0 * * *'\n  pull_request:\n    paths:\n      - test/internet/**\n    types: [opened, synchronize, reopened, ready_for_review]\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths:\n      - test/internet/**\n\npermissions:\n  contents: read\n\nenv:\n  PYTHON_VERSION: 3.11\n  FLAKY_TESTS: keep_retrying\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test-internet:\n    id: test-internet\n    steps:\n      - name: ''\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: echo \"Python version: ${{ env.PYTHON_VERSION }}\"\n      - name: Build\n        run: echo \"Building the project...\"\n      - name: Test Internet\n        run: echo \"Testing the internet...\"\n```", "answer": "```yaml name: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 5 0 * * *\n\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths: [test/internet/**]\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths: [test/internet/**]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: keep_retrying\n\npermissions:\n  contents: read\n\njobs:\n  test-internet:\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: npx envinfo\n      - name: Build\n        run: make build-ci -j2 V=1 CONFIG_FLAGS=\"--error-on-warn\"\n      - name: Test Internet\n        run: make test-internet -j2 V=1;\n```"}
{"id": "63c4a0c133b087f6bde6e92c", "level": "level2", "llm_response": "```yaml\nname: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - android/src/**/*.kt\n      - **.kts\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run ktlint\n        run: ./gradlew ktlintCheck\n\n      - name: Fix ktlint\n        run: ./gradlew ktlintFormat\n```", "answer": "```yaml name: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - 'android/src/**/*.kt'\n      - '**.kts'\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.46.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n      - name: run ktlint\n        run: |\n          ktlint --reporter=checkstyle,output=build/ktlint-report.xml\n        continue-on-error: true\n      - uses: yutailang0119/action-ktlint@v3\n        with:\n          report-path: build/*.xml # Support glob patterns by https://www.npmjs.com/package/@actions/glob\n        continue-on-error: false # If annotations contain error of severity, action-ktlint exit 1.```"}
{"id": "63c49f8d33b087f6bde66e80", "level": "level2", "llm_response": "```yaml\nname: Create Jira issue\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  jira:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Call composite action\n        uses: actions/checkout@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Create Jira issue\n\non:\n  issues:\n    types: labeled\n\njobs:\n  jira:\n    if: ${{ github.event.label.name == 'to-jira' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call composite action\n        uses: hazelcast/github-jira-tool-action@v3\n        with:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n          TARGET_JIRA_PROJECT: API\n          JIRA_LABEL: Go\n          ISSUE_TYPE: Bug\n```"}
{"id": "63c4968b6fc19abdf9c9ca77", "level": "level2", "llm_response": "```yaml\nname: Manual Build\n\non:\n  workflow_dispatch:\n    inputs:\n      buildRef:\n        description: 'Ref to build'\n        required: true\n        default: 'refs/heads/main'\n      mvnOpts:\n        description: 'Maven options'\n        required: true\n        default: '--fail-at-end'\n      goals:\n        description: 'Maven goals'\n        required: true\n        default: 'verify'\n      utOpts:\n        description: 'Unit test options'\n        required: true\n        default: '-Dtest=noTest'\n      itOpts:\n        description: 'Integration test options'\n        required: true\n        default: '-Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2'\n      addOpts:\n        description: 'Additional options'\n        required: true\n        default: '-Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat'\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    id: mvn\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        run: |\n          echo \"Manual build triggered by ${github.event.sender.login}\"\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Cache local maven repository\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n      - name: Show the first log message\n        run: echo \"Starting Maven build with options: ${{ github.event.inputs.mvnOpts }}, goals: ${{ github.event.inputs.goals }}, UT options: ${{ github.event.inputs.utOpts }}, IT options: ${{ github.event.inputs.itOpts }}, additional options: ${{ github.event.inputs.addOpts }}\"\n      - name: Override DNS to fix IP address for hostname\n        run: |\n          echo \"nameserver 8.8.8.8\" | sudo tee -a /etc/resolv.conf\n          echo \"nameserver 8.8.4.4\" | sudo tee -a /etc/resolv.conf\n      - name: Build with Maven\n        run: mvn ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n      - name: Upload unit test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: unit-test-results\n          path: target/surefire-reports\n      - name: Upload integration test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: integration-test-results\n          path: target/failsafe-reports\n      - name: Upload mini test logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: mini-test-logs\n          path: target/logs\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# This workflow will build a Java project with Maven\n# See also:\n#   https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events\n\nname: Manual Build\n\non:\n  workflow_dispatch:\n    # these inputs break down the Maven command-line, somewhat arbitrarily, so\n    # the UI when starting a run is easier to use\n    inputs:\n      buildRef:\n        description: Ref to build\n        required: true\n        default: refs/heads/main\n      mvnOpts:\n        description: Maven options\n        required: true\n        default: --fail-at-end\n      goals:\n        description: Maven goals\n        required: true\n        default: verify\n      utOpts:\n        description: Unit test options\n        required: true\n        default: -Dtest=noTest\n      itOpts:\n        description: Integration test options\n        required: true\n        default: -Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2\n      addOpts:\n        description: Additional options\n        required: true\n        default: -Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    name: mvn (triggered by ${{ github.event.sender.login }})\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.inputs.buildRef }}\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: adopt\n        java-version: 11\n    - name: Cache local maven repository\n      uses: actions/cache@v3\n      with:\n        path: |\n          ~/.m2/repository/\n          !~/.m2/repository/org/apache/accumulo\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        restore-keys: ${{ runner.os }}-m2\n    - name: Show the first log message\n      run: git log -n1\n    - name: Override DNS to fix IP address for hostname\n      run: |\n        ip -br addr\n        echo \"'hostname -i' shows '$(hostname -i)'\"\n        echo \"'hostname -I' shows '$(hostname -I)'\"\n        hostname_short=$(hostname -s)\n        hostname_long=$(hostname -f)\n        if ! grep -q $hostname_short /etc/hosts; then\n          actual_ip=$(ip -4 addr show dev eth0 | grep -o 'inet [0-9.]*' | cut -f2 -d ' ')\n          echo \"Setting $hostname_long / $hostname_short to $actual_ip in /etc/hosts\"\n          echo \"$actual_ip $hostname_long $hostname_short\" | sudo tee -a /etc/hosts\n          ip -br addr\n          echo \"'hostname -i' shows '$(hostname -i)'\"\n          echo \"'hostname -I' shows '$(hostname -I)'\"\n        fi\n    - name: Build with Maven\n      timeout-minutes: 345\n      run: mvn -B -V -e -ntp \"-Dstyle.color=always\" ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n      env:\n        MAVEN_OPTS: -Djansi.force=true\n    - name: Upload unit test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: surefire-reports\n        path: ./**/target/surefire-reports/\n        if-no-files-found: ignore\n    - name: Upload integration test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: failsafe-reports\n        path: ./**/target/failsafe-reports/\n        if-no-files-found: ignore\n    - name: Upload mini test logs\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: mini-tests-logs\n        path: ./**/target/**/mini-tests/**/logs/\n        if-no-files-found: ignore\n\n```"}
{"id": "63c49937cbc73931bb18c2b2", "level": "level2", "llm_response": "```yaml\nname: check_shell_scripts\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Install shellcheck\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y shellcheck\n\n    - name: display shellcheck version\n      run: shellcheck --version\n\n    - name: run check_shell_scripts\n      run: shellcheck .\n```", "answer": "```yaml ---\nname: check_shell_scripts\n\n# yamllint disable-line rule:truthy\non: [push]\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install shellcheck\n        run: |\n          sudo apt-get install shellcheck\n\n      - name: display shellcheck version\n        run: |\n          shellcheck --version\n\n      - name: run check_shell_scripts\n        run: |\n          ./scripts/checkShellScripts.sh\n...\n```"}
{"id": "63c4995333b087f6bde3e963", "level": "level2", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        sanitizer: [address, undefined]\n\n    steps:\n    - name: Build Fuzzers (${{ matrix.sanitizer }})\n      id: build\n      run: |\n        # Add your build commands here\n        echo \"Building fuzzers with sanitizer: ${{ matrix.sanitizer }}\"\n\n    - name: Run Fuzzers (${{ matrix.sanitizer }})\n      run: |\n        # Add your fuzzing commands here\n        echo \"Running fuzzers with sanitizer: ${{ matrix.sanitizer }}\"\n\n    - name: Upload Crash\n      run: |\n        # Add your crash upload commands here\n        echo \"Uploading crash reports\"\n```", "answer": "```yaml name: CIFuzz\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   strategy:\n     fail-fast: false\n     matrix:\n       sanitizer: [address, undefined, memory]\n   steps:\n   - name: Build Fuzzers (${{ matrix.sanitizer }})\n     id: build\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Run Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       fuzz-seconds: 3600\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Upload Crash\n     uses: actions/upload-artifact@v1\n     if: failure() && steps.build.outcome == 'success'\n     with:\n       name: ${{ matrix.sanitizer }}-artifacts\n       path: ./out/artifacts\n\n```"}
{"id": "63c5c62aac4f2678a5bd79f0", "level": "level2", "llm_response": "```yaml\nname: Mark or close stale issues and PRs\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 20 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for stale issues and PRs\n        run: |\n          # Add your script to check for stale issues and PRs here\n          echo \"Checking for stale issues and PRs...\"\n```", "answer": "```yaml ---\nname: \"Mark or close stale issues and PRs\"\non:\n  workflow_dispatch:\n  schedule:\n    # Run the stalebot every day at 8pm UTC\n    - cron: \"00 20 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578 # tag=v6\n        with:\n          repo-token: ${{ secrets.BOT_TOKEN }}\n          days-before-issue-stale: 180\n          days-before-pr-stale: 180\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had recent activity.\n            It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          stale-pr-message: >\n            This pull request has been automatically marked as stale because it has not had\n            recent activity. It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          close-issue-message: >\n            This issue has been automatically closed due to inactivity.\n            Please re-open if this still requires investigation.\n          close-pr-message: >\n            This pull request has been automatically closed due to inactivity.\n            Please re-open if these changes are still required.\n          stale-pr-label: \"stale\"\n          stale-issue-label: \"stale\"\n          exempt-issue-labels: \"keepalive\"\n          exempt-pr-labels: \"keepalive\"\n```"}
{"id": "63c49eef6fc19abdf9cd2cf5", "level": "level2", "llm_response": "```yaml\nname: Make lens list\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - data/db/**\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\nconcurrency:\n  group: 'pages'\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    steps:\n      - name: ''\n      - name: Create lens list from master sources\n      - name: Checkout website repo\n      - name: Commit updated lens list to website repo\n```", "answer": "```yaml # Create the up-to-date lens list to be published on the GitHub pages website\n\nname: Make lens list\n\non:\n  push:\n    branches: \n        - master\n    paths:\n       - 'data/db/**'\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\n# Allow write/commit to checked out repos\npermissions:\n  contents: write\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Create lens list from master sources\n      run: ./tools/lenslist/show_lensfun_coverage.py -t -o lenslist.html ./data/db\n\n    - name: Checkout website repo\n      uses: actions/checkout@v3\n      with:\n        repository: lensfun/lensfun.github.io\n        path: website-repo\n        token: ${{secrets.PUSH_SECRET}}\n\n    - name: Commit updated lens list to website repo\n      run: |\n        cp website-repo/_includes/lenslist-develop-header.md website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        dt=`date '+%Y-%m-%d'`\n        echo -en \"\\nThis list was generated on $dt from current Lensfun sources. Your Lensfun version may be older, resulting in less coverage.\\n\" >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cat lenslist.html >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cd website-repo/\n        git add _posts/lenslist/2999-12-31-Lenslist-master.md\n        git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Update master lens list from GitHub Actions\"\n        git push https://$USERNAME:$REPO_KEY@github.com/lensfun/lensfun.github.io.git\n      env:\n        REPO_KEY: ${{secrets.PUSH_SECRET}}\n        USERNAME: github-actions[bot]\n        \n```"}
{"id": "63c49c8b6fc19abdf9cc3a67", "level": "level2", "llm_response": "```yaml\nname: Test Functional (Local Chrome proxyless)\n\non:\n  workflow_dispatch:\n\ninputs:\n  sha:\n    description: 'The SHA to test'\n    required: true\n    default: 'master'\n  merged_sha:\n    description: 'The merge commit SHA'\n    required: true\n  deploy_run_id:\n    description: 'The ID of the deployment workspace run with artifacts'\n    required: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n      - name: Build project\n        run: npm run build\n\n      - name: Get npm cache directory\n        id: npm-cache-dir\n        run: echo \"::set-output name=dir::$(npm config get cache)\"\n\n      - name: Cache node modules\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.npm-cache-dir.outputs.dir }}\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: test-results\n\n      - name: Download artifacts\n        uses: actions/download-artifact@v2\n        with:\n          name: test-results\n\n      - name: Clean up\n        run: rm -rf node_modules\n```", "answer": "```yaml name: Test Functional (Local Chrome proxyless)\n\non:\n    workflow_dispatch:\n        inputs:\n            sha:\n                desciption: 'The test commit SHA or ref'\n                required: true\n                default: 'master'\n            merged_sha:\n                description: 'The merge commit SHA'\n            deploy_run_id:\n                description: 'The ID of a deployment workspace run with artifacts'\njobs:\n    test:\n        runs-on: ubuntu-latest\n        environment: test-functional\n        env:\n            RETRY_FAILED_TESTS: true\n        steps:\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'pending',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/checkout@v2\n              with:\n                  ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}\n\n            - uses: actions/setup-node@v2\n              with:\n                  node-version: 14\n\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n                      let artifacts = {};\n\n                      for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {\n                        try {\n                          ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({\n                          repo: context.repo.repo,\n                          owner: context.repo.owner,\n                          run_id: context.payload.inputs.deploy_run_id\n                        }));\n                        }\n                        catch (e) {\n                          console.log(e);\n                        }\n                      }\n\n                      const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === 'npm').archive_download_url);\n                      require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, 'package.zip'), Buffer.from(artifact))\n\n            - run: |\n                  unzip package.zip\n                  tar --strip-components=1 -xzf testcafe-*.tgz\n\n            - name: Get npm cache directory\n              id: npm-cache-dir\n              run: |\n                  echo \"::set-output name=dir::$(npm config get cache)\"\n            - uses: actions/cache@v2\n              with:\n                  path: ${{ steps.npm-cache-dir.outputs.dir }}\n                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n                  restore-keys: |\n                      ${{ runner.os }}-node-\n            - run: npm ci\n            - run: npx gulp test-functional-local-proxyless-run --steps-as-tasks\n              timeout-minutes: 60\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'success',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/github-script@v3\n              if: failure() || cancelled()\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'failure',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n```"}
{"id": "63c49dec1842bc13d778d6ad", "level": "level2", "llm_response": "```yaml\nname: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to publish'\n        required: true\n        type: string\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Setup Node\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install\n      run: npm install\n\n    - name: Run integration tests\n      run: npm run integration-tests\n\n    - name: Run tests\n      run: npm test\n\n    - name: Run local integration tests\n      run: npm run local-integration-tests\n\n    - name: Build\n      run: npm run build\n\n    - name: Set version\n      run: echo \"##vso[task.setvariable variable=VERSION]$VERSION\"\n\n    - name: Publish to NPM\n      run: npm publish\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n    - name: Push changes\n      run: |\n        git config --global user.name 'github-actions'\n        git config --global user.email 'github-actions@github.com'\n        git add package.json\n        git commit -m \"chore: bump version to $VERSION\"\n        git push origin main\n```", "answer": "```yaml name: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: true\n          xpack.security.enabled: false\n          ES_JAVA_OPTS: -Xms1024m -Xmx1024m\n        ports:\n          - 9200:9200\n          - 9300:9300\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: false\n        ports:\n          - 26500:26500\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.17.0\n          cache: 'npm'\n      - name: Install\n        run: npm ci --ignore-scripts\n      - name: Run integration tests\n        run: npm run test:integration\n      - name: Run tests\n        run: npm run test\n      - name: Run local integration tests\n        run: npm run test:local\n      - name: Build\n        run: npm run build\n      - name: Set version\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          npm version ${{ inputs.version }} -m \"Publish v%s\"\n      - name: Publish to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --access=public\n      - name: Push changes\n        run: git push --follow-tags\n```"}
{"id": "63c49e53517fc08c1ef02a7b", "level": "level2", "llm_response": "```yaml\nname: Close stale issues and PRs\n\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Close stale issues and PRs\n        run: |\n          gh issue list --state open --since \"30 days ago\" --json number | jq -r '.[].number' | xargs -I {} gh issue close {} --repo ${{ github.repository }} --comment \"This issue/PR has been closed because it has been inactive for over 30 days.\"\n```", "answer": "```yaml name: 'Close stale issues and PRs'\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5.1.1\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-message: 'This PR is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-label: 'no-pr-activity'\n          days-before-stale: 14\n          days-before-close: 5\n```"}
{"id": "63c4a0851842bc13d779e225", "level": "level2", "llm_response": "```yaml\nname: Release https://lrc-maker.github.io and npm\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Test project\n        run: npm test\n\n      - name: Lint code\n        run: npm run lint\n\n      - name: Format code\n        run: npm run format\n\n      - name: Publish NPM\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Deploy to lrc-maker.github.io\n        run: |\n          echo \"//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}\" > ~/.npmrc\n          npm run deploy\n```", "answer": "```yaml name: Release https://lrc-maker.github.io and npm\n\non:\n    push:\n        tags:\n            - \"v*\"\n\njobs:\n    deploy:\n        if: startsWith(github.ref, 'refs/tags/v')\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: pnpm/action-setup@v2.2.2\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: \"16\"\n                  registry-url: \"https://registry.npmjs.org\"\n                  cache: \"pnpm\"\n\n            - run: pnpm i --ignore-scripts --frozen-lockfile\n\n            - run: pnpm run listdiff\n            - run: pnpm run lint\n            - run: make deploy\n\n            - name: Publish NPM\n              run: npm publish --ignore-scripts\n              env:\n                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n\n            - name: Deploy to lrc-maker.github.io\n              uses: peaceiris/actions-gh-pages@v3\n              with:\n                  personal_token: ${{ secrets.GHP_TOKEN }}\n                  external_repository: lrc-maker/lrc-maker.github.io\n                  publish_branch: master\n                  publish_dir: ./build\n                  force_orphan: true\n```"}
{"id": "63c49d57517fc08c1eefc300", "level": "level2", "llm_response": "```yaml\nname: CompatHelper\n\non:\n  schedule:\n    - cron: '19 22 * * *'\n  workflow_dispatch:\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  CompatHelper:\n    id: CompatHelper\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: |\n          if command -v julia &> /dev/null\n          then\n            echo \"Julia is already available in the PATH\"\n          else\n            echo \"Julia is not available in the PATH\"\n          fi\n      - name: Install Julia, but only if it is not already available in the PATH\n        if: steps.julia_in_path.outputs.julia_in_path == 'Julia is not available in the PATH'\n        run: |\n          # Add Julia installation steps here\n          echo \"Julia is installed\"\n      - name: Add the General registry via Git\n        run: |\n          julia -e 'using Pkg; Pkg.add(\"General\")'\n      - name: Install CompatHelper\n        run: |\n          julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: Run CompatHelper\n        run: |\n          julia -e 'using CompatHelper; CompatHelper.run()'\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 19 22 * * *\n  workflow_dispatch:\npermissions:\n  contents: write\n  pull-requests: write\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: which julia\n        continue-on-error: true\n      - name: Install Julia, but only if it is not already available in the PATH\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1'\n          arch: ${{ runner.arch }}\n        if: steps.julia_in_path.outcome != 'success'\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49fce736e7f0ed8c7083c", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v2\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n\n    - name: \ud83d\udce8 Discord notification\n      uses: appleboy/discord-webhook-action@v1\n      with:\n        webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}\n        content: 'CodeQL analysis completed.'\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 2\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2.1.28\n      with:\n        languages: python\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      uses: github/codeql-action/autobuild@v2.1.28\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2.1.28\n\n    - name: \ud83d\udce8 Discord notification\n      if: ${{ github.event_name == 'schedule' && failure() }}\n      env:\n        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n      uses: Ilshidur/action-discord@0.3.2\n      with:\n        args: \"[Scheduled action failed!](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\"\n```"}
{"id": "63c49e256fc19abdf9ccdc74", "level": "level2", "llm_response": "```yaml\nname: make image\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    types: [ created ]\n  repository:\n    types: [ pushed ]\n\njobs:\n  makeimage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: make image\n      run: make image\n```", "answer": "```yaml on: push\nname: make image\njobs:\n  makeimage:\n    name: make image\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make image\n        run: make image\n        shell: bash\n```"}
{"id": "63c49fdb1842bc13d7799b37", "level": "level2", "llm_response": "```yaml\nname: Clean\n\non:\n  push:\n  tag:\n  repository_dispatch:\n\njobs:\n  delete-artifacts:\n    id: delete-artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Add your delete artifacts command here\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49c441842bc13d77827ae", "level": "level2", "llm_response": "```yaml\nname: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Cache\n      uses: actions/cache@v2\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ matrix.node-version }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Prepare\n      run: |\n        # Prepare steps here\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v2\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: Build\n      run: |\n        # Build steps here\n\n    - name: Upload Extension Pack\n      run: |\n        # Upload steps here\n```", "answer": "```yaml name: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    container: archlinux:base-devel\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: node_modules\n      \n      - name: Prepare\n        run: |\n          pacman -Sy\n          pacman -S --noconfirm base gnome-shell gtk3 libadwaita gtk4 glib2 gobject-introspection\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Build\n        run: |\n          npm install\n          npm run github_action\n        \n      - name: Upload Extension Pack\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: rounded-window-corners@yilozt.shell-extension\n          path: _build/\n```"}
{"id": "63c499ca1e33648075790155", "level": "level2", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '40 11 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Mark stale issues and pull requests\n        uses: actions/stale@v4\n        with:\n          days-before-stale: 90\n          days-before-close: 7\n          stale-label: 'stale'\n          exempt-issue-labels: 'important'\n          exempt-pull-request-labels: 'important'\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '40 11 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'Stale issue message'\n        stale-pr-message: 'Stale pull request message'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```"}
{"id": "63c49e29cbc73931bb1abbd4", "level": "level2", "llm_response": "```yaml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  generate_apps_list:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup node env\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Generate\n        run: php generate.php\n\n      - name: Deploy\n        run: |\n          git config --global user.name \"github-actions[bot]\"\n          git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n          git add .\n          git commit -m \"Deploy to GitHub Pages\"\n          git push origin master\n```", "answer": "```yaml name: Deploy to GitHub Pages\n\non:\n  push:\n    branches: [master]\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate\n        run: node index.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```"}
{"id": "63c49a611e33648075793dd1", "level": "level2", "llm_response": "```yaml\nname: Publish ARC\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\npermissions:\n  contents: write\n  packages: write\n\njobs:\n  release-controller:\n    id: release-controller\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install tools\n        run: |\n          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1\n          go install github.com/mikefarah/yq/v4@v4.13.4\n\n      - name: Set version\n        run: echo \"VERSION=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: arc-binary\n          path: arc\n\n      - name: Setup Docker Environment\n        id: vars\n        run: echo \"DOCKER_IMAGE=ghcr.io/your-repo/arc:${{ env.VERSION }}\" >> $GITHUB_ENV\n\n      - name: Build and Push\n        run: |\n          docker build -t ${{ env.DOCKER_IMAGE }} .\n          docker push ${{ env.DOCKER_IMAGE }}\n```", "answer": "```yaml name: Publish ARC\n\non:\n  release:\n    types:\n      - published\n\n# https://docs.github.com/en/rest/overview/permissions-required-for-github-apps\npermissions:\n contents: write \n packages: write\n\njobs:\n  release-controller:\n    name: Release\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.18.2'\n\n      - name: Install tools\n        run: |\n          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz\n          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz\n          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder\n          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash\n          sudo mv kustomize /usr/local/bin\n          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz\n          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz\n          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin\n\n      - name: Set version\n        run: echo \"VERSION=$(cat ${GITHUB_EVENT_PATH} | jq -r '.release.tag_name')\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          make github-release\n\n      - name: Setup Docker Environment\n        id: vars\n        uses: ./.github/actions/setup-docker-environment\n        with:\n          username: ${{ env.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          ghcr_username: ${{ github.actor }}\n          ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          file: Dockerfile\n          platforms: linux/amd64,linux/arm64\n          build-args: VERSION=${{ env.VERSION }}\n          push: true\n          tags: |\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:latest\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:latest\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```"}
{"id": "63c49d3a6fc19abdf9cc7f20", "level": "level2", "llm_response": "```yaml\nname: PR update\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Update all PRs\n        run: |\n          # Add your update PRs script here\n```", "answer": "```yaml name: PR update\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: update all prs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a144cbc73931bb1bfd61", "level": "level2", "llm_response": "```yaml\nname: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - 'app/src/main/res/values/strings.xml'\n      - 'daemon/src/main/res/values/strings.xml'\n\njobs:\n  synchronize-with-crowdin:\n    id: synchronize-with-crowdin\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      \n      - name: crowdin action\n        run: echo \"Running crowdin action...\"\n```", "answer": "```yaml name: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n    paths:\n      - app/src/main/res/values/strings.xml\n      - daemon/src/main/res/values/strings.xml\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: crowdin action\n      uses: crowdin/github-action@master\n      with:\n        upload_translations: false\n        download_translations: false\n        upload_sources: true\n        config: 'crowdin.yml'\n        crowdin_branch_name: master\n      env:\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}\n```"}
{"id": "63c49f1b736e7f0ed8c6c249", "level": "level2", "llm_response": "```yaml\nname: Comment Bot\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  Comment:\n    id: Comment\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment\n        run: echo \"Hello! This is a comment from the Comment Bot.\" >> $GITHUB_EVENT_PATH\n```", "answer": "```yaml name: \"Comment Bot\"\n\non:\n  pull_request_target:\n    types: [ opened ]\n\njobs:\n  Comment:\n    name: Add Comment\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          greeting: |\n            **Thank you for creating a pull request!**\n            If you have not done so already, please familiarise yourself with our [Contributing Guidelines](https://github.com/adoptium/temurin-build/blob/master/CONTRIBUTING.md) and [FAQ](https://github.com/adoptium/temurin-build/blob/master/FAQ.md), even if you have contributed to the Adoptium project before. GitHub actions will now run a set of jobs against your PR that will lint and unit test your changes. Keep an eye out for the results from these on the latest commit you submitted. For more information, please see our [testing documentation](https://github.com/adoptium/temurin-build/blob/master/Testing.md).\n```"}
{"id": "63c49bc033b087f6bde4e23d", "level": "level2", "llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    id: license-and-vulnerability-scan\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Run license and vulnerability scan\n      run: go mod tidy && go list -m all | grep -v \"vendor\" | xargs -I {} golangci-lint run --issues-exit-code 1 {}\n```", "answer": "```yaml #\n# Copyright 2022 The Sigstore Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    name: License and Vulnerability Scan\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```"}
{"id": "63c49f1e1899db588650b1ca", "level": "level2", "llm_response": "```yaml\nname: Build Web\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-main:\n    id: build-main\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Dart\n      uses: dart-lang/setup-dart@v1\n      with:\n        sdk-version: '2.12'\n\n    - name: Install Sentry\n      run: |\n        echo \"sentry-cli version: $(sentry-cli --version)\"\n        curl -sL https://sentry.io/get-cli/ | bash\n        export PATH=\"$HOME/.sentry-cli:$PATH\"\n\n    - name: Setup Flutter\n      uses: subosito/flutter-action@v1\n      with:\n        flutter-version: '2.5.3'\n\n    - name: Prepare App\n      run: flutter pub get\n\n    - name: Build Hosted App\n      run: flutter build web --release --base-href=/\n\n    - name: Build Profile App\n      run: flutter build web --profile --base-href=/\n\n    - name: Build Selfhosted App\n      run: flutter build web --debug --base-href=/\n```", "answer": "```yaml name: Build Web\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build-main:\n    name: Build Web - MAIN\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: subosito/flutter-action@v1\n        with:\n          flutter-version: '3.3.0'\n          #channel: 'stable'\n      - name: Install Sentry\n        run: |\n          curl -sL https://sentry.io/get-cli/ | bash\n      - name: Setup Flutter\n        run: |\n          flutter doctor -v\n          flutter pub get\n          flutter config --enable-web\n      - name: Prepare App\n        run: |\n          cp lib/.env.dart.example lib/.env.dart\n          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n          flutter --version --machine >> lib/flutter_version.dart\n          echo \";\" >> lib/flutter_version.dart\n      - name: Build Hosted App\n        run: |\n          #export SENTRY_RELEASE=$(sentry-cli releases propose-version)\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} new $SENTRY_RELEASE --project ${{secrets.sentry_project}}\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} set-commits --auto $SENTRY_RELEASE\n\n          flutter build web --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE --source-maps\n\n          sed -i '/index.html/d' build/web/flutter_service_worker.js\n\n          git config --global user.email ${{secrets.commit_email}}\n          git config --global user.name ${{secrets.commit_name}}\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n          cd invoiceninja\n\n          git checkout v5-develop\n          cp -r ../build/web/* ./public/\n          rm ./public/index.html\n          git add .\n          git commit -m 'Admin Portal - Hosted'\n          git push\n          cd ..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext dart --rewrite\n          cd ./build/web\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext map --ext js --rewrite\n          cd ../..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} finalize $SENTRY_RELEASE\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} deploys $SENTRY_RELEASE new -e production          \n      - name: Build Profile App\n        run: |\n          flutter build web --profile\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_profile\n          cd invoiceninja_profile\n\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.profile.dart.js\n          git add .\n          git commit -m 'Admin Portal - Profile'\n          git push\n          cd ..      \n      - name: Build Selfhosted App\n        run: |\n          cp lib/utils/oauth.dart.foss lib/utils/oauth.dart\n          cp lib/utils/app_review.dart.foss lib/utils/app_review.dart\n          cp lib/ui/app/upgrade_dialog.dart.foss lib/ui/app/upgrade_dialog.dart\n          cp lib/ui/app/pinput.dart.foss lib/ui/app/pinput.dart\n          cp pubspec.foss.yaml pubspec.yaml \n          flutter pub get\n\n          flutter build web\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_foss\n          cd invoiceninja_foss\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.foss.dart.js\n          cp ../build/web/main.dart.js.map ./public/main.foss.dart.js.map\n          git add .\n          git commit -m 'Admin Portal - Selfhosted'\n          git push\n\n#  build-next:\n#    name: Build Web - NEXT\n#    needs: build-main\n#    env:\n#      commit_secret: ${{secrets.commit_secret}}\n#      commit_email: ${{secrets.commit_email}}\n#      commit_name: ${{secrets.commit_name}}\n#      api_secret: ${{secrets.api_secret}}\n#    runs-on: ubuntu-latest\n#    steps:\n#      - uses: actions/checkout@v1\n#      - uses: subosito/flutter-action@v1\n#        with:\n#          flutter-version: '3.3.0'\n#      - name: Setup Flutter\n#        run: |\n#          flutter doctor -v\n#          cp pubspec.next.yaml pubspec.yaml\n#          rm pubspec.lock\n#          flutter pub get\n#          flutter config --enable-web\n#      - name: Prepare App\n#        run: |\n#          cp lib/.env.dart.example lib/.env.dart\n#          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n#          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n#          flutter --version --machine >> lib/flutter_version.dart\n#          echo \";\" >> lib/flutter_version.dart\n#      - name: Build Hosted App\n#        run: |\n#          flutter build web\n#\n#          sed -i '/index.html/d' build/web/flutter_service_worker.js\n#\n#          git config --global user.email ${{secrets.commit_email}}\n#          git config --global user.name ${{secrets.commit_name}}\n#\n#          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n#          cd invoiceninja\n#\n#          git checkout v5-develop\n#          cp ../build/web/main.dart.js ./public/main.next.dart.js\n#          git add .\n#          git commit -m 'Admin Portal - Next'\n#          git push\n#          cd ..```"}
{"id": "63c499e4b008460c1df2a73d", "level": "level2", "llm_response": "```yaml\nname: Security\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - package.json\n  pull_request:\n    branches:\n      - main\n    paths:\n      - package.json\n  schedule:\n    - cron: '17 15 * * 1'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  audit-ci:\n    id: audit-ci\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n      - name: Install Node.js v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v2\n        with:\n          path: ~/.yarn\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n      - name: Install dependencies\n        run: yarn install\n      - name: Audit for vulnerabilities\n        run: yarn audit\n\n  trivy-scan-repo:\n    id: trivy-scan-repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n      - name: Run Trivy vulnerability scanner in repo mode\n        run: trivy repo .\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: trivy-report.sarif\n\n  codeql-analyze:\n    id: codeql-analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n        with:\n          languages: typescript\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v1\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: Security\n\non:\n  push:\n    branches: [main]\n    paths:\n      - \"package.json\"\n  pull_request:\n    paths:\n      - \"package.json\"\n  schedule:\n    # Runs every Monday morning PST\n    - cron: \"17 15 * * 1\"\n\n# Cancel in-progress runs for pull requests when developers push\n# additional changes, and serialize builds in branches.\n# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-concurrency-to-cancel-any-in-progress-job-or-run\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  audit-ci:\n    name: Audit node modules\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: \"**/node_modules\"\n          key: yarn-build-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            yarn-build-\n\n      - name: Install dependencies\n        if: steps.cache-yarn.outputs.cache-hit != 'true'\n        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile\n\n      - name: Audit for vulnerabilities\n        run: yarn _audit\n        if: success()\n\n  trivy-scan-repo:\n    name: Scan repo with Trivy\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          scan-type: \"fs\"\n          scan-ref: \".\"\n          ignore-unfixed: true\n          format: \"template\"\n          template: \"@/contrib/sarif.tpl\"\n          output: \"trivy-repo-results.sarif\"\n          severity: \"HIGH,CRITICAL\"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: \"trivy-repo-results.sarif\"\n\n  codeql-analyze:\n    permissions:\n      actions: read # for github/codeql-action/init to get workflow details\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/autobuild to send a status report\n    name: Analyze with CodeQL\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql-config.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f9a33b087f6bde6736e", "level": "level2", "llm_response": "```yaml\nname: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    id: lint\n    steps:\n      - name: Check out files\n      - name: Update to latest NPM version\n      - name: Install package dependencies\n      - name: Lint code\n\n  test:\n    id: test\n    steps:\n      - name: Check out files\n      - name: Update to latest NPM version\n      - name: Install package dependencies\n      - name: Test code\n\n  publish:\n    id: publish\n    steps:\n      - name: Check out files\n      - name: Update to latest NPM version\n      - name: Install package dependencies\n      - name: Semantic Release\n```", "answer": "```yaml name: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint --if-present\n\n  test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Test code\n        run: npm run test --if-present\n\n  publish:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main' }}\n    needs: [lint, test]\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Semantic Release\n        run: npx semantic-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c497a6cbc73931bb181c12", "level": "level2", "llm_response": "```yaml\nname: Nightly distribution\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  nightly-distribution:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup keychain\n      run: |\n        # Add your keychain setup commands here\n\n    - name: Build and distribute\n      run: |\n        # Add your build and distribution commands here\n```", "answer": "```yaml name: Nightly distribution\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        include:\n          - branch: \"swiftwasm\"\n            channel: \"DEVELOPMENT\"\n#           targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.3\"\n            channel: \"5.3\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64\"\n          - branch: \"swiftwasm-release/5.4\"\n            channel: \"5.4\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.5\"\n            channel: \"5.5\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.6\"\n            channel: \"5.6\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.7\"\n            channel: \"5.7\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup keychain\n        run: |\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" swiftwasm-ci\n          KEYCHAIN=$HOME/Library/Keychains/swiftwasm-ci-db\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n          security set-keychain-settings -lut 7200 $KEYCHAIN\n          security default-keychain -s $KEYCHAIN\n\n          echo \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64\" | base64 --decode -o developerID_application.p12\n          security import developerID_application.p12 -P \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n          echo \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64\" | base64 --decode -o developerID_installer.p12\n          security import developerID_installer.p12 -P \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n\n          security set-key-partition-list -S \"apple-tool:,apple:\" -s -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n        env:\n          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }}\n\n      - run: ./utils/webassembly/distribute-latest-toolchain.sh ${{ matrix.branch }} ${{ matrix.channel }}\n        env:\n          TARGETS_TO_DIST: ${{ matrix.targets }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BUILDBOT_GITHUB_TOKEN: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_NOTARIZE_EMAIL: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_EMAIL }}\n          DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD }}\n          DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID }}\n```"}
{"id": "63c49d15517fc08c1eefabdb", "level": "level2", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    - cron: '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run Tests\n        run: |\n          pytest\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    # run CI every day even if no PRs/merges occur\n    - cron:  '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    strategy:\n      fail-fast: false\n      matrix:\n        type: [\"slither\", \"manticore\"]\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.8\n    - name: Install dependencies\n      run: |\n        sudo wget -O /usr/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux\n        sudo chmod +x /usr/bin/solc\n    - name: Run Tests\n      env:\n        TEST_TYPE: ${{ matrix.type }}\n      run: |\n        bash program-analysis/${TEST_TYPE}/scripts/gh_action_test.sh\n```"}
{"id": "63c49d70cbc73931bb1a70f8", "level": "level2", "llm_response": "```yaml\nname: Weekly Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 5'\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run pytest\n      run: pytest\n```", "answer": "```yaml name: Weekly Tests\r\n\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    # Runs every friday\r\n    - cron: \"0 0 * * 5\"\r\n\r\njobs:\r\n  test:\r\n    name: \"Python ${{ matrix.python-version }} on ${{ matrix.os }}\"\r\n    runs-on: ${{ matrix.os }}\r\n\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        os: [ubuntu-latest, macos-latest, windows-latest]\r\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\r\n\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n\r\n      - name: Set up Python ${{ matrix.python-version }}\r\n        uses: actions/setup-python@v4.3.0\r\n        with:\r\n          python-version: ${{ matrix.python-version }}\r\n\r\n      - name: Install dependencies\r\n        run: |\r\n          python -m pip install --upgrade pip\r\n          pip install -r requirements.txt -v\r\n\r\n      - name: Run pytest\r\n        run: python -m pytest\r\n```"}
{"id": "63c49a7e33b087f6bde45f85", "level": "level2", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Release Draft\n        uses: release-drafter/release-drafter@v5\n        with:\n          config-file: .github/release-drafter.yml\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n  pull_request_target:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0e9cbc73931bb1bd7aa", "level": "level2", "llm_response": "```yaml\nname: cancel-previous-workflows\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous runs\n        run: |\n          gh workflow run cancel --workflow ${{ github.event.workflow }} --ref ${{ github.ref }} --event ${{ github.event_name }} --confirm\n```", "answer": "```yaml name: cancel-previous-workflows\n\non:\n  pull_request_target:\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous runs\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          workflow_id: all\n          all_but_latest: true\n```"}
{"id": "63c49c2e1842bc13d7781f8c", "level": "level2", "llm_response": "```yaml\nname: StandardRB\n\non:\n  pull_request:\n    branches: [ '*' ]\n  push:\n    branches: [ master ]\n\njobs:\n  standard:\n    id: standard\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n\n    - name: Run StandardRB\n      run: bundle exec standardrb\n```", "answer": "```yaml name: StandardRB\n\non:\n  pull_request:\n    branches:\n      - '*'\n  push:\n    branches:\n      - master\n\njobs:\n  standard:\n    name: StandardRB Check Action\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n        bundler-cache: true\n\n    - name: Run StandardRB\n      run: bundle exec standardrb --format progress\n```"}
{"id": "63c49bbd33b087f6bde4e115", "level": "level2", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Build Fuzzers\n      run: |\n        # Add commands to build fuzzers here\n        echo \"Building fuzzers...\"\n\n    - name: Run Fuzzers\n      run: |\n        # Add commands to run fuzzers here\n        echo \"Running fuzzers...\"\n\n    - name: Upload Crash\n      run: |\n        # Add commands to upload crashes here\n        echo \"Uploading crashes...\"\n```", "answer": "```yaml # Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\nname: CIFuzz\non: [pull_request, push]\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure()\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"id": "63c49b6a1899db58864f3771", "level": "level2", "llm_response": "```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.16\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Install dependencies\n        run: go mod tidy\n\n      - name: Run linter\n        run: golangci-lint run\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [master]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    # don't run this on the master branch\n    if: github.ref != 'refs/heads/master'\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.x'\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n          check-latest: true\n          cache: true\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y libdevmapper-dev libbtrfs-dev\n      - uses: pre-commit/action@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49edb33b087f6bde62769", "level": "level2", "llm_response": "```yaml\nname: Conform PR\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, reopened, synchronize]\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }}\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  conform-pr:\n    id: conform-pr\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Setup Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Conform PR\n      run: |\n        echo \"Conforming PR...\"\n        # Add your Conform PR commands here\n```", "answer": "```yaml ---\n# Attention! This workflow uses `pull_request_target` event that has access to secrets.\n# If you modify this workflow, make sure that you don't introduce dangerous steps.\n# See also: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/.\nname: Conform PR\non:\n  pull_request_target:\n    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target\n    # List all types to make it easier to enable new ones when they are needed.\n    types:\n      # - assigned\n      # - unassigned\n      - labeled\n      - unlabeled # if GitHub Actions stuck, add and remove \"no ci\" label to force rebuild\n      - opened\n      - edited\n      # - closed\n      - reopened\n      - synchronize\n      # - converted_to_draft\n      # - ready_for_review\n      # - locked\n      # - unlocked\n      # - review_requested\n      # - review_request_removed\n      # - auto_merge_enabled\n      # - auto_merge_disabled\n\n# Stop pending and in-progress jobs of this workflow.\n# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }} # GITHUB_TOKEN is not enough to query projects, so we use a special one\n\njobs:\n  conform-pr:\n    name: Conform PR\n    runs-on: ubuntu-20.04\n\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n\n    steps:\n      # Warning! Be careful about changing the steps here as it might cause some security problems\n      # (see the Attention block on the top of this file).\n      - name: Setup Go\n        uses: FerretDB/github-actions/setup-go@main\n        with:\n          cache-key: conform-pr\n\n      - name: Conform PR\n        uses: FerretDB/github-actions/conform-pr@main\n```"}
{"id": "63c499c86fc19abdf9cb1f2d", "level": "level2", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set env\n      run: echo \"BUILD_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_ENV\n\n    - name: checkout code\n      uses: actions/checkout@v2\n\n    - name: Install go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: generate release artifacts\n      run: go build -o myapp .\n\n    - name: generate release notes\n      run: echo \"Release notes for version ${BUILD_VERSION}\" > RELEASE_NOTES.md\n\n    - name: Release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: ${{ github.ref }}\n        release_name: Release ${{ github.ref }}\n        draft: true\n        body_file: RELEASE_NOTES.md\n```", "answer": "```yaml name: release\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\npermissions:\n  contents: write # Allow to create a release.\n\njobs:\n  build:\n    name: create draft release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set env\n        run:  echo \"RELEASE_TAG=${GITHUB_REF:10}\" >> $GITHUB_ENV\n      - name: checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.19'\n      - name: generate release artifacts\n        run: |\n          make release\n      - name: generate release notes\n        run: |\n          make release-notes\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          draft: true\n          files: out/*\n          body_path: _releasenotes/${{ env.RELEASE_TAG }}.md\n```"}
{"id": "63c49b3d1842bc13d777c127", "level": "level2", "llm_response": "```yaml\nname: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - '.github/workflows/test-autoreview.yml'\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - '.github/workflows/test-autoreview.yml'\n\njobs:\n  auto-review-tests:\n    id: auto-review-tests\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Get composer cache directory\n        id: composer-cache\n        run: echo \"::set-output name=dir::$(composer config cache-files-dir)\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.composer-cache.outputs.dir }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist --optimize-autoloader\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit\n```", "answer": "```yaml name: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    name: Automatic Code Review\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: none\n\n      - name: Get composer cache directory\n        run: echo \"COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)\" >> $GITHUB_ENV\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer update --ansi\n        env:\n          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit --color=always --group=auto-review --no-coverage\n```"}
{"id": "63c49c8533b087f6bde535e2", "level": "level2", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [created]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Step 1\n        run: echo \"This is the first step of the TagBot workflow.\"\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49b3d1842bc13d777c123", "level": "level2", "llm_response": "```yaml\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - system/**\n      - .github/workflows/deploy-apidocs.yml\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup credentials\n        run: echo \"Setting up credentials...\"\n\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v2\n        with:\n          path: target\n          repository: owner/repo\n          ref: develop\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Download latest phpDocumentor\n        run: composer require phpdocumentor/phpdocumentor --dev --prefer-dist\n\n      - name: Prepare API repo\n        run: echo \"Preparing API repo...\"\n\n      - name: Build API in source repo\n        run: cd source && ./vendor/bin/phpdocumentor run -d . -t target/api-docs\n\n      - name: Deploy to API repo\n        run: echo \"Deploying to API repo...\"\n```", "answer": "```yaml # When changes are pushed to the develop branch,\n# build the current version of the API documentation\n# with phpDocumentor and deploy it to codeigniter4/api.\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - 'develop'\n    paths:\n      - 'system/**'\n      - '.github/workflows/deploy-apidocs.yml'\n\njobs:\n  build:\n    name: Deploy to api\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Setup credentials\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"${GITHUB_ACTOR}\"\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          repository: codeigniter4/api\n          token: ${{ secrets.ACCESS_TOKEN }}\n          path: api\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          tools: phive\n          coverage: none\n\n      - name: Download latest phpDocumentor\n        working-directory: source\n        run: sudo phive --no-progress install --global --trust-gpg-keys 67F861C3D889C656 phpDocumentor\n\n      - name: Prepare API repo\n        working-directory: api\n        run: |\n          git reset --hard master\n          rm -rfv docs\n          mkdir --parents --verbose docs\n\n      - name: Build API in source repo\n        working-directory: source\n        run: |\n          phpDocumentor run --ansi --verbose\n          cp -R ${GITHUB_WORKSPACE}/source/api/build/* ${GITHUB_WORKSPACE}/api/docs\n\n      - name: Deploy to API repo\n        working-directory: api\n        run: |\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Updated API for commit ${GITHUB_SHA}\"\n            git push origin master\n          fi\n```"}
{"id": "63c49993517fc08c1eee4989", "level": "level2", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches:\n      - master\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 12 * * 6'\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  codeql:\n    id: codeql\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Checkout HEAD on PR\n        if: github.event_name == 'pull_request'\n        run: git checkout ${{ github.event.pull_request.head.sha }}\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Autobuild\n        run: |\n          go build -v ./...\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: codeql\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - 'master'\n  schedule:\n    - cron: '0 12 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n      -\n        name: Checkout HEAD on PR\n        if: ${{ github.event_name == 'pull_request' }}\n        run: |\n          git checkout HEAD^2\n      -\n        name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n      -\n        name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      -\n        name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c499f16fc19abdf9cb2f18", "level": "level2", "llm_response": "```yaml\nname: jenkins-illa-builder-main\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: trigger single Job\n        run: echo \"Triggering single job\"\n```", "answer": "```yaml name: jenkins-illa-builder-main\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: \"http://ec2-13-230-170-106.ap-northeast-1.compute.amazonaws.com:9000/\"\n          user: \"illasoft\"\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n          job: \"illa-builder-main\"\n```"}
{"id": "63c49926b008460c1df25d1c", "level": "level2", "llm_response": "```yaml\nname: PR Check - Packaging: Config and input\n\non:\n  push:\n    branches:\n      - main\n      - releases/v1\n      - releases/v2\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n  workflow_dispatch:\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\n\njobs:\n  packaging-config-inputs-js:\n    id: packaging-config-inputs-js\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2\n      \n      - name: Prepare test\n        id: prepare-test\n        run: echo \"Preparing test environment...\"\n      \n      - name: Build code\n        run: echo \"Building code...\"\n      \n      - name: Check results\n        run: echo \"Checking results...\"\n      \n      - name: Assert Results\n        run: echo \"Asserting results...\"\n```", "answer": "```yaml # Warning: This file is generated automatically, and should not be modified.\n# Instead, please modify the template in the pr-checks directory and run:\n#     pip install ruamel.yaml && python3 sync.py\n# to regenerate this file.\n\nname: 'PR Check - Packaging: Config and input'\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\non:\n  push:\n    branches:\n    - main\n    - releases/v1\n    - releases/v2\n  pull_request:\n    types:\n    - opened\n    - synchronize\n    - reopened\n    - ready_for_review\n  workflow_dispatch: {}\njobs:\n  packaging-config-inputs-js:\n    strategy:\n      matrix:\n        include:\n        - os: ubuntu-latest\n          version: latest\n        - os: macos-latest\n          version: latest\n        - os: windows-2019\n          version: latest\n        - os: windows-2022\n          version: latest\n        - os: ubuntu-latest\n          version: cached\n        - os: macos-latest\n          version: cached\n        - os: windows-2019\n          version: cached\n        - os: ubuntu-latest\n          version: nightly-latest\n        - os: macos-latest\n          version: nightly-latest\n        - os: windows-2019\n          version: nightly-latest\n        - os: windows-2022\n          version: nightly-latest\n    name: 'Packaging: Config and input'\n    timeout-minutes: 45\n    runs-on: ${{ matrix.os }}\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n    - name: Prepare test\n      id: prepare-test\n      uses: ./.github/prepare-test\n      with:\n        version: ${{ matrix.version }}\n    - uses: ./../action/init\n      with:\n        config-file: .github/codeql/codeql-config-packaging3.yml\n        packs: +dsp-testing/codeql-pack1@1.0.0\n        languages: javascript\n        tools: ${{ steps.prepare-test.outputs.tools-url }}\n      env:\n        TEST_MODE: true\n    - name: Build code\n      shell: bash\n      run: ./build.sh\n    - uses: ./../action/analyze\n      with:\n        output: ${{ runner.temp }}/results\n      env:\n        TEST_MODE: true\n\n    - name: Check results\n      uses: ./../action/.github/check-sarif\n      with:\n        sarif-file: ${{ runner.temp }}/results/javascript.sarif\n        queries-run: javascript/example/empty-or-one-block,javascript/example/empty-or-one-block,javascript/example/other-query-block,javascript/example/two-block\n        queries-not-run: foo,bar\n\n    - name: Assert Results\n      shell: bash\n      run: |\n        cd \"$RUNNER_TEMP/results\"\n        # We should have 4 hits from these rules\n        EXPECTED_RULES=\"javascript/example/empty-or-one-block javascript/example/empty-or-one-block javascript/example/other-query-block javascript/example/two-block\"\n\n        # use tr to replace newlines with spaces and xargs to trim leading and trailing whitespace\n        RULES=\"$(cat javascript.sarif | jq -r '.runs[0].results[].ruleId' | sort | tr \"\\n\\r\" \" \" | xargs)\"\n        echo \"Found matching rules '$RULES'\"\n        if [ \"$RULES\" != \"$EXPECTED_RULES\" ]; then\n          echo \"Did not match expected rules '$EXPECTED_RULES'.\"\n          exit 1\n        fi\n    env:\n      INTERNAL_CODEQL_ACTION_DEBUG_LOC: true\n```"}
{"id": "63c49c4dcbc73931bb19fc2f", "level": "level2", "llm_response": "```yaml\nname: Build and test\n\non:\n  push:\n    branches:\n      - '*'\n\njobs:\n  build-all-versions:\n    id: build-all-versions\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v2\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        run: ./gradlew build\n```", "answer": "```yaml name: Build and test\n\non:\n  push:\n    branches: '*'\n#  pull_request:\n#    branches: '*'\n\njobs:\n  build-all-versions:\n    strategy:\n      matrix:\n        scala: [ \"2.12.16\", \"2.13.8\" ]\n        spark: [ \"3.3.0\", \"3.2.1\", \"3.2.0\", \"3.1.3\", \"3.1.2\", \"3.1.1\", \"3.1.0\", \"3.0.3\", \"3.0.2\", \"3.0.1\", \"3.0.0\" ]\n        exclude:\n          - scala: \"2.13.8\"\n            spark: \"3.1.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.0\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.0\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n          check-latest: true\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.gradle/jdks\n          key: ${{ runner.os }}-gradle-spark-${{ matrix.spark }}-${{ matrix.scala }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: |\n            -Pspark=${{ matrix.spark }}\n            -Pscala=${{ matrix.scala }}\n            clean\n            test\n            --scan\n\n  #  qodana:\n  #    runs-on: ubuntu-latest\n  #    steps:\n  #      - uses: actions/checkout@v3\n  #      - name: 'Qodana Scan'\n  #        uses: JetBrains/qodana-action@v5.0.2\n\n\n\n# vim: ts=2:sts=2:sw=2:expandtab\n```"}
{"id": "63c496b21899db58864d49a8", "level": "level2", "llm_response": "```yaml\nname: Code Coverage\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Set up Java\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Set up Gradle\n      uses: gradle/gradle-build-action@v2\n      with:\n        gradle-version: '6.8.3'\n\n    - name: Run Tests\n      run: ./gradlew test\n\n    - name: Run Test Coverage\n      run: ./gradlew jacocoTestReport\n\n    - name: Publish Coverage\n      uses: codecov/codecov-action@v2\n```", "answer": "```yaml name: Code Coverage\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n\n      - name: Set up Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Run Tests\n        run: ./gradlew test -x checkLicenseMain -x checkLicenses -x spotlessCheck -x spotlessApply -Pjacoco\n        continue-on-error: true\n\n      - name: Run Test Coverage\n        run: ./gradlew testCodeCoverageReport -Pjacoco\n\n      - name: Publish Coverage\n        env:\n          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n        run: ./gradlew coverallsJacoco -Pjacoco\n```"}
{"id": "63c497091e3364807577e6aa", "level": "level2", "llm_response": "```yaml\nname: Build\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    branches:\n      - main\n      - dev\n    paths-ignore:\n      - docs/docs/**\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: check out code \ud83d\udece\n      uses: actions/checkout@v2\n\n    - name: Install Node v18\n      uses: actions/setup-node@v2\n      with:\n        node-version: '18'\n\n    - name: Cache node modules\n      id: cache-npm\n      uses: actions/cache@v2\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: List the state of node modules\n      run: ls -la node_modules\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run prettier\n      run: npx prettier --write .\n\n    - name: Run ESLint\n      run: npx eslint .\n\n    - name: Build\n      run: npm run build\n\n    - name: Run Tests\n      run: npm test\n```", "answer": "```yaml name: Build\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    paths-ignore:\n      - \"docs/docs/**\"\n    branches:\n      - main\n      - dev\n\njobs:\n  build:\n    name: Build Monorepo\n    runs-on: ubuntu-latest\n    steps:\n      - name: check out code \ud83d\udece\n        uses: actions/checkout@v3\n\n      - name: Install Node v18\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"18.x\"\n          registry-url: \"https://registry.npmjs.org\"\n\n      - name: Cache node modules\n        id: cache-npm\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          # npm cache files are stored in `~/.npm` on Linux/macOS\n          path: ~/.npm\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-\n      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}\n        name: List the state of node modules\n        continue-on-error: true\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run prettier\n        run: npm run format-check\n\n      - name: Run ESLint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run Tests\n        run: npm run test\n```"}
{"id": "63c497ddb008460c1df1d95d", "level": "level2", "llm_response": "```yaml\nname: Remove old artifacts\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Remove old artifacts\n      run: |\n        # Add your artifact removal commands here\n        echo \"Removing old artifacts...\"\n```", "answer": "```yaml name: Remove old artifacts\n\non:\n  schedule:\n    # Every day at 1am\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n    - name: Remove old artifacts\n      uses: c-hive/gha-remove-artifacts@v1.2.0\n      with:\n        age: '1 month'\n        skip-tags: true\n        skip-recent: 3\n```"}
{"id": "63c496d51899db58864d5867", "level": "level2", "llm_response": "```yaml\nname: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Login\n      run: echo \"Logging in to JIRA...\"\n\n    - name: Find comment with ticket number\n      id: comment\n      run: echo \"Finding comment with ticket number...\"\n\n    - name: Get ticket number\n      id: ticket\n      run: echo \"Getting ticket number...\"\n\n    - name: Close\n      run: echo \"Closing JIRA ticket...\"\n```", "answer": "```yaml name: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    name: Set JIRA ticket to DONE\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login\n        uses: atlassian/gajira-login@master\n        env:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n\n      - name: Find comment with ticket number\n        uses: peter-evans/find-comment@v1\n        id: comment\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body-includes: Internal ticket number is FE-\n\n      - name: Get ticket number\n        id: ticket\n        uses: atlassian/gajira-find-issue-key@master\n        with:\n          string: ${{ steps.comment.outputs.comment-body }}\n\n      - name: Close\n        uses: atlassian/gajira-transition@master\n        with:\n          issue: ${{ steps.ticket.outputs.issue }}\n          transition: 'DONE'\n```"}
{"id": "63c494a17843b61269a0272b", "level": "level2", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n      - name: Update Package.swift.json\n      - name: Install dependencies\n      - name: Build project\n      - name: Build and Push Docker Images\n\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Configure kubectl\n      - name: Deploy to Kubernetes\n      - name: Update DNS\n      - name: Update CDN\n      - name: Deploy\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Purge Cache\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install testing tools\n      - name: Test\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Update Package.swift.json\n        run: |\n          set -ex\n\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          git pull --rebase origin master\n\n          tempdir=$(mktemp -d)\n          filename=\"Package.swift\"\n          curl -sfL -o \"$tempdir/$filename\" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename\n          sed -i 's/swift-tools-version:5.5/swift-tools-version:5.4/g' \"$tempdir/Package.swift\"\n          swift package --package-path \"$tempdir\" dump-package > Resources/$filename.json\n\n          git add Resources/$filename.json\n          git diff-index --quiet HEAD || git commit -m \"Update $filename.json\"\n          git push origin master\n\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n\n      - name: Build and Push Docker Images\n        run: |\n          set -ex\n\n          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.RESOURCE_GROUP }}/${{ env.SERVICE_NAME }}:latest\n\n          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .\n          docker push ${IMAGE_TAG}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: azure/setup-kubectl@v3\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/aks-set-context@v3\n        with:\n          resource-group: ${{ env.RESOURCE_GROUP }}\n          cluster-name: ${{ env.CLUSTER_NAME }}\n\n      - name: Deploy\n        run: |\n          set -ex\n\n          sed \"s/%COMMIT_SHA%/${{ github.sha }}/g;\" \"k8s/pod_template.yaml\" | kubectl apply -f -\n\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }}\n          kubectl get services -o wide\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n        run: |\n          curl -X POST \"https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache\" \\\n            -H \"X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}\" \\\n            -H \"X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"purge_everything\":true}'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test\n        run: |\n          set -ex\n\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"latest\"}'\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"stable\"}'\n\n          versions=$(curl --silent -X GET \"https://swiftfiddle.com/versions\" -H \"Content-Type:application/json\")\n          len=$(echo $versions | jq length)\n          for i in $( seq 0 $(($len - 1)) ); do\n            version=$(echo $versions | jq .[$i])\n            curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n              -H \"Content-Type:application/json\" \\\n              --data \"{\\\"code\\\":\\\"print(\\\\\\\"Hello, World!\\\\\\\")\\\",\\\"toolchain_version\\\":$version}\"\n          done\n```"}
{"id": "63c497fb517fc08c1eeda8d8", "level": "level2", "llm_response": "```yaml\nname: Support Requests\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    id: action\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: echo \"This is a placeholder step\"\n```", "answer": "```yaml name: 'Support Requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'support'\n          issue-comment: >\n            \ud83d\udc4b We use the issue tracker exclusively for bug reports and feature requests.\n            However, this issue appears to be a support request. Please use our\n            [support channels](https://github.com/kivy/kivy-ios/blob/master/README.md#support)\n            to get help with the project.\n            \n            \n            If you're having trouble installing or using kivy-ios,\n            maybe you could be interested to [installation and requirements](https://github.com/kivy/kivy-ios/blob/master/README.md#installation--requirements).\n            \n            \n            Let us know if this comment was made in error, and we'll be happy\n            to reopen the issue.\n          close-issue: true\n          lock-issue: false```"}
{"id": "63c49e0d1899db58865040a6", "level": "level2", "llm_response": "```yaml\nname: pull-request-lint\n\non:\n  pull_request:\n    types: [labeled, opened, synchronize, reopened, ready_for_review, edited]\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Validate PR title\n        run: |\n          echo \"Validating PR title...\"\n          # Add your validation logic here\n```", "answer": "```yaml # ~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\".\n\nname: pull-request-lint\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\njobs:\n  validate:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: amannn/action-semantic-pull-request@v3.4.6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |-\n            feat\n            fix\n            chore\n          requireScope: false\n```"}
{"id": "63c497c61899db58864dbc6a", "level": "level2", "llm_response": "```yaml\nname: Manage the hold label\n\non:\n  workflow_dispatch:\n    inputs:\n      command:\n        description: 'Command to execute'\n        required: true\n        type: choice\n        options:\n          - hold-command\n          - unhold-command\n\njobs:\n  hold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.command == 'hold-command'\n    steps:\n      - name: Add the hold label to avoid merging\n        run: |\n          gh issue label add --owner ${{ github.repository_owner }} --repo ${{ github.repository }} --issue ${{ github.event.issue.number }} --label \"hold\"\n      - name: Report status as reaction\n        run: |\n          gh issue reaction add --owner ${{ github.repository_owner }} --repo ${{ github.repository }} --issue ${{ github.event.issue.number }} --reaction \"eyes\"\n\n  unhold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.command == 'unhold-command'\n    steps:\n      - name: Remove the hold label to allow merging\n        run: |\n          gh issue label remove --owner ${{ github.repository_owner }} --repo ${{ github.repository }} --issue ${{ github.event.issue.number }} --label \"hold\"\n      - name: Report status as reaction\n        run: |\n          gh issue reaction add --owner ${{ github.repository_owner }} --repo ${{ github.repository }} --issue ${{ github.event.issue.number }} --reaction \"eyes\"\n```", "answer": "```yaml name: Manage the hold label\non:\n  repository_dispatch:\n    types:\n      - hold-command\n      - unhold-command\n\njobs:\n  hold:\n    name: Add hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'hold-command'\n\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n\n  unhold:\n    name: Remove the hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'unhold-command'\n\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n```"}
{"id": "63c5ae9f6b748c7b1fadf422", "level": "level2", "llm_response": "```yaml\nname: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Run with tmate debugging'\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  zsh:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install molecule docker\n\n      - name: Run Molecule tests\n        run: |\n          molecule test\n        env:\n          MOLECULE_DEBUG: ${{ github.event.inputs.debug-the }}\n```", "answer": "```yaml name: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```"}
{"id": "63c49742517fc08c1eed5bcf", "level": "level2", "llm_response": "```yaml\nname: Lint Format\n\non:\n  push:\n    branches:\n      - master\n      - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Disable automatic eol conversion\n        run: git config --global core.autocrlf input\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y clang-format\n\n      - name: Run qmk formatters\n        run: make qmk_fmt\n\n      - name: \n        run: echo \"Additional step\"\n\n      - name: Become QMK Bot\n        run: echo \"Bot actions here\"\n\n      - name: Create Pull Request\n        run: echo \"PR creation steps here\"\n```", "answer": "```yaml name: Lint Format\n\non:\n  push:\n    branches:\n    - master\n    - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    container: qmkfm/qmk_cli\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Disable automatic eol conversion\n      run: |\n        echo \"* -text\" > .git/info/attributes\n\n    - name: Install dependencies\n      run: |\n        pip3 install -r requirements-dev.txt\n\n    - name: Run qmk formatters\n      shell: 'bash {0}'\n      run: |\n        qmk format-c -a\n        qmk format-python -a\n        qmk format-text -a\n        git diff\n\n    - uses: rlespinasse/github-slug-action@v3.x\n\n    - name: Become QMK Bot\n      run: |\n        git config user.name 'QMK Bot'\n        git config user.email 'hello@qmk.fm'\n\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      if: ${{ github.repository == 'qmk/qmk_firmware'}}\n      with:\n        token: ${{ secrets.QMK_BOT_TOKEN }}\n        delete-branch: true\n        branch: bugfix/format_${{ env.GITHUB_REF_SLUG }}\n        author: QMK Bot <hello@qmk.fm>\n        committer: QMK Bot <hello@qmk.fm>\n        commit-message: Format code according to conventions\n        title: '[CI] Format code according to conventions'\n```"}
{"id": "63c49ae81899db58864f05dc", "level": "level2", "llm_response": "```yaml\nname: Web-Ext lint\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: web-ext lint\n        run: web-ext lint\n```", "answer": "```yaml name: Web-Ext lint\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: \"Lint\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: \"web-ext lint\"\n        uses: kewisch/action-web-ext@v1\n        with:\n          cmd: lint\n          source: src\n          channel: listed\n```"}
{"id": "63c49ea41842bc13d7792231", "level": "level2", "llm_response": "```yaml\nname: Require PR Labels\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled]\n\njobs:\n  check-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Check PR labels\n        run: |\n          python check_labels.py\n```", "answer": "```yaml name: Require PR Labels\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  check-labels:\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```"}
{"id": "63c49a4033b087f6bde447f3", "level": "level2", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.7'\n\n      - name: Run tests\n        run: bundle exec rake test\n\n      - name: Deploy to Heroku\n        run: |\n          echo \"Deploying to Heroku...\"\n          # Add deployment commands here\n```", "answer": "```yaml name: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy to Heroku\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n    steps:\n    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # tag=v2.5.0\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7 # tag=v1.118.0\n      with:\n        bundler-cache: true # runs 'bundle install' and caches installed gems automatically\n    - name: Run tests\n      run: bundle exec rake\n    - name: Deploy to Heroku\n      uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820 # tag=v3.12.12\n      with:\n        heroku_api_key: ${{secrets.HEROKU_API_KEY}}\n        heroku_app_name: \"devdocs\"\n        heroku_email: \"team@freecodecamp.com\"\n        dontuseforce: true # --force should never be necessary\n        dontautocreate: true # The app exists, it should not be created\n```"}
{"id": "63c49f576fc19abdf9cd5856", "level": "level2", "llm_response": "```yaml\nname: Move new issues to correct docs repo\n\non:\n  issues:\n    types: [opened, transferred, reopened]\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Move to correct repo\n        id: move_to_correct_repo\n        # Add your step commands here\n```", "answer": "```yaml name: Move new issues to correct docs repo\n\n# **What it does**: If anyone creates an issue in the docs-internal repo for the engineering team or the content team, move that issue and notify the author\n# **Why we have it**: We don't want engineering or content issues in the docs-internal repo\n# **Who does it impact**: GitHub staff.\n\non:\n  issues:\n    types:\n      - opened\n      - transferred\n      - reopened\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.repository == 'github/docs-internal'\n    steps:\n      - id: move_to_correct_repo\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        env:\n          TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}\n          TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}\n        with:\n          github-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n          script: |\n            const issueNo = context.issue.number\n            const owner = 'github'\n            const originalRepo = 'docs-internal'\n\n            // See if the engineering label is present.\n            const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')\n\n            // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo\n            let correctRepo = process.env.TEAM_CONTENT_REPO\n            if (engineeringLabel) {\n              correctRepo = process.env.TEAM_ENGINEERING_REPO\n            }\n\n            const correctRepoObject = await github.repos.get({\n              owner: owner,\n              repo: correctRepo\n            })\n\n            // Post a comment in the docs-internal issue\n            await github.issues.createComment({\n              owner: owner,\n              repo: originalRepo,\n              issue_number: issueNo,\n              body: `\ud83d\udc4b  You opened this issue in '${context.repo.repo}'. Moving forward, we're asking that folks create new issues in the following repositories instead:\\n- For issues with the docs site, please submit to the [${process.env.TEAM_ENGINEERING_REPO}](/${owner}/${process.env.TEAM_ENGINEERING_REPO}) repo.\\n- For all new content issues, please submit to the [${process.env.TEAM_CONTENT_REPO}](/${owner}/${process.env.TEAM_CONTENT_REPO}) repo.\\n\\nWe will transfer this issue for you!`\n            })\n\n            // Transfer the issue to the correct repo\n            const issueNodeId = context.payload.issue.node_id\n            const correctRepositoryNodeId = correctRepoObject.data.node_id\n            console.log(`Issue GraphQL Node ID: ${issueNodeId}`)\n            console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)\n\n            const mutation = `mutation ($id: ID!, $repositoryId: ID!) {\n              transferIssue(input: {\n                issueId: $id,\n                repositoryId: $repositoryId\n              }) {\n                issue {\n                  url,\n                  number\n                }\n              }\n            }`\n\n            const variables = {\n              id: issueNodeId,\n              repositoryId: correctRepositoryNodeId\n            }\n\n            const graph = await github.graphql(mutation, variables)\n            console.log('GraphQL mutation result:\\n' + JSON.stringify(graph))\n\n            // Add the same labels to the new issue\n            const newIssueNumber = graph.transferIssue.issue.number\n            await github.issues.addLabels({\n              owner: owner,\n              repo: correctRepo,\n              issue_number: newIssueNumber,\n              labels: context.payload.issue.labels.map(label => label.name),\n            })\n```"}
{"id": "63c4a057cbc73931bb1b9c62", "level": "level2", "llm_response": "```yaml\nname: close stale issues/PRs\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close stale issues/PRs\n        run: |\n          gh issue list --state open --limit 100 --json number,state | jq -r '.[] | select(.state == \"open\") | .number' | xargs -I {} gh issue edit {} --state closed --comment \"This issue/PR has been closed due to inactivity.\"\n```", "answer": "```yaml name: \"close stale issues/PRs\"\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label:\n          close-pr-message: \"\"\n```"}
{"id": "63c49f61736e7f0ed8c6df4d", "level": "level2", "llm_response": "```yaml\nname: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - packages/**/package.json\n      - examples/src\n      - .github/workflows/sandpack.yml\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Install\n        run: npm install\n\n      - name: Update Code in Sandpack\n        run: npm run update-code\n\n      - name: Update Version in Sandpack\n        run: npm run update-version\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit-message: \"Update Sandpack\"\n          title: \"Update Sandpack\"\n          body: \"Automated update of Sandpack\"\n          branch: \"sandpack-update\"\n          delete-source-branch: true\n```", "answer": "```yaml name: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    name: Update Sandpack\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # To run comparison we need more than the latest commit. Keep the fetch-depth relatively\n          # high or set it to zero to get all commits from the git repo.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 150\n \n      - name: Install\n        run: yarn add -D plop@3.1.1\n \n      - name: Update Code in Sandpack\n        run: yarn gen:code\n        \n      - name: Update Version in Sandpack\n        run: yarn gen:v\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: 'Version Sandpack'\n          body: |\n            Update Sandpack dependencies. Check the preview before merging.\n          commit-message: docs\n          committer: GitHub <noreply@github.com>\n          branch: docs/sandpack\n          delete-branch: true\n```"}
{"id": "63c495927843b61269a087ec", "level": "level2", "llm_response": "```yaml\nname: update changelog\n\non:\n  release:\n    types: [published]\n  release:\n    types: [prereleased]\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Update CHANGELOG.md\n      run: |\n        echo \"## $(date +%Y-%m-%d) - Version $(git describe --tags)\" >> CHANGELOG.md\n        echo \"- Initial release\" >> CHANGELOG.md\n```", "answer": "```yaml name: update changelog\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```"}
{"id": "63c498c3cbc73931bb1892bc", "level": "level2", "llm_response": "```yaml\nname: Push to BitBucket\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install SSH key\n        run: |\n          echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts\n\n      - name: Push to BitBucket\n        run: |\n          git remote add bitbucket git@bitbucket.org:username/repository.git\n          git push bitbucket master\n```", "answer": "```yaml name: \"Push to BitBucket\"\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: \"0\"\n          ref: \"master\"\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          name: id_rsa\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n\n      - run: |\n          git remote add bitbucket git@bitbucket.org:DmitryKrutskikh/dart-code-metrics.git\n          git config --global user.email \"dmitry.krutskikh@gmail.com\"\n          git config --global user.name \"Dmitry Krutskikh\"\n          git checkout master\n          git push -u bitbucket master\n```"}
{"id": "63c4994933b087f6bde3e523", "level": "level2", "llm_response": "```yaml\nname: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v2\n\n    - name: Install pip for rosdep\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y python3-pip\n        pip3 install rosdep\n\n    - name: Register AutonomouStuff repository\n      run: |\n        rosdep init\n        rosdep update\n\n    - name: Set git config\n      run: |\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --global user.name \"github-actions[bot]\"\n\n    - name: Run vcs import\n      run: |\n        vcs import src <repository-url>\n\n    - name: Run vcs export\n      run: |\n        vcs export src > src-export.yaml\n\n    - name: Run rosdep install\n      run: |\n        rosdep install --from-paths src --ignore-src -r -y\n```", "answer": "```yaml name: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n    container: ros:galactic\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Install pip for rosdep\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install python3-pip\n\n      - name: Register AutonomouStuff repository\n        uses: autowarefoundation/autoware-github-actions/register-autonomoustuff-repository@v1\n        with:\n          rosdistro: galactic\n\n      - name: Set git config\n        uses: autowarefoundation/autoware-github-actions/set-git-config@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Run vcs import\n        run: |\n          mkdir src\n          vcs import src < autoware.repos\n\n      - name: Run vcs export\n        run: |\n          vcs export --exact src || true\n\n      - name: Run rosdep install\n        run: |\n          sudo apt-get -y update\n          rosdep update\n          DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro galactic\n```"}
{"id": "63c495778052faa2781b1fcd", "level": "level2", "llm_response": "```yaml\nname: Autolocker\n\non:\n  pull_request:\n    types: [closed]\n\npermissions:\n  contents: write\n  issues: write\n\njobs:\n  autolock:\n    id: autolock\n    runs-on: ubuntu-latest\n    steps:\n      - name: Autolock PRs that got merged or closed\n        run: echo \"Locking PRs that got merged or closed\"\n```", "answer": "```yaml name: Autolocker\n\non:\n  pull_request_target:\n    types: [closed]\n\npermissions: write-all\n\njobs:\n  autolock:\n#     if: ${{ github.event.pull_request.merged }} # Uncomment if you want it to run only when a PR gets MERGED\n    runs-on: ubuntu-latest\n    name: Autolocker\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |     \n            github.rest.issues.lock({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              lock_reason: \"resolved\" // [\"off-topic\", \"too heated\", \"resolved\", \"spam\"]\n            })\n```"}
{"id": "63c49fbe517fc08c1ef0b986", "level": "level2", "llm_response": "```yaml\nname: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Audit URLs using Lighthouse\n        run: npx lighthouse https://staging.your-repo.com --output=json --output-path=lighthouse-report.json\n\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Generate summary\n        run: echo \"Lighthouse report generated at lighthouse-report.json\"\n\n      - name: Upload Lighthouse report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lighthouse-report\n          path: lighthouse-report.json\n\n      - name: Cleanup\n        run: rm -rf lighthouse-report.json\n```", "answer": "```yaml name: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://stopcovid19.metro.tokyo.lg.jp/\n            https://stopcovid19-tokyo-staging.web.app/\n          uploadArtifacts: true\n\n      - name: Use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.13.0'\n      - run: npm install -g csv2md\n\n      # https://stedolan.github.io/jq/manual/\n      # https://shields.io/\n      - name: Summary\n        run: |\n          export LH_SUMMARY_FILE=\"${GITHUB_WORKSPACE}/.lighthouseci/result.md\"\n          echo \"LH_SUMMARY_FILE=${LH_SUMMARY_FILE}\" >> $GITHUB_ENV\n          cat \"${GITHUB_WORKSPACE}/.lighthouseci/\"lhr-*.json \\\n          | jq -rs 'def formatScore(s):\n              \"https://img.shields.io\" as $baseUrl |\n              \"logo=lighthouse&logoColor=lightgray\" as $query |\n              if s == null then \"![-1](\\($baseUrl)/badge/\\(\"?\" | @uri)-error-inactive?\\($query))\"\n                elif s < 0.5 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-red-critical?\\($query))\"\n                elif s < 0.9 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-orange-important?\\($query))\"\n                else \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-green-success?\\($query))\"\n              end;\n              [\"Metrics\", \"Score\", \"URL\"], ( [.[] | .requestedUrl as $url | .categories[] | {\n                metrics: .title,\n                score: formatScore(.score),\n                url: $url\n              } ] | sort_by(.metrics) | .[] | [.metrics, .score, .url] ) | @csv' \\\n          | csv2md | tee \"${LH_SUMMARY_FILE}\"\n\n      - uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs')\n            const table = fs.readFileSync(process.env.LH_SUMMARY_FILE, 'utf8')\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `<h4>Audit&nbsp;<a\n                  href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\"\n                  target=\"_blank\"><sup>[?]</sup></a></h4>\\n\\n${table}\\n\\n`.trim()\n            })\n```"}
{"id": "63c4982f6fc19abdf9ca783f", "level": "level2", "llm_response": "```yaml\nname: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n\ninputs:\n  name-this:\n    description: 'Build and publish an fbpcf/aws-s3-core image for a particular version'\n    required: false\n    default: 'Run'\n    type: string\n  aws_release:\n    description: 'The aws s3 version to build and publish'\n    required: true\n    type: string\n  os:\n    description: 'Which os to use. Currently only supports ubuntu'\n    required: false\n    default: 'ubuntu'\n    type: string\n  os_release:\n    description: 'The os version to use (e.g. 20.04 for ubuntu)'\n    required: false\n    default: '20.04'\n    type: string\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: ${{ inputs.os }}\n    if: ${{ inputs.os == 'ubuntu' }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Log into registry ${{ env.REGISTRY }}\n      run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ${{ env.REGISTRY }} --username github --password-stdin\n\n    - name: Build image\n      run: docker build -t ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }} .\n\n    - name: Tag image\n      run: docker tag ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }} ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}-${{ inputs.os }}-${{ inputs.os_release }}\n\n    - name: Publish image\n      run: docker push ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}-${{ inputs.os }}-${{ inputs.os_release }}\n```", "answer": "```yaml name: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/aws-s3-core image for a particular version\"\n        default: \"Run\"\n      aws_release:\n        description: \"The aws s3 version to build and publish (e.g. 1.8.177)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg aws_release=${{ github.event.inputs.aws_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\" \\\n          -f \"docker/aws-s3-core/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core\n```"}
{"id": "63c49f326fc19abdf9cd4900", "level": "level2", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  test:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Test\n      run: |\n        # Add your PowerShell test commands here\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    name: Run Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n    - uses: actions/checkout@v1\n    - name: Test\n      shell: pwsh\n      run: ./build.ps1 -Task Test -Bootstrap\n```"}
{"id": "63c49dbd1842bc13d778c451", "level": "level2", "llm_response": "```yaml\nname: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n  run:\n    id: run\n    steps:\n      - name: Cancel Previous Runs\n        run: |\n          if [ \"${{ github.event_name }}\" == \"push\" ]; then\n            gh run cancel --workflow \"${{ github.workflow }}\" --event-payload \"${{ github.event_path }}\" --ref \"${{ github.ref }}\"\n          fi\n      - name: Checkout repo\n        uses: actions/checkout@v2\n      - name: Setup tooling\n        run: |\n          # Add steps to setup tooling here\n      - name: Setup git\n        run: |\n          git config --global user.name \"github-actions\"\n          git config --global user.email \"github-actions@github.com\"\n      - name: Align translations files\n        run: |\n          # Add steps to align translations files here\n      - name: Push changes\n        run: |\n          git add .\n          git commit -m \"Align translation files\"\n          git push origin master-weblate\n```", "answer": "```yaml name: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n run:\n   name: Update translation files\n   if: github.repository == 'uyuni-project/uyuni'\n   runs-on: ubuntu-latest\n   steps:\n   - name: Cancel Previous Runs\n     uses: styfle/cancel-workflow-action@0.10.0\n     with:\n         access_token: ${{ github.token }}\n\n   - name: Checkout repo\n     uses: actions/checkout@v3\n     with:\n       token: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Setup tooling\n     run: sudo apt-get install -y make git gettext intltool python3\n\n   - name: Setup git\n     run: |\n       git config --global user.name \"Galaxy CI\"\n       git config --global user.email \"galaxy-ci@suse.de\"\n\n   - name: Align translations files\n     run: scripts/translation/update-all-translation-strings.sh\n     env:\n       ADDITIONAL_SAFE_BRANCHNAME: master\n       GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Push changes\n     run: git push origin HEAD\n```"}
{"id": "63c49e1a1842bc13d778e9d5", "level": "level2", "llm_response": "```yaml\nname: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v2\n        with:\n          node-version: 'lts/Gallium'\n      - name: Install dependencies\n        run: npm install\n      - name: Run unit test\n        run: npm test\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          flag-name: unit-test\n          parallel: true\n\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v2\n        with:\n          node-version: 'lts/Gallium'\n      - name: Install dependencies\n        run: npm install\n      - name: Run browser test\n        run: npm run test:browser\n\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v2\n        with:\n          node-version: 'lts/Gallium'\n      - name: Install dependencies\n        run: npm install\n      - name: Run performance test\n        run: npm run test:performance\n```", "answer": "```yaml name: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run unit test\n        run: yarn test:unit\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run browser test\n        run: yarn test:browser\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run performance test\n        run: yarn test:performance\n```"}
{"id": "63c49c8c517fc08c1eef7305", "level": "level2", "llm_response": "```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n    types: [labeled, opened, synchronize]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Merge Dependabot PRs\n      run: |\n        if [[ $GITHUB_EVENT_LABEL_NAME == \"dependabot\" ]]; then\n          git config --global user.name \"dependabot[bot]\"\n          git config --global user.email \"support@github.com\"\n          git merge --ff-only origin/main\n          git push origin main\n        fi\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          target: minor\n          github-token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```"}
{"id": "63c49cd01e336480757a3424", "level": "level2", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n\n    - name: Autobuild\n      run: go build -v ./...\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push: {}\n  pull_request: {}\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49bd9517fc08c1eef2fa7", "level": "level2", "llm_response": "```yaml\nname: Spell Check\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 8 * * 2'\n  workflow_dispatch:\n  repository_dispatch:\n    types: [spellcheck]\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Spell check\n      run: |\n        # Add your spell check command here\n```", "answer": "```yaml name: Spell Check\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch new misspelling detections resulting from dictionary updates.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Spell check\n        uses: codespell-project/actions-codespell@master\n```"}
{"id": "63c4995a6fc19abdf9caf222", "level": "level2", "llm_response": "```yaml\nname: Update MagiskOnWSA\n\non:\n  schedule:\n    - cron: '0 0 * * 4'\n  workflow_dispatch:\n\npermissions:\n  actions: write\n  contents: write\n\njobs:\n  update:\n    id: update\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: echo \"Renaming tag\"\n      - name: Delete tag\n        run: echo \"Deleting tag\"\n      - name: Update MagiskOnWSA\n        run: echo \"Updating MagiskOnWSA\"\n      - name: Publish release\n        run: echo \"Publishing release\"\n      - name: Delete release\n        run: echo \"Deleting release\"\n```", "answer": "```yaml name: Update MagiskOnWSA\non:\n  schedule:\n    - cron: \"0 0 * * 4\"\n  workflow_dispatch:\n\npermissions:\n    actions: write\n    contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"tag_name\":\"outdated\"}' > /dev/null\n      - name: Delete tag\n        run: |\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest\n      - name: Update MagiskOnWSA\n        run: |\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          sleep 15m\n      - name: Publish release\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"prerelease\":false}' > /dev/null\n      - name: Delete release\n        run: |\n          ID=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/outdated | jq -r .id)\"\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/$ID\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/outdated\n```"}
{"id": "63c4a1401899db5886518aff", "level": "level2", "llm_response": "```yaml\nname: Call commitlint\n\non:\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install commitlint\n        run: npm install -g @commitlint/cli @commitlint/config-conventional\n\n      - name: Lint commit messages\n        run: npx commitlint --edit .git/COMMIT_EDITMSG\n```", "answer": "```yaml name: Call commitlint\non:\n  pull_request_target:\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c495f37843b61269a0b106", "level": "level2", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: checkout\n        uses: actions/checkout@v2\n\n      - name: initialize\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: analyze\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # Broadly based on example Github action from\n# https://github.com/github/codeql-action#usage\nname: codeql\n# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#permissions\n# https://github.com/github/codeql-action/issues/572\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\non:\n  push:\n    branches:\n      - main\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: initialize\n        if: success()\n        uses: github/codeql-action/init@v2\n        with:\n          # Limit analysis to Go for now.\n          # Available languages: https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\n          languages: go\n      - name: autobuild\n        if: success()\n        uses: github/codeql-action/autobuild@v2\n      - name: analyze\n        if: success()\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f98cbc73931bb1b4f54", "level": "level2", "llm_response": "```yaml\nname: Sync To Gitee\n\non:\n  push:\n    branches: [ '*' ]\n    tags: [ '*' ]\n  repository_dispatch:\n  delete:\n    branches: [ '*' ]\n    tags: [ '*' ]\n  create:\n    branches: [ '*' ]\n    tags: [ '*' ]\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n```", "answer": "```yaml name: Sync To Gitee  #\u540d\u5b57  \u53ef\u81ea\u5b9a\u4e49\non: [ push, delete, create ]  #\u89e6\u53d1\u6761\u4ef6   page_build\u8868\u793aGithub Page\u90e8\u7f72\u5b8c\u6210\u540e\u89e6\u53d1\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master #\u5f00\u6e90actions\u5305\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n        with:\n          source-repo: \"git@github.com:redleafnew/Chinese-STD-GB-T-7714-related-csl.git\" # github\u4ed3\u5e93\u5730\u5740\n          destination-repo: \"git@gitee.com:redleafnew00/Chinese-STD-GB-T-7714-related-csl.git\" # gitee\u4ed3\u5e93\u5730\u5740\n\n```"}
{"id": "63c4a0edcbc73931bb1bd96d", "level": "level2", "llm_response": "```yaml\nname: Unplugin Example\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set node\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Setup\n      run: |\n        npm install -g npm@latest\n        npm install -g yarn\n\n    - name: Install\n      run: npm install\n\n    - name: Build\n      run: npm run build\n\n    - name: Install Example Dependencies & Build\n      run: |\n        cd example\n        npm install\n        npm run build\n\n    - name: Deploy\n      run: |\n        echo \"Deploying to gh-pages branch\"\n        git checkout gh-pages\n        git pull origin gh-pages\n        cp -r dist/* .\n        git add .\n        git commit -m \"Deploy to gh-pages\"\n        git push origin gh-pages\n```", "answer": "```yaml name: Unplugin Example\n\non:\n  push:\n    branches: [main]\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Setup\n        run: npm i -g @antfu/ni\n\n      - name: Install\n        run: nci\n\n      - name: Build\n        run: nr build\n\n      - name: Install Example Dependencies & Build\n        run: pnpm -C examples/vite run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./examples/vite/dist\n          force_orphan: true\n```"}
{"id": "63c499bf1899db58864e8a2a", "level": "level2", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Add label to pull request\n        run: |\n          echo \"Adding label to pull request\"\n          # Add your label adding logic here\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a2db008460c1df2c5c9", "level": "level2", "llm_response": "```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build and test\n        run: dotnet build && dotnet test\n```", "answer": "```yaml name: Release\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Trigger Build flow\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n          repository: ${{ github.repository }}\n          event-type: release\n          client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\n```"}
{"id": "63c498731899db58864e00b5", "level": "level3", "llm_response": "```yaml\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows: [build-ci]\n    types: [completed]\n    branches: [main]\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: true\n\njobs:\n  k3s:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run K3s E2E tests\n        run: |\n          go test ./tests/e2e/k3s\n\n  rke2:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run RKE2 E2E tests\n        run: |\n          go test ./tests/e2e/rke2\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"id": "63c4a04733b087f6bde6b930", "level": "level3", "llm_response": "```yaml\nname: Coding Style\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  nette_cc:\n    id: nette_cc\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install --no-dev --optimize-autoloader\n\n      - name: Run Nette Code Checker\n        run: vendor/bin/nette-code-checker\n\n  nette_cs:\n    id: nette_cs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install --no-dev --optimize-autoloader\n\n      - name: Run Nette Coding Standard\n        run: vendor/bin/nette-cs-fixer fix --config=php-cs-fixer.dist.php --dry-run\n```", "answer": "```yaml name: Coding Style\n\non: [push, pull_request]\n\njobs:\n    nette_cc:\n        name: Nette Code Checker\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n            - run: php temp/code-checker/code-checker --strict-types --no-progress\n\n\n    nette_cs:\n        name: Nette Coding Standard\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n            - run: php temp/coding-standard/ecs check\n```"}
{"id": "63c4a0eeb008460c1df57100", "level": "level3", "llm_response": "```yaml\nname: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\n      - docs/**\n      - Gemfile\n      - README.md\n  workflow_dispatch:\n  repository_dispatch:\n    types: [build]\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          access_token: ${{ github.token }}\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Extract branch name\n        id: extract_branch\n        run: echo \"::set-output name=branch::$(echo $GITHUB_REF | sed 's/refs\\/heads\\///')\"\n      - name: Extract commit SHA\n        id: extract_commit_sha\n        run: echo \"::set-output name=sha::$(git rev-parse HEAD)\"\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ steps.extract_commit_sha.outputs.sha }}\n```", "answer": "```yaml name: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'nginx/**'\n      - 'Dockerfiles/nginx.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n      - '_config.yml'\n      - '_includes/**'\n      - '_layouts/**'\n      - 'docs/**'\n      - 'Gemfile'\n      - 'README.md'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Extract commit SHA\n        shell: bash\n        run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n        id: extract_commit_sha\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/nginx.Dockerfile\n          build-args: |\n            VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }}\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```"}
{"id": "63c4989d1842bc13d776b5a5", "level": "level3", "llm_response": "```yaml\nname: Publish release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2.3.4\n\n    - name: Set up JDK 1.11\n      uses: actions/setup-java@v2.3.0\n      with:\n        java-version: 1.11\n        distribution: adopt\n\n    - name: Build with Maven\n      run: mvn clean package\n\n    - name: Upload release artifact\n      uses: shogo82148/actions-upload-release-asset@v1.3.1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        upload_url: ${{ github.event.release.upload_url }}\n        asset_path: target/*.jar\n        asset_name: my-release.jar\n        asset_content_type: application/java-archive\n```", "answer": "```yaml name: Publish release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build and upload release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Set up JDK 1.11\n        uses: actions/setup-java@v2.3.0\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          check-latest: true\n          cache: 'maven'\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n      - name: Upload release artifact\n        uses: shogo82148/actions-upload-release-asset@v1.3.1\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```"}
{"id": "63c498be6fc19abdf9cab2ce", "level": "level3", "llm_response": "```yaml\nname: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n\njobs:\n  build:\n    runs-on: ${{ runner.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.composer/cache\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer install --no-dev --optimize-autoloader\n\n      - name: Checking for sign off (GPG also accepted)\n        run: |\n          if ! git verify-commit HEAD; then\n            echo \"Commit not signed off.\"\n            exit 1\n          fi\n\n      - name: Checking file integrity\n        run: |\n          find . -type f -exec sha256sum {} + > .sha256sums\n          sha256sum -c .sha256sums\n\n  lint:\n    runs-on: ${{ runner.os }}\n    strategy:\n      matrix:\n        php: [7.4, 8.0, 8.1]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup PHP ${{ matrix.php }}\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.composer/cache\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer install --no-dev --optimize-autoloader\n\n      - name: Lint PHP files\n        run: vendor/bin/phpcs --standard=PSR12 .\n```", "answer": "```yaml name: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - run: php -v\n\n    - name: Checking for sign off (GPG also accepted)\n      run: php ./vendor/simplemachines/build-tools/check-signed-off.php\n\n    - name: Checking file integrity\n      run: |\n        php ./vendor/simplemachines/build-tools/check-eof.php\n        php ./vendor/simplemachines/build-tools/check-smf-license.php\n        php ./vendor/simplemachines/build-tools/check-smf-languages.php\n        php ./vendor/simplemachines/build-tools/check-version.php\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [ 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1 ]\n\n    name: PHP ${{ matrix.php }} Syntax Check\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Setup PHP ${{ matrix.php }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - name: Lint PHP files\n      run: vendor/bin/phplint -w --exclude .git --exclude vendor --ansi .\n```"}
{"id": "63c49f746fc19abdf9cd63e6", "level": "level3", "llm_response": "```yaml\nname: hygieia-pr\n\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        env:\n          context: .\n          image_name: hygieia-image\n```", "answer": "```yaml ---\nname: hygieia-pr\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\njobs:\n  build:\n    env:\n      context: hygieia\n      image_name: hygieia\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49f38736e7f0ed8c6ce43", "level": "level3", "llm_response": "```yaml\nname: Platform OWASP ZAP\n\non:\n  push:\n    branches:\n      - dev\n    paths-ignore:\n      - .github/**\n      - docs/**\n      - build/**\n      - README.md\n      - LICENSE\n      - **/argoDeploy.json\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Install VirtoCommerce.GlobalTool\n      uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n      with:\n        version: 'latest'\n\n    - name: Docker Login\n      uses: azure/docker-login@v1\n      with:\n        login-server: docker.io\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n\n    - name: Docker Env\n      uses: VirtoCommerce/vc-github-actions/docker-env@master\n\n    - name: OWASP ZAP Full Scan\n      uses: zaproxy/action-baseline@v0.4.0\n      with:\n        target: http://localhost:5000\n        rules: https://raw.githubusercontent.com/zaproxy/zap-extensions/master/addOns/baseline/rules/baseline.xml\n        output: zap-report.xml\n```", "answer": "```yaml # v1.2\nname: Platform OWASP ZAP\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - 'docs/**'\n      - 'build/**'\n      - 'README.md'\n      - 'LICENSE'\n      - '**/argoDeploy.json'\n    branches: [ dev ]\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: Install VirtoCommerce.GlobalTool\n        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n\n      - name: Docker Login\n        uses: azure/docker-login@v1\n        with:\n          login-server: ghcr.io\n          username: $GITHUB_ACTOR\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker Env\n        uses: VirtoCommerce/vc-github-actions/docker-env@master\n        with:\n          githubUser: ${{ env.GITHUB_ACTOR }}\n          githubToken: ${{ env.GITHUB_TOKEN }}\n          platformImage: ghcr.io/virtocommerce/platform\n          storefrontImage: ghcr.io/virtocommerce/storefront\n          validateSwagger: 'false'\n\n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-baseline@v0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          docker_name: 'owasp/zap2docker-stable'\n          target: 'http://localhost:8090'\n          cmd_options: '-a -d'\n```"}
{"id": "63c4955b8052faa2781b1498", "level": "level3", "llm_response": "```yaml\nname: CI v2\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        go: [1.16, 1.17, 1.18]\n\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        go env -w GOPROXY=https://proxy.golang.org,direct\n        go env -w GO11MODULE=on\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      run: go mod download\n\n    - name: Lint\n      run: go list ./... | xargs -n1 go vet -vettool=golangci-lint run\n\n    - name: Vet\n      run: go vet ./...\n\n    - name: Test\n      run: go test -v ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.out\n        flags: unittests\n        name: codecov-go\n        fail_ci_if_error: true\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```"}
{"id": "63c49fe533b087f6bde69242", "level": "level3", "llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          issue-comment: |\n            Thanks for opening an issue!\n          pull-request-comment: |\n            Thanks for opening a pull request!\n```", "answer": "```yaml name: Greetings\n\non: [pull_request_target, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: \"Thanks for reporting this issue, don't forget to star this project if you haven't already to help us reach a wider audience.\"\n          pr-message: \"Thanks for implementing a fix, could you ensure that the test covers your changes if applicable.\"\n```"}
{"id": "63c49ff0736e7f0ed8c7162c", "level": "level3", "llm_response": "```yaml\nname: Main Workflow\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches:\n      - '*'\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    id: tests\n    runs-on: ${{ runner.os }}\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      \n      - name: Install unrar\n        run: sudo apt-get install unrar\n      \n      - name: Set up Python ${{ matrix.python-version }}\n        id: setup-python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      \n      - name: cache poetry install\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pypoetry\n          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}\n      \n      - name: Load cached venv\n        id: cached-poetry-dependencies\n        uses: actions/cache@v3\n        with:\n          path: .venv\n          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}\n      \n      - name: Install dependencies\n        run: poetry install\n      \n      - name: Install project\n        run: poetry install --no-root\n      \n      - name: Test with pytest\n        run: poetry run pytest\n```", "answer": "```yaml name: Main Workflow\n\non:\n  push:\n    branches:\n    - develop\n  pull_request:\n    branches:\n    - \"*\"\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Run Tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n        operating-system: [ubuntu-latest] # TODO: Fix a couple tests and enable windows. windows-latest\n      fail-fast: false\n    env:\n      POETRY_VERSION: \"1.2.2\"\n    steps:\n    - uses: actions/checkout@v3\n    # Can we cache the apt-get stuff somehow?\n    - name: Install unrar  # used by some flexget tests\n      if: matrix.operating-system == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -qy unrar\n    # There is some poetry caching built in to setup-python, but there seems to be some confusion\n    # about whether it works well when using a matrix of different python versions. Doing caching\n    # manually for now, until there is more info.\n    - name: Set up Python ${{ matrix.python-version }}\n      id: setup-python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache poetry install\n      uses: actions/cache@v3\n      with:\n        path: ~/.local\n        key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0  # increment last number to reset cache\n    - uses: snok/install-poetry@v1\n      with:\n        version: ${{ env.POETRY_VERSION }}\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n    - name: Install dependencies\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n      run: poetry install --no-interaction --no-root\n    - name: Install project\n      run: poetry install --no-interaction\n    - name: Test with pytest\n      run: |\n        poetry run pytest -n auto\n```"}
{"id": "63c4977fcbc73931bb180c41", "level": "level3", "llm_response": "```yaml\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark-this:\n        description: 'Benchmark to run'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Build\n      run: ./mvnw clean install\n\n    - name: Benchmark\n      run: ./mvnw benchmark -Dbenchmark=${{ github.event.inputs.benchmark-this }}\n\n    - name: Upload Result\n      uses: actions/upload-artifact@v3\n      with:\n        name: benchmark-results\n        path: target/benchmark-results\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark:\n        description: 'benchmark'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: ./dev/make-distribution.sh -Pspark-3.2 && rm -rf /home/hadoop/celeborn-toolkit/dist/* && mv celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/\n\n      - name: Benchmark\n        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark\n\n      - name: Upload Result\n        uses: actions/upload-artifact@v3\n        with:\n          name: benchmark result\n          path: /home/hadoop/celeborn-toolkit/result/```"}
{"id": "63c49f1e1e336480757b1d5b", "level": "level3", "llm_response": "```yaml\nname: Code scanning - action\n\non:\n  push:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  schedule:\n    - cron: '0 14 * * 4'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code scanning - action\"\n\non:\n  push:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  pull_request:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  schedule:\n    - cron: \"0 14 * * 4\"\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f8eb008460c1df4e97d", "level": "level3", "llm_response": "```yaml\nname: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    id: build-and-publish\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install GitPython cloudevents\n\n      - name: Create Tag\n        run: git tag -a v1.0.0 -m \"Release version 1.0.0\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - name: Install build dependencies\n        run: pip install -U setuptools wheel build\n      - name: Build\n        run: python -m build .\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install -U -r requirements/publish.txt\n      - name: Create Tag\n        run: python pypi_packaging.py\n```"}
{"id": "63c4990d33b087f6bde3cce0", "level": "level3", "llm_response": "```yaml\nname: Test C\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/workflows/test-lang-c.yml\n      - lang/c/**\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          # Add installation commands here\n\n      - name: Lint\n        run: |\n          # Add linting commands here\n\n      - name: Test\n        run: |\n          # Add test commands here\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n\n      - name: Install Java Avro for Interop Test\n        run: |\n          # Add installation commands here\n\n      - name: Create Interop Data Directory\n        run: |\n          # Add commands to create interop data directory here\n\n      - name: Generate Interop Resources\n        run: |\n          # Add commands to generate interop resources here\n\n      - name: Generate Interop Data\n        run: |\n          # Add commands to generate interop data here\n\n      - name: Run Interop Tests\n        run: |\n          # Add commands to run interop tests here\n\n  interop:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          # Add installation commands here\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n\n      - name: Install Java Avro for Interop Test\n        run: |\n          # Add installation commands here\n\n      - name: Create Interop Data Directory\n        run: |\n          # Add commands to create interop data directory here\n\n      - name: Generate Interop Resources\n        run: |\n          # Add commands to generate interop resources here\n\n      - name: Generate Interop Data\n        run: |\n          # Add commands to generate interop data here\n\n      - name: Run Interop Tests\n        run: |\n          # Add commands to run interop tests here\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - .github/workflows/test-lang-c.yml\n    - lang/c/**\n\ndefaults:\n  run:\n    working-directory: lang/c\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy libjansson-dev libsnappy-dev\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                            libjansson-dev \\\n                                                            liblzma-dev \\\n                                                            libsnappy-dev \\\n                                                            libzstd-dev\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n```"}
{"id": "63c4a0571842bc13d779cf83", "level": "level3", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Draft a release\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n          config-name: notes.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c49c4a1842bc13d7782abd", "level": "level3", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update release draft\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n#         (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n         config-name: config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}```"}
{"id": "63c499511899db58864e5d14", "level": "level3", "llm_response": "```yaml\nname: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Remove labels\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          labels: \"triaged\"\n```", "answer": "```yaml name: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          labels: |\n            stale\n            waiting-reply\n```"}
{"id": "63c4a08333b087f6bde6d0fe", "level": "level3", "llm_response": "```yaml\nname: Semantic Pull Request\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n  pull-requests: read\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate PR title\n        uses: amannn/action-semantic-pull-request@v5\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Semantic Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions: {}\njobs:\n  main:\n    permissions:\n      pull-requests: read # to analyze PRs (amannn/action-semantic-pull-request)\n      statuses: write # to mark status of analyzed PR (amannn/action-semantic-pull-request)\n\n    runs-on: ubuntu-latest\n    name: Semantic Pull Request\n    steps:\n      - name: Validate PR title\n        uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |\n            feat\n            fix\n            chore\n            refactor\n            docs\n            test\n            ci\n            build\n            infra\n            revert\n```"}
{"id": "63c4a0e71e336480757bcf80", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [python]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e3533b087f6bde5e450", "level": "level3", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Mark stale issues and pull requests\n        uses: actions/stale@v6\n        with:\n          days-before-stale: 90\n          days-before-close: 7\n          stale-label: 'stale'\n          exempt-issue-labels: 'important, pinned'\n          exempt-pull-request-labels: 'important, pinned'\n          stale-issue-message: 'This issue has been marked as stale because it has not had recent activity. If you think it should remain open, please comment and let us know why. This will help us prioritize which issues to address.'\n          stale-pr-message: 'This pull request has been marked as stale because it has not had recent activity. If you think it should remain open, please comment and let us know why. This will help us prioritize which pull requests to address.'\n          close-issue-message: 'This issue has been closed because it has been marked as stale. If you think it should remain open, please comment and let us know why. This will help us prioritize which issues to address.'\n          close-pr-message: 'This pull request has been closed because it has been marked as stale. If you think it should remain open, please comment and let us know why. This will help us prioritize which pull requests to address.'\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # SPDX-License-Identifier: Apache-2.0\n# Copyright 2019 Intel Corporation\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-pr-message: 'This pull request has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-issue-label: 'stale/issue'\n        stale-pr-label: 'stale/pr'\n        days-before-stale: 30\n        days-before-close: 5\n```"}
{"id": "63c49be0517fc08c1eef3298", "level": "level3", "llm_response": "```yaml\nname: Example Integration on Pull Request\n\non:\n  pull_request:\n    branches:\n      - main\n    types: [closed]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Plant a Tree\n      id: planttree\n      uses: protontypes/continuous-reforestation@main\n      secrets:\n        RAAS_KEY: ${{ secrets.raaskey }}\n\n    - name: Response of digitalhumani.com RaaS API\n      run: |\n        echo \"Response: ${{ steps.planttree.outputs.response }}\"\n        echo \"Planted Trees: ${{ steps.planttree.outputs.plantedTrees }}\"\n```", "answer": "```yaml name: Example Integration on Pull Request\non: \n  pull_request_target:\n    branches:\n      - main\n    types:\n      - closed\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Plant a Tree\n        if: github.event.pull_request.merged == true\n        id: planttree\n        uses: protontypes/continuous-reforestation@main\n        with:\n        # Enter your API variables below\n            apikey: ${{ secrets.raaskey }}\n            enterpriseid: \"cd7cedcd\"\n            user: ${{ github.actor }}\n            treecount: 5\n            projectid: \"14442771\" # This projectid can be used to have your trees planted where they are needed the most.\n            production: \"false\"\n\n      - name: Response of digitalhumani.com RaaS API\n        run: |\n            echo \"${{ steps.planttree.outputs.response }}\"\n            echo \"${{ steps.planttree.outputs.plantedTrees }}\"\n```"}
{"id": "63c49dc31842bc13d778c6ac", "level": "level3", "llm_response": "```yaml\nname: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches:\n      - main\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened]\n  comment:\n    issue: [created]\n    pull_request: [created]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1\n      \n      - name: Send welcome message\n        uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches: [main]\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Hey friend! Thanks for opening this issue. We appreciate your contribution and welcome you to our community! We are glad to have you here and to have your input on the Azure Arc Jumpstart.'\n          pr-message: 'Hi friend! Thanks you for opening this Pull Request. Someone will review it soon. Thank you for committing to making the Azure Arc Jumpstart better.'\n```"}
{"id": "63c49e961842bc13d7791c8a", "level": "level3", "llm_response": "```yaml\nname: Publish\n\non:\n  release:\n    types: [published, prereleased]\n  draft:\n    types: [saved]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Publish to npm\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [created]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: npm\n      - run: npm ci\n      - run: npm test\n      - run: npm version ${TAG_NAME} --git-tag-version=false\n        env:\n          TAG_NAME: ${{ github.event.release.tag_name }}\n      - run: npm whoami; npm --ignore-scripts publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```"}
{"id": "63c49b631d1c0d6c2d08006a", "level": "level3", "llm_response": "```yaml\nname: CI Bot\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_review_comment:\n    types: [created]\n  pull_request_comment:\n    types: [created]\n\njobs:\n  issue_opened:\n    id: issue_opened\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          echo \"Issue opened by ${github.event.issue.user.login}\"\n          echo \"Issue body: ${github.event.issue.body}\"\n          echo \"Issue number: ${github.event.issue.number}\"\n          echo \"Issue author association: ${github.event.issue.author_association}\"\n  pr_opened:\n    id: pr_opened\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          echo \"Pull request opened by ${github.event.pull_request.user.login}\"\n          echo \"Pull request body: ${github.event.pull_request.body}\"\n          echo \"Pull request number: ${github.event.pull_request.number}\"\n          echo \"Pull request author association: ${github.event.pull_request.author_association}\"\n  issue_commented:\n    id: issue_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          echo \"Issue commented by ${github.event.comment.user.login}\"\n          echo \"Comment body: ${github.event.comment.body}\"\n          echo \"Comment author association: ${github.event.comment.author_association}\"\n  pr_review_commented:\n    id: pr_review_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          echo \"Pull request review commented by ${github.event.comment.user.login}\"\n          echo \"Comment body: ${github.event.comment.body}\"\n          echo \"Comment author association: ${github.event.comment.author_association}\"\n  pr_commented:\n    id: pr_commented\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          echo \"Pull request commented by ${github.event.comment.user.login}\"\n          echo \"Comment body: ${github.event.comment.body}\"\n          echo \"Comment author association: ${github.event.comment.author_association}\"\n```", "answer": "```yaml name: CI Bot\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_review_comment:\n    types:\n      - created\n  issues:\n    types:\n      - opened\n  pull_request:\n    types:\n      - opened\n\nenv:\n  # This plugins is for anyone who can use it\n  PLUGINS: |-\n    assign\n    auto-cc\n    cc\n    label-kind\n    label-bug\n    label-documentation\n    label-enhancement\n    label-question\n  \n  # This plugins is for organization member or repository member\n  MEMBERS_PLUGINS: |-\n    label-duplicate\n    label-good-first-issue\n    label-help-wanted\n    label-invalid\n    label-kind\n    label-wontfix\n    lifecycle\n  \n  # This plugins is for in the REVIEWERS environment variable\n  REVIEWERS_PLUGINS: |-\n    retitle\n  # This plugins is for in the APPROVERS environment variable\n  APPROVERS_PLUGINS: |-\n    merge\n  # This plugins is for in the MAINTAINERS environment variable\n  MAINTAINERS_PLUGINS: |-\n    milestone\n  # This plugins is for organization owner or repository owner\n  OWNERS_PLUGINS: \"\"\n\n  REVIEWERS: |-\n    pacoxu\n    wzshiming\n  APPROVERS: |-\n    pacoxu\n    wzshiming\n  MAINTAINERS: |-\n    pacoxu\n    wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |-\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\njobs:\n\n  issue_opened:\n    name: Issue Opened\n    if: ${{ github.event_name == 'issues' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.issue.user.login }}\n          MESSAGE: ${{ github.event.issue.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.issue.author_association }}\n          ISSUE_KIND: issue\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.issue.user.login }},\n            Thanks for opening an issue!\n            We will look into it as soon as possible.\n  pr_opened:\n    name: PR Opened\n    if: ${{ github.event_name == 'pull_request' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.pull_request.user.login }}\n          MESSAGE: ${{ github.event.pull_request.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}\n          ISSUE_KIND: pr\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.pull_request.user.login }},\n            Thanks for your pull request!\n            If the PR is ready, use the `/auto-cc` command to assign Reviewer to Review. \n            We will review it shortly.\n  issue_commented:\n    name: Issue Commented\n    if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: issue\n          TYPE: comment\n\n  pr_review_commented:\n    name: PR Review Commented\n    if: ${{ github.event_name == 'pull_request_review_comment' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n\n  pr_commented:\n    name: PR Commented\n    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n```"}
{"id": "63c5ae896b748c7b1fadef81", "level": "level3", "llm_response": "```yaml\nname: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n  pull_request:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n\njobs:\n  build:\n    uses: ./.github/workflows/_template.yml\n```", "answer": "```yaml name: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n  pull_request:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n\njobs:\n  build:\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets: inherit\n```"}
{"id": "63c4a0981899db5886514a5b", "level": "level3", "llm_response": "```yaml\nname: [RUN] Discord new release announcement\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  push-announcement:\n    id: push-announcement\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: CURL Discord API with announcement\n        run: |\n          curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"content\\\": \\\"New release is out! Check it out: https://github.com/your-repo/releases\\\"}\" ${{ secrets.DISCORD_WEBHOOK_URL }}\n```", "answer": "```yaml name: '[RUN] Discord new release announcement'\n   \non:\n  release:\n    types: [released]\n\njobs:\n  push-announcement:\n    name: Pushing release announcement to Discord\n    runs-on: ubuntu-latest\n    env:      \n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n    steps:\n    - name: CURL Discord API with announcement\n      shell: bash\n      run: |\n        CHANGELOG=$(curl -s https://api.github.com/repos/nethermindeth/nethermind/releases | jq '.[0].body' | grep -Po '(?<=## )(.*?)(?=\\##)')\n        read VERSION LINK < <(echo $(curl -s 'https://api.github.com/repos/nethermindeth/nethermind/releases' | jq -r '.[0].name, .[0].html_url'))\n        MESSAGE=\"**New Nethermind release version: ${VERSION}**\\n\\n${CHANGELOG}<${LINK}>\"\n        curl -s -H \"Content-Type: application/json\" -d '{\"username\": \"Nethermind\", \"content\": \"'\"$MESSAGE\"'\"}' $WEBHOOK_URL > /dev/null 2>&1```"}
{"id": "63c49e9a1899db5886507bf7", "level": "level3", "llm_response": "```yaml\nname: vpinball-gl\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  dxsdk:\n    runs-on: windows-latest\n    steps:\n      - name: Cache\n        id: cache\n        uses: actions/cache@v3\n        with:\n          path: C:\\vcpkg\n          key: dxsdk-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}\n          restore-keys: dxsdk-${{ runner.os }}-\n      - name: Create Cache\n        run: |\n          echo \"Cache created\"\n\n  version:\n    runs-on: ubuntu-latest\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Version\n        id: version\n        run: |\n          echo \"Version: ${{ env.VERSION_START_SHA }}\"\n          echo \"::set-output name=revision::${{ env.VERSION_START_SHA }}\"\n          echo \"::set-output name=sha7::${{ github.sha }}\"\n          echo \"::set-output name=tag::${{ github.ref_name }}\"\n\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        config: [Debug, Release]\n        platform: [x64, x86]\n        os: [windows-latest, ubuntu-latest, macos-latest]\n        bass: [true, false]\n        free-image: [true, false]\n        sci-lexer-vp: [true, false]\n        sdl2-ttf: [true, false]\n        sdl2: [true, false]\n        openvr-api: [true, false]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Cache\n        id: cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ github.workspace }}/.cache\n          key: build-${{ runner.os }}-${{ matrix.config }}-${{ matrix.platform }}-${{ hashFiles('**/CMakeLists.txt') }}\n          restore-keys: build-${{ runner.os }}-${{ matrix.config }}-${{ matrix.platform }}-\n      - name: Install Dependencies\n        run: |\n          if [ \"${{ runner.os }}\" == \"Windows\" ]; then\n            choco install vcpkg\n            .\\vcpkg integrate install\n          elif [ \"${{ runner.os }}\" == \"Linux\" ]; then\n            sudo apt-get update\n            sudo apt-get install -y build-essential cmake\n          elif [ \"${{ runner.os }}\" == \"macOS\" ]; then\n            brew install cmake\n          fi\n      - name: Configure Build\n        run: |\n          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install\n      - name: Build\n        run: cmake --build build --config ${{ matrix.config }} --target install\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: vpinball-gl-${{ matrix.config }}-${{ matrix.platform }}\n          path: ${{ github.workspace }}/install\n```", "answer": "```yaml name: vpinball-gl\non:\n  push:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n#  UPX_ARTIFACT: 345209471\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    name: DirectX SDK\n    runs-on: windows-latest\n    steps:\n      - id: cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Create Cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe\n          7z x DXSDK_Jun10.exe DXSDK/Include -otmp\n          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp\n          mv tmp/DXSDK DXSDK\n          rm -fR DXSDK_Jun10.exe tmp\n          ls -Ra DXSDK\n\n  version:\n    name: Version\n    runs-on: ubuntu-latest\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - id: version\n        run: |\n          VERSION_MAJOR=$(grep -Eo \"VP_VERSION_MAJOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_MINOR=$(grep -Eo \"VP_VERSION_MINOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_REV=$(grep -Eo \"VP_VERSION_REV\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)\n          SHA7=\"${GITHUB_SHA::7}\"\n          TAG=\"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}-${REVISION}-${SHA7}\"\n          echo \"revision=${REVISION}\" >> $GITHUB_OUTPUT\n          echo \"sha7=${SHA7}\" >> $GITHUB_OUTPUT\n          echo \"tag=${TAG}\" >> $GITHUB_OUTPUT\n\n  build:\n    name: Build VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\n    runs-on: windows-latest\n    needs: [ dxsdk, version ]\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Release\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Debug\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Release\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Debug\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - run: |\n          sed -i \"s/0/${{ needs.version.outputs.revision }}/g\" git_version.h\n          sed -i \"s/unknown/${{ needs.version.outputs.sha7 }}/g\" git_version.h\n      - name: Build\n        run: |\n          export DXSDK_DIR=\"${GITHUB_WORKSPACE}/DXSDK\"\n          cp cmake/CMakeLists_${{ matrix.platform}}.txt CMakeLists.txt\n          cmake -G \"Visual Studio 17 2022\" -A ${{ matrix.platform-name }} -B build\n          cmake --build build --config ${{ matrix.config }}\n#      - name: Compress\n#        if: matrix.config == 'Release'\n#        run: |\n#          curl -sL -H \"Authorization: Token ${{ secrets.GH_PAT }}\" https://api.github.com/repos/upx/upx/actions/artifacts/${{ env.UPX_ARTIFACT }}/zip -o upx.zip\n#          7z x upx.zip -oupx\n#          rm upx.zip\n#          ./upx/upx.exe --best --lzma build/${{ matrix.config }}/VPinballX_GL.exe\n      - run: |\n          mkdir tmp \n          cp build/${{ matrix.config }}/VPinballX_GL.* tmp\n          cp dll/${{ matrix.bass }} tmp\n          cp dll/${{ matrix.free-image }} tmp\n          cp dll/${{ matrix.sci-lexer-vp }} tmp\n          cp dll/${{ matrix.sdl2-ttf }} tmp\n          cp dll/${{ matrix.sdl2 }} tmp\n          cp dll/${{ matrix.openvr-api }} tmp\n          cp txt/Changelog_Scripts.txt tmp\n          cp txt/Changelog.txt tmp\n          cp txt/CommandLineParameters.txt tmp\n          cp txt/CommandReference.txt tmp\n          cp txt/Hotkeys.txt tmp\n          cp \"txt/JP's VPX7 Physics Materials.mat\" tmp\n          cp \"txt/JP's VPX7 Physics.pdf\" tmp\n          cp \"txt/JP's VPX7 script addons vbs.txt\" tmp\n          cp \"txt/JP's VPX7 Table physics.vpp\" tmp\n          cp txt/layoutGuideline.txt tmp\n          cp txt/license.txt tmp\n          cp \"txt/New Plunger Documentation.pdf\" tmp\n          cp txt/PhysicValues.txt tmp\n          cp txt/RegistryKeys.txt tmp\n          cp txt/Scripts.txt tmp \n          cp -r glshader tmp \n          cp -r scripts tmp\n          cp -r tables tmp\n      - uses: actions/upload-artifact@v3\n        with:\n          name: VPinballX_GL-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}\n          path: tmp\n```"}
{"id": "63c49ac7517fc08c1eeec341", "level": "level3", "llm_response": "```yaml\nname: Lint Pull Request Title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n  pull_request_target:\n    types: [opened, edited, synchronize]\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check PR title and body\n        uses: amannn/action-semantic-pull-request@v4.5.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Lint Pull Request Title\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Lint Pull Request Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4.5.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49dce517fc08c1eeff4b2", "level": "level3", "llm_response": "```yaml\nname: DCO check\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    id: reverted-pr-check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        run: echo \"::set-output name=is_reverted_pr::false\" # Placeholder for actual logic\n      - name: Save Reverted PR output\n        run: echo \"Reverted PR check result: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\"\n      - name: # Placeholder for additional step\n\n  dco_check_job:\n    id: dco_check_job\n    runs-on: ubuntu-latest\n    needs: reverted-pr-check\n    steps:\n      - name: Get PR Commits\n        id: get-pr-commits\n        uses: tim-actions/get-pr-commits@3cea5372237819ed00197afe530f5a7ea3e805c8\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          commit_message: ${{ github.event.pull_request.title }}\n      - name: Save PR number\n        run: echo \"PR number: ${{ github.event.number }}\"\n      - name: # Placeholder for additional step\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: DCO check\non:\n  pull_request:\n    types: [ opened, reopened, synchronize ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    name: Reverted PR Check Job\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    # Map a step output to a job output\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n      - name: Save Reverted PR output\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ steps.reverted_pr_check.outputs.is_reverted_pr }} > ./pr/is_reverted_pr\n          echo -n \"false\" > ./pr/skipped\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n\n  dco_check_job:\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    name: DCO Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR Commits\n        id: 'get-pr-commits'\n        uses: tim-actions/get-pr-commits@c64db31d359214d244884dd68f971a110b29ab83 # pin@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21 # pin@master\n        with:\n          commits: ${{ steps.get-pr-commits.outputs.commits }}\n      # Need to save PR number as Github action does not propagate it with workflow_run event\n      - name: Save PR number\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ github.event.number }} > ./pr/pr_number\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n```"}
{"id": "63c4a116736e7f0ed8c78a89", "level": "level3", "llm_response": "```yaml\nname: Push-Checks\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Setup flake8 annotations\n        uses: rbialon/flake8-annotations@v1\n        with:\n          python-version: '3.8'\n\n      - name: Lint with flake8\n        run: flake8 .\n```", "answer": "```yaml # This workflow will:\n#\n#   * install Python dependencies\n#   * lint with a single version of Python\n#\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Push-Checks\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version-file: '.python-version'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install wheel flake8 pytest\n        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi\n    \n    - name: Setup flake8 annotations\n      uses: rbialon/flake8-annotations@v1\n    \n    - name: Lint with flake8\n      env:\n        ROOT_SHA: ${{github.base_ref}}\n      run: |\n        DATA=$(jq --raw-output .before $GITHUB_EVENT_PATH)\n\n        echo \"DATA: ${DATA}\"\n        # stop the build if there are Python syntax errors or undefined names, ignore existing \n        git diff \"$DATA\" | flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --diff\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        git diff \"$DATA\" | flake8 . --count --statistics --diff\n```"}
{"id": "63c497691e33648075780e11", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '40 18 * * 1'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    #        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n    #        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n    #        \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n    #        \u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12 or JAN-DEC)\n    #        \u2502  \u2502  \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6 or SUN-SAT)\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        *  *  * * *\n    - cron: \"40 18 * * 1\"\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: javascript\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49c55517fc08c1eef5d3f", "level": "level3", "llm_response": "```yaml\nname: Mkdocs publish\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install pip\n        run: |\n          python -m ensurepip --upgrade\n          python -m pip install --upgrade pip\n\n      - name: Install MkDocs\n        run: pip install mkdocs\n\n      - name: MkDocs build\n        run: mkdocs build\n\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy\n```", "answer": "```yaml   # This is a basic workflow to help you get started with Actions\n\nname: Mkdocs publish\n\n# Controls when the action will run.\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      - name: Install pip\n        run: python3 -m pip install --upgrade pip setuptools wheel\n\n      - name: Install MkDocs\n        run: |\n          pip install mkdocs\n          pip install mkdocs-macros-plugin\n\n      - name: MkDocs build\n        run: mkdocs build\n\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```"}
{"id": "63c49cfab008460c1df3e23b", "level": "level3", "llm_response": "```yaml\nname: Check PR title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  check_pr_title:\n    id: check_pr_title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4.6.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Check PR title\n\non:\n    pull_request_target:\n        types: [ opened, edited, synchronize ]\n\njobs:\n    check_pr_title:\n        name: 'Check PR title'\n        runs-on: ubuntu-latest\n        steps:\n            -   uses: amannn/action-semantic-pull-request@v4.6.0\n                env:\n                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4996733b087f6bde3f1c8", "level": "level3", "llm_response": "```yaml\nname: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          token: ${{ secrets.OPEN_VSX_TOKEN }}\n```", "answer": "```yaml name: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: yarn install --immutable\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          pat: ${{ secrets.OPEN_VSX_TOKEN }}\n```"}
{"id": "63c4a0576fc19abdf9cdc124", "level": "level3", "llm_response": "```yaml\nname: Examples\n\non:\n  push:\n    branches:\n      - main\n      - 'maintenance/**'\n  pull_request:\n    branches:\n      - main\n      - 'maintenance/**'\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [3.8, 3.9, 3.10]\n        rdkit: [2022.09.1]\n        openeye: [2022.09.1]\n\n    defaults:\n      run:\n        shell: bash -l {0}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n\n      - name: Set environment variables\n        run: |\n          echo \"PYTHON_VERSION=${{ matrix.python-version }}\" >> $GITHUB_ENV\n          echo \"RDKIT_VERSION=${{ matrix.rdkit }}\" >> $GITHUB_ENV\n          echo \"OPENEYE_VERSION=${{ matrix.openeye }}\" >> $GITHUB_ENV\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          env-file: ${{ env.ENVFILE }}\n\n      - name: Additional info about the build\n        run: echo \"Building on ${{ matrix.os }} with Python ${{ matrix.python-version }}, RDKit ${{ matrix.rdkit }}, and OpenEye ${{ matrix.openeye }}\"\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        run: echo ${{ secrets.OE_LICENSE }} > oe_license.txt\n\n      - name: Install package\n        run: conda install -c conda-forge -c openeye ${{ env.PACKAGES_TO_INSTALL }}\n\n      - name: Remove undesired toolkits\n        run: conda remove -c conda-forge -c openeye ${{ env.TOOLKITS_TO_REMOVE }}\n\n      - name: Check installed toolkits\n        run: conda list | grep -E 'rdkit|openeye'\n\n      - name: Check uninstalled toolkits\n        run: conda list | grep -E 'rdkit|openeye' || true\n\n      - name: Environment Information\n        run: conda info\n\n      - name: Run example scripts\n        run: python -m unittest discover -s examples/scripts\n\n      - name: Run example notebooks\n        run: jupyter nbconvert --to notebook --execute examples/notebooks/*.ipynb\n```", "answer": "```yaml name: Examples\n\non:\n  push:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  pull_request:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  schedule:\n    - cron: \"0 0 * * *\"\n\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  test:\n    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') || (github.event_name != 'schedule')\n    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.8\"]\n        rdkit: [true, false]\n        openeye: [true, false]\n        exclude:\n          - rdkit: false\n            openeye: false\n          - rdkit: true\n            openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 2\n\n      - name: Set environment variables\n        run: |\n          if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then\n              echo \"ENVFILE=openeye\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=OPENEYE\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=ambertools rdkit\" >> $GITHUB_ENV\n          fi\n\n          if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then\n              echo \"ENVFILE=rdkit\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=RDKIT\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=openeye-toolkits\" >> $GITHUB_ENV\n          fi\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml\n          extra-specs: |\n            python=${{ matrix.python-version }}\n\n      - name: Additional info about the build\n        run: |\n          uname -a\n          df -h\n          ulimit -a\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        shell: bash\n        env:\n          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}\n        run: |\n          echo \"${OE_LICENSE_TEXT}\" > ${OE_LICENSE}\n\n      - name: Install package\n        run: |\n          # Maybe remove the packaged openff-toolkit, installed as a dependency of openmmforcefields\n          # and/or Interchange\n          conda remove --force openff-toolkit-base\n          python setup.py develop --no-deps\n\n      - name: Remove undesired toolkits\n        run: |\n          # If openmmforcefields is included in examples/environment.yaml,\n          # remove RDKit and AmberTools brought in by it. Currently it's not included,\n          # so don't remove it.\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do\n              if [[ $(conda list | grep $cpkg) ]]; then conda remove --force $cpkg --yes ; fi\n            done\n          fi\n\n      - name: Check installed toolkits\n        run: |\n          for tk in ${{ env.TOOLKIT_CHECKS }}; do\n            python -c \"from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'\"\n          done\n\n      - name: Check uninstalled toolkits\n        run: |\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for tk in ${{ env.PACKAGES_TO_REMOVE }}; do\n              TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')\n              python -c \"from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'\"\n            done\n          fi\n      - name: Environment Information\n        run: |\n          conda info\n          conda list\n\n      - name: Run example scripts\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            PYTEST_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            PYTEST_ARGS+=\" --ignore=examples/QCArchive_interface\"\n          fi\n          pytest $PYTEST_ARGS openff/toolkit/tests/test_examples.py\n\n      - name: Run example notebooks\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            NB_ARGS+=\" --ignore=examples/QCArchive_interface\"\n            NB_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            NB_ARGS+=\" --ignore=examples/conformer_energies\"\n            NB_ARGS+=\" --ignore=examples/using_smirnoff_in_amber_or_gromacs\"\n          fi\n\n          # openmmforcefields incompatible with new toolkit\n          NB_ARGS+=\" --ignore=examples/external/swap_amber_parameters/swap_existing_ligand_parameters_with_openmmforcefields.ipynb\"\n\n          python -m pytest $PYTEST_ARGS $NB_ARGS examples\n```"}
{"id": "63c49d69736e7f0ed8c61514", "level": "level3", "llm_response": "```yaml\nname: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Create GitHub release\n        uses: Roang-zero1/github-create-release-action@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          tag_name: ${{ github.ref_name }}\n          release_name: ${{ github.ref_name }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Create GitHub release\n        uses: Roang-zero1/github-create-release-action@master\n        with:\n          version_regex: ^v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4968a1e3364807577b4a5", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: go\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4991e33b087f6bde3d441", "level": "level3", "llm_response": "```yaml\nname: Releasability\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  releasability:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run releasability script\n        run: |\n          go run knative/actions/.github/workflows/releasability.yaml \\\n            --releaseFamily=${{ github.event.inputs.releaseFamily || 'v1.8' }} \\\n            --moduleReleaseFamily=${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }} \\\n            --slackChannel=${{ github.event.inputs.slackChannel || 'release' }}\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Releasability'\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5' # 6am Pacific, weekdays.\n\n  workflow_dispatch:      # Manual trigger.\n    inputs:\n      releaseFamily:\n        description: 'Release? (vX.Y)'\n        required: false\n      moduleReleaseFamily:\n        description: 'Module Release? (vX.Y)'\n        required: false\n      slackChannel:\n        description: 'Slack Channel? (release-#)'\n        required: false\n\njobs:\n  releasability:\n    uses: knative/actions/.github/workflows/releasability.yaml@main\n    with:\n      releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n      moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n      slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n    secrets:\n      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```"}
{"id": "63c49d616fc19abdf9cc8e74", "level": "level3", "llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          token: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n          since: ${{ github.ref }}\n\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create release\"\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    name: \"Deploy\"\n    runs-on: \"ubuntu-latest\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          myToken: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n\n      - name: \"Create release\"\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```"}
{"id": "63c499d31899db58864e92ea", "level": "level3", "llm_response": "```yaml\nname: Build AIO-switch-updater\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [published ]\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        # Add your update repo commands here\n\n    - name: Building aio-switch-updater\n      run: |\n        # Add your building commands here\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater-build\n        path: build/\n```", "answer": "```yaml name: Build AIO-switch-updater\n\non: \n  push:\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n    #container: hamletdufromage/devkita64_devkitarm\n    container: devkitpro/devkita64\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        git submodule update --init --recursive\n        \n    - name: Building aio-switch-updater\n      run: |\n        make -C aiosu-forwarder -f Makefile\n        make -j$(nproc)\n        \n    - uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater.nro\n```"}
{"id": "63c4973b517fc08c1eed5918", "level": "level3", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Run tests\n        run: npm test\n\n      - name: Release\n        uses: google-github-actions/release@v0\n        with:\n          release_name: ${{ github.sha }}\n          tag_name: v${{ github.run_number }}\n          draft: false\n          prerelease: false\n          body: |\n            This is an automated release.\n```", "answer": "```yaml name: 'Release'\n\non:\n  push:\n    branches:\n      - 'main'\n\njobs:\n  release:\n    if: \"startsWith(github.event.head_commit.message, 'Release: v')\"\n    name: 'Release'\n    uses: 'google-github-actions/.github/.github/workflows/release.yml@v0'\n```"}
{"id": "63c49ebdb008460c1df494c2", "level": "level3", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, synchronize, labeled, unlabeled]\n  push:\n    branches: [main]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Label PRs\n        uses: actions/labeler@v4\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49f55517fc08c1ef0903b", "level": "level3", "llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [opened, closed, synchronize]\n  comment:\n    issue:\n      types: [created]\n    pull_request:\n      types: [created]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: CLA Assistant\n        uses: cla-assistant/github-action@v2.1.3-beta\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          personal_access_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://github.com/theskeletoncrew/treat-toolbox/blob/main/CLA.md' # e.g. a CLA or a DCO document\n          # branch should not be protected\n          branch: 'main'\n          allowlist: skeletoncrewrip,cosimo-rip\n\n         #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```"}
{"id": "63c4a0cc6fc19abdf9cde85c", "level": "level3", "llm_response": "```yaml\nname: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Cache dependencies\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/dependencies\n        key: ${{ runner.os }}-cpp-dependencies-${{ hashFiles('**/CMakeLists.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-cpp-dependencies-\n\n    - name: Install format dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y clang-format\n\n    - name: Configure\n      run: cmake .\n\n    - name: Check style\n      run: clang-format --Werror --style=file -i $(git ls-files '*.cpp' '*.h' '*.hpp')\n```", "answer": "```yaml name: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: \"**/cpm_modules\"\n          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}\n\n      - name: Install format dependencies\n        run: |\n          choco install llvm --version 15.0.1 -y\n          choco install ninja -y\n          pip3 install cmake_format==0.6.11 pyyaml\n\n      - name: configure\n        run: cmake -G Ninja -S . -B build -DTP_BUILD_EXAMPLES=OFF\n\n      - name: check style\n        run: cmake --build build --target check-format\n```"}
{"id": "63c5c621ac4f2678a5bd7766", "level": "level3", "llm_response": "```yaml\nname: Reusable - Spotless\n\non:\n  workflow_dispatch:\n    inputs:\n      cache-read-only:\n        description: 'Cache read-only'\n        required: false\n        type: boolean\n      no-build-cache:\n        description: 'No build cache'\n        required: false\n        type: boolean\n\nsecrets:\n  GRADLE_ENTERPRISE_ACCESS_KEY:\n    description: 'Gradle Enterprise access key'\n    required: false\n  GE_CACHE_USERNAME:\n    description: 'Gradle Enterprise cache username'\n    required: false\n  GE_CACHE_PASSWORD:\n    description: 'Gradle Enterprise cache password'\n    required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK for running Gradle\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Spotless\n        run: |\n          ./gradlew spotlessApply ${inputs.no-build-cache && '--no-build-cache' || ''}\n          ./gradlew spotlessCheck ${inputs.no-build-cache && '--no-build-cache' || ''}\n          ./gradlew spotlessReport ${inputs.no-build-cache && '--no-build-cache' || ''}\n        env:\n          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n```", "answer": "```yaml name: Reusable - Spotless\n\non:\n  workflow_call:\n    inputs:\n      cache-read-only:\n        type: boolean\n        required: false\n      no-build-cache:\n        type: boolean\n        required: false\n    secrets:\n      GRADLE_ENTERPRISE_ACCESS_KEY:\n        required: false\n      GE_CACHE_USERNAME:\n        required: false\n      GE_CACHE_PASSWORD:\n        required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK for running Gradle\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n\n      - name: Spotless\n        uses: gradle/gradle-build-action@v2\n        env:\n          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n        with:\n          arguments: spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}\n          cache-read-only: ${{ inputs.cache-read-only }}\n          # gradle enterprise is used for the build cache\n          gradle-home-cache-excludes: caches/build-cache-1\n```"}
{"id": "63c49b20b008460c1df324d1", "level": "level3", "llm_response": "```yaml\nname: release_candidate\n\non:\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Step 2\n        run: echo \"This is the second step\"\n```", "answer": "```yaml # Release Candidate GitHub Action\n\nname: release_candidate\n\n# TODO(actions):\n# - [x] create a new AUTO-RC-<DATE> branch\n# - [x] update CHANGES.rst\n# - [x] create changes commit\n# - [x] push to GH\n# - [ ] update README.rst\n# - [ ] create readme commit\n# - [ ] push to GH\n# - [ ] open a PR to `master`\n\n# TODO(general):\n# - [ ] setup the action\n# - [ ] cleanup the action\n\non:\n  schedule:\n    - cron:  '0 0 1 * *'  # each 1st day of the month\n  workflow_dispatch:      # on manual trigger\n\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Flag to fetch all history.\n          #   @see https://github.com/marketplace/actions/checkout#Fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n      - run: |\n          RC_DATE=$(date +'%m-%d-%Y')\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git checkout -b auto-release-candidate-${RC_DATE}\n          git push -u origin auto-release-candidate-${RC_DATE}\n\n          git status\n          git fetch\n\n          ./bin/update_changelog.sh\n\n          git add CHANGES.rst\n          git commit -m \"chore(rc-changes): update Changes.rst\"\n          git push\n\n          gh pr create  --title \"chore(auto-release-candidate-${RC_DATE})\" \\\n                        --body \"Automated release candidate for ${RC_DATE}.\" \\\n                        --base master \\\n                        --draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c4a0961842bc13d779e955", "level": "level3", "llm_response": "```yaml\nname: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```"}
{"id": "63c494dd8052faa2781add7b", "level": "level3", "llm_response": "```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  workflow_dispatch:\n    inputs:\n      type:\n        description: 'Event type'\n        required: true\n        type: string\n        default: 'rerun-ci'\n    concurrency:\n      group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n\njobs:\n  unix:\n    id: unix\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        java-version: [8, 11, 17]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Continuous Integration\n\non:\n  push:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  repository_dispatch:\n    types: [rerun-ci]\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    name: JDK ${{ matrix.java.version }} - on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 60\n    strategy:\n      matrix:\n        os: [ macos-latest ]\n        java:\n          - {\n            version: 11\n          }\n          - {\n            version: 17\n          }\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build with Maven\n        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true\n```"}
{"id": "63c49d3433b087f6bde57d87", "level": "level3", "llm_response": "```yaml\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  Kics:\n    id: kics\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug-the }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-02-01 19:36:08 +0000 (Tue, 01 Feb 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  kics:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Kics\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496401e3364807577961d", "level": "level3", "llm_response": "```yaml\nname: Test commit or pull request\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: '14'\n      - name: Setup NPM\n        run: npm install -g npm@7\n      - name: Install dependencies\n        run: npm install\n      - name: Test with eslint\n        run: npm run eslint -- --ext .js,.jsx\n\n  stylelint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: '14'\n      - name: Setup NPM\n        run: npm install -g npm@7\n      - name: Install dependencies\n        run: npm install\n      - name: Test with stylelint\n        run: npm run stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: '14'\n      - name: Setup NPM\n        run: npm install -g npm@7\n      - name: Install dependencies\n        run: npm install\n      - name: Test i18n packs integrity\n        run: npm run test:i18n\n```", "answer": "```yaml name: Test commit or pull request\n\non: [push, pull_request]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with eslint\n        run: npm run test:eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with stylelint\n        run: npm run test:stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test i18n packs integrity\n        run: npm run test:i18n-packs\n```"}
{"id": "63c49932cbc73931bb18c12f", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [c]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49ad8cbc73931bb1965d2", "level": "level3", "llm_response": "```yaml\nname: prod-deploy\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ${{ runner.os }}\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Setup Node.js environment\n      uses: actions/setup-node@v3\n      with:\n        node-version: '14'\n\n    - name: Cache node_modules\n      id: cached-node_modules\n      uses: actions/cache@v3\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Install all yarn packages\n      run: yarn install\n\n    - name: Build all\n      run: yarn build\n\n    - name: Deploy pages\n      run: |\n        echo \"Deploying to GitHub Pages\"\n        # Add deployment commands here\n```", "answer": "```yaml name: prod-deploy\n\non: [workflow_dispatch]\n\njobs:\n    deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v3\n\n            - name: Setup Node.js environment\n              uses: actions/setup-node@v3\n              with:\n                  node-version: '16'\n                  cache: 'yarn'\n\n            - name: Cache node_modules\n              uses: actions/cache@v3\n              id: cached-node_modules\n              with:\n                  path: |\n                      node_modules\n                  key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/publish-release.yml') }}\n\n            - name: Install all yarn packages\n              if: steps.cached-node_modules.outputs.cache-hit != 'true'\n              run: yarn --frozen-lockfile\n\n            - name: Build all\n              run: yarn build\n\n            - name: Deploy pages\n              run: |\n                  git init\n                  git config user.name \"schalkneethling\"\n                  git config user.email \"sneethling@mozilla.com\"\n                  git checkout -b prod\n                  git add .\n                  git commit --allow-empty -m \"Deploying latest generated pages\"\n                  git remote add mdn \"https://$GITHUB_TOKEN@github.com/mdn/interactive-examples.git\"\n                  # Eat output so it doesn't spit out the sensitive GITHUB_TOKEN if something goes wrong:\n                  git push -q -f mdn prod > /dev/null 2>&1\n```"}
{"id": "63c498f31899db58864e363a", "level": "level3", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Draft a release\n        uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c496561899db58864d23b8", "level": "level3", "llm_response": "```yaml\nname: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n\ninputs:\n  debug:\n    description: 'Run with tmate debugging'\n    required: false\n    default: false\n    type: boolean\n\njobs:\n  environment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install molecule\n\n      - name: Run Molecule\n        run: |\n          molecule test --debug ${{ inputs.debug }}\n        if: inputs.debug == true\n```", "answer": "```yaml name: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      # Plugins\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: environment\n```"}
{"id": "63c496a56fc19abdf9c9d4fb", "level": "level3", "llm_response": "```yaml\nname: test\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - '**/Cargo.toml'\n      - '**/*.rs'\n      - justfile\n      - .github/workflows/test.yml\n\npermissions:\n  contents: read\n\njobs:\n  meshtls:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - name: Step 2\n        run: echo \"Step 2\"\n      - name: Step 3\n        run: echo \"Step 3\"\n      - name: Step 4\n        run: echo \"Step 4\"\n      - name: Step 5\n        run: echo \"Step 5\"\n\n  unit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - name: Step 2\n        run: echo \"Step 2\"\n      - name: Step 3\n        run: echo \"Step 3\"\n      - name: Step 4\n        run: echo \"Step 4\"\n```", "answer": "```yaml # Runs tests that complete relatively quickly.\nname: test\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - \"**/Cargo.toml\"\n      - \"**/*.rs\"\n      - justfile\n      - .github/workflows/test.yml\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: \"-D warnings -A deprecated\"\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  # Test the meshtls backends.\n  meshtls:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just clippy-crate linkerd-meshtls --all-features\n      - run: |\n          just test-crate linkerd-meshtls --all-features --no-run \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n      - run: |\n          just test-crate linkerd-meshtls --all-features \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n\n  # Run non-integration tests. This should be quick.\n  unit:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: |\n          just test --no-run \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n      - run: |\n          just test \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n```"}
{"id": "63c4a116736e7f0ed8c78a5a", "level": "level3", "llm_response": "```yaml\nname: Nightly\n\non:\n  schedule:\n    - cron: '30 12 * * *'\n\npermissions:\n  id-token: write\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Authenticate with AWS\n        uses: ./.github/actions/authenticate-aws@v1\n\n      - name: Step 3\n        run: |\n          # Add your step 3 commands here\n```", "answer": "```yaml name: Nightly\non:\n  schedule:\n    - cron: '30 12 * * *'\npermissions:\n  id-token: write\njobs:\n  nightly:\n    if: github.repository == 'aws/karpenter'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/authenticate-aws\n      - run: make nightly\n```"}
{"id": "63c498e61899db58864e3102", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n      - master\n      - 'release-*'\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [opa]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"develop\", master, release-* ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"develop\" ]\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a11a1e336480757be37b", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [typescript]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    continue-on-error: true\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        config-file: ./.github/codeql/codeql-config.yml\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718d", "level": "level3", "llm_response": "```yaml\nname: Release\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: false\n    type: choice\n    options:\n      - patch\n      - minor\n      - major\n    default: minor\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set up git config\n      run: |\n        git config --global user.name \"github-actions[bot]\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Generate CHANGELOG\n      id: changelog\n      uses: reearth/changelog-action@main\n      with:\n        version: ${{ github.event.inputs.version }}\n        token: ${{ secrets.GPT }}\n\n    - name: Insert reearth-web changelog\n      run: |\n        # Add your command to insert the changelog into the reearth-web project here\n        echo \"Inserting changelog into reearth-web...\"\n\n    - name: Upload latest CHANGELOG\n      uses: actions/upload-artifact@v3\n      with:\n        name: CHANGELOG\n        path: CHANGELOG.md\n\n    - name: Commit & push to release\n      run: |\n        git checkout release\n        git add CHANGELOG.md\n        git commit -m \"chore: update CHANGELOG for version ${{ steps.changelog.outputs.version }}\"\n        git push origin release\n\n    - name: Commit & push to main\n      run: |\n        git checkout main\n        git merge release\n        git push origin main\n```", "answer": "```yaml name: Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        required: false\n        description: 'Next version (NOTE: Switch the branch to \"release\"!)'\n        type: choice\n        default: minor\n        options:\n          - patch\n          - minor\n          - major\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n    steps:\n      - name: Set up git config\n        run: |\n          git config --global user.name \"${{ github.actor }}\"\n          git config --global user.email \"${{ github.actor }}@users.noreply.github.com\"\n          git config --global pull.rebase false\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - id: changelog\n        name: Generate CHANGELOG\n        uses: reearth/changelog-action@main\n        with:\n          version: ${{ github.event.inputs.version }}\n          repo: ${{ github.repository }}\n          latest: CHANGELOG_latest.md\n      - name: Insert reearth-web changelog\n        uses: actions/github-script@v6\n        with:\n          script: 'require(\"./.github/workflows/release\")({ github, context })'\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n      - name: Upload latest CHANGELOG\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog-${{ steps.changelog.outputs.version }}\n          path: CHANGELOG_latest.md\n      - name: Commit & push to release\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        run: |\n          rm CHANGELOG_latest.md\n          git add CHANGELOG.md\n          git commit -am \"$TAG\"\n          git tag $TAG\n          git push --atomic origin release $TAG\n      - name: Commit & push to main\n        run: git switch main && git cherry-pick release && git push\n```"}
{"id": "63c497bf1e33648075783099", "level": "level3", "llm_response": "```yaml\nname: Issue tracking\n\non:\n  issues:\n    types: [opened, labeled]\n  label:\n    types: [added]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Generate token\n      id: generate_token\n      uses: tibdex/github-app-token@v1.4.1\n      with:\n        app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n        pem: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n    - name: Get project data\n      run: |\n        # Add your code here to get project data\n\n    - name: Add issue to project\n      run: |\n        # Add your code here to add issue to project\n\n    - name: Set fields\n      run: |\n        # Add your code here to set fields\n```", "answer": "```yaml name: Issue tracking\non:\n  issues:\n    types:\n      - opened\n      - labeled\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0\n        with:\n          app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n          private_key: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ORGANIZATION: prebid\n          DATE_FIELD: Created on\n          PROJECT_NUMBER: 4\n        run: |\n          gh api graphql -f query='\n            query($org: String!, $number: Int!) {\n              organization(login: $org){\n                projectNext(number: $number) {\n                  id\n                  fields(first:100) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"'\"$DATE_FIELD\"'\") | .id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id,\n                  content {\n                     ... on Issue {\n                        createdAt\n                     }\n                     ... on PullRequest {\n                        createdAt\n                     }                     \n                  }\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json\n          \n          echo 'ITEM_ID='$(jq '.data.addProjectNextItem.projectNextItem.id' issue_data.json) >> $GITHUB_ENV\n          echo 'ITEM_CREATION_DATE='$(jq '.data.addProjectNextItem.projectNextItem.content.createdAt' issue_data.json) >> $GITHUB_ENV\n\n      - name: Set fields\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n        run: |\n          gh api graphql -f query='\n            mutation (\n              $project: ID!\n              $item: ID!\n              $date_field: ID!\n              $date_value: String!\n            ) {\n              set_creation_date: updateProjectNextItemField(input: {\n                projectId: $project\n                itemId: $item\n                fieldId: $date_field\n                value: $date_value\n              }) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f date_field=$DATE_FIELD_ID -f date_value=$ITEM_CREATION_DATE --silent\n```"}
{"id": "63c4947a8052faa2781ab62f", "level": "level3", "llm_response": "```yaml\nname: Backport labeled merged pull requests\n\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Create backport PRs\n      uses: zeebe-io/backport-action@v0.0.8\n      with:\n        github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n        base_branch: main\n        target_branches: [release/1.0, release/2.0]\n        labels: [backport]\n        workspace: ${{ github.workspace }}\n```", "answer": "```yaml name: Backport labeled merged pull requests\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\njobs:\n  build:\n    name: Create backport PRs\n    runs-on: ubuntu-latest\n    # Only run when pull request is merged\n    # or when a comment containing `/backport` is created by someone other than the backport-action\n    # bot user (user id: 97796249)\n    if: >\n      (\n        github.event_name == 'pull_request' &&\n        github.event.pull_request.merged\n      ) || (\n        github.event_name == 'issue_comment' &&\n        github.event.issue.pull_request &&\n        github.event.comment.user.id != 97796249 &&\n        contains(github.event.comment.body, '/backport')\n      )\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Token for git actions, e.g. git push\n          token: ${{ secrets.BACKPORT_ACTION_PAT }}\n      - name: Create backport PRs\n        uses: zeebe-io/backport-action@v0.0.8\n        with:\n          # Required\n          # Token to authenticate requests to GitHub\n          github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n\n          # Required\n          # Working directory for the backport action\n          github_workspace: ${{ github.workspace }}\n\n          # Optional\n          # Regex pattern to match github labels\n          # Must contain a capture group for target branchname\n          # label_pattern: ^backport ([^ ]+)$\n\n          # Optional\n          # Template used as description in the pull requests created by this action.\n          # Placeholders can be used to define variable values.\n          # These are indicated by a dollar sign and curly braces (`${placeholder}`).\n          # Please refer to this action's README for all available placeholders.\n          pull_description: |-\n            # Description\n            Backport of #${pull_number} to `${target_branch}`.\n\n            relates to ${issue_refs}\n```"}
{"id": "63c49b8c1e3364807579b321", "level": "level3", "llm_response": "```yaml\nname: Create tag\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: true\n    default: 'patch'\n    options:\n      - 'patch'\n      - 'minor'\n\njobs:\n  create-tag:\n    id: create-tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Get Previous tag\n        id: previoustag\n        uses: WyriHaximus/github-action-get-previous-tag@v1\n\n      - name: Get next versions\n        id: semvers\n        uses: WyriHaximus/github-action-next-semvers@v1\n        with:\n          version: ${{ inputs.version }}\n\n      - name: Create new minor tag\n        if: inputs.version == 'minor'\n        uses: rickstaa/action-create-tag@v1\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: 'Release ${{ steps.semvers.outputs.minor }}'\n          token: ${{ secrets.PAT }}\n\n      - name: Create new patch tag\n        if: inputs.version == 'patch'\n        uses: rickstaa/action-create-tag@v1\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: 'Release ${{ steps.semvers.outputs.patch }}'\n          token: ${{ secrets.PAT }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create tag\"\n\non:\n  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: true\n        default: 'patch'\n        type: choice\n        options:\n          - patch\n          - minor\n\njobs:\n  create-tag:\n    name: \"Create tag\"\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.PAT }}\n\n      - name: 'Get Previous tag'\n        id: previoustag\n        uses: \"WyriHaximus/github-action-get-previous-tag@v1\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: 'Get next versions'\n        id: semvers\n        uses: \"WyriHaximus/github-action-next-semvers@v1\"\n        with:\n          version: ${{ steps.previoustag.outputs.tag }}\n\n      - name: \"Create new minor tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'minor'\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: ${{ steps.semvers.outputs.minor }}\n\n      - name: \"Create new patch tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'patch'\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: ${{ steps.semvers.outputs.patch }}\n```"}
{"id": "63c4a0d7517fc08c1ef12403", "level": "level3", "llm_response": "```yaml\nname: Check\n\non:\n  pull_request:\n    types: [opened, ready_for_review, synchronize]\n  pull_request_review:\n    types: [submitted]\n\npermissions:\n  actions: write\n  pull-requests: write\n  checks: none\n  contents: none\n  deployments: none\n  issues: none\n  packages: none\n  repository-projects: none\n  security-events: none\n  statuses: none\n\njobs:\n  check-reviews:\n    id: check-reviews\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout shared-workflow\n      uses: actions/checkout@v3\n\n    - name: Installing Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.17'\n\n    - name: Checking reviewers\n      run: echo \"Checking reviewers\"\n      env:\n        REVIEWERS: ${{ secrets.reviewers }}\n```", "answer": "```yaml # Workflow will trigger on all pull request (except draft), pull request\n# review, and commit push to a pull request (synchronize) event types\n#\n# NOTE: pull_request_target behaves the same as pull_request except it grants a\n# read/write token to workflows running on a pull request from a fork. While\n# this may seem unsafe, the permissions for the token are limited below and\n# the permissions can not be changed without merging to master which is\n# protected by CODEOWNERS.\nname: Check\non:\n  pull_request_review:\n    type: [submitted, edited, dismissed]\n  pull_request_target:\n    types: [opened, ready_for_review, synchronize]\n\n# Limit the permissions on the GitHub token for this workflow to the subset\n# that is required. In this case, the check workflow needs to invalidate\n# reviews and delete workflow runs, so it needs write access to \"actions\" and\n# \"pull-requests\", nothing else.\npermissions:\n    actions: write\n    pull-requests: write\n    checks: none\n    contents: none\n    deployments: none\n    issues: none\n    packages: none\n    repository-projects: none\n    security-events: none\n    statuses: none\n\njobs:\n  check-reviews:\n    name: Checking reviewers\n    if: ${{ !github.event.pull_request.draft }}\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout main branch of shared-workflow repository.\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v3\n        with:\n          repository: gravitational/shared-workflows\n          path: .github/shared-workflows\n          ref: main\n      - name: Installing Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: .github/shared-workflows/bot/go.mod\n        # Run \"check\" subcommand on bot.\n      - name: Checking reviewers\n        run: cd .github/shared-workflows/bot && go run main.go -workflow=check -token=\"${{ secrets.GITHUB_TOKEN }}\" -reviewers=\"${{ secrets.reviewers }}\"\n```"}
{"id": "63c4973933b087f6bde31123", "level": "level3", "llm_response": "```yaml\nname: Structr CI Pipeline\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    tags: [ '*' ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Start Test Database\n        run: echo \"Starting test database...\"\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '21.1.0'\n      - name: Compile and run Tests\n        run: echo \"Compiling and running tests...\"\n      - name: Stop Test Database\n        run: echo \"Stopping test database...\"\n\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.GITHUB_TOKEN }}\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '21.1.0'\n      - name: Build Docker image\n        run: echo \"Building Docker image...\"\n      - name: Upload binaries\n        run: echo \"Uploading binaries...\"\n\n  cleanup-system:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cleanup docker\n        run: echo \"Cleaning up docker...\"\n      - name: Cleanup runner home\n        run: echo \"Cleaning up runner home...\"\n```", "answer": "```yaml name: Structr CI Pipeline\non:\n  push\n\njobs:\n  run-tests:\n    if: ${{ !startsWith( github.actor, 'dependabot' ) }}\n    runs-on: self-hosted\n    environment: build-and-test\n    strategy:\n      matrix:\n        include:\n          - module: structr-ui\n            variableName: UI\n          - module: structr-core\n            variableName: CORE\n          - module: structr-rest\n            variableName: REST\n          - module: structr-db-driver-api\n            variableName: DB_DRIVER_API\n          - module: structr-memgraph-driver\n            variableName: MEMGRAPH_DRIVER\n          - module: structr-memory-driver\n            variableName: MEMORY_DRIVER\n          - module: structr-modules\n            variableName: MODULES\n          - module: structr-neo4j-bolt-driver\n            variableName: NEO4J_BOLT_DRIVER\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start Test Datenbase\n        run: >-\n          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} \n          -p 7687 \n          -e NEO4J_AUTH=neo4j/admin \n          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \n          -e NEO4J_dbms_memory_heap_maxSize=4G \n          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && \n          echo \"ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"7687/tcp\") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})\" >> $GITHUB_ENV\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Compile and run Tests\n        run:  >-\n          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && \n          cd ${{ matrix.module }} && \n          mvn clean install -DskipDockerTestDB -Denv.testDatabaseConnection=\"bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}\"\n\n      - name: Stop Test Database\n        if: always()\n        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}\n\n  build-and-deploy:\n    runs-on: self-hosted\n    environment: build-and-test\n    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}\n    needs: run-tests\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: structr\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB\n      - name: Upload binaries\n        run: >-\n          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&\n          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1\n\n  cleanup-system:\n    runs-on: self-hosted\n    if: always()\n    needs: [run-tests, build-and-deploy]\n    steps:\n      - name: Cleanup docker\n        run: docker container prune -f && docker image prune -f && docker volume prune -f\n      - name: Cleanup runner home\n        run: cd ~/actions-runner/_work/structr/ && rm -rf structr\n```"}
{"id": "63c496e6517fc08c1eed3897", "level": "level3", "llm_response": "```yaml\nname: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    id: sync-branches\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          target_branch: development\n          source_branch: master\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          labels: ignore-release-note\n          pr_number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```", "answer": "```yaml name: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    runs-on: ubuntu-latest\n    name: Syncing branches\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          FROM_BRANCH: 'master'\n          TO_BRANCH: 'dev'\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: internal\n          repo: ${{ github.repository }}\n          number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```"}
{"id": "63c4a12533b087f6bde70dfc", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * 0'\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [typescript]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: 'CodeQL'\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * SUN'\n\njobs:\n  'Analyze':\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n    steps:\n      - name: 'Checkout repository'\n        uses: actions/checkout@v3\n      - name: 'Initialize CodeQL'\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: 'Perform CodeQL Analysis'\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49fda6fc19abdf9cd8ce3", "level": "level3", "llm_response": "```yaml\nname: Continuous integration\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  test-nixpkgs:\n    runs-on: ${{ runner.os }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Mount Bazel cache\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/bazel\n        key: ${{ runner.os }}-bazel-${{ env.cache-version }}-${{ hashFiles('**/WORKSPACE') }}\n        restore-keys: |\n          ${{ runner.os }}-bazel-${{ env.cache-version }}-\n    - name: Configure\n      run: |\n        # Add your configuration steps here\n    - name: Check Bazel version\n      run: bazel version\n    - name: Build & test\n      run: bazel build //...\n\n  test-nixpkgs-cross:\n    runs-on: ${{ runner.os }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Mount Bazel cache\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/bazel\n        key: ${{ runner.os }}-bazel-${{ env.cache-version }}-${{ hashFiles('**/WORKSPACE') }}\n        restore-keys: |\n          ${{ runner.os }}-bazel-${{ env.cache-version }}-\n    - name: Configure\n      run: |\n        # Add your configuration steps here\n    - name: Check Bazel version\n      run: bazel version\n    - name: Build & test\n      run: bazel build //...\n\n  test-bindist:\n    runs-on: ${{ runner.os }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Install Bazel\n      run: |\n        # Add your Bazel installation steps here\n    - name: Mount Bazel cache\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/bazel\n        key: ${{ runner.os }}-bazel-${{ env.cache-version }}-${{ hashFiles('**/WORKSPACE') }}\n        restore-keys: |\n          ${{ runner.os }}-bazel-${{ env.cache-version }}-\n    - name: Configure\n      run: |\n        # Add your configuration steps here\n    - name: Build & test\n      run: bazel build //...\n```", "answer": "```yaml name: Continuous integration\non: [push]\nenv:\n  # Bump this number to invalidate the GH actions cache\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    name: Build & Test - Nixpkgs\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-nixpkgs;;\n            Linux) BUILD_CONFIG=ci-linux-nixpkgs;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          nix-shell --arg docTools false --pure --run '\n            set -euo pipefail\n            ./tests/run-start-script.sh --use-nix\n            bazel build //tests:run-tests\n            ./bazel-ci-bin/tests/run-tests\n            bazel coverage //...\n            bazel build //docs:api_html\n            bazel build //docs:guide_html\n            '\n\n  test-nixpkgs-cross:\n    name: Build & Test - Cross\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=linux-nixpkgs\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          ln -sr .bazelrc.local examples/arm/.bazelrc.local\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          cd examples/arm\n          nix-shell --arg docTools false --pure --run \"bazel build //... --platforms=//:linux_aarch64\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example2\"\n\n  test-bindist:\n    name: Build & Test - bindist\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |-\n          sudo swapoff -a\n          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc\n          sudo apt clean\n          docker rmi $(docker images -q) -f\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}\n      - name: Install Bazel\n        shell: bash\n        run: |\n          BAZEL_DIR=\"$(.ci/fetch-bazel-bindist)\"\n          mv $BAZEL_DIR $HOME/bazel\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        shell: bash\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-bindist;;\n            Linux) BUILD_CONFIG=ci-linux-bindist;;\n            Windows) BUILD_CONFIG=ci-windows-bindist;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Build & test\n        shell: bash\n        run: |\n          export PATH=$HOME/bazel:$PATH\n          [[ ${{ runner.os }} == macOS ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1\n          ./tests/run-start-script.sh --use-bindists\n          if [[ ${{ runner.os }} == Windows ]]; then\n            # On Windows `//...` expands to `/...`.\n            bazel test ///...\n          else\n            bazel test //...\n          fi\n          # Test stack_snapshot pinning\n          # NOTE keep in sync with tests/RunTests.hs\n          bazel run @stackage-pinning-test-unpinned//:pin\n          bazel build @stackage-pinning-test//:hspec\n```"}
{"id": "63c49f501e336480757b2fb7", "level": "level3", "llm_response": "```yaml\nname: Run Flake\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  nix-flake:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Fetch tags\n      run: git fetch --tags\n\n    - name: Install Nix\n      uses: cachix/install-nix-action@v17\n      with:\n        nix_version: 2.13.0\n        extra_nix_config: |\n          experimental-features = nix-command flakes\n          substituters = https://cache.nixos.org https://hydra.iohk.io\n          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\n          trusted-public-keys = hydra.iohk.io-1:Atj4Hk45KZ3Qqzvzqzvzqzvzqzvzqzvzqzvzqzvzqzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzvzv", "answer": "```yaml name: Run Flake\n\non: [ push, pull_request ]\n\njobs:\n\n  nix-flake:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Fetch tags\n        run: |\n          git fetch --prune --tags ||:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Build flake\n        run: nix build\n      - name: Test run flake\n        run: nix shell -c sile --version\n```"}
{"id": "63c4964e6fc19abdf9c9b3ba", "level": "level3", "llm_response": "```yaml\nname: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\njobs:\n  fossa:\n    id: fossa\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download fossa cli\n        run: |\n          curl -L https://github.com/fossas/fossa-cli/releases/download/1.27.0/fossa-linux-amd64 -o fossa\n          chmod +x fossa\n\n      - name: Fossa init\n        run: ./fossa init\n\n      - name: Set env\n        run: echo \"FOSSA_API_KEY=${{ secrets.FOSSA_API_KEY }}\" >> $GITHUB_ENV\n\n      - name: Configuration\n        run: ./fossa configure --project-name $GITHUB_REPOSITORY\n\n      - name: Upload dependencies\n        run: ./fossa analyze --push\n```", "answer": "```yaml name: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  fossa:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Download fossa cli\n        run: |-\n          mkdir -p $HOME/.local/bin\n          curl https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash -s -- -b $HOME/.local/bin\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n\n      - name: Fossa init\n        run: fossa init\n      - name: Set env\n        run: echo \"line_number=$(grep -n \"project\" .fossa.yml | cut -f1 -d:)\" >> $GITHUB_ENV\n      - name: Configuration\n        run: |-\n          sed -i \"${line_number}s|.*|  project: git@github.com:${GITHUB_REPOSITORY}.git|\" .fossa.yml\n          cat .fossa.yml\n      - name: Upload dependencies\n        run: fossa analyze --debug\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"id": "63c49ea61842bc13d7792309", "level": "level3", "llm_response": "```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2.3.3\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"Triggering package build and deployment...\"\n          # Add your package trigger scheduler logic here\n          # Example: docker build -t my-docker-image .\n          #          docker push my-docker-image\n          #          curl -X POST -H \"Content-Type: application/json\" -d '{\"content\": \"Package build and deployment triggered successfully!\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-bookstack/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for bookstack** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-bookstack/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c49da71899db58865017d1", "level": "level3", "llm_response": "```yaml\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  merge:\n    id: merge\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature-1, feature-2, feature-3]\n\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          source_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```", "answer": "```yaml #\n# Copyright 2022 The Dapr Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\njobs:\n  merge:\n    name: Merge master into feature branches\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        # artursouza/merge-branch is a fork of devmasx/merge-branch \n        #   to minimize risk of a 3rd party repo running arbitrary code with our creds\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          type: now\n          from_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```"}
{"id": "63c4a17c33b087f6bde72c5f", "level": "level3", "llm_response": "```yaml\nname: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Install Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.17'\n\n    - name: Run linters\n      run: go run golang.org/x/tools/cmd/goimports -w .\n```", "answer": "```yaml name: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: v1.18.x\n          cache: true\n      - run: go run mage.go lint\n```"}
{"id": "63c49f39b008460c1df4c52d", "level": "level3", "llm_response": "```yaml\nname: Static Code Analysis\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        php: [7.4, 8.0]\n        stability: [stable, nightly]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        tools: composer\n\n    - name: Setup problem matchers\n      run: echo \"::add-matcher::phpcs.json\"\n\n    - name: Install dependencies\n      run: composer install --no-dev --optimize-autoloader\n\n    - name: Execute static code analysis\n      run: composer run-script static-code-analysis\n```", "answer": "```yaml name: Static Code Analysis\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest]\n        php: [8.1]\n        stability: [prefer-stable]\n\n    name: P${{ matrix.php }} - ${{ matrix.stability }} - ${{ matrix.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo\n          coverage: none\n\n      - name: Setup problem matchers\n        run: |\n          echo \"::add-matcher::${{ runner.tool_cache }}/php.json\"\n          echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Install dependencies\n        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction\n\n      - name: Execute static code analysis\n        run: vendor/bin/phpstan analyse src --level 9 --error-format=github --no-progress --no-ansi\n```"}
{"id": "63c499e81842bc13d7773766", "level": "level3", "llm_response": "```yaml\nname: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Calculate compressed size\n      uses: 94dreamer/compressed-size-action@master\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: 94dreamer/compressed-size-action@master\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          pattern: \"./miniprogram_dist/**/*.{js,wxs,wxml,json}\"```"}
{"id": "63c49f95736e7f0ed8c6f18a", "level": "level3", "llm_response": "```yaml\nname: Sync labels\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      \n      - name: Sync labels\n        uses: micnncim/action-label-syncer@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Sync labels\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: micnncim/action-label-syncer@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          manifest: .github/labels.yml\n```"}
{"id": "63c49fbdcbc73931bb1b5e4f", "level": "level3", "llm_response": "```yaml\nname: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches:\n      - branch0.1/tf-serving-cluster\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build the TF Docker image\n        run: |\n          # Commands to build the TensorFlow Docker image\n\n      - name: Build the SP Docker image\n        run: |\n          # Commands to build the Service Provider Docker image\n\n      - name: Check Docker image Status\n        run: |\n          # Commands to check the status of the Docker images\n```", "answer": "```yaml name: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches: [ branch0.1/tf-serving-cluster ]\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build the TF Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/tf_serving\n        docker build -f gramine_tf_serving.dockerfile . -t tf_serving:$(date +%s)\n        \n    - name: Build the SP Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/secret_prov\n        docker build -f secret_prov.dockerfile . -t sp_serving:$(date +%s)\n        \n    - name: Check Docker image Status\n      run: docker images\n      \n```"}
{"id": "63c49daf1842bc13d778bec9", "level": "level3", "llm_response": "```yaml\nname: unit tests\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install packages (openSUSE)\n      run: |\n        sudo zypper install -y python3 python3-pip\n    - name: Install packages (Fedora/CentOS)\n      run: |\n        sudo dnf install -y python3 python3-pip\n    - name: Install packages (Debian/Ubuntu)\n      run: |\n        sudo apt-get update && sudo apt-get install -y python3 python3-pip\n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n    - name: Run unit tests\n      run: |\n        pytest\n    - name: Generate coverage reports (openSUSE Tumbleweed)\n      run: |\n        coverage run -m pytest\n    - name: Upload coverage reports to Codecov (openSUSE Tumbleweed)\n      uses: codecov/codecov-action@v3\n```", "answer": "```yaml name: 'unit tests'\n\non:\n  push:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n  pull_request:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n\njobs:\n  test:\n    name: 'unit tests'\n    runs-on: 'ubuntu-latest'\n    strategy:\n      fail-fast: false\n      matrix:\n        # Testing per python-version using actions/setup-python is not possible,\n        # because rpm doesn't exist on pypi and cannot be installed via pip on ubuntu.\n        # That's why we're going to test on the target distros directly.\n        container:\n\n          # Fedora\n          - 'fedora:36'\n          - 'fedora:rawhide'\n\n          # openSUSE\n          # leap < 15.2 doesn't contain git-lfs which causes actions/checkout to fail\n          - 'opensuse/leap:15.3'\n          - 'opensuse/leap:15.4'\n          - 'opensuse/tumbleweed'\n\n          # CentOS Stream\n          - 'quay.io/centos/centos:stream9'\n\n          # Debian\n          - 'debian:stable'\n          - 'debian:unstable'\n\n          # Ubuntu\n          - 'ubuntu:latest'\n\n    container:\n      image: ${{ matrix.container }}\n\n    steps:\n      - name: 'Install packages (openSUSE)'\n        if: ${{ startsWith(matrix.container, 'opensuse/') }}\n        run: |\n            zypper -n --gpg-auto-import-keys refresh\n            zypper -n lr --details\n            grep -qi tumbleweed /etc/os-release && zypper -n dist-upgrade || zypper -n patch || zypper -n patch\n            zypper -n install git-lfs\n            zypper -n install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Fedora/CentOS)'\n        if: ${{ startsWith(matrix.container, 'fedora:') || contains(matrix.container, 'centos:') }}\n        run: |\n            dnf -y makecache\n            dnf -y distro-sync\n            dnf -y install git-lfs\n            dnf -y install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Debian/Ubuntu)'\n        if: ${{ startsWith(matrix.container, 'debian:') || startsWith(matrix.container, 'ubuntu:') }}\n        run: |\n            apt-get -y update\n            apt-get -y upgrade\n            apt-get -y --no-install-recommends install git-lfs\n            apt-get -y --no-install-recommends install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - uses: actions/checkout@v3\n\n      - name: 'Run unit tests'\n        run: |\n          pip3 install -e .\n          python3 setup.py test\n\n      - name: 'Generate coverage reports (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        run: |\n            zypper -n install python3-pytest python3-pytest-cov\n            pytest --cov=osc\n\n      - name: 'Upload coverage reports to Codecov (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        uses: codecov/codecov-action@v3\n```"}
{"id": "63c4a0086fc19abdf9cda03c", "level": "level3", "llm_response": "```yaml\nname: sync zoekt\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: 1.16\n\n    - name: Run tests\n      run: go test ./...\n\n    - name: Build\n      run: go build -o sync-zoekt\n\n    - name: Create PR\n      id: pr\n      uses: peter-evans/create-pull-request@v3\n      with:\n        title: Sync Zoekt\n        body: Automated sync of Zoekt\n        base: main\n        head: sync-branch\n        commit-message: Sync Zoekt\n\n    - name: Check PR outputs\n      run: echo \"PR number: ${{ steps.pr.outputs.pull-request-number }}\"\n\n    - name: Enable Pull Request Automerge\n      id: enable-automerge\n      uses: peter-evans/enable-pull-request-automerge@v1\n      with:\n        pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n        token: ${{ secrets.GH_TOKEN }}\n```", "answer": "```yaml name: sync zoekt\non:\n  push:\n    branches:\n      - main\n\n  workflow_dispatch:\n    branches:\n      - main\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: 'sourcegraph/sourcegraph'\n          ref: 'main'\n      - uses: actions/setup-go@v2\n        with: { go-version: '1.19' }\n      - run: go mod download\n      - run: ./dev/zoekt/update\n      - uses: peter-evans/create-pull-request@v3\n        if: github.event_name == 'push'\n        name: 'Create PR'\n        id: pr\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          title: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          commit-message: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          body: |\n            This PR is autogenerated to update to sourcegraph/zoekt@${{ github.sha }}\n\n            ## Test Plan\n\n            Testing is done on the zoekt repo. All checks on this PR are sufficient.\n\n          branch: 'zoekt/update'\n          delete-branch: 'true'\n          team-reviewers: 'search-core'\n          base: 'main'\n\n      - name: 'Check PR outputs'\n        run: |\n          echo \"Pull Request Number - ${{ steps.pr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}\"\n      - uses: peter-evans/enable-pull-request-automerge@v1\n        name: Enable Pull Request Automerge\n        if: steps.pr.outputs.pull-request-operation == 'created'\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n          merge-method: squash\n          repository: 'sourcegraph/sourcegraph'\n```"}
{"id": "63c498781e33648075787ab4", "level": "level3", "llm_response": "```yaml\nname: Check documentation\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  docs:\n    id: docs\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Build documentation\n      run: |\n        make html\n\n    - name: Upload documentation as artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: documentation\n        path: docs/build/html\n\n    - name: Check links\n      run: |\n        pip install linkchecker\n        linkchecker docs/build/html\n```", "answer": "```yaml name: Check documentation\non: [push, pull_request]\njobs:\n  docs:\n    name: Build documentation & check links\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.8\"\n      - run: |\n          pip install --constraint=.github/workflows/constraints.txt pip\n          pip install --constraint=.github/workflows/constraints.txt nox\n      - name: Build documentation\n        run: nox --force-color --session=docs\n      - uses: actions/upload-artifact@v3\n        with:\n          name: docs\n          path: docs/_build\n      - name: Check links\n        run: nox --force-color --session=linkcheck\n```"}
{"id": "63c496801899db58864d34ec", "level": "level3", "llm_response": "```yaml\nname: ci\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    id: semantic-pull-request\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml\n\n  styling:\n    id: styling\n    steps:\n      - name: ''\n        run: |\n          # Add your step 1 command here\n      - name: Install dependencies\n        run: npm install\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run format\n\n  unit-tests:\n    id: unit-tests\n    steps:\n      - name: ''\n        run: |\n          # Add your step 1 command here\n      - name: Install dependencies\n        run: npm install\n      - name: Test\n        run: npm test\n\n  e2e:\n    id: e2e\n    steps:\n      - name: ''\n        run: |\n          # Add your step 1 command here\n      - name: Test (100% requirement on 100% file)\n        run: npm run e2e -- --requirement 100\n      - name: Test (90% requirement on 95% file)\n        run: npm run e2e -- --requirement 95\n      - name: Test (100% requirement on 95% file)\n        run: npm run e2e -- --requirement 100\n      - name: Test (100% requirement on 95% file with excludes)\n        run: npm run e2e -- --requirement 100 --exclude 'path/to/exclude'\n```", "answer": "```yaml name: 'ci'\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run check_format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test (100% requirement on 100% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.100.info'\n      - name: Test (90% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          min_coverage: 90\n      - name: Test (100% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/*_observer.dart'\n      - name: Test (100% requirement on 95% file with excludes)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/whatever.dart **/*_observer.dart **/does_not_matter.dart'\n```"}
{"id": "63c496c9b008460c1df16a83", "level": "level3", "llm_response": "```yaml\nname: generator\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update readme\n        uses: linuxsuren/yaml-readme@v0.0.12\n        with:\n          token: ${{ secrets.GH_TOKEN_SECRETS }}\n```", "answer": "```yaml name: generator\n\non:\n  push:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update readme\n        uses: linuxsuren/yaml-readme@v0.0.12\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN_SECRETS }}\n        with:\n          pattern: ''\n          username: linuxsuren\n          org: jenkins-zh\n          repo: jenkins-cli\n```"}
{"id": "63c49c3b1899db58864f8917", "level": "level3", "llm_response": "```yaml\nname: slsa\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n  release:\n    types: [published, prereleased, created]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@master\n    - name: Create checksum file\n      run: echo \"checksum file created\"\n    - name: Upload artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: build-artifact\n        path: build-artifact.zip\n\n  generate-provenance:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Download build artifact\n      uses: actions/download-artifact@v3\n      with:\n        name: build-artifact\n    - name: Generate provenance\n      uses: slsa-framework/github-actions-demo@v0.1\n    - name: Upload provenance\n      uses: actions/upload-artifact@v3\n      with:\n        name: provenance\n        path: provenance.json\n```", "answer": "```yaml ---\nname: slsa\non:\n  push:\n  release:\n    types: [published, released]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')\" >> $GITHUB_ENV\n        shell: bash\n\n      - name: checkout repository\n        uses: actions/checkout@master\n\n      - name: create checksum file\n        run: find tests/*.bash tests/*.sh scripts/* misc/* ./*.sh -type f -exec sha256sum {} \\; > ${{ env.REPOSITORY_NAME }}.sha256\n\n      - name: upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: ${{ env.REPOSITORY_NAME }}.sha256\n\n  generate-provenance:\n    needs: build\n    name: generate build provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: download build artifact\n        uses: actions/download-artifact@v3\n\n      - name: generate provenance\n        uses: slsa-framework/github-actions-demo@v0.1\n        with:\n          artifact_path: artifact/\n\n      - name: upload provenance\n        uses: actions/upload-artifact@v3\n        with:\n          path: build.provenance\n```"}
{"id": "63c49c7b517fc08c1eef6ca4", "level": "level3", "llm_response": "```yaml\nname: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment'\n        required: true\n        type: string\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"::add-path::$(pwd)/bin\"\n\n      - name: \u267b\ufe0f Restore caches\n        id: expo-caches\n        uses: ./.github/actions/expo-caches\n\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n          PAYLOAD: ${{ github.event.inputs.payload }}\n        run: |\n          echo $PAYLOAD | jq .\n          # Add your comment logic here using the PAYLOAD variable\n```", "answer": "```yaml name: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment.'\n        required: true\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n      - name: \u267b\ufe0f Restore caches\n        uses: ./.github/actions/expo-caches\n        id: expo-caches\n        with:\n          yarn-tools: 'true'\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        run: expotools commentator --payload \"${{ github.event.inputs.payload }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n```"}
{"id": "63c49983cbc73931bb18e1ee", "level": "level3", "llm_response": "```yaml\nname: Pre-commit check hooks\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  pre-commit-checks:\n    runs-on: ${{ runner.os }}\n\n    steps:\n    - name: Checkout repo\n      uses: actions/checkout@v3\n\n    - name: Setup Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n\n    - name: Cache pip dependencies\n      id: cache-pip-dependencies\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run pre-commit large file check\n      run: |\n        pre-commit run --all-files --hook-stage pre-commit --files .large_files_check\n\n    - name: Run pre-commit YAML check\n      run: |\n        pre-commit run --all-files --hook-stage pre-commit --files .yaml_check\n```", "answer": "```yaml name: Pre-commit check hooks\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n\n  pre-commit-checks:\n        \n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: 3.8\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v3\n        with:\n          # Ubuntu-specific, see\n          # https://github.com/actions/cache/blob/main/examples.md#python---pip\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n              python -m pip install --upgrade pip\n              pip install 'pre-commit>=2.10.1'\n        shell: bash\n\n      - name: Run pre-commit large file check\n        run: pre-commit run --all-files check-added-large-files\n\n      - name: Run pre-commit YAML check # for GitHub Actions configs\n        run: pre-commit run --all-files check-yaml\n```"}
{"id": "63c4a19b736e7f0ed8c7be71", "level": "level3", "llm_response": "```yaml\nname: unittest\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Install nox\n        run: |\n          python -m pip install nox\n\n      - name: Run unit tests\n        run: nox\n\n      - name: Upload coverage results\n        uses: actions/upload-artifact@v3\n        with:\n          name: coverage-results\n          path: coverage.xml\n\n  cover:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Install coverage\n        run: |\n          python -m pip install coverage\n\n      - name: Download coverage results\n        uses: actions/download-artifact@v3\n        with:\n          name: coverage-results\n          path: coverage.xml\n\n      - name: Report coverage results\n        run: |\n          coverage report\n```", "answer": "```yaml on:\n  pull_request:\n    branches:\n      - main\nname: unittest\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: ['3.7', '3.8', '3.9', '3.10']\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install nox\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install nox\n    - name: Run unit tests\n      env:\n        COVERAGE_FILE: .coverage-${{ matrix.python }}\n      run: |\n        nox -s unit-${{ matrix.python }}\n    - name: Upload coverage results\n      uses: actions/upload-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-${{ matrix.python }}\n\n  cover:\n    runs-on: ubuntu-latest\n    needs:\n        - unit\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install coverage\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install coverage\n    - name: Download coverage results\n      uses: actions/download-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-results/\n    - name: Report coverage results\n      run: |\n        coverage combine .coverage-results/.coverage*\n        coverage report --show-missing --fail-under=99\n```"}
{"id": "63c49a1e1899db58864eb16d", "level": "level3", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        goos: [linux, windows, darwin]\n        goarch: [amd64, 386]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.17'\n\n    - name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}\n      run: go build -o myapp-${{ matrix.goos }}-${{ matrix.goarch }}\n\n    - name: Rename for Windows\n      if: runner.os == 'Windows'\n      run: mv myapp-windows-amd64 myapp.exe\n\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}\n        path: myapp-${{ matrix.goos }}-${{ matrix.goarch }}\n\n  release:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Download artifacts\n      uses: actions/download-artifact@v3\n      with:\n        name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}\n\n    - name: Show files\n      run: ls -la\n\n    - name: Calc hash\n      run: sha256sum myapp-${{ matrix.goos }}-${{ matrix.goarch }} > myapp-${{ matrix.goos }}-${{ matrix.goarch }}.sha256\n\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        files: |\n          myapp-${{ matrix.goos }}-${{ matrix.goarch }}\n          myapp-${{ matrix.goos }}-${{ matrix.goarch }}.sha256\n```", "answer": "```yaml name: Build\n\non:\n  push:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [ linux, darwin ]\n        goarch: [ amd64, arm64 ]\n        include:\n          - goos: windows\n            goarch: amd64\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: '0'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n          check-latest: true\n          cache: true\n\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x\n\n\n      - name: Build\n        run: |\n          go generate ./...\n          go build -v -ldflags '-s -w -buildid=' -trimpath -o out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n\n      - name: Rename for Windows\n        if: matrix.goos == 'windows'\n        run: mv out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }} out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}.exe\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n          path: out/*\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Show files\n        run: |\n          pwd\n          find\n\n      - name: Calc hash\n        run: |\n          mkdir -p out\n          cp ./murphysec-linux-amd64/murphysec-linux-amd64 ./out/\n          cp ./murphysec-windows-amd64/murphysec-windows-amd64.exe ./out/\n          cp ./murphysec-darwin-amd64/murphysec-darwin-amd64 ./out/\n          cp ./murphysec-darwin-arm64/murphysec-darwin-arm64 ./out\n          cp ./murphysec-linux-arm64/murphysec-linux-arm64 ./out\n          cd out\n          sha256sum * > sha256sum\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: out/*\n          draft: true\n```"}
{"id": "63c49c446fc19abdf9cc1f4b", "level": "level3", "llm_response": "```yaml\nname: Scala Snippet Checker\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [opened, edited]\n  issue_comment:\n    types: [created, edited]\n\njobs:\n  snippet-runner:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check Scala Snippets\n        uses: virtuslab/scala-snippet-checker@v1\n```", "answer": "```yaml name: Scala Snippet Checker\non:\n  issue_comment:\n    types: [created, edited]\n  issues:\n    types: [opened, edited]\n\njobs:\n  snippet-runner:\n    timeout-minutes: 2\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: virtuslab/scala-snippet-checker@main```"}
{"id": "63c49a88517fc08c1eeea9d6", "level": "level3", "llm_response": "```yaml\nname: Hackage, Cabal, Linux\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 2 * * *'\n\njobs:\n  GHC:\n    id: build10\n    runs-on: ${{ runner.os }}\n    strategy:\n      matrix:\n        ghc: [8.10, 8.12, 9.0]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Haskell env setup\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n\n      - name: Install additional system packages\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libgmp-dev\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          nix_version: 2.8.1\n          channels: nixos stable\n\n      - name: Repository update\n        run: |\n          git pull origin ${{ github.ref }}\n          git submodule update --init --recursive\n\n      - name: Configuration freeze\n        run: |\n          cabal update\n          cabal freeze\n\n      - name: Configuring GitHub cache\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/nix\n          key: ${{ runner.os }}-nix-${{ hashFiles('**/default.nix') }}\n          restore-keys: |\n            ${{ runner.os }}-nix-\n\n      - name: Build\n        run: cabal build\n\n      - name: Tests\n        run: cabal test\n\n      - name: Haddock\n        run: cabal haddock\n\n      - name: Source distribution file\n        run: cabal sdist\n```", "answer": "```yaml name: \"Hackage, Cabal, Linux\"\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: \"45 02 * * *\"\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n\n  build10:\n    name: \"GHC\"\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ghc:\n          [ \"8.8\"\n          , \"9.0\"\n          ]\n    steps:\n\n      - name: \"Git checkout\"\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: \"Haskell env setup\"\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n\n      - name: \"Install additional system packages\"\n        run: sudo apt install libsodium-dev\n\n      #  2020-08-01: NOTE: Nix instantiate still needed for HNix tests\n      - name: \"Install Nix\"\n        uses: cachix/install-nix-action@v17\n\n      - name: \"Repository update\"\n        run: cabal v2-update\n\n      # Freeze is for the caching\n      - name: \"Configuration freeze\"\n        run: cabal v2-freeze $cabalConfig --minimize-conflict-set\n\n      - name: \"Configuring GitHub cache\"\n        uses: actions/cache@v3\n        with:\n          path: |\n            ${{ steps.HaskEnvSetup.outputs.cabal-store }}\n            dist-newstyle\n          key: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}\n          # 2022-04-22: `v2-` added to invalidate corrupted caches, can be removed after one week\n          restore-keys: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-v2-\n\n      - name: \"Build\"\n        run: cabal v2-build $cabalConfig\n\n      - name: \"Tests\"\n        run: cabal v2-test $cabalConfig\n\n      - name: \"Haddock\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-haddock $cabalConfig\n\n      - name: \"Source distribution file\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-sdist\n```"}
{"id": "63c4975e1e33648075780971", "level": "level3", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - sample-extension-dotnet-minimalapi/**\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Build .NET Project\n        run: dotnet build sample-extension-dotnet-minimalapi\n\n      - name: Build the Docker image\n        run: docker build -t sample-extension-dotnet-minimalapi .\n\n      - name: Slack Notify\n        uses: rtCamp/action-slack-notify@v2.2.0\n        with:\n          slack_url: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}\n          slack_message: \"Build failed for ${env.SAMPLE_NAME}\"\n          slack_channel: \"#build-notifications\"\n          slack_username: \"Build Bot\"\n          slack_icon_emoji: \":warning:\"\n```", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c4957f8052faa2781b232b", "level": "level3", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - 'v*'\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        with:\n          tag_name: ${{github.ref}}\n          release_name: Release ${{github.ref}}\n          draft: false\n          prerelease: false\n```"}
{"id": "63c49722cbc73931bb17e62d", "level": "level3", "llm_response": "```yaml\nname: Update Prettier\n\non:\n  push:\n    branches:\n      - renovate/prettier-*\n\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Prettier\n        run: npx prettier --write .\n\n      - name: Create or update pull request\n        uses: gr2m/create-or-update-pull-request-action@v1\n        with:\n          github_token: ${{ secrets.OCTOKITBOT_PAT }}\n          branch: prettier-update\n          title: Update Prettier\n          body: 'This PR updates Prettier to the latest version.'\n          commit_message: 'chore: update Prettier'\n          labels: 'chore, prettier'\n          reviewers: 'your-github-username'\n```", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49ced6fc19abdf9cc60fa", "level": "level3", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [comment_created]\n  pull_request:\n    types: [comment_created]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: TagBot\n      uses: JuliaRegistries/TagBot@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c499221e3364807578c18a", "level": "level3", "llm_response": "```yaml\nname: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**/*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**/*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js environment\n        uses: ./.github/actions/setup-js-env@v1\n\n      - name: Add Custom Problem Matcher\n        run: echo \"::add-matcher::markdownlint.json\"\n\n      - name: npm run markdownlint\n        run: npm run markdownlint\n```", "answer": "```yaml name: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-js-env\n\n      - name: Add Custom Problem Matcher\n        run: |\n          echo \"::add-matcher::.github/matchers/${{ github.job }}.json\"\n\n      - name: npm run markdownlint\n        run: |\n          npm run markdownlint\n```"}
{"id": "63c497321899db58864d7fa4", "level": "level3", "llm_response": "```yaml\nname: Docs Preview\n\non:\n  workflow_run:\n    workflows: [CI]\n    types: [completed]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Download artifact\n      run: |\n        wget -O docs.zip ${{ github.event.workflow_run.artifacts_url }}\n\n    - name: Unzip artifact\n      run: unzip docs.zip -d ${{ github.workspace }}\n\n    - name: Deploy PR preview\n      id: deploy_preview\n      uses: dswistowski/surge-sh-action@v1.0.1\n      env:\n        SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}\n        SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}\n      with:\n        project: docs\n        domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}.example.com\n\n    - name: Comment PR preview URL\n      uses: Beakyn/gha-comment-pull-request@v1.0.2\n      env:\n        GITHUB_TOKEN: ${{ github.token }}\n      with:\n        comment: |\n          Docs preview is available at: https://${{ env.SURGE_DOMAIN }}\n```", "answer": "```yaml name: Docs Preview\n\nenv:\n  CARGO_TERM_COLOR: always\n\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n    steps:\n      - name: Download artifact\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: context.payload.workflow_run.id,\n            });\n            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"docs\";\n            })[0];\n            let download = await github.rest.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            let fs = require('fs');\n            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs.zip`, Buffer.from(download.data));\n      \n      - name: Unzip artifact\n        run: |\n          unzip docs.zip\n          tar -xf docs.tar.zstd\n\n      - name: Deploy PR preview\n        continue-on-error: true\n        id: deploy_preview\n        uses: dswistowski/surge-sh-action@v1.0.1\n        with:\n          domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n          project: doc\n          login: ${{ secrets.SURGE_LOGIN }}\n          token: ${{ secrets.SURGE_TOKEN }}\n\n      - name: Comment PR preview URL\n        if: steps.deploy_preview.outcome == 'success'\n        uses: Beakyn/gha-comment-pull-request@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          pull-request-number: ${{ github.event.workflow_run.pull_requests[0].number }}\n          description-message: |\n            ----\n            Preview: https://pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n```"}
{"id": "63c49c4d1e3364807579ff48", "level": "level3", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      event_type:\n        required: true\n        type: string\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.17'\n\n    - name: Check out source code\n      uses: actions/checkout@v3\n\n    - name: Build\n      run: go build -v ./...\n\n    - name: Upload to spaces and s3\n      run: |\n        # Add your upload script here\n        # Example:\n        # aws s3 cp ./build/output s3://your-bucket/\n        # spaces-cli cp ./build/output your-spaces-bucket/\n      env:\n        CERT_PWD: ${{ secrets.CERT_PWD }}\n        AWS_SECRET: ${{ secrets.AWS_SECRET }}\n        AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\n        BB_SECRET: ${{ secrets.BB_SECRET }}\n        BB_ACCESS: ${{ secrets.BB_ACCESS }}\n        SPACES_KEY: ${{ secrets.SPACES_KEY }}\n        SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\n        WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\n        WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\n```", "answer": "```yaml name: Build\r\non:\r\n  push:\r\n  pull_request:\r\n  repository_dispatch:\r\n    types: [build-pre-rel]\r\njobs:\r\n  build:\r\n    name: Build\r\n    runs-on: windows-2022\r\n    steps:\r\n      - name: Set up Go\r\n        uses: actions/setup-go@v3\r\n        with:\r\n          go-version: 1.17\r\n\r\n      - name: Check out source code\r\n        uses: actions/checkout@v3\r\n        with:\r\n          # needed to calc build number via git log --oneline\r\n          fetch-depth: 0\r\n\r\n      - name: Build\r\n        env:\r\n          CERT_PWD: ${{ secrets.CERT_PWD }}\r\n        run: .\\doit.bat -ci\r\n\r\n      # a separate step from -ci to make logs easier to read\r\n      - name: Upload to spaces and s3\r\n        env:\r\n          AWS_SECRET: ${{ secrets.AWS_SECRET }}\r\n          AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\r\n          BB_SECRET: ${{ secrets.BB_SECRET }}\r\n          BB_ACCESS: ${{ secrets.BB_ACCESS }}\r\n          SPACES_KEY: ${{ secrets.SPACES_KEY }}\r\n          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\r\n          WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\r\n          WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\r\n        run: .\\doit.bat -ci-upload\r\n```"}
{"id": "63c4976dcbc73931bb1805bb", "level": "level3", "llm_response": "```yaml\nname: Build & Test NStack\n\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n    branches:\n      - main\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install GitVersion\n        uses: gittools/actions/gitversion/setup@v0.9.13\n\n      - name: Determine Version\n        id: gitversion\n        uses: gittools/actions/gitversion/execute@v0.9.13\n\n      - name: Display GitVersion outputs\n        run: |\n          echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n          echo \"Commits since version source: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build Debug\n        run: dotnet build --configuration Debug\n\n      - name: Test\n        run: dotnet test --configuration Debug\n```", "answer": "```yaml name: Build & Test NStack\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    outputs: \n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} \n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0 #fetch-depth is needed for GitVersion\n\n    #Install and calculate the new version with GitVersion  \n    - name: Install GitVersion\n      uses: gittools/actions/gitversion/setup@v0.9.13\n      with:\n        versionSpec: 5.x\n    - name: Determine Version\n      uses: gittools/actions/gitversion/execute@v0.9.13\n      id: gitversion # step id used as reference for output values\n    - name: Display GitVersion outputs\n      run: |\n        echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n        echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: 6.0.x\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build Debug\n      run: |\n       dotnet-gitversion /updateprojectfiles \n       dotnet build --no-restore -c Debug\n\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```"}
{"id": "63c49f2733b087f6bde6470b", "level": "level3", "llm_response": "```yaml\nname: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Check Markdown links\n        uses: gaurav-nelson/github-action-markdown-link-check@master\n```", "answer": "```yaml name: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n      with:\n        fetch-depth: 1\n    - uses: gaurav-nelson/github-action-markdown-link-check@master\n```"}
{"id": "63c4a0901899db5886514714", "level": "level3", "llm_response": "```yaml\nname: test-coverage\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  test-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up R\n        uses: r-lib/actions/setup-r@v1\n\n      - name: Install dependencies\n        run: |\n          Rscript -e \"install.packages(c('covr', 'testthat'))\"\n\n      - name: Run tests and generate coverage report\n        run: |\n          Rscript -e \"library(covr); library(testthat); test_dir('tests/testthat'); report('coverage_report')\"\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: test-coverage\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main```"}
{"id": "63c497cf6fc19abdf9ca5032", "level": "level3", "llm_response": "```yaml\nname: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\njobs:\n  check:\n    runs-on: ${{ matrix.platform }}\n    strategy:\n      matrix:\n        node-version: [14, 16]\n        platform: [ubuntu-latest]\n\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Cache node modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ matrix.node-version }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install & build\n        run: |\n          npm install\n          npm run build\n\n      - name: Lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run check-dependencies\n\n      - name: Test\n        run: npm test\n\n      - name: CodeClimate test coverage\n        uses: paambaati/codeclimate-action@v3.0.0\n        with:\n          coverage: ./coverage/lcov.info\n          report_directory: ./coverage\n          file_name: lcov.info\n          token: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n```", "answer": "```yaml name: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: true\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  check:\n    strategy:\n      fail-fast: true\n      matrix:\n        node-version:\n          - 18.x\n        platform:\n          - ubuntu-latest\n\n    runs-on: ${{matrix.platform}}\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}\n          restore-keys: |\n            ${{matrix.node-version}}@${{matrix.platform}}-build-\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{matrix.node-version}}\n      - name: install & build\n        run: |\n          npm install\n          npm run build\n      - name: lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run depcruise\n      - run: npm run test:cover\n      - uses: paambaati/codeclimate-action@v3.0.0\n        env:\n          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n```"}
{"id": "63c49e951e336480757ae6d2", "level": "level3", "llm_response": "```yaml\nname: build-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - releases/*\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n      - name: Build and test\n        run: npm install && npm run build && npm test\n```", "answer": "```yaml name: \"build-test\"\non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build: # make sure build/ci work properly\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: |\n        npm install\n        npm run all\n```"}
{"id": "63c4a0956fc19abdf9cdd93b", "level": "level3", "llm_response": "```yaml\nname: first startup\n\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    id: test\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: ''\n        run: echo \"Hello, World!\"\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        run: echo \"::set-output name=version::$(python --version)\"\n      - name: Cache pip dir\n        id: pip-cache\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Cache tox env\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/tox\n          key: ${{ runner.os }}-tox-${{ hashFiles('**/tox.ini') }}\n      - name: ''\n        run: echo \"Step 6 is a placeholder.\"\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox -e py${{ matrix.python-version }}\n```", "answer": "```yaml name: first startup\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n\n  test:\n    name: Startup test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7', '3.10']\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        id: pip-cache\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache tox env\n        uses: actions/cache@v3\n        with:\n          path: .tox\n          key: tox-cache-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}-first-startup\n      - uses: mvdbeek/gha-yarn-cache@master\n        with:\n          yarn-lock-file: 'galaxy root/client/yarn.lock'\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox -e first_startup\n        working-directory: 'galaxy root'\n```"}
{"id": "63c494187843b612699fef52", "level": "level3", "llm_response": "```yaml\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run debug mode\n        if: github.event.inputs.debug-the == true\n        run: echo \"Debug mode is enabled\"\n\n      - name: Validate CODEOWNERS\n        run: |\n          # Add your validation commands here\n          echo \"Validating CODEOWNERS file...\"\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Validate CODEOWNERS\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c495678052faa2781b1912", "level": "level3", "llm_response": "```yaml\nname: External Trigger Scheduler\n\non:\n  schedule:\n    - cron: '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    id: external-trigger-scheduler\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2.3.3\n      - name: External Trigger Scheduler\n        run: echo \"This is the External Trigger Scheduler step\"\n        env:\n          CR_PAT: ${{ secrets.CR_PAT }}\n```", "answer": "```yaml name: External Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-swag/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```"}
{"id": "63c49dcf517fc08c1eeff4cc", "level": "level3", "llm_response": "```yaml\nname: Check for semantic PR title\n\non:\n  pull_request:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n  pull_request_target:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    id: check-reverted-pr\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: 47f7cf65b5ced0830a325f705cad64f2f58dddf7/actions/github-script@v1\n        with:\n          script: |\n            const prTitle = '${{ github.event.pull_request.title }}';\n            if (prTitle.includes('revert') || prTitle.includes('Revert')) {\n              core.setOutput('is_reverted', 'true');\n            } else {\n              core.setOutput('is_reverted', 'false');\n            }\n\n  check-semantic-pr:\n    id: check-semantic-pr\n    needs: check-reverted-pr\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check semantic PR title\n        uses: 01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb/amannn-action-semantic-pull-request@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          fail_on_error: true\n          title_pattern: '^(feat|fix|chore|docs|style|refactor|test|ci|build|ci|chore|wip|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|chore|ci|ch", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Check for semantic PR title\"\n\non:\n  # Semantic PR module only works with pull_request_target\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - edited\n      - synchronize\n      - ready_for_review\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - uses: amannn/action-semantic-pull-request@01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb # pin@v5.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            docs\n            style\n            refactor\n            perf\n            test\n            build\n            ci\n            chore\n            revert\n          # Configure which scopes are allowed.\n          scopes: |\n            aaa_server\n            agw\n            amf\n            ci\n            cloud\n            connectiond\n            control_proxy\n            csfb\n            ctraced\n            cwg\n            deps\n            deps-dev\n            directoryd\n            dp\n            eap\n            eap_aka\n            eap_sim\n            enodebd\n            envoy_controller\n            eventd\n            feg\n            feg_hello\n            feg_relay\n            health\n            lte\n            magmad\n            mme\n            mobilityd\n            monitord\n            nms\n            orc8r\n            pipelined\n            policydb\n            radiusd\n            redirectd\n            redis\n            s6a_proxy\n            s8_proxy\n            sctpd\n            session_proxy\n            sessiond\n            smf\n            smsd\n            state\n            subscriberdb\n            swx_proxy\n            td-agent-bit\n            upf\n          # Configure that a scope must always be provided.\n          requireScope: false\n          # For work-in-progress PRs you can typically use draft pull requests\n          # from GitHub. However, private repositories on the free plan don't have\n          # this option and therefore this action allows you to opt in to using the\n          # special \"[WIP]\" prefix to indicate this state. This will avoid the\n          # validation of the PR title and the pull request checks remain pending.\n          # Note that a second check will be reported if this is enabled.\n          wip: true\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub\n          # will suggest using that commit message instead of the PR title for the\n          # merge commit, and it's easy to commit this by mistake. Enable this option\n          # to also validate the commit message for one commit PRs.\n          validateSingleCommit: true\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    env:\n      STATUS: ':heavy_check_mark:'\n      check-type: Semantic PR check\n      check-documentation: See [instructions on formatting your commit and pull request titles](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format).\n    steps:\n      - if: needs.check-semantic-pr.result == 'failure'\n        run: echo 'STATUS=:x:' >> $GITHUB_ENV\n      - uses: peter-evans/find-comment@b657a70ff16d17651703a84bee1cb9ad9d2be2ea # pin@v2.0.1\n        id: fc\n        with:\n          issue-number: ${{ github.event.number }}\n          body-includes: ${{ env.check-type }}\n      - uses: thollander/actions-comment-pull-request@686ab1cab89e0f715a44a0d04b9fdfdd4f33d751 # pin@v1.4.1\n        if: >\n          (needs.check-semantic-pr.result == 'failure')\n          || (steps.fc.outputs.comment-id != '')\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment_includes: ${{ env.check-type }}\n          message: |\n            ${{ env.STATUS }} The **${{ env.check-type }}** ended with status **${{ needs.check-semantic-pr.result }}**. ${{ env.check-documentation }}\n```"}
{"id": "63c49b0d1842bc13d777adfa", "level": "level3", "llm_response": "```yaml\nname: pr2changelog\n\non:\n  pull_request:\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - created\n\npaths-ignore:\n  - CHANGELOG.md\n\njobs:\n  dry_check:\n    id: dry_check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          changelog_api_secret: ${{ secrets.CHANGELOG_API_SECRET }}\n          mode: dry\n      - name: Comment PR\n        id: comment_pr\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          message: ${{ steps.pr2changelog.outputs.dry_run_message }}\n\n  after_merge:\n    id: after_merge\n    needs: dry_check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          changelog_api_secret: ${{ secrets.CHANGELOG_API_SECRET }}\n          mode: merge\n      - name: Comment PR\n        id: comment_pr\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          message: ${{ steps.pr2changelog.outputs.merge_message }}\n```", "answer": "```yaml name: pr2changelog\non:\n  pull_request_target:\n    paths-ignore:\n      - \"CHANGELOG.md\"\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - opened\n\njobs:\n  dry_check:\n    if: github.event.pull_request.merged == false\n\n    name: changelog generator dry check\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.found_changes == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR has no registered changes in its description!\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  after_merge:\n    if: github.event.pull_request.merged == true\n\n    name: changelog generator\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          api_secret_token: ${{ secrets.CHANGELOG_API_SECRET }}\n          api_url: \"https://changelog.unitystation.org/register-change\"\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.generated_changelog == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR was merged with no registered changes or there was a problem with the API caller.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c498cab008460c1df23749", "level": "level3", "llm_response": "```yaml\nname: xcodebuild\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches: \n      - '*'\n\njobs:\n  Xcode:\n    runs-on: macos-latest\n\n    strategy:\n      matrix:\n        xcode-version: [12.x, 13.x, 14.x]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Xcode\n        uses: actions/setup-xcode@v2\n        with:\n          xcode-version: ${{ matrix.xcode-version }}\n\n      - name: Build project\n        run: xcodebuild -workspace YourProject.xcworkspace -scheme YourScheme -configuration Release -destination 'generic/platform=iOS' build\n```", "answer": "```yaml name: xcodebuild\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: ['*']\n\njobs:\n  Xcode:\n    strategy:\n      matrix:\n        xcode_version: ['13.3', '13.4.1']\n    runs-on: macos-12\n    env:\n      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app\n    steps:\n      - uses: actions/checkout@v3\n      - run: xcodebuild -version\n      - run: xcodebuild -scheme sourcekitten -parallel-testing-enabled NO test -destination platform=macOS\n```"}
{"id": "63c4a11fb008460c1df58525", "level": "level3", "llm_response": "```yaml\nname: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - '**'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Check conventional commits\n        uses: webiny/action-conventional-commits@v1.1.0\n```", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - '**'\n\njobs:\n  build:\n    name: Conventional Commits\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: webiny/action-conventional-commits@v1.1.0\n```"}
{"id": "63c49d8d517fc08c1eefd9b0", "level": "level3", "llm_response": "```yaml\nname: Go Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  unit:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        go: [1.16, 1.17, 1.18]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Go information\n      run: go version\n\n    - name: Use msys2 on windows\n      if: runner.os == 'Windows'\n      run: choco install msys2 -y\n\n    - name: Run repo-specific setup\n      run: ./.github/actions/go-test-setup\n\n    - name: Run tests\n      run: go test ./...\n\n    - name: Run tests (32 bit)\n      if: runner.os == 'Windows'\n      env:\n        PATH_386: C:\\msys64\\mingw32\\bin\n      run: go test -os=windows -arch=386 ./...\n\n    - name: Run tests with race detector\n      run: go test -race ./...\n\n    - name: Collect coverage files\n      run: go test -coverprofile=coverage.out -covermode=atomic ./...\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v1.2\n      with:\n        file: coverage.out\n        flags: unittests\n        name: codecov-go-${{ matrix.go }}-${{ matrix.os }}\n        fail_ci_if_error: true\n        env:\n          COVERAGES: coverage.out\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Test\n\njobs:\n  unit:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ \"ubuntu\", \"windows\", \"macos\" ]\n        go: [ \"1.18.x\", \"1.19.x\" ]\n    env:\n      COVERAGES: \"\"\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    name: ${{ matrix.os }} (go ${{ matrix.go }})\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Go information\n        run: |\n          go version\n          go env\n      - name: Use msys2 on windows\n        if: ${{ matrix.os == 'windows' }}\n        shell: bash\n        # The executable for msys2 is also called bash.cmd\n        #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#shells\n        # If we prepend its location to the PATH\n        #   subsequent 'shell: bash' steps will use msys2 instead of gitbash\n        run: echo \"C:/msys64/usr/bin\" >> $GITHUB_PATH\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-test-setup\n        if: hashFiles('./.github/actions/go-test-setup') != ''\n      - name: Run tests\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          # Use -coverpkg=./..., so that we include cross-package coverage.\n          # If package ./A imports ./B, and ./A's tests also cover ./B,\n          # this means ./B's coverage will be significantly higher than 0%.\n          run: go test -v -shuffle=on -coverprofile=module-coverage.txt -coverpkg=./... ./...\n      - name: Run tests (32 bit)\n        if: ${{ matrix.os != 'macos' }} # can't run 32 bit tests on OSX.\n        uses: protocol/multiple-go-modules@v1.2\n        env:\n          GOARCH: 386\n        with:\n          run: |\n            export \"PATH=${{ env.PATH_386 }}:$PATH\"\n            go test -v -shuffle=on ./...\n      - name: Run tests with race detector\n        if: ${{ matrix.os == 'ubuntu' }} # speed things up. Windows and OSX VMs are slow\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go test -v -race ./...\n      - name: Collect coverage files\n        shell: bash\n        run: echo \"COVERAGES=$(find . -type f -name 'module-coverage.txt' | tr -s '\\n' ',' | sed 's/,$//')\" >> $GITHUB_ENV\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0\n        with:\n          files: '${{ env.COVERAGES }}'\n          env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}\n```"}
{"id": "63c494cd8052faa2781ad6e7", "level": "level3", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    id: build\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Install deps (Linux)\n        if: matrix.os == 'ubuntu-latest'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y build-essential\n\n      - name: Install deps (macOS)\n        if: matrix.os == 'macos-latest'\n        run: |\n          brew install gcc\n\n      - name: Build\n        run: make\n\n      - name: Test\n        run: make test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v1\n        with:\n          name: build-artifacts\n          path: build\n\n  wasm:\n    id: wasm\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Set environment (1/3)\n        run: |\n          echo \"export WASI_SDK_VERSION=0.10.0\" >> $GITHUB_ENV\n\n      - name: Set environment (2/3)\n        run: |\n          echo \"export BINARYEN_VERSION=101\" >> $GITHUB_ENV\n\n      - name: Set environment (3/3)\n        run: |\n          echo \"export WASMER_VERSION=1.0.0\" >> $GITHUB_ENV\n\n      - name: Add Homebrew to $PATH\n        run: |\n          echo \"/usr/local/bin\" >> $GITHUB_PATH\n\n      - name: Install WASI SDK\n        run: brew install wasi-sdk@${{ env.WASI_SDK_VERSION }}\n\n      - name: Install Binaryen\n        run: brew install binaryen@${{ env.BINARYEN_VERSION }}\n\n      - name: Setup Wasmer\n        uses: wasmerio/setup-wasmer@v1\n\n      - name: Build\n        run: wasmer build\n\n      - name: Test\n        run: wasmer test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v1\n        with:\n          name: wasm-artifacts\n          path: wasm\n\n      - name: Publish on WAPM\n        run: wasmer publish --token ${{ secrets.WAPM_REGISTRY_TOKEN }}\n```", "answer": "```yaml   name: Build\n\n  on:\n    create:\n      tags:\n    push:\n      branches:\n        - main\n    pull_request:\n\n  jobs:\n    build:\n      name: Native\n      runs-on: ${{ matrix.os }}\n      strategy:\n        fail-fast: false\n        matrix:\n          os:\n            - ubuntu-latest\n            - macos-latest\n      steps:\n        - uses: actions/checkout@v1\n        - name: Install deps (Linux)\n          run: |\n            sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev\n          if: matrix.os == 'ubuntu-latest'\n        - name: Install deps (macOS)\n          run: |\n            brew install readline vim libffi openssl make\n            echo \"$(brew --prefix)/opt/make/libexec/gnubin\" >> $GITHUB_PATH\n          if: matrix.os == 'macos-latest'\n        - name: Build\n          run: make release\n        - name: Test\n          run: make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: ${{ format( 'tpl-{0}', matrix.os) }}\n            path: tpl\n\n    # Roughly matches https://github.com/WebAssembly/wasi-sdk#install\n    wasm:\n      name: WebAssembly\n      runs-on: ubuntu-latest\n      env:\n        WASI_VERSION: 12\n        BINARYEN_VERSION: 109\n        WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n      steps:\n        - uses: actions/checkout@v1\n        - name: Set environment (1/3)\n          run: |\n            echo \"WASI_VERSION_FULL=${WASI_VERSION}.0\" >> $GITHUB_ENV\n            echo \"RELEASE_VERSION=`git tag --points-at HEAD | sed 's/^v//'`\" >> $GITHUB_ENV\n        - name: Set environment (2/3)\n          run: |\n            echo \"WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}\" >> $GITHUB_ENV\n        - name: Set environment (3/3)\n          run: |\n            echo \"WASI_CC=${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot\" >> $GITHUB_ENV\n        - name: Add Homebrew to $PATH\n          run: echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH\n        - name: Install WASI SDK\n          run: |\n            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n            tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n        - name: Install Binaryen\n          run: brew install binaryen\n        - name: Setup Wasmer\n          uses: wasmerio/setup-wasmer@v1\n        - name: Build\n          run: |\n            make clean\n            make wasm\n        - name: Test\n          run: |\n            echo 'wasmer --dir . tpl.wasm -- $@' > tpl\n            chmod +x tpl\n            make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: tpl.wasm\n            path: tpl.wasm\n        - name: Publish on WAPM\n          run: |\n            sed -i \"s/__RELEASE_VERSION__/$RELEASE_VERSION/\" wapm.toml\n            wapm login $WAPM_REGISTRY_TOKEN\n            wapm publish\n          if: ${{ env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != '' }}\n```"}
{"id": "63c49a0b1842bc13d7774640", "level": "level3", "llm_response": "```yaml\nname: auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Auto-merge pull requests\n      uses: ahmadnassri/action-dependabot-auto-merge@v2\n      with:\n        token: ${{ secrets.AUTO_MERGE_TOKEN }}\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          # auto-merge rules are in /.github/auto-merge.yml\n          github-token: ${{ secrets.AUTO_MERGE_TOKEN }}```"}
{"id": "63c49e4bb008460c1df46891", "level": "level3", "llm_response": "```yaml\nname: Build PR for MyPet\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n          distribution: 'adopt'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n\n      - name: Install Dependencies\n        run: mvn dependency:go-offline\n\n      - name: Compile\n        run: mvn compile\n```", "answer": "```yaml name: Build PR for MyPet\n\non:\n  pull_request:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: \"\"\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: 17\n          distribution: 'microsoft'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/install_dependencies.sh') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Dependencies\n        run: ./install_dependencies.sh\n\n      - name: Compile\n        run: mvn --batch-mode package -DGIT_COMMIT=${{ github.sha }} -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e901e336480757ae4de", "level": "level3", "llm_response": "```yaml\nname: deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Install Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          profile: minimal\n          override: true\n\n      - name: Build\n        run: cargo build --release\n\n      - name: Package\n        run: cargo package --release\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: deploy\n\non:\n  push:\n    tags: \n      - \"v*.*.*\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: jetli/wasm-pack-action@v0.3.0\n      with:\n        # Optional version of wasm-pack to install(eg. '0.9.1', 'latest')\n        version: 'latest'\n    - name: Build\n      run: |\n        cp .env.example .env\n        npm run install\n        npm run build\n    - name: Package\n      shell: bash\n      run: |\n        tar czvf target/conduit-wasm.tar.gz crates/conduit-wasm/dist\n        zip -r target/conduit-wasm.zip crates/conduit-wasm/dist\n        shasum -a 256 target/conduit-wasm.tar.gz > target/conduit-wasm.tar.gz.sha256\n        shasum -a 256 target/conduit-wasm.zip > target/conduit-wasm.zip.sha256\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: |\n          target/conduit-wasm.tar.gz\n          target/conduit-wasm.tar.gz.sha256\n          target/conduit-wasm.zip\n          target/conduit-wasm.zip.sha256\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c493ba7843b612699fd3ef", "level": "level3", "llm_response": "```yaml\nname: Windows\n\non:\n  push:\n    paths-ignore:\n      - README.md\n      - doc/**\n  pull_request:\n    paths-ignore:\n      - README.md\n      - doc/**\n\njobs:\n  vs2022:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: |\n          # Install dependencies for vs2022\n      - name: Build project\n        run: |\n          # Build project for vs2022\n      - name: Run tests\n        run: |\n          # Run tests for vs2022\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: vs2022-build\n          path: build/vs2022\n\n  vs2022-clang:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: |\n          # Install dependencies for vs2022-clang\n      - name: Build project\n        run: |\n          # Build project for vs2022-clang\n      - name: Run tests\n        run: |\n          # Run tests for vs2022-clang\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: vs2022-clang-build\n          path: build/vs2022-clang\n\n  vs2019:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: |\n          # Install dependencies for vs2019\n      - name: Build project\n        run: |\n          # Build project for vs2019\n      - name: Run tests\n        run: |\n          # Run tests for vs2019\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: vs2019-build\n          path: build/vs2019\n\n  vs2019-clang:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: |\n          # Install dependencies for vs2019-clang\n      - name: Build project\n        run: |\n          # Build project for vs2019-clang\n      - name: Run tests\n        run: |\n          # Run tests for vs2019-clang\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: vs2019-clang-build\n          path: build/vs2019-clang\n```", "answer": "```yaml name: Windows\n\non:\n  push:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n\njobs:\n  vs2022:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON\n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2022-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -T ClangCL -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -T ClangCL  -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n```"}
{"id": "63c4a18b736e7f0ed8c7b8f2", "level": "level3", "llm_response": "```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - 'release/*'\n\njobs:\n  create-github-release:\n    id: create-github-release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create GitHub Release and Git tag\n        uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          release_name: ${{ github.ref_name }}\n          tag_name: ${{ github.ref_name }}\n          body: 'Release notes for this version'\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aa5b008460c1df2f2ad", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [php]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49d3433b087f6bde57d7c", "level": "level3", "llm_response": "```yaml\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - .github/workflows/*\n      - !.github/workflows/debian_8.yaml\n      - **/Dockerfile\n      - **/Jenkinsfile\n      - **/.envrc*\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - .gitconfig*\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Debug the workflow'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml\n    with:\n      debug: ${{ github.event.inputs.debug-the }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c4991f33b087f6bde3d444", "level": "level3", "llm_response": "```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run stale action\n        uses: knative/actions/.github/workflows/stale.yaml@main\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```"}
{"id": "63c5c656c779603593c9f31a", "level": "level3", "llm_response": "```yaml\nname: Dependencies check\n\non:\n  workflow_dispatch:\n    inputs:\n      head_sha:\n        description: 'Head SHA'\n        required: true\n        type: string\n      base_sha:\n        description: 'Base SHA'\n        required: true\n        type: string\n      target_branch:\n        description: 'Target Branch'\n        required: true\n        type: string\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    id: validate_submodules_and_ls_dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ inputs.target_branch }}\n          submodules: recursive\n\n      - name: Validate\n        uses: hmarr/debug-action@v2.1.0\n        with:\n          message: \"Validating submodules and listing dependencies\"\n          debug: ${{ secrets.ACTIONS_STEP_DEBUG }}\n          head_sha: ${{ inputs.head_sha }}\n          base_sha: ${{ inputs.base_sha }}\n          target_branch: ${{ inputs.target_branch }}\n```", "answer": "```yaml name: \"Dependencies check\"\n\non:\n  workflow_call:\n    inputs:\n      head_sha:\n        required: true\n        type: string\n      base_sha:\n        required: true\n        type: string\n      target_branch:\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    name: \"Submodules/deps\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: hmarr/debug-action@v2.1.0\n\n      - name: Validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const {repo, owner} = context.repo;\n            const head_sha = '${{ inputs.head_sha }}'\n            const base_sha = '${{ inputs.base_sha }}'\n            const targetBranch = '${{ inputs.target_branch }}'.replace('refs/heads/', '')\n            const strictCheckBranchPrefixes = ['ls-release/']\n\n            let submodules = [\n                {owner: 'heartexlabs', repo: 'label-studio-frontend'},\n                {owner: 'heartexlabs', repo: 'dm2'}\n            ]\n            \n            \n            async function getLSSubmoduleVersions(sha) {\n                let {data: lsTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: sha\n                })\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'label_studio' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'frontend' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dist' && e.type === 'tree').sha\n                })).data\n                const {data: lsDMTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dm' && e.type === 'tree').sha\n                })\n                const {data: dmfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsDMTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const dmVersionContent = Buffer.from(dmfVersion.content, dmfVersion.encoding).toString(\"utf8\")\n                const matchDM = dmVersionContent.match('\"commit\": \"(.*)\",')\n                const {data: lsLSFTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'lsf' && e.type === 'tree').sha\n                })\n                const {data: lsfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsLSFTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const lsfVersionContent = Buffer.from(lsfVersion.content, lsfVersion.encoding).toString(\"utf8\")\n                const matchLSF = lsfVersionContent.match('\"commit\": \"(.*)\",')\n                return {\n                    'label-studio-frontend': matchLSF[1],\n                    'dm2': matchDM[1],\n                }\n            }\n            \n            let base_sha_redacted = base_sha\n            if (base_sha_redacted === '0000000000000000000000000000000000000000') {\n                console.log(`Branch creation event. Using head_sha (${head_sha}) parent as base_sha`)\n                const {data: commit} = await github.rest.git.getCommit({\n                    owner,\n                    repo,\n                    commit_sha: head_sha,\n                });\n                console.log(commit.parents)\n                base_sha_redacted = commit.parents[0].sha\n            }\n            \n            const baseVersions = await getLSSubmoduleVersions(base_sha_redacted)\n            console.log(`before: ${base_sha_redacted}`)\n            console.log(baseVersions)\n            \n            const headVersions = await getLSSubmoduleVersions(head_sha)\n            console.log(`after: ${head_sha}`)\n            console.log(headVersions)\n            \n            const strictCheck = strictCheckBranchPrefixes.some(e => targetBranch.startsWith(e))\n            console.log(`Strict check: ${strictCheck}`)\n            \n            let failed = []\n            for (let submodule of submodules) {\n                if (baseVersions[submodule.repo] === headVersions[submodule.repo] && !strictCheck) {\n                    console.log(`${submodule.repo}: Is not changed`)\n                    continue\n                }\n            \n                const {data: submoduleRepo} = await github.rest.repos.get({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                });\n                const submoduleBranch = targetBranch === 'develop' ? submoduleRepo.default_branch : targetBranch\n                const {data: listCommits} = await github.rest.repos.listCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    per_page: 100,\n                    sha: submoduleBranch\n                });\n            \n                const commits = listCommits.map(e => e.sha)\n            \n                const headCommitNumber = commits.indexOf(headVersions[submodule.repo])\n                if (headCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${headVersions[submodule.repo]} from PR is not found in submodule ${submoduleBranch} branch`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n                if (strictCheck && headCommitNumber !== 0) {\n                    console.log(`${submodule.repo}: For the release branch, submodule should be pointed to the latest commit in submodule corresponding release branch which is ${listCommits[0].html_url}`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n            \n                const baseCommitNumber = commits.indexOf(baseVersions[submodule.repo])\n                if (baseCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${baseVersions[submodule.repo]} from ${targetBranch} is not found in submodule ${submoduleBranch} branch`)\n                    continue\n                }\n            \n                const {data: compare} = await github.rest.repos.compareCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    base: baseVersions[submodule.repo],\n                    head: headVersions[submodule.repo],\n                });\n                console.log(`${submodule.repo}: ${headVersions[submodule.repo]} is ${compare.ahead_by} ahead and ${compare.behind_by} behind ${baseVersions[submodule.repo]}: ${compare.html_url}`)\n                if (compare.behind_by > 0) {\n                    failed.push(submodule.repo)\n                    continue\n                }\n            }\n            \n            if (failed.length !== 0) {\n                throw `Versions for ${failed.toString()} are downgraded or not found`;\n            }\n```"}
{"id": "63c4a0196fc19abdf9cda745", "level": "level3", "llm_response": "```yaml\nname: Announce Release\n\non:\n  release:\n    types: [published, prereleased, created]\n\njobs:\n  bump-aur-package:\n    id: bump-aur-package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n      - name: Bump AUR Package\n        run: |\n          # Add your AUR package bumping commands here\n          echo \"Bumping AUR package...\"\n\n  bump-homebrew-formula:\n    id: bump-homebrew-formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          # Add your Homebrew formula bumping commands here\n          echo \"Bumping Homebrew formula...\"\n\n  announce-discord:\n    id: announce-discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          # Add your Discord announcement commands here\n          echo \"Announcing on Discord...\"\n```", "answer": "```yaml name: Announce Release\n\non:\n  release:\n    types: [published]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    name: Bump AUR Package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n          name: id_ed25519\n          known_hosts: |\n            aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN\n            aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=\n            aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=\n      - name: Bump AUR Package\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/aur-usql.XXXXXX)\n          export REPO_PATH=$WORKDIR/aur-usql\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $AUR_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'kenshaw@gmail.com'\n          sed -i \"s/pkgver=.*$/pkgver=${VER#v}/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/sha256sums=.*$/sha256sums=('$SHA256SUM')/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgrel=.*$/pkgrel=1/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgver =.*$/pkgver = ${VER#v}/\" $REPO_PATH/.SRCINFO\n          sed -i \"s%source =.*$%source = usql-${VER#v}.tar.gz::https://github.com/xo/usql/archive/${VER}.tar.gz%\" $REPO_PATH/.SRCINFO\n          sed -i \"s/sha256sums =.*$/sha256sums = $SHA256SUM/\" $REPO_PATH/.SRCINFO\n          sed -i \"s/pkgrel =.*$/pkgrel = 1/\" $REPO_PATH/.SRCINFO\n          git -C $REPO_PATH add PKGBUILD .SRCINFO\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  bump-homebrew-formula:\n    name: Bump Homebrew Formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/homebrew-xo.XXXXXX)\n          export REPO_PATH=$WORKDIR/homebrew-xo\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $HOMEBREW_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'ken@usql.app'\n          sed -i \"s%url \\\".*$%url \\\"https://github.com/xo/usql/archive/${VER}.tar.gz\\\"%\" $REPO_PATH/Formula/usql.rb\n          sed -i \"s/sha256 \\\".*$/sha256 \\\"$SHA256SUM\\\"/\" $REPO_PATH/Formula/usql.rb\n          git -C $REPO_PATH add Formula/usql.rb\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  announce-discord:\n    name: Announce Discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          curl \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"username\": \"usql\", \"content\": \"> *usql ${{ github.ref_name }}* has been released!\\n\\nGet it here: https://github.com/xo/usql/releases/${{ github.ref_name }}\"}' \\\n            ${{ secrets.DISCORD_WEBHOOK_URL }}\n```"}
{"id": "63c49994517fc08c1eee4a14", "level": "level3", "llm_response": "```yaml\nname: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.17'\n\n    - name: Checkout source\n      uses: actions/checkout@v3\n\n    - name: golangci-lint\n      uses: golangci/golangci-lint-action@v3\n```", "answer": "```yaml on: [push, pull_request]\nname: Lint\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n```"}
{"id": "63c49aab1e33648075795bea", "level": "level3", "llm_response": "```yaml\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: string\n\njobs:\n  failed-workflow:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Rerun a workflow\n      uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda\n      with:\n        script: |\n          github.actions.rerunWorkflow({\n            workflowId: inputs.run_id\n          })\n```", "answer": "```yaml ##\n# Performs follow-up tasks when a workflow fails or is cancelled.\n##\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: 'string'\n\njobs:\n  # Attempts to rerun a workflow.\n  #\n  # Performs the following steps:\n  # - Retrieves the workflow run that dispatched this workflow.\n  # - Restarts all failed jobs when the workflow fails or is cancelled for the first time.\n  failed-workflow:\n    name: Rerun a workflow\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Rerun a workflow\n        uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda # v6.3.2\n        with:\n          retries: 2\n          retry-exempt-status-codes: 418\n          script: |\n            const workflow_run = await github.rest.actions.getWorkflowRun({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n            });\n\n            // Only rerun after the first run attempt.\n            if ( workflow_run.data.run_attempt > 1 ) {\n              return;\n            }\n\n            const rerun = await github.rest.actions.reRunWorkflowFailedJobs({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n              enable_debug_logging: true\n            });\n```"}
{"id": "63c4a013b008460c1df518fc", "level": "level3", "llm_response": "```yaml\nname: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 0 * * *'\n  pull_request:\n    branches:\n      - main\n      - canary\n      - 'v[0-9]+.x-staging'\n      - 'v[0-9]+.x'\n    paths:\n      - test/internet/**\n  push:\n    branches:\n      - main\n      - canary\n      - 'v[0-9]+.x-staging'\n      - 'v[0-9]+.x'\n    paths:\n      - test/internet/**\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test-internet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      - name: Environment Information\n        run: echo \"Python version: ${{ env.PYTHON_VERSION }}\"\n\n      - name: Build\n        run: echo \"Building project...\"\n\n      - name: Test Internet\n        run: echo \"Testing internet connection...\"\n```", "answer": "```yaml name: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 5 0 * * *\n\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths: [test/internet/**]\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths: [test/internet/**]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: keep_retrying\n\npermissions:\n  contents: read\n\njobs:\n  test-internet:\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: npx envinfo\n      - name: Build\n        run: make build-ci -j2 V=1 CONFIG_FLAGS=\"--error-on-warn\"\n      - name: Test Internet\n        run: make test-internet -j2 V=1;\n```"}
{"id": "63c4a0c133b087f6bde6e92c", "level": "level3", "llm_response": "```yaml\nname: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - android/src/**/*.kt\n      - **.kts\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run ktlint\n        uses: yutailang0119/action-ktlint@v3\n        with:\n          ktlint_args: '--format'\n\n      - name: Upload ktlint report\n        uses: actions/upload-artifact@v3\n        with:\n          name: ktlint-report\n          path: ktlint-report.xml\n```", "answer": "```yaml name: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - 'android/src/**/*.kt'\n      - '**.kts'\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.46.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n      - name: run ktlint\n        run: |\n          ktlint --reporter=checkstyle,output=build/ktlint-report.xml\n        continue-on-error: true\n      - uses: yutailang0119/action-ktlint@v3\n        with:\n          report-path: build/*.xml # Support glob patterns by https://www.npmjs.com/package/@actions/glob\n        continue-on-error: false # If annotations contain error of severity, action-ktlint exit 1.```"}
{"id": "63c49f8d33b087f6bde66e80", "level": "level3", "llm_response": "```yaml\nname: Create Jira issue\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  jira:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Call composite action\n      uses: hazelcast/github-jira-tool-action@v3\n      with:\n        jira-base-url: ${{ secrets.JIRA_BASE_URL }}\n        jira-user-email: ${{ secrets.JIRA_USER_EMAIL }}\n        jira-api-token: ${{ secrets.JIRA_API_TOKEN }}\n```", "answer": "```yaml name: Create Jira issue\n\non:\n  issues:\n    types: labeled\n\njobs:\n  jira:\n    if: ${{ github.event.label.name == 'to-jira' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call composite action\n        uses: hazelcast/github-jira-tool-action@v3\n        with:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n          TARGET_JIRA_PROJECT: API\n          JIRA_LABEL: Go\n          ISSUE_TYPE: Bug\n```"}
{"id": "63c4968b6fc19abdf9c9ca77", "level": "level3", "llm_response": "```yaml\nname: Manual Build\n\non:\n  workflow_dispatch:\n    inputs:\n      buildRef:\n        description: 'Ref to build'\n        required: true\n        default: 'refs/heads/main'\n      mvnOpts:\n        description: 'Maven options'\n        required: true\n        default: '--fail-at-end'\n      goals:\n        description: 'Maven goals'\n        required: true\n        default: 'verify'\n      utOpts:\n        description: 'Unit test options'\n        required: true\n        default: '-Dtest=noTest'\n      itOpts:\n        description: 'Integration test options'\n        required: true\n        default: '-Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2'\n      addOpts:\n        description: 'Additional options'\n        required: true\n        default: '-Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat'\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.inputs.buildRef }}\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Cache local maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n\n      - name: Show the first log message\n        run: echo \"Starting Maven build with options: ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\"\n\n      - name: Override DNS to fix IP address for hostname\n        run: |\n          echo \"nameserver 8.8.8.8\" | sudo tee -a /etc/resolv.conf\n          echo \"nameserver 8.8.4.4\" | sudo tee -a /etc/resolv.conf\n\n      - name: Build with Maven\n        run: mvn ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n\n      - name: Upload unit test results\n        uses: actions/upload-artifact@v3\n        with:\n          name: unit-test-results\n          path: target/surefire-reports\n\n      - name: Upload integration test results\n        uses: actions/upload-artifact@v3\n        with:\n          name: integration-test-results\n          path: target/failsafe-reports\n\n      - name: Upload mini test logs\n        uses: actions/upload-artifact@v3\n        with:\n          name: mini-test-logs\n          path: target/test-logs\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# This workflow will build a Java project with Maven\n# See also:\n#   https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events\n\nname: Manual Build\n\non:\n  workflow_dispatch:\n    # these inputs break down the Maven command-line, somewhat arbitrarily, so\n    # the UI when starting a run is easier to use\n    inputs:\n      buildRef:\n        description: Ref to build\n        required: true\n        default: refs/heads/main\n      mvnOpts:\n        description: Maven options\n        required: true\n        default: --fail-at-end\n      goals:\n        description: Maven goals\n        required: true\n        default: verify\n      utOpts:\n        description: Unit test options\n        required: true\n        default: -Dtest=noTest\n      itOpts:\n        description: Integration test options\n        required: true\n        default: -Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2\n      addOpts:\n        description: Additional options\n        required: true\n        default: -Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    name: mvn (triggered by ${{ github.event.sender.login }})\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.inputs.buildRef }}\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: adopt\n        java-version: 11\n    - name: Cache local maven repository\n      uses: actions/cache@v3\n      with:\n        path: |\n          ~/.m2/repository/\n          !~/.m2/repository/org/apache/accumulo\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        restore-keys: ${{ runner.os }}-m2\n    - name: Show the first log message\n      run: git log -n1\n    - name: Override DNS to fix IP address for hostname\n      run: |\n        ip -br addr\n        echo \"'hostname -i' shows '$(hostname -i)'\"\n        echo \"'hostname -I' shows '$(hostname -I)'\"\n        hostname_short=$(hostname -s)\n        hostname_long=$(hostname -f)\n        if ! grep -q $hostname_short /etc/hosts; then\n          actual_ip=$(ip -4 addr show dev eth0 | grep -o 'inet [0-9.]*' | cut -f2 -d ' ')\n          echo \"Setting $hostname_long / $hostname_short to $actual_ip in /etc/hosts\"\n          echo \"$actual_ip $hostname_long $hostname_short\" | sudo tee -a /etc/hosts\n          ip -br addr\n          echo \"'hostname -i' shows '$(hostname -i)'\"\n          echo \"'hostname -I' shows '$(hostname -I)'\"\n        fi\n    - name: Build with Maven\n      timeout-minutes: 345\n      run: mvn -B -V -e -ntp \"-Dstyle.color=always\" ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n      env:\n        MAVEN_OPTS: -Djansi.force=true\n    - name: Upload unit test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: surefire-reports\n        path: ./**/target/surefire-reports/\n        if-no-files-found: ignore\n    - name: Upload integration test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: failsafe-reports\n        path: ./**/target/failsafe-reports/\n        if-no-files-found: ignore\n    - name: Upload mini test logs\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: mini-tests-logs\n        path: ./**/target/**/mini-tests/**/logs/\n        if-no-files-found: ignore\n\n```"}
{"id": "63c49937cbc73931bb18c2b2", "level": "level3", "llm_response": "```yaml\nname: check_shell_scripts\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Install shellcheck\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y shellcheck\n\n    - name: display shellcheck version\n      run: shellcheck --version\n\n    - name: run check_shell_scripts\n      run: shellcheck .\n```", "answer": "```yaml ---\nname: check_shell_scripts\n\n# yamllint disable-line rule:truthy\non: [push]\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install shellcheck\n        run: |\n          sudo apt-get install shellcheck\n\n      - name: display shellcheck version\n        run: |\n          shellcheck --version\n\n      - name: run check_shell_scripts\n        run: |\n          ./scripts/checkShellScripts.sh\n...\n```"}
{"id": "63c4995333b087f6bde3e963", "level": "level3", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        sanitizer: [address, undefined]\n\n    steps:\n    - name: Build Fuzzers (${{ matrix.sanitizer }})\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        sanitizer: ${{ matrix.sanitizer }}\n\n    - name: Run Fuzzers (${{ matrix.sanitizer }})\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        sanitizer: ${{ matrix.sanitizer }}\n\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      with:\n        name: crash\n        path: /workspace/crashes\n```", "answer": "```yaml name: CIFuzz\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   strategy:\n     fail-fast: false\n     matrix:\n       sanitizer: [address, undefined, memory]\n   steps:\n   - name: Build Fuzzers (${{ matrix.sanitizer }})\n     id: build\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Run Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       fuzz-seconds: 3600\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Upload Crash\n     uses: actions/upload-artifact@v1\n     if: failure() && steps.build.outcome == 'success'\n     with:\n       name: ${{ matrix.sanitizer }}-artifacts\n       path: ./out/artifacts\n\n```"}
{"id": "63c5c62aac4f2678a5bd79f0", "level": "level3", "llm_response": "```yaml\nname: Mark or close stale issues and PRs\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 20 * * *'\n\njobs:\n  stale:\n    id: stale\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578\n        with:\n          days-before-issue-stale: 90\n          days-before-pr-stale: 90\n          days-before-issue-close: 14\n          days-before-pr-close: 14\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          exempt-issue-labels: 'important, pinned'\n          exempt-pr-labels: 'important, pinned'\n          only-labels: 'bug, feature'\n          close-issue-message: 'This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your understanding.'\n          close-pr-message: 'This pull request has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your understanding.'\n          token: ${{ secrets.BOT_TOKEN }}\n```", "answer": "```yaml ---\nname: \"Mark or close stale issues and PRs\"\non:\n  workflow_dispatch:\n  schedule:\n    # Run the stalebot every day at 8pm UTC\n    - cron: \"00 20 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578 # tag=v6\n        with:\n          repo-token: ${{ secrets.BOT_TOKEN }}\n          days-before-issue-stale: 180\n          days-before-pr-stale: 180\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had recent activity.\n            It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          stale-pr-message: >\n            This pull request has been automatically marked as stale because it has not had\n            recent activity. It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          close-issue-message: >\n            This issue has been automatically closed due to inactivity.\n            Please re-open if this still requires investigation.\n          close-pr-message: >\n            This pull request has been automatically closed due to inactivity.\n            Please re-open if these changes are still required.\n          stale-pr-label: \"stale\"\n          stale-issue-label: \"stale\"\n          exempt-issue-labels: \"keepalive\"\n          exempt-pr-labels: \"keepalive\"\n```"}
{"id": "63c49eef6fc19abdf9cd2cf5", "level": "level3", "llm_response": "```yaml\nname: Make lens list\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - data/db/**\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\nconcurrency:\n  group: 'pages'\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create lens list from master sources\n        run: |\n          # Add your script here to create the lens list\n\n      - name: Checkout website repo\n        uses: actions/checkout@v3\n        with:\n          repository: your-username/website-repo\n          token: ${{ secrets.PUSH_SECRET }}\n\n      - name: Commit updated lens list to website repo\n        run: |\n          git add path/to/updated/lens/list\n          git commit -m \"Update lens list\"\n          git push origin master\n```", "answer": "```yaml # Create the up-to-date lens list to be published on the GitHub pages website\n\nname: Make lens list\n\non:\n  push:\n    branches: \n        - master\n    paths:\n       - 'data/db/**'\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\n# Allow write/commit to checked out repos\npermissions:\n  contents: write\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Create lens list from master sources\n      run: ./tools/lenslist/show_lensfun_coverage.py -t -o lenslist.html ./data/db\n\n    - name: Checkout website repo\n      uses: actions/checkout@v3\n      with:\n        repository: lensfun/lensfun.github.io\n        path: website-repo\n        token: ${{secrets.PUSH_SECRET}}\n\n    - name: Commit updated lens list to website repo\n      run: |\n        cp website-repo/_includes/lenslist-develop-header.md website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        dt=`date '+%Y-%m-%d'`\n        echo -en \"\\nThis list was generated on $dt from current Lensfun sources. Your Lensfun version may be older, resulting in less coverage.\\n\" >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cat lenslist.html >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cd website-repo/\n        git add _posts/lenslist/2999-12-31-Lenslist-master.md\n        git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Update master lens list from GitHub Actions\"\n        git push https://$USERNAME:$REPO_KEY@github.com/lensfun/lensfun.github.io.git\n      env:\n        REPO_KEY: ${{secrets.PUSH_SECRET}}\n        USERNAME: github-actions[bot]\n        \n```"}
{"id": "63c49c8b6fc19abdf9cc3a67", "level": "level3", "llm_response": "```yaml\nname: Test Functional (Local Chrome proxyless)\n\non:\n  workflow_dispatch:\n\ninputs:\n  sha:\n    description: 'SHA to test'\n    required: true\n    default: 'master'\n  merged_sha:\n    description: 'Merge commit SHA'\n    required: true\n  deploy_run_id:\n    description: 'Deployment workspace run ID'\n    required: true\n\njobs:\n  test:\n    runs-on: ${{ runner.os }}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Cache npm packages\n      uses: actions/cache@v2\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build project\n      run: npm run build\n\n    - name: Get npm cache directory\n      id: npm-cache-dir\n      run: echo \"::set-output name=dir::$(npm config get cache)\"\n\n    - name: Run tests\n      run: npm test\n\n    - name: Upload test artifacts\n      uses: actions/upload-artifact@v2\n      with:\n        name: test-results\n        path: test-results\n\n    - name: Notify test completion\n      uses: actions/github-script@v3\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          github.actions\u30ef\u30fc\u30af\u30d5\u30ed\u30fc.\u30b9\u30c6\u30c3\u30d7('test').\u7d50\u679c\n```", "answer": "```yaml name: Test Functional (Local Chrome proxyless)\n\non:\n    workflow_dispatch:\n        inputs:\n            sha:\n                desciption: 'The test commit SHA or ref'\n                required: true\n                default: 'master'\n            merged_sha:\n                description: 'The merge commit SHA'\n            deploy_run_id:\n                description: 'The ID of a deployment workspace run with artifacts'\njobs:\n    test:\n        runs-on: ubuntu-latest\n        environment: test-functional\n        env:\n            RETRY_FAILED_TESTS: true\n        steps:\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'pending',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/checkout@v2\n              with:\n                  ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}\n\n            - uses: actions/setup-node@v2\n              with:\n                  node-version: 14\n\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n                      let artifacts = {};\n\n                      for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {\n                        try {\n                          ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({\n                          repo: context.repo.repo,\n                          owner: context.repo.owner,\n                          run_id: context.payload.inputs.deploy_run_id\n                        }));\n                        }\n                        catch (e) {\n                          console.log(e);\n                        }\n                      }\n\n                      const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === 'npm').archive_download_url);\n                      require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, 'package.zip'), Buffer.from(artifact))\n\n            - run: |\n                  unzip package.zip\n                  tar --strip-components=1 -xzf testcafe-*.tgz\n\n            - name: Get npm cache directory\n              id: npm-cache-dir\n              run: |\n                  echo \"::set-output name=dir::$(npm config get cache)\"\n            - uses: actions/cache@v2\n              with:\n                  path: ${{ steps.npm-cache-dir.outputs.dir }}\n                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n                  restore-keys: |\n                      ${{ runner.os }}-node-\n            - run: npm ci\n            - run: npx gulp test-functional-local-proxyless-run --steps-as-tasks\n              timeout-minutes: 60\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'success',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/github-script@v3\n              if: failure() || cancelled()\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'failure',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n```"}
{"id": "63c49dec1842bc13d778d6ad", "level": "level3", "llm_response": "```yaml\nname: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to tag and publish'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Setup Node\n      uses: actions/setup-node@v3\n      with:\n        node-version: '14'\n\n    - name: Install\n      run: npm install\n\n    - name: Run integration tests\n      run: npm run integration-tests\n\n    - name: Run tests\n      run: npm test\n\n    - name: Run local integration tests\n      run: npm run local-integration-tests\n\n    - name: Build\n      run: npm run build\n\n    - name: Set version\n      run: echo \"##[set-env name=VERSION]${{ github.event.inputs.version }}\"\n\n    - name: Publish to NPM\n      run: npm publish\n      env:\n        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n    - name: Push changes\n      run: git push origin ${{ github.ref }}\n```", "answer": "```yaml name: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: true\n          xpack.security.enabled: false\n          ES_JAVA_OPTS: -Xms1024m -Xmx1024m\n        ports:\n          - 9200:9200\n          - 9300:9300\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: false\n        ports:\n          - 26500:26500\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.17.0\n          cache: 'npm'\n      - name: Install\n        run: npm ci --ignore-scripts\n      - name: Run integration tests\n        run: npm run test:integration\n      - name: Run tests\n        run: npm run test\n      - name: Run local integration tests\n        run: npm run test:local\n      - name: Build\n        run: npm run build\n      - name: Set version\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          npm version ${{ inputs.version }} -m \"Publish v%s\"\n      - name: Publish to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --access=public\n      - name: Push changes\n        run: git push --follow-tags\n```"}
{"id": "63c49e53517fc08c1ef02a7b", "level": "level3", "llm_response": "```yaml\nname: Close stale issues and PRs\n\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    id: stale\n    steps:\n      - uses: actions/stale@v5.1.1\n```", "answer": "```yaml name: 'Close stale issues and PRs'\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5.1.1\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-message: 'This PR is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-label: 'no-pr-activity'\n          days-before-stale: 14\n          days-before-close: 5\n```"}
{"id": "63c4a0851842bc13d779e225", "level": "level3", "llm_response": "```yaml\nname: Release https://lrc-maker.github.io and npm\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Set up pnpm\n        uses: pnpm/action-setup@v2.2.2\n        with:\n          version: '6'\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Build project\n        run: pnpm run build\n\n      - name: Test project\n        run: pnpm run test\n\n      - name: Publish NPM\n        run: pnpm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Deploy to lrc-maker.github.io\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GHP_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: Release https://lrc-maker.github.io and npm\n\non:\n    push:\n        tags:\n            - \"v*\"\n\njobs:\n    deploy:\n        if: startsWith(github.ref, 'refs/tags/v')\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: pnpm/action-setup@v2.2.2\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: \"16\"\n                  registry-url: \"https://registry.npmjs.org\"\n                  cache: \"pnpm\"\n\n            - run: pnpm i --ignore-scripts --frozen-lockfile\n\n            - run: pnpm run listdiff\n            - run: pnpm run lint\n            - run: make deploy\n\n            - name: Publish NPM\n              run: npm publish --ignore-scripts\n              env:\n                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n\n            - name: Deploy to lrc-maker.github.io\n              uses: peaceiris/actions-gh-pages@v3\n              with:\n                  personal_token: ${{ secrets.GHP_TOKEN }}\n                  external_repository: lrc-maker/lrc-maker.github.io\n                  publish_branch: master\n                  publish_dir: ./build\n                  force_orphan: true\n```"}
{"id": "63c49d57517fc08c1eefc300", "level": "level3", "llm_response": "```yaml\nname: CompatHelper\n\non:\n  schedule:\n    - cron: '19 22 * * *'\n  workflow_dispatch:\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  CompatHelper:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: |\n          if command -v julia &> /dev/null; then\n            echo \"Julia is already available in the PATH\"\n          else\n            echo \"Julia is not available in the PATH\"\n          fi\n\n      - name: Install Julia, but only if it is not already available in the PATH\n        if: steps.julia_in_path.outputs.julia_in_path == 'Julia is not available in the PATH'\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1.6'\n\n      - name: Add the General registry via Git\n        run: |\n          julia -e 'using Pkg; Pkg.add(\"General\")'\n\n      - name: Install CompatHelper\n        run: |\n          julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n\n      - name: Run CompatHelper\n        run: |\n          julia -e 'using CompatHelper; CompatHelper.run()'\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 19 22 * * *\n  workflow_dispatch:\npermissions:\n  contents: write\n  pull-requests: write\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: which julia\n        continue-on-error: true\n      - name: Install Julia, but only if it is not already available in the PATH\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1'\n          arch: ${{ runner.arch }}\n        if: steps.julia_in_path.outcome != 'success'\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49fce736e7f0ed8c7083c", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v3.1.0\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2.1.28\n      with:\n        languages: python\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      uses: github/codeql-action/autobuild@v2.1.28\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2.1.28\n\n    - name: \ud83d\udce8 Discord notification\n      uses: Ilshidur/action-discord@0.3.2\n      if: failure()\n      with:\n        webhook_url: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n        content: \"CodeQL analysis failed in ${github.repository} run ${github.run_id}\"\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 2\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2.1.28\n      with:\n        languages: python\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      uses: github/codeql-action/autobuild@v2.1.28\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2.1.28\n\n    - name: \ud83d\udce8 Discord notification\n      if: ${{ github.event_name == 'schedule' && failure() }}\n      env:\n        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n      uses: Ilshidur/action-discord@0.3.2\n      with:\n        args: \"[Scheduled action failed!](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\"\n```"}
{"id": "63c49e256fc19abdf9ccdc74", "level": "level3", "llm_response": "```yaml\nname: make image\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  makeimage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Make image\n      run: go build -o myapp .\n```", "answer": "```yaml on: push\nname: make image\njobs:\n  makeimage:\n    name: make image\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make image\n        run: make image\n        shell: bash\n```"}
{"id": "63c49fdb1842bc13d7799b37", "level": "level3", "llm_response": "```yaml\nname: Clean\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ published ]\n  repository_dispatch:\n\njobs:\n  delete-artifacts:\n    id: delete-artifacts\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Delete artifacts\n      run: |\n        curl -X DELETE -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" \"$GITHUB_API_URL/repos/${{ github.repository }}/actions/artifacts\"\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49c441842bc13d77827ae", "level": "level3", "llm_response": "```yaml\nname: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14, 16, 18]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Cache\n      uses: actions/cache@v3\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ matrix.node-version }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Prepare\n      run: |\n        # Add your prepare steps here\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: Build\n      run: |\n        # Add your build steps here\n\n    - name: Upload Extension Pack\n      uses: actions/upload-artifact@v3.1.0\n      with:\n        name: extension-pack\n        path: path/to/extension-pack\n```", "answer": "```yaml name: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    container: archlinux:base-devel\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: node_modules\n      \n      - name: Prepare\n        run: |\n          pacman -Sy\n          pacman -S --noconfirm base gnome-shell gtk3 libadwaita gtk4 glib2 gobject-introspection\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Build\n        run: |\n          npm install\n          npm run github_action\n        \n      - name: Upload Extension Pack\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: rounded-window-corners@yilozt.shell-extension\n          path: _build/\n```"}
{"id": "63c499ca1e33648075790155", "level": "level3", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '40 11 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Mark stale issues and pull requests\n        uses: actions/stale@v6\n        with:\n          days-before-stale: 30\n          days-before-close: 7\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          exempt-issue-labels: 'important,security'\n          exempt-pr-labels: 'important,security'\n          stale-issue-message: 'This issue has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your understanding.'\n          stale-pr-message: 'This pull request has been marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your understanding.'\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '40 11 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'Stale issue message'\n        stale-pr-message: 'Stale pull request message'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```"}
{"id": "63c49e29cbc73931bb1abbd4", "level": "level3", "llm_response": "```yaml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  generate_apps_list:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Generate\n        run: php generate.php\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n```", "answer": "```yaml name: Deploy to GitHub Pages\n\non:\n  push:\n    branches: [master]\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate\n        run: node index.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```"}
{"id": "63c49a611e33648075793dd1", "level": "level3", "llm_response": "```yaml\nname: Publish ARC\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\npermissions:\n  contents: write\n  packages: write\n\njobs:\n  release-controller:\n    id: release-controller\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Install tools\n      run: |\n        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1\n        go install github.com/mikefarah/yq/v4@v4.13.0\n\n    - name: Set version\n      run: |\n        echo \"VERSION=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\n\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: go-build\n        path: ./build\n\n    - name: Setup Docker Environment\n      id: vars\n      uses: ./.github/actions/setup-docker-environment\n      with:\n        username: ${{ secrets.DOCKER_USER }}\n        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n\n    - name: Build and Push\n      uses: docker/build-push-action@v3\n      with:\n        context: .\n        push: true\n        tags: |\n          docker.io/${{ env.DOCKERHUB_USERNAME }}/arc:${{ env.VERSION }}\n          docker.io/${{ env.DOCKERHUB_USERNAME }}/arc:latest\n        secrets:\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n```", "answer": "```yaml name: Publish ARC\n\non:\n  release:\n    types:\n      - published\n\n# https://docs.github.com/en/rest/overview/permissions-required-for-github-apps\npermissions:\n contents: write \n packages: write\n\njobs:\n  release-controller:\n    name: Release\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.18.2'\n\n      - name: Install tools\n        run: |\n          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz\n          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz\n          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder\n          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash\n          sudo mv kustomize /usr/local/bin\n          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz\n          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz\n          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin\n\n      - name: Set version\n        run: echo \"VERSION=$(cat ${GITHUB_EVENT_PATH} | jq -r '.release.tag_name')\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          make github-release\n\n      - name: Setup Docker Environment\n        id: vars\n        uses: ./.github/actions/setup-docker-environment\n        with:\n          username: ${{ env.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          ghcr_username: ${{ github.actor }}\n          ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          file: Dockerfile\n          platforms: linux/amd64,linux/arm64\n          build-args: VERSION=${{ env.VERSION }}\n          push: true\n          tags: |\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:latest\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:latest\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```"}
{"id": "63c49d3a6fc19abdf9cc7f20", "level": "level3", "llm_response": "```yaml\nname: PR update\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Update all PRs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: PR update\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: update all prs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a144cbc73931bb1bfd61", "level": "level3", "llm_response": "```yaml\nname: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - 'app/src/main/res/values/strings.xml'\n      - 'daemon/src/main/res/values/strings.xml'\n\njobs:\n  synchronize-with-crowdin:\n    id: synchronize-with-crowdin\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: crowdin action\n        uses: crowdin/github-action@master\n        with:\n          project_id: ${{ secrets.CROWDIN_PROJECT_ID }}\n          api_token: ${{ secrets.CROWDIN_API_TOKEN }}\n```", "answer": "```yaml name: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n    paths:\n      - app/src/main/res/values/strings.xml\n      - daemon/src/main/res/values/strings.xml\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: crowdin action\n      uses: crowdin/github-action@master\n      with:\n        upload_translations: false\n        download_translations: false\n        upload_sources: true\n        config: 'crowdin.yml'\n        crowdin_branch_name: master\n      env:\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}\n```"}
{"id": "63c49f1b736e7f0ed8c6c249", "level": "level3", "llm_response": "```yaml\nname: Comment Bot\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  Comment:\n    id: Comment\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Comment Bot\"\n\non:\n  pull_request_target:\n    types: [ opened ]\n\njobs:\n  Comment:\n    name: Add Comment\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          greeting: |\n            **Thank you for creating a pull request!**\n            If you have not done so already, please familiarise yourself with our [Contributing Guidelines](https://github.com/adoptium/temurin-build/blob/master/CONTRIBUTING.md) and [FAQ](https://github.com/adoptium/temurin-build/blob/master/FAQ.md), even if you have contributed to the Adoptium project before. GitHub actions will now run a set of jobs against your PR that will lint and unit test your changes. Keep an eye out for the results from these on the latest commit you submitted. For more information, please see our [testing documentation](https://github.com/adoptium/temurin-build/blob/master/Testing.md).\n```"}
{"id": "63c49bc033b087f6bde4e23d", "level": "level3", "llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    id: dependency-review\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```", "answer": "```yaml #\n# Copyright 2022 The Sigstore Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    name: License and Vulnerability Scan\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```"}
{"id": "63c49f1e1899db588650b1ca", "level": "level3", "llm_response": "```yaml\nname: Build Web\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-main:\n    id: build-main\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Install Sentry\n        run: |\n          echo \"Installing Sentry SDK...\"\n          # Add installation steps for Sentry SDK\n\n      - name: Setup Flutter\n        uses: subosito/flutter-action@v1\n        with:\n          channel: 'stable'\n\n      - name: Prepare App\n        run: |\n          echo \"Preparing app for build...\"\n          # Add preparation steps\n\n      - name: Build Hosted App\n        run: |\n          echo \"Building hosted app...\"\n          # Add build steps for hosted app\n\n      - name: Build Profile App\n        run: |\n          echo \"Building profile app...\"\n          # Add build steps for profile app\n\n      - name: Build Selfhosted App\n        run: |\n          echo \"Building selfhosted app...\"\n          # Add build steps for selfhosted app\n```", "answer": "```yaml name: Build Web\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build-main:\n    name: Build Web - MAIN\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: subosito/flutter-action@v1\n        with:\n          flutter-version: '3.3.0'\n          #channel: 'stable'\n      - name: Install Sentry\n        run: |\n          curl -sL https://sentry.io/get-cli/ | bash\n      - name: Setup Flutter\n        run: |\n          flutter doctor -v\n          flutter pub get\n          flutter config --enable-web\n      - name: Prepare App\n        run: |\n          cp lib/.env.dart.example lib/.env.dart\n          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n          flutter --version --machine >> lib/flutter_version.dart\n          echo \";\" >> lib/flutter_version.dart\n      - name: Build Hosted App\n        run: |\n          #export SENTRY_RELEASE=$(sentry-cli releases propose-version)\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} new $SENTRY_RELEASE --project ${{secrets.sentry_project}}\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} set-commits --auto $SENTRY_RELEASE\n\n          flutter build web --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE --source-maps\n\n          sed -i '/index.html/d' build/web/flutter_service_worker.js\n\n          git config --global user.email ${{secrets.commit_email}}\n          git config --global user.name ${{secrets.commit_name}}\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n          cd invoiceninja\n\n          git checkout v5-develop\n          cp -r ../build/web/* ./public/\n          rm ./public/index.html\n          git add .\n          git commit -m 'Admin Portal - Hosted'\n          git push\n          cd ..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext dart --rewrite\n          cd ./build/web\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext map --ext js --rewrite\n          cd ../..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} finalize $SENTRY_RELEASE\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} deploys $SENTRY_RELEASE new -e production          \n      - name: Build Profile App\n        run: |\n          flutter build web --profile\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_profile\n          cd invoiceninja_profile\n\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.profile.dart.js\n          git add .\n          git commit -m 'Admin Portal - Profile'\n          git push\n          cd ..      \n      - name: Build Selfhosted App\n        run: |\n          cp lib/utils/oauth.dart.foss lib/utils/oauth.dart\n          cp lib/utils/app_review.dart.foss lib/utils/app_review.dart\n          cp lib/ui/app/upgrade_dialog.dart.foss lib/ui/app/upgrade_dialog.dart\n          cp lib/ui/app/pinput.dart.foss lib/ui/app/pinput.dart\n          cp pubspec.foss.yaml pubspec.yaml \n          flutter pub get\n\n          flutter build web\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_foss\n          cd invoiceninja_foss\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.foss.dart.js\n          cp ../build/web/main.dart.js.map ./public/main.foss.dart.js.map\n          git add .\n          git commit -m 'Admin Portal - Selfhosted'\n          git push\n\n#  build-next:\n#    name: Build Web - NEXT\n#    needs: build-main\n#    env:\n#      commit_secret: ${{secrets.commit_secret}}\n#      commit_email: ${{secrets.commit_email}}\n#      commit_name: ${{secrets.commit_name}}\n#      api_secret: ${{secrets.api_secret}}\n#    runs-on: ubuntu-latest\n#    steps:\n#      - uses: actions/checkout@v1\n#      - uses: subosito/flutter-action@v1\n#        with:\n#          flutter-version: '3.3.0'\n#      - name: Setup Flutter\n#        run: |\n#          flutter doctor -v\n#          cp pubspec.next.yaml pubspec.yaml\n#          rm pubspec.lock\n#          flutter pub get\n#          flutter config --enable-web\n#      - name: Prepare App\n#        run: |\n#          cp lib/.env.dart.example lib/.env.dart\n#          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n#          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n#          flutter --version --machine >> lib/flutter_version.dart\n#          echo \";\" >> lib/flutter_version.dart\n#      - name: Build Hosted App\n#        run: |\n#          flutter build web\n#\n#          sed -i '/index.html/d' build/web/flutter_service_worker.js\n#\n#          git config --global user.email ${{secrets.commit_email}}\n#          git config --global user.name ${{secrets.commit_name}}\n#\n#          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n#          cd invoiceninja\n#\n#          git checkout v5-develop\n#          cp ../build/web/main.dart.js ./public/main.next.dart.js\n#          git add .\n#          git commit -m 'Admin Portal - Next'\n#          git push\n#          cd ..```"}
{"id": "63c499e4b008460c1df2a73d", "level": "level3", "llm_response": "```yaml\nname: Security\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - package.json\n  pull_request:\n    branches:\n      - main\n    paths:\n      - package.json\n  schedule:\n    - cron: '17 15 * * 1'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  audit-ci:\n    id: audit-ci\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: ~/.yarn\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n      - name: Install dependencies\n        run: yarn install\n      - name: Audit for vulnerabilities\n        run: yarn audit\n\n  trivy-scan-repo:\n    id: trivy-scan-repo\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          format: sarif\n          severity: HIGH,CRITICAL\n          exit-code: 1\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: trivy-report.sarif\n\n  codeql-analyze:\n    id: codeql-analyze\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: typescript\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: Security\n\non:\n  push:\n    branches: [main]\n    paths:\n      - \"package.json\"\n  pull_request:\n    paths:\n      - \"package.json\"\n  schedule:\n    # Runs every Monday morning PST\n    - cron: \"17 15 * * 1\"\n\n# Cancel in-progress runs for pull requests when developers push\n# additional changes, and serialize builds in branches.\n# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-concurrency-to-cancel-any-in-progress-job-or-run\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  audit-ci:\n    name: Audit node modules\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: \"**/node_modules\"\n          key: yarn-build-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            yarn-build-\n\n      - name: Install dependencies\n        if: steps.cache-yarn.outputs.cache-hit != 'true'\n        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile\n\n      - name: Audit for vulnerabilities\n        run: yarn _audit\n        if: success()\n\n  trivy-scan-repo:\n    name: Scan repo with Trivy\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          scan-type: \"fs\"\n          scan-ref: \".\"\n          ignore-unfixed: true\n          format: \"template\"\n          template: \"@/contrib/sarif.tpl\"\n          output: \"trivy-repo-results.sarif\"\n          severity: \"HIGH,CRITICAL\"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: \"trivy-repo-results.sarif\"\n\n  codeql-analyze:\n    permissions:\n      actions: read # for github/codeql-action/init to get workflow details\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/autobuild to send a status report\n    name: Analyze with CodeQL\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql-config.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f9a33b087f6bde6736e", "level": "level3", "llm_response": "```yaml\nname: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - name: Update to latest NPM version\n        run: npm install -g npm\n      - name: Install package dependencies\n        run: npm install\n      - name: Lint code\n        run: npm run lint\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - name: Update to latest NPM version\n        run: npm install -g npm\n      - name: Install package dependencies\n        run: npm install\n      - name: Test code\n        run: npm test\n\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - name: Update to latest NPM version\n        run: npm install -g npm\n      - name: Install package dependencies\n        run: npm install\n      - name: Semantic Release\n        run: npm run release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint --if-present\n\n  test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Test code\n        run: npm run test --if-present\n\n  publish:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main' }}\n    needs: [lint, test]\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Semantic Release\n        run: npx semantic-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c497a6cbc73931bb181c12", "level": "level3", "llm_response": "```yaml\nname: Nightly distribution\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        targets: [arm64, x86_64]\n        branch: [main, develop]\n        channel: [stable, beta]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v1\n\n    - name: Setup keychain\n      run: |\n        security create-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $HOME/Library/Keychains/swiftwasm.keychain\n        security set-keychain-settings -lut 3600 $HOME/Library/Keychains/swiftwasm.keychain\n        security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $HOME/Library/Keychains/swiftwasm.keychain\n        security import ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }} -P ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }} -A -t cert -k $HOME/Library/Keychains/swiftwasm.keychain\n        security import ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }} -P ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }} -A -t cert -k $HOME/Library/Keychains/swiftwasm.keychain\n        security set-key-partition-list -S apple-tool:,apple: -s -k ${{ secrets.KEYCHAIN_PASSWORD }} $HOME/Library/Keychains/swiftwasm.keychain\n\n    - name: Build and distribute\n      run: |\n        # Add your build and distribute commands here\n```", "answer": "```yaml name: Nightly distribution\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        include:\n          - branch: \"swiftwasm\"\n            channel: \"DEVELOPMENT\"\n#           targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.3\"\n            channel: \"5.3\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64\"\n          - branch: \"swiftwasm-release/5.4\"\n            channel: \"5.4\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.5\"\n            channel: \"5.5\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.6\"\n            channel: \"5.6\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.7\"\n            channel: \"5.7\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup keychain\n        run: |\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" swiftwasm-ci\n          KEYCHAIN=$HOME/Library/Keychains/swiftwasm-ci-db\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n          security set-keychain-settings -lut 7200 $KEYCHAIN\n          security default-keychain -s $KEYCHAIN\n\n          echo \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64\" | base64 --decode -o developerID_application.p12\n          security import developerID_application.p12 -P \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n          echo \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64\" | base64 --decode -o developerID_installer.p12\n          security import developerID_installer.p12 -P \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n\n          security set-key-partition-list -S \"apple-tool:,apple:\" -s -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n        env:\n          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }}\n\n      - run: ./utils/webassembly/distribute-latest-toolchain.sh ${{ matrix.branch }} ${{ matrix.channel }}\n        env:\n          TARGETS_TO_DIST: ${{ matrix.targets }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BUILDBOT_GITHUB_TOKEN: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_NOTARIZE_EMAIL: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_EMAIL }}\n          DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD }}\n          DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID }}\n```"}
{"id": "63c49d15517fc08c1eefabdb", "level": "level3", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ master, dev ]\n  pull_request:\n  schedule:\n    - cron: '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        type: [solc]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n\n    - name: Run Tests\n      run: |\n        pytest\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    # run CI every day even if no PRs/merges occur\n    - cron:  '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    strategy:\n      fail-fast: false\n      matrix:\n        type: [\"slither\", \"manticore\"]\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.8\n    - name: Install dependencies\n      run: |\n        sudo wget -O /usr/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux\n        sudo chmod +x /usr/bin/solc\n    - name: Run Tests\n      env:\n        TEST_TYPE: ${{ matrix.type }}\n      run: |\n        bash program-analysis/${TEST_TYPE}/scripts/gh_action_test.sh\n```"}
{"id": "63c49d70cbc73931bb1a70f8", "level": "level3", "llm_response": "```yaml\nname: Weekly Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 5'\n\njobs:\n  test:\n    id: test\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n        os: [ubuntu-latest, windows-latest, macos-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run pytest\n        run: pytest\n```", "answer": "```yaml name: Weekly Tests\r\n\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    # Runs every friday\r\n    - cron: \"0 0 * * 5\"\r\n\r\njobs:\r\n  test:\r\n    name: \"Python ${{ matrix.python-version }} on ${{ matrix.os }}\"\r\n    runs-on: ${{ matrix.os }}\r\n\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        os: [ubuntu-latest, macos-latest, windows-latest]\r\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\r\n\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n\r\n      - name: Set up Python ${{ matrix.python-version }}\r\n        uses: actions/setup-python@v4.3.0\r\n        with:\r\n          python-version: ${{ matrix.python-version }}\r\n\r\n      - name: Install dependencies\r\n        run: |\r\n          python -m pip install --upgrade pip\r\n          pip install -r requirements.txt -v\r\n\r\n      - name: Run pytest\r\n        run: python -m pytest\r\n```"}
{"id": "63c49a7e33b087f6bde45f85", "level": "level3", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n  pull_request_target:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0e9cbc73931bb1bd7aa", "level": "level3", "llm_response": "```yaml\nname: cancel-previous-workflows\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Cancel previous runs\n      uses: styfle/cancel-workflow-action@0.11.0\n      with:\n        access_token: ${{ github.token }}\n        workflow: '*'\n        cancel_in_progress: false\n```", "answer": "```yaml name: cancel-previous-workflows\n\non:\n  pull_request_target:\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous runs\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          workflow_id: all\n          all_but_latest: true\n```"}
{"id": "63c49c2e1842bc13d7781f8c", "level": "level3", "llm_response": "```yaml\nname: StandardRB\n\non:\n  pull_request:\n    branches: [ '*' ]\n  push:\n    branches: [ master ]\n\njobs:\n  standard:\n    id: standard\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n\n    - name: Run StandardRB\n      run: bundle exec standardrb\n```", "answer": "```yaml name: StandardRB\n\non:\n  pull_request:\n    branches:\n      - '*'\n  push:\n    branches:\n      - master\n\njobs:\n  standard:\n    name: StandardRB Check Action\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n        bundler-cache: true\n\n    - name: Run StandardRB\n      run: bundle exec standardrb --format progress\n```"}
{"id": "63c49bbd33b087f6bde4e115", "level": "level3", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      with:\n        name: crash-reports\n        path: crash-reports\n```", "answer": "```yaml # Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\nname: CIFuzz\non: [pull_request, push]\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure()\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"id": "63c49b6a1899db58864f3771", "level": "level3", "llm_response": "```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    id: pre-commit\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.9'\n\n      - name: Install dependencies\n        run: |\n          go mod download\n          go mod tidy\n          pip install pre-commit\n\n      - name: Run pre-commit checks\n        run: pre-commit run --all-files\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [master]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    # don't run this on the master branch\n    if: github.ref != 'refs/heads/master'\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.x'\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n          check-latest: true\n          cache: true\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y libdevmapper-dev libbtrfs-dev\n      - uses: pre-commit/action@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49edb33b087f6bde62769", "level": "level3", "llm_response": "```yaml\nname: Conform PR\n\non:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - edited\n      - reopened\n      - synchronize\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  conform-pr:\n    id: conform-pr\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Go\n        uses: FerretDB/github-actions/setup-go@main\n\n      - name: Conform PR\n        uses: FerretDB/github-actions/conform-pr@main\n        with:\n          token: ${{ secrets.CONFORM_TOKEN }}\n```", "answer": "```yaml ---\n# Attention! This workflow uses `pull_request_target` event that has access to secrets.\n# If you modify this workflow, make sure that you don't introduce dangerous steps.\n# See also: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/.\nname: Conform PR\non:\n  pull_request_target:\n    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target\n    # List all types to make it easier to enable new ones when they are needed.\n    types:\n      # - assigned\n      # - unassigned\n      - labeled\n      - unlabeled # if GitHub Actions stuck, add and remove \"no ci\" label to force rebuild\n      - opened\n      - edited\n      # - closed\n      - reopened\n      - synchronize\n      # - converted_to_draft\n      # - ready_for_review\n      # - locked\n      # - unlocked\n      # - review_requested\n      # - review_request_removed\n      # - auto_merge_enabled\n      # - auto_merge_disabled\n\n# Stop pending and in-progress jobs of this workflow.\n# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }} # GITHUB_TOKEN is not enough to query projects, so we use a special one\n\njobs:\n  conform-pr:\n    name: Conform PR\n    runs-on: ubuntu-20.04\n\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n\n    steps:\n      # Warning! Be careful about changing the steps here as it might cause some security problems\n      # (see the Attention block on the top of this file).\n      - name: Setup Go\n        uses: FerretDB/github-actions/setup-go@main\n        with:\n          cache-key: conform-pr\n\n      - name: Conform PR\n        uses: FerretDB/github-actions/conform-pr@main\n```"}
{"id": "63c499c86fc19abdf9cb1f2d", "level": "level3", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - v*\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Set env\n        run: echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV\n\n      - name: checkout code\n        uses: actions/checkout@v3\n\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 'latest'\n\n      - name: generate release artifacts\n        run: go build -o myapp\n\n      - name: generate release notes\n        run: echo \"Release notes for $RELEASE_TAG\" > RELEASE_NOTES.md\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: $RELEASE_TAG\n          name: Release $RELEASE_TAG\n          body: file://RELEASE_NOTES.md\n          files: myapp\n```", "answer": "```yaml name: release\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\npermissions:\n  contents: write # Allow to create a release.\n\njobs:\n  build:\n    name: create draft release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set env\n        run:  echo \"RELEASE_TAG=${GITHUB_REF:10}\" >> $GITHUB_ENV\n      - name: checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.19'\n      - name: generate release artifacts\n        run: |\n          make release\n      - name: generate release notes\n        run: |\n          make release-notes\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          draft: true\n          files: out/*\n          body_path: _releasenotes/${{ env.RELEASE_TAG }}.md\n```"}
{"id": "63c49b3d1842bc13d777c127", "level": "level3", "llm_response": "```yaml\nname: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - 'composer.json'\n      - 'spark'\n      - '**/*.php'\n      - '.github/workflows/test-autoreview.yml'\n  push:\n    paths:\n      - 'composer.json'\n      - 'spark'\n      - '**/*.php'\n      - '.github/workflows/test-autoreview.yml'\n\njobs:\n  auto-review-tests:\n    id: auto-review-tests\n    runs-on: ${{ runner.os }}\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.1'\n\n      - name: Get composer cache directory\n        id: composer-cache\n        run: echo \"::set-env name=COMPOSER_CACHE_FILES_DIR::$(composer config cache-files-dir)\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist --optimize-autoloader\n\n      - name: Run AutoReview Tests\n        run: composer run auto-review\n```", "answer": "```yaml name: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    name: Automatic Code Review\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: none\n\n      - name: Get composer cache directory\n        run: echo \"COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)\" >> $GITHUB_ENV\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer update --ansi\n        env:\n          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit --color=always --group=auto-review --no-coverage\n```"}
{"id": "63c49c8533b087f6bde535e2", "level": "level3", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [opened, synchronize]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: TagBot\n        uses: JuliaRegistries/TagBot@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49b3d1842bc13d777c123", "level": "level3", "llm_response": "```yaml\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - system/**\n      - .github/workflows/deploy-apidocs.yml\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup credentials\n        run: echo \"ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }}\" >> $GITHUB_ENV\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.ref }}\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.ref }}\n          path: target\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.1'\n\n      - name: Download latest phpDocumentor\n        run: composer require phpdocumentor/phpdocumentor --dev\n\n      - name: Prepare API repo\n        run: |\n          cd target\n          git config --global user.name $GITHUB_ACTOR\n          git config --global user.email $GITHUB_ACTOR@github.com\n\n      - name: Build API in source repo\n        run: |\n          cd source\n          vendor/bin/phpdocumentor run -o ./docs --force\n\n      - name: Deploy to API repo\n        run: |\n          cd target\n          git add docs\n          git commit -m \"Deploy API documentation for commit $GITHUB_SHA\"\n          git push origin $GITHUB_REF\n```", "answer": "```yaml # When changes are pushed to the develop branch,\n# build the current version of the API documentation\n# with phpDocumentor and deploy it to codeigniter4/api.\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - 'develop'\n    paths:\n      - 'system/**'\n      - '.github/workflows/deploy-apidocs.yml'\n\njobs:\n  build:\n    name: Deploy to api\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Setup credentials\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"${GITHUB_ACTOR}\"\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          repository: codeigniter4/api\n          token: ${{ secrets.ACCESS_TOKEN }}\n          path: api\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          tools: phive\n          coverage: none\n\n      - name: Download latest phpDocumentor\n        working-directory: source\n        run: sudo phive --no-progress install --global --trust-gpg-keys 67F861C3D889C656 phpDocumentor\n\n      - name: Prepare API repo\n        working-directory: api\n        run: |\n          git reset --hard master\n          rm -rfv docs\n          mkdir --parents --verbose docs\n\n      - name: Build API in source repo\n        working-directory: source\n        run: |\n          phpDocumentor run --ansi --verbose\n          cp -R ${GITHUB_WORKSPACE}/source/api/build/* ${GITHUB_WORKSPACE}/api/docs\n\n      - name: Deploy to API repo\n        working-directory: api\n        run: |\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Updated API for commit ${GITHUB_SHA}\"\n            git push origin master\n          fi\n```"}
{"id": "63c49993517fc08c1eee4989", "level": "level3", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches:\n      - master\n    tags: '*'\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 12 * * 6'\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Checkout HEAD on PR\n        if: github.event_name == 'pull_request'\n        run: git checkout ${{ github.event.pull_request.head.sha }}\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: codeql\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - 'master'\n  schedule:\n    - cron: '0 12 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n      -\n        name: Checkout HEAD on PR\n        if: ${{ github.event_name == 'pull_request' }}\n        run: |\n          git checkout HEAD^2\n      -\n        name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n      -\n        name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      -\n        name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c499f16fc19abdf9cb2f18", "level": "level3", "llm_response": "```yaml\nname: jenkins-illa-builder-main\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: ${{ secrets.JENKINS_URL }}\n          job: 'your-jenkins-job-name'\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n```", "answer": "```yaml name: jenkins-illa-builder-main\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: \"http://ec2-13-230-170-106.ap-northeast-1.compute.amazonaws.com:9000/\"\n          user: \"illasoft\"\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n          job: \"illa-builder-main\"\n```"}
{"id": "63c49926b008460c1df25d1c", "level": "level3", "llm_response": "```yaml\nname: PR Check - Packaging: Config and input\n\non:\n  push:\n    branches:\n      - main\n      - releases/v1\n      - releases/v2\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n  workflow_dispatch:\n\njobs:\n  packaging-config-inputs-js:\n    id: packaging-config-inputs-js\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Prepare test\n        id: prepare-test\n        run: ./.github/prepare-test\n\n      - name: Initialize action\n        uses: ./../action/init\n        with:\n          version: ${{ matrix.version }}\n\n      - name: Analyze code\n        uses: ./../action/analyze\n        with:\n          tools-url: ${{ steps.prepare-test.outputs.tools-url }}\n\n      - name: Check results\n        id: check-results\n        uses: ./../action/.github/check-sarif\n        with:\n          sarif-file: ${{ runner.temp }}/results.sarif\n\n      - name: Assert Results\n        run: |\n          if [ ${{ steps.check-results.outputs.passed }} -eq 0 ]; then\n            echo \"Test failed!\"\n            exit 1\n          else\n            echo \"Test passed!\"\n            exit 0\n          fi\n```", "answer": "```yaml # Warning: This file is generated automatically, and should not be modified.\n# Instead, please modify the template in the pr-checks directory and run:\n#     pip install ruamel.yaml && python3 sync.py\n# to regenerate this file.\n\nname: 'PR Check - Packaging: Config and input'\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\non:\n  push:\n    branches:\n    - main\n    - releases/v1\n    - releases/v2\n  pull_request:\n    types:\n    - opened\n    - synchronize\n    - reopened\n    - ready_for_review\n  workflow_dispatch: {}\njobs:\n  packaging-config-inputs-js:\n    strategy:\n      matrix:\n        include:\n        - os: ubuntu-latest\n          version: latest\n        - os: macos-latest\n          version: latest\n        - os: windows-2019\n          version: latest\n        - os: windows-2022\n          version: latest\n        - os: ubuntu-latest\n          version: cached\n        - os: macos-latest\n          version: cached\n        - os: windows-2019\n          version: cached\n        - os: ubuntu-latest\n          version: nightly-latest\n        - os: macos-latest\n          version: nightly-latest\n        - os: windows-2019\n          version: nightly-latest\n        - os: windows-2022\n          version: nightly-latest\n    name: 'Packaging: Config and input'\n    timeout-minutes: 45\n    runs-on: ${{ matrix.os }}\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n    - name: Prepare test\n      id: prepare-test\n      uses: ./.github/prepare-test\n      with:\n        version: ${{ matrix.version }}\n    - uses: ./../action/init\n      with:\n        config-file: .github/codeql/codeql-config-packaging3.yml\n        packs: +dsp-testing/codeql-pack1@1.0.0\n        languages: javascript\n        tools: ${{ steps.prepare-test.outputs.tools-url }}\n      env:\n        TEST_MODE: true\n    - name: Build code\n      shell: bash\n      run: ./build.sh\n    - uses: ./../action/analyze\n      with:\n        output: ${{ runner.temp }}/results\n      env:\n        TEST_MODE: true\n\n    - name: Check results\n      uses: ./../action/.github/check-sarif\n      with:\n        sarif-file: ${{ runner.temp }}/results/javascript.sarif\n        queries-run: javascript/example/empty-or-one-block,javascript/example/empty-or-one-block,javascript/example/other-query-block,javascript/example/two-block\n        queries-not-run: foo,bar\n\n    - name: Assert Results\n      shell: bash\n      run: |\n        cd \"$RUNNER_TEMP/results\"\n        # We should have 4 hits from these rules\n        EXPECTED_RULES=\"javascript/example/empty-or-one-block javascript/example/empty-or-one-block javascript/example/other-query-block javascript/example/two-block\"\n\n        # use tr to replace newlines with spaces and xargs to trim leading and trailing whitespace\n        RULES=\"$(cat javascript.sarif | jq -r '.runs[0].results[].ruleId' | sort | tr \"\\n\\r\" \" \" | xargs)\"\n        echo \"Found matching rules '$RULES'\"\n        if [ \"$RULES\" != \"$EXPECTED_RULES\" ]; then\n          echo \"Did not match expected rules '$EXPECTED_RULES'.\"\n          exit 1\n        fi\n    env:\n      INTERNAL_CODEQL_ACTION_DEBUG_LOC: true\n```"}
{"id": "63c49c4dcbc73931bb19fc2f", "level": "level3", "llm_response": "```yaml\nname: Build and test\n\non:\n  push:\n    branches:\n      - '*'\n\njobs:\n  build-all-versions:\n    runs-on: ${{ runner.os }}\n    strategy:\n      matrix:\n        spark: [3.1.2, 3.2.1]\n        scala: [2.12.14, 2.13.6]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'adopt'\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: build\n```", "answer": "```yaml name: Build and test\n\non:\n  push:\n    branches: '*'\n#  pull_request:\n#    branches: '*'\n\njobs:\n  build-all-versions:\n    strategy:\n      matrix:\n        scala: [ \"2.12.16\", \"2.13.8\" ]\n        spark: [ \"3.3.0\", \"3.2.1\", \"3.2.0\", \"3.1.3\", \"3.1.2\", \"3.1.1\", \"3.1.0\", \"3.0.3\", \"3.0.2\", \"3.0.1\", \"3.0.0\" ]\n        exclude:\n          - scala: \"2.13.8\"\n            spark: \"3.1.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.0\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.0\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n          check-latest: true\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.gradle/jdks\n          key: ${{ runner.os }}-gradle-spark-${{ matrix.spark }}-${{ matrix.scala }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: |\n            -Pspark=${{ matrix.spark }}\n            -Pscala=${{ matrix.scala }}\n            clean\n            test\n            --scan\n\n  #  qodana:\n  #    runs-on: ubuntu-latest\n  #    steps:\n  #      - uses: actions/checkout@v3\n  #      - name: 'Qodana Scan'\n  #        uses: JetBrains/qodana-action@v5.0.2\n\n\n\n# vim: ts=2:sts=2:sw=2:expandtab\n```"}
{"id": "63c496b21899db58864d49a8", "level": "level3", "llm_response": "```yaml\nname: Code Coverage\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Set up Java\n      uses: actions/setup-java@v3\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Set up Gradle\n      uses: gradle/gradle-build-action@v2\n      with:\n        gradle-version: 7.0.2\n\n    - name: Run Tests\n      run: ./gradlew test\n\n    - name: Run Test Coverage\n      run: ./gradlew jacocoTestReport\n\n    - name: Publish Coverage\n      uses: codecov/codecov-action@v2\n      with:\n        token: ${{ secrets.COVERALLS_REPO_TOKEN }}\n        flags: unittests\n        name: codecov-umbrella\n        file: build/reports/jacoco/test/html/index.html\n        file_format: html\n        flags: unittests\n        name: codecov-umbrella\n```", "answer": "```yaml name: Code Coverage\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n\n      - name: Set up Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Run Tests\n        run: ./gradlew test -x checkLicenseMain -x checkLicenses -x spotlessCheck -x spotlessApply -Pjacoco\n        continue-on-error: true\n\n      - name: Run Test Coverage\n        run: ./gradlew testCodeCoverageReport -Pjacoco\n\n      - name: Publish Coverage\n        env:\n          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n        run: ./gradlew coverallsJacoco -Pjacoco\n```"}
{"id": "63c497091e3364807577e6aa", "level": "level3", "llm_response": "```yaml\nname: Build\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    branches:\n      - main\n      - dev\n    paths-ignore:\n      - 'docs/docs/**'\n\njobs:\n  build:\n    id: build\n    runs-on: ${{ runner.os }}\n\n    steps:\n    - name: check out code \ud83d\udece\n      uses: actions/checkout@v3\n\n    - name: Install Node v18\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n\n    - name: Cache node modules\n      id: cache-npm\n      uses: actions/cache@v3\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: List the state of node modules\n      run: ls -la node_modules\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run prettier\n      run: npx prettier --check .\n\n    - name: Run ESLint\n      run: npx eslint .\n\n    - name: Build\n      run: npm run build\n\n    - name: Run Tests\n      run: npm test\n```", "answer": "```yaml name: Build\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    paths-ignore:\n      - \"docs/docs/**\"\n    branches:\n      - main\n      - dev\n\njobs:\n  build:\n    name: Build Monorepo\n    runs-on: ubuntu-latest\n    steps:\n      - name: check out code \ud83d\udece\n        uses: actions/checkout@v3\n\n      - name: Install Node v18\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"18.x\"\n          registry-url: \"https://registry.npmjs.org\"\n\n      - name: Cache node modules\n        id: cache-npm\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          # npm cache files are stored in `~/.npm` on Linux/macOS\n          path: ~/.npm\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-\n      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}\n        name: List the state of node modules\n        continue-on-error: true\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run prettier\n        run: npm run format-check\n\n      - name: Run ESLint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run Tests\n        run: npm run test\n```"}
{"id": "63c497ddb008460c1df1d95d", "level": "level3", "llm_response": "```yaml\nname: Remove old artifacts\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Remove old artifacts\n        uses: c-hive/gha-remove-artifacts@v1.2.0\n```", "answer": "```yaml name: Remove old artifacts\n\non:\n  schedule:\n    # Every day at 1am\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n    - name: Remove old artifacts\n      uses: c-hive/gha-remove-artifacts@v1.2.0\n      with:\n        age: '1 month'\n        skip-tags: true\n        skip-recent: 3\n```"}
{"id": "63c496d51899db58864d5867", "level": "level3", "llm_response": "```yaml\nname: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    id: set_done_for_closed_issued\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Login\n      uses: atlassian/gajira-login@master\n      with:\n        base-url: ${{ secrets.JIRA_BASE_URL }}\n        user-email: ${{ secrets.JIRA_USER_EMAIL }}\n        api-token: ${{ secrets.JIRA_API_TOKEN }}\n\n    - name: Find comment with ticket number\n      id: comment\n      uses: peter-evans/find-comment@v1\n      with:\n        issue-number: ${{ github.event.issue.number }}\n        body: \"JIRA ticket\"\n\n    - name: Get ticket number\n      id: ticket\n      uses: atlassian/gajira-find-issue-key@master\n      with:\n        base-url: ${{ secrets.JIRA_BASE_URL }}\n        user-email: ${{ secrets.JIRA_USER_EMAIL }}\n        api-token: ${{ secrets.JIRA_API_TOKEN }}\n        issue-id: ${{ steps.comment.outputs.comment-body }}\n\n    - name: Close\n      uses: atlassian/gajira-transition@master\n      with:\n        base-url: ${{ secrets.JIRA_BASE_URL }}\n        user-email: ${{ secrets.JIRA_USER_EMAIL }}\n        api-token: ${{ secrets.JIRA_API_TOKEN }}\n        issue-key: ${{ steps.ticket.outputs.issue }}\n        transition-id: \"7\"\n```", "answer": "```yaml name: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    name: Set JIRA ticket to DONE\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login\n        uses: atlassian/gajira-login@master\n        env:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n\n      - name: Find comment with ticket number\n        uses: peter-evans/find-comment@v1\n        id: comment\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body-includes: Internal ticket number is FE-\n\n      - name: Get ticket number\n        id: ticket\n        uses: atlassian/gajira-find-issue-key@master\n        with:\n          string: ${{ steps.comment.outputs.comment-body }}\n\n      - name: Close\n        uses: atlassian/gajira-transition@master\n        with:\n          issue: ${{ steps.ticket.outputs.issue }}\n          transition: 'DONE'\n```"}
{"id": "63c494a17843b61269a0272b", "level": "level3", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Update Package.swift.json\n        run: echo \"Update package.json\"\n      - name: Install dependencies\n        run: echo \"Install dependencies\"\n      - name: Build project\n        run: echo \"Build project\"\n      - name: Build and Push Docker Images\n        uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n        run: echo \"Build and push Docker images\"\n\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Azure CLI\n        uses: azure/login@v1\n        with:\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\n      - name: Set up AKS context\n        uses: azure/aks-set-context@v3\n        with:\n          cluster-name: ${{ env.CLUSTER_NAME }}\n          resource-group: ${{ env.RESOURCE_GROUP }}\n      - name: Deploy to AKS\n        run: echo \"Deploy to AKS\"\n      - name: Deploy\n        run: echo \"Deploy\"\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Purge Cache\n        run: echo \"Purge cache\"\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Test\n        run: echo \"Run tests\"\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Update Package.swift.json\n        run: |\n          set -ex\n\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          git pull --rebase origin master\n\n          tempdir=$(mktemp -d)\n          filename=\"Package.swift\"\n          curl -sfL -o \"$tempdir/$filename\" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename\n          sed -i 's/swift-tools-version:5.5/swift-tools-version:5.4/g' \"$tempdir/Package.swift\"\n          swift package --package-path \"$tempdir\" dump-package > Resources/$filename.json\n\n          git add Resources/$filename.json\n          git diff-index --quiet HEAD || git commit -m \"Update $filename.json\"\n          git push origin master\n\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n\n      - name: Build and Push Docker Images\n        run: |\n          set -ex\n\n          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.RESOURCE_GROUP }}/${{ env.SERVICE_NAME }}:latest\n\n          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .\n          docker push ${IMAGE_TAG}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: azure/setup-kubectl@v3\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/aks-set-context@v3\n        with:\n          resource-group: ${{ env.RESOURCE_GROUP }}\n          cluster-name: ${{ env.CLUSTER_NAME }}\n\n      - name: Deploy\n        run: |\n          set -ex\n\n          sed \"s/%COMMIT_SHA%/${{ github.sha }}/g;\" \"k8s/pod_template.yaml\" | kubectl apply -f -\n\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }}\n          kubectl get services -o wide\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n        run: |\n          curl -X POST \"https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache\" \\\n            -H \"X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}\" \\\n            -H \"X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"purge_everything\":true}'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test\n        run: |\n          set -ex\n\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"latest\"}'\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"stable\"}'\n\n          versions=$(curl --silent -X GET \"https://swiftfiddle.com/versions\" -H \"Content-Type:application/json\")\n          len=$(echo $versions | jq length)\n          for i in $( seq 0 $(($len - 1)) ); do\n            version=$(echo $versions | jq .[$i])\n            curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n              -H \"Content-Type:application/json\" \\\n              --data \"{\\\"code\\\":\\\"print(\\\\\\\"Hello, World!\\\\\\\")\\\",\\\"toolchain_version\\\":$version}\"\n          done\n```"}
{"id": "63c497fb517fc08c1eeda8d8", "level": "level3", "llm_response": "```yaml\nname: Support Requests\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    id: action\n    runs-on: ubuntu-latest\n    steps:\n      - name:dessant/support-requests@v2\n        with:\n          token: ${{ github.token }}\n```", "answer": "```yaml name: 'Support Requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'support'\n          issue-comment: >\n            \ud83d\udc4b We use the issue tracker exclusively for bug reports and feature requests.\n            However, this issue appears to be a support request. Please use our\n            [support channels](https://github.com/kivy/kivy-ios/blob/master/README.md#support)\n            to get help with the project.\n            \n            \n            If you're having trouble installing or using kivy-ios,\n            maybe you could be interested to [installation and requirements](https://github.com/kivy/kivy-ios/blob/master/README.md#installation--requirements).\n            \n            \n            Let us know if this comment was made in error, and we'll be happy\n            to reopen the issue.\n          close-issue: true\n          lock-issue: false```"}
{"id": "63c49e0d1899db58865040a6", "level": "level3", "llm_response": "```yaml\nname: pull-request-lint\n\non:\n  pull_request:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check PR title\n        uses: amannn/action-semantic-pull-request@v3.4.6\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # ~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\".\n\nname: pull-request-lint\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\njobs:\n  validate:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: amannn/action-semantic-pull-request@v3.4.6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |-\n            feat\n            fix\n            chore\n          requireScope: false\n```"}
{"id": "63c497c61899db58864dbc6a", "level": "level3", "llm_response": "```yaml\nname: Manage the hold label\n\non:\n  workflow_dispatch:\n    inputs:\n      command:\n        description: 'Command to execute (hold-command or unhold-command)'\n        required: true\n        type: string\n\njobs:\n  hold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.command == 'hold-command'\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: ${{ secrets.CI_TOKEN }}\n          labels: 'hold'\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          github_token: ${{ secrets.CI_TOKEN }}\n          issue_number: ${{ github.event.client_payload.github.payload.issue.number }}\n          comment_id: ${{ github.event.client_payload.github.payload.comment.id }}\n          body: 'Hold label has been added to the issue.'\n\n  unhold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.command == 'unhold-command'\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: ${{ secrets.CI_TOKEN }}\n          labels: 'hold'\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          github_token: ${{ secrets.CI_TOKEN }}\n          issue_number: ${{ github.event.client_payload.github.payload.issue.number }}\n          comment_id: ${{ github.event.client_payload.github.payload.comment.id }}\n          body: 'Hold label has been removed from the issue.'\n```", "answer": "```yaml name: Manage the hold label\non:\n  repository_dispatch:\n    types:\n      - hold-command\n      - unhold-command\n\njobs:\n  hold:\n    name: Add hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'hold-command'\n\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n\n  unhold:\n    name: Remove the hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'unhold-command'\n\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n```"}
{"id": "63c5ae9f6b748c7b1fadf422", "level": "level3", "llm_response": "```yaml\nname: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Run with tmate debugging'\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  zsh:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install molecule ansible\n\n      - name: Run Molecule\n        run: |\n          molecule test --debug if ${{ inputs.debug }}\n```", "answer": "```yaml name: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```"}
{"id": "63c49742517fc08c1eed5bcf", "level": "level3", "llm_response": "```yaml\nname: Lint Format\n\non:\n  push:\n    branches:\n      - master\n      - develop\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Disable automatic eol conversion\n        run: |\n          git config --global core.autocrlf false\n\n      - name: Install dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y build-essential\n\n      - name: Run qmk formatters\n        run: |\n          make qmk-format\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.QMK_BOT_TOKEN }}\n          commit-message: \"chore: format code\"\n          title: \"Auto-format code\"\n          body: \"This PR was automatically created to format the code using qmk formatters.\"\n          branch: ${{ env.GITHUB_REF_SLUG }}\n```", "answer": "```yaml name: Lint Format\n\non:\n  push:\n    branches:\n    - master\n    - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    container: qmkfm/qmk_cli\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Disable automatic eol conversion\n      run: |\n        echo \"* -text\" > .git/info/attributes\n\n    - name: Install dependencies\n      run: |\n        pip3 install -r requirements-dev.txt\n\n    - name: Run qmk formatters\n      shell: 'bash {0}'\n      run: |\n        qmk format-c -a\n        qmk format-python -a\n        qmk format-text -a\n        git diff\n\n    - uses: rlespinasse/github-slug-action@v3.x\n\n    - name: Become QMK Bot\n      run: |\n        git config user.name 'QMK Bot'\n        git config user.email 'hello@qmk.fm'\n\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      if: ${{ github.repository == 'qmk/qmk_firmware'}}\n      with:\n        token: ${{ secrets.QMK_BOT_TOKEN }}\n        delete-branch: true\n        branch: bugfix/format_${{ env.GITHUB_REF_SLUG }}\n        author: QMK Bot <hello@qmk.fm>\n        committer: QMK Bot <hello@qmk.fm>\n        commit-message: Format code according to conventions\n        title: '[CI] Format code according to conventions'\n```"}
{"id": "63c49ae81899db58864f05dc", "level": "level3", "llm_response": "```yaml\nname: Web-Ext lint\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: web-ext lint\n        uses: kewisch/action-web-ext@v1\n```", "answer": "```yaml name: Web-Ext lint\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: \"Lint\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: \"web-ext lint\"\n        uses: kewisch/action-web-ext@v1\n        with:\n          cmd: lint\n          source: src\n          channel: listed\n```"}
{"id": "63c49ea41842bc13d7792231", "level": "level3", "llm_response": "```yaml\nname: Require PR Labels\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  pull_request_target:\n    types: [opened, synchronize, reopened]\n  pull_request_review:\n    types: [submitted, edited, deleted]\n  pull_request_review_comment:\n    types: [created, edited, deleted]\n  label:\n    types: [created, deleted]\n\njobs:\n  check-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Require PR Labels\n        uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n        with:\n          required_labels: \"bug, enhancement, documentation\"\n```", "answer": "```yaml name: Require PR Labels\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  check-labels:\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```"}
{"id": "63c49a4033b087f6bde447f3", "level": "level3", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7\n        with:\n          ruby-version: '2.7'\n\n      - name: Run tests\n        run: bundle exec rake test\n\n      - name: Deploy to Heroku\n        uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820\n        with:\n          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}\n          heroku_app_name: your-heroku-app-name\n          heroku_email: your-email@example.com\n```", "answer": "```yaml name: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy to Heroku\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n    steps:\n    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # tag=v2.5.0\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7 # tag=v1.118.0\n      with:\n        bundler-cache: true # runs 'bundle install' and caches installed gems automatically\n    - name: Run tests\n      run: bundle exec rake\n    - name: Deploy to Heroku\n      uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820 # tag=v3.12.12\n      with:\n        heroku_api_key: ${{secrets.HEROKU_API_KEY}}\n        heroku_app_name: \"devdocs\"\n        heroku_email: \"team@freecodecamp.com\"\n        dontuseforce: true # --force should never be necessary\n        dontautocreate: true # The app exists, it should not be created\n```"}
{"id": "63c49f576fc19abdf9cd5856", "level": "level3", "llm_response": "```yaml\nname: Move new issues to correct docs repo\n\non:\n  issues:\n    types: [opened, transferred, reopened]\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    id: transfer_issue\n    steps:\n      - name: Move to correct repo\n        id: move_to_correct_repo\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const issue = github.context.payload.issue;\n            const repo = issue.repository;\n            const org = repo.owner.login;\n            const repoName = repo.name;\n\n            if (repoName === 'engineering' && issue.state === 'open') {\n              const newRepoName = 'content';\n              const newRepo = {\n                owner: org,\n                repo: newRepoName\n              };\n\n              await github.rest.issues.transfer({\n                owner: org,\n                repo: repoName,\n                issue_number: issue.number,\n                new_owner: newRepo.owner,\n                new_repo: newRepo.repo\n              });\n            }\n```", "answer": "```yaml name: Move new issues to correct docs repo\n\n# **What it does**: If anyone creates an issue in the docs-internal repo for the engineering team or the content team, move that issue and notify the author\n# **Why we have it**: We don't want engineering or content issues in the docs-internal repo\n# **Who does it impact**: GitHub staff.\n\non:\n  issues:\n    types:\n      - opened\n      - transferred\n      - reopened\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.repository == 'github/docs-internal'\n    steps:\n      - id: move_to_correct_repo\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        env:\n          TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}\n          TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}\n        with:\n          github-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n          script: |\n            const issueNo = context.issue.number\n            const owner = 'github'\n            const originalRepo = 'docs-internal'\n\n            // See if the engineering label is present.\n            const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')\n\n            // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo\n            let correctRepo = process.env.TEAM_CONTENT_REPO\n            if (engineeringLabel) {\n              correctRepo = process.env.TEAM_ENGINEERING_REPO\n            }\n\n            const correctRepoObject = await github.repos.get({\n              owner: owner,\n              repo: correctRepo\n            })\n\n            // Post a comment in the docs-internal issue\n            await github.issues.createComment({\n              owner: owner,\n              repo: originalRepo,\n              issue_number: issueNo,\n              body: `\ud83d\udc4b  You opened this issue in '${context.repo.repo}'. Moving forward, we're asking that folks create new issues in the following repositories instead:\\n- For issues with the docs site, please submit to the [${process.env.TEAM_ENGINEERING_REPO}](/${owner}/${process.env.TEAM_ENGINEERING_REPO}) repo.\\n- For all new content issues, please submit to the [${process.env.TEAM_CONTENT_REPO}](/${owner}/${process.env.TEAM_CONTENT_REPO}) repo.\\n\\nWe will transfer this issue for you!`\n            })\n\n            // Transfer the issue to the correct repo\n            const issueNodeId = context.payload.issue.node_id\n            const correctRepositoryNodeId = correctRepoObject.data.node_id\n            console.log(`Issue GraphQL Node ID: ${issueNodeId}`)\n            console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)\n\n            const mutation = `mutation ($id: ID!, $repositoryId: ID!) {\n              transferIssue(input: {\n                issueId: $id,\n                repositoryId: $repositoryId\n              }) {\n                issue {\n                  url,\n                  number\n                }\n              }\n            }`\n\n            const variables = {\n              id: issueNodeId,\n              repositoryId: correctRepositoryNodeId\n            }\n\n            const graph = await github.graphql(mutation, variables)\n            console.log('GraphQL mutation result:\\n' + JSON.stringify(graph))\n\n            // Add the same labels to the new issue\n            const newIssueNumber = graph.transferIssue.issue.number\n            await github.issues.addLabels({\n              owner: owner,\n              repo: correctRepo,\n              issue_number: newIssueNumber,\n              labels: context.payload.issue.labels.map(label => label.name),\n            })\n```"}
{"id": "63c4a057cbc73931bb1b9c62", "level": "level3", "llm_response": "```yaml\nname: close stale issues/PRs\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close stale issues and PRs\n        uses: actions/stale@v2\n        with:\n          days-before-stale: 90\n          stale-issue-message: 'This issue has been open for over 90 days and has not received any activity. Please let us know if you are still encountering this issue or if there is anything we can help you with.'\n          stale-pr-message: 'This pull request has been open for over 90 days and has not received any activity. Please let us know if you are still working on this PR or if there is anything we can help you with.'\n          stale-issue-label: 'stale'\n          stale-pr-label: 'stale'\n          days-before-close: 15\n          close-issue-message: 'This issue has been closed because it has been marked as stale and has not received any activity for over 15 days.'\n          close-pr-message: 'This pull request has been closed because it has been marked as stale and has not received any activity for over 15 days.'\n          close-issue-label: 'closed'\n          close-pr-label: 'closed'\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"close stale issues/PRs\"\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label:\n          close-pr-message: \"\"\n```"}
{"id": "63c49f61736e7f0ed8c6df4d", "level": "level3", "llm_response": "```yaml\nname: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n\n      - name: Install\n        run: npm install\n\n      - name: Update Code in Sandpack\n        run: npm run update-code\n\n      - name: Update Version in Sandpack\n        run: npm run update-version\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: 'Update Sandpack'\n          body: 'Automated update of Sandpack code and version'\n          branch: 'update-sandpack'\n          commit-message: 'chore: update Sandpack'\n```", "answer": "```yaml name: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    name: Update Sandpack\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # To run comparison we need more than the latest commit. Keep the fetch-depth relatively\n          # high or set it to zero to get all commits from the git repo.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 150\n \n      - name: Install\n        run: yarn add -D plop@3.1.1\n \n      - name: Update Code in Sandpack\n        run: yarn gen:code\n        \n      - name: Update Version in Sandpack\n        run: yarn gen:v\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: 'Version Sandpack'\n          body: |\n            Update Sandpack dependencies. Check the preview before merging.\n          commit-message: docs\n          committer: GitHub <noreply@github.com>\n          branch: docs/sandpack\n          delete-branch: true\n```"}
{"id": "63c495927843b61269a087ec", "level": "level3", "llm_response": "```yaml\nname: update changelog\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Run update changelog script\n        run: |\n          composer require laravel/forge\n          php artisan forge:changelog\n```", "answer": "```yaml name: update changelog\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```"}
{"id": "63c498c3cbc73931bb1892bc", "level": "level3", "llm_response": "```yaml\nname: Push to BitBucket\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n```", "answer": "```yaml name: \"Push to BitBucket\"\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: \"0\"\n          ref: \"master\"\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          name: id_rsa\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n\n      - run: |\n          git remote add bitbucket git@bitbucket.org:DmitryKrutskikh/dart-code-metrics.git\n          git config --global user.email \"dmitry.krutskikh@gmail.com\"\n          git config --global user.name \"Dmitry Krutskikh\"\n          git checkout master\n          git push -u bitbucket master\n```"}
{"id": "63c4994933b087f6bde3e523", "level": "level3", "llm_response": "```yaml\nname: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n\n    - name: Install pip for rosdep\n      run: sudo apt-get update && sudo apt-get install -y python3-pip\n\n    - name: Register AutonomouStuff repository\n      uses: autowarefoundation/autoware-github-actions/register-autonomoustuff-repository@v1\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Set git config\n      uses: autowarefoundation/autoware-github-actions/set-git-config@v1\n      with:\n        email: \"github-actions[bot]@users.noreply.github.com\"\n        name: \"GitHub Actions\"\n\n    - name: Run vcs import\n      run: vcs import src < repository-url\n\n    - name: Run vcs export\n      run: vcs export src < repository-url\n\n    - name: Run rosdep install\n      run: rosdep install -r src --from-paths src --ignore-src -y\n```", "answer": "```yaml name: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n    container: ros:galactic\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Install pip for rosdep\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install python3-pip\n\n      - name: Register AutonomouStuff repository\n        uses: autowarefoundation/autoware-github-actions/register-autonomoustuff-repository@v1\n        with:\n          rosdistro: galactic\n\n      - name: Set git config\n        uses: autowarefoundation/autoware-github-actions/set-git-config@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Run vcs import\n        run: |\n          mkdir src\n          vcs import src < autoware.repos\n\n      - name: Run vcs export\n        run: |\n          vcs export --exact src || true\n\n      - name: Run rosdep install\n        run: |\n          sudo apt-get -y update\n          rosdep update\n          DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro galactic\n```"}
{"id": "63c495778052faa2781b1fcd", "level": "level3", "llm_response": "```yaml\nname: Autolocker\n\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  autolock:\n    id: autolock\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |\n          if (context.payload.pull_request.merged) {\n            github.rest.pulls.update({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              pull_number: context.payload.pull_request.number,\n              state: 'closed',\n              locked: true\n            });\n          }\n```", "answer": "```yaml name: Autolocker\n\non:\n  pull_request_target:\n    types: [closed]\n\npermissions: write-all\n\njobs:\n  autolock:\n#     if: ${{ github.event.pull_request.merged }} # Uncomment if you want it to run only when a PR gets MERGED\n    runs-on: ubuntu-latest\n    name: Autolocker\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |     \n            github.rest.issues.lock({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              lock_reason: \"resolved\" // [\"off-topic\", \"too heated\", \"resolved\", \"spam\"]\n            })\n```"}
{"id": "63c49fbe517fc08c1ef0b986", "level": "level3", "llm_response": "```yaml\nname: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ${{ runner.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          url: 'http://localhost:8080'\n          output: json\n          path: lighthouse-report.json\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Run tests\n        run: npm test\n\n      - name: Summary\n        uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const lighthouseReport = require('./lighthouse-report.json');\n            const failingUrls = lighthouseReport.audits['performance'].details.items.filter(item => item.score < 0.9).map(item => item.url);\n            if (failingUrls.length > 0) {\n              github.context.payload.pull_request.review_requests.add({\n                reviewers: [\n                  { login: 'audit-bot' }\n                ]\n              });\n            }\n```", "answer": "```yaml name: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://stopcovid19.metro.tokyo.lg.jp/\n            https://stopcovid19-tokyo-staging.web.app/\n          uploadArtifacts: true\n\n      - name: Use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.13.0'\n      - run: npm install -g csv2md\n\n      # https://stedolan.github.io/jq/manual/\n      # https://shields.io/\n      - name: Summary\n        run: |\n          export LH_SUMMARY_FILE=\"${GITHUB_WORKSPACE}/.lighthouseci/result.md\"\n          echo \"LH_SUMMARY_FILE=${LH_SUMMARY_FILE}\" >> $GITHUB_ENV\n          cat \"${GITHUB_WORKSPACE}/.lighthouseci/\"lhr-*.json \\\n          | jq -rs 'def formatScore(s):\n              \"https://img.shields.io\" as $baseUrl |\n              \"logo=lighthouse&logoColor=lightgray\" as $query |\n              if s == null then \"![-1](\\($baseUrl)/badge/\\(\"?\" | @uri)-error-inactive?\\($query))\"\n                elif s < 0.5 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-red-critical?\\($query))\"\n                elif s < 0.9 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-orange-important?\\($query))\"\n                else \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-green-success?\\($query))\"\n              end;\n              [\"Metrics\", \"Score\", \"URL\"], ( [.[] | .requestedUrl as $url | .categories[] | {\n                metrics: .title,\n                score: formatScore(.score),\n                url: $url\n              } ] | sort_by(.metrics) | .[] | [.metrics, .score, .url] ) | @csv' \\\n          | csv2md | tee \"${LH_SUMMARY_FILE}\"\n\n      - uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs')\n            const table = fs.readFileSync(process.env.LH_SUMMARY_FILE, 'utf8')\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `<h4>Audit&nbsp;<a\n                  href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\"\n                  target=\"_blank\"><sup>[?]</sup></a></h4>\\n\\n${table}\\n\\n`.trim()\n            })\n```"}
{"id": "63c4982f6fc19abdf9ca783f", "level": "level3", "llm_response": "```yaml\nname: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n\ninputs:\n  name-this:\n    description: 'Build and publish an fbpcf/aws-s3-core image for a particular version'\n    required: false\n    default: 'Run'\n  aws_release:\n    description: 'The aws s3 version to build and publish'\n    required: true\n    type: string\n  os:\n    description: 'Which os to use. Currently only supports ubuntu'\n    required: false\n    default: 'ubuntu'\n    type: string\n  os_release:\n    description: 'The os version to use (e.g. 20.04 for ubuntu)'\n    required: false\n    default: '20.04'\n    type: string\n\njobs:\n  ubuntu:\n    runs-on: ${{ inputs.os }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Log into registry ${{ env.REGISTRY }}\n      uses: docker/login-action@v1\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    - name: Build image\n      run: docker build -t fbpcf/aws-s3-core:${{ inputs.aws_release }} .\n    - name: Tag image\n      run: docker tag fbpcf/aws-s3-core:${{ inputs.aws_release }} ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}\n    - name: Publish image\n      run: docker push ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}\n```", "answer": "```yaml name: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/aws-s3-core image for a particular version\"\n        default: \"Run\"\n      aws_release:\n        description: \"The aws s3 version to build and publish (e.g. 1.8.177)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg aws_release=${{ github.event.inputs.aws_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\" \\\n          -f \"docker/aws-s3-core/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core\n```"}
{"id": "63c49f326fc19abdf9cd4900", "level": "level3", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  test:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v1\n\n    - name: Test\n      run: |\n        # Add your PowerShell test commands here\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    name: Run Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n    - uses: actions/checkout@v1\n    - name: Test\n      shell: pwsh\n      run: ./build.ps1 -Task Test -Bootstrap\n```"}
{"id": "63c49dbd1842bc13d778c451", "level": "level3", "llm_response": "```yaml\nname: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - web/po/*.po\n      - backend/po/*.po\n      - susemanager/po/*.po\n      - spacecmd/po/*.po\n      - java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml\n      - client/rhel/yum-rhn-plugin/po/*.po\n      - client/rhel/mgr-daemon/po/*.po\n      - client/rhel/spacewalk-client-tools/po/*.po\n\njobs:\n  run:\n    id: run\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          access_token: ${{ github.token }}\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Setup tooling\n        run: |\n          # Add steps to setup tooling here\n\n      - name: Setup git\n        run: |\n          git config --global user.name \"GitHub Actions\"\n          git config --global user.email \"actions@github.com\"\n\n      - name: Align translations files\n        run: |\n          # Add steps to align translation files here\n\n      - name: Push changes\n        run: |\n          git add .\n          git commit -m \"Update translation files\"\n          git push origin master-weblate\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n```", "answer": "```yaml name: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n run:\n   name: Update translation files\n   if: github.repository == 'uyuni-project/uyuni'\n   runs-on: ubuntu-latest\n   steps:\n   - name: Cancel Previous Runs\n     uses: styfle/cancel-workflow-action@0.10.0\n     with:\n         access_token: ${{ github.token }}\n\n   - name: Checkout repo\n     uses: actions/checkout@v3\n     with:\n       token: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Setup tooling\n     run: sudo apt-get install -y make git gettext intltool python3\n\n   - name: Setup git\n     run: |\n       git config --global user.name \"Galaxy CI\"\n       git config --global user.email \"galaxy-ci@suse.de\"\n\n   - name: Align translations files\n     run: scripts/translation/update-all-translation-strings.sh\n     env:\n       ADDITIONAL_SAFE_BRANCHNAME: master\n       GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Push changes\n     run: git push origin HEAD\n```"}
{"id": "63c49e1a1842bc13d778e9d5", "level": "level3", "llm_response": "```yaml\nname: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    id: unit-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/gallium\n      - name: Install dependencies\n        run: npm install\n      - name: Run unit test\n        run: npm test\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n\n  browser-test:\n    id: browser-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/gallium\n      - name: Install dependencies\n        run: npm install\n      - name: Run browser test\n        run: npm run test:browser\n\n  performance-test:\n    id: performance-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/gallium\n      - name: Install dependencies\n        run: npm install\n      - name: Run performance test\n        run: npm run test:performance\n```", "answer": "```yaml name: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run unit test\n        run: yarn test:unit\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run browser test\n        run: yarn test:browser\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run performance test\n        run: yarn test:performance\n```"}
{"id": "63c49c8c517fc08c1eef7305", "level": "level3", "llm_response": "```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Auto-merge Dependabot PRs\n      uses: ahmadnassri/action-dependabot-auto-merge@v2\n      with:\n        github_token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          target: minor\n          github-token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```"}
{"id": "63c49cd01e336480757a3424", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [go]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push: {}\n  pull_request: {}\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49bd9517fc08c1eef2fa7", "level": "level3", "llm_response": "```yaml\nname: Spell Check\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 8 * * 2'\n  workflow_dispatch:\n  repository_dispatch:\n    types: [spellcheck]\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: Spell check\n      uses: codespell-project/actions-codespell@master\n```", "answer": "```yaml name: Spell Check\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch new misspelling detections resulting from dictionary updates.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Spell check\n        uses: codespell-project/actions-codespell@master\n```"}
{"id": "63c4995a6fc19abdf9caf222", "level": "level3", "llm_response": "```yaml\nname: Update MagiskOnWSA\n\non:\n  schedule:\n    - cron: '0 0 * * 4'\n  workflow_dispatch:\n\npermissions:\n  actions: write\n  contents: write\n\njobs:\n  update:\n    id: update\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: |\n          git tag -m \"New tag\" new-tag\n          git tag -d old-tag\n          git push origin new-tag --force\n          git push origin :old-tag\n      - name: Delete tag\n        run: |\n          git push origin :old-tag\n      - name: Update MagiskOnWSA\n        run: |\n          # Update MagiskOnWSA logic here\n      - name: Publish release\n        run: |\n          # Publish release logic here\n      - name: Delete release\n        run: |\n          # Delete release logic here\n```", "answer": "```yaml name: Update MagiskOnWSA\non:\n  schedule:\n    - cron: \"0 0 * * 4\"\n  workflow_dispatch:\n\npermissions:\n    actions: write\n    contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"tag_name\":\"outdated\"}' > /dev/null\n      - name: Delete tag\n        run: |\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest\n      - name: Update MagiskOnWSA\n        run: |\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          sleep 15m\n      - name: Publish release\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"prerelease\":false}' > /dev/null\n      - name: Delete release\n        run: |\n          ID=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/outdated | jq -r .id)\"\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/$ID\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/outdated\n```"}
{"id": "63c4a1401899db5886518aff", "level": "level3", "llm_response": "```yaml\nname: Call commitlint\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run commitlint\n        uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```", "answer": "```yaml name: Call commitlint\non:\n  pull_request_target:\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c495f37843b61269a0b106", "level": "level3", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: initialize\n      uses: github/codeql-action/init@v2\n\n    - name: autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: analyze\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # Broadly based on example Github action from\n# https://github.com/github/codeql-action#usage\nname: codeql\n# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#permissions\n# https://github.com/github/codeql-action/issues/572\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\non:\n  push:\n    branches:\n      - main\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: initialize\n        if: success()\n        uses: github/codeql-action/init@v2\n        with:\n          # Limit analysis to Go for now.\n          # Available languages: https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\n          languages: go\n      - name: autobuild\n        if: success()\n        uses: github/codeql-action/autobuild@v2\n      - name: analyze\n        if: success()\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f98cbc73931bb1b4f54", "level": "level3", "llm_response": "```yaml\nname: Sync To Gitee\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n  delete:\n    branches: [ '*' ]\n  create:\n    branches: [ '*' ]\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Sync to Gitee\n      uses: wearerequired/git-mirror-action@master\n      with:\n        private_key: ${{ secrets.GITEE_PRIVATE_KEY }}\n        remote: https://gitee.com/your-repo.git\n```", "answer": "```yaml name: Sync To Gitee  #\u540d\u5b57  \u53ef\u81ea\u5b9a\u4e49\non: [ push, delete, create ]  #\u89e6\u53d1\u6761\u4ef6   page_build\u8868\u793aGithub Page\u90e8\u7f72\u5b8c\u6210\u540e\u89e6\u53d1\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master #\u5f00\u6e90actions\u5305\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n        with:\n          source-repo: \"git@github.com:redleafnew/Chinese-STD-GB-T-7714-related-csl.git\" # github\u4ed3\u5e93\u5730\u5740\n          destination-repo: \"git@gitee.com:redleafnew00/Chinese-STD-GB-T-7714-related-csl.git\" # gitee\u4ed3\u5e93\u5730\u5740\n\n```"}
{"id": "63c4a0edcbc73931bb1bd96d", "level": "level3", "llm_response": "```yaml\nname: Unplugin Example\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  gh-pages:\n    id: gh-pages\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n\n      - name: Setup\n        run: |\n          npm install -g npm@latest\n          npm config set registry https://registry.npmjs.org/\n\n      - name: Install\n        run: npm install\n\n      - name: Build\n        run: npm run build\n\n      - name: Install Example Dependencies & Build\n        run: |\n          cd example\n          npm install\n          npm run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: Unplugin Example\n\non:\n  push:\n    branches: [main]\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Setup\n        run: npm i -g @antfu/ni\n\n      - name: Install\n        run: nci\n\n      - name: Build\n        run: nr build\n\n      - name: Install Example Dependencies & Build\n        run: pnpm -C examples/vite run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./examples/vite/dist\n          force_orphan: true\n```"}
{"id": "63c499bf1899db58864e8a2a", "level": "level3", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Label pull requests\n        uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a2db008460c1df2c5c9", "level": "level3", "llm_response": "```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Dispatch build flow\n      uses: peter-evans/repository-dispatch@v2\n      with:\n        token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n        repository: ${{ github.repository }}\n        event_type: build-flow\n        client_payload:\n          ref: ${{ github.ref }}\n          sha: ${{ github.sha }}\n```", "answer": "```yaml name: Release\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Trigger Build flow\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n          repository: ${{ github.repository }}\n          event-type: release\n          client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\n```"}
{"id": "63c498731899db58864e00b5", "level": "level4", "llm_response": "```yaml\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows: [build-ci]\n    types: [completed]\n    branches:\n      - main\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: true\n\njobs:\n  k3s:\n    id: k3s\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call reusable workflow for k3s\n        uses: ./.github/workflows/master-e2e.yaml\n        with:\n          cluster_name: cluster-k3s\n          dashboard_version: latest\n          k8s_version_to_provision: v1.24.4+k3s1\n          rancher_channel: stable\n          rancher_version: latest\n          runner: elemental-e2e-ci-runner-spot-x86-64-2\n          start_condition: ${{ github.event.workflow_run.conclusion }}\n          test_type: cli\n          zone: us-central1-a\n          workflow_download: ${{ github.event.workflow_run.workflow_id }}\n        secrets:\n          credentials: ${{ secrets.GCP_CREDENTIALS }}\n\n  rke2:\n    id: rke2\n    runs-on: ubuntu-latest\n    needs: k3s\n    if: always()\n    steps:\n      - name: Call reusable workflow for rke2\n        uses: ./.github/workflows/master-e2e.yaml\n        with:\n          cluster_name: cluster-rke2\n          dashboard_version: latest\n          k8s_version_to_provision: v1.24.4+rke2r1\n          rancher_channel: stable\n          rancher_version: latest\n          runner: elemental-e2e-ci-runner-spot-x86-64-2\n          start_condition: ${{ github.event.workflow_run.conclusion }}\n          test_type: cli\n          zone: us-central1-a\n          workflow_download: ${{ github.event.workflow_run.workflow_id }}\n        secrets:\n          credentials: ${{ secrets.GCP_CREDENTIALS }}\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"id": "63c4a04733b087f6bde6b930", "level": "level4", "llm_response": "```yaml\nname: Coding Style\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [clone]\n\njobs:\n  nette_cc:\n    id: nette_cc\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n      - name: Run Nette Code Checker\n        run: vendor/bin/nette code-checker\n      - name: Upload code coverage\n        uses: codecov/codecov-action@v2\n\n  nette_cs:\n    id: nette_cs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n      - name: Run Nette Coding Standard\n        run: vendor/bin/nette coding-standard\n      - name: Upload code coverage\n        uses: codecov/codecov-action@v2\n```", "answer": "```yaml name: Coding Style\n\non: [push, pull_request]\n\njobs:\n    nette_cc:\n        name: Nette Code Checker\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n            - run: php temp/code-checker/code-checker --strict-types --no-progress\n\n\n    nette_cs:\n        name: Nette Coding Standard\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n            - run: php temp/coding-standard/ecs check\n```"}
{"id": "63c4a0eeb008460c1df57100", "level": "level4", "llm_response": "```yaml\nname: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\n      - docs/**\n      - Gemfile\n      - README.md\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      - name: Cancel previous run in progress\n        run: |\n          if [ -n \"$GITHUB_REF\" ]; then\n            gh run cancel --ref $GITHUB_REF\n          fi\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Extract branch name\n        id: extract_branch\n        run: echo \"::set-output name=branch::$(git branch --show-current)\"\n      - name: Extract commit SHA\n        id: extract_commit_sha\n        run: echo \"::set-output name=commit_sha::$(git rev-parse HEAD)\"\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Log in to registry\n        run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n      - name: Build and push\n        run: |\n          docker build -t ghcr.io/${{ github.repository }}:latest .\n          docker push ghcr.io/${{ github.repository }}:latest\n```", "answer": "```yaml name: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'nginx/**'\n      - 'Dockerfiles/nginx.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n      - '_config.yml'\n      - '_includes/**'\n      - '_layouts/**'\n      - 'docs/**'\n      - 'Gemfile'\n      - 'README.md'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Extract commit SHA\n        shell: bash\n        run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n        id: extract_commit_sha\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/nginx.Dockerfile\n          build-args: |\n            VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }}\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```"}
{"id": "63c4989d1842bc13d776b5a5", "level": "level4", "llm_response": "```yaml\nname: Publish release\n\non:\n  release:\n    types: [published, prereleased, created]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK 1.11\n      uses: actions/setup-java@v2\n      with:\n        java-version: 1.11\n        distribution: 'adopt'\n\n    - name: Build with Maven\n      run: mvn clean package\n\n    - name: Upload release artifact\n      uses: actions/upload-release-asset@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        upload_url: ${{ github.event.release.upload_url }}\n        asset_path: target/*.jar\n        asset_name: my-java-app.jar\n        asset_content_type: application/java-archive\n```", "answer": "```yaml name: Publish release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build and upload release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Set up JDK 1.11\n        uses: actions/setup-java@v2.3.0\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          check-latest: true\n          cache: 'maven'\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n      - name: Upload release artifact\n        uses: shogo82148/actions-upload-release-asset@v1.3.1\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```"}
{"id": "63c498be6fc19abdf9cab2ce", "level": "level4", "llm_response": "```yaml\nname: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.composer\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-composer-\n      - name: Install dependencies\n      - name: Checking for sign off (GPG also accepted)\n      - name: Checking file integrity\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1]\n    steps:\n      - name: Checkout code\n      - name: Setup PHP ${{ matrix.php }}\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.composer\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-composer-\n      - name: Install dependencies\n      - name: Lint PHP files\n```", "answer": "```yaml name: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - run: php -v\n\n    - name: Checking for sign off (GPG also accepted)\n      run: php ./vendor/simplemachines/build-tools/check-signed-off.php\n\n    - name: Checking file integrity\n      run: |\n        php ./vendor/simplemachines/build-tools/check-eof.php\n        php ./vendor/simplemachines/build-tools/check-smf-license.php\n        php ./vendor/simplemachines/build-tools/check-smf-languages.php\n        php ./vendor/simplemachines/build-tools/check-version.php\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [ 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1 ]\n\n    name: PHP ${{ matrix.php }} Syntax Check\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Setup PHP ${{ matrix.php }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - name: Lint PHP files\n      run: vendor/bin/phplint -w --exclude .git --exclude vendor --ansi .\n```"}
{"id": "63c49f746fc19abdf9cd63e6", "level": "level4", "llm_response": "```yaml\nname: hygieia-pr\n\non:\n  pull_request:\n    paths:\n      - 'hygieia/**'\n      - '.github/workflows/hygieia-pr.yaml'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      context: hygieia\n      image_name: hygieia\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build image\n        run: docker build -t ${{ env.image_name }}:${{ github.sha }} .\n```", "answer": "```yaml ---\nname: hygieia-pr\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\njobs:\n  build:\n    env:\n      context: hygieia\n      image_name: hygieia\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49f38736e7f0ed8c6ce43", "level": "level4", "llm_response": "```yaml\nname: Platform OWASP ZAP\n\non:\n  push:\n    branches:\n      - dev\n    paths-ignore:\n      - .github/**\n      - docs/**\n      - build/**\n      - README.md\n      - LICENSE\n      - **/argoDeploy.json\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install VirtoCommerce.GlobalTool\n      run: dotnet tool install -g VirtoCommerce.GlobalTool\n\n    - name: Docker Login\n      run: echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n\n    - name: Docker Env\n      run: echo \"export DOCKER_IMAGE=${{ github.repository }}:${{ github.sha }}\" >> $GITHUB_ENV\n\n    - name: OWASP ZAP Full Scan\n      run: virto owasp zap full\n```", "answer": "```yaml # v1.2\nname: Platform OWASP ZAP\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - 'docs/**'\n      - 'build/**'\n      - 'README.md'\n      - 'LICENSE'\n      - '**/argoDeploy.json'\n    branches: [ dev ]\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: Install VirtoCommerce.GlobalTool\n        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n\n      - name: Docker Login\n        uses: azure/docker-login@v1\n        with:\n          login-server: ghcr.io\n          username: $GITHUB_ACTOR\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker Env\n        uses: VirtoCommerce/vc-github-actions/docker-env@master\n        with:\n          githubUser: ${{ env.GITHUB_ACTOR }}\n          githubToken: ${{ env.GITHUB_TOKEN }}\n          platformImage: ghcr.io/virtocommerce/platform\n          storefrontImage: ghcr.io/virtocommerce/storefront\n          validateSwagger: 'false'\n\n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-baseline@v0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          docker_name: 'owasp/zap2docker-stable'\n          target: 'http://localhost:8090'\n          cmd_options: '-a -d'\n```"}
{"id": "63c4955b8052faa2781b1498", "level": "level4", "llm_response": "```yaml\nname: CI v2\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: [1.16]\n\n    steps:\n      - name: Setup\n        run: echo \"Setting up the environment\"\n\n      - name: Prerequisites\n        run: echo \"Installing prerequisites\"\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Dependencies\n        run: go mod download\n\n      - name: Lint\n        run: go vet ./...\n\n      - name: Vet\n        run: go vet ./...\n\n      - name: Test\n        run: go test -v ./...\n\n      - name: Coverage\n        run: go test -coverprofile=coverage.out ./... && go tool cover -html=coverage.out -o coverage.html\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```"}
{"id": "63c49fe533b087f6bde69242", "level": "level4", "llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greet\n```", "answer": "```yaml name: Greetings\n\non: [pull_request_target, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: \"Thanks for reporting this issue, don't forget to star this project if you haven't already to help us reach a wider audience.\"\n          pr-message: \"Thanks for implementing a fix, could you ensure that the test covers your changes if applicable.\"\n```"}
{"id": "63c49ff0736e7f0ed8c7162c", "level": "level4", "llm_response": "```yaml\nname: Main Workflow\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches: \n      - '*'\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    id: tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10, 3.11]\n        operating-system: [ubuntu-latest]\n    \n    env:\n      POETRY_VERSION: 1.2.2\n    \n    steps:\n      - name: Install unrar\n      - name: Set up Python ${{ matrix.python-version }}\n        id: setup-python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: cache poetry install\n      - name: Load cached venv\n        id: cached-poetry-dependencies\n        run: |\n          if [ -f .venv ]; then\n            echo \"::set-output name=venv-path::$(pwd)/.venv\"\n          else\n            echo \"::set-output name=venv-path::$(pwd)/.venv\"\n          fi\n      - name: Install dependencies\n      - name: Install project\n      - name: Test with pytest\n```", "answer": "```yaml name: Main Workflow\n\non:\n  push:\n    branches:\n    - develop\n  pull_request:\n    branches:\n    - \"*\"\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Run Tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n        operating-system: [ubuntu-latest] # TODO: Fix a couple tests and enable windows. windows-latest\n      fail-fast: false\n    env:\n      POETRY_VERSION: \"1.2.2\"\n    steps:\n    - uses: actions/checkout@v3\n    # Can we cache the apt-get stuff somehow?\n    - name: Install unrar  # used by some flexget tests\n      if: matrix.operating-system == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -qy unrar\n    # There is some poetry caching built in to setup-python, but there seems to be some confusion\n    # about whether it works well when using a matrix of different python versions. Doing caching\n    # manually for now, until there is more info.\n    - name: Set up Python ${{ matrix.python-version }}\n      id: setup-python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache poetry install\n      uses: actions/cache@v3\n      with:\n        path: ~/.local\n        key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0  # increment last number to reset cache\n    - uses: snok/install-poetry@v1\n      with:\n        version: ${{ env.POETRY_VERSION }}\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n    - name: Install dependencies\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n      run: poetry install --no-interaction --no-root\n    - name: Install project\n      run: poetry install --no-interaction\n    - name: Test with pytest\n      run: |\n        poetry run pytest -n auto\n```"}
{"id": "63c4977fcbc73931bb180c41", "level": "level4", "llm_response": "```yaml\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark-this:\n        description: 'Benchmark to run'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Build\n      run: ./mvnw clean install\n\n    - name: Benchmark\n      run: ./mvnw bench -Dbenchmark=${{ github.event.inputs.benchmark-this }}\n\n    - name: Upload Result\n      uses: actions/upload-artifact@v2\n      with:\n        name: benchmark-results\n        path: target/benchmark-results\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark:\n        description: 'benchmark'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: ./dev/make-distribution.sh -Pspark-3.2 && rm -rf /home/hadoop/celeborn-toolkit/dist/* && mv celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/\n\n      - name: Benchmark\n        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark\n\n      - name: Upload Result\n        uses: actions/upload-artifact@v3\n        with:\n          name: benchmark result\n          path: /home/hadoop/celeborn-toolkit/result/```"}
{"id": "63c49f1e1e336480757b1d5b", "level": "level4", "llm_response": "```yaml\nname: Code scanning - action\n\non:\n  push:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  schedule:\n    - cron: '0 14 * * 4'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code scanning - action\"\n\non:\n  push:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  pull_request:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  schedule:\n    - cron: \"0 14 * * 4\"\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f8eb008460c1df4e97d", "level": "level4", "llm_response": "```yaml\nname: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install build dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel twine\n\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish\n        run: twine upload dist/*\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install GitPython cloudevents\n\n      - name: Create Tag\n        run: git tag v1.0.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - name: Install build dependencies\n        run: pip install -U setuptools wheel build\n      - name: Build\n        run: python -m build .\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install -U -r requirements/publish.txt\n      - name: Create Tag\n        run: python pypi_packaging.py\n```"}
{"id": "63c4990d33b087f6bde3cce0", "level": "level4", "llm_response": "```yaml\nname: Test C\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/workflows/test-lang-c.yml\n      - lang/c/**\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    concurrency: ${{ github.workflow }}-${{ github.ref }}\n    steps:\n      - name: ''\n      - name: Install Dependencies\n      - name: Lint\n      - name: Test\n      - name: Cache Local Maven Repository\n      - name: Install Java Avro for Interop Test\n      - name: Create Interop Data Directory\n      - name: Generate Interop Resources\n      - name: Generate Interop Data\n      - name: Run Interop Tests\n\n  interop:\n    runs-on: ubuntu-latest\n    concurrency: ${{ github.workflow }}-${{ github.ref }}\n    steps:\n      - name: ''\n      - name: Install Dependencies\n      - name: Cache Local Maven Repository\n      - name: Install Java Avro for Interop Test\n      - name: Create Interop Data Directory\n      - name: Generate Interop Resources\n      - name: Generate Interop Data\n      - name: Run Interop Tests\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - .github/workflows/test-lang-c.yml\n    - lang/c/**\n\ndefaults:\n  run:\n    working-directory: lang/c\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy libjansson-dev libsnappy-dev\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                            libjansson-dev \\\n                                                            liblzma-dev \\\n                                                            libsnappy-dev \\\n                                                            libzstd-dev\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n```"}
{"id": "63c4a0571842bc13d779cf83", "level": "level4", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n          config-name: notes.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c49c4a1842bc13d7782abd", "level": "level4", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Release Draft\n        uses: release-drafter/release-drafter@v5\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n#         (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n         config-name: config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}```"}
{"id": "63c499511899db58864e5d14", "level": "level4", "llm_response": "```yaml\nname: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Triage Issue Comment\n        run: |\n          # Add your triage logic here\n          echo \"Issue comment created, triaging...\"\n```", "answer": "```yaml name: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          labels: |\n            stale\n            waiting-reply\n```"}
{"id": "63c4a08333b087f6bde6d0fe", "level": "level4", "llm_response": "```yaml\nname: Semantic Pull Request\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n  pull_request_target:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n\n    permissions:\n      pull-requests: read\n      statuses: write\n\n    steps:\n    - name: Validate PR title\n      run: echo \"Validating PR title...\"\n```", "answer": "```yaml name: Semantic Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions: {}\njobs:\n  main:\n    permissions:\n      pull-requests: read # to analyze PRs (amannn/action-semantic-pull-request)\n      statuses: write # to mark status of analyzed PR (amannn/action-semantic-pull-request)\n\n    runs-on: ubuntu-latest\n    name: Semantic Pull Request\n    steps:\n      - name: Validate PR title\n        uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |\n            feat\n            fix\n            chore\n            refactor\n            docs\n            test\n            ci\n            build\n            infra\n            revert\n```"}
{"id": "63c4a0e71e336480757bcf80", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [javascript, python]\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Autobuild\n        run: |\n          if [ ${{ matrix.language }} == \"javascript\" ]; then\n            npm install\n            npm run build\n          elif [ ${{ matrix.language }} == \"python\" ]; then\n            pip install -r requirements.txt\n            python setup.py build\n          fi\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e3533b087f6bde5e450", "level": "level4", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Mark stale issues and pull requests\n        run: |\n          gh issue list --state open --label \"stale\" --json number --jq '.[].number' | xargs -I {} gh issue edit {} --state closed --comment \"This issue has been marked as stale because it has not had recent activity. It will be closed if no further action is taken within the next 7 days.\"\n          gh pr list --state open --label \"stale\" --json number --jq '.[].number' | xargs -I {} gh pr edit {} --state closed --comment \"This pull request has been marked as stale because it has not had recent activity. It will be closed if no further action is taken within the next 7 days.\"\n```", "answer": "```yaml # SPDX-License-Identifier: Apache-2.0\n# Copyright 2019 Intel Corporation\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-pr-message: 'This pull request has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-issue-label: 'stale/issue'\n        stale-pr-label: 'stale/pr'\n        days-before-stale: 30\n        days-before-close: 5\n```"}
{"id": "63c49be0517fc08c1eef3298", "level": "level4", "llm_response": "```yaml\nname: Example Integration on Pull Request\n\non:\n  pull_request:\n    branches:\n      - main\n    types: [closed]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    id: build\n    steps:\n      - name: Plant a Tree\n        id: planttree\n        run: echo \"Planting a tree...\"\n      - name: Response of digitalhumani.com RaaS API\n        run: echo \"Getting response from digitalhumani.com RaaS API...\"\n```", "answer": "```yaml name: Example Integration on Pull Request\non: \n  pull_request_target:\n    branches:\n      - main\n    types:\n      - closed\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Plant a Tree\n        if: github.event.pull_request.merged == true\n        id: planttree\n        uses: protontypes/continuous-reforestation@main\n        with:\n        # Enter your API variables below\n            apikey: ${{ secrets.raaskey }}\n            enterpriseid: \"cd7cedcd\"\n            user: ${{ github.actor }}\n            treecount: 5\n            projectid: \"14442771\" # This projectid can be used to have your trees planted where they are needed the most.\n            production: \"false\"\n\n      - name: Response of digitalhumani.com RaaS API\n        run: |\n            echo \"${{ steps.planttree.outputs.response }}\"\n            echo \"${{ steps.planttree.outputs.plantedTrees }}\"\n```"}
{"id": "63c49dc31842bc13d778c6ac", "level": "level4", "llm_response": "```yaml\nname: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches:\n      - main\n  issues:\n    types: [opened]\n  comment:\n    types: [created]\n  pull_request:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: |\n          # Add your step 1 commands here\n      - name: Step 2\n        run: |\n          # Add your step 2 commands here\n```", "answer": "```yaml name: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches: [main]\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Hey friend! Thanks for opening this issue. We appreciate your contribution and welcome you to our community! We are glad to have you here and to have your input on the Azure Arc Jumpstart.'\n          pr-message: 'Hi friend! Thanks you for opening this Pull Request. Someone will review it soon. Thank you for committing to making the Azure Arc Jumpstart better.'\n```"}
{"id": "63c49e961842bc13d7791c8a", "level": "level4", "llm_response": "```yaml\nname: Publish\n\non:\n  draft:\n    types: [saved]\n  release:\n    types: [published]\n  pull_request:\n    types: [closed]\n    branches:\n      - main\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Publish to npm\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [created]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: npm\n      - run: npm ci\n      - run: npm test\n      - run: npm version ${TAG_NAME} --git-tag-version=false\n        env:\n          TAG_NAME: ${{ github.event.release.tag_name }}\n      - run: npm whoami; npm --ignore-scripts publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```"}
{"id": "63c49b631d1c0d6c2d08006a", "level": "level4", "llm_response": "```yaml\nname: CI Bot\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_review_comment:\n    types: [created]\n\nenv:\n  PLUGINS: assign auto-cc cc label-kind label-bug label-documentation label-enhancement label-question\n  MEMBERS_PLUGINS: label-duplicate label-good-first-issue label-help-wanted label-invalid label-kind label-wontfix lifecycle\n  REVIEWERS_PLUGINS: retitle\n  APPROVERS_PLUGINS: merge\n  MAINTAINERS_PLUGINS: milestone\n  OWNERS_PLUGINS: \n  REVIEWERS: pacoxu wzshiming\n  APPROVERS: pacoxu wzshiming\n  MAINTAINERS: pacoxu wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\n\njobs:\n  issue_opened:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'issues'\n    steps:\n      - name: Step 1\n\n  pr_opened:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    steps:\n      - name: Step 1\n\n  issue_commented:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'issue_comment' && !github.event.issue.pull_request\n    steps:\n      - name: Step 1\n\n  pr_review_commented:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request_review_comment'\n    steps:\n      - name: Step 1\n\n  pr_commented:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'issue_comment' && github.event.issue.pull_request\n    steps:\n      - name: Step 1\n```", "answer": "```yaml name: CI Bot\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_review_comment:\n    types:\n      - created\n  issues:\n    types:\n      - opened\n  pull_request:\n    types:\n      - opened\n\nenv:\n  # This plugins is for anyone who can use it\n  PLUGINS: |-\n    assign\n    auto-cc\n    cc\n    label-kind\n    label-bug\n    label-documentation\n    label-enhancement\n    label-question\n  \n  # This plugins is for organization member or repository member\n  MEMBERS_PLUGINS: |-\n    label-duplicate\n    label-good-first-issue\n    label-help-wanted\n    label-invalid\n    label-kind\n    label-wontfix\n    lifecycle\n  \n  # This plugins is for in the REVIEWERS environment variable\n  REVIEWERS_PLUGINS: |-\n    retitle\n  # This plugins is for in the APPROVERS environment variable\n  APPROVERS_PLUGINS: |-\n    merge\n  # This plugins is for in the MAINTAINERS environment variable\n  MAINTAINERS_PLUGINS: |-\n    milestone\n  # This plugins is for organization owner or repository owner\n  OWNERS_PLUGINS: \"\"\n\n  REVIEWERS: |-\n    pacoxu\n    wzshiming\n  APPROVERS: |-\n    pacoxu\n    wzshiming\n  MAINTAINERS: |-\n    pacoxu\n    wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |-\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\njobs:\n\n  issue_opened:\n    name: Issue Opened\n    if: ${{ github.event_name == 'issues' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.issue.user.login }}\n          MESSAGE: ${{ github.event.issue.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.issue.author_association }}\n          ISSUE_KIND: issue\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.issue.user.login }},\n            Thanks for opening an issue!\n            We will look into it as soon as possible.\n  pr_opened:\n    name: PR Opened\n    if: ${{ github.event_name == 'pull_request' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.pull_request.user.login }}\n          MESSAGE: ${{ github.event.pull_request.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}\n          ISSUE_KIND: pr\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.pull_request.user.login }},\n            Thanks for your pull request!\n            If the PR is ready, use the `/auto-cc` command to assign Reviewer to Review. \n            We will review it shortly.\n  issue_commented:\n    name: Issue Commented\n    if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: issue\n          TYPE: comment\n\n  pr_review_commented:\n    name: PR Review Commented\n    if: ${{ github.event_name == 'pull_request_review_comment' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n\n  pr_commented:\n    name: PR Commented\n    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n```"}
{"id": "63c5ae896b748c7b1fadef81", "level": "level4", "llm_response": "```yaml\nname: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n  pull_request:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets:\n      special_case_secrets: inherit\n```", "answer": "```yaml name: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n  pull_request:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n\njobs:\n  build:\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets: inherit\n```"}
{"id": "63c4a0981899db5886514a5b", "level": "level4", "llm_response": "```yaml\nname: [RUN] Discord new release announcement\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  push-announcement:\n    id: push-announcement\n    runs-on: ubuntu-latest\n\n    env:\n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n\n    steps:\n    - name: CURL Discord API with announcement\n      run: |\n        curl -X POST $WEBHOOK_URL -H \"Content-Type: application/json\" -d '{\"content\": \"New release is out! Check it out on GitHub: [Release URL]\"}'\n```", "answer": "```yaml name: '[RUN] Discord new release announcement'\n   \non:\n  release:\n    types: [released]\n\njobs:\n  push-announcement:\n    name: Pushing release announcement to Discord\n    runs-on: ubuntu-latest\n    env:      \n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n    steps:\n    - name: CURL Discord API with announcement\n      shell: bash\n      run: |\n        CHANGELOG=$(curl -s https://api.github.com/repos/nethermindeth/nethermind/releases | jq '.[0].body' | grep -Po '(?<=## )(.*?)(?=\\##)')\n        read VERSION LINK < <(echo $(curl -s 'https://api.github.com/repos/nethermindeth/nethermind/releases' | jq -r '.[0].name, .[0].html_url'))\n        MESSAGE=\"**New Nethermind release version: ${VERSION}**\\n\\n${CHANGELOG}<${LINK}>\"\n        curl -s -H \"Content-Type: application/json\" -d '{\"username\": \"Nethermind\", \"content\": \"'\"$MESSAGE\"'\"}' $WEBHOOK_URL > /dev/null 2>&1```"}
{"id": "63c49e9a1899db5886507bf7", "level": "level4", "llm_response": "```yaml\nname: vpinball-gl\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  repository_dispatch:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n\njobs:\n  dxsdk:\n    id: dxsdk\n    runs-on: windows-latest\n    steps:\n      - name: Cache\n        id: cache\n      - name: Create Cache\n\n  version:\n    id: version\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n      - name: Step 2\n        id: version\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n\n  build:\n    id: build\n    runs-on: windows-latest\n    needs: [dxsdk, version]\n    strategy:\n      matrix:\n        config: [Release, Debug]\n        platform: [gl-win-x64, gl-win-x86]\n        platform-name: [x64, Win32]\n        bass: [x64/Bass64.dll, Bass.dll]\n        free-image: [x64/FreeImage64.dll, FreeImage.dll]\n        sci-lexer-vp: [x64/SciLexerVP64.dll, SciLexerVP.dll]\n        sdl2-ttf: [x64/SDL2_ttf.dll, SDL2_ttf.dll]\n        sdl2: [x64/SDL2.dll, SDL2.dll]\n        openvr-api: [x64/openvr_api.dll, openvr_api.dll]\n    steps:\n      - name: Step 1\n      - name: Step 2\n      - name: Step 3\n      - name: Build\n      - name: Step 5\n      - name: Step 6\n```", "answer": "```yaml name: vpinball-gl\non:\n  push:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n#  UPX_ARTIFACT: 345209471\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    name: DirectX SDK\n    runs-on: windows-latest\n    steps:\n      - id: cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Create Cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe\n          7z x DXSDK_Jun10.exe DXSDK/Include -otmp\n          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp\n          mv tmp/DXSDK DXSDK\n          rm -fR DXSDK_Jun10.exe tmp\n          ls -Ra DXSDK\n\n  version:\n    name: Version\n    runs-on: ubuntu-latest\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - id: version\n        run: |\n          VERSION_MAJOR=$(grep -Eo \"VP_VERSION_MAJOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_MINOR=$(grep -Eo \"VP_VERSION_MINOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_REV=$(grep -Eo \"VP_VERSION_REV\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)\n          SHA7=\"${GITHUB_SHA::7}\"\n          TAG=\"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}-${REVISION}-${SHA7}\"\n          echo \"revision=${REVISION}\" >> $GITHUB_OUTPUT\n          echo \"sha7=${SHA7}\" >> $GITHUB_OUTPUT\n          echo \"tag=${TAG}\" >> $GITHUB_OUTPUT\n\n  build:\n    name: Build VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\n    runs-on: windows-latest\n    needs: [ dxsdk, version ]\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Release\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Debug\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Release\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Debug\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - run: |\n          sed -i \"s/0/${{ needs.version.outputs.revision }}/g\" git_version.h\n          sed -i \"s/unknown/${{ needs.version.outputs.sha7 }}/g\" git_version.h\n      - name: Build\n        run: |\n          export DXSDK_DIR=\"${GITHUB_WORKSPACE}/DXSDK\"\n          cp cmake/CMakeLists_${{ matrix.platform}}.txt CMakeLists.txt\n          cmake -G \"Visual Studio 17 2022\" -A ${{ matrix.platform-name }} -B build\n          cmake --build build --config ${{ matrix.config }}\n#      - name: Compress\n#        if: matrix.config == 'Release'\n#        run: |\n#          curl -sL -H \"Authorization: Token ${{ secrets.GH_PAT }}\" https://api.github.com/repos/upx/upx/actions/artifacts/${{ env.UPX_ARTIFACT }}/zip -o upx.zip\n#          7z x upx.zip -oupx\n#          rm upx.zip\n#          ./upx/upx.exe --best --lzma build/${{ matrix.config }}/VPinballX_GL.exe\n      - run: |\n          mkdir tmp \n          cp build/${{ matrix.config }}/VPinballX_GL.* tmp\n          cp dll/${{ matrix.bass }} tmp\n          cp dll/${{ matrix.free-image }} tmp\n          cp dll/${{ matrix.sci-lexer-vp }} tmp\n          cp dll/${{ matrix.sdl2-ttf }} tmp\n          cp dll/${{ matrix.sdl2 }} tmp\n          cp dll/${{ matrix.openvr-api }} tmp\n          cp txt/Changelog_Scripts.txt tmp\n          cp txt/Changelog.txt tmp\n          cp txt/CommandLineParameters.txt tmp\n          cp txt/CommandReference.txt tmp\n          cp txt/Hotkeys.txt tmp\n          cp \"txt/JP's VPX7 Physics Materials.mat\" tmp\n          cp \"txt/JP's VPX7 Physics.pdf\" tmp\n          cp \"txt/JP's VPX7 script addons vbs.txt\" tmp\n          cp \"txt/JP's VPX7 Table physics.vpp\" tmp\n          cp txt/layoutGuideline.txt tmp\n          cp txt/license.txt tmp\n          cp \"txt/New Plunger Documentation.pdf\" tmp\n          cp txt/PhysicValues.txt tmp\n          cp txt/RegistryKeys.txt tmp\n          cp txt/Scripts.txt tmp \n          cp -r glshader tmp \n          cp -r scripts tmp\n          cp -r tables tmp\n      - uses: actions/upload-artifact@v3\n        with:\n          name: VPinballX_GL-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}\n          path: tmp\n```"}
{"id": "63c49ac7517fc08c1eeec341", "level": "level4", "llm_response": "```yaml\nname: Lint Pull Request Title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Lint Pull Request Title\n        run: |\n          # Add your linting command here\n          echo \"Linting pull request title...\"\n          # Example: Check if the title contains a specific format\n          if [[ \"${{ github.event.pull_request.title }}\" != *\"fix:\"* ]]; then\n            echo \"::error::Pull request title must start with 'fix:'\"\n            exit 1\n          fi\n```", "answer": "```yaml name: \"Lint Pull Request Title\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Lint Pull Request Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4.5.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49dce517fc08c1eeff4b2", "level": "level4", "llm_response": "```yaml\nname: DCO check\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    id: reverted-pr-check\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: ${{ github.event.pull_request.title }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        run: |\n          # Add logic to check if the PR is a reverted PR\n          echo \"::set-output name=is_reverted_pr::false\"  # Replace with actual logic\n      - name: Save Reverted PR output\n        run: |\n          # Add logic to save the output if needed\n      - name:  # Placeholder for the last step\n        run: echo \"No action needed\"\n\n  dco_check_job:\n    id: dco_check_job\n    runs-on: ubuntu-latest\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - name: Get PR Commits\n        id: get-pr-commits\n        run: |\n          # Add logic to get PR commits\n      - name: DCO Check\n        run: |\n          # Add DCO check logic\n      - name: Save PR number\n        run: |\n          # Add logic to save PR number\n      - name:  # Placeholder for the last step\n        run: echo \"No action needed\"\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: DCO check\non:\n  pull_request:\n    types: [ opened, reopened, synchronize ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    name: Reverted PR Check Job\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    # Map a step output to a job output\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n      - name: Save Reverted PR output\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ steps.reverted_pr_check.outputs.is_reverted_pr }} > ./pr/is_reverted_pr\n          echo -n \"false\" > ./pr/skipped\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n\n  dco_check_job:\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    name: DCO Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR Commits\n        id: 'get-pr-commits'\n        uses: tim-actions/get-pr-commits@c64db31d359214d244884dd68f971a110b29ab83 # pin@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21 # pin@master\n        with:\n          commits: ${{ steps.get-pr-commits.outputs.commits }}\n      # Need to save PR number as Github action does not propagate it with workflow_run event\n      - name: Save PR number\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ github.event.number }} > ./pr/pr_number\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n```"}
{"id": "63c4a116736e7f0ed8c78a89", "level": "level4", "llm_response": "```yaml\nname: Push-Checks\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: ''\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Setup flake8 annotations\n        run: |\n          pip install flake8\n      - name: Lint with flake8\n        run: flake8 .\n```", "answer": "```yaml # This workflow will:\n#\n#   * install Python dependencies\n#   * lint with a single version of Python\n#\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Push-Checks\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version-file: '.python-version'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install wheel flake8 pytest\n        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi\n    \n    - name: Setup flake8 annotations\n      uses: rbialon/flake8-annotations@v1\n    \n    - name: Lint with flake8\n      env:\n        ROOT_SHA: ${{github.base_ref}}\n      run: |\n        DATA=$(jq --raw-output .before $GITHUB_EVENT_PATH)\n\n        echo \"DATA: ${DATA}\"\n        # stop the build if there are Python syntax errors or undefined names, ignore existing \n        git diff \"$DATA\" | flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --diff\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        git diff \"$DATA\" | flake8 . --count --statistics --diff\n```"}
{"id": "63c497691e33648075780e11", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '40 18 * * 1'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      actions: read\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    #        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n    #        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n    #        \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n    #        \u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12 or JAN-DEC)\n    #        \u2502  \u2502  \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6 or SUN-SAT)\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        *  *  * * *\n    - cron: \"40 18 * * 1\"\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: javascript\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49c55517fc08c1eef5d3f", "level": "level4", "llm_response": "```yaml\nname: Mkdocs publish\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install pip\n        run: |\n          sudo apt-get update\n          sudo apt-get install python3-pip\n      - name: Install MkDocs\n        run: pip install mkdocs\n      - name: MkDocs build\n        run: mkdocs build\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy\n```", "answer": "```yaml   # This is a basic workflow to help you get started with Actions\n\nname: Mkdocs publish\n\n# Controls when the action will run.\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      - name: Install pip\n        run: python3 -m pip install --upgrade pip setuptools wheel\n\n      - name: Install MkDocs\n        run: |\n          pip install mkdocs\n          pip install mkdocs-macros-plugin\n\n      - name: MkDocs build\n        run: mkdocs build\n\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```"}
{"id": "63c49cfab008460c1df3e23b", "level": "level4", "llm_response": "```yaml\nname: Check PR title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  check_pr_title:\n    id: check_pr_title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check PR title\n        run: |\n          echo \"PR title: ${{ github.event.pull_request.title }}\"\n          echo \"PR body: ${{ github.event.pull_request.body }}\"\n          # Add your checks here\n```", "answer": "```yaml name: Check PR title\n\non:\n    pull_request_target:\n        types: [ opened, edited, synchronize ]\n\njobs:\n    check_pr_title:\n        name: 'Check PR title'\n        runs-on: ubuntu-latest\n        steps:\n            -   uses: amannn/action-semantic-pull-request@v4.6.0\n                env:\n                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4996733b087f6bde3f1c8", "level": "level4", "llm_response": "```yaml\nname: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v2\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Publish to Open VSX Registry\n        run: npm run publish:vsx\n```", "answer": "```yaml name: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: yarn install --immutable\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          pat: ${{ secrets.OPEN_VSX_TOKEN }}\n```"}
{"id": "63c4a0576fc19abdf9cdc124", "level": "level4", "llm_response": "```yaml\nname: Examples\n\non:\n  push:\n    branches:\n      - main\n      - 'maintenance/**'\n  pull_request:\n    branches:\n      - main\n      - 'maintenance/**'\n  schedule:\n    - cron: '0 0 * * *'\n\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  test:\n    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\n    runs-on: ${{ matrix.os }}\n    if: |\n      (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') ||\n      (github.event_name != 'schedule')\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [3.8]\n        rdkit: [true, false]\n        openeye: [true, false]\n      exclude:\n        - os: ubuntu-latest\n          python-version: 3.8\n          rdkit: false\n          openeye: false\n        - os: macos-latest\n          python-version: 3.8\n          rdkit: true\n          openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n      - name: Set environment variables\n        run: |\n          echo \"ENVFILE=environment.yml\" >> $GITHUB_ENV\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        run: |\n          conda env create -f ${{ env.ENVFILE }} -n testenv\n\n      - name: Additional info about the build\n        run: |\n          echo \"Building on ${{ matrix.os }} with Python ${{ matrix.python-version }}\"\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        run: |\n          echo $OE_LICENSE > $OE_LICENSE\n\n      - name: Install package\n        run: |\n          conda activate testenv && pip install $PACKAGE\n\n      - name: Remove undesired toolkits\n        run: |\n          conda activate testenv && conda remove -n testenv -y rdkit openeye\n\n      - name: Check installed toolkits\n        run: |\n          conda activate testenv && conda list\n\n      - name: Check uninstalled toolkits\n        run: |\n          conda activate testenv && conda list -n testenv --explicit\n\n      - name: Environment Information\n        run: |\n          conda info\n\n      - name: Run example scripts\n        run: |\n          conda activate testenv && pytest examples/scripts --tb=short\n\n      - name: Run example notebooks\n        run: |\n          conda activate testenv && jupyter nbconvert --to notebook --execute examples/notebooks/*.ipynb $NB_ARGS\n```", "answer": "```yaml name: Examples\n\non:\n  push:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  pull_request:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  schedule:\n    - cron: \"0 0 * * *\"\n\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  test:\n    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') || (github.event_name != 'schedule')\n    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.8\"]\n        rdkit: [true, false]\n        openeye: [true, false]\n        exclude:\n          - rdkit: false\n            openeye: false\n          - rdkit: true\n            openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 2\n\n      - name: Set environment variables\n        run: |\n          if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then\n              echo \"ENVFILE=openeye\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=OPENEYE\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=ambertools rdkit\" >> $GITHUB_ENV\n          fi\n\n          if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then\n              echo \"ENVFILE=rdkit\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=RDKIT\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=openeye-toolkits\" >> $GITHUB_ENV\n          fi\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml\n          extra-specs: |\n            python=${{ matrix.python-version }}\n\n      - name: Additional info about the build\n        run: |\n          uname -a\n          df -h\n          ulimit -a\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        shell: bash\n        env:\n          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}\n        run: |\n          echo \"${OE_LICENSE_TEXT}\" > ${OE_LICENSE}\n\n      - name: Install package\n        run: |\n          # Maybe remove the packaged openff-toolkit, installed as a dependency of openmmforcefields\n          # and/or Interchange\n          conda remove --force openff-toolkit-base\n          python setup.py develop --no-deps\n\n      - name: Remove undesired toolkits\n        run: |\n          # If openmmforcefields is included in examples/environment.yaml,\n          # remove RDKit and AmberTools brought in by it. Currently it's not included,\n          # so don't remove it.\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do\n              if [[ $(conda list | grep $cpkg) ]]; then conda remove --force $cpkg --yes ; fi\n            done\n          fi\n\n      - name: Check installed toolkits\n        run: |\n          for tk in ${{ env.TOOLKIT_CHECKS }}; do\n            python -c \"from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'\"\n          done\n\n      - name: Check uninstalled toolkits\n        run: |\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for tk in ${{ env.PACKAGES_TO_REMOVE }}; do\n              TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')\n              python -c \"from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'\"\n            done\n          fi\n      - name: Environment Information\n        run: |\n          conda info\n          conda list\n\n      - name: Run example scripts\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            PYTEST_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            PYTEST_ARGS+=\" --ignore=examples/QCArchive_interface\"\n          fi\n          pytest $PYTEST_ARGS openff/toolkit/tests/test_examples.py\n\n      - name: Run example notebooks\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            NB_ARGS+=\" --ignore=examples/QCArchive_interface\"\n            NB_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            NB_ARGS+=\" --ignore=examples/conformer_energies\"\n            NB_ARGS+=\" --ignore=examples/using_smirnoff_in_amber_or_gromacs\"\n          fi\n\n          # openmmforcefields incompatible with new toolkit\n          NB_ARGS+=\" --ignore=examples/external/swap_amber_parameters/swap_existing_ligand_parameters_with_openmmforcefields.ipynb\"\n\n          python -m pytest $PYTEST_ARGS $NB_ARGS examples\n```"}
{"id": "63c49d69736e7f0ed8c61514", "level": "level4", "llm_response": "```yaml\nname: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Create GitHub release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Create GitHub release\n        uses: Roang-zero1/github-create-release-action@master\n        with:\n          version_regex: ^v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4968a1e3364807577b4a5", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [go]\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      run: |\n        go build -v ./...\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4991e33b087f6bde3d441", "level": "level4", "llm_response": "```yaml\nname: Releasability\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5'\n  workflow_dispatch:\n\ninputs:\n  releaseFamily:\n    description: 'Release family (vx.y)'\n    required: false\n    default: 'v1.8'\n  moduleReleaseFamily:\n    description: 'Module release family (vx.y)'\n    required: false\n    default: 'v0.35'\n  slackChannel:\n    description: 'Slack channel (release-#)'\n    required: false\n    default: 'release'\n\njobs:\n  releasability:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call Releasability Reusable Workflow\n        uses: knative/actions/.github/workflows/releasability.yaml@main\n        with:\n          releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n          moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n          slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n        secrets:\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Releasability'\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5' # 6am Pacific, weekdays.\n\n  workflow_dispatch:      # Manual trigger.\n    inputs:\n      releaseFamily:\n        description: 'Release? (vX.Y)'\n        required: false\n      moduleReleaseFamily:\n        description: 'Module Release? (vX.Y)'\n        required: false\n      slackChannel:\n        description: 'Slack Channel? (release-#)'\n        required: false\n\njobs:\n  releasability:\n    uses: knative/actions/.github/workflows/releasability.yaml@main\n    with:\n      releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n      moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n      slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n    secrets:\n      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```"}
{"id": "63c49d616fc19abdf9cc8e74", "level": "level4", "llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Generate changelog\n        id: changelog\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./changelog\n\n      - name: Create release\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n          body: ${{ steps.changelog.outputs.message }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create release\"\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    name: \"Deploy\"\n    runs-on: \"ubuntu-latest\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          myToken: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n\n      - name: \"Create release\"\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```"}
{"id": "63c499d31899db58864e92ea", "level": "level4", "llm_response": "```yaml\nname: Build AIO-switch-updater\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: update repo\n      run: git pull origin main\n\n    - name: Building aio-switch-updater\n      run: |\n        docker run --rm -v $(pwd):/app devkitpro/devkita64 make\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@v2\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater\n```", "answer": "```yaml name: Build AIO-switch-updater\n\non: \n  push:\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n    #container: hamletdufromage/devkita64_devkitarm\n    container: devkitpro/devkita64\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        git submodule update --init --recursive\n        \n    - name: Building aio-switch-updater\n      run: |\n        make -C aiosu-forwarder -f Makefile\n        make -j$(nproc)\n        \n    - uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater.nro\n```"}
{"id": "63c4973b517fc08c1eed5918", "level": "level4", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    if: startsWith(github.event.head_commit.message, 'Release: v')\n    uses: google-github-actions/.github/.github/workflows/release.yml@v0\n```", "answer": "```yaml name: 'Release'\n\non:\n  push:\n    branches:\n      - 'main'\n\njobs:\n  release:\n    if: \"startsWith(github.event.head_commit.message, 'Release: v')\"\n    name: 'Release'\n    uses: 'google-github-actions/.github/.github/workflows/release.yml@v0'\n```"}
{"id": "63c49ebdb008460c1df494c2", "level": "level4", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add labels to pull requests\n        run: |\n          # Add your labeling logic here\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49f55517fc08c1ef0903b", "level": "level4", "llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [opened, closed, synchronize]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: CLA Assistant\n      run: |\n        # Add your CLA Assistant script here\n        echo \"Running CLA Assistant...\"\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://github.com/theskeletoncrew/treat-toolbox/blob/main/CLA.md' # e.g. a CLA or a DCO document\n          # branch should not be protected\n          branch: 'main'\n          allowlist: skeletoncrewrip,cosimo-rip\n\n         #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```"}
{"id": "63c4a0cc6fc19abdf9cde85c", "level": "level4", "llm_response": "```yaml\nname: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Visual Studio\n        uses: microsoft/setup-msbuild@v1\n\n      - name: Install format dependencies\n        run: |\n          # Add your installation commands here\n\n      - name: Configure\n        run: |\n          # Add your configuration commands here\n\n      - name: Check style\n        run: |\n          # Add your style checking commands here\n```", "answer": "```yaml name: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: \"**/cpm_modules\"\n          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}\n\n      - name: Install format dependencies\n        run: |\n          choco install llvm --version 15.0.1 -y\n          choco install ninja -y\n          pip3 install cmake_format==0.6.11 pyyaml\n\n      - name: configure\n        run: cmake -G Ninja -S . -B build -DTP_BUILD_EXAMPLES=OFF\n\n      - name: check style\n        run: cmake --build build --target check-format\n```"}
{"id": "63c5c621ac4f2678a5bd7766", "level": "level4", "llm_response": "```yaml\nname: Reusable - Spotless\n\non:\n  workflow_dispatch:\n    inputs:\n      cache-read-only:\n        description: 'Cache read-only'\n        required: false\n        type: boolean\n      no-build-cache:\n        description: 'No build cache'\n        required: false\n        type: boolean\n\nsecrets:\n  GRADLE_ENTERPRISE_ACCESS_KEY:\n    required: false\n  GE_CACHE_USERNAME:\n    required: false\n  GE_CACHE_PASSWORD:\n    required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK for running Gradle\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Spotless\n      run: ./gradlew spotlessCheck\n```", "answer": "```yaml name: Reusable - Spotless\n\non:\n  workflow_call:\n    inputs:\n      cache-read-only:\n        type: boolean\n        required: false\n      no-build-cache:\n        type: boolean\n        required: false\n    secrets:\n      GRADLE_ENTERPRISE_ACCESS_KEY:\n        required: false\n      GE_CACHE_USERNAME:\n        required: false\n      GE_CACHE_PASSWORD:\n        required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK for running Gradle\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n\n      - name: Spotless\n        uses: gradle/gradle-build-action@v2\n        env:\n          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n        with:\n          arguments: spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}\n          cache-read-only: ${{ inputs.cache-read-only }}\n          # gradle enterprise is used for the build cache\n          gradle-home-cache-excludes: caches/build-cache-1\n```"}
{"id": "63c49b20b008460c1df324d1", "level": "level4", "llm_response": "```yaml\nname: release_candidate\n\non:\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Step 1\n      run: |\n        # Add your command for Step 1 here\n    - name: Step 2\n      run: |\n        # Add your command for Step 2 here\n```", "answer": "```yaml # Release Candidate GitHub Action\n\nname: release_candidate\n\n# TODO(actions):\n# - [x] create a new AUTO-RC-<DATE> branch\n# - [x] update CHANGES.rst\n# - [x] create changes commit\n# - [x] push to GH\n# - [ ] update README.rst\n# - [ ] create readme commit\n# - [ ] push to GH\n# - [ ] open a PR to `master`\n\n# TODO(general):\n# - [ ] setup the action\n# - [ ] cleanup the action\n\non:\n  schedule:\n    - cron:  '0 0 1 * *'  # each 1st day of the month\n  workflow_dispatch:      # on manual trigger\n\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Flag to fetch all history.\n          #   @see https://github.com/marketplace/actions/checkout#Fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n      - run: |\n          RC_DATE=$(date +'%m-%d-%Y')\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git checkout -b auto-release-candidate-${RC_DATE}\n          git push -u origin auto-release-candidate-${RC_DATE}\n\n          git status\n          git fetch\n\n          ./bin/update_changelog.sh\n\n          git add CHANGES.rst\n          git commit -m \"chore(rc-changes): update Changes.rst\"\n          git push\n\n          gh pr create  --title \"chore(auto-release-candidate-${RC_DATE})\" \\\n                        --body \"Automated release candidate for ${RC_DATE}.\" \\\n                        --base master \\\n                        --draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c4a0961842bc13d779e955", "level": "level4", "llm_response": "```yaml\nname: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    id: nightly\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```", "answer": "```yaml name: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```"}
{"id": "63c494dd8052faa2781add7b", "level": "level4", "llm_response": "```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  workflow_dispatch:\n    inputs:\n      event_type:\n        description: 'Event type to trigger the workflow'\n        required: true\n        type: string\n    concurrency:\n      group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n\njobs:\n  unix:\n    id: unix\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest]\n        java: [\n          { version: 11 },\n          { version: 17 }\n        ]\n    timeout-minutes: 60\n    steps:\n      - name: ''\n        run: echo \"Preparing the environment...\"\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Continuous Integration\n\non:\n  push:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  repository_dispatch:\n    types: [rerun-ci]\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    name: JDK ${{ matrix.java.version }} - on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 60\n    strategy:\n      matrix:\n        os: [ macos-latest ]\n        java:\n          - {\n            version: 11\n          }\n          - {\n            version: 17\n          }\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build with Maven\n        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true\n```"}
{"id": "63c49d3433b087f6bde57d87", "level": "level4", "llm_response": "```yaml\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Enable debug mode'\n        required: false\n        type: boolean\n        default: false\n\nschedule:\n  - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency: ${{ github.ref }}-${{ github.workflow }}\n\njobs:\n  kics:\n    id: kics\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'HariSekhon'\n    steps:\n      - name: Call reusable workflow\n        uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n        with:\n          debug: ${{ github.event.inputs.debug-the }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-02-01 19:36:08 +0000 (Tue, 01 Feb 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  kics:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Kics\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496401e3364807577961d", "level": "level4", "llm_response": "```yaml\nname: Test commit or pull request\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Setup Node\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Setup NPM\n      run: npm install -g npm\n    - name: Install dependencies\n      run: npm install\n    - name: Test with eslint\n      run: npm run lint\n\n  stylelint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Setup Node\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Setup NPM\n      run: npm install -g npm\n    - name: Install dependencies\n      run: npm install\n    - name: Test with stylelint\n      run: npm run stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Setup Node\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Setup NPM\n      run: npm install -g npm\n    - name: Install dependencies\n      run: npm install\n    - name: Test i18n packs integrity\n      run: npm run test:i18n\n```", "answer": "```yaml name: Test commit or pull request\n\non: [push, pull_request]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with eslint\n        run: npm run test:eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with stylelint\n        run: npm run test:stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test i18n packs integrity\n        run: npm run test:i18n-packs\n```"}
{"id": "63c49932cbc73931bb18c12f", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [cpp]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49ad8cbc73931bb1965d2", "level": "level4", "llm_response": "```yaml\nname: prod-deploy\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Setup Node.js environment\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Cache node_modules\n      id: cached-node_modules\n      uses: actions/cache@v2\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: Install all yarn packages\n      run: yarn install\n\n    - name: Build all\n      run: yarn build\n\n    - name: Deploy pages\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./dist\n```", "answer": "```yaml name: prod-deploy\n\non: [workflow_dispatch]\n\njobs:\n    deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v3\n\n            - name: Setup Node.js environment\n              uses: actions/setup-node@v3\n              with:\n                  node-version: '16'\n                  cache: 'yarn'\n\n            - name: Cache node_modules\n              uses: actions/cache@v3\n              id: cached-node_modules\n              with:\n                  path: |\n                      node_modules\n                  key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/publish-release.yml') }}\n\n            - name: Install all yarn packages\n              if: steps.cached-node_modules.outputs.cache-hit != 'true'\n              run: yarn --frozen-lockfile\n\n            - name: Build all\n              run: yarn build\n\n            - name: Deploy pages\n              run: |\n                  git init\n                  git config user.name \"schalkneethling\"\n                  git config user.email \"sneethling@mozilla.com\"\n                  git checkout -b prod\n                  git add .\n                  git commit --allow-empty -m \"Deploying latest generated pages\"\n                  git remote add mdn \"https://$GITHUB_TOKEN@github.com/mdn/interactive-examples.git\"\n                  # Eat output so it doesn't spit out the sensitive GITHUB_TOKEN if something goes wrong:\n                  git push -q -f mdn prod > /dev/null 2>&1\n```"}
{"id": "63c498f31899db58864e363a", "level": "level4", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c496561899db58864d23b8", "level": "level4", "llm_response": "```yaml\nname: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Run with tmate debugging'\n        required: false\n        default: 'false'\n        type: boolean\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == 'true' }}\n      scenario: 'environment'\n```", "answer": "```yaml name: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      # Plugins\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: environment\n```"}
{"id": "63c496a56fc19abdf9c9d4fb", "level": "level4", "llm_response": "```yaml\nname: test\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - '**/Cargo.toml'\n      - '**/*.rs'\n      - justfile\n      - .github/workflows/test.yml\n\npermissions:\n  contents: read\n\nenv:\n  CARGO_INCREMENTAL: '0'\n  CARGO_NET_RETRY: '10'\n  RUSTFLAGS: '-D warnings -A deprecated'\n  RUSTUP_MAX_RETRIES: '10'\n\njobs:\n  meshtls:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Step 1\n        run: echo \"Step 1\"\n      - name: Step 2\n        run: echo \"Step 2\"\n      - name: Step 3\n        run: echo \"Step 3\"\n      - name: Step 4\n        run: echo \"Step 4\"\n      - name: Step 5\n        run: echo \"Step 5\"\n\n  unit:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Step 1\n        run: echo \"Step 1\"\n      - name: Step 2\n        run: echo \"Step 2\"\n      - name: Step 3\n        run: echo \"Step 3\"\n      - name: Step 4\n        run: echo \"Step 4\"\n```", "answer": "```yaml # Runs tests that complete relatively quickly.\nname: test\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - \"**/Cargo.toml\"\n      - \"**/*.rs\"\n      - justfile\n      - .github/workflows/test.yml\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: \"-D warnings -A deprecated\"\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  # Test the meshtls backends.\n  meshtls:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just clippy-crate linkerd-meshtls --all-features\n      - run: |\n          just test-crate linkerd-meshtls --all-features --no-run \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n      - run: |\n          just test-crate linkerd-meshtls --all-features \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n\n  # Run non-integration tests. This should be quick.\n  unit:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: |\n          just test --no-run \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n      - run: |\n          just test \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n```"}
{"id": "63c4a116736e7f0ed8c78a5a", "level": "level4", "llm_response": "```yaml\nname: Nightly\n\non:\n  schedule:\n    - cron: '30 12 * * *'\n\npermissions:\n  id-token: write\n\njobs:\n  nightly:\n    runs-on: ubuntu-latest\n    if: github.repository == 'aws/karpenter'\n    steps:\n      - name: Step 1\n        run: |\n          # Add your step 1 commands here\n      - name: Step 2\n        run: |\n          # Add your step 2 commands here\n      - name: Step 3\n        run: |\n          # Add your step 3 commands here\n```", "answer": "```yaml name: Nightly\non:\n  schedule:\n    - cron: '30 12 * * *'\npermissions:\n  id-token: write\njobs:\n  nightly:\n    if: github.repository == 'aws/karpenter'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/authenticate-aws\n      - run: make nightly\n```"}
{"id": "63c498e61899db58864e3102", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n      - master\n      - 'release-*'\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [javascript, python]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"develop\", master, release-* ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"develop\" ]\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a11a1e336480757be37b", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    strategy:\n      matrix:\n        language: [javascript]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        run: npm install && npm run build\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    continue-on-error: true\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        config-file: ./.github/codeql/codeql-config.yml\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718d", "level": "level4", "llm_response": "```yaml\nname: Release\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: false\n    default: 'minor'\n    options:\n      - 'patch'\n      - 'minor'\n      - 'major'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n\n    steps:\n    - name: Set up git config\n      run: |\n        git config --global user.name \"github-actions[bot]\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Generate CHANGELOG\n      id: changelog\n      run: |\n        echo \"## Changelog\" > CHANGELOG.md\n        echo \"### $(date +%Y-%m-%d)\" >> CHANGELOG.md\n        echo \"- New feature\" >> CHANGELOG.md\n\n    - name: Insert reearth-web changelog\n      run: |\n        echo \"## reearth-web\" >> CHANGELOG.md\n        echo \"### $(date +%Y-%m-%d)\" >> CHANGELOG.md\n        echo \"- Bug fix\" >> CHANGELOG.md\n\n    - name: Upload latest CHANGELOG\n      uses: actions/upload-artifact@v2\n      with:\n        name: CHANGELOG\n        path: CHANGELOG.md\n\n    - name: Commit & push to release\n      run: |\n        git add CHANGELOG.md\n        git commit -m \"chore: update CHANGELOG\"\n        git push origin release\n\n    - name: Commit & push to main\n      run: |\n        git checkout main\n        git pull origin main\n        git checkout release\n        git merge main\n        git push origin main\n```", "answer": "```yaml name: Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        required: false\n        description: 'Next version (NOTE: Switch the branch to \"release\"!)'\n        type: choice\n        default: minor\n        options:\n          - patch\n          - minor\n          - major\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n    steps:\n      - name: Set up git config\n        run: |\n          git config --global user.name \"${{ github.actor }}\"\n          git config --global user.email \"${{ github.actor }}@users.noreply.github.com\"\n          git config --global pull.rebase false\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - id: changelog\n        name: Generate CHANGELOG\n        uses: reearth/changelog-action@main\n        with:\n          version: ${{ github.event.inputs.version }}\n          repo: ${{ github.repository }}\n          latest: CHANGELOG_latest.md\n      - name: Insert reearth-web changelog\n        uses: actions/github-script@v6\n        with:\n          script: 'require(\"./.github/workflows/release\")({ github, context })'\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n      - name: Upload latest CHANGELOG\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog-${{ steps.changelog.outputs.version }}\n          path: CHANGELOG_latest.md\n      - name: Commit & push to release\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        run: |\n          rm CHANGELOG_latest.md\n          git add CHANGELOG.md\n          git commit -am \"$TAG\"\n          git tag $TAG\n          git push --atomic origin release $TAG\n      - name: Commit & push to main\n        run: git switch main && git cherry-pick release && git push\n```"}
{"id": "63c497bf1e33648075783099", "level": "level4", "llm_response": "```yaml\nname: Issue tracking\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [labeled]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Generate token\n      id: generate_token\n      run: echo \"::set-output name=token::$(openssl rand -hex 20)\"\n\n    - name: Get project data\n      run: echo \"Fetching project data\"\n\n    - name: Add issue to project\n      run: echo \"Adding issue to project\"\n\n    - name: Set fields\n      run: echo \"Setting issue fields\"\n```", "answer": "```yaml name: Issue tracking\non:\n  issues:\n    types:\n      - opened\n      - labeled\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0\n        with:\n          app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n          private_key: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ORGANIZATION: prebid\n          DATE_FIELD: Created on\n          PROJECT_NUMBER: 4\n        run: |\n          gh api graphql -f query='\n            query($org: String!, $number: Int!) {\n              organization(login: $org){\n                projectNext(number: $number) {\n                  id\n                  fields(first:100) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"'\"$DATE_FIELD\"'\") | .id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id,\n                  content {\n                     ... on Issue {\n                        createdAt\n                     }\n                     ... on PullRequest {\n                        createdAt\n                     }                     \n                  }\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json\n          \n          echo 'ITEM_ID='$(jq '.data.addProjectNextItem.projectNextItem.id' issue_data.json) >> $GITHUB_ENV\n          echo 'ITEM_CREATION_DATE='$(jq '.data.addProjectNextItem.projectNextItem.content.createdAt' issue_data.json) >> $GITHUB_ENV\n\n      - name: Set fields\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n        run: |\n          gh api graphql -f query='\n            mutation (\n              $project: ID!\n              $item: ID!\n              $date_field: ID!\n              $date_value: String!\n            ) {\n              set_creation_date: updateProjectNextItemField(input: {\n                projectId: $project\n                itemId: $item\n                fieldId: $date_field\n                value: $date_value\n              }) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f date_field=$DATE_FIELD_ID -f date_value=$ITEM_CREATION_DATE --silent\n```"}
{"id": "63c4947a8052faa2781ab62f", "level": "level4", "llm_response": "```yaml\nname: Backport labeled merged pull requests\n\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: |\n      (github.event_name == 'pull_request' && github.event.pull_request.merged) ||\n      (github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.comment.user.id != 97796249 && contains(github.event.comment.body, '/backport'))\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Create backport PRs\n      run: echo \"Creating backport PRs...\"\n```", "answer": "```yaml name: Backport labeled merged pull requests\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\njobs:\n  build:\n    name: Create backport PRs\n    runs-on: ubuntu-latest\n    # Only run when pull request is merged\n    # or when a comment containing `/backport` is created by someone other than the backport-action\n    # bot user (user id: 97796249)\n    if: >\n      (\n        github.event_name == 'pull_request' &&\n        github.event.pull_request.merged\n      ) || (\n        github.event_name == 'issue_comment' &&\n        github.event.issue.pull_request &&\n        github.event.comment.user.id != 97796249 &&\n        contains(github.event.comment.body, '/backport')\n      )\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Token for git actions, e.g. git push\n          token: ${{ secrets.BACKPORT_ACTION_PAT }}\n      - name: Create backport PRs\n        uses: zeebe-io/backport-action@v0.0.8\n        with:\n          # Required\n          # Token to authenticate requests to GitHub\n          github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n\n          # Required\n          # Working directory for the backport action\n          github_workspace: ${{ github.workspace }}\n\n          # Optional\n          # Regex pattern to match github labels\n          # Must contain a capture group for target branchname\n          # label_pattern: ^backport ([^ ]+)$\n\n          # Optional\n          # Template used as description in the pull requests created by this action.\n          # Placeholders can be used to define variable values.\n          # These are indicated by a dollar sign and curly braces (`${placeholder}`).\n          # Please refer to this action's README for all available placeholders.\n          pull_description: |-\n            # Description\n            Backport of #${pull_number} to `${target_branch}`.\n\n            relates to ${issue_refs}\n```"}
{"id": "63c49b8c1e3364807579b321", "level": "level4", "llm_response": "```yaml\nname: Create tag\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: true\n    default: 'patch'\n    type: choice\n    options:\n      - patch\n      - minor\n\njobs:\n  create-tag:\n    id: create-tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Get Previous tag\n        id: previoustag\n        run: echo \"::set-output name=tag::$(git describe --tags --abbrev=0)\"\n\n      - name: Get next versions\n        id: semvers\n        run: echo \"::set-output name=next_minor::$(semver --patch ${{ github.event.inputs.version }})\" && echo \"::set-output name=next_patch::$(semver --patch ${{ github.event.inputs.version }})\"\n\n      - name: Create new minor tag\n        run: git tag ${{ steps.semvers.outputs.next_minor }} && git push origin ${{ steps.semvers.outputs.next_minor }}\n\n      - name: Create new patch tag\n        run: git tag ${{ steps.semvers.outputs.next_patch }} && git push origin ${{ steps.semvers.outputs.next_patch }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create tag\"\n\non:\n  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: true\n        default: 'patch'\n        type: choice\n        options:\n          - patch\n          - minor\n\njobs:\n  create-tag:\n    name: \"Create tag\"\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.PAT }}\n\n      - name: 'Get Previous tag'\n        id: previoustag\n        uses: \"WyriHaximus/github-action-get-previous-tag@v1\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: 'Get next versions'\n        id: semvers\n        uses: \"WyriHaximus/github-action-next-semvers@v1\"\n        with:\n          version: ${{ steps.previoustag.outputs.tag }}\n\n      - name: \"Create new minor tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'minor'\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: ${{ steps.semvers.outputs.minor }}\n\n      - name: \"Create new patch tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'patch'\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: ${{ steps.semvers.outputs.patch }}\n```"}
{"id": "63c4a0d7517fc08c1ef12403", "level": "level4", "llm_response": "```yaml\nname: Check\n\non:\n  pull_request:\n    types: [opened, ready_for_review, synchronize]\n  pull_request_review:\n    types: [submitted]\n\npermissions:\n  actions: write\n  pull-requests: write\n  checks: none\n  contents: none\n  deployments: none\n  issues: none\n  packages: none\n  repository-projects: none\n  security-events: none\n  statuses: none\n\njobs:\n  check-reviews:\n    id: check-reviews\n    runs-on: ubuntu-latest\n    if: !github.event.pull_request.draft\n    steps:\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v2\n\n      - name: Installing Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Checking reviewers\n        run: echo \"Checking reviewers\"\n```", "answer": "```yaml # Workflow will trigger on all pull request (except draft), pull request\n# review, and commit push to a pull request (synchronize) event types\n#\n# NOTE: pull_request_target behaves the same as pull_request except it grants a\n# read/write token to workflows running on a pull request from a fork. While\n# this may seem unsafe, the permissions for the token are limited below and\n# the permissions can not be changed without merging to master which is\n# protected by CODEOWNERS.\nname: Check\non:\n  pull_request_review:\n    type: [submitted, edited, dismissed]\n  pull_request_target:\n    types: [opened, ready_for_review, synchronize]\n\n# Limit the permissions on the GitHub token for this workflow to the subset\n# that is required. In this case, the check workflow needs to invalidate\n# reviews and delete workflow runs, so it needs write access to \"actions\" and\n# \"pull-requests\", nothing else.\npermissions:\n    actions: write\n    pull-requests: write\n    checks: none\n    contents: none\n    deployments: none\n    issues: none\n    packages: none\n    repository-projects: none\n    security-events: none\n    statuses: none\n\njobs:\n  check-reviews:\n    name: Checking reviewers\n    if: ${{ !github.event.pull_request.draft }}\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout main branch of shared-workflow repository.\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v3\n        with:\n          repository: gravitational/shared-workflows\n          path: .github/shared-workflows\n          ref: main\n      - name: Installing Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: .github/shared-workflows/bot/go.mod\n        # Run \"check\" subcommand on bot.\n      - name: Checking reviewers\n        run: cd .github/shared-workflows/bot && go run main.go -workflow=check -token=\"${{ secrets.GITHUB_TOKEN }}\" -reviewers=\"${{ secrets.reviewers }}\"\n```"}
{"id": "63c4973933b087f6bde31123", "level": "level4", "llm_response": "```yaml\nname: Structr CI Pipeline\n\non:\n  push:\n    branches: [ main, release ]\n  tag:\n    branches: [ main, release ]\n  clone:\n\njobs:\n  run-tests:\n    id: run-tests\n    runs-on: self-hosted\n    if: !startsWith(github.actor, 'dependabot')\n    strategy:\n      matrix:\n        module: [structr-ui, structr-core, structr-rest, structr-db-driver-api, structr-memgraph-driver, structr-memory-driver, structr-modules, structr-neo4j-bolt-driver]\n        variableName: [UI, CORE, REST, DB_DRIVER_API, MEMGRAPH_DRIVER, MEMORY_DRIVER, MODULES, NEO4J_BOLT_DRIVER]\n    environment: build-and-test\n    steps:\n      - name: Start Test Datenbase\n      - name: Install GraalVM\n      - name: Compile and run Tests\n      - name: Stop Test Database\n\n  build-and-deploy:\n    id: build-and-deploy\n    needs: run-tests\n    runs-on: self-hosted\n    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release')\n    environment: build-and-test\n    steps:\n      - name: Login to Docker Hub\n      - name: Install GraalVM\n      - name: Upload binaries\n\n  cleanup-system:\n    id: cleanup-system\n    needs: [run-tests, build-and-deploy]\n    runs-on: self-hosted\n    if: always()\n    steps:\n      - name: Cleanup docker\n      - name: Cleanup runner home\n```", "answer": "```yaml name: Structr CI Pipeline\non:\n  push\n\njobs:\n  run-tests:\n    if: ${{ !startsWith( github.actor, 'dependabot' ) }}\n    runs-on: self-hosted\n    environment: build-and-test\n    strategy:\n      matrix:\n        include:\n          - module: structr-ui\n            variableName: UI\n          - module: structr-core\n            variableName: CORE\n          - module: structr-rest\n            variableName: REST\n          - module: structr-db-driver-api\n            variableName: DB_DRIVER_API\n          - module: structr-memgraph-driver\n            variableName: MEMGRAPH_DRIVER\n          - module: structr-memory-driver\n            variableName: MEMORY_DRIVER\n          - module: structr-modules\n            variableName: MODULES\n          - module: structr-neo4j-bolt-driver\n            variableName: NEO4J_BOLT_DRIVER\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start Test Datenbase\n        run: >-\n          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} \n          -p 7687 \n          -e NEO4J_AUTH=neo4j/admin \n          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \n          -e NEO4J_dbms_memory_heap_maxSize=4G \n          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && \n          echo \"ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"7687/tcp\") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})\" >> $GITHUB_ENV\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Compile and run Tests\n        run:  >-\n          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && \n          cd ${{ matrix.module }} && \n          mvn clean install -DskipDockerTestDB -Denv.testDatabaseConnection=\"bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}\"\n\n      - name: Stop Test Database\n        if: always()\n        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}\n\n  build-and-deploy:\n    runs-on: self-hosted\n    environment: build-and-test\n    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}\n    needs: run-tests\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: structr\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB\n      - name: Upload binaries\n        run: >-\n          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&\n          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1\n\n  cleanup-system:\n    runs-on: self-hosted\n    if: always()\n    needs: [run-tests, build-and-deploy]\n    steps:\n      - name: Cleanup docker\n        run: docker container prune -f && docker image prune -f && docker volume prune -f\n      - name: Cleanup runner home\n        run: cd ~/actions-runner/_work/structr/ && rm -rf structr\n```"}
{"id": "63c496e6517fc08c1eed3897", "level": "level4", "llm_response": "```yaml\nname: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    id: sync-branches\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Opening pull request\n        id: pull\n        run: |\n          # Add your code here to open a pull request\n\n      - name: Label the pull request to ignore for release note generation\n        run: |\n          # Add your code here to label the pull request\n```", "answer": "```yaml name: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    runs-on: ubuntu-latest\n    name: Syncing branches\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          FROM_BRANCH: 'master'\n          TO_BRANCH: 'dev'\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: internal\n          repo: ${{ github.repository }}\n          number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```"}
{"id": "63c4a12533b087f6bde70dfc", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * 0'\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [javascript]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: 'CodeQL'\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * SUN'\n\njobs:\n  'Analyze':\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n    steps:\n      - name: 'Checkout repository'\n        uses: actions/checkout@v3\n      - name: 'Initialize CodeQL'\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: 'Perform CodeQL Analysis'\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49fda6fc19abdf9cd8ce3", "level": "level4", "llm_response": "```yaml\nname: Continuous integration\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\nenv:\n  cache-version: \"0\"\n\njobs:\n  test-nixpkgs:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Mount Bazel cache\n        run: echo \"::add-path::/path/to/bazel/cache\"\n      - name: Configure\n        run: ./configure\n      - name: Check Bazel version\n        run: bazel --version\n      - name: Build & test\n        run: bazel build //...\n\n  test-nixpkgs-cross:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Mount Bazel cache\n        run: echo \"::add-path::/path/to/bazel/cache\"\n      - name: Configure\n        run: ./configure\n      - name: Check Bazel version\n        run: bazel --version\n      - name: Build & test\n        run: bazel build //...\n\n  test-bindist:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Mount Bazel cache\n        run: echo \"::add-path::/path/to/bazel/cache\"\n      - name: Install Bazel\n        run: ./install-bazel.sh\n      - name: Configure\n        run: ./configure\n      - name: Build & test\n        run: bazel build //...\n```", "answer": "```yaml name: Continuous integration\non: [push]\nenv:\n  # Bump this number to invalidate the GH actions cache\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    name: Build & Test - Nixpkgs\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-nixpkgs;;\n            Linux) BUILD_CONFIG=ci-linux-nixpkgs;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          nix-shell --arg docTools false --pure --run '\n            set -euo pipefail\n            ./tests/run-start-script.sh --use-nix\n            bazel build //tests:run-tests\n            ./bazel-ci-bin/tests/run-tests\n            bazel coverage //...\n            bazel build //docs:api_html\n            bazel build //docs:guide_html\n            '\n\n  test-nixpkgs-cross:\n    name: Build & Test - Cross\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=linux-nixpkgs\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          ln -sr .bazelrc.local examples/arm/.bazelrc.local\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          cd examples/arm\n          nix-shell --arg docTools false --pure --run \"bazel build //... --platforms=//:linux_aarch64\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example2\"\n\n  test-bindist:\n    name: Build & Test - bindist\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |-\n          sudo swapoff -a\n          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc\n          sudo apt clean\n          docker rmi $(docker images -q) -f\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}\n      - name: Install Bazel\n        shell: bash\n        run: |\n          BAZEL_DIR=\"$(.ci/fetch-bazel-bindist)\"\n          mv $BAZEL_DIR $HOME/bazel\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        shell: bash\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-bindist;;\n            Linux) BUILD_CONFIG=ci-linux-bindist;;\n            Windows) BUILD_CONFIG=ci-windows-bindist;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Build & test\n        shell: bash\n        run: |\n          export PATH=$HOME/bazel:$PATH\n          [[ ${{ runner.os }} == macOS ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1\n          ./tests/run-start-script.sh --use-bindists\n          if [[ ${{ runner.os }} == Windows ]]; then\n            # On Windows `//...` expands to `/...`.\n            bazel test ///...\n          else\n            bazel test //...\n          fi\n          # Test stack_snapshot pinning\n          # NOTE keep in sync with tests/RunTests.hs\n          bazel run @stackage-pinning-test-unpinned//:pin\n          bazel build @stackage-pinning-test//:hspec\n```"}
{"id": "63c49f501e336480757b2fb7", "level": "level4", "llm_response": "```yaml\nname: Run Flake\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  nix-flake:\n    runs-on: ubuntu-22.04\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Fetch tags\n      run: git fetch --tags\n\n    - name: Install Nix\n      run: |\n        sh <(curl -L https://nixos.org/nix/install) --daemon\n\n    - name: Build flake\n      run: nix build .\n\n    - name: Test run flake\n      run: nix run .\n```", "answer": "```yaml name: Run Flake\n\non: [ push, pull_request ]\n\njobs:\n\n  nix-flake:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Fetch tags\n        run: |\n          git fetch --prune --tags ||:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Build flake\n        run: nix build\n      - name: Test run flake\n        run: nix shell -c sile --version\n```"}
{"id": "63c4964e6fc19abdf9c9b3ba", "level": "level4", "llm_response": "```yaml\nname: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  fossa:\n    id: fossa\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Download fossa cli\n        run: curl -sSL https://dl.fossa.io/fossa-linux-amd64 -o /usr/local/bin/fossa && chmod +x /usr/local/bin/fossa\n\n      - name: Fossa init\n        run: fossa init\n\n      - name: Set env\n        run: echo \"FOSSA_TOKEN=$FOSSA_TOKEN\" >> $GITHUB_ENV\n\n      - name: Configuration\n        run: fossa configure\n\n      - name: Upload dependencies\n        run: fossa scan\n```", "answer": "```yaml name: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  fossa:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Download fossa cli\n        run: |-\n          mkdir -p $HOME/.local/bin\n          curl https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash -s -- -b $HOME/.local/bin\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n\n      - name: Fossa init\n        run: fossa init\n      - name: Set env\n        run: echo \"line_number=$(grep -n \"project\" .fossa.yml | cut -f1 -d:)\" >> $GITHUB_ENV\n      - name: Configuration\n        run: |-\n          sed -i \"${line_number}s|.*|  project: git@github.com:${GITHUB_REPOSITORY}.git|\" .fossa.yml\n          cat .fossa.yml\n      - name: Upload dependencies\n        run: fossa analyze --debug\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"id": "63c49ea61842bc13d7792309", "level": "level4", "llm_response": "```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: .\n        run: |\n          # Add your step commands here\n      - name: Package Trigger Scheduler\n        run: |\n          # Add your step commands here\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-bookstack/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for bookstack** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-bookstack/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c49da71899db58865017d1", "level": "level4", "llm_response": "```yaml\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  merge:\n    id: merge\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        run: |\n          git checkout master\n          git pull origin master\n          git checkout ${{ matrix.branch }}\n          git merge master\n          git push origin ${{ matrix.branch }}\n```", "answer": "```yaml #\n# Copyright 2022 The Dapr Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\njobs:\n  merge:\n    name: Merge master into feature branches\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        # artursouza/merge-branch is a fork of devmasx/merge-branch \n        #   to minimize risk of a 3rd party repo running arbitrary code with our creds\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          type: now\n          from_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```"}
{"id": "63c4a17c33b087f6bde72c5f", "level": "level4", "llm_response": "```yaml\nname: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Run linters\n      run: go run github.com/golangci/golangci-lint/cmd/golangci-lint run\n```", "answer": "```yaml name: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: v1.18.x\n          cache: true\n      - run: go run mage.go lint\n```"}
{"id": "63c49f39b008460c1df4c52d", "level": "level4", "llm_response": "```yaml\nname: Static Code Analysis\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        php: [8.1]\n        stability: [prefer-stable]\n      fail-fast: true\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        extensions: dom, intl, opcache, pdo_mysql, simplexml, xml, xmlreader, xmlwriter\n\n    - name: Setup problem matchers\n      run: echo \"::add-matcher::phpunit.json\"\n\n    - name: Install dependencies\n      run: composer install --no-dev --optimize-autoloader\n\n    - name: Execute static code analysis\n      run: php vendor/bin/phpcs --standard=PSR12 src\n```", "answer": "```yaml name: Static Code Analysis\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest]\n        php: [8.1]\n        stability: [prefer-stable]\n\n    name: P${{ matrix.php }} - ${{ matrix.stability }} - ${{ matrix.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo\n          coverage: none\n\n      - name: Setup problem matchers\n        run: |\n          echo \"::add-matcher::${{ runner.tool_cache }}/php.json\"\n          echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Install dependencies\n        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction\n\n      - name: Execute static code analysis\n        run: vendor/bin/phpstan analyse src --level 9 --error-format=github --no-progress --no-ansi\n```"}
{"id": "63c499e81842bc13d7773766", "level": "level4", "llm_response": "```yaml\nname: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Calculate compressed size\n      run: |\n        # Add your commands to calculate the compressed size here\n        echo \"Compressed size calculated\"\n```", "answer": "```yaml name: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: 94dreamer/compressed-size-action@master\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          pattern: \"./miniprogram_dist/**/*.{js,wxs,wxml,json}\"```"}
{"id": "63c49f95736e7f0ed8c6f18a", "level": "level4", "llm_response": "```yaml\nname: Sync labels\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Sync labels\n        run: echo \"Syncing labels...\"\n```", "answer": "```yaml name: Sync labels\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: micnncim/action-label-syncer@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          manifest: .github/labels.yml\n```"}
{"id": "63c49fbdcbc73931bb1b5e4f", "level": "level4", "llm_response": "```yaml\nname: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches:\n      - branch0.1/tf-serving-cluster\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build the TF Docker image\n        run: |\n          # Add commands to build the TF Docker image here\n          echo \"Building TF Docker image...\"\n          # Example command: docker build -t tf-serving-image .\n\n      - name: Build the SP Docker image\n        run: |\n          # Add commands to build the SP Docker image here\n          echo \"Building SP Docker image...\"\n          # Example command: docker build -t sp-serving-image .\n\n      - name: Check Docker image Status\n        run: |\n          # Add commands to check Docker image status here\n          echo \"Checking Docker image status...\"\n          # Example command: docker images\n```", "answer": "```yaml name: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches: [ branch0.1/tf-serving-cluster ]\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build the TF Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/tf_serving\n        docker build -f gramine_tf_serving.dockerfile . -t tf_serving:$(date +%s)\n        \n    - name: Build the SP Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/secret_prov\n        docker build -f secret_prov.dockerfile . -t sp_serving:$(date +%s)\n        \n    - name: Check Docker image Status\n      run: docker images\n      \n```"}
{"id": "63c49daf1842bc13d778bec9", "level": "level4", "llm_response": "```yaml\nname: unit tests\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        container:\n          - fedora:36\n          - fedora:rawhide\n          - opensuse/leap:15.3\n          - opensuse/leap:15.4\n          - opensuse/tumbleweed\n          - quay.io/centos/centos:stream9\n          - debian:stable\n          - debian:unstable\n          - ubuntu:latest\n\n    steps:\n      - name: Install packages (openSUSE)\n        if: matrix.container == 'opensuse/leap:15.3' || matrix.container == 'opensuse/leap:15.4' || matrix.container == 'opensuse/tumbleweed'\n        run: |\n          sudo zypper install -y python3 python3-pip\n\n      - name: Install packages (Fedora/CentOS)\n        if: matrix.container == 'fedora:36' || matrix.container == 'fedora:rawhide' || matrix.container == 'quay.io/centos/centos:stream9'\n        run: |\n          sudo dnf install -y python3 python3-pip\n\n      - name: Install packages (Debian/Ubuntu)\n        if: matrix.container == 'debian:stable' || matrix.container == 'debian:unstable' || matrix.container == 'ubuntu:latest'\n        run: |\n          sudo apt-get update && sudo apt-get install -y python3 python3-pip\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n\n      - name: Run unit tests\n        run: |\n          pytest\n\n      - name: Generate coverage reports (openSUSE Tumbleweed)\n        if: matrix.container == 'opensuse/tumbleweed'\n        run: |\n          coverage run -m pytest\n\n      - name: Upload coverage reports to Codecov (openSUSE Tumbleweed)\n        if: matrix.container == 'opensuse/tumbleweed'\n        uses: codecov/codecov-action@v2\n```", "answer": "```yaml name: 'unit tests'\n\non:\n  push:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n  pull_request:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n\njobs:\n  test:\n    name: 'unit tests'\n    runs-on: 'ubuntu-latest'\n    strategy:\n      fail-fast: false\n      matrix:\n        # Testing per python-version using actions/setup-python is not possible,\n        # because rpm doesn't exist on pypi and cannot be installed via pip on ubuntu.\n        # That's why we're going to test on the target distros directly.\n        container:\n\n          # Fedora\n          - 'fedora:36'\n          - 'fedora:rawhide'\n\n          # openSUSE\n          # leap < 15.2 doesn't contain git-lfs which causes actions/checkout to fail\n          - 'opensuse/leap:15.3'\n          - 'opensuse/leap:15.4'\n          - 'opensuse/tumbleweed'\n\n          # CentOS Stream\n          - 'quay.io/centos/centos:stream9'\n\n          # Debian\n          - 'debian:stable'\n          - 'debian:unstable'\n\n          # Ubuntu\n          - 'ubuntu:latest'\n\n    container:\n      image: ${{ matrix.container }}\n\n    steps:\n      - name: 'Install packages (openSUSE)'\n        if: ${{ startsWith(matrix.container, 'opensuse/') }}\n        run: |\n            zypper -n --gpg-auto-import-keys refresh\n            zypper -n lr --details\n            grep -qi tumbleweed /etc/os-release && zypper -n dist-upgrade || zypper -n patch || zypper -n patch\n            zypper -n install git-lfs\n            zypper -n install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Fedora/CentOS)'\n        if: ${{ startsWith(matrix.container, 'fedora:') || contains(matrix.container, 'centos:') }}\n        run: |\n            dnf -y makecache\n            dnf -y distro-sync\n            dnf -y install git-lfs\n            dnf -y install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Debian/Ubuntu)'\n        if: ${{ startsWith(matrix.container, 'debian:') || startsWith(matrix.container, 'ubuntu:') }}\n        run: |\n            apt-get -y update\n            apt-get -y upgrade\n            apt-get -y --no-install-recommends install git-lfs\n            apt-get -y --no-install-recommends install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - uses: actions/checkout@v3\n\n      - name: 'Run unit tests'\n        run: |\n          pip3 install -e .\n          python3 setup.py test\n\n      - name: 'Generate coverage reports (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        run: |\n            zypper -n install python3-pytest python3-pytest-cov\n            pytest --cov=osc\n\n      - name: 'Upload coverage reports to Codecov (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        uses: codecov/codecov-action@v3\n```"}
{"id": "63c4a0086fc19abdf9cda03c", "level": "level4", "llm_response": "```yaml\nname: sync zoekt\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Build project\n        run: go build -v ./...\n\n      - name: Create PR\n        id: pr\n        run: |\n          gh pr create --base main --head sync-branch --title \"Sync Zoekt\" --body \"Automated sync of Zoekt\"\n\n      - name: Check PR outputs\n        run: echo \"PR created with number ${{ steps.pr.outputs.number }}\"\n\n      - name: Enable Pull Request Automerge\n        run: |\n          gh pr merge ${{ steps.pr.outputs.number }} --squash --auto\n```", "answer": "```yaml name: sync zoekt\non:\n  push:\n    branches:\n      - main\n\n  workflow_dispatch:\n    branches:\n      - main\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: 'sourcegraph/sourcegraph'\n          ref: 'main'\n      - uses: actions/setup-go@v2\n        with: { go-version: '1.19' }\n      - run: go mod download\n      - run: ./dev/zoekt/update\n      - uses: peter-evans/create-pull-request@v3\n        if: github.event_name == 'push'\n        name: 'Create PR'\n        id: pr\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          title: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          commit-message: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          body: |\n            This PR is autogenerated to update to sourcegraph/zoekt@${{ github.sha }}\n\n            ## Test Plan\n\n            Testing is done on the zoekt repo. All checks on this PR are sufficient.\n\n          branch: 'zoekt/update'\n          delete-branch: 'true'\n          team-reviewers: 'search-core'\n          base: 'main'\n\n      - name: 'Check PR outputs'\n        run: |\n          echo \"Pull Request Number - ${{ steps.pr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}\"\n      - uses: peter-evans/enable-pull-request-automerge@v1\n        name: Enable Pull Request Automerge\n        if: steps.pr.outputs.pull-request-operation == 'created'\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n          merge-method: squash\n          repository: 'sourcegraph/sourcegraph'\n```"}
{"id": "63c498781e33648075787ab4", "level": "level4", "llm_response": "```yaml\nname: Check documentation\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Build documentation\n      run: |\n        make html\n    - name: Upload documentation\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./docs/build/html\n    - name: Check links\n      run: |\n        pip install linkchecker\n        linkchecker http://127.0.0.1:8000\n```", "answer": "```yaml name: Check documentation\non: [push, pull_request]\njobs:\n  docs:\n    name: Build documentation & check links\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.8\"\n      - run: |\n          pip install --constraint=.github/workflows/constraints.txt pip\n          pip install --constraint=.github/workflows/constraints.txt nox\n      - name: Build documentation\n        run: nox --force-color --session=docs\n      - uses: actions/upload-artifact@v3\n        with:\n          name: docs\n          path: docs/_build\n      - name: Check links\n        run: nox --force-color --session=linkcheck\n```"}
{"id": "63c496801899db58864d34ec", "level": "level4", "llm_response": "```yaml\nname: ci\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Test (100% requirement on 100% file)\n        run: npm run e2e:100-100\n      - name: Test (90% requirement on 95% file)\n        run: npm run e2e:90-95\n      - name: Test (100% requirement on 95% file)\n        run: npm run e2e:100-95\n      - name: Test (100% requirement on 95% file with excludes)\n        run: npm run e2e:100-95-excludes\n```", "answer": "```yaml name: 'ci'\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run check_format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test (100% requirement on 100% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.100.info'\n      - name: Test (90% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          min_coverage: 90\n      - name: Test (100% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/*_observer.dart'\n      - name: Test (100% requirement on 95% file with excludes)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/whatever.dart **/*_observer.dart **/does_not_matter.dart'\n```"}
{"id": "63c496c9b008460c1df16a83", "level": "level4", "llm_response": "```yaml\nname: generator\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Update readme\n        run: echo \"Updated on $(date)\" >> README.md\n```", "answer": "```yaml name: generator\n\non:\n  push:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update readme\n        uses: linuxsuren/yaml-readme@v0.0.12\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN_SECRETS }}\n        with:\n          pattern: ''\n          username: linuxsuren\n          org: jenkins-zh\n          repo: jenkins-cli\n```"}
{"id": "63c49c3b1899db58864f8917", "level": "level4", "llm_response": "```yaml\nname: slsa\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ published, prereleased, drafted ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Create checksum file\n        run: echo \"checksum file created\"\n      - name: Upload artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifact\n          path: build-artifact.zip\n\n  generate-provenance:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Download build artifact\n        uses: actions/download-artifact@v2\n        with:\n          name: build-artifact\n      - name: Generate provenance\n        run: echo \"provenance generated\"\n      - name: Upload provenance\n        uses: actions/upload-artifact@v2\n        with:\n          name: provenance\n          path: provenance.json\n```", "answer": "```yaml ---\nname: slsa\non:\n  push:\n  release:\n    types: [published, released]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')\" >> $GITHUB_ENV\n        shell: bash\n\n      - name: checkout repository\n        uses: actions/checkout@master\n\n      - name: create checksum file\n        run: find tests/*.bash tests/*.sh scripts/* misc/* ./*.sh -type f -exec sha256sum {} \\; > ${{ env.REPOSITORY_NAME }}.sha256\n\n      - name: upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: ${{ env.REPOSITORY_NAME }}.sha256\n\n  generate-provenance:\n    needs: build\n    name: generate build provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: download build artifact\n        uses: actions/download-artifact@v3\n\n      - name: generate provenance\n        uses: slsa-framework/github-actions-demo@v0.1\n        with:\n          artifact_path: artifact/\n\n      - name: upload provenance\n        uses: actions/upload-artifact@v3\n        with:\n          path: build.provenance\n```"}
{"id": "63c49c7b517fc08c1eef6ca4", "level": "level4", "llm_response": "```yaml\nname: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment'\n        required: true\n        type: string\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n    steps:\n    - name: \ud83d\udc40 Checkout\n      uses: actions/checkout@v2\n    - name: \u2795 Add `bin` to GITHUB_PATH\n      run: echo \"::add-path::$GITHUB_WORKSPACE/bin\"\n    - name: \u267b\ufe0f Restore caches\n      id: expo-caches\n      uses: actions/cache@v2\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n    - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n      run: echo ${{ github.event.inputs.payload }}\n```", "answer": "```yaml name: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment.'\n        required: true\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n      - name: \u267b\ufe0f Restore caches\n        uses: ./.github/actions/expo-caches\n        id: expo-caches\n        with:\n          yarn-tools: 'true'\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        run: expotools commentator --payload \"${{ github.event.inputs.payload }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n```"}
{"id": "63c49983cbc73931bb18e1ee", "level": "level4", "llm_response": "```yaml\nname: Pre-commit check hooks\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  pre-commit-checks:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run pre-commit large file check\n        run: pre-commit run --files . --all-files --check\n\n      - name: Run pre-commit YAML check\n        run: pre-commit run --files . --all-files --check\n```", "answer": "```yaml name: Pre-commit check hooks\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n\n  pre-commit-checks:\n        \n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: 3.8\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v3\n        with:\n          # Ubuntu-specific, see\n          # https://github.com/actions/cache/blob/main/examples.md#python---pip\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n              python -m pip install --upgrade pip\n              pip install 'pre-commit>=2.10.1'\n        shell: bash\n\n      - name: Run pre-commit large file check\n        run: pre-commit run --all-files check-added-large-files\n\n      - name: Run pre-commit YAML check # for GitHub Actions configs\n        run: pre-commit run --all-files check-yaml\n```"}
{"id": "63c4a19b736e7f0ed8c7be71", "level": "level4", "llm_response": "```yaml\nname: unittest\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.7, 3.8, 3.9, 3.10]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python }}\n      - name: Install nox\n        run: pip install nox\n      - name: Run unit tests\n        run: nox -s unittest\n      - name: Upload coverage results\n        uses: codecov/codecov-action@v2\n\n  cover:\n    runs-on: ubuntu-latest\n    needs: unit\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python }}\n      - name: Install coverage\n        run: pip install coverage\n      - name: Download coverage results\n        run: |\n          mkdir -p .coverage\n          coverage combine .coverage.*\n      - name: Report coverage results\n        run: coverage report\n```", "answer": "```yaml on:\n  pull_request:\n    branches:\n      - main\nname: unittest\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: ['3.7', '3.8', '3.9', '3.10']\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install nox\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install nox\n    - name: Run unit tests\n      env:\n        COVERAGE_FILE: .coverage-${{ matrix.python }}\n      run: |\n        nox -s unit-${{ matrix.python }}\n    - name: Upload coverage results\n      uses: actions/upload-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-${{ matrix.python }}\n\n  cover:\n    runs-on: ubuntu-latest\n    needs:\n        - unit\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install coverage\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install coverage\n    - name: Download coverage results\n      uses: actions/download-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-results/\n    - name: Report coverage results\n      run: |\n        coverage combine .coverage-results/.coverage*\n        coverage report --show-missing --fail-under=99\n```"}
{"id": "63c49a1e1899db58864eb16d", "level": "level4", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [linux, darwin]\n        goarch: [amd64, arm64]\n      include:\n        - goos: windows\n          goarch: amd64\n\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: 0\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Build\n      run: go build -o myapp\n\n    - name: Rename for Windows\n      if: matrix.goos == 'windows'\n      run: mv myapp myapp.exe\n\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v2\n      with:\n        name: myapp-${{ matrix.goos }}-${{ matrix.goarch }}\n        path: myapp.exe\n\n  release:\n    needs: build\n    runs-on: ubuntu-latest\n    if: startsWith(github.ref, 'refs/tags/')\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Show files\n      run: ls -la\n\n    - name: Calc hash\n      run: sha256sum myapp.exe > myapp.exe.sha256\n\n    - name: Release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: ${{ github.ref_name }}\n        release_name: Release ${{ github.ref_name }}\n        draft: false\n        prerelease: false\n        files: myapp.exe, myapp.exe.sha256\n```", "answer": "```yaml name: Build\n\non:\n  push:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [ linux, darwin ]\n        goarch: [ amd64, arm64 ]\n        include:\n          - goos: windows\n            goarch: amd64\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: '0'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n          check-latest: true\n          cache: true\n\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x\n\n\n      - name: Build\n        run: |\n          go generate ./...\n          go build -v -ldflags '-s -w -buildid=' -trimpath -o out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n\n      - name: Rename for Windows\n        if: matrix.goos == 'windows'\n        run: mv out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }} out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}.exe\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n          path: out/*\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Show files\n        run: |\n          pwd\n          find\n\n      - name: Calc hash\n        run: |\n          mkdir -p out\n          cp ./murphysec-linux-amd64/murphysec-linux-amd64 ./out/\n          cp ./murphysec-windows-amd64/murphysec-windows-amd64.exe ./out/\n          cp ./murphysec-darwin-amd64/murphysec-darwin-amd64 ./out/\n          cp ./murphysec-darwin-arm64/murphysec-darwin-arm64 ./out\n          cp ./murphysec-linux-arm64/murphysec-linux-arm64 ./out\n          cd out\n          sha256sum * > sha256sum\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: out/*\n          draft: true\n```"}
{"id": "63c49c446fc19abdf9cc1f4b", "level": "level4", "llm_response": "```yaml\nname: Scala Snippet Checker\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [commented, edited]\n  issue_comment:\n    types: [created, edited]\n\njobs:\n  snippet-runner:\n    runs-on: ubuntu-latest\n    timeout-minutes: 2\n    steps:\n      - name: Check Scala Snippets\n        run: echo \"Checking Scala snippets...\"\n```", "answer": "```yaml name: Scala Snippet Checker\non:\n  issue_comment:\n    types: [created, edited]\n  issues:\n    types: [opened, edited]\n\njobs:\n  snippet-runner:\n    timeout-minutes: 2\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: virtuslab/scala-snippet-checker@main```"}
{"id": "63c49a88517fc08c1eeea9d6", "level": "level4", "llm_response": "```yaml\nname: Hackage, Cabal, Linux\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 2 * * *'\n\nenv:\n  cabalConfig: '--enable-tests --enable-benchmarks --disable-optimization --enable-deterministic'\n\njobs:\n  GHC:\n    id: build10\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ghc: [8.8, 9.0]\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v2\n\n      - name: Haskell env setup\n        id: HaskEnvSetup\n        run: |\n          export GHC_VERSION=${{ matrix.ghc }}\n          export PATH=/opt/ghc/$GHC_VERSION/bin:$PATH\n\n      - name: Install additional system packages\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y cabal-install\n\n      - name: Install Nix\n        run: |\n          sh <(curl -L https://nixos.org/nix/install) --daemon\n\n      - name: Repository update\n        run: |\n          git pull origin master\n\n      - name: Configuration freeze\n        run: |\n          cabal configure ${{ env.cabalConfig }}\n\n      - name: Configuring GitHub cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.cabal\n          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-cache-${{ hashFiles('**/*.cabal') }}\n          restore-keys: |\n            ${{ runner.os }}-ghc-${{ matrix.ghc }}-cache-\n\n      - name: Build\n        run: cabal build\n\n      - name: Tests\n        run: cabal test\n\n      - name: Haddock\n        run: cabal haddock\n\n      - name: Source distribution file\n        run: cabal sdist\n```", "answer": "```yaml name: \"Hackage, Cabal, Linux\"\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: \"45 02 * * *\"\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n\n  build10:\n    name: \"GHC\"\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ghc:\n          [ \"8.8\"\n          , \"9.0\"\n          ]\n    steps:\n\n      - name: \"Git checkout\"\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: \"Haskell env setup\"\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n\n      - name: \"Install additional system packages\"\n        run: sudo apt install libsodium-dev\n\n      #  2020-08-01: NOTE: Nix instantiate still needed for HNix tests\n      - name: \"Install Nix\"\n        uses: cachix/install-nix-action@v17\n\n      - name: \"Repository update\"\n        run: cabal v2-update\n\n      # Freeze is for the caching\n      - name: \"Configuration freeze\"\n        run: cabal v2-freeze $cabalConfig --minimize-conflict-set\n\n      - name: \"Configuring GitHub cache\"\n        uses: actions/cache@v3\n        with:\n          path: |\n            ${{ steps.HaskEnvSetup.outputs.cabal-store }}\n            dist-newstyle\n          key: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}\n          # 2022-04-22: `v2-` added to invalidate corrupted caches, can be removed after one week\n          restore-keys: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-v2-\n\n      - name: \"Build\"\n        run: cabal v2-build $cabalConfig\n\n      - name: \"Tests\"\n        run: cabal v2-test $cabalConfig\n\n      - name: \"Haddock\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-haddock $cabalConfig\n\n      - name: \"Source distribution file\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-sdist\n```"}
{"id": "63c4975e1e33648075780971", "level": "level4", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - sample-extension-dotnet-minimalapi/**\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n      - name: Build .NET Project\n        run: dotnet build sample-extension-dotnet-minimalapi\n      - name: Build the Docker image\n        run: docker build -t sample-extension-dotnet-minimalapi .\n      - name: Slack Notify\n        run: echo \"Notification sent to Slack\"\n```", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c4957f8052faa2781b232b", "level": "level4", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build project\n        run: npm install && npm run build\n```", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - 'v*'\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        with:\n          tag_name: ${{github.ref}}\n          release_name: Release ${{github.ref}}\n          draft: false\n          prerelease: false\n```"}
{"id": "63c49722cbc73931bb17e62d", "level": "level4", "llm_response": "```yaml\nname: Update Prettier\n\non:\n  push:\n    branches:\n      - 'renovate/prettier-*'\n\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Prettier\n        run: npx prettier --write .\n\n      - name: Commit changes\n        run: |\n          git config --global user.name 'github-actions[bot]'\n          git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n          git add .\n          git commit -m 'chore: update files with prettier'\n          git push\n```", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49ced6fc19abdf9cc60fa", "level": "level4", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [created]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c499221e3364807578c18a", "level": "level4", "llm_response": "```yaml\nname: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '**/*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '**/*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Add Custom Problem Matcher\n        run: echo \"::add-matcher::markdownlint.json\"\n\n      - name: npm run markdownlint\n        run: npm run markdownlint\n```", "answer": "```yaml name: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-js-env\n\n      - name: Add Custom Problem Matcher\n        run: |\n          echo \"::add-matcher::.github/matchers/${{ github.job }}.json\"\n\n      - name: npm run markdownlint\n        run: |\n          npm run markdownlint\n```"}
{"id": "63c497321899db58864d7fa4", "level": "level4", "llm_response": "```yaml\nname: Docs Preview\n\non:\n  workflow_run:\n    workflows: [\"CI\"]\n    types: [completed]\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n\n    steps:\n    - name: Download artifact\n      # Add steps to download the artifact\n\n    - name: Unzip artifact\n      # Add steps to unzip the artifact\n\n    - name: Deploy PR preview\n      id: deploy_preview\n      # Add steps to deploy the PR preview\n\n    - name: Comment PR preview URL\n      # Add steps to comment the PR preview URL\n```", "answer": "```yaml name: Docs Preview\n\nenv:\n  CARGO_TERM_COLOR: always\n\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n    steps:\n      - name: Download artifact\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: context.payload.workflow_run.id,\n            });\n            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"docs\";\n            })[0];\n            let download = await github.rest.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            let fs = require('fs');\n            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs.zip`, Buffer.from(download.data));\n      \n      - name: Unzip artifact\n        run: |\n          unzip docs.zip\n          tar -xf docs.tar.zstd\n\n      - name: Deploy PR preview\n        continue-on-error: true\n        id: deploy_preview\n        uses: dswistowski/surge-sh-action@v1.0.1\n        with:\n          domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n          project: doc\n          login: ${{ secrets.SURGE_LOGIN }}\n          token: ${{ secrets.SURGE_TOKEN }}\n\n      - name: Comment PR preview URL\n        if: steps.deploy_preview.outcome == 'success'\n        uses: Beakyn/gha-comment-pull-request@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          pull-request-number: ${{ github.event.workflow_run.pull_requests[0].number }}\n          description-message: |\n            ----\n            Preview: https://pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n```"}
{"id": "63c49c4d1e3364807579ff48", "level": "level4", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      event_type:\n        required: true\n        type: string\n        description: 'The event type that triggered the workflow'\n\njobs:\n  build:\n    id: build\n    runs-on: windows-2022\n\n    steps:\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Check out source code\n      uses: actions/checkout@v2\n\n    - name: Build\n      run: |\n        go build -v ./...\n\n    - name: Upload to spaces and s3\n      run: |\n        ./upload.sh\n```", "answer": "```yaml name: Build\r\non:\r\n  push:\r\n  pull_request:\r\n  repository_dispatch:\r\n    types: [build-pre-rel]\r\njobs:\r\n  build:\r\n    name: Build\r\n    runs-on: windows-2022\r\n    steps:\r\n      - name: Set up Go\r\n        uses: actions/setup-go@v3\r\n        with:\r\n          go-version: 1.17\r\n\r\n      - name: Check out source code\r\n        uses: actions/checkout@v3\r\n        with:\r\n          # needed to calc build number via git log --oneline\r\n          fetch-depth: 0\r\n\r\n      - name: Build\r\n        env:\r\n          CERT_PWD: ${{ secrets.CERT_PWD }}\r\n        run: .\\doit.bat -ci\r\n\r\n      # a separate step from -ci to make logs easier to read\r\n      - name: Upload to spaces and s3\r\n        env:\r\n          AWS_SECRET: ${{ secrets.AWS_SECRET }}\r\n          AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\r\n          BB_SECRET: ${{ secrets.BB_SECRET }}\r\n          BB_ACCESS: ${{ secrets.BB_ACCESS }}\r\n          SPACES_KEY: ${{ secrets.SPACES_KEY }}\r\n          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\r\n          WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\r\n          WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\r\n        run: .\\doit.bat -ci-upload\r\n```"}
{"id": "63c4976dcbc73931bb1805bb", "level": "level4", "llm_response": "```yaml\nname: Build & Test NStack\n\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n    branches:\n      - main\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install GitVersion\n        uses: gittools/actions/gitversion@v0.9.1\n        with:\n          runtime: 'dotnet'\n\n      - name: Determine Version\n        id: gitversion\n        uses: gittools/actions/gitversion@v0.9.1\n        with:\n          runtime: 'dotnet'\n\n      - name: Display GitVersion outputs\n        run: |\n          echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n          echo \"Commits since version source: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build Debug\n        run: dotnet build --configuration Debug\n\n      - name: Test\n        run: dotnet test --configuration Debug\n\n    outputs:\n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\n```", "answer": "```yaml name: Build & Test NStack\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    outputs: \n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} \n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0 #fetch-depth is needed for GitVersion\n\n    #Install and calculate the new version with GitVersion  \n    - name: Install GitVersion\n      uses: gittools/actions/gitversion/setup@v0.9.13\n      with:\n        versionSpec: 5.x\n    - name: Determine Version\n      uses: gittools/actions/gitversion/execute@v0.9.13\n      id: gitversion # step id used as reference for output values\n    - name: Display GitVersion outputs\n      run: |\n        echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n        echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: 6.0.x\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build Debug\n      run: |\n       dotnet-gitversion /updateprojectfiles \n       dotnet build --no-restore -c Debug\n\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```"}
{"id": "63c49f2733b087f6bde6470b", "level": "level4", "llm_response": "```yaml\nname: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check Markdown Links\n        run: |\n          pip install markdown-link-check\n          markdown-link-check .\n```", "answer": "```yaml name: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n      with:\n        fetch-depth: 1\n    - uses: gaurav-nelson/github-action-markdown-link-check@master\n```"}
{"id": "63c4a0901899db5886514714", "level": "level4", "llm_response": "```yaml\nname: test-coverage\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: test-coverage\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main```"}
{"id": "63c497cf6fc19abdf9ca5032", "level": "level4", "llm_response": "```yaml\nname: linting & test coverage - linux\n\non:\n  push:\n    branches: [ master, develop ]\n  pull_request:\n\nenv:\n  CI: \"True\"\n\njobs:\n  check:\n    runs-on: ${{ matrix.platform }}\n    strategy:\n      matrix:\n        node-version: [18.x]\n        platform: [ubuntu-latest]\n      fail-fast: true\n\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n    - name: Step 1\n    - name: Step 2\n    - name: Step 3\n    - name: install & build\n    - name: lint & forbidden dependency check\n    - name: Step 6\n    - name: Step 7\n```", "answer": "```yaml name: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: true\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  check:\n    strategy:\n      fail-fast: true\n      matrix:\n        node-version:\n          - 18.x\n        platform:\n          - ubuntu-latest\n\n    runs-on: ${{matrix.platform}}\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}\n          restore-keys: |\n            ${{matrix.node-version}}@${{matrix.platform}}-build-\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{matrix.node-version}}\n      - name: install & build\n        run: |\n          npm install\n          npm run build\n      - name: lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run depcruise\n      - run: npm run test:cover\n      - uses: paambaati/codeclimate-action@v3.0.0\n        env:\n          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n```"}
{"id": "63c49e951e336480757ae6d2", "level": "level4", "llm_response": "```yaml\nname: build-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: echo \"Step 1\"\n      - name: Step 2\n        run: echo \"Step 2\"\n```", "answer": "```yaml name: \"build-test\"\non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build: # make sure build/ci work properly\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: |\n        npm install\n        npm run all\n```"}
{"id": "63c4a0956fc19abdf9cdd93b", "level": "level4", "llm_response": "```yaml\nname: first startup\n\non:\n  push:\n    paths-ignore:\n      - doc/**\n      - lib/galaxy_test/selenium/**\n  pull_request:\n    paths-ignore:\n      - doc/**\n      - lib/galaxy_test/selenium/**\n\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.7, 3.10]\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - name: \"\"\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        run: echo \"##[set-output name=python_version;env=PYTHON_VERSION]$(python --version)\"\n      - name: Cache pip dir\n        id: pip-cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n      - name: Cache tox env\n        uses: actions/cache@v2\n        with:\n          path: ~/.tox\n          key: ${{ runner.os }}-tox-${{ hashFiles('**/tox.ini') }}\n          restore-keys: |\n            ${{ runner.os }}-tox-\n      - name: \"\"\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox\n```", "answer": "```yaml name: first startup\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n\n  test:\n    name: Startup test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7', '3.10']\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        id: pip-cache\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache tox env\n        uses: actions/cache@v3\n        with:\n          path: .tox\n          key: tox-cache-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}-first-startup\n      - uses: mvdbeek/gha-yarn-cache@master\n        with:\n          yarn-lock-file: 'galaxy root/client/yarn.lock'\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox -e first_startup\n        working-directory: 'galaxy root'\n```"}
{"id": "63c494187843b612699fef52", "level": "level4", "llm_response": "```yaml\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Enable debug mode'\n        required: false\n        default: 'false'\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    if: github.repository_owner == 'HariSekhon'\n    id: validate\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Validate CODEOWNERS\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c495678052faa2781b1912", "level": "level4", "llm_response": "```yaml\nname: External Trigger Scheduler\n\non:\n  schedule:\n    - cron: '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: ''\n        run: echo \"This step is intentionally left blank.\"\n\n      - name: External Trigger Scheduler\n        run: echo \"Running the External Trigger Scheduler step.\"\n```", "answer": "```yaml name: External Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-swag/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```"}
{"id": "63c49dcf517fc08c1eeff4cc", "level": "level4", "llm_response": "```yaml\nname: Check for semantic PR title\n\non:\n  pull_request:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n  pull_request_target:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        run: |\n          # Add your logic to check if the PR is a reverted PR\n          echo \"::set-output name=is_reverted_pr::false\"\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - name: Check semantic PR title\n        # Add your logic to check semantic PR title\n        run: echo \"Semantic PR check passed\"\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    env:\n      STATUS: ':heavy_check_mark:'\n      check-type: 'Semantic PR check'\n      check-documentation: 'See [instructions on formatting your commit and pull request titles](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format).'\n    steps:\n      - name: Comment on PR\n        # Add your logic to comment on PR\n        run: echo \"PR comment\"\n      - name: fc\n        # Add your logic for step fc\n        run: echo \"Step fc\"\n      - name: \n        # Add your logic for the last step\n        run: echo \"Last step\"\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Check for semantic PR title\"\n\non:\n  # Semantic PR module only works with pull_request_target\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - edited\n      - synchronize\n      - ready_for_review\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - uses: amannn/action-semantic-pull-request@01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb # pin@v5.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            docs\n            style\n            refactor\n            perf\n            test\n            build\n            ci\n            chore\n            revert\n          # Configure which scopes are allowed.\n          scopes: |\n            aaa_server\n            agw\n            amf\n            ci\n            cloud\n            connectiond\n            control_proxy\n            csfb\n            ctraced\n            cwg\n            deps\n            deps-dev\n            directoryd\n            dp\n            eap\n            eap_aka\n            eap_sim\n            enodebd\n            envoy_controller\n            eventd\n            feg\n            feg_hello\n            feg_relay\n            health\n            lte\n            magmad\n            mme\n            mobilityd\n            monitord\n            nms\n            orc8r\n            pipelined\n            policydb\n            radiusd\n            redirectd\n            redis\n            s6a_proxy\n            s8_proxy\n            sctpd\n            session_proxy\n            sessiond\n            smf\n            smsd\n            state\n            subscriberdb\n            swx_proxy\n            td-agent-bit\n            upf\n          # Configure that a scope must always be provided.\n          requireScope: false\n          # For work-in-progress PRs you can typically use draft pull requests\n          # from GitHub. However, private repositories on the free plan don't have\n          # this option and therefore this action allows you to opt in to using the\n          # special \"[WIP]\" prefix to indicate this state. This will avoid the\n          # validation of the PR title and the pull request checks remain pending.\n          # Note that a second check will be reported if this is enabled.\n          wip: true\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub\n          # will suggest using that commit message instead of the PR title for the\n          # merge commit, and it's easy to commit this by mistake. Enable this option\n          # to also validate the commit message for one commit PRs.\n          validateSingleCommit: true\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    env:\n      STATUS: ':heavy_check_mark:'\n      check-type: Semantic PR check\n      check-documentation: See [instructions on formatting your commit and pull request titles](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format).\n    steps:\n      - if: needs.check-semantic-pr.result == 'failure'\n        run: echo 'STATUS=:x:' >> $GITHUB_ENV\n      - uses: peter-evans/find-comment@b657a70ff16d17651703a84bee1cb9ad9d2be2ea # pin@v2.0.1\n        id: fc\n        with:\n          issue-number: ${{ github.event.number }}\n          body-includes: ${{ env.check-type }}\n      - uses: thollander/actions-comment-pull-request@686ab1cab89e0f715a44a0d04b9fdfdd4f33d751 # pin@v1.4.1\n        if: >\n          (needs.check-semantic-pr.result == 'failure')\n          || (steps.fc.outputs.comment-id != '')\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment_includes: ${{ env.check-type }}\n          message: |\n            ${{ env.STATUS }} The **${{ env.check-type }}** ended with status **${{ needs.check-semantic-pr.result }}**. ${{ env.check-documentation }}\n```"}
{"id": "63c49b0d1842bc13d777adfa", "level": "level4", "llm_response": "```yaml\nname: pr2changelog\n\non:\n  pull_request:\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - created\n\npaths-ignore:\n  - CHANGELOG.md\n\njobs:\n  changelog generator dry check:\n    id: dry_check\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: pr2changelog\n        id: pr2changelog\n        run: echo \"Running dry check\"\n      - name: Comment PR\n        run: echo \"Commenting PR\"\n\n  changelog generator:\n    id: after_merge\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: pr2changelog\n        id: pr2changelog\n        run: echo \"Generating changelog\"\n      - name: Comment PR\n        run: echo \"Commenting PR\"\n```", "answer": "```yaml name: pr2changelog\non:\n  pull_request_target:\n    paths-ignore:\n      - \"CHANGELOG.md\"\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - opened\n\njobs:\n  dry_check:\n    if: github.event.pull_request.merged == false\n\n    name: changelog generator dry check\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.found_changes == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR has no registered changes in its description!\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  after_merge:\n    if: github.event.pull_request.merged == true\n\n    name: changelog generator\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          api_secret_token: ${{ secrets.CHANGELOG_API_SECRET }}\n          api_url: \"https://changelog.unitystation.org/register-change\"\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.generated_changelog == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR was merged with no registered changes or there was a problem with the API caller.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c498cab008460c1df23749", "level": "level4", "llm_response": "```yaml\nname: xcodebuild\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  Xcode:\n    runs-on: macos-12\n    strategy:\n      matrix:\n        xcode_version: [13.3, 13.4.1]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set DEVELOPER_DIR\n        run: echo \"DEVELOPER_DIR=/Applications/Xcode_${{ matrix.xcode_version }}.app\" >> $GITHUB_ENV\n      - name: Run xcodebuild\n        run: xcodebuild -workspace YourWorkspace.xcworkspace -scheme YourScheme -configuration Release\n```", "answer": "```yaml name: xcodebuild\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: ['*']\n\njobs:\n  Xcode:\n    strategy:\n      matrix:\n        xcode_version: ['13.3', '13.4.1']\n    runs-on: macos-12\n    env:\n      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app\n    steps:\n      - uses: actions/checkout@v3\n      - run: xcodebuild -version\n      - run: xcodebuild -scheme sourcekitten -parallel-testing-enabled NO test -destination platform=macOS\n```"}
{"id": "63c4a11fb008460c1df58525", "level": "level4", "llm_response": "```yaml\nname: Conventional Commits\n\non:\n  pull_request:\n    branches: [ '*' ]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Run conventional commits check\n      run: dotnet tool install -g conventionalcommits\n      env:\n        DOTNET_ROOT: ${{ github.workspace }}/.dotnet\n        PATH: ${{ github.workspace }}/.dotnet:$PATH\n```", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - '**'\n\njobs:\n  build:\n    name: Conventional Commits\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: webiny/action-conventional-commits@v1.1.0\n```"}
{"id": "63c49d8d517fc08c1eefd9b0", "level": "level4", "llm_response": "```yaml\nname: Go Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  unit:\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    strategy:\n      matrix:\n        os: [ubuntu, windows, macos]\n        go: [1.18.x, 1.19.x]\n    env:\n      COVERAGES: \"\"\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Go information\n      run: go version && go env\n\n    - name: Use msys2 on windows\n      if: matrix.os == 'windows'\n      run: |\n        choco install msys2 -y\n        $env:PATH = \"C:\\msys64\\usr\\bin;$env:PATH\"\n\n    - name: Run repo-specific setup\n      run: echo \"Running repo-specific setup\"\n\n    - name: Run tests\n      run: go test -v ./...\n\n    - name: Run tests (32 bit)\n      run: go test -v -tags 32bit ./...\n\n    - name: Run tests with race detector\n      run: go test -v -race ./...\n\n    - name: Collect coverage files\n      run: go test -v -coverprofile=coverage.out ./...\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        file: coverage.out\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Test\n\njobs:\n  unit:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ \"ubuntu\", \"windows\", \"macos\" ]\n        go: [ \"1.18.x\", \"1.19.x\" ]\n    env:\n      COVERAGES: \"\"\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    name: ${{ matrix.os }} (go ${{ matrix.go }})\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Go information\n        run: |\n          go version\n          go env\n      - name: Use msys2 on windows\n        if: ${{ matrix.os == 'windows' }}\n        shell: bash\n        # The executable for msys2 is also called bash.cmd\n        #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#shells\n        # If we prepend its location to the PATH\n        #   subsequent 'shell: bash' steps will use msys2 instead of gitbash\n        run: echo \"C:/msys64/usr/bin\" >> $GITHUB_PATH\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-test-setup\n        if: hashFiles('./.github/actions/go-test-setup') != ''\n      - name: Run tests\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          # Use -coverpkg=./..., so that we include cross-package coverage.\n          # If package ./A imports ./B, and ./A's tests also cover ./B,\n          # this means ./B's coverage will be significantly higher than 0%.\n          run: go test -v -shuffle=on -coverprofile=module-coverage.txt -coverpkg=./... ./...\n      - name: Run tests (32 bit)\n        if: ${{ matrix.os != 'macos' }} # can't run 32 bit tests on OSX.\n        uses: protocol/multiple-go-modules@v1.2\n        env:\n          GOARCH: 386\n        with:\n          run: |\n            export \"PATH=${{ env.PATH_386 }}:$PATH\"\n            go test -v -shuffle=on ./...\n      - name: Run tests with race detector\n        if: ${{ matrix.os == 'ubuntu' }} # speed things up. Windows and OSX VMs are slow\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go test -v -race ./...\n      - name: Collect coverage files\n        shell: bash\n        run: echo \"COVERAGES=$(find . -type f -name 'module-coverage.txt' | tr -s '\\n' ',' | sed 's/,$//')\" >> $GITHUB_ENV\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0\n        with:\n          files: '${{ env.COVERAGES }}'\n          env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}\n```"}
{"id": "63c494cd8052faa2781ad6e7", "level": "level4", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    id: build\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install deps (Linux)\n        if: matrix.os == 'ubuntu-latest'\n        run: sudo apt-get update && sudo apt-get install -y build-essential\n\n      - name: Install deps (macOS)\n        if: matrix.os == 'macos-latest'\n        run: brew install gcc\n\n      - name: Build\n        run: make\n\n      - name: Test\n        run: make test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: build\n\n  wasm:\n    id: wasm\n    runs-on: ubuntu-latest\n    env:\n      WASI_VERSION: 12\n      BINARYEN_VERSION: 109\n      WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set environment (1/3)\n        run: echo \"Setting environment variable 1\"\n\n      - name: Set environment (2/3)\n        run: echo \"Setting environment variable 2\"\n\n      - name: Set environment (3/3)\n        run: echo \"Setting environment variable 3\"\n\n      - name: Add Homebrew to $PATH\n        run: echo \"/usr/local/bin:$PATH\" >> $GITHUB_ENV\n\n      - name: Install WASI SDK\n        run: brew install wasi-sdk\n\n      - name: Install Binaryen\n        run: brew install binaryen\n\n      - name: Setup Wasmer\n        run: echo \"Setting up Wasmer\"\n\n      - name: Build\n        run: make wasm\n\n      - name: Test\n        run: make wasm-test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: wasm-artifacts\n          path: wasm\n\n      - name: Publish on WAPM\n        run: wapm publish\n```", "answer": "```yaml   name: Build\n\n  on:\n    create:\n      tags:\n    push:\n      branches:\n        - main\n    pull_request:\n\n  jobs:\n    build:\n      name: Native\n      runs-on: ${{ matrix.os }}\n      strategy:\n        fail-fast: false\n        matrix:\n          os:\n            - ubuntu-latest\n            - macos-latest\n      steps:\n        - uses: actions/checkout@v1\n        - name: Install deps (Linux)\n          run: |\n            sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev\n          if: matrix.os == 'ubuntu-latest'\n        - name: Install deps (macOS)\n          run: |\n            brew install readline vim libffi openssl make\n            echo \"$(brew --prefix)/opt/make/libexec/gnubin\" >> $GITHUB_PATH\n          if: matrix.os == 'macos-latest'\n        - name: Build\n          run: make release\n        - name: Test\n          run: make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: ${{ format( 'tpl-{0}', matrix.os) }}\n            path: tpl\n\n    # Roughly matches https://github.com/WebAssembly/wasi-sdk#install\n    wasm:\n      name: WebAssembly\n      runs-on: ubuntu-latest\n      env:\n        WASI_VERSION: 12\n        BINARYEN_VERSION: 109\n        WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n      steps:\n        - uses: actions/checkout@v1\n        - name: Set environment (1/3)\n          run: |\n            echo \"WASI_VERSION_FULL=${WASI_VERSION}.0\" >> $GITHUB_ENV\n            echo \"RELEASE_VERSION=`git tag --points-at HEAD | sed 's/^v//'`\" >> $GITHUB_ENV\n        - name: Set environment (2/3)\n          run: |\n            echo \"WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}\" >> $GITHUB_ENV\n        - name: Set environment (3/3)\n          run: |\n            echo \"WASI_CC=${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot\" >> $GITHUB_ENV\n        - name: Add Homebrew to $PATH\n          run: echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH\n        - name: Install WASI SDK\n          run: |\n            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n            tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n        - name: Install Binaryen\n          run: brew install binaryen\n        - name: Setup Wasmer\n          uses: wasmerio/setup-wasmer@v1\n        - name: Build\n          run: |\n            make clean\n            make wasm\n        - name: Test\n          run: |\n            echo 'wasmer --dir . tpl.wasm -- $@' > tpl\n            chmod +x tpl\n            make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: tpl.wasm\n            path: tpl.wasm\n        - name: Publish on WAPM\n          run: |\n            sed -i \"s/__RELEASE_VERSION__/$RELEASE_VERSION/\" wapm.toml\n            wapm login $WAPM_REGISTRY_TOKEN\n            wapm publish\n          if: ${{ env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != '' }}\n```"}
{"id": "63c49a0b1842bc13d7774640", "level": "level4", "llm_response": "```yaml\nname: auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Merge pull request\n      run: |\n        git config --global user.name 'github-actions[bot]'\n        git config --global user.email 'github-actions[bot]@users.noreply.github.com'\n        git pull origin main\n        git push origin main\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          # auto-merge rules are in /.github/auto-merge.yml\n          github-token: ${{ secrets.AUTO_MERGE_TOKEN }}```"}
{"id": "63c49e4bb008460c1df46891", "level": "level4", "llm_response": "```yaml\nname: Build PR for MyPet\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: ''\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK 17\n      uses: actions/setup-java@v2\n      with:\n        java-version: '17'\n        distribution: 'adopt'\n\n    - name: Cache local Maven repository\n      uses: actions/cache@v2\n      with:\n        path: ~/.m2\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        restore-keys: |\n          ${{ runner.os }}-m2-\n\n    - name: Install Dependencies\n      run: mvn dependency:go-offline\n\n    - name: Compile\n      run: mvn compile\n```", "answer": "```yaml name: Build PR for MyPet\n\non:\n  pull_request:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: \"\"\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: 17\n          distribution: 'microsoft'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/install_dependencies.sh') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Dependencies\n        run: ./install_dependencies.sh\n\n      - name: Compile\n        run: mvn --batch-mode package -DGIT_COMMIT=${{ github.sha }} -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e901e336480757ae4de", "level": "level4", "llm_response": "```yaml\nname: deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          profile: minimal\n          override: true\n\n      - name: Build\n        run: cargo build --release\n\n      - name: Package\n        run: cargo package --allow-dirty\n\n      - name: Release\n        run: echo \"Release step\"\n```", "answer": "```yaml name: deploy\n\non:\n  push:\n    tags: \n      - \"v*.*.*\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: jetli/wasm-pack-action@v0.3.0\n      with:\n        # Optional version of wasm-pack to install(eg. '0.9.1', 'latest')\n        version: 'latest'\n    - name: Build\n      run: |\n        cp .env.example .env\n        npm run install\n        npm run build\n    - name: Package\n      shell: bash\n      run: |\n        tar czvf target/conduit-wasm.tar.gz crates/conduit-wasm/dist\n        zip -r target/conduit-wasm.zip crates/conduit-wasm/dist\n        shasum -a 256 target/conduit-wasm.tar.gz > target/conduit-wasm.tar.gz.sha256\n        shasum -a 256 target/conduit-wasm.zip > target/conduit-wasm.zip.sha256\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: |\n          target/conduit-wasm.tar.gz\n          target/conduit-wasm.tar.gz.sha256\n          target/conduit-wasm.zip\n          target/conduit-wasm.zip.sha256\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c493ba7843b612699fd3ef", "level": "level4", "llm_response": "```yaml\nname: Windows\n\non:\n  push:\n    paths-ignore:\n      - README.md\n      - doc/**\n  pull_request:\n    paths-ignore:\n      - README.md\n      - doc/**\n\njobs:\n  vs2022:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Step 1\n        run: |\n          # Step 1 command\n      - name: Step 2\n        run: |\n          # Step 2 command\n      - name: Step 3\n        run: |\n          # Step 3 command\n      - name: Step 4\n        run: |\n          # Step 4 command\n      - name: Step 5\n        run: |\n          # Step 5 command\n\n  vs2022-clang:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Step 1\n        run: |\n          # Step 1 command\n      - name: Step 2\n        run: |\n          # Step 2 command\n      - name: Step 3\n        run: |\n          # Step 3 command\n      - name: Step 4\n        run: |\n          # Step 4 command\n      - name: Step 5\n        run: |\n          # Step 5 command\n\n  vs2019:\n    runs-on: windows-2019\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Step 1\n        run: |\n          # Step 1 command\n      - name: Step 2\n        run: |\n          # Step 2 command\n      - name: Step 3\n        run: |\n          # Step 3 command\n      - name: Step 4\n        run: |\n          # Step 4 command\n      - name: Step 5\n        run: |\n          # Step 5 command\n\n  vs2019-clang:\n    runs-on: windows-2019\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Step 1\n        run: |\n          # Step 1 command\n      - name: Step 2\n        run: |\n          # Step 2 command\n      - name: Step 3\n        run: |\n          # Step 3 command\n      - name: Step 4\n        run: |\n          # Step 4 command\n      - name: Step 5\n        run: |\n          # Step 5 command\n```", "answer": "```yaml name: Windows\n\non:\n  push:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n\njobs:\n  vs2022:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON\n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2022-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -T ClangCL -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -T ClangCL  -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n```"}
{"id": "63c4a18b736e7f0ed8c7b8f2", "level": "level4", "llm_response": "```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - 'release/*'\n\njobs:\n  create-github-release:\n    id: create-github-release\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    environment: Release\n    steps:\n      - name: Step 1\n        run: echo \"Step 1\"\n      - name: Step 2\n        run: echo \"Step 2\"\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aa5b008460c1df2f2ad", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [javascript, python]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n\n      - name: Autobuild\n        run: |\n          if [ \"$language\" == \"javascript\" ]; then\n            npm install\n            npm run build\n          elif [ \"$language\" == \"python\" ]; then\n            pip install -r requirements.txt\n            python setup.py build\n          fi\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49d3433b087f6bde57d7c", "level": "level4", "llm_response": "```yaml\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - .github/workflows/*\n      - !.github/workflows/debian_8.yaml\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - .gitconfig*\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    if: github.repository_owner == 'HariSekhon'\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c4991f33b087f6bde3d444", "level": "level4", "llm_response": "```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```"}
{"id": "63c5c656c779603593c9f31a", "level": "level4", "llm_response": "```yaml\nname: Dependencies check\n\non:\n  workflow_dispatch:\n    inputs:\n      head_sha:\n        description: 'Head SHA'\n        required: true\n        type: string\n      base_sha:\n        description: 'Base SHA'\n        required: true\n        type: string\n      target_branch:\n        description: 'Target branch'\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    id: validate_submodules_and_ls_dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.sha }}\n      - name: Validate\n        run: echo \"Validating submodules and dependencies\"\n```", "answer": "```yaml name: \"Dependencies check\"\n\non:\n  workflow_call:\n    inputs:\n      head_sha:\n        required: true\n        type: string\n      base_sha:\n        required: true\n        type: string\n      target_branch:\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    name: \"Submodules/deps\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: hmarr/debug-action@v2.1.0\n\n      - name: Validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const {repo, owner} = context.repo;\n            const head_sha = '${{ inputs.head_sha }}'\n            const base_sha = '${{ inputs.base_sha }}'\n            const targetBranch = '${{ inputs.target_branch }}'.replace('refs/heads/', '')\n            const strictCheckBranchPrefixes = ['ls-release/']\n\n            let submodules = [\n                {owner: 'heartexlabs', repo: 'label-studio-frontend'},\n                {owner: 'heartexlabs', repo: 'dm2'}\n            ]\n            \n            \n            async function getLSSubmoduleVersions(sha) {\n                let {data: lsTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: sha\n                })\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'label_studio' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'frontend' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dist' && e.type === 'tree').sha\n                })).data\n                const {data: lsDMTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dm' && e.type === 'tree').sha\n                })\n                const {data: dmfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsDMTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const dmVersionContent = Buffer.from(dmfVersion.content, dmfVersion.encoding).toString(\"utf8\")\n                const matchDM = dmVersionContent.match('\"commit\": \"(.*)\",')\n                const {data: lsLSFTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'lsf' && e.type === 'tree').sha\n                })\n                const {data: lsfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsLSFTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const lsfVersionContent = Buffer.from(lsfVersion.content, lsfVersion.encoding).toString(\"utf8\")\n                const matchLSF = lsfVersionContent.match('\"commit\": \"(.*)\",')\n                return {\n                    'label-studio-frontend': matchLSF[1],\n                    'dm2': matchDM[1],\n                }\n            }\n            \n            let base_sha_redacted = base_sha\n            if (base_sha_redacted === '0000000000000000000000000000000000000000') {\n                console.log(`Branch creation event. Using head_sha (${head_sha}) parent as base_sha`)\n                const {data: commit} = await github.rest.git.getCommit({\n                    owner,\n                    repo,\n                    commit_sha: head_sha,\n                });\n                console.log(commit.parents)\n                base_sha_redacted = commit.parents[0].sha\n            }\n            \n            const baseVersions = await getLSSubmoduleVersions(base_sha_redacted)\n            console.log(`before: ${base_sha_redacted}`)\n            console.log(baseVersions)\n            \n            const headVersions = await getLSSubmoduleVersions(head_sha)\n            console.log(`after: ${head_sha}`)\n            console.log(headVersions)\n            \n            const strictCheck = strictCheckBranchPrefixes.some(e => targetBranch.startsWith(e))\n            console.log(`Strict check: ${strictCheck}`)\n            \n            let failed = []\n            for (let submodule of submodules) {\n                if (baseVersions[submodule.repo] === headVersions[submodule.repo] && !strictCheck) {\n                    console.log(`${submodule.repo}: Is not changed`)\n                    continue\n                }\n            \n                const {data: submoduleRepo} = await github.rest.repos.get({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                });\n                const submoduleBranch = targetBranch === 'develop' ? submoduleRepo.default_branch : targetBranch\n                const {data: listCommits} = await github.rest.repos.listCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    per_page: 100,\n                    sha: submoduleBranch\n                });\n            \n                const commits = listCommits.map(e => e.sha)\n            \n                const headCommitNumber = commits.indexOf(headVersions[submodule.repo])\n                if (headCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${headVersions[submodule.repo]} from PR is not found in submodule ${submoduleBranch} branch`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n                if (strictCheck && headCommitNumber !== 0) {\n                    console.log(`${submodule.repo}: For the release branch, submodule should be pointed to the latest commit in submodule corresponding release branch which is ${listCommits[0].html_url}`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n            \n                const baseCommitNumber = commits.indexOf(baseVersions[submodule.repo])\n                if (baseCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${baseVersions[submodule.repo]} from ${targetBranch} is not found in submodule ${submoduleBranch} branch`)\n                    continue\n                }\n            \n                const {data: compare} = await github.rest.repos.compareCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    base: baseVersions[submodule.repo],\n                    head: headVersions[submodule.repo],\n                });\n                console.log(`${submodule.repo}: ${headVersions[submodule.repo]} is ${compare.ahead_by} ahead and ${compare.behind_by} behind ${baseVersions[submodule.repo]}: ${compare.html_url}`)\n                if (compare.behind_by > 0) {\n                    failed.push(submodule.repo)\n                    continue\n                }\n            }\n            \n            if (failed.length !== 0) {\n                throw `Versions for ${failed.toString()} are downgraded or not found`;\n            }\n```"}
{"id": "63c4a0196fc19abdf9cda745", "level": "level4", "llm_response": "```yaml\nname: Announce Release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    id: bump-aur-package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        run: echo \"${{ secrets.AUR_SSH_KEY }}\" | ssh-add -\n      - name: Bump AUR Package\n        run: |\n          git clone $AUR_REPO\n          cd usql\n          # Add steps to bump the AUR package\n          git commit -am \"Bump version to $VER\"\n          git push\n\n  bump-homebrew-formula:\n    id: bump-homebrew-formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          git clone $HOMEBREW_REPO\n          cd homebrew-xo\n          # Add steps to bump the Homebrew formula\n          git commit -am \"Bump version to $VER\"\n          git push\n\n  announce-discord:\n    id: announce-discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          # Add steps to announce the release on Discord\n          echo \"Release $VER has been published!\"\n```", "answer": "```yaml name: Announce Release\n\non:\n  release:\n    types: [published]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    name: Bump AUR Package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n          name: id_ed25519\n          known_hosts: |\n            aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN\n            aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=\n            aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=\n      - name: Bump AUR Package\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/aur-usql.XXXXXX)\n          export REPO_PATH=$WORKDIR/aur-usql\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $AUR_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'kenshaw@gmail.com'\n          sed -i \"s/pkgver=.*$/pkgver=${VER#v}/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/sha256sums=.*$/sha256sums=('$SHA256SUM')/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgrel=.*$/pkgrel=1/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgver =.*$/pkgver = ${VER#v}/\" $REPO_PATH/.SRCINFO\n          sed -i \"s%source =.*$%source = usql-${VER#v}.tar.gz::https://github.com/xo/usql/archive/${VER}.tar.gz%\" $REPO_PATH/.SRCINFO\n          sed -i \"s/sha256sums =.*$/sha256sums = $SHA256SUM/\" $REPO_PATH/.SRCINFO\n          sed -i \"s/pkgrel =.*$/pkgrel = 1/\" $REPO_PATH/.SRCINFO\n          git -C $REPO_PATH add PKGBUILD .SRCINFO\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  bump-homebrew-formula:\n    name: Bump Homebrew Formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/homebrew-xo.XXXXXX)\n          export REPO_PATH=$WORKDIR/homebrew-xo\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $HOMEBREW_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'ken@usql.app'\n          sed -i \"s%url \\\".*$%url \\\"https://github.com/xo/usql/archive/${VER}.tar.gz\\\"%\" $REPO_PATH/Formula/usql.rb\n          sed -i \"s/sha256 \\\".*$/sha256 \\\"$SHA256SUM\\\"/\" $REPO_PATH/Formula/usql.rb\n          git -C $REPO_PATH add Formula/usql.rb\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  announce-discord:\n    name: Announce Discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          curl \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"username\": \"usql\", \"content\": \"> *usql ${{ github.ref_name }}* has been released!\\n\\nGet it here: https://github.com/xo/usql/releases/${{ github.ref_name }}\"}' \\\n            ${{ secrets.DISCORD_WEBHOOK_URL }}\n```"}
{"id": "63c49994517fc08c1eee4a14", "level": "level4", "llm_response": "```yaml\nname: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install Go\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y golang\n\n    - name: Checkout source\n      uses: actions/checkout@v2\n\n    - name: golangci-lint\n      run: |\n        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1\n        golangci-lint run\n```", "answer": "```yaml on: [push, pull_request]\nname: Lint\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n```"}
{"id": "63c49aab1e33648075795bea", "level": "level4", "llm_response": "```yaml\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: string\n\njobs:\n  failed-workflow:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - name: Rerun a workflow\n        run: |\n          echo \"Rerunning workflow with ID: ${{ github.event.inputs.run_id }}\"\n```", "answer": "```yaml ##\n# Performs follow-up tasks when a workflow fails or is cancelled.\n##\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: 'string'\n\njobs:\n  # Attempts to rerun a workflow.\n  #\n  # Performs the following steps:\n  # - Retrieves the workflow run that dispatched this workflow.\n  # - Restarts all failed jobs when the workflow fails or is cancelled for the first time.\n  failed-workflow:\n    name: Rerun a workflow\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Rerun a workflow\n        uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda # v6.3.2\n        with:\n          retries: 2\n          retry-exempt-status-codes: 418\n          script: |\n            const workflow_run = await github.rest.actions.getWorkflowRun({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n            });\n\n            // Only rerun after the first run attempt.\n            if ( workflow_run.data.run_attempt > 1 ) {\n              return;\n            }\n\n            const rerun = await github.rest.actions.reRunWorkflowFailedJobs({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n              enable_debug_logging: true\n            });\n```"}
{"id": "63c4a013b008460c1df518fc", "level": "level4", "llm_response": "```yaml\nname: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 0 * * *'\n  pull_request:\n    paths:\n      - test/internet/**\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths:\n      - test/internet/**\n\npermissions:\n  contents: read\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: keep_retrying\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test-internet:\n    runs-on: ubuntu-latest\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    steps:\n      - name: ''\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: echo \"Environment: ${{ runner.os }}\"\n      - name: Build\n        run: echo \"Building the project...\"\n      - name: Test Internet\n        run: echo \"Running internet tests...\"\n```", "answer": "```yaml name: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 5 0 * * *\n\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths: [test/internet/**]\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths: [test/internet/**]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: keep_retrying\n\npermissions:\n  contents: read\n\njobs:\n  test-internet:\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: npx envinfo\n      - name: Build\n        run: make build-ci -j2 V=1 CONFIG_FLAGS=\"--error-on-warn\"\n      - name: Test Internet\n        run: make test-internet -j2 V=1;\n```"}
{"id": "63c4a0c133b087f6bde6e92c", "level": "level4", "llm_response": "```yaml\nname: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - android/src/**/*.kt\n      - **.kts\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run ktlint\n        uses: amejiarosario/ktlint-github-action@v1\n        with:\n          version: '0.40.0'\n          args: '--experimental --verbose --color always'\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: ktlint-report\n          path: ktlint-report.xml\n```", "answer": "```yaml name: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - 'android/src/**/*.kt'\n      - '**.kts'\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.46.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n      - name: run ktlint\n        run: |\n          ktlint --reporter=checkstyle,output=build/ktlint-report.xml\n        continue-on-error: true\n      - uses: yutailang0119/action-ktlint@v3\n        with:\n          report-path: build/*.xml # Support glob patterns by https://www.npmjs.com/package/@actions/glob\n        continue-on-error: false # If annotations contain error of severity, action-ktlint exit 1.```"}
{"id": "63c49f8d33b087f6bde66e80", "level": "level4", "llm_response": "```yaml\nname: Create Jira issue\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  jira:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.label.name == 'to-jira' }}\n    steps:\n      - name: Call composite action\n        uses: actions/checkout@v2\n        with:\n          path: ./composite-action\n        run: |\n          ./composite-action/create-jira-issue.sh\n```", "answer": "```yaml name: Create Jira issue\n\non:\n  issues:\n    types: labeled\n\njobs:\n  jira:\n    if: ${{ github.event.label.name == 'to-jira' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call composite action\n        uses: hazelcast/github-jira-tool-action@v3\n        with:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n          TARGET_JIRA_PROJECT: API\n          JIRA_LABEL: Go\n          ISSUE_TYPE: Bug\n```"}
{"id": "63c4968b6fc19abdf9c9ca77", "level": "level4", "llm_response": "```yaml\nname: Manual Build\n\non:\n  workflow_dispatch:\n    inputs:\n      buildRef:\n        description: 'Ref to build'\n        required: true\n        default: 'refs/heads/main'\n      mvnOpts:\n        description: 'Maven options'\n        required: true\n        default: '--fail-at-end'\n      goals:\n        description: 'Maven goals'\n        required: true\n        default: 'verify'\n      utOpts:\n        description: 'Unit test options'\n        required: true\n        default: '-Dtest=noTest'\n      itOpts:\n        description: 'Integration test options'\n        required: true\n        default: '-Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2'\n      addOpts:\n        description: 'Additional options'\n        required: true\n        default: '-Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat'\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    id: mvn\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n      - name: Cache local maven repository\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-m2-\n      - name: Show the first log message\n        run: echo \"Starting the build process...\"\n      - name: Override DNS to fix IP address for hostname\n        run: echo \"nameserver 8.8.8.8\" | sudo tee -a /etc/resolv.conf\n      - name: Build with Maven\n        run: mvn ${{ inputs.mvnOpts }} ${{ inputs.goals }} ${{ inputs.utOpts }} ${{ inputs.itOpts }} ${{ inputs.addOpts }}\n      - name: Upload unit test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: unit-test-results\n          path: target/surefire-reports\n      - name: Upload integration test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: integration-test-results\n          path: target/failsafe-reports\n      - name: Upload mini test logs\n        uses: actions/upload-artifact@v2\n        with:\n          name: mini-test-logs\n          path: target/logs\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# This workflow will build a Java project with Maven\n# See also:\n#   https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events\n\nname: Manual Build\n\non:\n  workflow_dispatch:\n    # these inputs break down the Maven command-line, somewhat arbitrarily, so\n    # the UI when starting a run is easier to use\n    inputs:\n      buildRef:\n        description: Ref to build\n        required: true\n        default: refs/heads/main\n      mvnOpts:\n        description: Maven options\n        required: true\n        default: --fail-at-end\n      goals:\n        description: Maven goals\n        required: true\n        default: verify\n      utOpts:\n        description: Unit test options\n        required: true\n        default: -Dtest=noTest\n      itOpts:\n        description: Integration test options\n        required: true\n        default: -Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2\n      addOpts:\n        description: Additional options\n        required: true\n        default: -Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    name: mvn (triggered by ${{ github.event.sender.login }})\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.inputs.buildRef }}\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: adopt\n        java-version: 11\n    - name: Cache local maven repository\n      uses: actions/cache@v3\n      with:\n        path: |\n          ~/.m2/repository/\n          !~/.m2/repository/org/apache/accumulo\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        restore-keys: ${{ runner.os }}-m2\n    - name: Show the first log message\n      run: git log -n1\n    - name: Override DNS to fix IP address for hostname\n      run: |\n        ip -br addr\n        echo \"'hostname -i' shows '$(hostname -i)'\"\n        echo \"'hostname -I' shows '$(hostname -I)'\"\n        hostname_short=$(hostname -s)\n        hostname_long=$(hostname -f)\n        if ! grep -q $hostname_short /etc/hosts; then\n          actual_ip=$(ip -4 addr show dev eth0 | grep -o 'inet [0-9.]*' | cut -f2 -d ' ')\n          echo \"Setting $hostname_long / $hostname_short to $actual_ip in /etc/hosts\"\n          echo \"$actual_ip $hostname_long $hostname_short\" | sudo tee -a /etc/hosts\n          ip -br addr\n          echo \"'hostname -i' shows '$(hostname -i)'\"\n          echo \"'hostname -I' shows '$(hostname -I)'\"\n        fi\n    - name: Build with Maven\n      timeout-minutes: 345\n      run: mvn -B -V -e -ntp \"-Dstyle.color=always\" ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n      env:\n        MAVEN_OPTS: -Djansi.force=true\n    - name: Upload unit test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: surefire-reports\n        path: ./**/target/surefire-reports/\n        if-no-files-found: ignore\n    - name: Upload integration test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: failsafe-reports\n        path: ./**/target/failsafe-reports/\n        if-no-files-found: ignore\n    - name: Upload mini test logs\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: mini-tests-logs\n        path: ./**/target/**/mini-tests/**/logs/\n        if-no-files-found: ignore\n\n```"}
{"id": "63c49937cbc73931bb18c2b2", "level": "level4", "llm_response": "```yaml\nname: check_shell_scripts\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  clone:\n    branches: [ main ]\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Install shellcheck\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y shellcheck\n\n    - name: display shellcheck version\n      run: shellcheck --version\n\n    - name: run check_shell_scripts\n      run: |\n        find . -name \"*.sh\" -exec shellcheck {} +\n```", "answer": "```yaml ---\nname: check_shell_scripts\n\n# yamllint disable-line rule:truthy\non: [push]\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install shellcheck\n        run: |\n          sudo apt-get install shellcheck\n\n      - name: display shellcheck version\n        run: |\n          shellcheck --version\n\n      - name: run check_shell_scripts\n        run: |\n          ./scripts/checkShellScripts.sh\n...\n```"}
{"id": "63c4995333b087f6bde3e963", "level": "level4", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        sanitizer: [address, undefined, memory]\n\n    steps:\n    - name: Build Fuzzers (${{ matrix.sanitizer }})\n      id: build\n      run: echo \"Building fuzzers with sanitizer ${{ matrix.sanitizer }}\"\n\n    - name: Run Fuzzers (${{ matrix.sanitizer }})\n      run: echo \"Running fuzzers with sanitizer ${{ matrix.sanitizer }}\"\n\n    - name: Upload Crash\n      run: echo \"Uploading crash report\"\n```", "answer": "```yaml name: CIFuzz\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   strategy:\n     fail-fast: false\n     matrix:\n       sanitizer: [address, undefined, memory]\n   steps:\n   - name: Build Fuzzers (${{ matrix.sanitizer }})\n     id: build\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Run Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       fuzz-seconds: 3600\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Upload Crash\n     uses: actions/upload-artifact@v1\n     if: failure() && steps.build.outcome == 'success'\n     with:\n       name: ${{ matrix.sanitizer }}-artifacts\n       path: ./out/artifacts\n\n```"}
{"id": "63c5c62aac4f2678a5bd79f0", "level": "level4", "llm_response": "```yaml\nname: Mark or close stale issues and PRs\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 20 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        run: |\n          # Add your code to check for stale issues and PRs here\n          # For example, using the GitHub API or a custom script\n```", "answer": "```yaml ---\nname: \"Mark or close stale issues and PRs\"\non:\n  workflow_dispatch:\n  schedule:\n    # Run the stalebot every day at 8pm UTC\n    - cron: \"00 20 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578 # tag=v6\n        with:\n          repo-token: ${{ secrets.BOT_TOKEN }}\n          days-before-issue-stale: 180\n          days-before-pr-stale: 180\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had recent activity.\n            It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          stale-pr-message: >\n            This pull request has been automatically marked as stale because it has not had\n            recent activity. It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          close-issue-message: >\n            This issue has been automatically closed due to inactivity.\n            Please re-open if this still requires investigation.\n          close-pr-message: >\n            This pull request has been automatically closed due to inactivity.\n            Please re-open if these changes are still required.\n          stale-pr-label: \"stale\"\n          stale-issue-label: \"stale\"\n          exempt-issue-labels: \"keepalive\"\n          exempt-pr-labels: \"keepalive\"\n```"}
{"id": "63c49eef6fc19abdf9cd2cf5", "level": "level4", "llm_response": "```yaml\nname: Make lens list\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - data/db/**\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\nconcurrency:\n  group: 'pages'\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        run: echo \"This step is intentionally left blank.\"\n      - name: Create lens list from master sources\n        run: echo \"Creating lens list from master sources...\"\n      - name: Checkout website repo\n        run: echo \"Checking out website repo...\"\n      - name: Commit updated lens list to website repo\n        run: echo \"Committing updated lens list to website repo...\"\n```", "answer": "```yaml # Create the up-to-date lens list to be published on the GitHub pages website\n\nname: Make lens list\n\non:\n  push:\n    branches: \n        - master\n    paths:\n       - 'data/db/**'\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\n# Allow write/commit to checked out repos\npermissions:\n  contents: write\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Create lens list from master sources\n      run: ./tools/lenslist/show_lensfun_coverage.py -t -o lenslist.html ./data/db\n\n    - name: Checkout website repo\n      uses: actions/checkout@v3\n      with:\n        repository: lensfun/lensfun.github.io\n        path: website-repo\n        token: ${{secrets.PUSH_SECRET}}\n\n    - name: Commit updated lens list to website repo\n      run: |\n        cp website-repo/_includes/lenslist-develop-header.md website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        dt=`date '+%Y-%m-%d'`\n        echo -en \"\\nThis list was generated on $dt from current Lensfun sources. Your Lensfun version may be older, resulting in less coverage.\\n\" >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cat lenslist.html >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cd website-repo/\n        git add _posts/lenslist/2999-12-31-Lenslist-master.md\n        git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Update master lens list from GitHub Actions\"\n        git push https://$USERNAME:$REPO_KEY@github.com/lensfun/lensfun.github.io.git\n      env:\n        REPO_KEY: ${{secrets.PUSH_SECRET}}\n        USERNAME: github-actions[bot]\n        \n```"}
{"id": "63c49c8b6fc19abdf9cc3a67", "level": "level4", "llm_response": "```yaml\nname: Test Functional (Local Chrome proxyless)\n\non:\n  workflow_dispatch:\n    inputs:\n      sha:\n        description: 'SHA to test'\n        required: true\n        default: 'master'\n      merged_sha:\n        description: 'Merge commit SHA'\n        required: true\n      deploy_run_id:\n        description: 'Deployment workspace run ID with artifacts'\n        required: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    env:\n      RETRY_FAILED_TESTS: True\n    environment: test-functional\n    steps:\n      - name: Step 1\n      - name: Step 2\n      - name: Step 3\n      - name: Step 4\n      - name: Step 5\n      - name: Get npm cache directory\n        id: npm-cache-dir\n      - name: Step 6\n      - name: Step 7\n      - name: Step 8\n      - name: Step 9\n      - name: Step 10\n      - name: Step 11\n```", "answer": "```yaml name: Test Functional (Local Chrome proxyless)\n\non:\n    workflow_dispatch:\n        inputs:\n            sha:\n                desciption: 'The test commit SHA or ref'\n                required: true\n                default: 'master'\n            merged_sha:\n                description: 'The merge commit SHA'\n            deploy_run_id:\n                description: 'The ID of a deployment workspace run with artifacts'\njobs:\n    test:\n        runs-on: ubuntu-latest\n        environment: test-functional\n        env:\n            RETRY_FAILED_TESTS: true\n        steps:\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'pending',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/checkout@v2\n              with:\n                  ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}\n\n            - uses: actions/setup-node@v2\n              with:\n                  node-version: 14\n\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n                      let artifacts = {};\n\n                      for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {\n                        try {\n                          ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({\n                          repo: context.repo.repo,\n                          owner: context.repo.owner,\n                          run_id: context.payload.inputs.deploy_run_id\n                        }));\n                        }\n                        catch (e) {\n                          console.log(e);\n                        }\n                      }\n\n                      const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === 'npm').archive_download_url);\n                      require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, 'package.zip'), Buffer.from(artifact))\n\n            - run: |\n                  unzip package.zip\n                  tar --strip-components=1 -xzf testcafe-*.tgz\n\n            - name: Get npm cache directory\n              id: npm-cache-dir\n              run: |\n                  echo \"::set-output name=dir::$(npm config get cache)\"\n            - uses: actions/cache@v2\n              with:\n                  path: ${{ steps.npm-cache-dir.outputs.dir }}\n                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n                  restore-keys: |\n                      ${{ runner.os }}-node-\n            - run: npm ci\n            - run: npx gulp test-functional-local-proxyless-run --steps-as-tasks\n              timeout-minutes: 60\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'success',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/github-script@v3\n              if: failure() || cancelled()\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'failure',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n```"}
{"id": "63c49dec1842bc13d778d6ad", "level": "level4", "llm_response": "```yaml\nname: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: \"true\"\n          xpack.security.enabled: \"false\"\n          ES_JAVA_OPTS: \"-Xms1024m -Xmx1024m\"\n        ports:\n          - 9200:9200\n          - 9300:9300\n\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: \"false\"\n        ports:\n          - 26500:26500\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install\n        run: npm install\n\n      - name: Run integration tests\n        run: npm run test:integration\n\n      - name: Run tests\n        run: npm test\n\n      - name: Run local integration tests\n        run: npm run test:integration:local\n\n      - name: Build\n        run: npm run build\n\n      - name: Set version\n        run: echo \"##vso[task.setvariable variable=VERSION]${{ github.event.inputs.version }}\"\n\n      - name: Publish to NPM\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Push changes\n        run: |\n          git add .\n          git commit -m \"Publish version ${{ github.event.inputs.version }}\"\n          git push\n```", "answer": "```yaml name: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: true\n          xpack.security.enabled: false\n          ES_JAVA_OPTS: -Xms1024m -Xmx1024m\n        ports:\n          - 9200:9200\n          - 9300:9300\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: false\n        ports:\n          - 26500:26500\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.17.0\n          cache: 'npm'\n      - name: Install\n        run: npm ci --ignore-scripts\n      - name: Run integration tests\n        run: npm run test:integration\n      - name: Run tests\n        run: npm run test\n      - name: Run local integration tests\n        run: npm run test:local\n      - name: Build\n        run: npm run build\n      - name: Set version\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          npm version ${{ inputs.version }} -m \"Publish v%s\"\n      - name: Publish to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --access=public\n      - name: Push changes\n        run: git push --follow-tags\n```"}
{"id": "63c49e53517fc08c1ef02a7b", "level": "level4", "llm_response": "```yaml\nname: Close stale issues and PRs\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n      - name: Close stale issues and PRs\n        run: |\n          gh issue close --label \"stale\"\n          gh pr close --label \"stale\"\n```", "answer": "```yaml name: 'Close stale issues and PRs'\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5.1.1\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-message: 'This PR is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-label: 'no-pr-activity'\n          days-before-stale: 14\n          days-before-close: 5\n```"}
{"id": "63c4a0851842bc13d779e225", "level": "level4", "llm_response": "```yaml\nname: Release https://lrc-maker.github.io and npm\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: startsWith(github.ref, 'refs/tags/v')\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Test project\n        run: npm test\n\n      - name: Create release notes\n        id: create_release_notes\n        run: echo \"::set-output name=release_notes::$(npm run release-notes)\"\n\n      - name: Publish NPM\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Deploy to lrc-maker.github.io\n        run: |\n          echo \"Deploying to lrc-maker.github.io\"\n          # Add deployment steps here\n```", "answer": "```yaml name: Release https://lrc-maker.github.io and npm\n\non:\n    push:\n        tags:\n            - \"v*\"\n\njobs:\n    deploy:\n        if: startsWith(github.ref, 'refs/tags/v')\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: pnpm/action-setup@v2.2.2\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: \"16\"\n                  registry-url: \"https://registry.npmjs.org\"\n                  cache: \"pnpm\"\n\n            - run: pnpm i --ignore-scripts --frozen-lockfile\n\n            - run: pnpm run listdiff\n            - run: pnpm run lint\n            - run: make deploy\n\n            - name: Publish NPM\n              run: npm publish --ignore-scripts\n              env:\n                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n\n            - name: Deploy to lrc-maker.github.io\n              uses: peaceiris/actions-gh-pages@v3\n              with:\n                  personal_token: ${{ secrets.GHP_TOKEN }}\n                  external_repository: lrc-maker/lrc-maker.github.io\n                  publish_branch: master\n                  publish_dir: ./build\n                  force_orphan: true\n```"}
{"id": "63c49d57517fc08c1eefc300", "level": "level4", "llm_response": "```yaml\nname: CompatHelper\n\non:\n  schedule:\n    - cron: '19 22 * * *'\n  workflow_dispatch:\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: |\n          if command -v julia &> /dev/null; then\n            echo \"Julia is already installed\"\n          else\n            echo \"Julia is not installed\"\n          fi\n\n      - name: Install Julia, but only if it is not already available in the PATH\n        if: steps.julia_in_path.outputs.run == 'Julia is not installed'\n        run: |\n          wget -qO- https://julialang-s3.julialang.org/bin/linux/x64/1.8/julia-1.8.5-linux-x86_64.tar.gz | tar -xzf - -C /opt\n          echo 'export PATH=\"/opt/julia-1.8.5/bin:$PATH\"' >> $GITHUB_ENV\n\n      - name: Add the General registry via Git\n        run: julia -e 'using Pkg; Pkg.add(\"General\")'\n\n      - name: Install CompatHelper\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n\n      - name: Run CompatHelper\n        run: julia -e 'using CompatHelper; CompatHelper.run()'\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 19 22 * * *\n  workflow_dispatch:\npermissions:\n  contents: write\n  pull-requests: write\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: which julia\n        continue-on-error: true\n      - name: Install Julia, but only if it is not already available in the PATH\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1'\n          arch: ${{ runner.arch }}\n        if: steps.julia_in_path.outcome != 'success'\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49fce736e7f0ed8c7083c", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n      - name: \ud83d\udce5 Checkout the repository\n        uses: actions/checkout@v2\n\n      - name: \ud83d\udd01 Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: python\n\n      - name: \ud83d\udee0\ufe0f Autobuild\n        run: |\n          python -m pip install -r requirements.txt\n          python setup.py build\n\n      - name: \ud83c\udfc3 Run CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n\n      - name: \ud83d\udce8 Discord notification\n        run: |\n          curl -X POST -H \"Content-Type: application/json\" -d '{\"content\": \"CodeQL analysis completed\"}' https://discord.com/api/webhooks/your_webhook_url\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 2\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2.1.28\n      with:\n        languages: python\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      uses: github/codeql-action/autobuild@v2.1.28\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2.1.28\n\n    - name: \ud83d\udce8 Discord notification\n      if: ${{ github.event_name == 'schedule' && failure() }}\n      env:\n        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n      uses: Ilshidur/action-discord@0.3.2\n      with:\n        args: \"[Scheduled action failed!](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\"\n```"}
{"id": "63c49e256fc19abdf9ccdc74", "level": "level4", "llm_response": "```yaml\nname: make image\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  makeimage:\n    id: makeimage\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Make image\n        run: go build -o myapp .\n```", "answer": "```yaml on: push\nname: make image\njobs:\n  makeimage:\n    name: make image\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make image\n        run: make image\n        shell: bash\n```"}
{"id": "63c49fdb1842bc13d7799b37", "level": "level4", "llm_response": "```yaml\nname: Clean\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ published ]\n  workflow_dispatch:\n\njobs:\n  delete-artifacts:\n    id: delete-artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n    - name: Delete artifacts\n      run: echo \"Deleting artifacts...\"\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49c441842bc13d77827ae", "level": "level4", "llm_response": "```yaml\nname: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Cache\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ matrix.node-version }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Prepare\n        run: |\n          # Prepare environment\n          echo \"Preparing environment...\"\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Build\n        run: |\n          # Build extension pack\n          echo \"Building extension pack...\"\n      - name: Upload Extension Pack\n        run: |\n          # Upload extension pack\n          echo \"Uploading extension pack...\"\n```", "answer": "```yaml name: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    container: archlinux:base-devel\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: node_modules\n      \n      - name: Prepare\n        run: |\n          pacman -Sy\n          pacman -S --noconfirm base gnome-shell gtk3 libadwaita gtk4 glib2 gobject-introspection\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Build\n        run: |\n          npm install\n          npm run github_action\n        \n      - name: Upload Extension Pack\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: rounded-window-corners@yilozt.shell-extension\n          path: _build/\n```"}
{"id": "63c499ca1e33648075790155", "level": "level4", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '40 11 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - name: Mark stale issues and pull requests\n        run: |\n          gh issue list --state open --limit 100 | while read -r issue; do\n            gh issue edit $issue --lock\n          done\n          gh pr list --state open --limit 100 | while read -r pr; do\n            gh pr edit $pr --lock\n          done\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '40 11 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'Stale issue message'\n        stale-pr-message: 'Stale pull request message'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```"}
{"id": "63c49e29cbc73931bb1abbd4", "level": "level4", "llm_response": "```yaml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      \n      - name: Setup node env\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node }}\n      \n      - name: Install dependencies\n        run: composer install\n      \n      - name: Generate\n        run: php generate.php\n      \n      - name: Deploy\n        run: |\n          git config --global user.name \"github-actions[bot]\"\n          git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n          git add .\n          git commit -m \"Deploy to GitHub Pages\"\n          git push origin gh-pages\n```", "answer": "```yaml name: Deploy to GitHub Pages\n\non:\n  push:\n    branches: [master]\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate\n        run: node index.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```"}
{"id": "63c49a611e33648075793dd1", "level": "level4", "llm_response": "```yaml\nname: Publish ARC\n\non:\n  release:\n    types: [published, prereleased, draft]\n\npermissions:\n  contents: write\n  packages: write\n\njobs:\n  release-controller:\n    id: release-controller\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Install tools\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y docker.io\n      - name: Set version\n        run: echo \"VERSION=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: ./build\n      - name: Setup Docker Environment\n        id: vars\n        run: echo \"DOCKER_IMAGE=your-docker-image-name\" >> $GITHUB_ENV\n      - name: Build and Push\n        run: |\n          docker build -t $DOCKER_IMAGE:$VERSION .\n          docker push $DOCKER_IMAGE:$VERSION\n```", "answer": "```yaml name: Publish ARC\n\non:\n  release:\n    types:\n      - published\n\n# https://docs.github.com/en/rest/overview/permissions-required-for-github-apps\npermissions:\n contents: write \n packages: write\n\njobs:\n  release-controller:\n    name: Release\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.18.2'\n\n      - name: Install tools\n        run: |\n          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz\n          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz\n          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder\n          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash\n          sudo mv kustomize /usr/local/bin\n          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz\n          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz\n          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin\n\n      - name: Set version\n        run: echo \"VERSION=$(cat ${GITHUB_EVENT_PATH} | jq -r '.release.tag_name')\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          make github-release\n\n      - name: Setup Docker Environment\n        id: vars\n        uses: ./.github/actions/setup-docker-environment\n        with:\n          username: ${{ env.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          ghcr_username: ${{ github.actor }}\n          ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          file: Dockerfile\n          platforms: linux/amd64,linux/arm64\n          build-args: VERSION=${{ env.VERSION }}\n          push: true\n          tags: |\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:latest\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:latest\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```"}
{"id": "63c49d3a6fc19abdf9cc7f20", "level": "level4", "llm_response": "```yaml\nname: PR update\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Update all prs\n        run: echo \"Updating all PRs\"\n```", "answer": "```yaml name: PR update\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: update all prs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a144cbc73931bb1bfd61", "level": "level4", "llm_response": "```yaml\nname: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - 'app/src/main/res/values/strings.xml'\n      - 'daemon/src/main/res/values/strings.xml'\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    id: synchronize-with-crowdin\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: crowdin action\n        # Add your crowdin action steps here\n```", "answer": "```yaml name: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n    paths:\n      - app/src/main/res/values/strings.xml\n      - daemon/src/main/res/values/strings.xml\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: crowdin action\n      uses: crowdin/github-action@master\n      with:\n        upload_translations: false\n        download_translations: false\n        upload_sources: true\n        config: 'crowdin.yml'\n        crowdin_branch_name: master\n      env:\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}\n```"}
{"id": "63c49f1b736e7f0ed8c6c249", "level": "level4", "llm_response": "```yaml\nname: Comment Bot\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  Comment:\n    id: Comment\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment\n        run: echo \"This is a comment from the Comment Bot.\"\n```", "answer": "```yaml name: \"Comment Bot\"\n\non:\n  pull_request_target:\n    types: [ opened ]\n\njobs:\n  Comment:\n    name: Add Comment\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          greeting: |\n            **Thank you for creating a pull request!**\n            If you have not done so already, please familiarise yourself with our [Contributing Guidelines](https://github.com/adoptium/temurin-build/blob/master/CONTRIBUTING.md) and [FAQ](https://github.com/adoptium/temurin-build/blob/master/FAQ.md), even if you have contributed to the Adoptium project before. GitHub actions will now run a set of jobs against your PR that will lint and unit test your changes. Keep an eye out for the results from these on the latest commit you submitted. For more information, please see our [testing documentation](https://github.com/adoptium/temurin-build/blob/master/Testing.md).\n```"}
{"id": "63c49bc033b087f6bde4e23d", "level": "level4", "llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    id: dependency-review\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```", "answer": "```yaml #\n# Copyright 2022 The Sigstore Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    name: License and Vulnerability Scan\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```"}
{"id": "63c49f1e1899db588650b1ca", "level": "level4", "llm_response": "```yaml\nname: Build Web\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-main:\n    id: build-main\n    runs-on: ubuntu-latest\n\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n\n    steps:\n    - name: Step 1\n      # Add your step 1 details here\n\n    - name: Step 2\n      # Add your step 2 details here\n\n    - name: Install Sentry\n      # Add your install Sentry details here\n\n    - name: Setup Flutter\n      # Add your setup Flutter details here\n\n    - name: Prepare App\n      # Add your prepare app details here\n\n    - name: Build Hosted App\n      # Add your build hosted app details here\n\n    - name: Build Profile App\n      # Add your build profile app details here\n\n    - name: Build Selfhosted App\n      # Add your build selfhosted app details here\n```", "answer": "```yaml name: Build Web\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build-main:\n    name: Build Web - MAIN\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: subosito/flutter-action@v1\n        with:\n          flutter-version: '3.3.0'\n          #channel: 'stable'\n      - name: Install Sentry\n        run: |\n          curl -sL https://sentry.io/get-cli/ | bash\n      - name: Setup Flutter\n        run: |\n          flutter doctor -v\n          flutter pub get\n          flutter config --enable-web\n      - name: Prepare App\n        run: |\n          cp lib/.env.dart.example lib/.env.dart\n          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n          flutter --version --machine >> lib/flutter_version.dart\n          echo \";\" >> lib/flutter_version.dart\n      - name: Build Hosted App\n        run: |\n          #export SENTRY_RELEASE=$(sentry-cli releases propose-version)\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} new $SENTRY_RELEASE --project ${{secrets.sentry_project}}\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} set-commits --auto $SENTRY_RELEASE\n\n          flutter build web --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE --source-maps\n\n          sed -i '/index.html/d' build/web/flutter_service_worker.js\n\n          git config --global user.email ${{secrets.commit_email}}\n          git config --global user.name ${{secrets.commit_name}}\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n          cd invoiceninja\n\n          git checkout v5-develop\n          cp -r ../build/web/* ./public/\n          rm ./public/index.html\n          git add .\n          git commit -m 'Admin Portal - Hosted'\n          git push\n          cd ..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext dart --rewrite\n          cd ./build/web\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext map --ext js --rewrite\n          cd ../..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} finalize $SENTRY_RELEASE\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} deploys $SENTRY_RELEASE new -e production          \n      - name: Build Profile App\n        run: |\n          flutter build web --profile\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_profile\n          cd invoiceninja_profile\n\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.profile.dart.js\n          git add .\n          git commit -m 'Admin Portal - Profile'\n          git push\n          cd ..      \n      - name: Build Selfhosted App\n        run: |\n          cp lib/utils/oauth.dart.foss lib/utils/oauth.dart\n          cp lib/utils/app_review.dart.foss lib/utils/app_review.dart\n          cp lib/ui/app/upgrade_dialog.dart.foss lib/ui/app/upgrade_dialog.dart\n          cp lib/ui/app/pinput.dart.foss lib/ui/app/pinput.dart\n          cp pubspec.foss.yaml pubspec.yaml \n          flutter pub get\n\n          flutter build web\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_foss\n          cd invoiceninja_foss\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.foss.dart.js\n          cp ../build/web/main.dart.js.map ./public/main.foss.dart.js.map\n          git add .\n          git commit -m 'Admin Portal - Selfhosted'\n          git push\n\n#  build-next:\n#    name: Build Web - NEXT\n#    needs: build-main\n#    env:\n#      commit_secret: ${{secrets.commit_secret}}\n#      commit_email: ${{secrets.commit_email}}\n#      commit_name: ${{secrets.commit_name}}\n#      api_secret: ${{secrets.api_secret}}\n#    runs-on: ubuntu-latest\n#    steps:\n#      - uses: actions/checkout@v1\n#      - uses: subosito/flutter-action@v1\n#        with:\n#          flutter-version: '3.3.0'\n#      - name: Setup Flutter\n#        run: |\n#          flutter doctor -v\n#          cp pubspec.next.yaml pubspec.yaml\n#          rm pubspec.lock\n#          flutter pub get\n#          flutter config --enable-web\n#      - name: Prepare App\n#        run: |\n#          cp lib/.env.dart.example lib/.env.dart\n#          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n#          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n#          flutter --version --machine >> lib/flutter_version.dart\n#          echo \";\" >> lib/flutter_version.dart\n#      - name: Build Hosted App\n#        run: |\n#          flutter build web\n#\n#          sed -i '/index.html/d' build/web/flutter_service_worker.js\n#\n#          git config --global user.email ${{secrets.commit_email}}\n#          git config --global user.name ${{secrets.commit_name}}\n#\n#          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n#          cd invoiceninja\n#\n#          git checkout v5-develop\n#          cp ../build/web/main.dart.js ./public/main.next.dart.js\n#          git add .\n#          git commit -m 'Admin Portal - Next'\n#          git push\n#          cd ..```"}
{"id": "63c499e4b008460c1df2a73d", "level": "level4", "llm_response": "```yaml\nname: Security\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - package.json\n  pull_request:\n    branches:\n      - main\n    paths:\n      - package.json\n  schedule:\n    - cron: '17 15 * * 1'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  audit-ci:\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n      - name: Install Node.js v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v2\n        with:\n          path: ~/.yarn\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n      - name: Install dependencies\n        run: yarn install\n      - name: Audit for vulnerabilities\n        run: yarn audit\n\n  trivy-scan-repo:\n    runs-on: ubuntu-20.04\n    permissions:\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n      - name: Run Trivy vulnerability scanner in repo mode\n        run: trivy repo .\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: trivy.sarif\n\n  codeql-analyze:\n    runs-on: ubuntu-20.04\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: Security\n\non:\n  push:\n    branches: [main]\n    paths:\n      - \"package.json\"\n  pull_request:\n    paths:\n      - \"package.json\"\n  schedule:\n    # Runs every Monday morning PST\n    - cron: \"17 15 * * 1\"\n\n# Cancel in-progress runs for pull requests when developers push\n# additional changes, and serialize builds in branches.\n# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-concurrency-to-cancel-any-in-progress-job-or-run\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  audit-ci:\n    name: Audit node modules\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: \"**/node_modules\"\n          key: yarn-build-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            yarn-build-\n\n      - name: Install dependencies\n        if: steps.cache-yarn.outputs.cache-hit != 'true'\n        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile\n\n      - name: Audit for vulnerabilities\n        run: yarn _audit\n        if: success()\n\n  trivy-scan-repo:\n    name: Scan repo with Trivy\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          scan-type: \"fs\"\n          scan-ref: \".\"\n          ignore-unfixed: true\n          format: \"template\"\n          template: \"@/contrib/sarif.tpl\"\n          output: \"trivy-repo-results.sarif\"\n          severity: \"HIGH,CRITICAL\"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: \"trivy-repo-results.sarif\"\n\n  codeql-analyze:\n    permissions:\n      actions: read # for github/codeql-action/init to get workflow details\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/autobuild to send a status report\n    name: Analyze with CodeQL\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql-config.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f9a33b087f6bde6736e", "level": "level4", "llm_response": "```yaml\nname: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v2\n\n      - name: Update to latest NPM version\n        run: npm install -g npm\n\n      - name: Install package dependencies\n        run: npm install\n\n      - name: Lint code\n        run: npm run lint\n\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v2\n\n      - name: Update to latest NPM version\n        run: npm install -g npm\n\n      - name: Install package dependencies\n        run: npm install\n\n      - name: Test code\n        run: npm test\n\n  publish:\n    id: publish\n    needs: [lint, test]\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main' }}\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v2\n\n      - name: Update to latest NPM version\n        run: npm install -g npm\n\n      - name: Install package dependencies\n        run: npm install\n\n      - name: Semantic Release\n        run: npm run release\n```", "answer": "```yaml name: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint --if-present\n\n  test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Test code\n        run: npm run test --if-present\n\n  publish:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main' }}\n    needs: [lint, test]\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Semantic Release\n        run: npx semantic-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c497a6cbc73931bb181c12", "level": "level4", "llm_response": "```yaml\nname: Nightly distribution\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        branch: [swiftwasm, swiftwasm-release/5.3, swiftwasm-release/5.4, swiftwasm-release/5.5, swiftwasm-release/5.6, swiftwasm-release/5.7]\n        channel: [DEVELOPMENT, 5.3, 5.4, 5.5, 5.6, 5.7]\n        targets: [ubuntu18.04_x86_64, ubuntu20.04_x86_64, ubuntu20.04_aarch64, ubuntu22.04_x86_64, macos_x86_64, macos_arm64, amazonlinux2_x86_64]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup keychain\n      run: |\n        # Setup keychain steps here\n        echo \"Setting up keychain...\"\n        # Example command to add a key to the keychain\n        security add-keychain -p $KEYCHAIN_PASSWORD $HOME/Library/Keychains/keychain.keychain-db\n        security unlock-keychain -p $KEYCHAIN_PASSWORD $HOME/Library/Keychains/keychain.keychain-db\n        security set-keychain-settings -u -t 3600 $HOME/Library/Keychains/keychain.keychain-db\n        security set-keychain-default $HOME/Library/Keychains/keychain.keychain-db\n\n    - name: Build and distribute\n      run: |\n        # Build and distribute steps here\n        echo \"Building and distributing...\"\n        # Example command to build and distribute\n        ./build_and_distribute.sh\n```", "answer": "```yaml name: Nightly distribution\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        include:\n          - branch: \"swiftwasm\"\n            channel: \"DEVELOPMENT\"\n#           targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.3\"\n            channel: \"5.3\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64\"\n          - branch: \"swiftwasm-release/5.4\"\n            channel: \"5.4\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.5\"\n            channel: \"5.5\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.6\"\n            channel: \"5.6\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.7\"\n            channel: \"5.7\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup keychain\n        run: |\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" swiftwasm-ci\n          KEYCHAIN=$HOME/Library/Keychains/swiftwasm-ci-db\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n          security set-keychain-settings -lut 7200 $KEYCHAIN\n          security default-keychain -s $KEYCHAIN\n\n          echo \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64\" | base64 --decode -o developerID_application.p12\n          security import developerID_application.p12 -P \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n          echo \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64\" | base64 --decode -o developerID_installer.p12\n          security import developerID_installer.p12 -P \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n\n          security set-key-partition-list -S \"apple-tool:,apple:\" -s -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n        env:\n          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }}\n\n      - run: ./utils/webassembly/distribute-latest-toolchain.sh ${{ matrix.branch }} ${{ matrix.channel }}\n        env:\n          TARGETS_TO_DIST: ${{ matrix.targets }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BUILDBOT_GITHUB_TOKEN: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_NOTARIZE_EMAIL: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_EMAIL }}\n          DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD }}\n          DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID }}\n```"}
{"id": "63c49d15517fc08c1eefabdb", "level": "level4", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    - cron: '0 12 * * *'\n\njobs:\n  tests:\n    id: tests\n    runs-on: ubuntu-22.04\n    strategy:\n      matrix:\n        type: [slither, manticore]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Run Tests\n        run: |\n          python -m pytest\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    # run CI every day even if no PRs/merges occur\n    - cron:  '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    strategy:\n      fail-fast: false\n      matrix:\n        type: [\"slither\", \"manticore\"]\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.8\n    - name: Install dependencies\n      run: |\n        sudo wget -O /usr/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux\n        sudo chmod +x /usr/bin/solc\n    - name: Run Tests\n      env:\n        TEST_TYPE: ${{ matrix.type }}\n      run: |\n        bash program-analysis/${TEST_TYPE}/scripts/gh_action_test.sh\n```"}
{"id": "63c49d70cbc73931bb1a70f8", "level": "level4", "llm_response": "```yaml\nname: Weekly Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 5'  # Runs at 12:00 AM on Friday\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [3.7, 3.8, 3.9, 3.10]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run pytest\n      run: pytest\n```", "answer": "```yaml name: Weekly Tests\r\n\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    # Runs every friday\r\n    - cron: \"0 0 * * 5\"\r\n\r\njobs:\r\n  test:\r\n    name: \"Python ${{ matrix.python-version }} on ${{ matrix.os }}\"\r\n    runs-on: ${{ matrix.os }}\r\n\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        os: [ubuntu-latest, macos-latest, windows-latest]\r\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\r\n\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n\r\n      - name: Set up Python ${{ matrix.python-version }}\r\n        uses: actions/setup-python@v4.3.0\r\n        with:\r\n          python-version: ${{ matrix.python-version }}\r\n\r\n      - name: Install dependencies\r\n        run: |\r\n          python -m pip install --upgrade pip\r\n          pip install -r requirements.txt -v\r\n\r\n      - name: Run pytest\r\n        run: python -m pytest\r\n```"}
{"id": "63c49a7e33b087f6bde45f85", "level": "level4", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update release draft\n        run: |\n          echo \"Release draft updated\"\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n  pull_request_target:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0e9cbc73931bb1bd7aa", "level": "level4", "llm_response": "```yaml\nname: cancel-previous-workflows\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Cancel previous runs\n        run: |\n          gh workflow run cancel $(gh workflow run list --workflow cancel-previous-workflows --json id --jq '.[].id')\n```", "answer": "```yaml name: cancel-previous-workflows\n\non:\n  pull_request_target:\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous runs\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          workflow_id: all\n          all_but_latest: true\n```"}
{"id": "63c49c2e1842bc13d7781f8c", "level": "level4", "llm_response": "```yaml\nname: StandardRB\n\non:\n  pull_request:\n    branches: [ '*' ]\n  push:\n    branches: [ master ]\n\njobs:\n  standard:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n\n    - name: Run StandardRB\n      run: bundle exec standardrb\n```", "answer": "```yaml name: StandardRB\n\non:\n  pull_request:\n    branches:\n      - '*'\n  push:\n    branches:\n      - master\n\njobs:\n  standard:\n    name: StandardRB Check Action\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n        bundler-cache: true\n\n    - name: Run StandardRB\n      run: bundle exec standardrb --format progress\n```"}
{"id": "63c49bbd33b087f6bde4e115", "level": "level4", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  repository_dispatch:\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Build Fuzzers\n      run: echo \"Building fuzzers...\"\n\n    - name: Run Fuzzers\n      run: echo \"Running fuzzers...\"\n\n    - name: Upload Crash\n      run: echo \"Uploading crash...\"\n```", "answer": "```yaml # Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\nname: CIFuzz\non: [pull_request, push]\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure()\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"id": "63c49b6a1899db58864f3771", "level": "level4", "llm_response": "```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    if: github.ref != 'refs/heads/master'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.16\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Install dependencies\n        run: go mod tidy\n\n      - name: Lint code\n        run: golangci-lint run\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [master]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    # don't run this on the master branch\n    if: github.ref != 'refs/heads/master'\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.x'\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n          check-latest: true\n          cache: true\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y libdevmapper-dev libbtrfs-dev\n      - uses: pre-commit/action@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49edb33b087f6bde62769", "level": "level4", "llm_response": "```yaml\nname: Conform PR\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, reopened, synchronize]\n  pull_request_target:\n    types: [labeled, unlabeled, opened, edited, reopened, synchronize]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }}\n\njobs:\n  conform-pr:\n    id: conform-pr\n    runs-on: ubuntu-20.04\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n    steps:\n    - name: Setup Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n    - name: Conform PR\n      run: |\n        # Add your Conform PR commands here\n```", "answer": "```yaml ---\n# Attention! This workflow uses `pull_request_target` event that has access to secrets.\n# If you modify this workflow, make sure that you don't introduce dangerous steps.\n# See also: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/.\nname: Conform PR\non:\n  pull_request_target:\n    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target\n    # List all types to make it easier to enable new ones when they are needed.\n    types:\n      # - assigned\n      # - unassigned\n      - labeled\n      - unlabeled # if GitHub Actions stuck, add and remove \"no ci\" label to force rebuild\n      - opened\n      - edited\n      # - closed\n      - reopened\n      - synchronize\n      # - converted_to_draft\n      # - ready_for_review\n      # - locked\n      # - unlocked\n      # - review_requested\n      # - review_request_removed\n      # - auto_merge_enabled\n      # - auto_merge_disabled\n\n# Stop pending and in-progress jobs of this workflow.\n# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }} # GITHUB_TOKEN is not enough to query projects, so we use a special one\n\njobs:\n  conform-pr:\n    name: Conform PR\n    runs-on: ubuntu-20.04\n\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n\n    steps:\n      # Warning! Be careful about changing the steps here as it might cause some security problems\n      # (see the Attention block on the top of this file).\n      - name: Setup Go\n        uses: FerretDB/github-actions/setup-go@main\n        with:\n          cache-key: conform-pr\n\n      - name: Conform PR\n        uses: FerretDB/github-actions/conform-pr@main\n```"}
{"id": "63c499c86fc19abdf9cb1f2d", "level": "level4", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set env\n      run: echo \"VERSION=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\n\n    - name: checkout code\n      uses: actions/checkout@v2\n\n    - name: Install go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: generate release artifacts\n      run: go build -o myapp\n\n    - name: generate release notes\n      run: echo \"Release notes for version $VERSION\" > release-notes.md\n\n    - name: Release\n      uses: actions/create-release@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: $VERSION\n        release_name: Release $VERSION\n        draft: true\n        body_file: release-notes.md\n```", "answer": "```yaml name: release\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\npermissions:\n  contents: write # Allow to create a release.\n\njobs:\n  build:\n    name: create draft release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set env\n        run:  echo \"RELEASE_TAG=${GITHUB_REF:10}\" >> $GITHUB_ENV\n      - name: checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.19'\n      - name: generate release artifacts\n        run: |\n          make release\n      - name: generate release notes\n        run: |\n          make release-notes\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          draft: true\n          files: out/*\n          body_path: _releasenotes/${{ env.RELEASE_TAG }}.md\n```"}
{"id": "63c49b3d1842bc13d777c127", "level": "level4", "llm_response": "```yaml\nname: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**/*.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**/*.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    id: auto-review-tests\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Get composer cache directory\n        id: composer-cache\n        run: echo \"::set-output name=dir::$(composer config --global cache-dir)\"\n\n      - name: Cache dependencies\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.composer-cache.outputs.dir }}\n          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-php-${{ matrix.php-version }}-\n            ${{ runner.os }}-php-\n\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n\n      - name: Run AutoReview Tests\n        run: ./vendor/bin/phpunit\n```", "answer": "```yaml name: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    name: Automatic Code Review\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: none\n\n      - name: Get composer cache directory\n        run: echo \"COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)\" >> $GITHUB_ENV\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer update --ansi\n        env:\n          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit --color=always --group=auto-review --no-coverage\n```"}
{"id": "63c49c8533b087f6bde535e2", "level": "level4", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [commented]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    steps:\n      - name: ''\n        run: |\n          # Add your step commands here\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49b3d1842bc13d777c123", "level": "level4", "llm_response": "```yaml\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - system/**\n      - .github/workflows/deploy-apidocs.yml\n\njobs:\n  build:\n    id: build\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Setup credentials\n        # Add your setup credentials step here\n        run: echo \"Setting up credentials...\"\n      - name: Checkout source\n        uses: actions/checkout@v2\n        with:\n          path: source\n      - name: Checkout target\n        uses: actions/checkout@v2\n        with:\n          path: target\n          repository: codeigniter4/CodeIgniter4\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n      - name: Download latest phpDocumentor\n        run: composer require --dev phpdocumentor/phpdocumentor\n      - name: Prepare API repo\n        run: echo \"Preparing API repo...\"\n      - name: Build API in source repo\n        run: cd source && phpdoc\n      - name: Deploy to API repo\n        run: echo \"Deploying to API repo...\"\n```", "answer": "```yaml # When changes are pushed to the develop branch,\n# build the current version of the API documentation\n# with phpDocumentor and deploy it to codeigniter4/api.\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - 'develop'\n    paths:\n      - 'system/**'\n      - '.github/workflows/deploy-apidocs.yml'\n\njobs:\n  build:\n    name: Deploy to api\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Setup credentials\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"${GITHUB_ACTOR}\"\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          repository: codeigniter4/api\n          token: ${{ secrets.ACCESS_TOKEN }}\n          path: api\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          tools: phive\n          coverage: none\n\n      - name: Download latest phpDocumentor\n        working-directory: source\n        run: sudo phive --no-progress install --global --trust-gpg-keys 67F861C3D889C656 phpDocumentor\n\n      - name: Prepare API repo\n        working-directory: api\n        run: |\n          git reset --hard master\n          rm -rfv docs\n          mkdir --parents --verbose docs\n\n      - name: Build API in source repo\n        working-directory: source\n        run: |\n          phpDocumentor run --ansi --verbose\n          cp -R ${GITHUB_WORKSPACE}/source/api/build/* ${GITHUB_WORKSPACE}/api/docs\n\n      - name: Deploy to API repo\n        working-directory: api\n        run: |\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Updated API for commit ${GITHUB_SHA}\"\n            git push origin master\n          fi\n```"}
{"id": "63c49993517fc08c1eee4989", "level": "level4", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches: [ master ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '0 12 * * 6'\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n    - name: Checkout HEAD on PR\n      if: github.event_name == 'pull_request'\n      run: git checkout ${{ github.event.pull_request.head.sha }}\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: codeql\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - 'master'\n  schedule:\n    - cron: '0 12 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n      -\n        name: Checkout HEAD on PR\n        if: ${{ github.event_name == 'pull_request' }}\n        run: |\n          git checkout HEAD^2\n      -\n        name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n      -\n        name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      -\n        name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c499f16fc19abdf9cb2f18", "level": "level4", "llm_response": "```yaml\nname: jenkins-illa-builder-main\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: trigger single Job\n        run: echo \"Triggering single job\"\n```", "answer": "```yaml name: jenkins-illa-builder-main\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: \"http://ec2-13-230-170-106.ap-northeast-1.compute.amazonaws.com:9000/\"\n          user: \"illasoft\"\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n          job: \"illa-builder-main\"\n```"}
{"id": "63c49926b008460c1df25d1c", "level": "level4", "llm_response": "```yaml\nname: PR Check - Packaging: Config and input\n\non:\n  push:\n    branches:\n      - main\n      - releases/v1\n      - releases/v2\n  pull_request:\n    branches:\n      - main\n      - releases/v1\n      - releases/v2\n  workflow_dispatch:\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\n  INTERNAL_CODEQL_ACTION_DEBUG_LOC: True\n\njobs:\n  packaging-config-inputs-js:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-2019, windows-2022]\n        version: [latest, cached, nightly-latest]\n    max-parallel: 4\n    timeout-minutes: 45\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v2\n\n    - name: Prepare test\n      id: prepare-test\n      run: echo \"Preparing test environment\"\n\n    - name: Build code\n      run: echo \"Building code\"\n\n    - name: Check results\n      run: echo \"Checking results\"\n\n    - name: Assert Results\n      run: echo \"Asserting results\"\n```", "answer": "```yaml # Warning: This file is generated automatically, and should not be modified.\n# Instead, please modify the template in the pr-checks directory and run:\n#     pip install ruamel.yaml && python3 sync.py\n# to regenerate this file.\n\nname: 'PR Check - Packaging: Config and input'\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\non:\n  push:\n    branches:\n    - main\n    - releases/v1\n    - releases/v2\n  pull_request:\n    types:\n    - opened\n    - synchronize\n    - reopened\n    - ready_for_review\n  workflow_dispatch: {}\njobs:\n  packaging-config-inputs-js:\n    strategy:\n      matrix:\n        include:\n        - os: ubuntu-latest\n          version: latest\n        - os: macos-latest\n          version: latest\n        - os: windows-2019\n          version: latest\n        - os: windows-2022\n          version: latest\n        - os: ubuntu-latest\n          version: cached\n        - os: macos-latest\n          version: cached\n        - os: windows-2019\n          version: cached\n        - os: ubuntu-latest\n          version: nightly-latest\n        - os: macos-latest\n          version: nightly-latest\n        - os: windows-2019\n          version: nightly-latest\n        - os: windows-2022\n          version: nightly-latest\n    name: 'Packaging: Config and input'\n    timeout-minutes: 45\n    runs-on: ${{ matrix.os }}\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n    - name: Prepare test\n      id: prepare-test\n      uses: ./.github/prepare-test\n      with:\n        version: ${{ matrix.version }}\n    - uses: ./../action/init\n      with:\n        config-file: .github/codeql/codeql-config-packaging3.yml\n        packs: +dsp-testing/codeql-pack1@1.0.0\n        languages: javascript\n        tools: ${{ steps.prepare-test.outputs.tools-url }}\n      env:\n        TEST_MODE: true\n    - name: Build code\n      shell: bash\n      run: ./build.sh\n    - uses: ./../action/analyze\n      with:\n        output: ${{ runner.temp }}/results\n      env:\n        TEST_MODE: true\n\n    - name: Check results\n      uses: ./../action/.github/check-sarif\n      with:\n        sarif-file: ${{ runner.temp }}/results/javascript.sarif\n        queries-run: javascript/example/empty-or-one-block,javascript/example/empty-or-one-block,javascript/example/other-query-block,javascript/example/two-block\n        queries-not-run: foo,bar\n\n    - name: Assert Results\n      shell: bash\n      run: |\n        cd \"$RUNNER_TEMP/results\"\n        # We should have 4 hits from these rules\n        EXPECTED_RULES=\"javascript/example/empty-or-one-block javascript/example/empty-or-one-block javascript/example/other-query-block javascript/example/two-block\"\n\n        # use tr to replace newlines with spaces and xargs to trim leading and trailing whitespace\n        RULES=\"$(cat javascript.sarif | jq -r '.runs[0].results[].ruleId' | sort | tr \"\\n\\r\" \" \" | xargs)\"\n        echo \"Found matching rules '$RULES'\"\n        if [ \"$RULES\" != \"$EXPECTED_RULES\" ]; then\n          echo \"Did not match expected rules '$EXPECTED_RULES'.\"\n          exit 1\n        fi\n    env:\n      INTERNAL_CODEQL_ACTION_DEBUG_LOC: true\n```"}
{"id": "63c49c4dcbc73931bb19fc2f", "level": "level4", "llm_response": "```yaml\nname: Build and test\n\non:\n  push:\n    branches: [ '*' ]\n\njobs:\n  build-all-versions:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        scala: [2.12.16, 2.13.8]\n        spark: [3.3.0, 3.2.1, 3.2.0, 3.1.3, 3.1.2, 3.1.1, 3.1.0, 3.0.3, 3.0.2, 3.0.1, 3.0.0]\n      exclude:\n        - scala: 2.13.8\n          spark: 3.1.3\n        - scala: 2.13.8\n          spark: 3.1.2\n        - scala: 2.13.8\n          spark: 3.1.1\n        - scala: 2.13.8\n          spark: 3.1.0\n        - scala: 2.13.8\n          spark: 3.0.3\n        - scala: 2.13.8\n          spark: 3.0.2\n        - scala: 2.13.8\n          spark: 3.0.1\n        - scala: 2.13.8\n          spark: 3.0.0\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Cache Gradle packages\n      uses: actions/cache@v2\n      with:\n        path: ~/.gradle/caches\n        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}\n        restore-keys: |\n          ${{ runner.os }}-gradle-\n\n    - name: Build with Gradle\n      run: ./gradlew build\n```", "answer": "```yaml name: Build and test\n\non:\n  push:\n    branches: '*'\n#  pull_request:\n#    branches: '*'\n\njobs:\n  build-all-versions:\n    strategy:\n      matrix:\n        scala: [ \"2.12.16\", \"2.13.8\" ]\n        spark: [ \"3.3.0\", \"3.2.1\", \"3.2.0\", \"3.1.3\", \"3.1.2\", \"3.1.1\", \"3.1.0\", \"3.0.3\", \"3.0.2\", \"3.0.1\", \"3.0.0\" ]\n        exclude:\n          - scala: \"2.13.8\"\n            spark: \"3.1.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.0\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.0\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n          check-latest: true\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.gradle/jdks\n          key: ${{ runner.os }}-gradle-spark-${{ matrix.spark }}-${{ matrix.scala }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: |\n            -Pspark=${{ matrix.spark }}\n            -Pscala=${{ matrix.scala }}\n            clean\n            test\n            --scan\n\n  #  qodana:\n  #    runs-on: ubuntu-latest\n  #    steps:\n  #      - uses: actions/checkout@v3\n  #      - name: 'Qodana Scan'\n  #        uses: JetBrains/qodana-action@v5.0.2\n\n\n\n# vim: ts=2:sts=2:sw=2:expandtab\n```"}
{"id": "63c496b21899db58864d49a8", "level": "level4", "llm_response": "```yaml\nname: Code Coverage\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Set up Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          gradle-version: '7.0'\n\n      - name: Run Tests\n        run: ./gradlew test\n\n      - name: Run Test Coverage\n        run: ./gradlew jacocoTestReport\n\n      - name: Publish Coverage\n        uses: codecov/codecov-action@v2\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./build/reports/jacoco/test/html/index.html\n```", "answer": "```yaml name: Code Coverage\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n\n      - name: Set up Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Run Tests\n        run: ./gradlew test -x checkLicenseMain -x checkLicenses -x spotlessCheck -x spotlessApply -Pjacoco\n        continue-on-error: true\n\n      - name: Run Test Coverage\n        run: ./gradlew testCodeCoverageReport -Pjacoco\n\n      - name: Publish Coverage\n        env:\n          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n        run: ./gradlew coverallsJacoco -Pjacoco\n```"}
{"id": "63c497091e3364807577e6aa", "level": "level4", "llm_response": "```yaml\nname: Build\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    branches:\n      - main\n      - dev\n    paths-ignore:\n      - docs/docs/**\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: check out code \ud83d\udece\n      uses: actions/checkout@v3\n\n    - name: Install Node v18\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n\n    - name: Cache node modules\n      id: cache-npm\n      uses: actions/cache@v3\n      with:\n        path: ~/.npm\n        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n        restore-keys: |\n          ${{ runner.os }}-node-\n\n    - name: List the state of node modules\n      run: ls -la node_modules\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run prettier\n      run: npx prettier --check .\n\n    - name: Run ESLint\n      run: npx eslint .\n\n    - name: Build\n      run: npm run build\n\n    - name: Run Tests\n      run: npm test\n```", "answer": "```yaml name: Build\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    paths-ignore:\n      - \"docs/docs/**\"\n    branches:\n      - main\n      - dev\n\njobs:\n  build:\n    name: Build Monorepo\n    runs-on: ubuntu-latest\n    steps:\n      - name: check out code \ud83d\udece\n        uses: actions/checkout@v3\n\n      - name: Install Node v18\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"18.x\"\n          registry-url: \"https://registry.npmjs.org\"\n\n      - name: Cache node modules\n        id: cache-npm\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          # npm cache files are stored in `~/.npm` on Linux/macOS\n          path: ~/.npm\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-\n      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}\n        name: List the state of node modules\n        continue-on-error: true\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run prettier\n        run: npm run format-check\n\n      - name: Run ESLint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run Tests\n        run: npm run test\n```"}
{"id": "63c497ddb008460c1df1d95d", "level": "level4", "llm_response": "```yaml\nname: Remove old artifacts\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Remove old artifacts\n        run: |\n          # Add your commands to remove old artifacts here\n```", "answer": "```yaml name: Remove old artifacts\n\non:\n  schedule:\n    # Every day at 1am\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n    - name: Remove old artifacts\n      uses: c-hive/gha-remove-artifacts@v1.2.0\n      with:\n        age: '1 month'\n        skip-tags: true\n        skip-recent: 3\n```"}
{"id": "63c496d51899db58864d5867", "level": "level4", "llm_response": "```yaml\nname: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Login\n      run: echo \"Logging in to JIRA...\"\n    - name: Find comment with ticket number\n      id: comment\n      run: echo \"Finding comment with ticket number...\"\n    - name: Get ticket number\n      id: ticket\n      run: echo \"Getting ticket number...\"\n    - name: Close\n      run: echo \"Closing JIRA ticket...\"\n```", "answer": "```yaml name: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    name: Set JIRA ticket to DONE\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login\n        uses: atlassian/gajira-login@master\n        env:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n\n      - name: Find comment with ticket number\n        uses: peter-evans/find-comment@v1\n        id: comment\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body-includes: Internal ticket number is FE-\n\n      - name: Get ticket number\n        id: ticket\n        uses: atlassian/gajira-find-issue-key@master\n        with:\n          string: ${{ steps.comment.outputs.comment-body }}\n\n      - name: Close\n        uses: atlassian/gajira-transition@master\n        with:\n          issue: ${{ steps.ticket.outputs.issue }}\n          transition: 'DONE'\n```"}
{"id": "63c494a17843b61269a0272b", "level": "level4", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n      - name: Update Package.swift.json\n      - name: Install dependencies\n      - name: Build project\n      - name: Build and Push Docker Images\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy to Kubernetes\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Run tests\n      - name: Test\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Update Package.swift.json\n        run: |\n          set -ex\n\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          git pull --rebase origin master\n\n          tempdir=$(mktemp -d)\n          filename=\"Package.swift\"\n          curl -sfL -o \"$tempdir/$filename\" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename\n          sed -i 's/swift-tools-version:5.5/swift-tools-version:5.4/g' \"$tempdir/Package.swift\"\n          swift package --package-path \"$tempdir\" dump-package > Resources/$filename.json\n\n          git add Resources/$filename.json\n          git diff-index --quiet HEAD || git commit -m \"Update $filename.json\"\n          git push origin master\n\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n\n      - name: Build and Push Docker Images\n        run: |\n          set -ex\n\n          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.RESOURCE_GROUP }}/${{ env.SERVICE_NAME }}:latest\n\n          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .\n          docker push ${IMAGE_TAG}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: azure/setup-kubectl@v3\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/aks-set-context@v3\n        with:\n          resource-group: ${{ env.RESOURCE_GROUP }}\n          cluster-name: ${{ env.CLUSTER_NAME }}\n\n      - name: Deploy\n        run: |\n          set -ex\n\n          sed \"s/%COMMIT_SHA%/${{ github.sha }}/g;\" \"k8s/pod_template.yaml\" | kubectl apply -f -\n\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }}\n          kubectl get services -o wide\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n        run: |\n          curl -X POST \"https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache\" \\\n            -H \"X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}\" \\\n            -H \"X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"purge_everything\":true}'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test\n        run: |\n          set -ex\n\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"latest\"}'\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"stable\"}'\n\n          versions=$(curl --silent -X GET \"https://swiftfiddle.com/versions\" -H \"Content-Type:application/json\")\n          len=$(echo $versions | jq length)\n          for i in $( seq 0 $(($len - 1)) ); do\n            version=$(echo $versions | jq .[$i])\n            curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n              -H \"Content-Type:application/json\" \\\n              --data \"{\\\"code\\\":\\\"print(\\\\\\\"Hello, World!\\\\\\\")\\\",\\\"toolchain_version\\\":$version}\"\n          done\n```"}
{"id": "63c497fb517fc08c1eeda8d8", "level": "level4", "llm_response": "```yaml\nname: Support Requests\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    id: action\n    runs-on: ubuntu-latest\n    steps:\n      - name: Step 1\n        run: echo \"Processing issue event\"\n```", "answer": "```yaml name: 'Support Requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'support'\n          issue-comment: >\n            \ud83d\udc4b We use the issue tracker exclusively for bug reports and feature requests.\n            However, this issue appears to be a support request. Please use our\n            [support channels](https://github.com/kivy/kivy-ios/blob/master/README.md#support)\n            to get help with the project.\n            \n            \n            If you're having trouble installing or using kivy-ios,\n            maybe you could be interested to [installation and requirements](https://github.com/kivy/kivy-ios/blob/master/README.md#installation--requirements).\n            \n            \n            Let us know if this comment was made in error, and we'll be happy\n            to reopen the issue.\n          close-issue: true\n          lock-issue: false```"}
{"id": "63c49e0d1899db58865040a6", "level": "level4", "llm_response": "```yaml\nname: pull-request-lint\n\non:\n  pull_request:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - name: Step 1\n        run: echo \"Running validation step for PR title\"\n```", "answer": "```yaml # ~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\".\n\nname: pull-request-lint\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\njobs:\n  validate:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: amannn/action-semantic-pull-request@v3.4.6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |-\n            feat\n            fix\n            chore\n          requireScope: false\n```"}
{"id": "63c497c61899db58864dbc6a", "level": "level4", "llm_response": "```yaml\nname: Manage the hold label\n\non:\n  workflow_dispatch:\n    inputs:\n      action:\n        description: 'Action to perform'\n        required: true\n        type: choice\n        options:\n          - hold-command\n          - unhold-command\n\njobs:\n  hold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.action == 'hold-command'\n    steps:\n      - name: Add the hold label to avoid merging\n        run: echo \"Adding hold label to avoid merging\"\n      - name: Report status as reaction\n        run: echo \"Reporting status as reaction\"\n\n  unhold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.action == 'unhold-command'\n    steps:\n      - name: Remove the hold label to allow merging\n        run: echo \"Removing hold label to allow merging\"\n      - name: Report status as reaction\n        run: echo \"Reporting status as reaction\"\n```", "answer": "```yaml name: Manage the hold label\non:\n  repository_dispatch:\n    types:\n      - hold-command\n      - unhold-command\n\njobs:\n  hold:\n    name: Add hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'hold-command'\n\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n\n  unhold:\n    name: Remove the hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'unhold-command'\n\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n```"}
{"id": "63c5ae9f6b748c7b1fadf422", "level": "level4", "llm_response": "```yaml\nname: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug-the:\n        description: 'Run with tmate debugging'\n        required: false\n        default: false\n        type: boolean\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```", "answer": "```yaml name: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```"}
{"id": "63c49742517fc08c1eed5bcf", "level": "level4", "llm_response": "```yaml\nname: Lint Format\n\non:\n  push:\n    branches:\n      - master\n      - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Disable automatic eol conversion\n        run: git config --global core.autocrlf false\n\n      - name: Install dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y build-essential git\n\n      - name: Run qmk formatters\n        run: qmk format-json -i .\n\n      - name: Push changes\n        run: git add .\n        run: git commit -m \"Format code\"\n        run: git push origin HEAD\n\n      - name: Become QMK Bot\n        run: echo \"This step is a placeholder for becoming the QMK Bot.\"\n\n      - name: Create Pull Request\n        run: echo \"This step is a placeholder for creating a Pull Request.\"\n```", "answer": "```yaml name: Lint Format\n\non:\n  push:\n    branches:\n    - master\n    - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    container: qmkfm/qmk_cli\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Disable automatic eol conversion\n      run: |\n        echo \"* -text\" > .git/info/attributes\n\n    - name: Install dependencies\n      run: |\n        pip3 install -r requirements-dev.txt\n\n    - name: Run qmk formatters\n      shell: 'bash {0}'\n      run: |\n        qmk format-c -a\n        qmk format-python -a\n        qmk format-text -a\n        git diff\n\n    - uses: rlespinasse/github-slug-action@v3.x\n\n    - name: Become QMK Bot\n      run: |\n        git config user.name 'QMK Bot'\n        git config user.email 'hello@qmk.fm'\n\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      if: ${{ github.repository == 'qmk/qmk_firmware'}}\n      with:\n        token: ${{ secrets.QMK_BOT_TOKEN }}\n        delete-branch: true\n        branch: bugfix/format_${{ env.GITHUB_REF_SLUG }}\n        author: QMK Bot <hello@qmk.fm>\n        committer: QMK Bot <hello@qmk.fm>\n        commit-message: Format code according to conventions\n        title: '[CI] Format code according to conventions'\n```"}
{"id": "63c49ae81899db58864f05dc", "level": "level4", "llm_response": "```yaml\nname: Web-Ext lint\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: web-ext lint\n        run: npx web-ext lint\n```", "answer": "```yaml name: Web-Ext lint\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: \"Lint\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: \"web-ext lint\"\n        uses: kewisch/action-web-ext@v1\n        with:\n          cmd: lint\n          source: src\n          channel: listed\n```"}
{"id": "63c49ea41842bc13d7792231", "level": "level4", "llm_response": "```yaml\nname: Require PR Labels\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  pull_request_target:\n    types: [edited, labeled, unlabeled]\n  workflow_dispatch:\n\njobs:\n  check-labels:\n    id: check-labels\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```", "answer": "```yaml name: Require PR Labels\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  check-labels:\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```"}
{"id": "63c49a4033b087f6bde447f3", "level": "level4", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.7'\n      \n      - name: Run tests\n        run: bundle exec rake test\n      \n      - name: Deploy to Heroku\n        run: |\n          echo \"Deploying to Heroku...\"\n          # Add deployment commands here\n```", "answer": "```yaml name: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy to Heroku\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n    steps:\n    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # tag=v2.5.0\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7 # tag=v1.118.0\n      with:\n        bundler-cache: true # runs 'bundle install' and caches installed gems automatically\n    - name: Run tests\n      run: bundle exec rake\n    - name: Deploy to Heroku\n      uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820 # tag=v3.12.12\n      with:\n        heroku_api_key: ${{secrets.HEROKU_API_KEY}}\n        heroku_app_name: \"devdocs\"\n        heroku_email: \"team@freecodecamp.com\"\n        dontuseforce: true # --force should never be necessary\n        dontautocreate: true # The app exists, it should not be created\n```"}
{"id": "63c49f576fc19abdf9cd5856", "level": "level4", "llm_response": "```yaml\nname: Move new issues to correct docs repo\n\non:\n  issues:\n    types: [opened, transferred, reopened]\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    if: github.repository == 'github/docs-internal'\n    continue-on-error: true\n    steps:\n      - name: Move to correct repo\n        id: move_to_correct_repo\n        run: |\n          # Add your script here to move the issue to the correct docs repo\n```", "answer": "```yaml name: Move new issues to correct docs repo\n\n# **What it does**: If anyone creates an issue in the docs-internal repo for the engineering team or the content team, move that issue and notify the author\n# **Why we have it**: We don't want engineering or content issues in the docs-internal repo\n# **Who does it impact**: GitHub staff.\n\non:\n  issues:\n    types:\n      - opened\n      - transferred\n      - reopened\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.repository == 'github/docs-internal'\n    steps:\n      - id: move_to_correct_repo\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        env:\n          TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}\n          TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}\n        with:\n          github-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n          script: |\n            const issueNo = context.issue.number\n            const owner = 'github'\n            const originalRepo = 'docs-internal'\n\n            // See if the engineering label is present.\n            const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')\n\n            // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo\n            let correctRepo = process.env.TEAM_CONTENT_REPO\n            if (engineeringLabel) {\n              correctRepo = process.env.TEAM_ENGINEERING_REPO\n            }\n\n            const correctRepoObject = await github.repos.get({\n              owner: owner,\n              repo: correctRepo\n            })\n\n            // Post a comment in the docs-internal issue\n            await github.issues.createComment({\n              owner: owner,\n              repo: originalRepo,\n              issue_number: issueNo,\n              body: `\ud83d\udc4b  You opened this issue in '${context.repo.repo}'. Moving forward, we're asking that folks create new issues in the following repositories instead:\\n- For issues with the docs site, please submit to the [${process.env.TEAM_ENGINEERING_REPO}](/${owner}/${process.env.TEAM_ENGINEERING_REPO}) repo.\\n- For all new content issues, please submit to the [${process.env.TEAM_CONTENT_REPO}](/${owner}/${process.env.TEAM_CONTENT_REPO}) repo.\\n\\nWe will transfer this issue for you!`\n            })\n\n            // Transfer the issue to the correct repo\n            const issueNodeId = context.payload.issue.node_id\n            const correctRepositoryNodeId = correctRepoObject.data.node_id\n            console.log(`Issue GraphQL Node ID: ${issueNodeId}`)\n            console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)\n\n            const mutation = `mutation ($id: ID!, $repositoryId: ID!) {\n              transferIssue(input: {\n                issueId: $id,\n                repositoryId: $repositoryId\n              }) {\n                issue {\n                  url,\n                  number\n                }\n              }\n            }`\n\n            const variables = {\n              id: issueNodeId,\n              repositoryId: correctRepositoryNodeId\n            }\n\n            const graph = await github.graphql(mutation, variables)\n            console.log('GraphQL mutation result:\\n' + JSON.stringify(graph))\n\n            // Add the same labels to the new issue\n            const newIssueNumber = graph.transferIssue.issue.number\n            await github.issues.addLabels({\n              owner: owner,\n              repo: correctRepo,\n              issue_number: newIssueNumber,\n              labels: context.payload.issue.labels.map(label => label.name),\n            })\n```"}
{"id": "63c4a057cbc73931bb1b9c62", "level": "level4", "llm_response": "```yaml\nname: close stale issues/PRs\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close stale issues/PRs\n        run: |\n          gh issue list --state open --days 30 -L 100 --json number,state | jq -r '.[] | select(.state == \"open\") | .number' | xargs -I {} gh issue edit {} --state closed --comment \"This issue/PR has been closed because it was inactive for more than 30 days.\"\n```", "answer": "```yaml name: \"close stale issues/PRs\"\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label:\n          close-pr-message: \"\"\n```"}
{"id": "63c49f61736e7f0ed8c6df4d", "level": "level4", "llm_response": "```yaml\nname: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Install\n        run: npm install\n\n      - name: Update Code in Sandpack\n        run: npm run update-code\n\n      - name: Update Version in Sandpack\n        run: npm run update-version\n\n      - name: Create Pull Request\n        uses: pascalgn/gh-action-pr-creator@v1\n        with:\n          title: 'Update Sandpack'\n          body: 'Automatically update Sandpack based on code changes.'\n          base: main\n          head: sandpack-update\n          labels: 'auto-update'\n```", "answer": "```yaml name: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    name: Update Sandpack\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # To run comparison we need more than the latest commit. Keep the fetch-depth relatively\n          # high or set it to zero to get all commits from the git repo.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 150\n \n      - name: Install\n        run: yarn add -D plop@3.1.1\n \n      - name: Update Code in Sandpack\n        run: yarn gen:code\n        \n      - name: Update Version in Sandpack\n        run: yarn gen:v\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: 'Version Sandpack'\n          body: |\n            Update Sandpack dependencies. Check the preview before merging.\n          commit-message: docs\n          committer: GitHub <noreply@github.com>\n          branch: docs/sandpack\n          delete-branch: true\n```"}
{"id": "63c495927843b61269a087ec", "level": "level4", "llm_response": "```yaml\nname: update changelog\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  update:\n    id: update\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```", "answer": "```yaml name: update changelog\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```"}
{"id": "63c498c3cbc73931bb1892bc", "level": "level4", "llm_response": "```yaml\nname: Push to BitBucket\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install SSH key\n        run: |\n          mkdir -p ~/.ssh\n          echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          echo \"Host bitbucket.org\" >> ~/.ssh/config\n          echo \"  IdentityFile ~/.ssh/id_rsa\" >> ~/.ssh/config\n\n      - name: Push to BitBucket\n        run: |\n          git remote add bitbucket git@bitbucket.org:username/repository.git\n          git push bitbucket master\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.BITBUCKET_SSH_KEY }}\n```", "answer": "```yaml name: \"Push to BitBucket\"\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: \"0\"\n          ref: \"master\"\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          name: id_rsa\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n\n      - run: |\n          git remote add bitbucket git@bitbucket.org:DmitryKrutskikh/dart-code-metrics.git\n          git config --global user.email \"dmitry.krutskikh@gmail.com\"\n          git config --global user.name \"Dmitry Krutskikh\"\n          git checkout master\n          git push -u bitbucket master\n```"}
{"id": "63c4994933b087f6bde3e523", "level": "level4", "llm_response": "```yaml\nname: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v2\n\n    - name: Install pip for rosdep\n      run: sudo apt-get update && sudo apt-get install -y python3-pip\n\n    - name: Register AutonomouStuff repository\n      run: |\n        echo \"deb [trusted=yes] https://packages.ros.org/ros2/ubuntu $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/ros2-latest.list\n        sudo apt-get update\n\n    - name: Set git config\n      run: git config --global user.email \"github-actions[bot]@users.noreply.github.com\" && git config --global user.name \"GitHub Actions\"\n\n    - name: Run vcs import\n      run: vcs import src < repository-url\n\n    - name: Run vcs export\n      run: vcs export src < repository-url\n\n    - name: Run rosdep install\n      run: rosdep install -r requirements.txt --from-paths src --ignore-src -y\n```", "answer": "```yaml name: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n    container: ros:galactic\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Install pip for rosdep\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install python3-pip\n\n      - name: Register AutonomouStuff repository\n        uses: autowarefoundation/autoware-github-actions/register-autonomoustuff-repository@v1\n        with:\n          rosdistro: galactic\n\n      - name: Set git config\n        uses: autowarefoundation/autoware-github-actions/set-git-config@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Run vcs import\n        run: |\n          mkdir src\n          vcs import src < autoware.repos\n\n      - name: Run vcs export\n        run: |\n          vcs export --exact src || true\n\n      - name: Run rosdep install\n        run: |\n          sudo apt-get -y update\n          rosdep update\n          DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro galactic\n```"}
{"id": "63c495778052faa2781b1fcd", "level": "level4", "llm_response": "```yaml\nname: Autolocker\n\non:\n  pull_request:\n    types: [closed]\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  autolock:\n    id: autolock\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Autolock PRs that got merged or closed\n      run: |\n        echo \"Autolocking PRs that got merged or closed\"\n```", "answer": "```yaml name: Autolocker\n\non:\n  pull_request_target:\n    types: [closed]\n\npermissions: write-all\n\njobs:\n  autolock:\n#     if: ${{ github.event.pull_request.merged }} # Uncomment if you want it to run only when a PR gets MERGED\n    runs-on: ubuntu-latest\n    name: Autolocker\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |     \n            github.rest.issues.lock({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              lock_reason: \"resolved\" // [\"off-topic\", \"too heated\", \"resolved\", \"spam\"]\n            })\n```"}
{"id": "63c49fbe517fc08c1ef0b986", "level": "level4", "llm_response": "```yaml\nname: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Audit URLs using Lighthouse\n        run: |\n          npm install -g lighthouse\n          lighthouse https://staging.your-repo.com --output=json > lighthouse-report.json\n\n      - name: Use Node.js\n        run: |\n          node your-script.js\n\n      - name: Generate summary\n        run: |\n          echo \"::set-output name=summary::$(cat lighthouse-report.json | jq -r '.report')\"\n\n      - name: Output summary\n        run: |\n          echo \"Audit Summary: ${{ steps.generate-summary.outputs.summary }}\"\n\n      - name: Clean up\n        run: |\n          rm -rf lighthouse-report.json\n```", "answer": "```yaml name: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://stopcovid19.metro.tokyo.lg.jp/\n            https://stopcovid19-tokyo-staging.web.app/\n          uploadArtifacts: true\n\n      - name: Use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.13.0'\n      - run: npm install -g csv2md\n\n      # https://stedolan.github.io/jq/manual/\n      # https://shields.io/\n      - name: Summary\n        run: |\n          export LH_SUMMARY_FILE=\"${GITHUB_WORKSPACE}/.lighthouseci/result.md\"\n          echo \"LH_SUMMARY_FILE=${LH_SUMMARY_FILE}\" >> $GITHUB_ENV\n          cat \"${GITHUB_WORKSPACE}/.lighthouseci/\"lhr-*.json \\\n          | jq -rs 'def formatScore(s):\n              \"https://img.shields.io\" as $baseUrl |\n              \"logo=lighthouse&logoColor=lightgray\" as $query |\n              if s == null then \"![-1](\\($baseUrl)/badge/\\(\"?\" | @uri)-error-inactive?\\($query))\"\n                elif s < 0.5 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-red-critical?\\($query))\"\n                elif s < 0.9 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-orange-important?\\($query))\"\n                else \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-green-success?\\($query))\"\n              end;\n              [\"Metrics\", \"Score\", \"URL\"], ( [.[] | .requestedUrl as $url | .categories[] | {\n                metrics: .title,\n                score: formatScore(.score),\n                url: $url\n              } ] | sort_by(.metrics) | .[] | [.metrics, .score, .url] ) | @csv' \\\n          | csv2md | tee \"${LH_SUMMARY_FILE}\"\n\n      - uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs')\n            const table = fs.readFileSync(process.env.LH_SUMMARY_FILE, 'utf8')\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `<h4>Audit&nbsp;<a\n                  href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\"\n                  target=\"_blank\"><sup>[?]</sup></a></h4>\\n\\n${table}\\n\\n`.trim()\n            })\n```"}
{"id": "63c4982f6fc19abdf9ca783f", "level": "level4", "llm_response": "```yaml\nname: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n\ninputs:\n  name-this:\n    description: 'Build and publish an fbpcf/aws-s3-core image for a particular version'\n    required: false\n    default: 'Run'\n    type: string\n  aws_release:\n    description: 'The aws s3 version to build and publish'\n    required: true\n    type: string\n  os:\n    description: 'Which os to use. Currently only supports ubuntu'\n    required: false\n    default: 'ubuntu'\n    type: string\n  os_release:\n    description: 'The os version to use (e.g. 20.04 for ubuntu)'\n    required: false\n    default: '20.04'\n    type: string\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - name: Log into registry ${{ env.REGISTRY }}\n      run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ${{ env.REGISTRY }} --username github --password-stdin\n\n    - name: Build image\n      run: docker build -t ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }} .\n\n    - name: Tag image\n      run: docker tag ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }} ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}-${{ inputs.os }}-${{ inputs.os_release }}\n\n    - name: Publish image\n      run: docker push ${{ env.REGISTRY }}/fbpcf/aws-s3-core:${{ inputs.aws_release }}-${{ inputs.os }}-${{ inputs.os_release }}\n```", "answer": "```yaml name: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/aws-s3-core image for a particular version\"\n        default: \"Run\"\n      aws_release:\n        description: \"The aws s3 version to build and publish (e.g. 1.8.177)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg aws_release=${{ github.event.inputs.aws_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\" \\\n          -f \"docker/aws-s3-core/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core\n```"}
{"id": "63c49f326fc19abdf9cd4900", "level": "level4", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  test:\n    id: test\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Test\n      run: |\n        # Add your PowerShell test commands here\n        Write-Output \"Running tests on ${{ matrix.os }}\"\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    name: Run Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n    - uses: actions/checkout@v1\n    - name: Test\n      shell: pwsh\n      run: ./build.ps1 -Task Test -Bootstrap\n```"}
{"id": "63c49dbd1842bc13d778c451", "level": "level4", "llm_response": "```yaml\nname: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - web/po/*.po\n      - backend/po/*.po\n      - susemanager/po/*.po\n      - spacecmd/po/*.po\n      - java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml\n      - client/rhel/yum-rhn-plugin/po/*.po\n      - client/rhel/mgr-daemon/po/*.po\n      - client/rhel/spacewalk-client-tools/po/*.po\n\njobs:\n  run:\n    if: github.repository == 'uyuni-project/uyuni'\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Cancel Previous Runs\n        run: |\n          if [ -n \"$GITHUB_REF\" ]; then\n            gh run cancel --repo $GITHUB_REPOSITORY --workflow $GITHUB_WORKFLOW --ref $GITHUB_REF --event $GITHUB_EVENT_NAME --limit 1\n          fi\n\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Setup tooling\n        run: |\n          # Add your tooling setup commands here\n\n      - name: Setup git\n        run: |\n          git config --global user.name 'GitHub Actions'\n          git config --global user.email 'actions@github.com'\n\n      - name: Align translations files\n        run: |\n          # Add your translation alignment commands here\n\n      - name: Push changes\n        run: |\n          git add .\n          git commit -m \"Update translation files\"\n          git push\n```", "answer": "```yaml name: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n run:\n   name: Update translation files\n   if: github.repository == 'uyuni-project/uyuni'\n   runs-on: ubuntu-latest\n   steps:\n   - name: Cancel Previous Runs\n     uses: styfle/cancel-workflow-action@0.10.0\n     with:\n         access_token: ${{ github.token }}\n\n   - name: Checkout repo\n     uses: actions/checkout@v3\n     with:\n       token: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Setup tooling\n     run: sudo apt-get install -y make git gettext intltool python3\n\n   - name: Setup git\n     run: |\n       git config --global user.name \"Galaxy CI\"\n       git config --global user.email \"galaxy-ci@suse.de\"\n\n   - name: Align translations files\n     run: scripts/translation/update-all-translation-strings.sh\n     env:\n       ADDITIONAL_SAFE_BRANCHNAME: master\n       GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Push changes\n     run: git push origin HEAD\n```"}
{"id": "63c49e1a1842bc13d778e9d5", "level": "level4", "llm_response": "```yaml\nname: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    id: unit-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v2\n        with:\n          node-version: 'lts/Gallium'\n      - name: Install dependencies\n        run: npm install\n      - name: Run unit test\n        run: npm test\n      - name: Coveralls report\n        uses: coveralls/coveralls-action@v1\n\n  browser-test:\n    id: browser-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v2\n        with:\n          node-version: 'lts/Gallium'\n      - name: Install dependencies\n        run: npm install\n      - name: Run browser test\n        run: npm run browser-test\n\n  performance-test:\n    id: performance-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v2\n        with:\n          node-version: 'lts/Gallium'\n      - name: Install dependencies\n        run: npm install\n      - name: Run performance test\n        run: npm run performance-test\n```", "answer": "```yaml name: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run unit test\n        run: yarn test:unit\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run browser test\n        run: yarn test:browser\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run performance test\n        run: yarn test:performance\n```"}
{"id": "63c49c8c517fc08c1eef7305", "level": "level4", "llm_response": "```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Merge PR\n        run: |\n          git config --global user.name 'dependabot[bot]'\n          git config --global user.email 'bot@github.com'\n          git merge --ff-only origin/main\n          git push origin HEAD\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          target: minor\n          github-token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```"}
{"id": "63c49cd01e336480757a3424", "level": "level4", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [go]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        run: |\n          go build -v ./...\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push: {}\n  pull_request: {}\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49bd9517fc08c1eef2fa7", "level": "level4", "llm_response": "```yaml\nname: Spell Check\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 8 * * 2'\n  workflow_dispatch:\n  repository_dispatch:\n    types: [spell-check]\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Spell check\n      run: |\n        # Add your spell check command here\n```", "answer": "```yaml name: Spell Check\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch new misspelling detections resulting from dictionary updates.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Spell check\n        uses: codespell-project/actions-codespell@master\n```"}
{"id": "63c4995a6fc19abdf9caf222", "level": "level4", "llm_response": "```yaml\nname: Update MagiskOnWSA\n\non:\n  schedule:\n    - cron: '0 0 * * 4'\n  workflow_dispatch:\n\npermissions:\n  actions: write\n  contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Rename tag\n      run: echo \"Renaming tag\"\n\n    - name: Delete tag\n      run: echo \"Deleting tag\"\n\n    - name: Update MagiskOnWSA\n      run: echo \"Updating MagiskOnWSA\"\n\n    - name: Publish release\n      run: echo \"Publishing release\"\n\n    - name: Delete release\n      run: echo \"Deleting release\"\n```", "answer": "```yaml name: Update MagiskOnWSA\non:\n  schedule:\n    - cron: \"0 0 * * 4\"\n  workflow_dispatch:\n\npermissions:\n    actions: write\n    contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"tag_name\":\"outdated\"}' > /dev/null\n      - name: Delete tag\n        run: |\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest\n      - name: Update MagiskOnWSA\n        run: |\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          sleep 15m\n      - name: Publish release\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"prerelease\":false}' > /dev/null\n      - name: Delete release\n        run: |\n          ID=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/outdated | jq -r .id)\"\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/$ID\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/outdated\n```"}
{"id": "63c4a1401899db5886518aff", "level": "level4", "llm_response": "```yaml\nname: Call commitlint\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    runs-on: ubuntu-latest\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```", "answer": "```yaml name: Call commitlint\non:\n  pull_request_target:\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c495f37843b61269a0b106", "level": "level4", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\n\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v2\n\n    - name: initialize\n      uses: github/codeql-action/init@v2\n\n    - name: autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: analyze\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # Broadly based on example Github action from\n# https://github.com/github/codeql-action#usage\nname: codeql\n# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#permissions\n# https://github.com/github/codeql-action/issues/572\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\non:\n  push:\n    branches:\n      - main\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: initialize\n        if: success()\n        uses: github/codeql-action/init@v2\n        with:\n          # Limit analysis to Go for now.\n          # Available languages: https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\n          languages: go\n      - name: autobuild\n        if: success()\n        uses: github/codeql-action/autobuild@v2\n      - name: analyze\n        if: success()\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f98cbc73931bb1b4f54", "level": "level4", "llm_response": "```yaml\nname: Sync To Gitee\n\non:\n  push:\n    branches: [ '*' ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ '*' ]\n  repository_dispatch:\n    types: [ 'sync' ]\n  workflow_dispatch:\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n```", "answer": "```yaml name: Sync To Gitee  #\u540d\u5b57  \u53ef\u81ea\u5b9a\u4e49\non: [ push, delete, create ]  #\u89e6\u53d1\u6761\u4ef6   page_build\u8868\u793aGithub Page\u90e8\u7f72\u5b8c\u6210\u540e\u89e6\u53d1\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master #\u5f00\u6e90actions\u5305\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n        with:\n          source-repo: \"git@github.com:redleafnew/Chinese-STD-GB-T-7714-related-csl.git\" # github\u4ed3\u5e93\u5730\u5740\n          destination-repo: \"git@gitee.com:redleafnew00/Chinese-STD-GB-T-7714-related-csl.git\" # gitee\u4ed3\u5e93\u5730\u5740\n\n```"}
{"id": "63c4a0edcbc73931bb1bd96d", "level": "level4", "llm_response": "```yaml\nname: Unplugin Example\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  gh-pages:\n    id: gh-pages\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: ''\n        run: echo \"Hello, GitHub Actions!\"\n\n      - name: Set node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Setup\n        run: |\n          npm install -g yarn\n          yarn config set registry https://registry.npmjs.org/\n\n      - name: Install\n        run: yarn install\n\n      - name: Build\n        run: yarn build\n\n      - name: Install Example Dependencies & Build\n        run: |\n          cd example\n          yarn install\n          yarn build\n\n      - name: Deploy\n        run: |\n          cd dist\n          git init\n          git add .\n          git commit -m \"Deploy to GitHub Pages\"\n          git push -f https://github.com/your-username/your-repo.git gh-pages\n```", "answer": "```yaml name: Unplugin Example\n\non:\n  push:\n    branches: [main]\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Setup\n        run: npm i -g @antfu/ni\n\n      - name: Install\n        run: nci\n\n      - name: Build\n        run: nr build\n\n      - name: Install Example Dependencies & Build\n        run: pnpm -C examples/vite run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./examples/vite/dist\n          force_orphan: true\n```"}
{"id": "63c499bf1899db58864e8a2a", "level": "level4", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Triage PR\n        run: |\n          # Add your triage logic here\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a2db008460c1df2c5c9", "level": "level4", "llm_response": "```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Build project\n      run: dotnet build\n```", "answer": "```yaml name: Release\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Trigger Build flow\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n          repository: ${{ github.repository }}\n          event-type: release\n          client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\n```"}
{"id": "63c498731899db58864e00b5", "level": "level5", "llm_response": "```yaml\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows: [build-ci]\n    branches: [main]\n    types: [completed]\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: true\n\njobs:\n  k3s:\n    runs-on: ubuntu-latest\n    needs: build-ci\n    steps:\n      - name: Call reusable workflow for k3s\n        uses: ./.github/workflows/master-e2e.yaml\n        with:\n          cluster_name: cluster-k3s\n          dashboard_version: latest\n          k8s_version_to_provision: v1.24.4+k3s1\n          rancher_channel: stable\n          rancher_version: latest\n          runner: elemental-e2e-ci-runner-spot-x86-64-2\n          start_condition: ${{ github.event.workflow_run.conclusion }}\n          test_type: cli\n          zone: us-central1-a\n          workflow_download: ${{ github.event.workflow_run.workflow_id }}\n        secrets:\n          credentials: ${{ secrets.GCP_CREDENTIALS }}\n\n  rke2:\n    runs-on: ubuntu-latest\n    needs: k3s\n    if: always()\n    steps:\n      - name: Call reusable workflow for rke2\n        uses: ./.github/workflows/master-e2e.yaml\n        with:\n          cluster_name: cluster-rke2\n          dashboard_version: latest\n          k8s_version_to_provision: v1.24.4+rke2r1\n          rancher_channel: stable\n          rancher_version: latest\n          runner: elemental-e2e-ci-runner-spot-x86-64-2\n          start_condition: ${{ github.event.workflow_run.conclusion }}\n          test_type: cli\n          zone: us-central1-a\n          workflow_download: ${{ github.event.workflow_run.workflow_id }}\n        secrets:\n          credentials: ${{ secrets.GCP_CREDENTIALS }}\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"id": "63c4a04733b087f6bde6b930", "level": "level5", "llm_response": "```yaml\nname: Coding Style\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository:\n    types: [created]\n\njobs:\n  nette_cc:\n    id: nette_cc\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: 'none'\n      - name: Install Nette Code Checker\n        run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n      - name: Run Nette Code Checker\n        run: php temp/code-checker/code-checker --strict-types --no-progress\n\n  nette_cs:\n    id: nette_cs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: 'none'\n      - name: Install Nette Coding Standard\n        run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n      - name: Run Nette Coding Standard\n        run: php temp/coding-standard/ecs check\n```", "answer": "```yaml name: Coding Style\n\non: [push, pull_request]\n\njobs:\n    nette_cc:\n        name: Nette Code Checker\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n            - run: php temp/code-checker/code-checker --strict-types --no-progress\n\n\n    nette_cs:\n        name: Nette Coding Standard\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n            - run: php temp/coding-standard/ecs check\n```"}
{"id": "63c4a0eeb008460c1df57100", "level": "level5", "llm_response": "```yaml\nname: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\n      - docs/**\n      - Gemfile\n      - README.md\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n\n    steps:\n    - name: Cancel previous run in progress\n      uses: styfle/cancel-workflow-action@0.11.0\n      with:\n        ignore_sha: true\n        all_but_latest: true\n        access_token: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Extract branch name\n      id: extract_branch\n      run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n\n    - name: Extract commit SHA\n      id: extract_commit_sha\n      run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n\n    - name: Set up QEMU\n      uses: docker/setup-qemu-action@v2\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n      with:\n        driver-opts: image=moby/buildkit:master\n\n    - name: Log in to registry\n      uses: docker/login-action@v2\n      with:\n        registry: ghcr.io\n        username: ${{ github.repository_owner }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Build and push\n      uses: docker/build-push-action@v3\n      with:\n        context: .\n        file: ./Dockerfiles/nginx.Dockerfile\n        build-args: VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }} GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n        push: true\n        tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```", "answer": "```yaml name: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'nginx/**'\n      - 'Dockerfiles/nginx.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n      - '_config.yml'\n      - '_includes/**'\n      - '_layouts/**'\n      - 'docs/**'\n      - 'Gemfile'\n      - 'README.md'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Extract commit SHA\n        shell: bash\n        run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n        id: extract_commit_sha\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/nginx.Dockerfile\n          build-args: |\n            VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }}\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```"}
{"id": "63c4989d1842bc13d776b5a5", "level": "level5", "llm_response": "```yaml\nname: Publish release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2.3.4\n\n    - name: Set up JDK 1.11\n      uses: actions/setup-java@v2.3.0\n      with:\n        distribution: adopt\n        java-version: 11\n        check-latest: true\n        cache: maven\n\n    - name: Build with Maven\n      run: mvn -B package --file pom.xml\n\n    - name: Upload release artifact\n      uses: shogo82148/actions-upload-release-asset@v1.3.1\n      with:\n        upload_url: ${{ github.event.release.upload_url }}\n        asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```", "answer": "```yaml name: Publish release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build and upload release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Set up JDK 1.11\n        uses: actions/setup-java@v2.3.0\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          check-latest: true\n          cache: 'maven'\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n      - name: Upload release artifact\n        uses: shogo82148/actions-upload-release-asset@v1.3.1\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```"}
{"id": "63c498be6fc19abdf9cab2ce", "level": "level5", "llm_response": "```yaml\nname: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: vendor\n          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n          restore-keys: ${{ runner.os }}-php-\n\n      - name: Install dependencies\n        if: steps.composer-cache.outputs.cache-hit != 'true'\n        run: composer install --prefer-dist --no-progress --ansi\n\n      - name: PHP version\n        run: php -v\n\n      - name: Checking for sign off (GPG also accepted)\n        run: php ./vendor/simplemachines/build-tools/check-signed-off.php\n\n      - name: Checking file integrity\n        run: |\n          php ./vendor/simplemachines/build-tools/check-eof.php\n          php ./vendor/simplemachines/build-tools/check-smf-license.php\n          php ./vendor/simplemachines/build-tools/check-smf-languages.php\n          php ./vendor/simplemachines/build-tools/check-version.php\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup PHP ${{ matrix.php }}\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          coverage: none\n\n      - name: Cache Composer packages\n        id: composer-cache\n        uses: actions/cache@v2\n        with:\n          path: vendor\n          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n          restore-keys: ${{ runner.os }}-php-\n\n      - name: Install dependencies\n        if: steps.composer-cache.outputs.cache-hit != 'true'\n        run: composer install --prefer-dist --no-progress --ansi\n\n      - name: Lint PHP files\n        run: vendor/bin/phplint -w --exclude .git --exclude vendor --ansi .\n```", "answer": "```yaml name: PHP Check\n\non:\n  push:\n    branches:\n      - release-2.1\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - run: php -v\n\n    - name: Checking for sign off (GPG also accepted)\n      run: php ./vendor/simplemachines/build-tools/check-signed-off.php\n\n    - name: Checking file integrity\n      run: |\n        php ./vendor/simplemachines/build-tools/check-eof.php\n        php ./vendor/simplemachines/build-tools/check-smf-license.php\n        php ./vendor/simplemachines/build-tools/check-smf-languages.php\n        php ./vendor/simplemachines/build-tools/check-version.php\n\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [ 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1 ]\n\n    name: PHP ${{ matrix.php }} Syntax Check\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Setup PHP ${{ matrix.php }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        coverage: none\n\n    - name: Cache Composer packages\n      id: composer-cache\n      uses: actions/cache@v2\n      with:\n        path: vendor\n        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-php-\n\n    - name: Install dependencies\n      if: steps.composer-cache.outputs.cache-hit != 'true'\n      run: composer install --prefer-dist --no-progress --ansi\n\n    - name: Lint PHP files\n      run: vendor/bin/phplint -w --exclude .git --exclude vendor --ansi .\n```"}
{"id": "63c49f746fc19abdf9cd63e6", "level": "level5", "llm_response": "```yaml\nname: hygieia-pr\n\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      context: hygieia\n      image_name: hygieia\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: True\n          tags: latest\n```", "answer": "```yaml ---\nname: hygieia-pr\non:\n  pull_request:\n    paths:\n      - hygieia/**\n      - .github/workflows/hygieia-pr.yaml\njobs:\n  build:\n    env:\n      context: hygieia\n      image_name: hygieia\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49f38736e7f0ed8c6ce43", "level": "level5", "llm_response": "```yaml\nname: Platform OWASP ZAP\n\non:\n  push:\n    branches:\n      - dev\n    paths-ignore:\n      - .github/**\n      - docs/**\n      - build/**\n      - README.md\n      - LICENSE\n      - **/argoDeploy.json\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install VirtoCommerce.GlobalTool\n        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n\n      - name: Docker Login\n        uses: azure/docker-login@v1\n        with:\n          login-server: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker Env\n        uses: VirtoCommerce/vc-github-actions/docker-env@master\n        with:\n          githubUser: ${{ env.GITHUB_ACTOR }}\n          githubToken: ${{ env.GITHUB_TOKEN }}\n          platformImage: ghcr.io/virtocommerce/platform\n          storefrontImage: ghcr.io/virtocommerce/storefront\n          validateSwagger: false\n\n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-baseline@v0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          docker_name: owasp/zap2docker-stable\n          target: http://localhost:8090\n          cmd_options: -a -d\n```", "answer": "```yaml # v1.2\nname: Platform OWASP ZAP\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - 'docs/**'\n      - 'build/**'\n      - 'README.md'\n      - 'LICENSE'\n      - '**/argoDeploy.json'\n    branches: [ dev ]\n  workflow_dispatch:\n\njobs:\n  owasp:\n    runs-on: ubuntu-latest\n\n    steps:\n\n      - name: Install VirtoCommerce.GlobalTool\n        uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master\n\n      - name: Docker Login\n        uses: azure/docker-login@v1\n        with:\n          login-server: ghcr.io\n          username: $GITHUB_ACTOR\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker Env\n        uses: VirtoCommerce/vc-github-actions/docker-env@master\n        with:\n          githubUser: ${{ env.GITHUB_ACTOR }}\n          githubToken: ${{ env.GITHUB_TOKEN }}\n          platformImage: ghcr.io/virtocommerce/platform\n          storefrontImage: ghcr.io/virtocommerce/storefront\n          validateSwagger: 'false'\n\n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-baseline@v0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          docker_name: 'owasp/zap2docker-stable'\n          target: 'http://localhost:8090'\n          cmd_options: '-a -d'\n```"}
{"id": "63c4955b8052faa2781b1498", "level": "level5", "llm_response": "```yaml\nname: CI v2\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        go: [1.16]\n\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      run: |\n        golint -set_exit_status=1 ./...\n\n    - name: Vet\n      run: |\n        go vet -unsafeptr=false ./...\n\n    - name: Test\n      run: |\n        go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```", "answer": "```yaml name: CI v2\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        go: ['1.16']\n    steps:\n    - name: Setup\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n\n    - name: Prerequisites\n      run: |\n        sudo apt-get update\n        sudo apt-get -y install libvlc-dev vlc-plugin-base vlc-plugin-video-output vlc-plugin-access-extra\n\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Dependencies\n      working-directory: ./v2\n      run: |\n        go version\n        go get -v -t -d ./...\n        go install golang.org/x/lint/golint@latest\n\n    - name: Lint\n      working-directory: ./v2\n      run: golint -set_exit_status=1 ./...\n\n    - name: Vet\n      working-directory: ./v2\n      run: go vet -unsafeptr=false ./...\n\n    - name: Test\n      working-directory: ./v2\n      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...\n\n    - name: Coverage\n      uses: codecov/codecov-action@v3\n```"}
{"id": "63c49fe533b087f6bde69242", "level": "level5", "llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Greet\n      uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: \"Thanks for reporting this issue, don't forget to star this project if you haven't already to help us reach a wider audience.\"\n        pr-message: \"Thanks for implementing a fix, could you ensure that the test covers your changes if applicable.\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request_target, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: \"Thanks for reporting this issue, don't forget to star this project if you haven't already to help us reach a wider audience.\"\n          pr-message: \"Thanks for implementing a fix, could you ensure that the test covers your changes if applicable.\"\n```"}
{"id": "63c49ff0736e7f0ed8c7162c", "level": "level5", "llm_response": "```yaml\nname: Main Workflow\n\non:\n  push:\n    branches:\n      - develop\n  pull_request:\n    branches:\n      - '*'\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    id: tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10, 3.11]\n        operating-system: [ubuntu-latest]\n\n    env:\n      POETRY_VERSION: 1.2.2\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install unrar\n        if: matrix.operating-system == 'ubuntu-latest'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -qy unrar\n\n      - name: Set up Python ${{ matrix.python-version }}\n        id: setup-python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Cache poetry install\n        uses: actions/cache@v3\n        with:\n          path: ~/.local\n          key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0\n\n      - name: Install poetry\n        uses: snok/install-poetry@v1\n        with:\n          version: ${{ env.POETRY_VERSION }}\n          virtualenvs-create: true\n          virtualenvs-in-project: true\n\n      - name: Load cached venv\n        id: cached-poetry-dependencies\n        uses: actions/cache@v3\n        with:\n          path: .venv\n          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n\n      - name: Install dependencies\n        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n        run: poetry install --no-interaction --no-root\n\n      - name: Install project\n        run: poetry install --no-interaction\n\n      - name: Test with pytest\n        run: poetry run pytest -n auto\n```", "answer": "```yaml name: Main Workflow\n\non:\n  push:\n    branches:\n    - develop\n  pull_request:\n    branches:\n    - \"*\"\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Run Tests\n    runs-on: ${{ matrix.operating-system }}\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n        operating-system: [ubuntu-latest] # TODO: Fix a couple tests and enable windows. windows-latest\n      fail-fast: false\n    env:\n      POETRY_VERSION: \"1.2.2\"\n    steps:\n    - uses: actions/checkout@v3\n    # Can we cache the apt-get stuff somehow?\n    - name: Install unrar  # used by some flexget tests\n      if: matrix.operating-system == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -qy unrar\n    # There is some poetry caching built in to setup-python, but there seems to be some confusion\n    # about whether it works well when using a matrix of different python versions. Doing caching\n    # manually for now, until there is more info.\n    - name: Set up Python ${{ matrix.python-version }}\n      id: setup-python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: cache poetry install\n      uses: actions/cache@v3\n      with:\n        path: ~/.local\n        key: poetry-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-0  # increment last number to reset cache\n    - uses: snok/install-poetry@v1\n      with:\n        version: ${{ env.POETRY_VERSION }}\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}\n    - name: Install dependencies\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n      run: poetry install --no-interaction --no-root\n    - name: Install project\n      run: poetry install --no-interaction\n    - name: Test with pytest\n      run: |\n        poetry run pytest -n auto\n```"}
{"id": "63c4977fcbc73931bb180c41", "level": "level5", "llm_response": "```yaml\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark-this:\n        description: 'Benchmark to run'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: ./dev/make-distribution.sh -Pspark-3.2 && rm -rf /home/hadoop/celeborn-toolkit/dist/* && mv celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/\n\n      - name: Benchmark\n        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark\n\n      - name: Upload Result\n        uses: actions/upload-artifact@v3\n        with:\n          name: 'benchmark result'\n          path: /home/hadoop/celeborn-toolkit/result/\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: Celeborn Benchmark\n\non:\n  workflow_dispatch:\n    inputs:\n      benchmark:\n        description: 'benchmark'\n        required: true\n        default: 'default-benchmark'\n\njobs:\n  regression:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build\n        run: ./dev/make-distribution.sh -Pspark-3.2 && rm -rf /home/hadoop/celeborn-toolkit/dist/* && mv celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/\n\n      - name: Benchmark\n        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark\n\n      - name: Upload Result\n        uses: actions/upload-artifact@v3\n        with:\n          name: benchmark result\n          path: /home/hadoop/celeborn-toolkit/result/```"}
{"id": "63c49f1e1e336480757b1d5b", "level": "level5", "llm_response": "```yaml\nname: Code scanning - action\n\non:\n  push:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  schedule:\n    - cron: '0 14 * * 4'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"Code scanning - action\"\n\non:\n  push:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  pull_request:\n    paths-ignore:\n      - \"**.md\"\n      - \"docs\"\n  schedule:\n    - cron: \"0 14 * * 4\"\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      # required for all workflows\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        # with:\n        #   languages: go, javascript, csharp, python, cpp, java\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f8eb008460c1df4e97d", "level": "level5", "llm_response": "```yaml\nname: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - name: Install build dependencies\n        run: pip install -U setuptools wheel build\n      - name: Build\n        run: python -m build .\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install -U -r requirements/publish.txt\n      - name: Create Tag\n        run: python pypi_packaging.py\n```", "answer": "```yaml name: PyPI-Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - name: Install build dependencies\n        run: pip install -U setuptools wheel build\n      - name: Build\n        run: python -m build .\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.pypi_password }}\n      - name: Install GitPython and cloudevents for pypi_packaging\n        run: pip install -U -r requirements/publish.txt\n      - name: Create Tag\n        run: python pypi_packaging.py\n```"}
{"id": "63c4990d33b087f6bde3cce0", "level": "level5", "llm_response": "```yaml\nname: Test C\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/workflows/test-lang-c.yml\n      - lang/c/**\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy libjansson-dev libsnappy-dev\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n\n  interop:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                  libjansson-dev \\\n                                                  liblzma-dev \\\n                                                  libsnappy-dev \\\n                                                  libzstd-dev\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - .github/workflows/test-lang-c.yml\n    - lang/c/**\n\ndefaults:\n  run:\n    working-directory: lang/c\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt-get install -qqy libjansson-dev libsnappy-dev\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n\n  interop:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: |\n          sudo apt-get install -qqy --no-install-recommends libbz2-dev \\\n                                                            libjansson-dev \\\n                                                            liblzma-dev \\\n                                                            libsnappy-dev \\\n                                                            libzstd-dev\n\n      - name: Cache Local Maven Repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Java Avro for Interop Test\n        working-directory: .\n        run: mvn -B install -DskipTests\n\n      - name: Create Interop Data Directory\n        working-directory: .\n        run: mkdir -p build/interop/data\n\n      - name: Generate Interop Resources\n        working-directory: lang/java/avro\n        run: mvn -B -P interop-data-generate generate-resources\n\n      - name: Generate Interop Data\n        run: ./build.sh interop-data-generate\n\n      - name: Run Interop Tests\n        run: ./build.sh interop-data-test\n```"}
{"id": "63c4a0571842bc13d779cf83", "level": "level5", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Set up Release Drafter\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        uses: release-drafter/release-drafter@v5\n        with:\n          config-name: notes.yml\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n          config-name: notes.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c49c4a1842bc13d7782abd", "level": "level5", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Set up Release Drafter\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}\n        uses: release-drafter/release-drafter@v5\n        with:\n          config-name: config.yml\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n#         (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n         config-name: config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.RELEASE_DRAFTER_TOKEN }}```"}
{"id": "63c499511899db58864e5d14", "level": "level5", "llm_response": "```yaml\nname: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Remove stale, waiting-reply labels\n      uses: actions-ecosystem/action-remove-labels@v1\n      with:\n        labels: stale,waiting-reply\n```", "answer": "```yaml name: Issue Comment Created Triage\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  issue_comment_triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          labels: |\n            stale\n            waiting-reply\n```"}
{"id": "63c4a08333b087f6bde6d0fe", "level": "level5", "llm_response": "```yaml\nname: Semantic Pull Request\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n  pull_request_target:\n    types: [opened, edited, synchronize]\n\npermissions:\n  contents: read\n  pull-requests: read\n  statuses: write\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n\n    permissions:\n      pull-requests: read\n      statuses: write\n\n    steps:\n    - name: Validate PR title\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      uses: amannn/action-semantic-pull-request@v5\n      with:\n        types: \"feat\\nfix\\nchore\\nrefactor\\ndocs\\ntest\\nci\\nbuild\\ninfra\\nrevert\"\n```", "answer": "```yaml name: Semantic Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\npermissions: {}\njobs:\n  main:\n    permissions:\n      pull-requests: read # to analyze PRs (amannn/action-semantic-pull-request)\n      statuses: write # to mark status of analyzed PR (amannn/action-semantic-pull-request)\n\n    runs-on: ubuntu-latest\n    name: Semantic Pull Request\n    steps:\n      - name: Validate PR title\n        uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |\n            feat\n            fix\n            chore\n            refactor\n            docs\n            test\n            ci\n            build\n            infra\n            revert\n```"}
{"id": "63c4a0e71e336480757bcf80", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [javascript, python]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '39 14 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e3533b087f6bde5e450", "level": "level5", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Mark stale issues and pull requests\n        uses: actions/stale@v6\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'This issue has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n          stale-pr-message: 'This pull request has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n          stale-issue-label: 'stale/issue'\n          stale-pr-label: 'stale/pr'\n          days-before-stale: 30\n          days-before-close: 5\n```", "answer": "```yaml # SPDX-License-Identifier: Apache-2.0\n# Copyright 2019 Intel Corporation\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-pr-message: 'This pull request has been stale for 30 days and will be closed in 5 days. Comment to keep it open.'\n        stale-issue-label: 'stale/issue'\n        stale-pr-label: 'stale/pr'\n        days-before-stale: 30\n        days-before-close: 5\n```"}
{"id": "63c49be0517fc08c1eef3298", "level": "level5", "llm_response": "```yaml\nname: Example Integration on Pull Request\n\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - closed\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == true\n\n    steps:\n      - name: Plant a Tree\n        id: planttree\n        uses: protontypes/continuous-reforestation@main\n        with:\n          apikey: ${{ secrets.raaskey }}\n          enterpriseid: cd7cedcd\n          user: ${{ github.actor }}\n          treecount: 5\n          projectid: 14442771\n          production: false\n\n      - name: Response of digitalhumani.com RaaS API\n        run: |\n          echo \"${{ steps.planttree.outputs.response }}\"\n          echo \"${{ steps.planttree.outputs.plantedTrees }}\"\n```", "answer": "```yaml name: Example Integration on Pull Request\non: \n  pull_request_target:\n    branches:\n      - main\n    types:\n      - closed\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Plant a Tree\n        if: github.event.pull_request.merged == true\n        id: planttree\n        uses: protontypes/continuous-reforestation@main\n        with:\n        # Enter your API variables below\n            apikey: ${{ secrets.raaskey }}\n            enterpriseid: \"cd7cedcd\"\n            user: ${{ github.actor }}\n            treecount: 5\n            projectid: \"14442771\" # This projectid can be used to have your trees planted where they are needed the most.\n            production: \"false\"\n\n      - name: Response of digitalhumani.com RaaS API\n        run: |\n            echo \"${{ steps.planttree.outputs.response }}\"\n            echo \"${{ steps.planttree.outputs.plantedTrees }}\"\n```"}
{"id": "63c49dc31842bc13d778c6ac", "level": "level5", "llm_response": "```yaml\nname: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches:\n      - main\n  issues:\n    types: [opened]\n  comment:\n    issue:\n    pull_request:\n  pull_request:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n      - name: Welcome message\n        uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Hey friend! Thanks for opening this issue. We appreciate your contribution and welcome you to our community! We are glad to have you here and to have your input on the Azure Arc Jumpstart.'\n          pr-message: 'Hi friend! Thanks you for opening this Pull Request. Someone will review it soon. Thank you for committing to making the Azure Arc Jumpstart better.'\n```", "answer": "```yaml name: Housekeeping - Issues and PRs auto message\n\non:\n  fork:\n  push:\n    branches: [main]\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Hey friend! Thanks for opening this issue. We appreciate your contribution and welcome you to our community! We are glad to have you here and to have your input on the Azure Arc Jumpstart.'\n          pr-message: 'Hi friend! Thanks you for opening this Pull Request. Someone will review it soon. Thank you for committing to making the Azure Arc Jumpstart better.'\n```"}
{"id": "63c49e961842bc13d7791c8a", "level": "level5", "llm_response": "```yaml\nname: Publish\n\non:\n  draft:\n    types: [saved]\n  release:\n    types: [published]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '14'\n        registry-url: 'https://registry.npmjs.org/'\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Run tests\n      run: npm test\n\n    - name: Set tag name\n      env:\n        TAG_NAME: ${{ github.event.release.tag_name }}\n      run: npm version $TAG_NAME --git-tag-version=false\n\n    - name: Publish to npm\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.npm_token }}\n      run: |\n        npm whoami\n        npm --ignore-scripts publish\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [created]\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: npm\n      - run: npm ci\n      - run: npm test\n      - run: npm version ${TAG_NAME} --git-tag-version=false\n        env:\n          TAG_NAME: ${{ github.event.release.tag_name }}\n      - run: npm whoami; npm --ignore-scripts publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n```"}
{"id": "63c49b631d1c0d6c2d08006a", "level": "level5", "llm_response": "```yaml\nname: CI Bot\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_review_comment:\n    types: [created]\n\nenv:\n  PLUGINS: assign auto-cc cc label-kind label-bug label-documentation label-enhancement label-question\n  MEMBERS_PLUGINS: label-duplicate label-good-first-issue label-help-wanted label-invalid label-kind label-wontfix lifecycle\n  REVIEWERS_PLUGINS: retitle\n  APPROVERS_PLUGINS: merge\n  MAINTAINERS_PLUGINS: milestone\n  OWNERS_PLUGINS: \"\"\n  REVIEWERS: pacoxu wzshiming\n  APProvers: pacoxu wzshiming\n  MAINTAINERS: pacoxu wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\n\njobs:\n  issue_opened:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'issues'\n    steps:\n      - name: Issue Opened\n        env:\n          LOGIN: ${{ github.event.issue.user.login }}\n          MESSAGE: ${{ github.event.issue.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.issue.author_association }}\n          ISSUE_KIND: issue\n          TYPE: created\n          GREETING: Hi @${{ github.event.issue.user.login }},\n            Thanks for opening an issue!\n            We will look into it as soon as possible.\n        uses: wzshiming/gh-ci-bot@v1\n\n  pr_opened:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    steps:\n      - name: PR Opened\n        env:\n          LOGIN: ${{ github.event.pull_request.user.login }}\n          MESSAGE: ${{ github.event.pull_request.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}\n          ISSUE_KIND: pr\n          TYPE: created\n          GREETING: Hi @${{ github.event.pull_request.user.login }},\n            Thanks for your pull request!\n            If the PR is ready, use the /auto-cc command to assign Reviewer to Review. \n            We will review it shortly.\n        uses: wzshiming/gh-ci-bot@v1\n\n  issue_commented:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'issue_comment' && !github.event.issue.pull_request\n    steps:\n      - name: Issue Commented\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: issue\n          TYPE: comment\n        uses: wzshiming/gh-ci-bot@v1\n\n  pr_review_commented:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request_review_comment'\n    steps:\n      - name: PR Review Commented\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n        uses: wzshiming/gh-ci-bot@v1\n\n  pr_commented:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'issue_comment' && github.event.issue.pull_request\n    steps:\n      - name: PR Commented\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n        uses: wzshiming/gh-ci-bot@v1\n```", "answer": "```yaml name: CI Bot\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_review_comment:\n    types:\n      - created\n  issues:\n    types:\n      - opened\n  pull_request:\n    types:\n      - opened\n\nenv:\n  # This plugins is for anyone who can use it\n  PLUGINS: |-\n    assign\n    auto-cc\n    cc\n    label-kind\n    label-bug\n    label-documentation\n    label-enhancement\n    label-question\n  \n  # This plugins is for organization member or repository member\n  MEMBERS_PLUGINS: |-\n    label-duplicate\n    label-good-first-issue\n    label-help-wanted\n    label-invalid\n    label-kind\n    label-wontfix\n    lifecycle\n  \n  # This plugins is for in the REVIEWERS environment variable\n  REVIEWERS_PLUGINS: |-\n    retitle\n  # This plugins is for in the APPROVERS environment variable\n  APPROVERS_PLUGINS: |-\n    merge\n  # This plugins is for in the MAINTAINERS environment variable\n  MAINTAINERS_PLUGINS: |-\n    milestone\n  # This plugins is for organization owner or repository owner\n  OWNERS_PLUGINS: \"\"\n\n  REVIEWERS: |-\n    pacoxu\n    wzshiming\n  APPROVERS: |-\n    pacoxu\n    wzshiming\n  MAINTAINERS: |-\n    pacoxu\n    wzshiming\n  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GH_REPOSITORY: ${{ github.repository }}\n  DETAILS: |-\n    <details>\n    <summary>Details</summary>\n    Instructions for interacting with me using comments are available here.\n    If you have questions or suggestions related to my behavior, please file an issue against the [gh-ci-bot](https://github.com/wzshiming/gh-ci-bot) repository.\n    </details>\njobs:\n\n  issue_opened:\n    name: Issue Opened\n    if: ${{ github.event_name == 'issues' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.issue.user.login }}\n          MESSAGE: ${{ github.event.issue.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.issue.author_association }}\n          ISSUE_KIND: issue\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.issue.user.login }},\n            Thanks for opening an issue!\n            We will look into it as soon as possible.\n  pr_opened:\n    name: PR Opened\n    if: ${{ github.event_name == 'pull_request' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.pull_request.user.login }}\n          MESSAGE: ${{ github.event.pull_request.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.pull_request.author_association }}\n          ISSUE_KIND: pr\n          TYPE: created\n          GREETING: |-\n            Hi @${{ github.event.pull_request.user.login }},\n            Thanks for your pull request!\n            If the PR is ready, use the `/auto-cc` command to assign Reviewer to Review. \n            We will review it shortly.\n  issue_commented:\n    name: Issue Commented\n    if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: issue\n          TYPE: comment\n\n  pr_review_commented:\n    name: PR Review Commented\n    if: ${{ github.event_name == 'pull_request_review_comment' }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.pull_request.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n\n  pr_commented:\n    name: PR Commented\n    if: ${{ github.event_name == 'issue_comment' && github.event.issue.pull_request }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wzshiming/gh-ci-bot@v1\n        env:\n          LOGIN: ${{ github.event.comment.user.login }}\n          MESSAGE: ${{ github.event.comment.body }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n          AUTHOR_ASSOCIATION: ${{ github.event.comment.author_association }}\n          ISSUE_KIND: pr\n          TYPE: comment\n```"}
{"id": "63c5ae896b748c7b1fadef81", "level": "level5", "llm_response": "```yaml\nname: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n  pull_request:\n    paths:\n      - eclipse-temurin-8-focal/**\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - tests/**\n      - !tests/*.ps*\n      - !tests/*.windows\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets:\n      special_case_secrets: inherit\n```", "answer": "```yaml name: eclipse-temurin-8-focal\n\non:\n  push:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n  pull_request:\n    paths:\n      - \"eclipse-temurin-8-focal/**\"\n      - .github/workflows/eclipse-temurin-8-focal.yml\n      - common.sh\n      - tags-for-dir.sh\n      - \"tests/**\"\n      - \"!tests/*.ps*\"\n      - \"!tests/*.windows\"\n\njobs:\n  build:\n    uses: ./.github/workflows/_template.yml\n    with:\n      directory: eclipse-temurin-8-focal\n    secrets: inherit\n```"}
{"id": "63c4a0981899db5886514a5b", "level": "level5", "llm_response": "```yaml\nname: [RUN] Discord new release announcement\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  push-announcement:\n    id: push-announcement\n    runs-on: ubuntu-latest\n    env:\n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n    steps:\n      - name: CURL Discord API with announcement\n        run: |\n          CHANGELOG=$(curl -s https://api.github.com/repos/nethermindeth/nethermind/releases | jq '.[0].body' | grep -Po '(?<=## )(.*?)(?=\\##)')\n          read VERSION LINK < <(echo $(curl -s 'https://api.github.com/repos/nethermindeth/nethermind/releases' | jq -r '.[0].name, .[0].html_url'))\n          MESSAGE=\"**New Nethermind release version: ${VERSION}**\\n\\n${CHANGELOG}<${LINK}>\"\n          curl -s -H \"Content-Type: application/json\" -d '{\"username\": \"Nethermind\", \"content\": \"'\"$MESSAGE\"'\"}' $WEBHOOK_URL > /dev/null 2>&1\n```", "answer": "```yaml name: '[RUN] Discord new release announcement'\n   \non:\n  release:\n    types: [released]\n\njobs:\n  push-announcement:\n    name: Pushing release announcement to Discord\n    runs-on: ubuntu-latest\n    env:      \n      WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}\n    steps:\n    - name: CURL Discord API with announcement\n      shell: bash\n      run: |\n        CHANGELOG=$(curl -s https://api.github.com/repos/nethermindeth/nethermind/releases | jq '.[0].body' | grep -Po '(?<=## )(.*?)(?=\\##)')\n        read VERSION LINK < <(echo $(curl -s 'https://api.github.com/repos/nethermindeth/nethermind/releases' | jq -r '.[0].name, .[0].html_url'))\n        MESSAGE=\"**New Nethermind release version: ${VERSION}**\\n\\n${CHANGELOG}<${LINK}>\"\n        curl -s -H \"Content-Type: application/json\" -d '{\"username\": \"Nethermind\", \"content\": \"'\"$MESSAGE\"'\"}' $WEBHOOK_URL > /dev/null 2>&1```"}
{"id": "63c49e9a1899db5886507bf7", "level": "level5", "llm_response": "```yaml\nname: vpinball-gl\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  repository_dispatch:\n\nenv:\n  VERSION_START_SHA: \"ea558e7417f6f06fe567d34f0e33792a141b8e64\"\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    id: dxsdk\n    runs-on: windows-latest\n    steps:\n      - name: Cache\n        id: cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Create Cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe\n          7z x DXSDK_Jun10.exe DXSDK/Include -otmp\n          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp\n          mv tmp/DXSDK DXSDK\n          rm -fR DXSDK_Jun10.exe tmp\n          ls -Ra DXSDK\n\n  version:\n    id: version\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Version\n        id: version\n        run: |\n          VERSION_MAJOR=$(grep -Eo \"VP_VERSION_MAJOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_MINOR=$(grep -Eo \"VP_VERSION_MINOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_REV=$(grep -Eo \"VP_VERSION_REV\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)\n          SHA7=\"${GITHUB_SHA::7}\"\n          TAG=\"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}-${REVISION}-${SHA7}\"\n          echo \"revision=${REVISION}\" >> $GITHUB_OUTPUT\n          echo \"sha7=${SHA7}\" >> $GITHUB_OUTPUT\n          echo \"tag=${TAG}\" >> $GITHUB_OUTPUT\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n\n  build:\n    id: build\n    runs-on: windows-latest\n    needs: [dxsdk, version]\n    strategy:\n      matrix:\n        config: [Release, Debug]\n        platform: [gl-win-x64, gl-win-x86]\n        platform-name: [x64, Win32]\n        bass: [x64/Bass64.dll, Bass.dll]\n        free-image: [x64/FreeImage64.dll, FreeImage.dll]\n        sci-lexer-vp: [x64/SciLexerVP64.dll, SciLexerVP.dll]\n        sdl2-ttf: [x64/SDL2_ttf.dll, SDL2_ttf.dll]\n        sdl2: [x64/SDL2.dll, SDL2.dll]\n        openvr-api: [x64/openvr_api.dll, openvr_api.dll]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Update Version\n        run: |\n          sed -i \"s/0/${{ needs.version.outputs.revision }}/g\" git_version.h\n          sed -i \"s/unknown/${{ needs.version.outputs.sha7 }}/g\" git_version.h\n      - name: Build\n        run: |\n          export DXSDK_DIR=\"${GITHUB_WORKSPACE}/DXSDK\"\n          cp cmake/CMakeLists_${{ matrix.platform}}.txt CMakeLists.txt\n          cmake -G \"Visual Studio 17 2022\" -A ${{ matrix.platform-name }} -B build\n          cmake --build build --config ${{ matrix.config }}\n      - name: Prepare Artifacts\n        run: |\n          mkdir tmp \n          cp build/${{ matrix.config }}/VPinballX_GL.* tmp\n          cp dll/${{ matrix.bass }} tmp\n          cp dll/${{ matrix.free-image }} tmp\n          cp dll/${{ matrix.sci-lexer-vp }} tmp\n          cp dll/${{ matrix.sdl2-ttf }} tmp\n          cp dll/${{ matrix.sdl2 }} tmp\n          cp dll/${{ matrix.openvr-api }} tmp\n          cp txt/Changelog_Scripts.txt tmp\n          cp txt/Changelog.txt tmp\n          cp txt/CommandLineParameters.txt tmp\n          cp txt/CommandReference.txt tmp\n          cp txt/Hotkeys.txt tmp\n          cp \"txt/JP's VPX7 Physics Materials.mat\" tmp\n          cp \"txt/JP's VPX7 Physics.pdf\" tmp\n          cp \"txt/JP's VPX7 script addons vbs.txt\" tmp\n          cp \"txt/JP's VPX7 Table physics.vpp\" tmp\n          cp txt/layoutGuideline.txt tmp\n          cp txt/license.txt tmp\n          cp \"txt/New Plunger Documentation.pdf\" tmp\n          cp txt/PhysicValues.txt tmp\n          cp txt/RegistryKeys.txt tmp\n          cp txt/Scripts.txt tmp \n          cp -r glshader tmp \n          cp -r scripts tmp\n          cp -r tables tmp\n      - name: Upload Artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: VPinballX_GL-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}\n          path: tmp\n```", "answer": "```yaml name: vpinball-gl\non:\n  push:\n\nenv:\n  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64\n#  UPX_ARTIFACT: 345209471\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  dxsdk:\n    name: DirectX SDK\n    runs-on: windows-latest\n    steps:\n      - id: cache\n        uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - name: Create Cache\n        if: steps.cache.outputs.cache-hit != 'true'\n        run: |\n          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe\n          7z x DXSDK_Jun10.exe DXSDK/Include -otmp\n          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp\n          mv tmp/DXSDK DXSDK\n          rm -fR DXSDK_Jun10.exe tmp\n          ls -Ra DXSDK\n\n  version:\n    name: Version\n    runs-on: ubuntu-latest\n    outputs:\n      revision: ${{ steps.version.outputs.revision }}\n      sha7: ${{ steps.version.outputs.sha7 }}\n      tag: ${{ steps.version.outputs.tag }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - id: version\n        run: |\n          VERSION_MAJOR=$(grep -Eo \"VP_VERSION_MAJOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_MINOR=$(grep -Eo \"VP_VERSION_MINOR\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          VERSION_REV=$(grep -Eo \"VP_VERSION_REV\\s+[0-9]+\" vpversion.h | grep -Eo \"[0-9]+\")\n          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)\n          SHA7=\"${GITHUB_SHA::7}\"\n          TAG=\"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}-${REVISION}-${SHA7}\"\n          echo \"revision=${REVISION}\" >> $GITHUB_OUTPUT\n          echo \"sha7=${SHA7}\" >> $GITHUB_OUTPUT\n          echo \"tag=${TAG}\" >> $GITHUB_OUTPUT\n\n  build:\n    name: Build VPinballX_GL-${{ matrix.config }}-${{ matrix.platform }}\n    runs-on: windows-latest\n    needs: [ dxsdk, version ]\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Release\n          - platform: gl-win-x64\n            platform-name: x64\n            bass: x64/Bass64.dll\n            free-image: x64/FreeImage64.dll\n            sci-lexer-vp: x64/SciLexerVP64.dll\n            sdl2-ttf: x64/SDL2_ttf.dll\n            sdl2: x64/SDL2.dll\n            openvr-api: x64/openvr_api.dll\n            config: Debug\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Release\n          - platform: gl-win-x86\n            platform-name: Win32\n            bass: Bass.dll\n            free-image: FreeImage.dll\n            sci-lexer-vp: SciLexerVP.dll\n            sdl2-ttf: SDL2_ttf.dll\n            sdl2: SDL2.dll\n            openvr-api: openvr_api.dll\n            config: Debug\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: DXSDK\n          key: cache-dxsdk\n      - run: |\n          sed -i \"s/0/${{ needs.version.outputs.revision }}/g\" git_version.h\n          sed -i \"s/unknown/${{ needs.version.outputs.sha7 }}/g\" git_version.h\n      - name: Build\n        run: |\n          export DXSDK_DIR=\"${GITHUB_WORKSPACE}/DXSDK\"\n          cp cmake/CMakeLists_${{ matrix.platform}}.txt CMakeLists.txt\n          cmake -G \"Visual Studio 17 2022\" -A ${{ matrix.platform-name }} -B build\n          cmake --build build --config ${{ matrix.config }}\n#      - name: Compress\n#        if: matrix.config == 'Release'\n#        run: |\n#          curl -sL -H \"Authorization: Token ${{ secrets.GH_PAT }}\" https://api.github.com/repos/upx/upx/actions/artifacts/${{ env.UPX_ARTIFACT }}/zip -o upx.zip\n#          7z x upx.zip -oupx\n#          rm upx.zip\n#          ./upx/upx.exe --best --lzma build/${{ matrix.config }}/VPinballX_GL.exe\n      - run: |\n          mkdir tmp \n          cp build/${{ matrix.config }}/VPinballX_GL.* tmp\n          cp dll/${{ matrix.bass }} tmp\n          cp dll/${{ matrix.free-image }} tmp\n          cp dll/${{ matrix.sci-lexer-vp }} tmp\n          cp dll/${{ matrix.sdl2-ttf }} tmp\n          cp dll/${{ matrix.sdl2 }} tmp\n          cp dll/${{ matrix.openvr-api }} tmp\n          cp txt/Changelog_Scripts.txt tmp\n          cp txt/Changelog.txt tmp\n          cp txt/CommandLineParameters.txt tmp\n          cp txt/CommandReference.txt tmp\n          cp txt/Hotkeys.txt tmp\n          cp \"txt/JP's VPX7 Physics Materials.mat\" tmp\n          cp \"txt/JP's VPX7 Physics.pdf\" tmp\n          cp \"txt/JP's VPX7 script addons vbs.txt\" tmp\n          cp \"txt/JP's VPX7 Table physics.vpp\" tmp\n          cp txt/layoutGuideline.txt tmp\n          cp txt/license.txt tmp\n          cp \"txt/New Plunger Documentation.pdf\" tmp\n          cp txt/PhysicValues.txt tmp\n          cp txt/RegistryKeys.txt tmp\n          cp txt/Scripts.txt tmp \n          cp -r glshader tmp \n          cp -r scripts tmp\n          cp -r tables tmp\n      - uses: actions/upload-artifact@v3\n        with:\n          name: VPinballX_GL-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}\n          path: tmp\n```"}
{"id": "63c49ac7517fc08c1eeec341", "level": "level5", "llm_response": "```yaml\nname: Lint Pull Request Title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  main:\n    id: main\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Lint Pull Request Title\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      uses: amannn/action-semantic-pull-request@v4.5.0\n```", "answer": "```yaml name: \"Lint Pull Request Title\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Lint Pull Request Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4.5.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49dce517fc08c1eeff4b2", "level": "level5", "llm_response": "```yaml\nname: DCO check\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    id: reverted-pr-check\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: ${{ github.event.pull_request.title }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n      - name: Save Reverted PR output\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ steps.reverted_pr_check.outputs.is_reverted_pr }} > ./pr/is_reverted_pr\n          echo -n \"false\" > ./pr/skipped\n      - name: Upload PR artifact\n        if: always()\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8\n        with:\n          name: pr\n          path: pr/\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n\n  dco_check_job:\n    id: dco_check_job\n    runs-on: ubuntu-latest\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - name: Get PR Commits\n        id: get-pr-commits\n        uses: tim-actions/get-pr-commits@c64db31d359214d244884dd68f971a110b29ab83\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        id: dco-check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21\n        with:\n          commits: ${{ steps.get-pr-commits.outputs.commits }}\n      - name: Save PR number\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ github.event.number }} > ./pr/pr_number\n      - name: Upload PR artifact\n        if: always()\n        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8\n        with:\n          name: pr\n          path: pr/\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: DCO check\non:\n  pull_request:\n    types: [ opened, reopened, synchronize ]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  reverted-pr-check:\n    name: Reverted PR Check Job\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    # Map a step output to a job output\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n      - name: Save Reverted PR output\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ steps.reverted_pr_check.outputs.is_reverted_pr }} > ./pr/is_reverted_pr\n          echo -n \"false\" > ./pr/skipped\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n\n  dco_check_job:\n    needs: reverted-pr-check\n    if: ${{ needs.reverted-pr-check.outputs.is_reverted_pr == 'false' }}\n    name: DCO Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get PR Commits\n        id: 'get-pr-commits'\n        uses: tim-actions/get-pr-commits@c64db31d359214d244884dd68f971a110b29ab83 # pin@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: DCO Check\n        uses: tim-actions/dco@f2279e6e62d5a7d9115b0cb8e837b777b1b02e21 # pin@master\n        with:\n          commits: ${{ steps.get-pr-commits.outputs.commits }}\n      # Need to save PR number as Github action does not propagate it with workflow_run event\n      - name: Save PR number\n        if: always()\n        run: |\n          mkdir -p ./pr\n          echo -n ${{ github.event.number }} > ./pr/pr_number\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # pin@v3\n        if: always()\n        with:\n          name: pr\n          path: pr/\n```"}
{"id": "63c4a116736e7f0ed8c78a89", "level": "level5", "llm_response": "```yaml\nname: Push-Checks\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-22.04\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version-file: .python-version\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install wheel flake8 pytest\n          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi\n\n      - name: Setup flake8 annotations\n        uses: rbialon/flake8-annotations@v1\n\n      - name: Lint with flake8\n        env:\n          ROOT_SHA: ${{github.base_ref}}\n        run: |\n          DATA=$(jq --raw-output .before $GITHUB_EVENT_PATH)\n          echo \"DATA: ${DATA}\"\n          git diff \"$DATA\" | flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --diff\n          git diff \"$DATA\" | flake8 . --count --statistics --diff\n```", "answer": "```yaml # This workflow will:\n#\n#   * install Python dependencies\n#   * lint with a single version of Python\n#\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Push-Checks\n\non:\n  push:\n    branches: [ develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version-file: '.python-version'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install wheel flake8 pytest\n        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi\n    \n    - name: Setup flake8 annotations\n      uses: rbialon/flake8-annotations@v1\n    \n    - name: Lint with flake8\n      env:\n        ROOT_SHA: ${{github.base_ref}}\n      run: |\n        DATA=$(jq --raw-output .before $GITHUB_EVENT_PATH)\n\n        echo \"DATA: ${DATA}\"\n        # stop the build if there are Python syntax errors or undefined names, ignore existing \n        git diff \"$DATA\" | flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --diff\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        git diff \"$DATA\" | flake8 . --count --statistics --diff\n```"}
{"id": "63c497691e33648075780e11", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '40 18 * * 1'\n\njobs:\n  CodeQL-Build:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      actions: read\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: javascript\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    #        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n    #        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n    #        \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n    #        \u2502  \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12 or JAN-DEC)\n    #        \u2502  \u2502  \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6 or SUN-SAT)\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        \u2502  \u2502  \u2502 \u2502 \u2502\n    #        *  *  * * *\n    - cron: \"40 18 * * 1\"\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: javascript\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49c55517fc08c1eef5d3f", "level": "level5", "llm_response": "```yaml\nname: Mkdocs publish\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install pip\n        run: python3 -m pip install --upgrade pip setuptools wheel\n      - name: Install MkDocs\n        run: |\n          pip install mkdocs\n          pip install mkdocs-macros-plugin\n      - name: MkDocs build\n        run: mkdocs build\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```", "answer": "```yaml   # This is a basic workflow to help you get started with Actions\n\nname: Mkdocs publish\n\n# Controls when the action will run.\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v3\n\n      - name: Install pip\n        run: python3 -m pip install --upgrade pip setuptools wheel\n\n      - name: Install MkDocs\n        run: |\n          pip install mkdocs\n          pip install mkdocs-macros-plugin\n\n      - name: MkDocs build\n        run: mkdocs build\n\n      - name: MkDocs deploy\n        run: mkdocs gh-deploy --force\n```"}
{"id": "63c49cfab008460c1df3e23b", "level": "level5", "llm_response": "```yaml\nname: Check PR title\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  check_pr_title:\n    id: check_pr_title\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check PR title\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        uses: amannn/action-semantic-pull-request@v4.6.0\n```", "answer": "```yaml name: Check PR title\n\non:\n    pull_request_target:\n        types: [ opened, edited, synchronize ]\n\njobs:\n    check_pr_title:\n        name: 'Check PR title'\n        runs-on: ubuntu-latest\n        steps:\n            -   uses: amannn/action-semantic-pull-request@v4.6.0\n                env:\n                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4996733b087f6bde3f1c8", "level": "level5", "llm_response": "```yaml\nname: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: yarn install --immutable\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          pat: ${{ secrets.OPEN_VSX_TOKEN }}\n```", "answer": "```yaml name: CD - Open VSX Registry\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: yarn install --immutable\n\n      - name: Publish to Open VSX Registry\n        uses: HaaLeo/publish-vscode-extension@v1\n        with:\n          pat: ${{ secrets.OPEN_VSX_TOKEN }}\n```"}
{"id": "63c4a0576fc19abdf9cdc124", "level": "level5", "llm_response": "```yaml\nname: Examples\n\non:\n  push:\n    branches:\n      - main\n      - maintenance/**\n  pull_request:\n    branches:\n      - main\n      - maintenance/**\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    if: |\n      (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') ||\n      (github.event_name != 'schedule')\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [3.8]\n        rdkit: [true, false]\n        openeye: [true, false]\n      exclude:\n        - os: macos-latest\n          rdkit: true\n          openeye: false\n        - os: ubuntu-latest\n          rdkit: false\n          openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 2\n\n    - name: Set environment variables\n      run: |\n        if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then\n          echo \"ENVFILE=openeye\" >> $GITHUB_ENV\n          echo \"TOOLKIT_CHECKS=OPENEYE\" >> $GITHUB_ENV\n          echo \"PACKAGES_TO_REMOVE=ambertools rdkit\" >> $GITHUB_ENV\n        fi\n\n        if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then\n          echo \"ENVFILE=rdkit\" >> $GITHUB_ENV\n          echo \"TOOLKIT_CHECKS=RDKIT\" >> $GITHUB_ENV\n          echo \"PACKAGES_TO_REMOVE=openeye-toolkits\" >> $GITHUB_ENV\n        fi\n\n    - name: Install conda environment with ${{ env.ENVFILE }}\n      uses: mamba-org/provision-with-micromamba@main\n      with:\n        environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml\n        extra-specs: python=${{ matrix.python-version }}\n\n    - name: Additional info about the build\n      run: |\n        uname -a\n        df -h\n        ulimit -a\n\n    - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n      env:\n        OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}\n      run: |\n        echo \"${OE_LICENSE_TEXT}\" > ${OE_LICENSE}\n\n    - name: Install package\n      run: |\n        # Maybe remove the packaged openff-toolkit, installed as a dependency of openmmforcefields\n        # and/or Interchange\n        conda remove --force openff-toolkit-base\n        python setup.py develop --no-deps\n\n    - name: Remove undesired toolkits\n      run: |\n        # If openmmforcefields is included in examples/environment.yaml,\n        # remove RDKit and AmberTools brought in by it. Currently it's not included,\n        # so don't remove it.\n        if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n          for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do\n            if [[ $(conda list | grep $cpkg) ]]; then conda remove --force $cpkg --yes ; fi\n          done\n        fi\n\n    - name: Check installed toolkits\n      run: |\n        for tk in ${{ env.TOOLKIT_CHECKS }}; do\n          python -c \"from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'\"\n        done\n\n    - name: Check uninstalled toolkits\n      run: |\n        if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n          for tk in ${{ env.PACKAGES_TO_REMOVE }}; do\n            TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')\n            python -c \"from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'\"\n          done\n        fi\n\n    - name: Environment Information\n      run: |\n        conda info\n        conda list\n\n    - name: Run example scripts\n      run: |\n        if [[ ${{ matrix.rdkit }} == false ]]; then\n          PYTEST_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n          PYTEST_ARGS+=\" --ignore=examples/QCArchive_interface\"\n        fi\n        pytest $PYTEST_ARGS openff/toolkit/tests/test_examples.py\n\n    - name: Run example notebooks\n      run: |\n        if [[ ${{ matrix.rdkit }} == false ]]; then\n          NB_ARGS+=\" --ignore=examples/QCArchive_interface\"\n          NB_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n          NB_ARGS+=\" --ignore=examples/conformer_energies\"\n          NB_ARGS+=\" --ignore=examples/using_smirnoff_in_amber_or_gromacs\"\n        fi\n\n        # openmmforcefields incompatible with new toolkit\n        NB_ARGS+=\" --ignore=examples/external/swap_amber_parameters/swap_existing_ligand_parameters_with_openmmforcefields.ipynb\"\n\n        python -m pytest $PYTEST_ARGS $NB_ARGS examples\n```", "answer": "```yaml name: Examples\n\non:\n  push:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  pull_request:\n    branches:\n      - \"main\"\n      - \"maintenance/.+\"\n  schedule:\n    - cron: \"0 0 * * *\"\n\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  test:\n    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openff-toolkit') || (github.event_name != 'schedule')\n    name: ${{ matrix.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.rdkit }}, OpenEye=${{ matrix.openeye }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        python-version: [\"3.8\"]\n        rdkit: [true, false]\n        openeye: [true, false]\n        exclude:\n          - rdkit: false\n            openeye: false\n          - rdkit: true\n            openeye: true\n\n    env:\n      OE_LICENSE: ${{ github.workspace }}/oe_license.txt\n      PACKAGE: openff\n      PYTEST_ARGS: -r fE --tb=short\n      NB_ARGS: -v --nbval-lax --ignore=examples/deprecated --durations=20\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 2\n\n      - name: Set environment variables\n        run: |\n          if [[ ${{ matrix.openeye }} == true && ${{ matrix.rdkit }} == false ]]; then\n              echo \"ENVFILE=openeye\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=OPENEYE\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=ambertools rdkit\" >> $GITHUB_ENV\n          fi\n\n          if [[ ${{ matrix.openeye }} == false && ${{ matrix.rdkit }} == true ]]; then\n              echo \"ENVFILE=rdkit\" >> $GITHUB_ENV\n              echo \"TOOLKIT_CHECKS=RDKIT\" >> $GITHUB_ENV\n              echo \"PACKAGES_TO_REMOVE=openeye-toolkits\" >> $GITHUB_ENV\n          fi\n\n      - name: Install conda environment with ${{ env.ENVFILE }}\n        uses: mamba-org/provision-with-micromamba@main\n        with:\n          environment-file: devtools/conda-envs/${{env.ENVFILE}}-examples.yaml\n          extra-specs: |\n            python=${{ matrix.python-version }}\n\n      - name: Additional info about the build\n        run: |\n          uname -a\n          df -h\n          ulimit -a\n\n      - name: Make oe_license.txt file from GH org secret \"OE_LICENSE\"\n        shell: bash\n        env:\n          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}\n        run: |\n          echo \"${OE_LICENSE_TEXT}\" > ${OE_LICENSE}\n\n      - name: Install package\n        run: |\n          # Maybe remove the packaged openff-toolkit, installed as a dependency of openmmforcefields\n          # and/or Interchange\n          conda remove --force openff-toolkit-base\n          python setup.py develop --no-deps\n\n      - name: Remove undesired toolkits\n        run: |\n          # If openmmforcefields is included in examples/environment.yaml,\n          # remove RDKit and AmberTools brought in by it. Currently it's not included,\n          # so don't remove it.\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for cpkg in ${{ env.PACKAGES_TO_REMOVE }}; do\n              if [[ $(conda list | grep $cpkg) ]]; then conda remove --force $cpkg --yes ; fi\n            done\n          fi\n\n      - name: Check installed toolkits\n        run: |\n          for tk in ${{ env.TOOLKIT_CHECKS }}; do\n            python -c \"from openff.toolkit.utils.toolkits import ${tk}_AVAILABLE; assert ${tk}_AVAILABLE, '${tk} unavailable'\"\n          done\n\n      - name: Check uninstalled toolkits\n        run: |\n          if [ ! -z \"${{ env.PACKAGES_TO_REMOVE }}\" ]; then\n            for tk in ${{ env.PACKAGES_TO_REMOVE }}; do\n              TK=$(echo ${tk%-*} | tr 'a-z' 'A-Z')\n              python -c \"from openff.toolkit.utils.toolkits import ${TK}_AVAILABLE; assert not ${TK}_AVAILABLE, '${TK} available'\"\n            done\n          fi\n      - name: Environment Information\n        run: |\n          conda info\n          conda list\n\n      - name: Run example scripts\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            PYTEST_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            PYTEST_ARGS+=\" --ignore=examples/QCArchive_interface\"\n          fi\n          pytest $PYTEST_ARGS openff/toolkit/tests/test_examples.py\n\n      - name: Run example notebooks\n        run: |\n          if [[ ${{ matrix.rdkit }} == false ]]; then\n            NB_ARGS+=\" --ignore=examples/QCArchive_interface\"\n            NB_ARGS+=\" --ignore=examples/check_dataset_parameter_coverage\"\n            NB_ARGS+=\" --ignore=examples/conformer_energies\"\n            NB_ARGS+=\" --ignore=examples/using_smirnoff_in_amber_or_gromacs\"\n          fi\n\n          # openmmforcefields incompatible with new toolkit\n          NB_ARGS+=\" --ignore=examples/external/swap_amber_parameters/swap_existing_ligand_parameters_with_openmmforcefields.ipynb\"\n\n          python -m pytest $PYTEST_ARGS $NB_ARGS examples\n```"}
{"id": "63c49d69736e7f0ed8c61514", "level": "level5", "llm_response": "```yaml\nname: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@master\n\n    - name: Create GitHub release\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      uses: Roang-zero1/github-create-release-action@master\n      with:\n        version_regex: '^v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+'\n```", "answer": "```yaml name: Create Release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Create GitHub release\n        uses: Roang-zero1/github-create-release-action@master\n        with:\n          version_regex: ^v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4968a1e3364807577b4a5", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [go]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '24 1 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4991e33b087f6bde3d441", "level": "level5", "llm_response": "```yaml\nname: Releasability\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5'\n  workflow_dispatch:\n\ninputs:\n  releaseFamily:\n    description: 'Release family (vx.y)'\n    required: false\n    default: 'v1.8'\n  moduleReleaseFamily:\n    description: 'Module release family (vx.y)'\n    required: false\n    default: 'v0.35'\n  slackChannel:\n    description: 'Slack channel (release-#)'\n    required: false\n    default: 'release'\n\njobs:\n  releasability:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Call Releasability Workflow\n      uses: knative/actions/.github/workflows/releasability.yaml@main\n      with:\n        releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n        moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n        slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n      secrets:\n        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```", "answer": "```yaml # Copyright 2022 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Releasability'\n\non:\n  schedule:\n    - cron: '0 1 * * 1-5' # 6am Pacific, weekdays.\n\n  workflow_dispatch:      # Manual trigger.\n    inputs:\n      releaseFamily:\n        description: 'Release? (vX.Y)'\n        required: false\n      moduleReleaseFamily:\n        description: 'Module Release? (vX.Y)'\n        required: false\n      slackChannel:\n        description: 'Slack Channel? (release-#)'\n        required: false\n\njobs:\n  releasability:\n    uses: knative/actions/.github/workflows/releasability.yaml@main\n    with:\n      releaseFamily: ${{ github.event.inputs.releaseFamily || 'v1.8' }}\n      moduleReleaseFamily: ${{ github.event.inputs.moduleReleaseFamily || 'v0.35' }}\n      slackChannel: ${{ github.event.inputs.slackChannel || 'release' }}\n    secrets:\n      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n```"}
{"id": "63c49d616fc19abdf9cc8e74", "level": "level5", "llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          myToken: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n\n      - name: Create release\n        id: create-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create release\"\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    name: \"Deploy\"\n    runs-on: \"ubuntu-latest\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: Generate changelog\n        id: changelog\n        uses: metcalfc/changelog-generator@v3.0.0\n        with:\n          myToken: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n\n      - name: \"Create release\"\n        id: create-release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.PHPSTAN_BOT_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.changelog }}\n```"}
{"id": "63c499d31899db58864e92ea", "level": "level5", "llm_response": "```yaml\nname: Build AIO-switch-updater\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        git submodule update --init --recursive\n\n    - name: Building aio-switch-updater\n      run: |\n        make -C aiosu-forwarder -f Makefile\n        make -j$(nproc)\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater.nro\n```", "answer": "```yaml name: Build AIO-switch-updater\n\non: \n  push:\n  workflow_dispatch:\n\njobs:\n  AIO-switch-updater:\n    runs-on: ubuntu-latest\n    #container: hamletdufromage/devkita64_devkitarm\n    container: devkitpro/devkita64\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: update repo\n      run: |\n        git submodule update --init --recursive\n        \n    - name: Building aio-switch-updater\n      run: |\n        make -C aiosu-forwarder -f Makefile\n        make -j$(nproc)\n        \n    - uses: actions/upload-artifact@master\n      with:\n        name: aio-switch-updater\n        path: aio-switch-updater.nro\n```"}
{"id": "63c4973b517fc08c1eed5918", "level": "level5", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    if: startsWith(github.event.head_commit.message, 'Release: v')\n    uses: google-github-actions/.github/.github/workflows/release.yml@v0\n```", "answer": "```yaml name: 'Release'\n\non:\n  push:\n    branches:\n      - 'main'\n\njobs:\n  release:\n    if: \"startsWith(github.event.head_commit.message, 'Release: v')\"\n    name: 'Release'\n    uses: 'google-github-actions/.github/.github/workflows/release.yml@v0'\n```"}
{"id": "63c49ebdb008460c1df494c2", "level": "level5", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Label PRs\n        uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49f55517fc08c1ef0903b", "level": "level5", "llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [opened, closed, synchronize]\n  pull_request_target:\n    types: [opened, closed, synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: CLA Assistant\n      if: github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA' || github.event_name == 'pull_request_target'\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n      uses: cla-assistant/github-action@v2.1.3-beta\n      with:\n        path-to-signatures: signatures/version1/cla.json\n        path-to-document: https://github.com/theskeletoncrew/treat-toolbox/blob/main/CLA.md\n        branch: main\n        allowlist: skeletoncrewrip,cosimo-rip\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        # Beta Release\n        uses: cla-assistant/github-action@v2.1.3-beta\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-document: 'https://github.com/theskeletoncrew/treat-toolbox/blob/main/CLA.md' # e.g. a CLA or a DCO document\n          # branch should not be protected\n          branch: 'main'\n          allowlist: skeletoncrewrip,cosimo-rip\n\n         #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n          #lock-pullrequest-aftermerge: false - if you don't want this bot to automatically lock the pull request after merging (default - true)\n          #use-dco-flag: true - If you are using DCO instead of CLA\n```"}
{"id": "63c4a0cc6fc19abdf9cde85c", "level": "level5", "llm_response": "```yaml\nname: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Cache CPM modules\n        uses: actions/cache@v3\n        with:\n          path: '**/cpm_modules'\n          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}\n      - name: Install format dependencies\n        run: |\n          choco install llvm --version 15.0.1 -y\n          choco install ninja -y\n          pip3 install cmake_format==0.6.11 pyyaml\n      - name: Configure\n        run: cmake -G Ninja -S . -B build -DTP_BUILD_EXAMPLES=OFF\n      - name: Check style\n        run: cmake --build build --target check-format\n```", "answer": "```yaml name: Style\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules\n\njobs:\n  build:\n    runs-on: windows-2019\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/cache@v3\n        with:\n          path: \"**/cpm_modules\"\n          key: ${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}\n\n      - name: Install format dependencies\n        run: |\n          choco install llvm --version 15.0.1 -y\n          choco install ninja -y\n          pip3 install cmake_format==0.6.11 pyyaml\n\n      - name: configure\n        run: cmake -G Ninja -S . -B build -DTP_BUILD_EXAMPLES=OFF\n\n      - name: check style\n        run: cmake --build build --target check-format\n```"}
{"id": "63c5c621ac4f2678a5bd7766", "level": "level5", "llm_response": "```yaml\nname: Reusable - Spotless\n\non:\n  workflow_dispatch:\n\ninputs:\n  cache-read-only:\n    description: 'Enable read-only cache'\n    required: false\n    type: boolean\n  no-build-cache:\n    description: 'Disable build cache'\n    required: false\n    type: boolean\n\nsecrets:\n  GRADLE_ENTERPRISE_ACCESS_KEY:\n    description: 'Gradle Enterprise access key'\n    required: false\n  GE_CACHE_USERNAME:\n    description: 'Gradle Enterprise cache username'\n    required: false\n  GE_CACHE_PASSWORD:\n    description: 'Gradle Enterprise cache password'\n    required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up JDK for running Gradle\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: '17'\n\n    - name: Spotless\n      env:\n        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n        GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n        GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n      uses: gradle/gradle-build-action@v2\n      with:\n        arguments: 'spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}'\n        cache-read-only: ${{ inputs.cache-read-only }}\n        gradle-home-cache-excludes: 'caches/build-cache-1'\n```", "answer": "```yaml name: Reusable - Spotless\n\non:\n  workflow_call:\n    inputs:\n      cache-read-only:\n        type: boolean\n        required: false\n      no-build-cache:\n        type: boolean\n        required: false\n    secrets:\n      GRADLE_ENTERPRISE_ACCESS_KEY:\n        required: false\n      GE_CACHE_USERNAME:\n        required: false\n      GE_CACHE_PASSWORD:\n        required: false\n\njobs:\n  spotless:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK for running Gradle\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n\n      - name: Spotless\n        uses: gradle/gradle-build-action@v2\n        env:\n          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}\n          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}\n        with:\n          arguments: spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}\n          cache-read-only: ${{ inputs.cache-read-only }}\n          # gradle enterprise is used for the build cache\n          gradle-home-cache-excludes: caches/build-cache-1\n```"}
{"id": "63c49b20b008460c1df324d1", "level": "level5", "llm_response": "```yaml\nname: release_candidate\n\non:\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Create release candidate\n        run: |\n          RC_DATE=$(date +'%m-%d-%Y')\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git checkout -b auto-release-candidate-${RC_DATE}\n          git push -u origin auto-release-candidate-${RC_DATE}\n\n          git status\n          git fetch\n\n          ./bin/update_changelog.sh\n\n          git add CHANGES.rst\n          git commit -m \"chore(rc-changes): update Changes.rst\"\n          git push\n\n          gh pr create  --title \"chore(auto-release-candidate-${RC_DATE})\" \\\n                        --body \"Automated release candidate for ${RC_DATE}.\" \\\n                        --base master \\\n                        --draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # Release Candidate GitHub Action\n\nname: release_candidate\n\n# TODO(actions):\n# - [x] create a new AUTO-RC-<DATE> branch\n# - [x] update CHANGES.rst\n# - [x] create changes commit\n# - [x] push to GH\n# - [ ] update README.rst\n# - [ ] create readme commit\n# - [ ] push to GH\n# - [ ] open a PR to `master`\n\n# TODO(general):\n# - [ ] setup the action\n# - [ ] cleanup the action\n\non:\n  schedule:\n    - cron:  '0 0 1 * *'  # each 1st day of the month\n  workflow_dispatch:      # on manual trigger\n\n\njobs:\n  new-rc:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Flag to fetch all history.\n          #   @see https://github.com/marketplace/actions/checkout#Fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n      - run: |\n          RC_DATE=$(date +'%m-%d-%Y')\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git checkout -b auto-release-candidate-${RC_DATE}\n          git push -u origin auto-release-candidate-${RC_DATE}\n\n          git status\n          git fetch\n\n          ./bin/update_changelog.sh\n\n          git add CHANGES.rst\n          git commit -m \"chore(rc-changes): update Changes.rst\"\n          git push\n\n          gh pr create  --title \"chore(auto-release-candidate-${RC_DATE})\" \\\n                        --body \"Automated release candidate for ${RC_DATE}.\" \\\n                        --base master \\\n                        --draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}```"}
{"id": "63c4a0961842bc13d779e955", "level": "level5", "llm_response": "```yaml\nname: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    id: nightly\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```", "answer": "```yaml name: nightly\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  nightly:\n    uses: charmbracelet/meta/.github/workflows/nightly.yml@main\n    secrets:\n      docker_username: ${{ secrets.DOCKERHUB_USERNAME }}\n      docker_token: ${{ secrets.DOCKERHUB_TOKEN }}\n      goreleaser_key: ${{ secrets.GORELEASER_KEY }}\n```"}
{"id": "63c494dd8052faa2781add7b", "level": "level5", "llm_response": "```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches:\n      - develop\n    paths:\n      - .github/workflows/ci.yml\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  workflow_dispatch:\n    inputs:\n      type:\n        description: 'Event type'\n        required: true\n        type: string\n        default: 'rerun-ci'\n    concurrency:\n      group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n\njobs:\n  unix:\n    id: unix\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest]\n        java: [\n          { version: 11 },\n          { version: 17 }\n        ]\n    max-parallel: 1\n    timeout-minutes: 60\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build with Maven\n        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\n# This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Continuous Integration\n\non:\n  push:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  pull_request:\n    branches: [ develop ]\n    paths:\n      - '.github/workflows/ci.yml'\n      - '**/pom.xml'\n      - '**/src/main/**'\n      - '**/src/test/**'\n      - '!*.md'\n      - '!docs/**'\n  repository_dispatch:\n    types: [rerun-ci]\n\nconcurrency:\n  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  unix:\n    name: JDK ${{ matrix.java.version }} - on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 60\n    strategy:\n      matrix:\n        os: [ macos-latest ]\n        java:\n          - {\n            version: 11\n          }\n          - {\n            version: 17\n          }\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build with Maven\n        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true\n```"}
{"id": "63c49d3433b087f6bde57d87", "level": "level5", "llm_response": "```yaml\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Debug the workflow'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  Kics:\n    id: kics\n    if: github.repository_owner == 'HariSekhon'\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-02-01 19:36:08 +0000 (Tue, 01 Feb 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Kics\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**/*.md'\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  actions: read\n  contents: read\n  security-events: write\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  kics:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Kics\n    uses: HariSekhon/GitHub-Actions/.github/workflows/kics.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496401e3364807577961d", "level": "level5", "llm_response": "```yaml\nname: Test commit or pull request\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: .nvmrc\n          cache: npm\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n      - name: Install dependencies\n        run: npm ci\n      - name: Test with eslint\n        run: npm run test:eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: .nvmrc\n          cache: npm\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n      - name: Install dependencies\n        run: npm ci\n      - name: Test with stylelint\n        run: npm run test:stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: .nvmrc\n          cache: npm\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n      - name: Install dependencies\n        run: npm ci\n      - name: Test i18n packs integrity\n        run: npm run test:i18n-packs\n```", "answer": "```yaml name: Test commit or pull request\n\non: [push, pull_request]\n\njobs:\n  eslint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with eslint\n        run: npm run test:eslint\n\n  stylelint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test with stylelint\n        run: npm run test:stylelint\n\n  i18n-packs:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version-file: \".nvmrc\"\n          cache: npm\n\n      - name: Setup NPM\n        run: |\n          NPM_VERSION=$(jq -r .engines.npm package.json)\n          NPM_VERSION=${NPM_VERSION/\\^/}\n          if [ \"$(npm --version)\" != \"$NPM_VERSION\" ]; then\n            npm install -g npm@$NPM_VERSION && npm --version\n          else\n            echo \"NPM version is same as package.json engines.npm\"\n          fi\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Test i18n packs integrity\n        run: npm run test:i18n-packs\n```"}
{"id": "63c49932cbc73931bb18c12f", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [cpp]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '32 10 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49ad8cbc73931bb1965d2", "level": "level5", "llm_response": "```yaml\nname: prod-deploy\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Setup Node.js environment\n      uses: actions/setup-node@v3\n      with:\n        node-version: 16\n        cache: yarn\n\n    - name: Cache node_modules\n      id: cached-node_modules\n      uses: actions/cache@v3\n      with:\n        path: node_modules\n        key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/publish-release.yml') }}\n\n    - name: Install all yarn packages\n      if: steps.cached-node_modules.outputs.cache-hit != 'true'\n      run: yarn --frozen-lockfile\n\n    - name: Build all\n      run: yarn build\n\n    - name: Deploy pages\n      run: |\n        git init\n        git config user.name \"schalkneethling\"\n        git config user.email \"sneethling@mozilla.com\"\n        git checkout -b prod\n        git add .\n        git commit --allow-empty -m \"Deploying latest generated pages\"\n        git remote add mdn \"https://$GITHUB_TOKEN@github.com/mdn/interactive-examples.git\"\n        git push -q -f mdn prod > /dev/null 2>&1\n```", "answer": "```yaml name: prod-deploy\n\non: [workflow_dispatch]\n\njobs:\n    deploy:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v3\n\n            - name: Setup Node.js environment\n              uses: actions/setup-node@v3\n              with:\n                  node-version: '16'\n                  cache: 'yarn'\n\n            - name: Cache node_modules\n              uses: actions/cache@v3\n              id: cached-node_modules\n              with:\n                  path: |\n                      node_modules\n                  key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('.github/workflows/publish-release.yml') }}\n\n            - name: Install all yarn packages\n              if: steps.cached-node_modules.outputs.cache-hit != 'true'\n              run: yarn --frozen-lockfile\n\n            - name: Build all\n              run: yarn build\n\n            - name: Deploy pages\n              run: |\n                  git init\n                  git config user.name \"schalkneethling\"\n                  git config user.email \"sneethling@mozilla.com\"\n                  git checkout -b prod\n                  git add .\n                  git commit --allow-empty -m \"Deploying latest generated pages\"\n                  git remote add mdn \"https://$GITHUB_TOKEN@github.com/mdn/interactive-examples.git\"\n                  # Eat output so it doesn't spit out the sensitive GITHUB_TOKEN if something goes wrong:\n                  git push -q -f mdn prod > /dev/null 2>&1\n```"}
{"id": "63c498f31899db58864e363a", "level": "level5", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Set GITHUB_TOKEN\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Update Release Draft\n        uses: release-drafter/release-drafter@v5\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c496561899db58864d23b8", "level": "level5", "llm_response": "```yaml\nname: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Run with tmate debugging'\n        required: false\n        default: false\n        type: boolean\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: environment\n```", "answer": "```yaml name: Molecule - Environment\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.environment.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/environment/**\n      - roles/environment/**\n      # Plugins\n      - plugins/lookup/environment_files.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  environment:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: environment\n```"}
{"id": "63c496a56fc19abdf9c9d4fb", "level": "level5", "llm_response": "```yaml\nname: test\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - '**/Cargo.toml'\n      - '**/*.rs'\n      - justfile\n      - .github/workflows/test.yml\n\npermissions:\n  contents: read\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: -D warnings -A deprecated\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  meshtls:\n    runs-on: ubuntu-latest\n    container:\n      image: ghcr.io/linkerd/dev:v30-rust\n    max-time-minutes: 10\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just clippy-crate linkerd-meshtls --all-features\n      - run: just test-crate linkerd-meshtls --all-features --no-run --package=linkerd-meshtls-boring --package=linkerd-meshtls-rustls\n      - run: just test-crate linkerd-meshtls --all-features --package=linkerd-meshtls-boring --package=linkerd-meshtls-rustls\n\n  unit:\n    runs-on: ubuntu-latest\n    container:\n      image: ghcr.io/linkerd/dev:v30-rust\n    max-time-minutes: 10\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just test --no-run --exclude=linkerd-app --exclude=linkerd-app-admin --exclude=linkerd-app-core --exclude=linkerd-app-gateway --exclude=linkerd-app-inbound --exclude=linkerd-app-integration --exclude=linkerd-app-outbound --exclude=linkerd-app-test --exclude=linkerd-meshtls --exclude=linkerd-meshtls-boring --exclude=linkerd-meshtls-rustls --exclude=linkerd2-proxy\n      - run: just test --exclude=linkerd-app --exclude=linkerd-app-admin --exclude=linkerd-app-core --exclude=linkerd-app-gateway --exclude=linkerd-app-inbound --exclude=linkerd-app-integration --exclude=linkerd-app-outbound --exclude=linkerd-app-test --exclude=linkerd-meshtls --exclude=linkerd-meshtls-boring --exclude=linkerd-meshtls-rustls --exclude=linkerd2-proxy\n```", "answer": "```yaml # Runs tests that complete relatively quickly.\nname: test\n\npermissions:\n  contents: read\n\non:\n  pull_request:\n    paths:\n      - Cargo.lock\n      - \"**/Cargo.toml\"\n      - \"**/*.rs\"\n      - justfile\n      - .github/workflows/test.yml\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  RUSTFLAGS: \"-D warnings -A deprecated\"\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  # Test the meshtls backends.\n  meshtls:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: just clippy-crate linkerd-meshtls --all-features\n      - run: |\n          just test-crate linkerd-meshtls --all-features --no-run \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n      - run: |\n          just test-crate linkerd-meshtls --all-features \\\n            --package=linkerd-meshtls-boring \\\n            --package=linkerd-meshtls-rustls\n\n  # Run non-integration tests. This should be quick.\n  unit:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just fetch\n      - run: |\n          just test --no-run \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n      - run: |\n          just test \\\n            --exclude=linkerd-app \\\n            --exclude=linkerd-app-admin \\\n            --exclude=linkerd-app-core \\\n            --exclude=linkerd-app-gateway \\\n            --exclude=linkerd-app-inbound \\\n            --exclude=linkerd-app-integration \\\n            --exclude=linkerd-app-outbound \\\n            --exclude=linkerd-app-test \\\n            --exclude=linkerd-meshtls \\\n            --exclude=linkerd-meshtls-boring \\\n            --exclude=linkerd-meshtls-rustls \\\n            --exclude=linkerd2-proxy\n```"}
{"id": "63c4a116736e7f0ed8c78a5a", "level": "level5", "llm_response": "```yaml\nname: Nightly\n\non:\n  schedule:\n    - cron: '30 12 * * *'\n\npermissions:\n  id-token: write\n\njobs:\n  nightly:\n    if: github.repository == 'aws/karpenter'\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Authenticate with AWS\n        uses: ./.github/actions/authenticate-aws\n\n      - name: Run nightly build\n        run: make nightly\n```", "answer": "```yaml name: Nightly\non:\n  schedule:\n    - cron: '30 12 * * *'\npermissions:\n  id-token: write\njobs:\n  nightly:\n    if: github.repository == 'aws/karpenter'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/authenticate-aws\n      - run: make nightly\n```"}
{"id": "63c498e61899db58864e3102", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - develop\n      - master\n      - 'release-*'\n  pull_request:\n    branches:\n      - develop\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [javascript, python]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"develop\", master, release-* ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"develop\" ]\n  schedule:\n    - cron: '27 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a11a1e336480757be37b", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    strategy:\n      matrix:\n        language: [javascript]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        config-file: './.github/codeql/codeql-config.yml'\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n    continue-on-error: true\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '21 7 * * 0'\n\njobs:\n  analyze:\n    if: contains(github.event.head_commit.message, 'chore(release)') == false\n    continue-on-error: true\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        config-file: ./.github/codeql/codeql-config.yml\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718d", "level": "level5", "llm_response": "```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: false\n        type: choice\n        options:\n          - patch\n          - minor\n          - major\n        default: minor\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n\n    steps:\n      - name: Set up git config\n        run: |\n          git config --global user.name \"${{ github.actor }}\"\n          git config --global user.email \"${{ github.actor }}@users.noreply.github.com\"\n          git config --global pull.rebase false\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Generate CHANGELOG\n        id: changelog\n        uses: reearth/changelog-action@main\n        with:\n          version: ${{ github.event.inputs.version }}\n          repo: ${{ github.repository }}\n          latest: CHANGELOG_latest.md\n\n      - name: Insert reearth-web changelog\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        uses: actions/github-script@v6\n        with:\n          script: require(\"./.github/workflows/release\")({ github, context })\n\n      - name: Upload latest CHANGELOG\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog-${{ steps.changelog.outputs.version }}\n          path: CHANGELOG_latest.md\n\n      - name: Commit & push to release\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        run: |\n          rm CHANGELOG_latest.md\n          git add CHANGELOG.md\n          git commit -am \"$TAG\"\n          git tag $TAG\n          git push --atomic origin release $TAG\n\n      - name: Commit & push to main\n        run: |\n          git switch main && git cherry-pick release && git push\n```", "answer": "```yaml name: Release\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        required: false\n        description: 'Next version (NOTE: Switch the branch to \"release\"!)'\n        type: choice\n        default: minor\n        options:\n          - patch\n          - minor\n          - major\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/release'\n    steps:\n      - name: Set up git config\n        run: |\n          git config --global user.name \"${{ github.actor }}\"\n          git config --global user.email \"${{ github.actor }}@users.noreply.github.com\"\n          git config --global pull.rebase false\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - id: changelog\n        name: Generate CHANGELOG\n        uses: reearth/changelog-action@main\n        with:\n          version: ${{ github.event.inputs.version }}\n          repo: ${{ github.repository }}\n          latest: CHANGELOG_latest.md\n      - name: Insert reearth-web changelog\n        uses: actions/github-script@v6\n        with:\n          script: 'require(\"./.github/workflows/release\")({ github, context })'\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n      - name: Upload latest CHANGELOG\n        uses: actions/upload-artifact@v3\n        with:\n          name: changelog-${{ steps.changelog.outputs.version }}\n          path: CHANGELOG_latest.md\n      - name: Commit & push to release\n        env:\n          TAG: ${{ steps.changelog.outputs.version }}\n        run: |\n          rm CHANGELOG_latest.md\n          git add CHANGELOG.md\n          git commit -am \"$TAG\"\n          git tag $TAG\n          git push --atomic origin release $TAG\n      - name: Commit & push to main\n        run: git switch main && git cherry-pick release && git push\n```"}
{"id": "63c497bf1e33648075783099", "level": "level5", "llm_response": "```yaml\nname: Issue tracking\n\non:\n  issues:\n    types: [opened]\n  label:\n    types: [added]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    id: track_issue\n    steps:\n    - name: Generate token\n      id: generate_token\n      uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0\n      with:\n        app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n        private_key: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n    - name: Get project data\n      run: |\n        gh api graphql -f query='\n          query($org: String!, $number: Int!) {\n            organization(login: $org){\n              projectNext(number: $number) {\n                id\n                fields(first:100) {\n                  nodes {\n                    id\n                    name\n                    settings\n                  }\n                }\n              }\n            }\n          }' -f org=prebid -F number=4 > project_data.json\n\n        echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n        echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"'\"$DATE_FIELD\"'\") | .id' project_data.json) >> $GITHUB_ENV\n\n    - name: Add issue to project\n      run: |\n        gh api graphql -f query='\n          mutation($project:ID!, $issue:ID!) {\n            addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n              projectNextItem {\n                id,\n                content {\n                   ... on Issue {\n                      createdAt\n                   }\n                   ... on PullRequest {\n                      createdAt\n                   }                     \n                }\n              }\n            }\n          }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json\n\n        echo 'ITEM_ID='$(jq '.data.addProjectNextItem.projectNextItem.id' issue_data.json) >> $GITHUB_ENV\n        echo 'ITEM_CREATION_DATE='$(jq '.data.addProjectNextItem.projectNextItem.content.createdAt' issue_data.json) >> $GITHUB_ENV\n\n    - name: Set fields\n      run: |\n        gh api graphql -f query='\n          mutation (\n            $project: ID!\n            $item: ID!\n            $date_field: ID!\n            $date_value: String!\n          ) {\n            set_creation_date: updateProjectNextItemField(input: {\n              projectId: $project\n              itemId: $item\n              fieldId: $date_field\n              value: $date_value\n            }) {\n              projectNextItem {\n                id\n              }\n            }\n          }' -f project=$PROJECT_ID -f item=$ITEM_ID -f date_field=$DATE_FIELD_ID -f date_value=$ITEM_CREATION_DATE --silent\n```", "answer": "```yaml name: Issue tracking\non:\n  issues:\n    types:\n      - opened\n      - labeled\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@36464acb844fc53b9b8b2401da68844f6b05ebb0\n        with:\n          app_id: ${{ secrets.PBS_PROJECT_APP_ID }}\n          private_key: ${{ secrets.PBS_PROJECT_APP_PEM }}\n\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ORGANIZATION: prebid\n          DATE_FIELD: Created on\n          PROJECT_NUMBER: 4\n        run: |\n          gh api graphql -f query='\n            query($org: String!, $number: Int!) {\n              organization(login: $org){\n                projectNext(number: $number) {\n                  id\n                  fields(first:100) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"'\"$DATE_FIELD\"'\") | .id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id,\n                  content {\n                     ... on Issue {\n                        createdAt\n                     }\n                     ... on PullRequest {\n                        createdAt\n                     }                     \n                  }\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID > issue_data.json\n          \n          echo 'ITEM_ID='$(jq '.data.addProjectNextItem.projectNextItem.id' issue_data.json) >> $GITHUB_ENV\n          echo 'ITEM_CREATION_DATE='$(jq '.data.addProjectNextItem.projectNextItem.content.createdAt' issue_data.json) >> $GITHUB_ENV\n\n      - name: Set fields\n        env:\n          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}\n        run: |\n          gh api graphql -f query='\n            mutation (\n              $project: ID!\n              $item: ID!\n              $date_field: ID!\n              $date_value: String!\n            ) {\n              set_creation_date: updateProjectNextItemField(input: {\n                projectId: $project\n                itemId: $item\n                fieldId: $date_field\n                value: $date_value\n              }) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f date_field=$DATE_FIELD_ID -f date_value=$ITEM_CREATION_DATE --silent\n```"}
{"id": "63c4947a8052faa2781ab62f", "level": "level5", "llm_response": "```yaml\nname: Backport labeled merged pull requests\n\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    if: |\n      (github.event_name == 'pull_request' && github.event.pull_request.merged) ||\n      (github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.comment.user.id != 97796249 && contains(github.event.comment.body, '/backport'))\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.BACKPORT_ACTION_PAT }}\n\n      - name: Create backport PRs\n        uses: zeebe-io/backport-action@v0.0.8\n        with:\n          github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n          github_workspace: ${{ github.workspace }}\n          pull_description: |\n            # Description\n            Backport of #${pull_number} to `${target_branch}`.\n\n            relates to ${issue_refs}\n```", "answer": "```yaml name: Backport labeled merged pull requests\non:\n  pull_request:\n    types: [closed]\n  issue_comment:\n    types: [created]\njobs:\n  build:\n    name: Create backport PRs\n    runs-on: ubuntu-latest\n    # Only run when pull request is merged\n    # or when a comment containing `/backport` is created by someone other than the backport-action\n    # bot user (user id: 97796249)\n    if: >\n      (\n        github.event_name == 'pull_request' &&\n        github.event.pull_request.merged\n      ) || (\n        github.event_name == 'issue_comment' &&\n        github.event.issue.pull_request &&\n        github.event.comment.user.id != 97796249 &&\n        contains(github.event.comment.body, '/backport')\n      )\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Token for git actions, e.g. git push\n          token: ${{ secrets.BACKPORT_ACTION_PAT }}\n      - name: Create backport PRs\n        uses: zeebe-io/backport-action@v0.0.8\n        with:\n          # Required\n          # Token to authenticate requests to GitHub\n          github_token: ${{ secrets.BACKPORT_ACTION_PAT }}\n\n          # Required\n          # Working directory for the backport action\n          github_workspace: ${{ github.workspace }}\n\n          # Optional\n          # Regex pattern to match github labels\n          # Must contain a capture group for target branchname\n          # label_pattern: ^backport ([^ ]+)$\n\n          # Optional\n          # Template used as description in the pull requests created by this action.\n          # Placeholders can be used to define variable values.\n          # These are indicated by a dollar sign and curly braces (`${placeholder}`).\n          # Please refer to this action's README for all available placeholders.\n          pull_description: |-\n            # Description\n            Backport of #${pull_number} to `${target_branch}`.\n\n            relates to ${issue_refs}\n```"}
{"id": "63c49b8c1e3364807579b321", "level": "level5", "llm_response": "```yaml\nname: Create tag\n\non:\n  workflow_dispatch:\n\ninputs:\n  version:\n    description: 'Next version'\n    required: true\n    default: 'patch'\n    type: choice\n    options:\n      - patch\n      - minor\n\njobs:\n  create-tag:\n    id: create-tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.PAT }}\n\n      - name: Get Previous tag\n        id: previoustag\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        uses: WyriHaximus/github-action-get-previous-tag@v1\n\n      - name: Get next versions\n        id: semvers\n        uses: WyriHaximus/github-action-next-semvers@v1\n        with:\n          version: ${{ steps.previoustag.outputs.tag }}\n\n      - name: Create new minor tag\n        if: inputs.version == 'minor'\n        uses: rickstaa/action-create-tag@v1\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: ${{ steps.semvers.outputs.minor }}\n\n      - name: Create new patch tag\n        if: inputs.version == 'patch'\n        uses: rickstaa/action-create-tag@v1\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: ${{ steps.semvers.outputs.patch }}\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Create tag\"\n\non:\n  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Next version'\n        required: true\n        default: 'patch'\n        type: choice\n        options:\n          - patch\n          - minor\n\njobs:\n  create-tag:\n    name: \"Create tag\"\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.PAT }}\n\n      - name: 'Get Previous tag'\n        id: previoustag\n        uses: \"WyriHaximus/github-action-get-previous-tag@v1\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: 'Get next versions'\n        id: semvers\n        uses: \"WyriHaximus/github-action-next-semvers@v1\"\n        with:\n          version: ${{ steps.previoustag.outputs.tag }}\n\n      - name: \"Create new minor tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'minor'\n        with:\n          tag: ${{ steps.semvers.outputs.minor }}\n          message: ${{ steps.semvers.outputs.minor }}\n\n      - name: \"Create new patch tag\"\n        uses: rickstaa/action-create-tag@v1\n        if: inputs.version == 'patch'\n        with:\n          tag: ${{ steps.semvers.outputs.patch }}\n          message: ${{ steps.semvers.outputs.patch }}\n```"}
{"id": "63c4a0d7517fc08c1ef12403", "level": "level5", "llm_response": "```yaml\nname: Check\n\non:\n  pull_request:\n    types: [opened, ready_for_review, synchronize]\n  pull_request_review:\n    types: [submitted]\n\npermissions:\n  actions: write\n  pull-requests: write\n  checks: none\n  contents: none\n  deployments: none\n  issues: none\n  packages: none\n  repository-projects: none\n  security-events: none\n  statuses: none\n\njobs:\n  check-reviews:\n    id: check-reviews\n    if: !github.event.pull_request.draft\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v3\n        with:\n          repository: gravitational/shared-workflows\n          path: .github/shared-workflows\n          ref: main\n\n      - name: Installing Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: .github/shared-workflows/bot/go.mod\n\n      - name: Checking reviewers\n        run: cd .github/shared-workflows/bot && go run main.go -workflow=check -token=\"${{ secrets.GITHUB_TOKEN }}\" -reviewers=\"${{ secrets.reviewers }}\"\n```", "answer": "```yaml # Workflow will trigger on all pull request (except draft), pull request\n# review, and commit push to a pull request (synchronize) event types\n#\n# NOTE: pull_request_target behaves the same as pull_request except it grants a\n# read/write token to workflows running on a pull request from a fork. While\n# this may seem unsafe, the permissions for the token are limited below and\n# the permissions can not be changed without merging to master which is\n# protected by CODEOWNERS.\nname: Check\non:\n  pull_request_review:\n    type: [submitted, edited, dismissed]\n  pull_request_target:\n    types: [opened, ready_for_review, synchronize]\n\n# Limit the permissions on the GitHub token for this workflow to the subset\n# that is required. In this case, the check workflow needs to invalidate\n# reviews and delete workflow runs, so it needs write access to \"actions\" and\n# \"pull-requests\", nothing else.\npermissions:\n    actions: write\n    pull-requests: write\n    checks: none\n    contents: none\n    deployments: none\n    issues: none\n    packages: none\n    repository-projects: none\n    security-events: none\n    statuses: none\n\njobs:\n  check-reviews:\n    name: Checking reviewers\n    if: ${{ !github.event.pull_request.draft }}\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout main branch of shared-workflow repository.\n      - name: Checkout shared-workflow\n        uses: actions/checkout@v3\n        with:\n          repository: gravitational/shared-workflows\n          path: .github/shared-workflows\n          ref: main\n      - name: Installing Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: .github/shared-workflows/bot/go.mod\n        # Run \"check\" subcommand on bot.\n      - name: Checking reviewers\n        run: cd .github/shared-workflows/bot && go run main.go -workflow=check -token=\"${{ secrets.GITHUB_TOKEN }}\" -reviewers=\"${{ secrets.reviewers }}\"\n```"}
{"id": "63c4973933b087f6bde31123", "level": "level5", "llm_response": "```yaml\nname: Structr CI Pipeline\n\non:\n  push:\n    branches:\n      - main\n      - release\n  pull_request:\n    branches:\n      - main\n      - release\n  repository_dispatch:\n\njobs:\n  run-tests:\n    id: run-tests\n    runs-on: self-hosted\n    if: !startsWith(github.actor, 'dependabot')\n    strategy:\n      matrix:\n        module: [structr-ui, structr-core, structr-rest, structr-db-driver-api, structr-memgraph-driver, structr-memory-driver, structr-modules, structr-neo4j-bolt-driver]\n        variableName: [UI, CORE, REST, DB_DRIVER_API, MEMGRAPH_DRIVER, MEMORY_DRIVER, MODULES, NEO4J_BOLT_DRIVER]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Start Test Database\n        run: |\n          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }}  -p 7687  -e NEO4J_AUTH=neo4j/admin  -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes  -e NEO4J_dbms_memory_heap_maxSize=4G  -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 &&  echo \"ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"7687/tcp\") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})\" >> $GITHUB_ENV\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: 22.2.0\n          java-version: 11\n          components: js,python\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Compile and run Tests\n        run: |\n          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB &&  cd ${{ matrix.module }} &&  mvn clean install -DskipDockerTestDB -Denv.testDatabaseConnection=\"bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}\" \n\n      - name: Stop Test Database\n        if: always()\n        run: docker stop ${{ matrix.module }}-test-${{ github.run_id }}\n\n  build-and-deploy:\n    id: build-and-deploy\n    runs-on: self-hosted\n    needs: run-tests\n    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release')\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: structr\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: 22.2.0\n          java-version: 11\n          components: js,python\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Deploy\n        run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB\n\n      - name: Upload binaries\n        run: scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 && scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1\n\n  cleanup-system:\n    id: cleanup-system\n    runs-on: self-hosted\n    needs: [run-tests, build-and-deploy]\n    if: always()\n    steps:\n      - name: Cleanup docker\n        run: docker container prune -f && docker image prune -f && docker volume prune -f\n\n      - name: Cleanup runner home\n        run: cd ~/actions-runner/_work/structr/ && rm -rf structr\n```", "answer": "```yaml name: Structr CI Pipeline\non:\n  push\n\njobs:\n  run-tests:\n    if: ${{ !startsWith( github.actor, 'dependabot' ) }}\n    runs-on: self-hosted\n    environment: build-and-test\n    strategy:\n      matrix:\n        include:\n          - module: structr-ui\n            variableName: UI\n          - module: structr-core\n            variableName: CORE\n          - module: structr-rest\n            variableName: REST\n          - module: structr-db-driver-api\n            variableName: DB_DRIVER_API\n          - module: structr-memgraph-driver\n            variableName: MEMGRAPH_DRIVER\n          - module: structr-memory-driver\n            variableName: MEMORY_DRIVER\n          - module: structr-modules\n            variableName: MODULES\n          - module: structr-neo4j-bolt-driver\n            variableName: NEO4J_BOLT_DRIVER\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start Test Datenbase\n        run: >-\n          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} \n          -p 7687 \n          -e NEO4J_AUTH=neo4j/admin \n          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \n          -e NEO4J_dbms_memory_heap_maxSize=4G \n          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && \n          echo \"ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"7687/tcp\") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})\" >> $GITHUB_ENV\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Compile and run Tests\n        run:  >-\n          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && \n          cd ${{ matrix.module }} && \n          mvn clean install -DskipDockerTestDB -Denv.testDatabaseConnection=\"bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}\"\n\n      - name: Stop Test Database\n        if: always()\n        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}\n\n  build-and-deploy:\n    runs-on: self-hosted\n    environment: build-and-test\n    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}\n    needs: run-tests\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: structr\n          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}\n\n      - name: Install GraalVM\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: '22.2.0'\n          java-version: '11'\n          components: 'js,python'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB\n      - name: Upload binaries\n        run: >-\n          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&\n          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1\n\n  cleanup-system:\n    runs-on: self-hosted\n    if: always()\n    needs: [run-tests, build-and-deploy]\n    steps:\n      - name: Cleanup docker\n        run: docker container prune -f && docker image prune -f && docker volume prune -f\n      - name: Cleanup runner home\n        run: cd ~/actions-runner/_work/structr/ && rm -rf structr\n```"}
{"id": "63c496e6517fc08c1eed3897", "level": "level5", "llm_response": "```yaml\nname: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    id: sync-branches\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          FROM_BRANCH: master\n          TO_BRANCH: dev\n\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: internal\n          repo: ${{ github.repository }}\n          number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```", "answer": "```yaml name: Sync Back to Development\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-branches:\n    runs-on: ubuntu-latest\n    name: Syncing branches\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Opening pull request\n        id: pull\n        uses: tretuna/sync-branches@1.4.0\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          FROM_BRANCH: 'master'\n          TO_BRANCH: 'dev'\n      - name: Label the pull request to ignore for release note generation\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: internal\n          repo: ${{ github.repository }}\n          number: ${{ steps.pull.outputs.PULL_REQUEST_NUMBER }}\n```"}
{"id": "63c4a12533b087f6bde70dfc", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * 0'\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [javascript]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: 'CodeQL'\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 10 * * SUN'\n\njobs:\n  'Analyze':\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n    steps:\n      - name: 'Checkout repository'\n        uses: actions/checkout@v3\n      - name: 'Initialize CodeQL'\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: 'Perform CodeQL Analysis'\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49fda6fc19abdf9cd8ce3", "level": "level5", "llm_response": "```yaml\nname: Continuous integration\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\nenv:\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Mount Bazel cache\n      uses: actions/cache@v3\n      with:\n        path: ~/repo-cache\n        key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n    - name: Install Nix\n      uses: cachix/install-nix-action@v18\n      with:\n        nix_path: nixpkgs=./nixpkgs/default.nix\n        extra_nix_config: |\n          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n          extra-substituters = https://hydra.iohk.io\n    - name: Configure\n      run: |\n        [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        case ${{ runner.os }} in\n          macOS) BUILD_CONFIG=ci-macos-nixpkgs;;\n          Linux) BUILD_CONFIG=ci-linux-nixpkgs;;\n        esac\n        cat >.bazelrc.local <<EOF\n        common --config=ci\n        build --config=$BUILD_CONFIG\n        build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n        EOF\n        cat >~/.netrc <<EOF\n        machine api.github.com\n                password ${{ secrets.GITHUB_TOKEN }}\n        EOF\n    - name: Check Bazel version\n      run: nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n    - name: Build & test\n      run: |\n        nix-shell --arg docTools false --pure --run '\n          set -euo pipefail\n          ./tests/run-start-script.sh --use-nix\n          bazel build //tests:run-tests\n          ./bazel-ci-bin/tests/run-tests\n          bazel coverage //...\n          bazel build //docs:api_html\n          bazel build //docs:guide_html\n          '\n\n  test-nixpkgs-cross:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Mount Bazel cache\n      uses: actions/cache@v3\n      with:\n        path: ~/repo-cache\n        key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n    - name: Install Nix\n      uses: cachix/install-nix-action@v18\n      with:\n        nix_path: nixpkgs=./nixpkgs/default.nix\n        extra_nix_config: |\n          trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n          extra-substituters = https://hydra.iohk.io\n    - name: Configure\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        cat >.bazelrc.local <<EOF\n        common --config=ci\n        build --config=linux-nixpkgs\n        build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n        EOF\n        ln -sr .bazelrc.local examples/arm/.bazelrc.local\n        cat >~/.netrc <<EOF\n        machine api.github.com\n                password ${{ secrets.GITHUB_TOKEN }}\n        EOF\n    - name: Check Bazel version\n      run: nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n    - name: Build & test\n      run: |\n        cd examples/arm\n        nix-shell --arg docTools false --pure --run \"bazel build //... --platforms=//:linux_aarch64\"\n        nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example\"\n        nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example2\"\n\n  test-bindist:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    steps:\n    - name: Cleanup on Ubuntu\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        sudo swapoff -a\n        sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc\n        sudo apt clean\n        docker rmi $(docker images -q) -f\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Mount Bazel cache\n      uses: actions/cache@v3\n      with:\n        path: ~/repo-cache\n        key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}\n    - name: Install Bazel\n      run: |\n        BAZEL_DIR=\"$(.ci/fetch-bazel-bindist)\"\n        mv $BAZEL_DIR $HOME/bazel\n    - name: Configure\n      run: |\n        [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        case ${{ runner.os }} in\n          macOS) BUILD_CONFIG=ci-macos-bindist;;\n          Linux) BUILD_CONFIG=ci-linux-bindist;;\n          Windows) BUILD_CONFIG=ci-windows-bindist;;\n        esac\n        cat >.bazelrc.local <<EOF\n        common --config=ci\n        build --config=$BUILD_CONFIG\n        build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n        EOF\n        cat >~/.netrc <<EOF\n        machine api.github.com\n                password ${{ secrets.GITHUB_TOKEN }}\n        EOF\n    - name: Build & test\n      run: |\n        export PATH=$HOME/bazel:$PATH\n        [[ ${{ runner.os }} == macOS ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1\n        ./tests/run-start-script.sh --use-bindists\n        if [[ ${{ runner.os }} == Windows ]]; then\n          # On Windows `//...` expands to `/...`.\n          bazel test ///...\n        else\n          bazel test //...\n        fi\n        # Test stack_snapshot pinning\n        # NOTE keep in sync with tests/RunTests.hs\n        bazel run @stackage-pinning-test-unpinned//:pin\n        bazel build @stackage-pinning-test//:hspec\n```", "answer": "```yaml name: Continuous integration\non: [push]\nenv:\n  # Bump this number to invalidate the GH actions cache\n  cache-version: 0\n\njobs:\n  test-nixpkgs:\n    name: Build & Test - Nixpkgs\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-nixpkgs;;\n            Linux) BUILD_CONFIG=ci-linux-nixpkgs;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          nix-shell --arg docTools false --pure --run '\n            set -euo pipefail\n            ./tests/run-start-script.sh --use-nix\n            bazel build //tests:run-tests\n            ./bazel-ci-bin/tests/run-tests\n            bazel coverage //...\n            bazel build //docs:api_html\n            bazel build //docs:guide_html\n            '\n\n  test-nixpkgs-cross:\n    name: Build & Test - Cross\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}\n      - uses: cachix/install-nix-action@v18\n        with:\n          nix_path: nixpkgs=./nixpkgs/default.nix\n          extra_nix_config: |\n            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=\n            extra-substituters = https://hydra.iohk.io\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=linux-nixpkgs\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          ln -sr .bazelrc.local examples/arm/.bazelrc.local\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Check Bazel version\n        run: |\n          nix-shell --arg docTools false --pure --run .ci/check-bazel-version\n      - name: Build & test\n        run: |\n          cd examples/arm\n          nix-shell --arg docTools false --pure --run \"bazel build //... --platforms=//:linux_aarch64\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example\"\n          nix-shell --arg docTools false --pure qemu-shell.nix --run \"qemu-aarch64 bazel-ci-bin/example2\"\n\n  test-bindist:\n    name: Build & Test - bindist\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-11, windows-latest]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |-\n          sudo swapoff -a\n          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc\n          sudo apt clean\n          docker rmi $(docker images -q) -f\n      - uses: actions/checkout@v3\n      - name: Mount Bazel cache\n        uses: actions/cache@v3\n        with:\n          path: ~/repo-cache\n          key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}\n      - name: Install Bazel\n        shell: bash\n        run: |\n          BAZEL_DIR=\"$(.ci/fetch-bazel-bindist)\"\n          mv $BAZEL_DIR $HOME/bazel\n      - name: Configure\n        env:\n          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n        shell: bash\n        run: |\n          # Avoid failures of the form `deadline exceeded after 14999958197ns DEADLINE_EXCEEDED`.\n          # See https://github.com/tweag/rules_haskell/issues/1498 and https://github.com/tweag/rules_haskell/pull/1692.\n          [[ ${{ runner.os }} == Linux ]] && sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n          case ${{ runner.os }} in\n            macOS) BUILD_CONFIG=ci-macos-bindist;;\n            Linux) BUILD_CONFIG=ci-linux-bindist;;\n            Windows) BUILD_CONFIG=ci-windows-bindist;;\n          esac\n          cat >.bazelrc.local <<EOF\n          common --config=ci\n          build --config=$BUILD_CONFIG\n          build --remote_header=x-buildbuddy-api-key=\"$BUILDBUDDY_API_KEY\"\n          EOF\n          cat >~/.netrc <<EOF\n          machine api.github.com\n                  password ${{ secrets.GITHUB_TOKEN }}\n          EOF\n      - name: Build & test\n        shell: bash\n        run: |\n          export PATH=$HOME/bazel:$PATH\n          [[ ${{ runner.os }} == macOS ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1\n          ./tests/run-start-script.sh --use-bindists\n          if [[ ${{ runner.os }} == Windows ]]; then\n            # On Windows `//...` expands to `/...`.\n            bazel test ///...\n          else\n            bazel test //...\n          fi\n          # Test stack_snapshot pinning\n          # NOTE keep in sync with tests/RunTests.hs\n          bazel run @stackage-pinning-test-unpinned//:pin\n          bazel build @stackage-pinning-test//:hspec\n```"}
{"id": "63c49f501e336480757b2fb7", "level": "level5", "llm_response": "```yaml\nname: Run Flake\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  nix-flake:\n    runs-on: ubuntu-22.04\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Fetch tags\n      run: git fetch --prune --tags ||:\n\n    - name: Install Nix\n      uses: cachix/install-nix-action@v17\n      with:\n        extra_nix_config: |\n          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n\n    - name: Build flake\n      run: nix build\n\n    - name: Test run flake\n      run: nix shell -c sile --version\n```", "answer": "```yaml name: Run Flake\n\non: [ push, pull_request ]\n\njobs:\n\n  nix-flake:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Fetch tags\n        run: |\n          git fetch --prune --tags ||:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Build flake\n        run: nix build\n      - name: Test run flake\n        run: nix shell -c sile --version\n```"}
{"id": "63c4964e6fc19abdf9c9b3ba", "level": "level5", "llm_response": "```yaml\nname: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\njobs:\n  fossa:\n    id: fossa\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download fossa cli\n        run: |\n          mkdir -p $HOME/.local/bin\n          curl https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash -s -- -b $HOME/.local/bin\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n\n      - name: Fossa init\n        run: fossa init\n\n      - name: Set env\n        run: echo \"line_number=$(grep -n \"project\" .fossa.yml | cut -f1 -d:)\" >> $GITHUB_ENV\n\n      - name: Configuration\n        run: |\n          sed -i \"${line_number}s|.*|  project: git@github.com:${GITHUB_REPOSITORY}.git|\" .fossa.yml\n          cat .fossa.yml\n\n      - name: Upload dependencies\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n        run: fossa analyze --debug\n```", "answer": "```yaml name: Dependency License Scanning\n\non:\n  push:\n    branches:\n      - main\n      - chore/fossa-workflow\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  fossa:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Download fossa cli\n        run: |-\n          mkdir -p $HOME/.local/bin\n          curl https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash -s -- -b $HOME/.local/bin\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n\n      - name: Fossa init\n        run: fossa init\n      - name: Set env\n        run: echo \"line_number=$(grep -n \"project\" .fossa.yml | cut -f1 -d:)\" >> $GITHUB_ENV\n      - name: Configuration\n        run: |-\n          sed -i \"${line_number}s|.*|  project: git@github.com:${GITHUB_REPOSITORY}.git|\" .fossa.yml\n          cat .fossa.yml\n      - name: Upload dependencies\n        run: fossa analyze --debug\n        env:\n          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"id": "63c49ea61842bc13d7792309", "level": "level5", "llm_response": "```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: 0\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-bookstack/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for bookstack** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-bookstack/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '51 15 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-bookstack/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-bookstack/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for bookstack** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-bookstack/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c49da71899db58865017d1", "level": "level5", "llm_response": "```yaml\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n\njobs:\n  merge:\n    id: merge\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          type: now\n          from_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```", "answer": "```yaml #\n# Copyright 2022 The Dapr Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nname: dapr-sync-feature-branches\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\njobs:\n  merge:\n    name: Merge master into feature branches\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [feature/workflows]\n    steps:\n      - name: Merge master -> ${{ matrix.branch }}\n        # artursouza/merge-branch is a fork of devmasx/merge-branch \n        #   to minimize risk of a 3rd party repo running arbitrary code with our creds\n        uses: artursouza/merge-branch@v1.4.0\n        with:\n          type: now\n          from_branch: master\n          target_branch: ${{ matrix.branch }}\n          github_token: ${{ secrets.DAPR_BOT_TOKEN }}\n```"}
{"id": "63c4a17c33b087f6bde72c5f", "level": "level5", "llm_response": "```yaml\nname: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Install Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: v1.18.x\n        cache: true\n\n    - name: Run lint\n      run: go run mage.go lint\n```", "answer": "```yaml name: Lint (pre-commit)\n\non:\n  pull_request:\n  push:\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: v1.18.x\n          cache: true\n      - run: go run mage.go lint\n```"}
{"id": "63c49f39b008460c1df4c52d", "level": "level5", "llm_response": "```yaml\nname: Static Code Analysis\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n        php: [ 8.1 ]\n        stability: [ prefer-stable ]\n      fail-fast: true\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Setup PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php }}\n        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo\n        coverage: none\n\n    - name: Setup problem matchers\n      run: |\n        echo \"::add-matcher::${{ runner.tool_cache }}/php.json\"\n        echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n    - name: Install dependencies\n      run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction\n\n    - name: Execute static code analysis\n      run: vendor/bin/phpstan analyse src --level 9 --error-format=github --no-progress --no-ansi\n```", "answer": "```yaml name: Static Code Analysis\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest]\n        php: [8.1]\n        stability: [prefer-stable]\n\n    name: P${{ matrix.php }} - ${{ matrix.stability }} - ${{ matrix.os }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo\n          coverage: none\n\n      - name: Setup problem matchers\n        run: |\n          echo \"::add-matcher::${{ runner.tool_cache }}/php.json\"\n          echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Install dependencies\n        run: composer update --${{ matrix.stability }} --prefer-dist --no-interaction\n\n      - name: Execute static code analysis\n        run: vendor/bin/phpstan analyse src --level 9 --error-format=github --no-progress --no-ansi\n```"}
{"id": "63c499e81842bc13d7773766", "level": "level5", "llm_response": "```yaml\nname: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Check compressed size\n        uses: 94dreamer/compressed-size-action@master\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pattern: ./miniprogram_dist/**/*.{js,wxs,wxml,json}\n```", "answer": "```yaml name: Compressed Size\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  compressed-size:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: 94dreamer/compressed-size-action@master\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          pattern: \"./miniprogram_dist/**/*.{js,wxs,wxml,json}\"```"}
{"id": "63c49f95736e7f0ed8c6f18a", "level": "level5", "llm_response": "```yaml\nname: Sync labels\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Sync labels\n        uses: micnncim/action-label-syncer@v1\n        with:\n          manifest: .github/labels.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Sync labels\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: micnncim/action-label-syncer@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          manifest: .github/labels.yml\n```"}
{"id": "63c49fbdcbc73931bb1b5e4f", "level": "level5", "llm_response": "```yaml\nname: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches:\n      - branch0.1/tf-serving-cluster\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Build the TF Docker image\n        run: |\n          cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/tf_serving\n          docker build -f gramine_tf_serving.dockerfile . -t tf_serving:$(date +%s)\n      - name: Build the SP Docker image\n        run: |\n          cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/secret_prov\n          docker build -f secret_prov.dockerfile . -t sp_serving:$(date +%s)\n      - name: Check Docker image Status\n        run: docker images\n```", "answer": "```yaml name: TF-Serving Docker Image CI\n\non:\n  pull_request:\n    branches: [ branch0.1/tf-serving-cluster ]\n\njobs:\n\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build the TF Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/tf_serving\n        docker build -f gramine_tf_serving.dockerfile . -t tf_serving:$(date +%s)\n        \n    - name: Build the SP Docker image\n      run: |\n        cd cczoo/tensorflow-serving-cluster/tensorflow-serving/docker/secret_prov\n        docker build -f secret_prov.dockerfile . -t sp_serving:$(date +%s)\n        \n    - name: Check Docker image Status\n      run: docker images\n      \n```"}
{"id": "63c49daf1842bc13d778bec9", "level": "level5", "llm_response": "```yaml\nname: unit tests\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n  pull_request:\n    branches:\n      - master\n    paths:\n      - .github/**\n      - **.py\n      - tests/**\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        container:\n          - fedora:36\n          - fedora:rawhide\n          - opensuse/leap:15.3\n          - opensuse/leap:15.4\n          - opensuse/tumbleweed\n          - quay.io/centos/centos:stream9\n          - debian:stable\n          - debian:unstable\n          - ubuntu:latest\n\n    steps:\n      - name: Install packages (openSUSE)\n        if: startsWith(matrix.container, 'opensuse/')\n        run: |\n          zypper -n --gpg-auto-import-keys refresh\n          zypper -n lr --details\n          grep -qi tumbleweed /etc/os-release && zypper -n dist-upgrade || zypper -n patch || zypper -n patch\n          zypper -n install git-lfs\n          zypper -n install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: Install packages (Fedora/CentOS)\n        if: startsWith(matrix.container, 'fedora:') || contains(matrix.container, 'centos:')\n        run: |\n          dnf -y makecache\n          dnf -y distro-sync\n          dnf -y install git-lfs\n          dnf -y install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: Install packages (Debian/Ubuntu)\n        if: startsWith(matrix.container, 'debian:') || startsWith(matrix.container, 'ubuntu:')\n        run: |\n          apt-get -y update\n          apt-get -y upgrade\n          apt-get -y --no-install-recommends install git-lfs\n          apt-get -y --no-install-recommends install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Run unit tests\n        run: |\n          pip3 install -e .\n          python3 setup.py test\n\n      - name: Generate coverage reports (openSUSE Tumbleweed)\n        if: matrix.container == 'opensuse/tumbleweed'\n        run: |\n          zypper -n install python3-pytest python3-pytest-cov\n          pytest --cov=osc\n\n      - name: Upload coverage reports to Codecov (openSUSE Tumbleweed)\n        if: matrix.container == 'opensuse/tumbleweed'\n        uses: codecov/codecov-action@v3\n```", "answer": "```yaml name: 'unit tests'\n\non:\n  push:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n  pull_request:\n    branches: ['master']\n    paths:\n      - '.github/**'\n      - '**.py'\n      - 'tests/**'\n\njobs:\n  test:\n    name: 'unit tests'\n    runs-on: 'ubuntu-latest'\n    strategy:\n      fail-fast: false\n      matrix:\n        # Testing per python-version using actions/setup-python is not possible,\n        # because rpm doesn't exist on pypi and cannot be installed via pip on ubuntu.\n        # That's why we're going to test on the target distros directly.\n        container:\n\n          # Fedora\n          - 'fedora:36'\n          - 'fedora:rawhide'\n\n          # openSUSE\n          # leap < 15.2 doesn't contain git-lfs which causes actions/checkout to fail\n          - 'opensuse/leap:15.3'\n          - 'opensuse/leap:15.4'\n          - 'opensuse/tumbleweed'\n\n          # CentOS Stream\n          - 'quay.io/centos/centos:stream9'\n\n          # Debian\n          - 'debian:stable'\n          - 'debian:unstable'\n\n          # Ubuntu\n          - 'ubuntu:latest'\n\n    container:\n      image: ${{ matrix.container }}\n\n    steps:\n      - name: 'Install packages (openSUSE)'\n        if: ${{ startsWith(matrix.container, 'opensuse/') }}\n        run: |\n            zypper -n --gpg-auto-import-keys refresh\n            zypper -n lr --details\n            grep -qi tumbleweed /etc/os-release && zypper -n dist-upgrade || zypper -n patch || zypper -n patch\n            zypper -n install git-lfs\n            zypper -n install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Fedora/CentOS)'\n        if: ${{ startsWith(matrix.container, 'fedora:') || contains(matrix.container, 'centos:') }}\n        run: |\n            dnf -y makecache\n            dnf -y distro-sync\n            dnf -y install git-lfs\n            dnf -y install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - name: 'Install packages (Debian/Ubuntu)'\n        if: ${{ startsWith(matrix.container, 'debian:') || startsWith(matrix.container, 'ubuntu:') }}\n        run: |\n            apt-get -y update\n            apt-get -y upgrade\n            apt-get -y --no-install-recommends install git-lfs\n            apt-get -y --no-install-recommends install diffstat diffutils python3 python3-cryptography python3-pip python3-rpm python3-setuptools python3-urllib3\n\n      - uses: actions/checkout@v3\n\n      - name: 'Run unit tests'\n        run: |\n          pip3 install -e .\n          python3 setup.py test\n\n      - name: 'Generate coverage reports (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        run: |\n            zypper -n install python3-pytest python3-pytest-cov\n            pytest --cov=osc\n\n      - name: 'Upload coverage reports to Codecov (openSUSE Tumbleweed)'\n        if: ${{ matrix.container == 'opensuse/tumbleweed' }}\n        uses: codecov/codecov-action@v3\n```"}
{"id": "63c4a0086fc19abdf9cda03c", "level": "level5", "llm_response": "```yaml\nname: sync zoekt\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          repository: sourcegraph/sourcegraph\n          ref: main\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: 1.19\n\n      - name: Download Go modules\n        run: go mod download\n\n      - name: Update zoekt\n        run: ./dev/zoekt/update\n\n      - name: Create PR\n        id: pr\n        if: github.event_name == 'push'\n        uses: peter-evans/create-pull-request@v3\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          title: zoekt: update to sourcegraph/zoekt@${{ github.sha }}\n          commit-message: zoekt: update to sourcegraph/zoekt@${{ github.sha }}\n          body: |\n            This PR is autogenerated to update to sourcegraph/zoekt@${{ github.sha }}\n\n            ## Test Plan\n\n            Testing is done on the zoekt repo. All checks on this PR are sufficient.\n          branch: zoekt/update\n          delete-branch: true\n          team-reviewers: search-core\n          base: main\n\n      - name: Check PR outputs\n        run: |\n          echo \"Pull Request Number - ${{ steps.pr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}\"\n\n      - name: Enable Pull Request Automerge\n        if: steps.pr.outputs.pull-request-operation == 'created'\n        uses: peter-evans/enable-pull-request-automerge@v1\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n          merge-method: squash\n          repository: sourcegraph/sourcegraph\n```", "answer": "```yaml name: sync zoekt\non:\n  push:\n    branches:\n      - main\n\n  workflow_dispatch:\n    branches:\n      - main\n\njobs:\n  sync-zoekt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          repository: 'sourcegraph/sourcegraph'\n          ref: 'main'\n      - uses: actions/setup-go@v2\n        with: { go-version: '1.19' }\n      - run: go mod download\n      - run: ./dev/zoekt/update\n      - uses: peter-evans/create-pull-request@v3\n        if: github.event_name == 'push'\n        name: 'Create PR'\n        id: pr\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          title: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          commit-message: 'zoekt: update to sourcegraph/zoekt@${{ github.sha }}'\n          body: |\n            This PR is autogenerated to update to sourcegraph/zoekt@${{ github.sha }}\n\n            ## Test Plan\n\n            Testing is done on the zoekt repo. All checks on this PR are sufficient.\n\n          branch: 'zoekt/update'\n          delete-branch: 'true'\n          team-reviewers: 'search-core'\n          base: 'main'\n\n      - name: 'Check PR outputs'\n        run: |\n          echo \"Pull Request Number - ${{ steps.pr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.pr.outputs.pull-request-url }}\"\n      - uses: peter-evans/enable-pull-request-automerge@v1\n        name: Enable Pull Request Automerge\n        if: steps.pr.outputs.pull-request-operation == 'created'\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}\n          merge-method: squash\n          repository: 'sourcegraph/sourcegraph'\n```"}
{"id": "63c498781e33648075787ab4", "level": "level5", "llm_response": "```yaml\nname: Check documentation\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  docs:\n    id: docs\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        pip install --constraint=.github/workflows/constraints.txt pip\n        pip install --constraint=.github/workflows/constraints.txt nox\n\n    - name: Build documentation\n      run: nox --force-color --session=docs\n\n    - name: Upload documentation\n      uses: actions/upload-artifact@v3\n      with:\n        name: docs\n        path: docs/_build\n\n    - name: Check links\n      run: nox --force-color --session=linkcheck\n```", "answer": "```yaml name: Check documentation\non: [push, pull_request]\njobs:\n  docs:\n    name: Build documentation & check links\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.8\"\n      - run: |\n          pip install --constraint=.github/workflows/constraints.txt pip\n          pip install --constraint=.github/workflows/constraints.txt nox\n      - name: Build documentation\n        run: nox --force-color --session=docs\n      - uses: actions/upload-artifact@v3\n        with:\n          name: docs\n          path: docs/_build\n      - name: Check links\n        run: nox --force-color --session=linkcheck\n```"}
{"id": "63c496801899db58864d34ec", "level": "level5", "llm_response": "```yaml\nname: ci\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    id: semantic-pull-request\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    id: styling\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run check_format\n\n  unit-tests:\n    id: unit-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n\n  e2e:\n    id: e2e\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Test (100% requirement on 100% file)\n        run: ./\n        with:\n          path: ./fixtures/lcov.100.info\n      - name: Test (90% requirement on 95% file)\n        run: ./\n        with:\n          path: ./fixtures/lcov.95.info\n          min_coverage: '90'\n      - name: Test (100% requirement on 95% file)\n        run: ./\n        with:\n          path: ./fixtures/lcov.95.info\n          exclude: '**/*_observer.dart'\n      - name: Test (100% requirement on 95% file with excludes)\n        run: ./\n        with:\n          path: ./fixtures/lcov.95.info\n          exclude: '**/whatever.dart **/*_observer.dart **/does_not_matter.dart'\n```", "answer": "```yaml name: 'ci'\non:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  styling:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint\n        run: npm run lint\n      - name: Format\n        run: npm run check_format\n\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install dependencies\n        run: npm ci\n      - name: Test\n        run: npm test\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test (100% requirement on 100% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.100.info'\n      - name: Test (90% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          min_coverage: 90\n      - name: Test (100% requirement on 95% file)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/*_observer.dart'\n      - name: Test (100% requirement on 95% file with excludes)\n        uses: ./\n        with:\n          path: './fixtures/lcov.95.info'\n          exclude: '**/whatever.dart **/*_observer.dart **/does_not_matter.dart'\n```"}
{"id": "63c496c9b008460c1df16a83", "level": "level5", "llm_response": "```yaml\nname: generator\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Update readme\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN_SECRETS }}\n        uses: linuxsuren/yaml-readme@v0.0.12\n        with:\n          pattern: \"\"\n          username: \"linuxsuren\"\n          org: \"jenkins-zh\"\n          repo: \"jenkins-cli\"\n```", "answer": "```yaml name: generator\n\non:\n  push:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Update readme\n        uses: linuxsuren/yaml-readme@v0.0.12\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN_SECRETS }}\n        with:\n          pattern: ''\n          username: linuxsuren\n          org: jenkins-zh\n          repo: jenkins-cli\n```"}
{"id": "63c49c3b1899db58864f8917", "level": "level5", "llm_response": "```yaml\nname: slsa\n\non:\n  push:\n    branches: [ master ]\n    tags: [ '*' ]\n  repository_dispatch:\n    types: [ clone ]\n  release:\n    types: [ published, prereleased, draft ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Set REPOSITORY_NAME\n      run: echo \"REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')\" >> $GITHUB_ENV\n    - name: Checkout repository\n      uses: actions/checkout@master\n    - name: Create checksum file\n      run: find tests/*.bash tests/*.sh scripts/* misc/* ./*.sh -type f -exec sha256sum {} \\; > ${{ env.REPOSITORY_NAME }}.sha256\n    - name: Upload artifact\n      uses: actions/upload-artifact@v3\n      with:\n        path: ${{ env.REPOSITORY_NAME }}.sha256\n\n  generate-provenance:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n    - name: Download build artifact\n      uses: actions/download-artifact@v3\n      with:\n        name: ${{ env.REPOSITORY_NAME }}.sha256\n    - name: Generate provenance\n      uses: slsa-framework/github-actions-demo@v0.1\n      with:\n        artifact_path: artifact/\n    - name: Upload provenance\n      uses: actions/upload-artifact@v3\n      with:\n        path: build.provenance\n```", "answer": "```yaml ---\nname: slsa\non:\n  push:\n  release:\n    types: [published, released]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')\" >> $GITHUB_ENV\n        shell: bash\n\n      - name: checkout repository\n        uses: actions/checkout@master\n\n      - name: create checksum file\n        run: find tests/*.bash tests/*.sh scripts/* misc/* ./*.sh -type f -exec sha256sum {} \\; > ${{ env.REPOSITORY_NAME }}.sha256\n\n      - name: upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: ${{ env.REPOSITORY_NAME }}.sha256\n\n  generate-provenance:\n    needs: build\n    name: generate build provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: download build artifact\n        uses: actions/download-artifact@v3\n\n      - name: generate provenance\n        uses: slsa-framework/github-actions-demo@v0.1\n        with:\n          artifact_path: artifact/\n\n      - name: upload provenance\n        uses: actions/upload-artifact@v3\n        with:\n          path: build.provenance\n```"}
{"id": "63c49c7b517fc08c1eef6ca4", "level": "level5", "llm_response": "```yaml\nname: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment'\n        required: true\n        type: string\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n\n      - name: \u267b\ufe0f Restore caches\n        id: expo-caches\n        uses: ./.github/actions/expo-caches\n        with:\n          yarn-tools: true\n\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n        run: expotools commentator --payload \"${{ github.event.inputs.payload }}\"\n```", "answer": "```yaml name: Comments on GitHub issues\n\non:\n  workflow_dispatch:\n    inputs:\n      payload:\n        description: 'Serialized and escaped JSON describing what and where to comment.'\n        required: true\n\njobs:\n  comment:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: \ud83d\udc40 Checkout\n        uses: actions/checkout@v3\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n      - name: \u267b\ufe0f Restore caches\n        uses: ./.github/actions/expo-caches\n        id: expo-caches\n        with:\n          yarn-tools: 'true'\n      - name: \ud83d\udcac Comment on GitHub issues as github-actions bot\n        run: expotools commentator --payload \"${{ github.event.inputs.payload }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.EXPO_BOT_GITHUB_TOKEN }}\n```"}
{"id": "63c49983cbc73931bb18e1ee", "level": "level5", "llm_response": "```yaml\nname: Pre-commit check hooks\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  pre-commit-checks:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repo\n      uses: actions/checkout@v3\n\n    - name: Setup Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n\n    - name: Cache pip dependencies\n      id: cache-pip-dependencies\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}\n        restore-keys: ${{ runner.os }}-pip-\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install 'pre-commit>=2.10.1'\n\n    - name: Run pre-commit large file check\n      run: pre-commit run --all-files check-added-large-files\n\n    - name: Run pre-commit YAML check\n      run: pre-commit run --all-files check-yaml\n```", "answer": "```yaml name: Pre-commit check hooks\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n\n  pre-commit-checks:\n        \n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: 3.8\n\n      - name: Cache pip dependencies\n        id: cache-pip-dependencies\n        uses: actions/cache@v3\n        with:\n          # Ubuntu-specific, see\n          # https://github.com/actions/cache/blob/main/examples.md#python---pip\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n\n      - name: Install dependencies\n        run: |\n              python -m pip install --upgrade pip\n              pip install 'pre-commit>=2.10.1'\n        shell: bash\n\n      - name: Run pre-commit large file check\n        run: pre-commit run --all-files check-added-large-files\n\n      - name: Run pre-commit YAML check # for GitHub Actions configs\n        run: pre-commit run --all-files check-yaml\n```"}
{"id": "63c4a19b736e7f0ed8c7be71", "level": "level5", "llm_response": "```yaml\nname: unittest\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.7, 3.8, 3.9, 3.10]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Install nox\n        run: |\n          python -m pip install --upgrade setuptools pip wheel\n          python -m pip install nox\n\n      - name: Run unit tests\n        env:\n          COVERAGE_FILE: .coverage-${{ matrix.python }}\n        run: nox -s unit-${{ matrix.python }}\n\n      - name: Upload coverage results\n        uses: actions/upload-artifact@v3\n        with:\n          name: coverage-artifacts\n          path: .coverage-${{ matrix.python }}\n\n  cover:\n    runs-on: ubuntu-latest\n    needs: unit\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.10\n\n      - name: Install coverage\n        run: |\n          python -m pip install --upgrade setuptools pip wheel\n          python -m pip install coverage\n\n      - name: Download coverage results\n        uses: actions/download-artifact@v3\n        with:\n          name: coverage-artifacts\n          path: .coverage-results/\n\n      - name: Report coverage results\n        run: |\n          coverage combine .coverage-results/.coverage*\n          coverage report --show-missing --fail-under=99\n```", "answer": "```yaml on:\n  pull_request:\n    branches:\n      - main\nname: unittest\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: ['3.7', '3.8', '3.9', '3.10']\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install nox\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install nox\n    - name: Run unit tests\n      env:\n        COVERAGE_FILE: .coverage-${{ matrix.python }}\n      run: |\n        nox -s unit-${{ matrix.python }}\n    - name: Upload coverage results\n      uses: actions/upload-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-${{ matrix.python }}\n\n  cover:\n    runs-on: ubuntu-latest\n    needs:\n        - unit\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install coverage\n      run: |\n        python -m pip install --upgrade setuptools pip wheel\n        python -m pip install coverage\n    - name: Download coverage results\n      uses: actions/download-artifact@v3\n      with:\n        name: coverage-artifacts\n        path: .coverage-results/\n    - name: Report coverage results\n      run: |\n        coverage combine .coverage-results/.coverage*\n        coverage report --show-missing --fail-under=99\n```"}
{"id": "63c49a1e1899db58864eb16d", "level": "level5", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  tag:\n    branches: [ main ]\n  clone:\n    branches: [ main ]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [linux, darwin]\n        goarch: [amd64, arm64]\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: 0\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.19.2\n        check-latest: true\n        cache: true\n    - name: Set up Deno\n      uses: denoland/setup-deno@v1\n      with:\n        deno-version: v1.x\n    - name: Build\n      run: |\n        go generate ./...\n        go build -v -ldflags '-s -w -buildid=' -trimpath -o out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n    - name: Rename for Windows\n      if: matrix.goos == 'windows'\n      run: mv out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }} out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}.exe\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n        path: out/*\n\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    needs: build\n    if: startsWith(github.ref, 'refs/tags/')\n    steps:\n    - name: Download artifacts\n      uses: actions/download-artifact@v3\n      with:\n        name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n    - name: Show files\n      run: |\n        pwd\n        find\n    - name: Calc hash\n      run: |\n        mkdir -p out\n        cp ./murphysec-linux-amd64/murphysec-linux-amd64 ./out/\n        cp ./murphysec-windows-amd64/murphysec-windows-amd64.exe ./out/\n        cp ./murphysec-darwin-amd64/murphysec-darwin-amd64 ./out/\n        cp ./murphysec-darwin-arm64/murphysec-darwin-arm64 ./out\n        cp ./murphysec-linux-arm64/murphysec-linux-arm64 ./out\n        cd out\n        sha256sum * > sha256sum\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: out/*\n        draft: true\n```", "answer": "```yaml name: Build\n\non:\n  push:\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [ linux, darwin ]\n        goarch: [ amd64, arm64 ]\n        include:\n          - goos: windows\n            goarch: amd64\n    env:\n      GOOS: ${{ matrix.goos }}\n      GOARCH: ${{ matrix.goarch }}\n      CGO_ENABLED: '0'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n          check-latest: true\n          cache: true\n\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: v1.x\n\n\n      - name: Build\n        run: |\n          go generate ./...\n          go build -v -ldflags '-s -w -buildid=' -trimpath -o out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n\n      - name: Rename for Windows\n        if: matrix.goos == 'windows'\n        run: mv out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }} out/murphysec-${{ matrix.goos }}-${{ matrix.goarch }}.exe\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: murphysec-${{ matrix.goos }}-${{ matrix.goarch }}\n          path: out/*\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Show files\n        run: |\n          pwd\n          find\n\n      - name: Calc hash\n        run: |\n          mkdir -p out\n          cp ./murphysec-linux-amd64/murphysec-linux-amd64 ./out/\n          cp ./murphysec-windows-amd64/murphysec-windows-amd64.exe ./out/\n          cp ./murphysec-darwin-amd64/murphysec-darwin-amd64 ./out/\n          cp ./murphysec-darwin-arm64/murphysec-darwin-arm64 ./out\n          cp ./murphysec-linux-arm64/murphysec-linux-arm64 ./out\n          cd out\n          sha256sum * > sha256sum\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: out/*\n          draft: true\n```"}
{"id": "63c49c446fc19abdf9cc1f4b", "level": "level5", "llm_response": "```yaml\nname: Scala Snippet Checker\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [opened, edited]\n  issue_comment:\n    types: [created, edited]\n\njobs:\n  snippet-runner:\n    id: snippet-runner\n    runs-on: ubuntu-latest\n    timeout-minutes: 2\n    steps:\n      - name: Run Scala Snippet Checker\n        uses: virtuslab/scala-snippet-checker@main\n```", "answer": "```yaml name: Scala Snippet Checker\non:\n  issue_comment:\n    types: [created, edited]\n  issues:\n    types: [opened, edited]\n\njobs:\n  snippet-runner:\n    timeout-minutes: 2\n    runs-on: \"ubuntu-latest\"\n    steps:\n      - uses: virtuslab/scala-snippet-checker@main```"}
{"id": "63c49a88517fc08c1eeea9d6", "level": "level5", "llm_response": "```yaml\nname: Hackage, Cabal, Linux\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '45 2 * * *'\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n  GHC:\n    id: build10\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        ghc: [8.8, 9.0]\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Haskell env setup\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n      - name: Install additional system packages\n        run: sudo apt install libsodium-dev\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n      - name: Repository update\n        run: cabal v2-update\n      - name: Configuration freeze\n        run: cabal v2-freeze $cabalConfig --minimize-conflict-set\n      - name: Configuring GitHub cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.HaskEnvSetup.outputs.cabal-store }}\ndist-newstyle\n          key: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}\n          restore-keys: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-v2-\n      - name: Build\n        run: cabal v2-build $cabalConfig\n      - name: Tests\n        run: cabal v2-test $cabalConfig\n      - name: Haddock\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-haddock $cabalConfig\n      - name: Source distribution file\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-sdist\n```", "answer": "```yaml name: \"Hackage, Cabal, Linux\"\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: \"45 02 * * *\"\n\nenv:\n  cabalConfig: --enable-tests --enable-benchmarks --disable-optimization --enable-deterministic\n\njobs:\n\n  build10:\n    name: \"GHC\"\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ghc:\n          [ \"8.8\"\n          , \"9.0\"\n          ]\n    steps:\n\n      - name: \"Git checkout\"\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: \"Haskell env setup\"\n        id: HaskEnvSetup\n        uses: haskell/actions/setup@v2\n        with:\n          ghc-version: ${{ matrix.ghc }}\n\n      - name: \"Install additional system packages\"\n        run: sudo apt install libsodium-dev\n\n      #  2020-08-01: NOTE: Nix instantiate still needed for HNix tests\n      - name: \"Install Nix\"\n        uses: cachix/install-nix-action@v17\n\n      - name: \"Repository update\"\n        run: cabal v2-update\n\n      # Freeze is for the caching\n      - name: \"Configuration freeze\"\n        run: cabal v2-freeze $cabalConfig --minimize-conflict-set\n\n      - name: \"Configuring GitHub cache\"\n        uses: actions/cache@v3\n        with:\n          path: |\n            ${{ steps.HaskEnvSetup.outputs.cabal-store }}\n            dist-newstyle\n          key: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}\n          # 2022-04-22: `v2-` added to invalidate corrupted caches, can be removed after one week\n          restore-keys: ${{ runner.os }}-Cabal-${{ matrix.ghc }}-v2-\n\n      - name: \"Build\"\n        run: cabal v2-build $cabalConfig\n\n      - name: \"Tests\"\n        run: cabal v2-test $cabalConfig\n\n      - name: \"Haddock\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-haddock $cabalConfig\n\n      - name: \"Source distribution file\"\n        if: ${{ matrix.ghc == '9.0' }}\n        run: cabal v2-sdist\n```"}
{"id": "63c4975e1e33648075780971", "level": "level5", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - sample-extension-dotnet-minimalapi/**\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0.x'\n\n      - name: Build .NET Project\n        run: |\n          pushd './sample-extension-dotnet-minimalapi/TodoApi'\n          dotnet publish -c Release\n          popd\n\n      - name: Build the Docker image\n        run: |\n          pushd './sample-extension-dotnet-minimalapi/'\n          make build-image\n          popd\n\n      - name: Slack Notify\n        if: failure()\n        env:\n          SLACK_MESSAGE: \"Build Failed for ${{ env.SAMPLE_NAME }}\"\n          SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}\n        uses: rtCamp/action-slack-notify@v2.2.0\n```", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c4957f8052faa2781b232b", "level": "level5", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: release\non:\n  push:\n    tags:\n      - 'v*'\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n        with:\n          tag_name: ${{github.ref}}\n          release_name: Release ${{github.ref}}\n          draft: false\n          prerelease: false\n```"}
{"id": "63c49722cbc73931bb17e62d", "level": "level5", "llm_response": "```yaml\nname: Update Prettier\n\non:\n  push:\n    branches:\n      - 'renovate/prettier-*'\n\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v3\n      with:\n        cache: 'npm'\n        node-version: '16'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Fix linting issues\n      run: npm run lint:fix\n\n    - name: Create or update pull request\n      env:\n        GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n      uses: gr2m/create-or-update-pull-request-action@v1.x\n      with:\n        title: 'Prettier updated'\n        body: 'An update to prettier required updates to your code.'\n        branch: ${{ github.ref }}\n        commit-message: 'style: prettier'\n```", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49ced6fc19abdf9cc60fa", "level": "level5", "llm_response": "```yaml\nname: TagBot\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [commented]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    steps:\n      - name: TagBot\n        uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c499221e3364807578c18a", "level": "level5", "llm_response": "```yaml\nname: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup JS environment\n        run: ./.github/actions/setup-js-env\n      - name: Add Custom Problem Matcher\n        run: echo \"::add-matcher::.github/matchers/${{ github.job }}.json\"\n      - name: npm run markdownlint\n        run: npm run markdownlint\n```", "answer": "```yaml name: Markdown Lint\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n  pull_request:\n    paths:\n      - '*.json'\n      - '**/*.md'\n      - '.github/workflows/markdown-lint.yml'\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-js-env\n\n      - name: Add Custom Problem Matcher\n        run: |\n          echo \"::add-matcher::.github/matchers/${{ github.job }}.json\"\n\n      - name: npm run markdownlint\n        run: |\n          npm run markdownlint\n```"}
{"id": "63c497321899db58864d7fa4", "level": "level5", "llm_response": "```yaml\nname: Docs Preview\n\non:\n  workflow_run:\n    workflows: [CI]\n    types: [completed]\n\nenv:\n  CARGO_TERM_COLOR: always\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n\n    steps:\n    - name: Download artifact\n      uses: actions/github-script@v6\n      with:\n        script: |\n          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: context.payload.workflow_run.id,\n          });\n          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n            return artifact.name == \"docs\";\n          })[0];\n          let download = await github.rest.actions.downloadArtifact({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              artifact_id: matchArtifact.id,\n              archive_format: 'zip',\n          });\n          let fs = require('fs');\n          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs.zip`, Buffer.from(download.data));\n\n    - name: Unzip artifact\n      run: |\n        unzip docs.zip\n        tar -xf docs.tar.zstd\n\n    - name: Deploy PR preview\n      id: deploy_preview\n      uses: dswistowski/surge-sh-action@v1.0.1\n      with:\n        domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n        project: doc\n        login: ${{ secrets.SURGE_LOGIN }}\n        token: ${{ secrets.SURGE_TOKEN }}\n\n    - name: Comment PR preview URL\n      if: steps.deploy_preview.outcome == 'success'\n      env:\n        GITHUB_TOKEN: ${{ github.token }}\n      uses: Beakyn/gha-comment-pull-request@v1.0.2\n      with:\n        pull-request-number: ${{ github.event.workflow_run.pull_requests[0].number }}\n        description-message: |\n          ----\n          Preview: https://pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n```", "answer": "```yaml name: Docs Preview\n\nenv:\n  CARGO_TERM_COLOR: always\n\non:\n  workflow_run:\n    workflows: [CI]\n    types:\n      - completed\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0] != null\n    steps:\n      - name: Download artifact\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: context.payload.workflow_run.id,\n            });\n            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {\n              return artifact.name == \"docs\";\n            })[0];\n            let download = await github.rest.actions.downloadArtifact({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                artifact_id: matchArtifact.id,\n                archive_format: 'zip',\n            });\n            let fs = require('fs');\n            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs.zip`, Buffer.from(download.data));\n      \n      - name: Unzip artifact\n        run: |\n          unzip docs.zip\n          tar -xf docs.tar.zstd\n\n      - name: Deploy PR preview\n        continue-on-error: true\n        id: deploy_preview\n        uses: dswistowski/surge-sh-action@v1.0.1\n        with:\n          domain: pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n          project: doc\n          login: ${{ secrets.SURGE_LOGIN }}\n          token: ${{ secrets.SURGE_TOKEN }}\n\n      - name: Comment PR preview URL\n        if: steps.deploy_preview.outcome == 'success'\n        uses: Beakyn/gha-comment-pull-request@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        with:\n          pull-request-number: ${{ github.event.workflow_run.pull_requests[0].number }}\n          description-message: |\n            ----\n            Preview: https://pr-${{ github.event.workflow_run.pull_requests[0].number }}--ruma-docs.surge.sh\n```"}
{"id": "63c49c4d1e3364807579ff48", "level": "level5", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n    inputs:\n      event_type:\n        description: 'Event type'\n        required: true\n        type: string\n        default: 'build-pre-rel'\n\njobs:\n  build:\n    id: build\n    runs-on: windows-2022\n\n    steps:\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.17'\n\n    - name: Check out source code\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Build\n      env:\n        CERT_PWD: ${{ secrets.CERT_PWD }}\n      run: .\\doit.bat -ci\n\n    - name: Upload to spaces and s3\n      env:\n        AWS_SECRET: ${{ secrets.AWS_SECRET }}\n        AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\n        BB_SECRET: ${{ secrets.BB_SECRET }}\n        BB_ACCESS: ${{ secrets.BB_ACCESS }}\n        SPACES_KEY: ${{ secrets.SPACES_KEY }}\n        SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\n        WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\n        WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\n      run: .\\doit.bat -ci-upload\n```", "answer": "```yaml name: Build\r\non:\r\n  push:\r\n  pull_request:\r\n  repository_dispatch:\r\n    types: [build-pre-rel]\r\njobs:\r\n  build:\r\n    name: Build\r\n    runs-on: windows-2022\r\n    steps:\r\n      - name: Set up Go\r\n        uses: actions/setup-go@v3\r\n        with:\r\n          go-version: 1.17\r\n\r\n      - name: Check out source code\r\n        uses: actions/checkout@v3\r\n        with:\r\n          # needed to calc build number via git log --oneline\r\n          fetch-depth: 0\r\n\r\n      - name: Build\r\n        env:\r\n          CERT_PWD: ${{ secrets.CERT_PWD }}\r\n        run: .\\doit.bat -ci\r\n\r\n      # a separate step from -ci to make logs easier to read\r\n      - name: Upload to spaces and s3\r\n        env:\r\n          AWS_SECRET: ${{ secrets.AWS_SECRET }}\r\n          AWS_ACCESS: ${{ secrets.AWS_ACCESS }}\r\n          BB_SECRET: ${{ secrets.BB_SECRET }}\r\n          BB_ACCESS: ${{ secrets.BB_ACCESS }}\r\n          SPACES_KEY: ${{ secrets.SPACES_KEY }}\r\n          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}\r\n          WASABI_ACCESS: ${{ secrets.WASABI_ACCESS }}\r\n          WASABI_SECRET: ${{ secrets.WASABI_SECRET }}\r\n        run: .\\doit.bat -ci-upload\r\n```"}
{"id": "63c4976dcbc73931bb1805bb", "level": "level5", "llm_response": "```yaml\nname: Build & Test NStack\n\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n    branches:\n      - main\n      - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    outputs:\n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install GitVersion\n        uses: gittools/actions/gitversion/setup@v0.9.13\n        with:\n          versionSpec: 5.x\n\n      - name: Determine Version\n        id: gitversion\n        uses: gittools/actions/gitversion/execute@v0.9.13\n\n      - name: Display GitVersion outputs\n        run: |\n          echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n          echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: 6.0.x\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build Debug\n        run: |\n          dotnet-gitversion /updateprojectfiles\n          dotnet build --no-restore -c Debug\n\n      - name: Test\n        run: dotnet test --no-build --verbosity normal\n```", "answer": "```yaml name: Build & Test NStack\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    outputs: \n      Version: ${{ steps.gitversion.outputs.SemVer }}\n      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} \n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0 #fetch-depth is needed for GitVersion\n\n    #Install and calculate the new version with GitVersion  \n    - name: Install GitVersion\n      uses: gittools/actions/gitversion/setup@v0.9.13\n      with:\n        versionSpec: 5.x\n    - name: Determine Version\n      uses: gittools/actions/gitversion/execute@v0.9.13\n      id: gitversion # step id used as reference for output values\n    - name: Display GitVersion outputs\n      run: |\n        echo \"Version: ${{ steps.gitversion.outputs.SemVer }}\"\n        echo \"CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}\"\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: 6.0.x\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build Debug\n      run: |\n       dotnet-gitversion /updateprojectfiles \n       dotnet build --no-restore -c Debug\n\n    - name: Test\n      run: dotnet test --no-build --verbosity normal\n```"}
{"id": "63c49f2733b087f6bde6470b", "level": "level5", "llm_response": "```yaml\nname: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n        with:\n          fetch-depth: 1\n\n      - name: Check Markdown links\n        uses: gaurav-nelson/github-action-markdown-link-check@master\n```", "answer": "```yaml name: Check Markdown Links\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  markdown-link-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n      with:\n        fetch-depth: 1\n    - uses: gaurav-nelson/github-action-markdown-link-check@master\n```"}
{"id": "63c4a0901899db5886514714", "level": "level5", "llm_response": "```yaml\nname: test-coverage\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: test-coverage\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main```"}
{"id": "63c497cf6fc19abdf9ca5032", "level": "level5", "llm_response": "```yaml\nname: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: \"True\"\n\njobs:\n  check:\n    runs-on: ${{ matrix.platform }}\n    strategy:\n      matrix:\n        node-version: [18.x]\n        platform: [ubuntu-latest]\n      fail-fast: true\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{ matrix.node-version }}@${{ matrix.platform }}-build-${{ hashFiles('package.json') }}\n          restore-keys: ${{ matrix.node-version }}@${{ matrix.platform }}-build-\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Install & build\n        run: |\n          npm install\n          npm run build\n\n      - name: Lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run depcruise\n\n      - name: Test & coverage\n        run: npm run test:cover\n\n      - name: CodeClimate Test Coverage\n        env:\n          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n        uses: paambaati/codeclimate-action@v3.0.0\n```", "answer": "```yaml name: linting & test coverage - linux\n\non:\n  push:\n    branches:\n      - master\n      - develop\n  pull_request:\n\nenv:\n  CI: true\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  check:\n    strategy:\n      fail-fast: true\n      matrix:\n        node-version:\n          - 18.x\n        platform:\n          - ubuntu-latest\n\n    runs-on: ${{matrix.platform}}\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: ${{matrix.node-version}}@${{matrix.platform}}-build-${{hashFiles('package.json')}}\n          restore-keys: |\n            ${{matrix.node-version}}@${{matrix.platform}}-build-\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{matrix.node-version}}\n      - name: install & build\n        run: |\n          npm install\n          npm run build\n      - name: lint & forbidden dependency check\n        run: |\n          npm run lint\n          npm run depcruise\n      - run: npm run test:cover\n      - uses: paambaati/codeclimate-action@v3.0.0\n        env:\n          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_TEST_COVERAGE_ID }}\n```"}
{"id": "63c49e951e336480757ae6d2", "level": "level5", "llm_response": "```yaml\nname: build-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - releases/*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n      - name: Run build and tests\n        run: |\n          npm install\n          npm run all\n```", "answer": "```yaml name: \"build-test\"\non: # rebuild any PRs and main branch changes\n  pull_request:\n  push:\n    branches:\n      - master\n      - 'releases/*'\n\njobs:\n  build: # make sure build/ci work properly\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - run: |\n        npm install\n        npm run all\n```"}
{"id": "63c4a0956fc19abdf9cdd93b", "level": "level5", "llm_response": "```yaml\nname: first startup\n\non:\n  push:\n    paths-ignore:\n      - doc/**\n      - lib/galaxy_test/selenium/**\n  pull_request:\n    paths-ignore:\n      - doc/**\n      - lib/galaxy_test/selenium/**\n\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python-version: [3.7, 3.10]\n\n    defaults:\n      run:\n        shell: bash -l {0}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n      with:\n        path: galaxy root\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Get full Python version\n      id: full-python-version\n      run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n\n    - name: Cache pip dir\n      id: pip-cache\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pip\n        key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n\n    - name: Cache tox env\n      uses: actions/cache@v3\n      with:\n        path: .tox\n        key: tox-cache-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}-first-startup\n\n    - name: Cache Yarn\n      uses: mvdbeek/gha-yarn-cache@master\n      with:\n        yarn-lock-file: galaxy root/client/yarn.lock\n\n    - name: Install tox\n      run: pip install tox\n\n    - name: run tests\n      run: tox -e first_startup\n```", "answer": "```yaml name: first startup\non:\n  push:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\n  pull_request:\n    paths-ignore:\n      - 'doc/**'\n      - 'lib/galaxy_test/selenium/**'\nenv:\n  YARN_INSTALL_OPTS: --frozen-lockfile\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n\n  test:\n    name: Startup test\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7', '3.10']\n    defaults:\n      run:\n        shell: bash -l {0}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        id: pip-cache\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache tox env\n        uses: actions/cache@v3\n        with:\n          path: .tox\n          key: tox-cache-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}-first-startup\n      - uses: mvdbeek/gha-yarn-cache@master\n        with:\n          yarn-lock-file: 'galaxy root/client/yarn.lock'\n      - name: Install tox\n        run: pip install tox\n      - name: run tests\n        run: tox -e first_startup\n        working-directory: 'galaxy root'\n```"}
{"id": "63c494187843b612699fef52", "level": "level5", "llm_response": "```yaml\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Enable debug mode'\n        required: false\n        default: false\n        type: boolean\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'HariSekhon'\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Kubernetes-configs\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Codeowners\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - CODEOWNERS\n      - .github/CODEOWNERS\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 0 * * 1'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Validate CODEOWNERS\n    uses: HariSekhon/GitHub-Actions/.github/workflows/codeowners.yaml@master\n    with:\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c495678052faa2781b1912", "level": "level5", "llm_response": "```yaml\nname: External Trigger Scheduler\n\non:\n  schedule:\n    - cron: '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: 0\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-swag/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```", "answer": "```yaml name: External Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '50 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-swag/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-swag/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```"}
{"id": "63c49dcf517fc08c1eeff4cc", "level": "level5", "llm_response": "```yaml\nname: Check for semantic PR title\n\non:\n  pull_request:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n  pull_request_target:\n    types: [opened, reopened, edited, synchronize, ready_for_review]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - name: Semantic PR check\n        uses: amannn/action-semantic-pull-request@01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb\n        with:\n          types: 'feat,fix,docs,style,refactor,perf,test,build,ci,chore,revert'\n          scopes: 'aaa_server,agw,amf,ci,cloud,connectiond,control_proxy,csfb,ctraced,cwg,deps,deps-dev,directoryd,dp,eap,eap_aka,eap_sim,enodebd,envoy_controller,eventd,feg,feg_hello,feg_relay,health,lte,magmad,mme,mobilityd,monitord,nms,orc8r,pipelined,policydb,radiusd,redirectd,redis,s6a_proxy,s8_proxy,sctpd,session_proxy,sessiond,smf,smsd,state,subscriberdb,swx_proxy,td-agent-bit,upf'\n          requireScope: 'false'\n          wip: 'true'\n          validateSingleCommit: 'true'\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    steps:\n      - name: Set status\n        run: echo 'STATUS=:heavy_check_mark:' >> $GITHUB_ENV\n      - name: Find existing comment\n        id: fc\n        uses: peter-evans/find-comment@b657a70ff16d17651703a84bee1cb9ad9d2be2ea\n        with:\n          issue-number: ${{ github.event.number }}\n          body-includes: ${{ env.check-type }}\n      - name: Comment on PR\n        if: or(needs.check-semantic-pr.result == 'failure', steps.fc.outputs.comment-id != '')\n        uses: thollander/actions-comment-pull-request@686ab1cab89e0f715a44a0d04b9fdfdd4f33d751\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment_includes: ${{ env.check-type }}\n          message: ${{ env.STATUS }} The **${{ env.check-type }}** ended with status **${{ needs.check-semantic-pr.result }}**. ${{ env.check-documentation }}\n```", "answer": "```yaml # Copyright 2022 The Magma Authors.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Check for semantic PR title\"\n\non:\n  # Semantic PR module only works with pull_request_target\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - edited\n      - synchronize\n      - ready_for_review\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  check-reverted-pr:\n    runs-on: ubuntu-latest\n    env:\n      PR_TITLE: \"${{ github.event.pull_request.title }}\"\n    outputs:\n      is_reverted_pr: ${{ steps.reverted_pr_check.outputs.is_reverted_pr }}\n    steps:\n      - name: Check if PR is a Reverted PR\n        id: reverted_pr_check\n        uses: actions/github-script@47f7cf65b5ced0830a325f705cad64f2f58dddf7 # pin@v3.1.0\n        with:\n          script: |\n            if( process.env.PR_TITLE.startsWith('Revert') ) {\n              core.setOutput('is_reverted_pr', 'true');\n            }\n            else  {\n              core.setOutput('is_reverted_pr', 'false');\n            }\n\n  check-semantic-pr:\n    runs-on: ubuntu-latest\n    needs: check-reverted-pr\n    if: ${{ needs.check-reverted-pr.outputs.is_reverted_pr == 'false' }}\n    steps:\n      - uses: amannn/action-semantic-pull-request@01d5fd8a8ebb9aafe902c40c53f0f4744f7381eb # pin@v5.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            docs\n            style\n            refactor\n            perf\n            test\n            build\n            ci\n            chore\n            revert\n          # Configure which scopes are allowed.\n          scopes: |\n            aaa_server\n            agw\n            amf\n            ci\n            cloud\n            connectiond\n            control_proxy\n            csfb\n            ctraced\n            cwg\n            deps\n            deps-dev\n            directoryd\n            dp\n            eap\n            eap_aka\n            eap_sim\n            enodebd\n            envoy_controller\n            eventd\n            feg\n            feg_hello\n            feg_relay\n            health\n            lte\n            magmad\n            mme\n            mobilityd\n            monitord\n            nms\n            orc8r\n            pipelined\n            policydb\n            radiusd\n            redirectd\n            redis\n            s6a_proxy\n            s8_proxy\n            sctpd\n            session_proxy\n            sessiond\n            smf\n            smsd\n            state\n            subscriberdb\n            swx_proxy\n            td-agent-bit\n            upf\n          # Configure that a scope must always be provided.\n          requireScope: false\n          # For work-in-progress PRs you can typically use draft pull requests\n          # from GitHub. However, private repositories on the free plan don't have\n          # this option and therefore this action allows you to opt in to using the\n          # special \"[WIP]\" prefix to indicate this state. This will avoid the\n          # validation of the PR title and the pull request checks remain pending.\n          # Note that a second check will be reported if this is enabled.\n          wip: true\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub\n          # will suggest using that commit message instead of the PR title for the\n          # merge commit, and it's easy to commit this by mistake. Enable this option\n          # to also validate the commit message for one commit PRs.\n          validateSingleCommit: true\n\n  comment-on-pr:\n    runs-on: ubuntu-latest\n    needs: check-semantic-pr\n    if: always()\n    env:\n      STATUS: ':heavy_check_mark:'\n      check-type: Semantic PR check\n      check-documentation: See [instructions on formatting your commit and pull request titles](https://github.com/magma/magma/wiki/Contributing-Code#pull-request-and-commit-message-title-are-following-conventional-commits-format).\n    steps:\n      - if: needs.check-semantic-pr.result == 'failure'\n        run: echo 'STATUS=:x:' >> $GITHUB_ENV\n      - uses: peter-evans/find-comment@b657a70ff16d17651703a84bee1cb9ad9d2be2ea # pin@v2.0.1\n        id: fc\n        with:\n          issue-number: ${{ github.event.number }}\n          body-includes: ${{ env.check-type }}\n      - uses: thollander/actions-comment-pull-request@686ab1cab89e0f715a44a0d04b9fdfdd4f33d751 # pin@v1.4.1\n        if: >\n          (needs.check-semantic-pr.result == 'failure')\n          || (steps.fc.outputs.comment-id != '')\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          comment_includes: ${{ env.check-type }}\n          message: |\n            ${{ env.STATUS }} The **${{ env.check-type }}** ended with status **${{ needs.check-semantic-pr.result }}**. ${{ env.check-documentation }}\n```"}
{"id": "63c49b0d1842bc13d777adfa", "level": "level5", "llm_response": "```yaml\nname: pr2changelog\n\non:\n  pull_request:\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - created\n\npaths-ignore:\n  - 'CHANGELOG.md'\n\njobs:\n  changelog generator dry check:\n    id: dry_check\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: 'Fix;New;Improvement;Balance'\n          write_to_file: 'False'\n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.found_changes == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: 'Your PR has no registered changes in its description!'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  changelog generator:\n    id: after_merge\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.merged == true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: 'Fix;New;Improvement;Balance'\n          write_to_file: 'False'\n          api_secret_token: ${{ secrets.CHANGELOG_API_SECRET }}\n          api_url: 'https://changelog.unitystation.org/register-change'\n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.generated_changelog == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: 'Your PR was merged with no registered changes or there was a problem with the API caller.'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: pr2changelog\non:\n  pull_request_target:\n    paths-ignore:\n      - \"CHANGELOG.md\"\n    branches:\n      - develop\n    types:\n      - closed\n      - edited\n      - opened\n\njobs:\n  dry_check:\n    if: github.event.pull_request.merged == false\n\n    name: changelog generator dry check\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.found_changes == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR has no registered changes in its description!\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  after_merge:\n    if: github.event.pull_request.merged == true\n\n    name: changelog generator\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: pr2changelog\n        id: pr2changelog\n        uses: corp-0/pr2changelog@api-integration\n        with:\n          categories: Fix;New;Improvement;Balance\n          write_to_file: false\n          api_secret_token: ${{ secrets.CHANGELOG_API_SECRET }}\n          api_url: \"https://changelog.unitystation.org/register-change\"\n          \n      - name: Comment PR\n        if: ${{ steps.pr2changelog.outputs.generated_changelog == 0}}\n        uses: thollander/actions-comment-pull-request@v1\n        with:\n          message: |\n            Your PR was merged with no registered changes or there was a problem with the API caller.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c498cab008460c1df23749", "level": "level5", "llm_response": "```yaml\nname: xcodebuild\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches: \n      - '*'\n\njobs:\n  Xcode:\n    runs-on: macos-12\n    strategy:\n      matrix:\n        xcode_version: [13.3, 13.4.1]\n    \n    env:\n      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      \n      - name: Print Xcode version\n        run: xcodebuild -version\n      \n      - name: Run tests\n        run: xcodebuild -scheme sourcekitten -parallel-testing-enabled NO test -destination platform=macOS\n```", "answer": "```yaml name: xcodebuild\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: ['*']\n\njobs:\n  Xcode:\n    strategy:\n      matrix:\n        xcode_version: ['13.3', '13.4.1']\n    runs-on: macos-12\n    env:\n      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode_version }}.app\n    steps:\n      - uses: actions/checkout@v3\n      - run: xcodebuild -version\n      - run: xcodebuild -scheme sourcekitten -parallel-testing-enabled NO test -destination platform=macOS\n```"}
{"id": "63c4a11fb008460c1df58525", "level": "level5", "llm_response": "```yaml\nname: Conventional Commits\n\non:\n  pull_request:\n    branches: [ '*' ]\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Check conventional commits\n      uses: webiny/action-conventional-commits@v1.1.0\n```", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - '**'\n\njobs:\n  build:\n    name: Conventional Commits\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: webiny/action-conventional-commits@v1.1.0\n```"}
{"id": "63c49d8d517fc08c1eefd9b0", "level": "level5", "llm_response": "```yaml\nname: Go Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  unit:\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    strategy:\n      matrix:\n        os: [ubuntu, windows, macos]\n        go: [1.18.x, 1.19.x]\n    env:\n      COVERAGES: \"\"\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n      with:\n        submodules: recursive\n    - name: Setup Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: ${{ matrix.go }}\n    - name: Go information\n      run: |\n        go version\n        go env\n    - name: Use msys2 on windows\n      if: ${{ matrix.os == 'windows' }}\n      run: echo \"C:/msys64/usr/bin\" >> $GITHUB_PATH\n    - name: Run repo-specific setup\n      if: hashFiles('./.github/actions/go-test-setup') != ''\n      run: ./.github/actions/go-test-setup\n    - name: Run tests\n      uses: protocol/multiple-go-modules@v1.2\n      with:\n        run: go test -v -shuffle=on -coverprofile=module-coverage.txt -coverpkg=./... ./...\n    - name: Run tests (32 bit)\n      if: ${{ matrix.os != 'macos' }}\n      env:\n        GOARCH: 386\n      run: |\n        export \"PATH=${{ env.PATH_386 }}:$PATH\"\n        go test -v -shuffle=on ./...\n    - name: Run tests with race detector\n      if: ${{ matrix.os == 'ubuntu' }}\n      run: go test -v -race ./...\n    - name: Collect coverage files\n      run: |\n        echo \"COVERAGES=$(find . -type f -name 'module-coverage.txt' | tr -s '\\n' ',' | sed 's/,$//')\" >> $GITHUB_ENV\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378\n      with:\n        files: ${{ env.COVERAGES }}\n        env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Test\n\njobs:\n  unit:\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ \"ubuntu\", \"windows\", \"macos\" ]\n        go: [ \"1.18.x\", \"1.19.x\" ]\n    env:\n      COVERAGES: \"\"\n    runs-on: ${{ format('{0}-latest', matrix.os) }}\n    name: ${{ matrix.os }} (go ${{ matrix.go }})\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Go information\n        run: |\n          go version\n          go env\n      - name: Use msys2 on windows\n        if: ${{ matrix.os == 'windows' }}\n        shell: bash\n        # The executable for msys2 is also called bash.cmd\n        #   https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#shells\n        # If we prepend its location to the PATH\n        #   subsequent 'shell: bash' steps will use msys2 instead of gitbash\n        run: echo \"C:/msys64/usr/bin\" >> $GITHUB_PATH\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-test-setup\n        if: hashFiles('./.github/actions/go-test-setup') != ''\n      - name: Run tests\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          # Use -coverpkg=./..., so that we include cross-package coverage.\n          # If package ./A imports ./B, and ./A's tests also cover ./B,\n          # this means ./B's coverage will be significantly higher than 0%.\n          run: go test -v -shuffle=on -coverprofile=module-coverage.txt -coverpkg=./... ./...\n      - name: Run tests (32 bit)\n        if: ${{ matrix.os != 'macos' }} # can't run 32 bit tests on OSX.\n        uses: protocol/multiple-go-modules@v1.2\n        env:\n          GOARCH: 386\n        with:\n          run: |\n            export \"PATH=${{ env.PATH_386 }}:$PATH\"\n            go test -v -shuffle=on ./...\n      - name: Run tests with race detector\n        if: ${{ matrix.os == 'ubuntu' }} # speed things up. Windows and OSX VMs are slow\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go test -v -race ./...\n      - name: Collect coverage files\n        shell: bash\n        run: echo \"COVERAGES=$(find . -type f -name 'module-coverage.txt' | tr -s '\\n' ',' | sed 's/,$//')\" >> $GITHUB_ENV\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378 # v3.1.0\n        with:\n          files: '${{ env.COVERAGES }}'\n          env_vars: OS=${{ matrix.os }}, GO=${{ matrix.go }}\n```"}
{"id": "63c494cd8052faa2781ad6e7", "level": "level5", "llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    id: build\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Install deps (Linux)\n        if: matrix.os == 'ubuntu-latest'\n        run: |\n          sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev\n\n      - name: Install deps (macOS)\n        if: matrix.os == 'macos-latest'\n        run: |\n          brew install readline vim libffi openssl make\n          echo \"$(brew --prefix)/opt/make/libexec/gnubin\" >> $GITHUB_PATH\n\n      - name: Build\n        run: make release\n\n      - name: Test\n        run: make test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v1\n        with:\n          name: ${{ format( 'tpl-{0}', matrix.os) }}\n          path: tpl\n\n  wasm:\n    id: wasm\n    runs-on: ubuntu-latest\n    env:\n      WASI_VERSION: 12\n      BINARYEN_VERSION: 109\n      WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Set environment (1/3)\n        run: |\n          echo \"WASI_VERSION_FULL=${WASI_VERSION}.0\" >> $GITHUB_ENV\n          echo \"RELEASE_VERSION=`git tag --points-at HEAD | sed 's/^v//'`\" >> $GITHUB_ENV\n\n      - name: Set environment (2/3)\n        run: echo \"WASI_SDK_PATH=`pwd`/wasi-sdk-${{ env.WASI_VERSION_FULL }}\" >> $GITHUB_ENV\n\n      - name: Set environment (3/3)\n        run: echo \"WASI_CC=${{ env.WASI_SDK_PATH }}/bin/clang --sysroot=${{ env.WASI_SDK_PATH }}/share/wasi-sysroot\" >> $GITHUB_ENV\n\n      - name: Add Homebrew to $PATH\n        run: echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH\n\n      - name: Install WASI SDK\n        run: |\n          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${{ env.WASI_VERSION }}/wasi-sdk-${{ env.WASI_VERSION_FULL }}-linux.tar.gz\n          tar xvf wasi-sdk-${{ env.WASI_VERSION_FULL }}-linux.tar.gz\n\n      - name: Install Binaryen\n        run: brew install binaryen\n\n      - name: Setup Wasmer\n        uses: wasmerio/setup-wasmer@v1\n\n      - name: Build\n        run: |\n          make clean\n          make wasm\n\n      - name: Test\n        run: |\n          echo 'wasmer --dir . tpl.wasm -- $@' > tpl\n          chmod +x tpl\n          make test\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v1\n        with:\n          name: tpl.wasm\n          path: tpl.wasm\n\n      - name: Publish on WAPM\n        if: env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != ''\n        run: |\n          sed -i \"s/__RELEASE_VERSION__/$RELEASE_VERSION/\" wapm.toml\n          wapm login $WAPM_REGISTRY_TOKEN\n          wapm publish\n```", "answer": "```yaml   name: Build\n\n  on:\n    create:\n      tags:\n    push:\n      branches:\n        - main\n    pull_request:\n\n  jobs:\n    build:\n      name: Native\n      runs-on: ${{ matrix.os }}\n      strategy:\n        fail-fast: false\n        matrix:\n          os:\n            - ubuntu-latest\n            - macos-latest\n      steps:\n        - uses: actions/checkout@v1\n        - name: Install deps (Linux)\n          run: |\n            sudo apt-get install libreadline-dev xxd libffi-dev libssl-dev\n          if: matrix.os == 'ubuntu-latest'\n        - name: Install deps (macOS)\n          run: |\n            brew install readline vim libffi openssl make\n            echo \"$(brew --prefix)/opt/make/libexec/gnubin\" >> $GITHUB_PATH\n          if: matrix.os == 'macos-latest'\n        - name: Build\n          run: make release\n        - name: Test\n          run: make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: ${{ format( 'tpl-{0}', matrix.os) }}\n            path: tpl\n\n    # Roughly matches https://github.com/WebAssembly/wasi-sdk#install\n    wasm:\n      name: WebAssembly\n      runs-on: ubuntu-latest\n      env:\n        WASI_VERSION: 12\n        BINARYEN_VERSION: 109\n        WAPM_REGISTRY_TOKEN: ${{ secrets.WAPM_REGISTRY_TOKEN }}\n      steps:\n        - uses: actions/checkout@v1\n        - name: Set environment (1/3)\n          run: |\n            echo \"WASI_VERSION_FULL=${WASI_VERSION}.0\" >> $GITHUB_ENV\n            echo \"RELEASE_VERSION=`git tag --points-at HEAD | sed 's/^v//'`\" >> $GITHUB_ENV\n        - name: Set environment (2/3)\n          run: |\n            echo \"WASI_SDK_PATH=`pwd`/wasi-sdk-${WASI_VERSION_FULL}\" >> $GITHUB_ENV\n        - name: Set environment (3/3)\n          run: |\n            echo \"WASI_CC=${WASI_SDK_PATH}/bin/clang --sysroot=${WASI_SDK_PATH}/share/wasi-sysroot\" >> $GITHUB_ENV\n        - name: Add Homebrew to $PATH\n          run: echo \"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin\" >> $GITHUB_PATH\n        - name: Install WASI SDK\n          run: |\n            wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-${WASI_VERSION}/wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n            tar xvf wasi-sdk-${WASI_VERSION_FULL}-linux.tar.gz\n        - name: Install Binaryen\n          run: brew install binaryen\n        - name: Setup Wasmer\n          uses: wasmerio/setup-wasmer@v1\n        - name: Build\n          run: |\n            make clean\n            make wasm\n        - name: Test\n          run: |\n            echo 'wasmer --dir . tpl.wasm -- $@' > tpl\n            chmod +x tpl\n            make test\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v1\n          with:\n            name: tpl.wasm\n            path: tpl.wasm\n        - name: Publish on WAPM\n          run: |\n            sed -i \"s/__RELEASE_VERSION__/$RELEASE_VERSION/\" wapm.toml\n            wapm login $WAPM_REGISTRY_TOKEN\n            wapm publish\n          if: ${{ env.WAPM_REGISTRY_TOKEN != '' && env.RELEASE_VERSION != '' }}\n```"}
{"id": "63c49a0b1842bc13d7774640", "level": "level5", "llm_response": "```yaml\nname: auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Auto-merge pull requests\n      uses: ahmadnassri/action-dependabot-auto-merge@v2\n      with:\n        github-token: ${{ secrets.AUTO_MERGE_TOKEN }}\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          # auto-merge rules are in /.github/auto-merge.yml\n          github-token: ${{ secrets.AUTO_MERGE_TOKEN }}```"}
{"id": "63c49e4bb008460c1df46891", "level": "level5", "llm_response": "```yaml\nname: Build PR for MyPet\n\non:\n  pull_request:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: ''\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n          distribution: 'microsoft'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/install_dependencies.sh') }}\n          restore-keys: ${{ runner.os }}-maven-\n\n      - name: Install Dependencies\n        run: ./install_dependencies.sh\n\n      - name: Compile\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: mvn --batch-mode package -DGIT_COMMIT=${{ github.sha }} -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}\n```", "answer": "```yaml name: Build PR for MyPet\n\non:\n  pull_request:\n    branches: [ master ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    env:\n      BUILD_NUMBER: 1\n      JAR_FILE_NAME: \"\"\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 17\n        uses: actions/setup-java@v3\n        with:\n          java-version: 17\n          distribution: 'microsoft'\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/install_dependencies.sh') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Install Dependencies\n        run: ./install_dependencies.sh\n\n      - name: Compile\n        run: mvn --batch-mode package -DGIT_COMMIT=${{ github.sha }} -DBUILD_NUMBER=${{ env.BUILD_NUMBER }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e901e336480757ae4de", "level": "level5", "llm_response": "```yaml\nname: deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n      - name: Build WebAssembly\n        uses: jetli/wasm-pack-action@v0.3.0\n        with:\n          version: latest\n      - name: Build\n        run: |\n          cp .env.example .env\n          npm run install\n          npm run build\n      - name: Package\n        run: |\n          tar czvf target/conduit-wasm.tar.gz crates/conduit-wasm/dist\n          zip -r target/conduit-wasm.zip crates/conduit-wasm/dist\n          shasum -a 256 target/conduit-wasm.tar.gz > target/conduit-wasm.tar.gz.sha256\n          shasum -a 256 target/conduit-wasm.zip > target/conduit-wasm.zip.sha256\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        uses: softprops/action-gh-release@v1\n        with:\n          files: |\n            target/conduit-wasm.tar.gz\n            target/conduit-wasm.tar.gz.sha256\n            target/conduit-wasm.zip\n            target/conduit-wasm.zip.sha256\n```", "answer": "```yaml name: deploy\n\non:\n  push:\n    tags: \n      - \"v*.*.*\"\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - uses: jetli/wasm-pack-action@v0.3.0\n      with:\n        # Optional version of wasm-pack to install(eg. '0.9.1', 'latest')\n        version: 'latest'\n    - name: Build\n      run: |\n        cp .env.example .env\n        npm run install\n        npm run build\n    - name: Package\n      shell: bash\n      run: |\n        tar czvf target/conduit-wasm.tar.gz crates/conduit-wasm/dist\n        zip -r target/conduit-wasm.zip crates/conduit-wasm/dist\n        shasum -a 256 target/conduit-wasm.tar.gz > target/conduit-wasm.tar.gz.sha256\n        shasum -a 256 target/conduit-wasm.zip > target/conduit-wasm.zip.sha256\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        files: |\n          target/conduit-wasm.tar.gz\n          target/conduit-wasm.tar.gz.sha256\n          target/conduit-wasm.zip\n          target/conduit-wasm.zip.sha256\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c493ba7843b612699fd3ef", "level": "level5", "llm_response": "```yaml\nname: Windows\n\non:\n  push:\n    paths-ignore:\n      - README.md\n      - doc/**\n  pull_request:\n    paths-ignore:\n      - README.md\n      - doc/**\n\njobs:\n  vs2022:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Create build directory\n        run: cmake -E make_directory build\n      - name: Configure with Visual Studio 2022\n        run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON\n      - name: Build with Visual Studio 2022\n        run: cmake --build . --config ${{ matrix.build_type }}\n      - name: Run tests with Visual Studio 2022\n        run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2022-clang:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Create build directory\n        run: cmake -E make_directory build\n      - name: Configure with Visual Studio 2022 and ClangCL\n        run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -T ClangCL -DJSONCONS_BUILD_TESTS=On\n      - name: Build with Visual Studio 2022 and ClangCL\n        run: cmake --build . --config ${{ matrix.build_type }}\n      - name: Run tests with Visual Studio 2022 and ClangCL\n        run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019:\n    runs-on: windows-2019\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Create build directory\n        run: cmake -E make_directory build\n      - name: Configure with Visual Studio 2019\n        run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -DJSONCONS_BUILD_TESTS=On\n      - name: Build with Visual Studio 2019\n        run: cmake --build . --config ${{ matrix.build_type }}\n      - name: Run tests with Visual Studio 2019\n        run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019-clang:\n    runs-on: windows-2019\n    strategy:\n      matrix:\n        build_type: [Debug, Release]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Create build directory\n        run: cmake -E make_directory build\n      - name: Configure with Visual Studio 2019 and ClangCL\n        run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -T ClangCL -DJSONCONS_BUILD_TESTS=On\n      - name: Build with Visual Studio 2019 and ClangCL\n        run: cmake --build . --config ${{ matrix.build_type }}\n      - name: Run tests with Visual Studio 2019 and ClangCL\n        run: ctest -C ${{ matrix.build_type }} --output-on-failure\n```", "answer": "```yaml name: Windows\n\non:\n  push:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'README.md'\n      - 'doc/**'\n\njobs:\n  vs2022:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -DJSONCONS_BUILD_TESTS=On -DCMAKE_CXX_STANDARD=17 -DCMAKE_CXX_STANDARD_REQUIRED=ON\n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2022-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 17 2022\" -T ClangCL -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n  vs2019-clang:\n    strategy:\n      fail-fast: false\n      matrix:\n        build_type: [Debug, Release]\n\n    runs-on: windows-2019\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - run: cmake -E make_directory build\n\n    - shell: bash\n      working-directory: build/\n      run: cmake $GITHUB_WORKSPACE -G \"Visual Studio 16 2019\" -T ClangCL  -DJSONCONS_BUILD_TESTS=On \n\n    - working-directory: build/\n      run: cmake --build . --config ${{ matrix.build_type }}\n\n    - working-directory: build/\n      run: ctest -C ${{ matrix.build_type }} --output-on-failure\n\n```"}
{"id": "63c4a18b736e7f0ed8c7b8f2", "level": "level5", "llm_response": "```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - 'release/*'\n\njobs:\n  create-github-release:\n    id: create-github-release\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    environment: Release\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      \n      - name: Create GitHub Release and Git tag\n        uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49aa5b008460c1df2f2ad", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [javascript, python]\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ develop ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ develop ]\n  schedule:\n    - cron: '16 18 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript', 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49d3433b087f6bde57d7c", "level": "level5", "llm_response": "```yaml\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - .github/workflows/*\n      - !.github/workflows/debian_8.yaml\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - .gitconfig*\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Enable debug mode'\n        required: false\n        type: boolean\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'HariSekhon'\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Debian 8\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/debian_8.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: debian:8\n      caches: apt pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c4991f33b087f6bde3d444", "level": "level5", "llm_response": "```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/stale.yaml@main\n```"}
{"id": "63c5c656c779603593c9f31a", "level": "level5", "llm_response": "```yaml\nname: Dependencies check\n\non:\n  workflow_dispatch:\n    inputs:\n      head_sha:\n        description: 'Head SHA'\n        required: true\n        type: string\n      base_sha:\n        description: 'Base SHA'\n        required: true\n        type: string\n      target_branch:\n        description: 'Target branch'\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: ${{ secrets.ACTIONS_STEP_DEBUG }}\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    id: validate_submodules_and_ls_dependencies\n    runs-on: ubuntu-latest\n    steps:\n      - name: Debug\n        uses: hmarr/debug-action@v2.1.0\n\n      - name: Validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const {repo, owner} = context.repo;\n            const head_sha = '${{ inputs.head_sha }}';\n            const base_sha = '${{ inputs.base_sha }}';\n            const targetBranch = '${{ inputs.target_branch }}'.replace('refs/heads/', '');\n            const strictCheckBranchPrefixes = ['ls-release/'];\n\n            let submodules = [\n                {owner: 'heartexlabs', repo: 'label-studio-frontend'},\n                {owner: 'heartexlabs', repo: 'dm2'}\n            ];\n\n            async function getLSSubmoduleVersions(sha) {\n                let {data: lsTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: sha\n                });\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'label_studio' && e.type === 'tree').sha\n                })).data;\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'frontend' && e.type === 'tree').sha\n                })).data;\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dist' && e.type === 'tree').sha\n                })).data;\n                const {data: lsDMTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dm' && e.type === 'tree').sha\n                });\n                const {data: dmfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsDMTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                });\n                const dmVersionContent = Buffer.from(dmfVersion.content, dmfVersion.encoding).toString(\"utf8\");\n                const matchDM = dmVersionContent.match('\"commit\": \"(.*)\",');\n                const {data: lsLSFTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'lsf' && e.type === 'tree').sha\n                });\n                const {data: lsfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsLSFTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                });\n                const lsfVersionContent = Buffer.from(lsfVersion.content, lsfVersion.encoding).toString(\"utf8\");\n                const matchLSF = lsfVersionContent.match('\"commit\": \"(.*)\",');\n                return {\n                    'label-studio-frontend': matchLSF[1],\n                    'dm2': matchDM[1],\n                };\n            }\n\n            let base_sha_redacted = base_sha;\n            if (base_sha_redacted === '0000000000000000000000000000000000000000') {\n                console.log(`Branch creation event. Using head_sha (${head_sha}) parent as base_sha`);\n                const {data: commit} = await github.rest.git.getCommit({\n                    owner,\n                    repo,\n                    commit_sha: head_sha,\n                });\n                console.log(commit.parents);\n                base_sha_redacted = commit.parents[0].sha;\n            }\n\n            const baseVersions = await getLSSubmoduleVersions(base_sha_redacted);\n            console.log(`before: ${base_sha_redacted}`);\n            console.log(baseVersions);\n\n            const headVersions = await getLSSubmoduleVersions(head_sha);\n            console.log(`after: ${head_sha}`);\n            console.log(headVersions);\n\n            const strictCheck = strictCheckBranchPrefixes.some(e => targetBranch.startsWith(e));\n            console.log(`Strict check: ${strictCheck}`);\n\n            let failed = [];\n            for (let submodule of submodules) {\n                if (baseVersions[submodule.repo] === headVersions[submodule.repo] && !strictCheck) {\n                    console.log(`${submodule.repo}: Is not changed`);\n                    continue;\n                }\n\n                const {data: submoduleRepo} = await github.rest.repos.get({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                });\n                const submoduleBranch = targetBranch === 'develop' ? submoduleRepo.default_branch : targetBranch;\n                const {data: listCommits} = await github.rest.repos.listCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    per_page: 100,\n                    sha: submoduleBranch\n                });\n\n                const commits = listCommits.map(e => e.sha);\n\n                const headCommitNumber = commits.indexOf(headVersions[submodule.repo]);\n                if (headCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${headVersions[submodule.repo]} from PR is not found in submodule ${submoduleBranch} branch`);\n                    failed.push(submodule.repo);\n                    continue;\n                }\n                if (strictCheck && headCommitNumber !== 0) {\n                    console.log(`${submodule.repo}: For the release branch, submodule should be pointed to the latest commit in submodule corresponding release branch which is ${listCommits[0].html_url}`);\n                    failed.push(submodule.repo);\n                    continue;\n                }\n\n                const baseCommitNumber = commits.indexOf(baseVersions[submodule.repo]);\n                if (baseCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${baseVersions[submodule.repo]} from ${targetBranch} is not found in submodule ${submoduleBranch} branch`);\n                    continue;\n                }\n\n                const {data: compare} = await github.rest.repos.compareCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    base: baseVersions[submodule.repo],\n                    head: headVersions[submodule.repo],\n                });\n                console.log(`${submodule.repo}: ${headVersions[submodule.repo]} is ${compare.ahead_by} ahead and ${compare.behind_by} behind ${baseVersions[submodule.repo]}: ${compare.html_url}`);\n                if (compare.behind_by > 0) {\n                    failed.push(submodule.repo);\n                    continue;\n                }\n            }\n\n            if (failed.length !== 0) {\n                throw `Versions for ${failed.toString()} are downgraded or not found`;\n            }\n```", "answer": "```yaml name: \"Dependencies check\"\n\non:\n  workflow_call:\n    inputs:\n      head_sha:\n        required: true\n        type: string\n      base_sha:\n        required: true\n        type: string\n      target_branch:\n        required: true\n        type: string\n\nenv:\n  ACTIONS_STEP_DEBUG: '${{ secrets.ACTIONS_STEP_DEBUG }}'\n\njobs:\n  validate_submodules_and_ls_dependencies:\n    name: \"Submodules/deps\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: hmarr/debug-action@v2.1.0\n\n      - name: Validate\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const {repo, owner} = context.repo;\n            const head_sha = '${{ inputs.head_sha }}'\n            const base_sha = '${{ inputs.base_sha }}'\n            const targetBranch = '${{ inputs.target_branch }}'.replace('refs/heads/', '')\n            const strictCheckBranchPrefixes = ['ls-release/']\n\n            let submodules = [\n                {owner: 'heartexlabs', repo: 'label-studio-frontend'},\n                {owner: 'heartexlabs', repo: 'dm2'}\n            ]\n            \n            \n            async function getLSSubmoduleVersions(sha) {\n                let {data: lsTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: sha\n                })\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'label_studio' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'frontend' && e.type === 'tree').sha\n                })).data\n                lsTreeData = (await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dist' && e.type === 'tree').sha\n                })).data\n                const {data: lsDMTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'dm' && e.type === 'tree').sha\n                })\n                const {data: dmfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsDMTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const dmVersionContent = Buffer.from(dmfVersion.content, dmfVersion.encoding).toString(\"utf8\")\n                const matchDM = dmVersionContent.match('\"commit\": \"(.*)\",')\n                const {data: lsLSFTreeData} = await github.rest.git.getTree({\n                    owner,\n                    repo,\n                    tree_sha: lsTreeData.tree.find(e => e.path === 'lsf' && e.type === 'tree').sha\n                })\n                const {data: lsfVersion} = await github.rest.git.getBlob({\n                    owner,\n                    repo,\n                    file_sha: lsLSFTreeData.tree.find(e => e.path === 'version.json' && e.type === 'blob').sha\n                })\n                const lsfVersionContent = Buffer.from(lsfVersion.content, lsfVersion.encoding).toString(\"utf8\")\n                const matchLSF = lsfVersionContent.match('\"commit\": \"(.*)\",')\n                return {\n                    'label-studio-frontend': matchLSF[1],\n                    'dm2': matchDM[1],\n                }\n            }\n            \n            let base_sha_redacted = base_sha\n            if (base_sha_redacted === '0000000000000000000000000000000000000000') {\n                console.log(`Branch creation event. Using head_sha (${head_sha}) parent as base_sha`)\n                const {data: commit} = await github.rest.git.getCommit({\n                    owner,\n                    repo,\n                    commit_sha: head_sha,\n                });\n                console.log(commit.parents)\n                base_sha_redacted = commit.parents[0].sha\n            }\n            \n            const baseVersions = await getLSSubmoduleVersions(base_sha_redacted)\n            console.log(`before: ${base_sha_redacted}`)\n            console.log(baseVersions)\n            \n            const headVersions = await getLSSubmoduleVersions(head_sha)\n            console.log(`after: ${head_sha}`)\n            console.log(headVersions)\n            \n            const strictCheck = strictCheckBranchPrefixes.some(e => targetBranch.startsWith(e))\n            console.log(`Strict check: ${strictCheck}`)\n            \n            let failed = []\n            for (let submodule of submodules) {\n                if (baseVersions[submodule.repo] === headVersions[submodule.repo] && !strictCheck) {\n                    console.log(`${submodule.repo}: Is not changed`)\n                    continue\n                }\n            \n                const {data: submoduleRepo} = await github.rest.repos.get({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                });\n                const submoduleBranch = targetBranch === 'develop' ? submoduleRepo.default_branch : targetBranch\n                const {data: listCommits} = await github.rest.repos.listCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    per_page: 100,\n                    sha: submoduleBranch\n                });\n            \n                const commits = listCommits.map(e => e.sha)\n            \n                const headCommitNumber = commits.indexOf(headVersions[submodule.repo])\n                if (headCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${headVersions[submodule.repo]} from PR is not found in submodule ${submoduleBranch} branch`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n                if (strictCheck && headCommitNumber !== 0) {\n                    console.log(`${submodule.repo}: For the release branch, submodule should be pointed to the latest commit in submodule corresponding release branch which is ${listCommits[0].html_url}`)\n                    failed.push(submodule.repo)\n                    continue\n                }\n            \n                const baseCommitNumber = commits.indexOf(baseVersions[submodule.repo])\n                if (baseCommitNumber === -1) {\n                    console.log(`${submodule.repo}: ${baseVersions[submodule.repo]} from ${targetBranch} is not found in submodule ${submoduleBranch} branch`)\n                    continue\n                }\n            \n                const {data: compare} = await github.rest.repos.compareCommits({\n                    owner: submodule.owner,\n                    repo: submodule.repo,\n                    base: baseVersions[submodule.repo],\n                    head: headVersions[submodule.repo],\n                });\n                console.log(`${submodule.repo}: ${headVersions[submodule.repo]} is ${compare.ahead_by} ahead and ${compare.behind_by} behind ${baseVersions[submodule.repo]}: ${compare.html_url}`)\n                if (compare.behind_by > 0) {\n                    failed.push(submodule.repo)\n                    continue\n                }\n            }\n            \n            if (failed.length !== 0) {\n                throw `Versions for ${failed.toString()} are downgraded or not found`;\n            }\n```"}
{"id": "63c4a0196fc19abdf9cda745", "level": "level5", "llm_response": "```yaml\nname: Announce Release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    id: bump-aur-package\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n          name: id_ed25519\n          known_hosts: |\n            aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN\n            aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=\n            aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=\n\n      - name: Bump AUR Package\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/aur-usql.XXXXXX)\n          export REPO_PATH=$WORKDIR/aur-usql\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $AUR_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'kenshaw@gmail.com'\n          sed -i \"s/pkgver=.*$/pkgver=${VER#v}/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/sha256sums=.*$/sha256sums=('$SHA256SUM')/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgrel=.*$/pkgrel=1/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgver =.*$/pkgver = ${VER#v}/\" $REPO_PATH/.SRCINFO\n          sed -i \"s%source =.*$%source = usql-${VER#v}.tar.gz::https://github.com/xo/usql/archive/${VER}.tar.gz%\" $REPO_PATH/.SRCINFO\n          sed -i \"s/sha256sums =.*$/sha256sums = $SHA256SUM/\" $REPO_PATH/.SRCINFO\n          sed -i \"s/pkgrel =.*$/pkgrel = 1/\" $REPO_PATH/.SRCINFO\n          git -C $REPO_PATH add PKGBUILD .SRCINFO\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  bump-homebrew-formula:\n    id: bump-homebrew-formula\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/homebrew-xo.XXXXXX)\n          export REPO_PATH=$WORKDIR/homebrew-xo\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $HOMEBREW_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'ken@usql.app'\n          sed -i \"s%url \\\".*$%url \\\"https://github.com/xo/usql/archive/${VER}.tar.gz\\\"%\" $REPO_PATH/Formula/usql.rb\n          sed -i \"s/sha256 \\\".*$/sha256 \\\"$SHA256SUM\\\"/\" $REPO_PATH/Formula/usql.rb\n          git -C $REPO_PATH add Formula/usql.rb\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  announce-discord:\n    id: announce-discord\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Announce Discord\n        run: |\n          curl \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"username\": \"usql\", \"content\": \"> *usql ${{ github.ref_name }}* has been released!\\n\\nGet it here: https://github.com/xo/usql/releases/${{ github.ref_name }}\"}' \\\n            ${{ secrets.DISCORD_WEBHOOK_URL }}\n```", "answer": "```yaml name: Announce Release\n\non:\n  release:\n    types: [published]\n\nenv:\n  VER: ${{ github.ref_name }}\n  HOMEBREW_REPO: https://kenshaw:${{ secrets.HOMEBREW_TOKEN }}@github.com/xo/homebrew-xo.git\n  AUR_REPO: aur@aur.archlinux.org:usql.git\n\njobs:\n  bump-aur-package:\n    name: Bump AUR Package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add AUR SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.AUR_SSH_KEY }}\n          name: id_ed25519\n          known_hosts: |\n            aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN\n            aur.archlinux.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKF9vAFWdgm9Bi8uc+tYRBmXASBb5cB5iZsB7LOWWFeBrLp3r14w0/9S2vozjgqY5sJLDPONWoTTaVTbhe3vwO8CBKZTEt1AcWxuXNlRnk9FliR1/eNB9uz/7y1R0+c1Md+P98AJJSJWKN12nqIDIhjl2S1vOUvm7FNY43fU2knIhEbHybhwWeg+0wxpKwcAd/JeL5i92Uv03MYftOToUijd1pqyVFdJvQFhqD4v3M157jxS5FTOBrccAEjT+zYmFyD8WvKUa9vUclRddNllmBJdy4NyLB8SvVZULUPrP3QOlmzemeKracTlVOUG1wsDbxknF1BwSCU7CmU6UFP90kpWIyz66bP0bl67QAvlIc52Yix7pKJPbw85+zykvnfl2mdROsaT8p8R9nwCdFsBc9IiD0NhPEHcyHRwB8fokXTajk2QnGhL+zP5KnkmXnyQYOCUYo3EKMXIlVOVbPDgRYYT/XqvBuzq5S9rrU70KoI/S5lDnFfx/+lPLdtcnnEPk=\n            aur.archlinux.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLMiLrP8pVi5BFX2i3vepSUnpedeiewE5XptnUnau+ZoeUOPkpoCgZZuYfpaIQfhhJJI5qgnjJmr4hyJbe/zxow=\n      - name: Bump AUR Package\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/aur-usql.XXXXXX)\n          export REPO_PATH=$WORKDIR/aur-usql\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $AUR_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'kenshaw@gmail.com'\n          sed -i \"s/pkgver=.*$/pkgver=${VER#v}/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/sha256sums=.*$/sha256sums=('$SHA256SUM')/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgrel=.*$/pkgrel=1/\" $REPO_PATH/PKGBUILD\n          sed -i \"s/pkgver =.*$/pkgver = ${VER#v}/\" $REPO_PATH/.SRCINFO\n          sed -i \"s%source =.*$%source = usql-${VER#v}.tar.gz::https://github.com/xo/usql/archive/${VER}.tar.gz%\" $REPO_PATH/.SRCINFO\n          sed -i \"s/sha256sums =.*$/sha256sums = $SHA256SUM/\" $REPO_PATH/.SRCINFO\n          sed -i \"s/pkgrel =.*$/pkgrel = 1/\" $REPO_PATH/.SRCINFO\n          git -C $REPO_PATH add PKGBUILD .SRCINFO\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  bump-homebrew-formula:\n    name: Bump Homebrew Formula\n    runs-on: ubuntu-latest\n    steps:\n      - name: Bump Homebrew Formula\n        run: |\n          export WORKDIR=$(mktemp -d /tmp/homebrew-xo.XXXXXX)\n          export REPO_PATH=$WORKDIR/homebrew-xo\n          wget -O $WORKDIR/archive.tar.gz https://github.com/xo/usql/archive/${VER}.tar.gz\n          export SHA256SUM=$(sha256sum $WORKDIR/archive.tar.gz|awk '{print $1}')\n          export CHANGELOG=$(curl -H \"Accept: application/vnd.github+json\" https://api.github.com/repos/xo/usql/releases/tags/$VER|jq .body|sed -e 's/\\\\r//g')\n          git clone $HOMEBREW_REPO $REPO_PATH\n          git -C $REPO_PATH config user.name 'Kenneth Shaw'\n          git -C $REPO_PATH config user.email 'ken@usql.app'\n          sed -i \"s%url \\\".*$%url \\\"https://github.com/xo/usql/archive/${VER}.tar.gz\\\"%\" $REPO_PATH/Formula/usql.rb\n          sed -i \"s/sha256 \\\".*$/sha256 \\\"$SHA256SUM\\\"/\" $REPO_PATH/Formula/usql.rb\n          git -C $REPO_PATH add Formula/usql.rb\n          git -C $REPO_PATH commit -m \"$(printf %b \"Update usql version to ${VER}\\n\\n${CHANGELOG:1:-1}\")\"\n          git -C $REPO_PATH show -C\n          git -C $REPO_PATH push origin master\n\n  announce-discord:\n    name: Announce Discord\n    runs-on: ubuntu-latest\n    steps:\n      - name: Announce Discord\n        run: |\n          curl \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"username\": \"usql\", \"content\": \"> *usql ${{ github.ref_name }}* has been released!\\n\\nGet it here: https://github.com/xo/usql/releases/${{ github.ref_name }}\"}' \\\n            ${{ secrets.DISCORD_WEBHOOK_URL }}\n```"}
{"id": "63c49994517fc08c1eee4a14", "level": "level5", "llm_response": "```yaml\nname: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Install Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.18.x\n\n    - name: Checkout source\n      uses: actions/checkout@v3\n\n    - name: golangci-lint\n      uses: golangci/golangci-lint-action@v3\n```", "answer": "```yaml on: [push, pull_request]\nname: Lint\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n```"}
{"id": "63c49aab1e33648075795bea", "level": "level5", "llm_response": "```yaml\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: string\n\njobs:\n  failed-workflow:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - name: Rerun a workflow\n        uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda\n        with:\n          retries: 2\n          retry-exempt-status-codes: 418\n          script: |\n            const workflow_run = await github.rest.actions.getWorkflowRun({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n            });\n\n            // Only rerun after the first run attempt.\n            if ( workflow_run.data.run_attempt > 1 ) {\n              return;\n            }\n\n            const rerun = await github.rest.actions.reRunWorkflowFailedJobs({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n              enable_debug_logging: true\n            });\n```", "answer": "```yaml ##\n# Performs follow-up tasks when a workflow fails or is cancelled.\n##\nname: Failed Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      run_id:\n        description: 'ID of the GitHub Action workflow run to rerun'\n        required: true\n        type: 'string'\n\njobs:\n  # Attempts to rerun a workflow.\n  #\n  # Performs the following steps:\n  # - Retrieves the workflow run that dispatched this workflow.\n  # - Restarts all failed jobs when the workflow fails or is cancelled for the first time.\n  failed-workflow:\n    name: Rerun a workflow\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Rerun a workflow\n        uses: actions/github-script@100527700e8b29ca817ac0e0dfbfc5e8ff38edda # v6.3.2\n        with:\n          retries: 2\n          retry-exempt-status-codes: 418\n          script: |\n            const workflow_run = await github.rest.actions.getWorkflowRun({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n            });\n\n            // Only rerun after the first run attempt.\n            if ( workflow_run.data.run_attempt > 1 ) {\n              return;\n            }\n\n            const rerun = await github.rest.actions.reRunWorkflowFailedJobs({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              run_id: ${{ inputs.run_id }},\n              enable_debug_logging: true\n            });\n```"}
{"id": "63c4a013b008460c1df518fc", "level": "level5", "llm_response": "```yaml\nname: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '5 0 * * *'\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths:\n      - 'test/internet/**'\n  push:\n    branches:\n      - main\n      - canary\n      - 'v[0-9]+.x-staging'\n      - 'v[0-9]+.x'\n    paths:\n      - 'test/internet/**'\n\npermissions:\n  contents: read\n\nenv:\n  PYTHON_VERSION: 3.11\n  FLAKY_TESTS: keep_retrying\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test-internet:\n    runs-on: ubuntu-latest\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    steps:\n      - name: ''\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: False\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: npx envinfo\n      - name: Build\n        run: make build-ci -j2 V=1 CONFIG_FLAGS=\"--error-on-warn\"\n      - name: Test Internet\n        run: make test-internet -j2 V=1;\n```", "answer": "```yaml name: Test internet\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 5 0 * * *\n\n  pull_request:\n    types: [opened, synchronize, reopened, ready_for_review]\n    paths: [test/internet/**]\n  push:\n    branches:\n      - main\n      - canary\n      - v[0-9]+.x-staging\n      - v[0-9]+.x\n    paths: [test/internet/**]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  PYTHON_VERSION: '3.11'\n  FLAKY_TESTS: keep_retrying\n\npermissions:\n  contents: read\n\njobs:\n  test-internet:\n    if: github.repository == 'nodejs/node' || github.event_name != 'schedule'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Set up Python ${{ env.PYTHON_VERSION }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      - name: Environment Information\n        run: npx envinfo\n      - name: Build\n        run: make build-ci -j2 V=1 CONFIG_FLAGS=\"--error-on-warn\"\n      - name: Test Internet\n        run: make test-internet -j2 V=1;\n```"}
{"id": "63c4a0c133b087f6bde6e92c", "level": "level5", "llm_response": "```yaml\nname: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - android/src/**/*.kt\n      - **.kts\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Download and install ktlint\n        run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.46.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n\n      - name: run ktlint\n        run: ktlint --reporter=checkstyle,output=build/ktlint-report.xml\n        if: ${{ failure() }}\n\n      - name: Upload ktlint report\n        uses: yutailang0119/action-ktlint@v3\n        with:\n          report-path: build/*.xml\n```", "answer": "```yaml name: CI / Ktlint Android\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/ci-ktlint-android.yml\n      - 'android/src/**/*.kt'\n      - '**.kts'\n\njobs:\n  ktlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.46.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n      - name: run ktlint\n        run: |\n          ktlint --reporter=checkstyle,output=build/ktlint-report.xml\n        continue-on-error: true\n      - uses: yutailang0119/action-ktlint@v3\n        with:\n          report-path: build/*.xml # Support glob patterns by https://www.npmjs.com/package/@actions/glob\n        continue-on-error: false # If annotations contain error of severity, action-ktlint exit 1.```"}
{"id": "63c49f8d33b087f6bde66e80", "level": "level5", "llm_response": "```yaml\nname: Create Jira issue\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  jira:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.label.name == 'to-jira' }}\n    steps:\n      - name: Call composite action\n        uses: hazelcast/github-jira-tool-action@v3\n        with:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n          TARGET_JIRA_PROJECT: API\n          JIRA_LABEL: Go\n          ISSUE_TYPE: Bug\n```", "answer": "```yaml name: Create Jira issue\n\non:\n  issues:\n    types: labeled\n\njobs:\n  jira:\n    if: ${{ github.event.label.name == 'to-jira' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call composite action\n        uses: hazelcast/github-jira-tool-action@v3\n        with:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n          TARGET_JIRA_PROJECT: API\n          JIRA_LABEL: Go\n          ISSUE_TYPE: Bug\n```"}
{"id": "63c4968b6fc19abdf9c9ca77", "level": "level5", "llm_response": "```yaml\nname: Manual Build\n\non:\n  workflow_dispatch:\n    inputs:\n      buildRef:\n        description: 'Ref to build'\n        required: true\n        default: 'refs/heads/main'\n      mvnOpts:\n        description: 'Maven options'\n        required: true\n        default: '--fail-at-end'\n      goals:\n        description: 'Maven goals'\n        required: true\n        default: 'verify'\n      utOpts:\n        description: 'Unit test options'\n        required: true\n        default: '-Dtest=noTest'\n      itOpts:\n        description: 'Integration test options'\n        required: true\n        default: '-Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2'\n      addOpts:\n        description: 'Additional options'\n        required: true\n        default: '-Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat'\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    id: mvn\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.inputs.buildRef }}\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n\n      - name: Cache local maven repository\n        uses: actions/cache@v3\n        with:\n          path: ~/.m2/repository/\n          !~/.m2/repository/org/apache/accumulo\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n          restore-keys: ${{ runner.os }}-m2\n\n      - name: Show the first log message\n        run: git log -n1\n\n      - name: Override DNS to fix IP address for hostname\n        run: |\n          ip -br addr\n          echo \"'hostname -i' shows '$(hostname -i)'\"\n          echo \"'hostname -I' shows '$(hostname -I)'\"\n          hostname_short=$(hostname -s)\n          hostname_long=$(hostname -f)\n          if ! grep -q $hostname_short /etc/hosts; then\n            actual_ip=$(ip -4 addr show dev eth0 | grep -o 'inet [0-9.]*' | cut -f2 -d ' ')\n            echo \"Setting $hostname_long / $hostname_short to $actual_ip in /etc/hosts\"\n            echo \"$actual_ip $hostname_long $hostname_short\" | sudo tee -a /etc/hosts\n            ip -br addr\n            echo \"'hostname -i' shows '$(hostname -i)'\"\n            echo \"'hostname -I' shows '$(hostname -I)'\"\n          fi\n\n      - name: Build with Maven\n        env:\n          MAVEN_OPTS: -Djansi.force=true\n        run: mvn -B -V -e -ntp \"-Dstyle.color=always\" ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n        max-parallel: 1\n        max-time: 345\n\n      - name: Upload unit test results\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: surefire-reports\n          path: ./**/target/surefire-reports/\n          if-no-files-found: ignore\n\n      - name: Upload integration test results\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: failsafe-reports\n          path: ./**/target/failsafe-reports/\n          if-no-files-found: ignore\n\n      - name: Upload mini test logs\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: mini-tests-logs\n          path: ./**/target/**/mini-tests/**/logs/\n          if-no-files-found: ignore\n```", "answer": "```yaml #\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\n\n# This workflow will build a Java project with Maven\n# See also:\n#   https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n#   https://docs.github.com/en/actions/reference/events-that-trigger-workflows#manual-events\n\nname: Manual Build\n\non:\n  workflow_dispatch:\n    # these inputs break down the Maven command-line, somewhat arbitrarily, so\n    # the UI when starting a run is easier to use\n    inputs:\n      buildRef:\n        description: Ref to build\n        required: true\n        default: refs/heads/main\n      mvnOpts:\n        description: Maven options\n        required: true\n        default: --fail-at-end\n      goals:\n        description: Maven goals\n        required: true\n        default: verify\n      utOpts:\n        description: Unit test options\n        required: true\n        default: -Dtest=noTest\n      itOpts:\n        description: Integration test options\n        required: true\n        default: -Dit.test=noIt -Dfailsafe.rerunFailingTestsCount=2\n      addOpts:\n        description: Additional options\n        required: true\n        default: -Dspotbugs.skip -Dcheckstyle.skip -DskipFormat -DverifyFormat\n\npermissions:\n  contents: read\n\njobs:\n  mvn:\n    name: mvn (triggered by ${{ github.event.sender.login }})\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.inputs.buildRef }}\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: adopt\n        java-version: 11\n    - name: Cache local maven repository\n      uses: actions/cache@v3\n      with:\n        path: |\n          ~/.m2/repository/\n          !~/.m2/repository/org/apache/accumulo\n        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n        restore-keys: ${{ runner.os }}-m2\n    - name: Show the first log message\n      run: git log -n1\n    - name: Override DNS to fix IP address for hostname\n      run: |\n        ip -br addr\n        echo \"'hostname -i' shows '$(hostname -i)'\"\n        echo \"'hostname -I' shows '$(hostname -I)'\"\n        hostname_short=$(hostname -s)\n        hostname_long=$(hostname -f)\n        if ! grep -q $hostname_short /etc/hosts; then\n          actual_ip=$(ip -4 addr show dev eth0 | grep -o 'inet [0-9.]*' | cut -f2 -d ' ')\n          echo \"Setting $hostname_long / $hostname_short to $actual_ip in /etc/hosts\"\n          echo \"$actual_ip $hostname_long $hostname_short\" | sudo tee -a /etc/hosts\n          ip -br addr\n          echo \"'hostname -i' shows '$(hostname -i)'\"\n          echo \"'hostname -I' shows '$(hostname -I)'\"\n        fi\n    - name: Build with Maven\n      timeout-minutes: 345\n      run: mvn -B -V -e -ntp \"-Dstyle.color=always\" ${{ github.event.inputs.mvnOpts }} ${{ github.event.inputs.goals }} ${{ github.event.inputs.utOpts }} ${{ github.event.inputs.itOpts }} ${{ github.event.inputs.addOpts }}\n      env:\n        MAVEN_OPTS: -Djansi.force=true\n    - name: Upload unit test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: surefire-reports\n        path: ./**/target/surefire-reports/\n        if-no-files-found: ignore\n    - name: Upload integration test results\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: failsafe-reports\n        path: ./**/target/failsafe-reports/\n        if-no-files-found: ignore\n    - name: Upload mini test logs\n      if: ${{ failure() }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: mini-tests-logs\n        path: ./**/target/**/mini-tests/**/logs/\n        if-no-files-found: ignore\n\n```"}
{"id": "63c49937cbc73931bb18c2b2", "level": "level5", "llm_response": "```yaml\nname: check_shell_scripts\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Install shellcheck\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y shellcheck\n\n    - name: display shellcheck version\n      run: shellcheck --version\n\n    - name: run check_shell_scripts\n      run: ./scripts/checkShellScripts.sh\n```", "answer": "```yaml ---\nname: check_shell_scripts\n\n# yamllint disable-line rule:truthy\non: [push]\n\njobs:\n  run_shellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Install shellcheck\n        run: |\n          sudo apt-get install shellcheck\n\n      - name: display shellcheck version\n        run: |\n          shellcheck --version\n\n      - name: run check_shell_scripts\n        run: |\n          ./scripts/checkShellScripts.sh\n...\n```"}
{"id": "63c4995333b087f6bde3e963", "level": "level5", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        sanitizer: [address, undefined, memory]\n\n    steps:\n    - name: Build Fuzzers (${{ matrix.sanitizer }})\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: flac\n        language: c++\n        sanitizer: ${{ matrix.sanitizer }}\n\n    - name: Run Fuzzers (${{ matrix.sanitizer }})\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: flac\n        language: c++\n        fuzz-seconds: 3600\n        sanitizer: ${{ matrix.sanitizer }}\n\n    - name: Upload Crash\n      if: failure() && steps.build.outcome == 'success'\n      uses: actions/upload-artifact@v1\n      with:\n        name: ${{ matrix.sanitizer }}-artifacts\n        path: ./out/artifacts\n```", "answer": "```yaml name: CIFuzz\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - 1.3.x\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   strategy:\n     fail-fast: false\n     matrix:\n       sanitizer: [address, undefined, memory]\n   steps:\n   - name: Build Fuzzers (${{ matrix.sanitizer }})\n     id: build\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Run Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'flac'\n       language: c++\n       fuzz-seconds: 3600\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Upload Crash\n     uses: actions/upload-artifact@v1\n     if: failure() && steps.build.outcome == 'success'\n     with:\n       name: ${{ matrix.sanitizer }}-artifacts\n       path: ./out/artifacts\n\n```"}
{"id": "63c5c62aac4f2678a5bd79f0", "level": "level5", "llm_response": "```yaml\nname: Mark or close stale issues and PRs\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 20 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578\n        with:\n          repo-token: ${{ secrets.BOT_TOKEN }}\n          days-before-issue-stale: 180\n          days-before-pr-stale: 180\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-message: 'This issue has been automatically marked as stale because it has not had recent activity. It will be closed in two weeks if no further activity occurs. Thank you for your contributions.'\n          stale-pr-message: 'This pull request has been automatically marked as stale because it has not had recent activity. It will be closed in two weeks if no further activity occurs. Thank you for your contributions.'\n          close-issue-message: 'This issue has been automatically closed due to inactivity. Please re-open if this still requires investigation.'\n          close-pr-message: 'This pull request has been automatically closed due to inactivity. Please re-open if these changes are still required.'\n          stale-pr-label: stale\n          stale-issue-label: stale\n          exempt-issue-labels: keepalive\n          exempt-pr-labels: keepalive\n```", "answer": "```yaml ---\nname: \"Mark or close stale issues and PRs\"\non:\n  workflow_dispatch:\n  schedule:\n    # Run the stalebot every day at 8pm UTC\n    - cron: \"00 20 * * *\"\n\njobs:\n  stale:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for stale issues and PRs\n        uses: actions/stale@5ebf00ea0e4c1561e9b43a292ed34424fb1d4578 # tag=v6\n        with:\n          repo-token: ${{ secrets.BOT_TOKEN }}\n          days-before-issue-stale: 180\n          days-before-pr-stale: 180\n          days-before-close: 14\n          days-before-pr-close: 14\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had recent activity.\n            It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          stale-pr-message: >\n            This pull request has been automatically marked as stale because it has not had\n            recent activity. It will be closed in two weeks if no further activity occurs.\n            Thank you for your contributions.\n          close-issue-message: >\n            This issue has been automatically closed due to inactivity.\n            Please re-open if this still requires investigation.\n          close-pr-message: >\n            This pull request has been automatically closed due to inactivity.\n            Please re-open if these changes are still required.\n          stale-pr-label: \"stale\"\n          stale-issue-label: \"stale\"\n          exempt-issue-labels: \"keepalive\"\n          exempt-pr-labels: \"keepalive\"\n```"}
{"id": "63c49eef6fc19abdf9cd2cf5", "level": "level5", "llm_response": "```yaml\nname: Make lens list\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - data/db/**\n  workflow_dispatch:\n\npermissions:\n  contents: write\n\nconcurrency:\n  group: 'pages'\n  cancel-in-progress: true\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: ''\n      uses: actions/checkout@v3\n\n    - name: Create lens list from master sources\n      run: ./tools/lenslist/show_lensfun_coverage.py -t -o lenslist.html ./data/db\n\n    - name: Checkout website repo\n      uses: actions/checkout@v3\n      with:\n        repository: lensfun/lensfun.github.io\n        path: website-repo\n        token: ${{ secrets.PUSH_SECRET }}\n\n    - name: Commit updated lens list to website repo\n      env:\n        REPO_KEY: ${{ secrets.PUSH_SECRET }}\n        USERNAME: github-actions[bot]\n      run: |\n        cp website-repo/_includes/lenslist-develop-header.md website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        dt=`date '+%Y-%m-%d'`\n        echo -en \"\\nThis list was generated on $dt from current Lensfun sources. Your Lensfun version may be older, resulting in less coverage.\\n\" >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cat lenslist.html >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cd website-repo/\n        git add _posts/lenslist/2999-12-31-Lenslist-master.md\n        git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Update master lens list from GitHub Actions\"\n        git push https://$USERNAME:$REPO_KEY@github.com/lensfun/lensfun.github.io.git\n```", "answer": "```yaml # Create the up-to-date lens list to be published on the GitHub pages website\n\nname: Make lens list\n\non:\n  push:\n    branches: \n        - master\n    paths:\n       - 'data/db/**'\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\n# Allow write/commit to checked out repos\npermissions:\n  contents: write\n\njobs:\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Create lens list from master sources\n      run: ./tools/lenslist/show_lensfun_coverage.py -t -o lenslist.html ./data/db\n\n    - name: Checkout website repo\n      uses: actions/checkout@v3\n      with:\n        repository: lensfun/lensfun.github.io\n        path: website-repo\n        token: ${{secrets.PUSH_SECRET}}\n\n    - name: Commit updated lens list to website repo\n      run: |\n        cp website-repo/_includes/lenslist-develop-header.md website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        dt=`date '+%Y-%m-%d'`\n        echo -en \"\\nThis list was generated on $dt from current Lensfun sources. Your Lensfun version may be older, resulting in less coverage.\\n\" >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cat lenslist.html >> website-repo/_posts/lenslist/2999-12-31-Lenslist-master.md\n        cd website-repo/\n        git add _posts/lenslist/2999-12-31-Lenslist-master.md\n        git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Update master lens list from GitHub Actions\"\n        git push https://$USERNAME:$REPO_KEY@github.com/lensfun/lensfun.github.io.git\n      env:\n        REPO_KEY: ${{secrets.PUSH_SECRET}}\n        USERNAME: github-actions[bot]\n        \n```"}
{"id": "63c49c8b6fc19abdf9cc3a67", "level": "level5", "llm_response": "```yaml\nname: Test Functional (Local Chrome proxyless)\n\non:\n  workflow_dispatch:\n    inputs:\n      sha:\n        description: 'SHA of the commit to test'\n        required: true\n        default: 'master'\n      merged_sha:\n        description: 'SHA of the merge commit'\n        required: false\n      deploy_run_id:\n        description: 'ID of the deployment workspace run with artifacts'\n        required: true\n\njobs:\n  test:\n    id: test\n    runs-on: ubuntu-latest\n    env:\n      RETRY_FAILED_TESTS: 'True'\n    environment: test-functional\n    steps:\n      - name: Set commit status to pending\n        uses: actions/github-script@v3\n        with:\n          script: |\n            await github.repos.createCommitStatus({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              sha: context.payload.inputs.sha,\n              context: context.workflow,\n              state: 'pending',\n              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n            });\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Set commit status to pending (artifacts)\n        uses: actions/github-script@v3\n        with:\n          script: |\n            const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            let artifacts = {};\n\n            for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {\n              try {\n                ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({\n                repo: context.repo.repo,\n                owner: context.repo.owner,\n                run_id: context.payload.inputs.deploy_run_id\n              }));\n              }\n              catch (e) {\n                console.log(e);\n              }\n            }\n\n            const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === 'npm').archive_download_url);\n            require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, 'package.zip'), Buffer.from(artifact))\n      - name: Unzip and install dependencies\n        run: |\n          unzip package.zip\n          tar --strip-components=1 -xzf testcafe-*.tgz\n      - name: Get npm cache directory\n        id: npm-cache-dir\n        run: echo \"::set-output name=dir::$(npm config get cache)\"\n      - name: Cache npm dependencies\n        uses: actions/cache@v2\n        with:\n          path: ${{ steps.npm-cache-dir.outputs.dir }}\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Install dependencies\n        run: npm ci\n      - name: Run tests\n        run: npx gulp test-functional-local-proxyless-run --steps-as-tasks\n        timeout-minutes: 60\n      - name: Set commit status to success\n        uses: actions/github-script@v3\n        if: success() || cancelled()\n        with:\n          script: |\n            await github.repos.createCommitStatus({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              sha: context.payload.inputs.sha,\n              context: context.workflow,\n              state: 'success',\n              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n            });\n      - name: Set commit status to failure\n        uses: actions/github-script@v3\n        if: failure() || cancelled()\n        with:\n          script: |\n            await github.repos.createCommitStatus({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              sha: context.payload.inputs.sha,\n              context: context.workflow,\n              state: 'failure',\n              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n            });\n```", "answer": "```yaml name: Test Functional (Local Chrome proxyless)\n\non:\n    workflow_dispatch:\n        inputs:\n            sha:\n                desciption: 'The test commit SHA or ref'\n                required: true\n                default: 'master'\n            merged_sha:\n                description: 'The merge commit SHA'\n            deploy_run_id:\n                description: 'The ID of a deployment workspace run with artifacts'\njobs:\n    test:\n        runs-on: ubuntu-latest\n        environment: test-functional\n        env:\n            RETRY_FAILED_TESTS: true\n        steps:\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'pending',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/checkout@v2\n              with:\n                  ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}\n\n            - uses: actions/setup-node@v2\n              with:\n                  node-version: 14\n\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n                      let artifacts = {};\n\n                      for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {\n                        try {\n                          ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({\n                          repo: context.repo.repo,\n                          owner: context.repo.owner,\n                          run_id: context.payload.inputs.deploy_run_id\n                        }));\n                        }\n                        catch (e) {\n                          console.log(e);\n                        }\n                      }\n\n                      const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === 'npm').archive_download_url);\n                      require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, 'package.zip'), Buffer.from(artifact))\n\n            - run: |\n                  unzip package.zip\n                  tar --strip-components=1 -xzf testcafe-*.tgz\n\n            - name: Get npm cache directory\n              id: npm-cache-dir\n              run: |\n                  echo \"::set-output name=dir::$(npm config get cache)\"\n            - uses: actions/cache@v2\n              with:\n                  path: ${{ steps.npm-cache-dir.outputs.dir }}\n                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n                  restore-keys: |\n                      ${{ runner.os }}-node-\n            - run: npm ci\n            - run: npx gulp test-functional-local-proxyless-run --steps-as-tasks\n              timeout-minutes: 60\n            - uses: actions/github-script@v3\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'success',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n            - uses: actions/github-script@v3\n              if: failure() || cancelled()\n              with:\n                  script: |\n                      await github.repos.createCommitStatus({\n                        owner: context.repo.owner,\n                        repo: context.repo.repo,\n                        sha: context.payload.inputs.sha,\n                        context: context.workflow,\n                        state: 'failure',\n                        target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`\n                      });\n```"}
{"id": "63c49dec1842bc13d778d6ad", "level": "level5", "llm_response": "```yaml\nname: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to publish'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        ports:\n          - 9200:9200\n          - 9300:9300\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: \"true\"\n          xpack.security.enabled: \"false\"\n          ES_JAVA_OPTS: \"-Xms1024m -Xmx1024m\"\n\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        ports:\n          - 26500:26500\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: \"false\"\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.17.0\n          cache: npm\n\n      - name: Install\n        run: npm ci --ignore-scripts\n\n      - name: Run integration tests\n        run: npm run test:integration\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Run local integration tests\n        run: npm run test:local\n\n      - name: Build\n        run: npm run build\n\n      - name: Set version\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          npm version ${{ inputs.version }} -m \"Publish v%s\"\n\n      - name: Publish to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --access=public\n\n      - name: Push changes\n        run: git push --follow-tags\n```", "answer": "```yaml name: Tag and publish a new version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version'\n        required: true\n\njobs:\n  tag-and-publish:\n    runs-on: ubuntu-latest\n    services:\n      elasticsearch:\n        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5\n        env:\n          discovery.type: single-node\n          cluster.name: docker-cluster\n          bootstrap.memory_lock: true\n          xpack.security.enabled: false\n          ES_JAVA_OPTS: -Xms1024m -Xmx1024m\n        ports:\n          - 9200:9200\n          - 9300:9300\n      zeebe:\n        image: camunda/zeebe:8.1.0-alpha4\n        env:\n          JAVA_TOOL_OPTIONS: \"-Xms512m -Xmx512m\"\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME: io.camunda.zeebe.exporter.ElasticsearchExporter\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL: http://elasticsearch:9200\n          ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE: 1\n          ZEEBE_BROKER_BACKPRESSURE_ENABLED: false\n        ports:\n          - 26500:26500\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.17.0\n          cache: 'npm'\n      - name: Install\n        run: npm ci --ignore-scripts\n      - name: Run integration tests\n        run: npm run test:integration\n      - name: Run tests\n        run: npm run test\n      - name: Run local integration tests\n        run: npm run test:local\n      - name: Build\n        run: npm run build\n      - name: Set version\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email 'github-actions[bot]@users.noreply.github.com'\n          npm version ${{ inputs.version }} -m \"Publish v%s\"\n      - name: Publish to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --access=public\n      - name: Push changes\n        run: git push --follow-tags\n```"}
{"id": "63c49e53517fc08c1ef02a7b", "level": "level5", "llm_response": "```yaml\nname: Close stale issues and PRs\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n      - name: Close stale issues and PRs\n        uses: actions/stale@v5.1.1\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-message: 'This PR is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-label: 'no-pr-activity'\n          days-before-stale: 14\n          days-before-close: 5\n```", "answer": "```yaml name: 'Close stale issues and PRs'\non:\n  schedule:\n    - cron: '30 1 * * *'\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5.1.1\n        with:\n          stale-issue-message: 'This issue is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-message: 'This PR is stale because it has been open 14 days with no activity. Remove stale label or comment or this will be closed in 5 days.'\n          stale-pr-label: 'no-pr-activity'\n          days-before-stale: 14\n          days-before-close: 5\n```"}
{"id": "63c4a0851842bc13d779e225", "level": "level5", "llm_response": "```yaml\nname: Release https://lrc-maker.github.io and npm\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    if: startsWith(github.ref, 'refs/tags/v')\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up pnpm\n        uses: pnpm/action-setup@v2.2.2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          registry-url: 'https://registry.npmjs.org'\n          cache: 'pnpm'\n\n      - name: Install dependencies\n        run: pnpm i --ignore-scripts --frozen-lockfile\n\n      - name: Run listdiff\n        run: pnpm run listdiff\n\n      - name: Run lint\n        run: pnpm run lint\n\n      - name: Deploy\n        run: make deploy\n\n      - name: Publish NPM\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish --ignore-scripts\n\n      - name: Deploy to lrc-maker.github.io\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          personal_token: ${{ secrets.GHP_TOKEN }}\n          external_repository: lrc-maker/lrc-maker.github.io\n          publish_branch: master\n          publish_dir: ./build\n          force_orphan: true\n```", "answer": "```yaml name: Release https://lrc-maker.github.io and npm\n\non:\n    push:\n        tags:\n            - \"v*\"\n\njobs:\n    deploy:\n        if: startsWith(github.ref, 'refs/tags/v')\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: pnpm/action-setup@v2.2.2\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: \"16\"\n                  registry-url: \"https://registry.npmjs.org\"\n                  cache: \"pnpm\"\n\n            - run: pnpm i --ignore-scripts --frozen-lockfile\n\n            - run: pnpm run listdiff\n            - run: pnpm run lint\n            - run: make deploy\n\n            - name: Publish NPM\n              run: npm publish --ignore-scripts\n              env:\n                  NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n\n            - name: Deploy to lrc-maker.github.io\n              uses: peaceiris/actions-gh-pages@v3\n              with:\n                  personal_token: ${{ secrets.GHP_TOKEN }}\n                  external_repository: lrc-maker/lrc-maker.github.io\n                  publish_branch: master\n                  publish_dir: ./build\n                  force_orphan: true\n```"}
{"id": "63c49d57517fc08c1eefc300", "level": "level5", "llm_response": "```yaml\nname: CompatHelper\n\non:\n  schedule:\n    - cron: '19 22 * * *'\n  workflow_dispatch:\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: which julia\n\n      - name: Install Julia, but only if it is not already available in the PATH\n        if: steps.julia_in_path.outcome != 'success'\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: 1\n          arch: ${{ runner.arch }}\n\n      - name: Add the General registry via Git\n        run: julia --color=yes -e 'import Pkg; ENV[\"JULIA_PKG_SERVER\"] = \"\"; Pkg.Registry.add(\"General\")'\n\n      - name: Install CompatHelper\n        run: julia --color=yes -e 'import Pkg; name = \"CompatHelper\"; uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"; version = \"3\"; Pkg.add(; name, uuid, version)'\n\n      - name: Run CompatHelper\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia --color=yes -e 'import CompatHelper; CompatHelper.main()'\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 19 22 * * *\n  workflow_dispatch:\npermissions:\n  contents: write\n  pull-requests: write\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if Julia is already available in the PATH\n        id: julia_in_path\n        run: which julia\n        continue-on-error: true\n      - name: Install Julia, but only if it is not already available in the PATH\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1'\n          arch: ${{ runner.arch }}\n        if: steps.julia_in_path.outcome != 'success'\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49fce736e7f0ed8c7083c", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n    steps:\n      - name: \ud83d\udce5 Checkout the repository\n        uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 2\n      - name: \ud83d\udd01 Initialize CodeQL\n        uses: github/codeql-action/init@v2.1.28\n        with:\n          languages: python\n      - name: \ud83d\udee0\ufe0f Autobuild\n        uses: github/codeql-action/autobuild@v2.1.28\n      - name: \ud83c\udfc3 Run CodeQL Analysis\n        uses: github/codeql-action/analyze@v2.1.28\n      - name: \ud83d\udce8 Discord notification\n        if: ${{ github.event_name == 'schedule' && failure() }}\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: \"[Scheduled action failed!](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\"\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n\n    steps:\n    - name: \ud83d\udce5 Checkout the repository\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 2\n\n    - name: \ud83d\udd01 Initialize CodeQL\n      uses: github/codeql-action/init@v2.1.28\n      with:\n        languages: python\n\n    - name: \ud83d\udee0\ufe0f Autobuild\n      uses: github/codeql-action/autobuild@v2.1.28\n\n    - name: \ud83c\udfc3 Run CodeQL Analysis\n      uses: github/codeql-action/analyze@v2.1.28\n\n    - name: \ud83d\udce8 Discord notification\n      if: ${{ github.event_name == 'schedule' && failure() }}\n      env:\n        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_ACTION_FAILURE }}\n      uses: Ilshidur/action-discord@0.3.2\n      with:\n        args: \"[Scheduled action failed!](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\"\n```"}
{"id": "63c49e256fc19abdf9ccdc74", "level": "level5", "llm_response": "```yaml\nname: make image\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ created ]\n  repository_dispatch:\n\njobs:\n  makeimage:\n    id: makeimage\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@master\n\n    - name: Make image\n      run: make image\n```", "answer": "```yaml on: push\nname: make image\njobs:\n  makeimage:\n    name: make image\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make image\n        run: make image\n        shell: bash\n```"}
{"id": "63c49fdb1842bc13d7799b37", "level": "level5", "llm_response": "```yaml\nname: Clean\n\non:\n  push:\n    branches: [ '*' ]\n  push:\n    tags: [ '*' ]\n  repository_dispatch:\n    types: [ clone ]\n\njobs:\n  delete-artifacts:\n    id: delete-artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49c441842bc13d77827ae", "level": "level5", "llm_response": "```yaml\nname: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: node_modules\n\n      - name: Prepare\n        run: |\n          pacman -Sy\n          pacman -S --noconfirm base gnome-shell gtk3 libadwaita gtk4 glib2 gobject-introspection\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Build\n        run: |\n          npm install\n          npm run github_action\n\n      - name: Upload Extension Pack\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: rounded-window-corners@yilozt.shell-extension\n          path: _build/\n```", "answer": "```yaml name: Pack extensions\n\non:\n  push:\n    paths-ignore:\n      - README.md\n  pull_request:\n    paths-ignore:\n      - README.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [16.x]\n    container: archlinux:base-devel\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: node_modules\n      \n      - name: Prepare\n        run: |\n          pacman -Sy\n          pacman -S --noconfirm base gnome-shell gtk3 libadwaita gtk4 glib2 gobject-introspection\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Build\n        run: |\n          npm install\n          npm run github_action\n        \n      - name: Upload Extension Pack\n        uses: actions/upload-artifact@v3.1.0\n        with:\n          name: rounded-window-corners@yilozt.shell-extension\n          path: _build/\n```"}
{"id": "63c499ca1e33648075790155", "level": "level5", "llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '40 11 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n      - uses: actions/stale@v6\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          stale-issue-message: 'Stale issue message'\n          stale-pr-message: 'Stale pull request message'\n          stale-issue-label: 'no-issue-activity'\n          stale-pr-label: 'no-pr-activity'\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '40 11 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'Stale issue message'\n        stale-pr-message: 'Stale pull request message'\n        stale-issue-label: 'no-issue-activity'\n        stale-pr-label: 'no-pr-activity'\n```"}
{"id": "63c49e29cbc73931bb1abbd4", "level": "level5", "llm_response": "```yaml\nname: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate\n        run: node index.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: Deploy to GitHub Pages\n\non:\n  push:\n    branches: [master]\n\njobs:\n  generate_apps_list:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node: [14]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup node env\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: ${{ matrix.node }}\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate\n        run: node index.js\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```"}
{"id": "63c49a611e33648075793dd1", "level": "level5", "llm_response": "```yaml\nname: Publish ARC\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\npermissions:\n  contents: write\n  packages: write\n\njobs:\n  release-controller:\n    id: release-controller\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.2\n\n      - name: Install tools\n        run: |\n          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz\n          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz\n          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder\n          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash\n          sudo mv kustomize /usr/local/bin\n          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz\n          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz\n          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin\n\n      - name: Set version\n        run: echo \"VERSION=$(cat ${GITHUB_EVENT_PATH} | jq -r '.release.tag_name')\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: make github-release\n\n      - name: Setup Docker Environment\n        id: vars\n        uses: ./.github/actions/setup-docker-environment\n        with:\n          username: ${{ env.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          ghcr_username: ${{ github.actor }}\n          ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          file: Dockerfile\n          platforms: linux/amd64,linux/arm64\n          build-args: VERSION=${{ env.VERSION }}\n          push: true\n          tags: |\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:latest\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:latest\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```", "answer": "```yaml name: Publish ARC\n\non:\n  release:\n    types:\n      - published\n\n# https://docs.github.com/en/rest/overview/permissions-required-for-github-apps\npermissions:\n contents: write \n packages: write\n\njobs:\n  release-controller:\n    name: Release\n    runs-on: ubuntu-latest\n    env:\n      DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.18.2'\n\n      - name: Install tools\n        run: |\n          curl -L -O https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz\n          tar zxvf kubebuilder_2.2.0_linux_amd64.tar.gz\n          sudo mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder\n          curl -s https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash\n          sudo mv kustomize /usr/local/bin\n          curl -L -O https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz\n          tar zxvf ghr_v0.13.0_linux_amd64.tar.gz\n          sudo mv ghr_v0.13.0_linux_amd64/ghr /usr/local/bin\n\n      - name: Set version\n        run: echo \"VERSION=$(cat ${GITHUB_EVENT_PATH} | jq -r '.release.tag_name')\" >> $GITHUB_ENV\n\n      - name: Upload artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          make github-release\n\n      - name: Setup Docker Environment\n        id: vars\n        uses: ./.github/actions/setup-docker-environment\n        with:\n          username: ${{ env.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          ghcr_username: ${{ github.actor }}\n          ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and Push\n        uses: docker/build-push-action@v3\n        with:\n          file: Dockerfile\n          platforms: linux/amd64,linux/arm64\n          build-args: VERSION=${{ env.VERSION }}\n          push: true\n          tags: |\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:latest\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}\n            ${{ env.DOCKERHUB_USERNAME }}/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:latest\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}\n            ghcr.io/actions-runner-controller/actions-runner-controller:${{ env.VERSION }}-${{ steps.vars.outputs.sha_short }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```"}
{"id": "63c49d3a6fc19abdf9cc7f20", "level": "level5", "llm_response": "```yaml\nname: PR update\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    runs-on: ubuntu-latest\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Update all PRs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: PR update\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  autoupdate:\n    if: github.repository == 'volantis-x/hexo-theme-volantis'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: update all prs\n        uses: maxkomarychev/pr-updater-action@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a144cbc73931bb1bfd61", "level": "level5", "llm_response": "```yaml\nname: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    paths:\n      - app/src/main/res/values/strings.xml\n      - daemon/src/main/res/values/strings.xml\n\njobs:\n  synchronize-with-crowdin:\n    id: synchronize-with-crowdin\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: crowdin action\n        env:\n          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n          CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}\n        uses: crowdin/github-action@master\n        with:\n          upload_translations: False\n          download_translations: False\n          upload_sources: True\n          config: crowdin.yml\n          crowdin_branch_name: master\n```", "answer": "```yaml name: Crowdin Action\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n    paths:\n      - app/src/main/res/values/strings.xml\n      - daemon/src/main/res/values/strings.xml\n\njobs:\n  synchronize-with-crowdin:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: crowdin action\n      uses: crowdin/github-action@master\n      with:\n        upload_translations: false\n        download_translations: false\n        upload_sources: true\n        config: 'crowdin.yml'\n        crowdin_branch_name: master\n      env:\n        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}\n        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}\n```"}
{"id": "63c49f1b736e7f0ed8c6c249", "level": "level5", "llm_response": "```yaml\nname: Comment Bot\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  Comment:\n    id: Comment\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          greeting: '**Thank you for creating a pull request!**\n\nIf you have not done so already, please familiarise yourself with our [Contributing Guidelines](https://github.com/adoptium/temurin-build/blob/master/CONTRIBUTING.md) and [FAQ](https://github.com/adoptium/temurin-build/blob/master/FAQ.md), even if you have contributed to the Adoptium project before. GitHub actions will now run a set of jobs against your PR that will lint and unit test your changes. Keep an eye out for the results from these on the latest commit you submitted. For more information, please see our [testing documentation](https://github.com/adoptium/temurin-build/blob/master/Testing.md).'\n```", "answer": "```yaml name: \"Comment Bot\"\n\non:\n  pull_request_target:\n    types: [ opened ]\n\njobs:\n  Comment:\n    name: Add Comment\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Create comment\n        uses: JJ/pr-greeting-action@releases/v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          greeting: |\n            **Thank you for creating a pull request!**\n            If you have not done so already, please familiarise yourself with our [Contributing Guidelines](https://github.com/adoptium/temurin-build/blob/master/CONTRIBUTING.md) and [FAQ](https://github.com/adoptium/temurin-build/blob/master/FAQ.md), even if you have contributed to the Adoptium project before. GitHub actions will now run a set of jobs against your PR that will lint and unit test your changes. Keep an eye out for the results from these on the latest commit you submitted. For more information, please see our [testing documentation](https://github.com/adoptium/temurin-build/blob/master/Testing.md).\n```"}
{"id": "63c49bc033b087f6bde4e23d", "level": "level5", "llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    id: dependency-review\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```", "answer": "```yaml #\n# Copyright 2022 The Sigstore Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    name: License and Vulnerability Scan\n    uses: sigstore/community/.github/workflows/reusable-dependency-review.yml@9b1b5aca605f92ec5b1bf3681b1e61b3dbc420cc\n```"}
{"id": "63c49f1e1899db588650b1ca", "level": "level5", "llm_response": "```yaml\nname: Build Web\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-main:\n    id: build-main\n    runs-on: ubuntu-latest\n\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v1\n\n    - name: Set up Flutter\n      uses: subosito/flutter-action@v1\n      with:\n        flutter-version: 3.3.0\n\n    - name: Install Sentry\n      run: |\n        curl -sL https://sentry.io/get-cli/ | bash\n\n    - name: Setup Flutter\n      run: |\n        flutter doctor -v\n        flutter pub get\n        flutter config --enable-web\n\n    - name: Prepare App\n      run: |\n        cp lib/.env.dart.example lib/.env.dart\n        sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n        echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n        flutter --version --machine >> lib/flutter_version.dart\n        echo \";\" >> lib/flutter_version.dart\n\n    - name: Build Hosted App\n      run: |\n        #export SENTRY_RELEASE=$(sentry-cli releases propose-version)\n        #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} new $SENTRY_RELEASE --project ${{secrets.sentry_project}}\n        #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} set-commits --auto $SENTRY_RELEASE\n\n        flutter build web --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE --source-maps\n\n        sed -i '/index.html/d' build/web/flutter_service_worker.js\n\n        git config --global user.email ${{secrets.commit_email}}\n        git config --global user.name ${{secrets.commit_name}}\n\n        git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n        cd invoiceninja\n\n        git checkout v5-develop\n        cp -r ../build/web/* ./public/\n        rm ./public/index.html\n        git add .\n        git commit -m 'Admin Portal - Hosted'\n        git push\n        cd ..\n\n        #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext dart --rewrite\n        cd ./build/web\n        #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext map --ext js --rewrite\n        cd ../..\n\n        #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} finalize $SENTRY_RELEASE\n        #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} deploys $SENTRY_RELEASE new -e production          \n        \n    - name: Build Profile App\n      run: |\n        flutter build web --profile\n\n        git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_profile\n        cd invoiceninja_profile\n\n        git checkout v5-develop\n        cp ../build/web/main.dart.js ./public/main.profile.dart.js\n        git add .\n        git commit -m 'Admin Portal - Profile'\n        git push\n        cd ..      \n\n    - name: Build Selfhosted App\n      run: |\n        cp lib/utils/oauth.dart.foss lib/utils/oauth.dart\n        cp lib/utils/app_review.dart.foss lib/utils/app_review.dart\n        cp lib/ui/app/upgrade_dialog.dart.foss lib/ui/app/upgrade_dialog.dart\n        cp lib/ui/app/pinput.dart.foss lib/ui/app/pinput.dart\n        cp pubspec.foss.yaml pubspec.yaml \n        flutter pub get\n\n        flutter build web\n\n        git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_foss\n        cd invoiceninja_foss\n        git checkout v5-develop\n        cp ../build/web/main.dart.js ./public/main.foss.dart.js\n        cp ../build/web/main.dart.js.map ./public/main.foss.dart.js.map\n        git add .\n        git commit -m 'Admin Portal - Selfhosted'\n        git push\n```", "answer": "```yaml name: Build Web\n\non:\n  push:\n    branches:\n      - master\njobs:\n  build-main:\n    name: Build Web - MAIN\n    env:\n      commit_secret: ${{secrets.commit_secret}}\n      commit_email: ${{secrets.commit_email}}\n      commit_name: ${{secrets.commit_name}}\n      app_sentry: ${{secrets.app_sentry}}\n      api_secret: ${{secrets.api_secret}}\n      sentry_auth_token: ${{secrets.sentry_auth_token}}\n      sentry_org: ${{secrets.sentry_org}}\n      sentry_project: ${{secrets.sentry_project}}\n      sentry_url: ${{secrets.sentry_url}}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: subosito/flutter-action@v1\n        with:\n          flutter-version: '3.3.0'\n          #channel: 'stable'\n      - name: Install Sentry\n        run: |\n          curl -sL https://sentry.io/get-cli/ | bash\n      - name: Setup Flutter\n        run: |\n          flutter doctor -v\n          flutter pub get\n          flutter config --enable-web\n      - name: Prepare App\n        run: |\n          cp lib/.env.dart.example lib/.env.dart\n          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n          flutter --version --machine >> lib/flutter_version.dart\n          echo \";\" >> lib/flutter_version.dart\n      - name: Build Hosted App\n        run: |\n          #export SENTRY_RELEASE=$(sentry-cli releases propose-version)\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} new $SENTRY_RELEASE --project ${{secrets.sentry_project}}\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} set-commits --auto $SENTRY_RELEASE\n\n          flutter build web --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE --source-maps\n\n          sed -i '/index.html/d' build/web/flutter_service_worker.js\n\n          git config --global user.email ${{secrets.commit_email}}\n          git config --global user.name ${{secrets.commit_name}}\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n          cd invoiceninja\n\n          git checkout v5-develop\n          cp -r ../build/web/* ./public/\n          rm ./public/index.html\n          git add .\n          git commit -m 'Admin Portal - Hosted'\n          git push\n          cd ..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext dart --rewrite\n          cd ./build/web\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --project ${{secrets.sentry_project}} --org ${{secrets.sentry_org}} files $SENTRY_RELEASE upload-sourcemaps . --ext map --ext js --rewrite\n          cd ../..\n\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} finalize $SENTRY_RELEASE\n          #sentry-cli --auth-token ${{secrets.sentry_auth_token}} --url ${{secrets.sentry_url}} releases --org ${{secrets.sentry_org}} deploys $SENTRY_RELEASE new -e production          \n      - name: Build Profile App\n        run: |\n          flutter build web --profile\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_profile\n          cd invoiceninja_profile\n\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.profile.dart.js\n          git add .\n          git commit -m 'Admin Portal - Profile'\n          git push\n          cd ..      \n      - name: Build Selfhosted App\n        run: |\n          cp lib/utils/oauth.dart.foss lib/utils/oauth.dart\n          cp lib/utils/app_review.dart.foss lib/utils/app_review.dart\n          cp lib/ui/app/upgrade_dialog.dart.foss lib/ui/app/upgrade_dialog.dart\n          cp lib/ui/app/pinput.dart.foss lib/ui/app/pinput.dart\n          cp pubspec.foss.yaml pubspec.yaml \n          flutter pub get\n\n          flutter build web\n\n          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git invoiceninja_foss\n          cd invoiceninja_foss\n          git checkout v5-develop\n          cp ../build/web/main.dart.js ./public/main.foss.dart.js\n          cp ../build/web/main.dart.js.map ./public/main.foss.dart.js.map\n          git add .\n          git commit -m 'Admin Portal - Selfhosted'\n          git push\n\n#  build-next:\n#    name: Build Web - NEXT\n#    needs: build-main\n#    env:\n#      commit_secret: ${{secrets.commit_secret}}\n#      commit_email: ${{secrets.commit_email}}\n#      commit_name: ${{secrets.commit_name}}\n#      api_secret: ${{secrets.api_secret}}\n#    runs-on: ubuntu-latest\n#    steps:\n#      - uses: actions/checkout@v1\n#      - uses: subosito/flutter-action@v1\n#        with:\n#          flutter-version: '3.3.0'\n#      - name: Setup Flutter\n#        run: |\n#          flutter doctor -v\n#          cp pubspec.next.yaml pubspec.yaml\n#          rm pubspec.lock\n#          flutter pub get\n#          flutter config --enable-web\n#      - name: Prepare App\n#        run: |\n#          cp lib/.env.dart.example lib/.env.dart\n#          sed -i 's/secret/${{secrets.api_secret}}/g' lib/.env.dart\n#          echo \"const FLUTTER_VERSION = const <String, String>\" > lib/flutter_version.dart\n#          flutter --version --machine >> lib/flutter_version.dart\n#          echo \";\" >> lib/flutter_version.dart\n#      - name: Build Hosted App\n#        run: |\n#          flutter build web\n#\n#          sed -i '/index.html/d' build/web/flutter_service_worker.js\n#\n#          git config --global user.email ${{secrets.commit_email}}\n#          git config --global user.name ${{secrets.commit_name}}\n#\n#          git clone https://${{secrets.commit_secret}}@github.com/invoiceninja/invoiceninja.git\n#          cd invoiceninja\n#\n#          git checkout v5-develop\n#          cp ../build/web/main.dart.js ./public/main.next.dart.js\n#          git add .\n#          git commit -m 'Admin Portal - Next'\n#          git push\n#          cd ..```"}
{"id": "63c499e4b008460c1df2a73d", "level": "level5", "llm_response": "```yaml\nname: Security\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'package.json'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - 'package.json'\n  schedule:\n    - cron: '17 15 * * 1'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  audit-ci:\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: '**/node_modules'\n          key: yarn-build-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: yarn-build-\n      - name: Install dependencies\n        if: steps.cache-yarn.outputs.cache-hit != 'true'\n        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile\n      - name: Audit for vulnerabilities\n        if: success()\n        run: yarn _audit\n\n  trivy-scan-repo:\n    runs-on: ubuntu-20.04\n    permissions:\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          scan-type: fs\n          scan-ref: .\n          ignore-unfixed: True\n          format: template\n          template: '@/contrib/sarif.tpl'\n          output: trivy-repo-results.sarif\n          severity: HIGH,CRITICAL\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: trivy-repo-results.sarif\n\n  codeql-analyze:\n    runs-on: ubuntu-20.04\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql-config.yml\n          languages: javascript\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: Security\n\non:\n  push:\n    branches: [main]\n    paths:\n      - \"package.json\"\n  pull_request:\n    paths:\n      - \"package.json\"\n  schedule:\n    # Runs every Monday morning PST\n    - cron: \"17 15 * * 1\"\n\n# Cancel in-progress runs for pull requests when developers push\n# additional changes, and serialize builds in branches.\n# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-concurrency-to-cancel-any-in-progress-job-or-run\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  audit-ci:\n    name: Audit node modules\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n\n      - name: Fetch dependencies from cache\n        id: cache-yarn\n        uses: actions/cache@v3\n        with:\n          path: \"**/node_modules\"\n          key: yarn-build-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            yarn-build-\n\n      - name: Install dependencies\n        if: steps.cache-yarn.outputs.cache-hit != 'true'\n        run: SKIP_SUBMODULE_DEPS=1 yarn --frozen-lockfile\n\n      - name: Audit for vulnerabilities\n        run: yarn _audit\n        if: success()\n\n  trivy-scan-repo:\n    name: Scan repo with Trivy\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@d63413b0a4a4482237085319f7f4a1ce99a8f2ac\n        with:\n          scan-type: \"fs\"\n          scan-ref: \".\"\n          ignore-unfixed: true\n          format: \"template\"\n          template: \"@/contrib/sarif.tpl\"\n          output: \"trivy-repo-results.sarif\"\n          severity: \"HIGH,CRITICAL\"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: \"trivy-repo-results.sarif\"\n\n  codeql-analyze:\n    permissions:\n      actions: read # for github/codeql-action/init to get workflow details\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/autobuild to send a status report\n    name: Analyze with CodeQL\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql-config.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f9a33b087f6bde6736e", "level": "level5", "llm_response": "```yaml\nname: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint --if-present\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Test code\n        run: npm run test --if-present\n\n  publish:\n    runs-on: ubuntu-latest\n    needs: [lint, test]\n    if: github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main'\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'npm'\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Semantic Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npx semantic-release\n```", "answer": "```yaml name: Lint, Test, and (Maybe) Publish\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint --if-present\n\n  test:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Test code\n        run: npm run test --if-present\n\n  publish:\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name == 'push' && github.repository_owner == 'longshotlabs' && github.ref == 'refs/heads/main' }}\n    needs: [lint, test]\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out files\n        uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"16\"\n          cache: \"npm\"\n          cache-dependency-path: package-lock.json\n      - name: Update to latest NPM version\n        run: npm i -g npm\n      - name: Install package dependencies\n        run: npm ci\n      - name: Semantic Release\n        run: npx semantic-release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c497a6cbc73931bb181c12", "level": "level5", "llm_response": "```yaml\nname: Nightly distribution\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        branch: [swiftwasm, swiftwasm-release/5.3, swiftwasm-release/5.4, swiftwasm-release/5.5, swiftwasm-release/5.6, swiftwasm-release/5.7]\n        channel: [DEVELOPMENT, 5.3, 5.4, 5.5, 5.6, 5.7]\n        targets: [ubuntu18.04_x86_64, ubuntu20.04_x86_64, ubuntu20.04_aarch64, ubuntu22.04_x86_64, macos_x86_64, macos_arm64, amazonlinux2_x86_64]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v1\n\n    - name: Setup keychain\n      run: |\n        security create-keychain -p \"$KEYCHAIN_PASSWORD\" swiftwasm-ci\n        KEYCHAIN=$HOME/Library/Keychains/swiftwasm-ci-db\n        security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n        security set-keychain-settings -lut 7200 $KEYCHAIN\n        security default-keychain -s $KEYCHAIN\n\n        echo \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64\" | base64 --decode -o developerID_application.p12\n        security import developerID_application.p12 -P \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n        echo \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64\" | base64 --decode -o developerID_installer.p12\n        security import developerID_installer.p12 -P \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n\n        security set-key-partition-list -S \"apple-tool:,apple:\" -s -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n      env:\n        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}\n        DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n        DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }}\n        DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }}\n        DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n        DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }}\n        DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }}\n\n    - name: Distribute toolchain\n      run: |\n        ./utils/webassembly/distribute-latest-toolchain.sh ${{ matrix.branch }} ${{ matrix.channel }}\n      env:\n        TARGETS_TO_DIST: ${{ matrix.targets }}\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        BUILDBOT_GITHUB_TOKEN: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}\n        DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n        DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n        DARWIN_TOOLCHAIN_NOTARIZE_EMAIL: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_EMAIL }}\n        DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD }}\n        DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID }}\n```", "answer": "```yaml name: Nightly distribution\non:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  nightly-distribution:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        include:\n          - branch: \"swiftwasm\"\n            channel: \"DEVELOPMENT\"\n#           targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.3\"\n            channel: \"5.3\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64\"\n          - branch: \"swiftwasm-release/5.4\"\n            channel: \"5.4\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.5\"\n            channel: \"5.5\"\n            targets: \"ubuntu18.04_x86_64 ubuntu20.04_x86_64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.6\"\n            channel: \"5.6\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 macos_x86_64 macos_arm64\"\n          - branch: \"swiftwasm-release/5.7\"\n            channel: \"5.7\"\n            targets: \"amazonlinux2_x86_64 ubuntu18.04_x86_64 ubuntu20.04_x86_64 ubuntu20.04_aarch64 ubuntu22.04_x86_64 macos_x86_64 macos_arm64\"\n    steps:\n      - uses: actions/checkout@v1\n      - name: Setup keychain\n        run: |\n          security create-keychain -p \"$KEYCHAIN_PASSWORD\" swiftwasm-ci\n          KEYCHAIN=$HOME/Library/Keychains/swiftwasm-ci-db\n          security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n          security set-keychain-settings -lut 7200 $KEYCHAIN\n          security default-keychain -s $KEYCHAIN\n\n          echo \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64\" | base64 --decode -o developerID_application.p12\n          security import developerID_application.p12 -P \"$DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n          echo \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64\" | base64 --decode -o developerID_installer.p12\n          security import developerID_installer.p12 -P \"$DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD\" -T /usr/bin/pkgbuild -T /usr/bin/codesign\n\n          security set-key-partition-list -S \"apple-tool:,apple:\" -s -k \"$KEYCHAIN_PASSWORD\" $KEYCHAIN\n        env:\n          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT_PASSWORD }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_BASE64 }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT_PASSWORD }}\n\n      - run: ./utils/webassembly/distribute-latest-toolchain.sh ${{ matrix.branch }} ${{ matrix.channel }}\n        env:\n          TARGETS_TO_DIST: ${{ matrix.targets }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BUILDBOT_GITHUB_TOKEN: ${{ secrets.SWIFTWASM_BUILDBOT_TOKEN }}\n          DARWIN_TOOLCHAIN_APPLICATION_CERT: ${{ secrets.DARWIN_TOOLCHAIN_APPLICATION_CERT }}\n          DARWIN_TOOLCHAIN_INSTALLER_CERT: ${{ secrets.DARWIN_TOOLCHAIN_INSTALLER_CERT }}\n          DARWIN_TOOLCHAIN_NOTARIZE_EMAIL: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_EMAIL }}\n          DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_PASSWORD }}\n          DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID: ${{ secrets.DARWIN_TOOLCHAIN_NOTARIZE_TEAM_ID }}\n```"}
{"id": "63c49d15517fc08c1eefabdb", "level": "level5", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    - cron: '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    strategy:\n      matrix:\n        type: [slither, manticore]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          sudo wget -O /usr/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux\n          sudo chmod +x /usr/bin/solc\n\n      - name: Run Tests\n        env:\n          TEST_TYPE: ${{ matrix.type }}\n        run: bash program-analysis/${TEST_TYPE}/scripts/gh_action_test.sh\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n      - dev\n  pull_request:\n  schedule:\n    # run CI every day even if no PRs/merges occur\n    - cron:  '0 12 * * *'\n\njobs:\n  tests:\n    runs-on: ubuntu-22.04\n    strategy:\n      fail-fast: false\n      matrix:\n        type: [\"slither\", \"manticore\"]\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.8\n      uses: actions/setup-python@v4\n      with:\n        python-version: 3.8\n    - name: Install dependencies\n      run: |\n        sudo wget -O /usr/bin/solc https://github.com/ethereum/solidity/releases/download/v0.5.11/solc-static-linux\n        sudo chmod +x /usr/bin/solc\n    - name: Run Tests\n      env:\n        TEST_TYPE: ${{ matrix.type }}\n      run: |\n        bash program-analysis/${TEST_TYPE}/scripts/gh_action_test.sh\n```"}
{"id": "63c49d70cbc73931bb1a70f8", "level": "level5", "llm_response": "```yaml\nname: Weekly Tests\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 5'\n\njobs:\n  test:\n    id: test\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [3.7, 3.8, 3.9, 3.10]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt -v\n\n      - name: Run pytest\n        run: python -m pytest\n```", "answer": "```yaml name: Weekly Tests\r\n\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    # Runs every friday\r\n    - cron: \"0 0 * * 5\"\r\n\r\njobs:\r\n  test:\r\n    name: \"Python ${{ matrix.python-version }} on ${{ matrix.os }}\"\r\n    runs-on: ${{ matrix.os }}\r\n\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        os: [ubuntu-latest, macos-latest, windows-latest]\r\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\r\n\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n\r\n      - name: Set up Python ${{ matrix.python-version }}\r\n        uses: actions/setup-python@v4.3.0\r\n        with:\r\n          python-version: ${{ matrix.python-version }}\r\n\r\n      - name: Install dependencies\r\n        run: |\r\n          python -m pip install --upgrade pip\r\n          pip install -r requirements.txt -v\r\n\r\n      - name: Run pytest\r\n        run: python -m pytest\r\n```"}
{"id": "63c49a7e33b087f6bde45f85", "level": "level5", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Update Release Draft\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        uses: release-drafter/release-drafter@v5\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n  pull_request_target:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0e9cbc73931bb1bd7aa", "level": "level5", "llm_response": "```yaml\nname: cancel-previous-workflows\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Cancel previous runs\n      uses: styfle/cancel-workflow-action@0.11.0\n      with:\n        workflow_id: all\n        all_but_latest: true\n```", "answer": "```yaml name: cancel-previous-workflows\n\non:\n  pull_request_target:\n\njobs:\n  cancel-previous-workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel previous runs\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          workflow_id: all\n          all_but_latest: true\n```"}
{"id": "63c49c2e1842bc13d7781f8c", "level": "level5", "llm_response": "```yaml\nname: StandardRB\n\non:\n  pull_request:\n    branches: [ '*' ]\n  push:\n    branches: [ master ]\n\njobs:\n  standard:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n        bundler-cache: true\n\n    - name: Run StandardRB\n      run: bundle exec standardrb --format progress\n```", "answer": "```yaml name: StandardRB\n\non:\n  pull_request:\n    branches:\n      - '*'\n  push:\n    branches:\n      - master\n\njobs:\n  standard:\n    name: StandardRB Check Action\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 3.1\n        bundler-cache: true\n\n    - name: Run StandardRB\n      run: bundle exec standardrb --format progress\n```"}
{"id": "63c49bbd33b087f6bde4e115", "level": "level5", "llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n  push:\n    branches: [ master ]\n  repository_dispatch:\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        dry-run: False\n\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        fuzz-seconds: 600\n        dry-run: False\n\n    - name: Upload Crash\n      if: failure()\n      uses: actions/upload-artifact@v1\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```", "answer": "```yaml # Copyright 2021 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\nname: CIFuzz\non: [pull_request, push]\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure()\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"id": "63c49b6a1899db58864f3771", "level": "level5", "llm_response": "```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    if: github.ref != 'refs/heads/master'\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: 3.x\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n          check-latest: true\n          cache: true\n\n      - name: Install dependencies\n        run: |\n          sudo apt-get update && sudo apt-get install -y libdevmapper-dev libbtrfs-dev\n\n      - name: Run pre-commit\n        uses: pre-commit/action@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [master]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n\n    # don't run this on the master branch\n    if: github.ref != 'refs/heads/master'\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-python@v4.3.0\n        with:\n          python-version: '3.x'\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n          check-latest: true\n          cache: true\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install -y libdevmapper-dev libbtrfs-dev\n      - uses: pre-commit/action@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49edb33b087f6bde62769", "level": "level5", "llm_response": "```yaml\nname: Conform PR\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, synchronize, edited, reopened]\n  pull_request_target:\n    types: [labeled, unlabeled, opened, synchronize, edited, reopened]\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }}\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  conform-pr:\n    id: conform-pr\n    runs-on: ubuntu-20.04\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n\n    steps:\n    - name: Setup Go\n      uses: FerretDB/github-actions/setup-go@main\n      with:\n        cache-key: conform-pr\n\n    - name: Conform PR\n      uses: FerretDB/github-actions/conform-pr@main\n```", "answer": "```yaml ---\n# Attention! This workflow uses `pull_request_target` event that has access to secrets.\n# If you modify this workflow, make sure that you don't introduce dangerous steps.\n# See also: https://securitylab.github.com/research/github-actions-preventing-pwn-requests/.\nname: Conform PR\non:\n  pull_request_target:\n    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target\n    # List all types to make it easier to enable new ones when they are needed.\n    types:\n      # - assigned\n      # - unassigned\n      - labeled\n      - unlabeled # if GitHub Actions stuck, add and remove \"no ci\" label to force rebuild\n      - opened\n      - edited\n      # - closed\n      - reopened\n      - synchronize\n      # - converted_to_draft\n      # - ready_for_review\n      # - locked\n      # - unlocked\n      # - review_requested\n      # - review_request_removed\n      # - auto_merge_enabled\n      # - auto_merge_disabled\n\n# Stop pending and in-progress jobs of this workflow.\n# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\nenv:\n  GOPATH: /home/runner/go\n  GOCACHE: /home/runner/go/cache\n  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint\n  GOMODCACHE: /home/runner/go/mod\n  GOPROXY: https://proxy.golang.org\n  CONFORM_TOKEN: ${{ secrets.CONFORM_TOKEN }} # GITHUB_TOKEN is not enough to query projects, so we use a special one\n\njobs:\n  conform-pr:\n    name: Conform PR\n    runs-on: ubuntu-20.04\n\n    if: github.event_name != 'pull_request_target' || !contains(github.event.pull_request.labels.*.name, 'no ci')\n\n    steps:\n      # Warning! Be careful about changing the steps here as it might cause some security problems\n      # (see the Attention block on the top of this file).\n      - name: Setup Go\n        uses: FerretDB/github-actions/setup-go@main\n        with:\n          cache-key: conform-pr\n\n      - name: Conform PR\n        uses: FerretDB/github-actions/conform-pr@main\n```"}
{"id": "63c499c86fc19abdf9cb1f2d", "level": "level5", "llm_response": "```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Set env\n        run: echo \"RELEASE_TAG=${GITHUB_REF:10}\" >> $GITHUB_ENV\n\n      - name: checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.19'\n\n      - name: generate release artifacts\n        run: make release\n\n      - name: generate release notes\n        run: make release-notes\n\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          draft: true\n          files: out/*\n          body_path: _releasenotes/${{ env.RELEASE_TAG }}.md\n```", "answer": "```yaml name: release\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\npermissions:\n  contents: write # Allow to create a release.\n\njobs:\n  build:\n    name: create draft release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set env\n        run:  echo \"RELEASE_TAG=${GITHUB_REF:10}\" >> $GITHUB_ENV\n      - name: checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.19'\n      - name: generate release artifacts\n        run: |\n          make release\n      - name: generate release notes\n        run: |\n          make release-notes\n      - name: Release\n        uses: softprops/action-gh-release@v1\n        with:\n          draft: true\n          files: out/*\n          body_path: _releasenotes/${{ env.RELEASE_TAG }}.md\n```"}
{"id": "63c49b3d1842bc13d777c127", "level": "level5", "llm_response": "```yaml\nname: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**/*.php'\n      - '.github/workflows/test-autoreview.yml'\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**/*.php'\n      - '.github/workflows/test-autoreview.yml'\n\njobs:\n  auto-review-tests:\n    id: auto-review-tests\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: none\n\n      - name: Get composer cache directory\n        run: echo \"COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)\" >> $GITHUB_ENV\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        env:\n          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}\n        run: composer update --ansi\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit --color=always --group=auto-review --no-coverage\n```", "answer": "```yaml name: Automatic Code Review\n\non:\n  pull_request:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n  push:\n    paths:\n      - composer.json\n      - spark\n      - '**.php'\n      - .github/workflows/test-autoreview.yml\n\njobs:\n  auto-review-tests:\n    name: Automatic Code Review\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          coverage: none\n\n      - name: Get composer cache directory\n        run: echo \"COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)\" >> $GITHUB_ENV\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.COMPOSER_CACHE_FILES_DIR }}\n          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}\n          restore-keys: ${{ runner.os }}-composer-\n\n      - name: Install dependencies\n        run: composer update --ansi\n        env:\n          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}\n\n      - name: Run AutoReview Tests\n        run: vendor/bin/phpunit --color=always --group=auto-review --no-coverage\n```"}
{"id": "63c49c8533b087f6bde535e2", "level": "level5", "llm_response": "```yaml\nname: TagBot\n\non:\n  issue_comment:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    steps:\n      - name: TagBot\n        uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49b3d1842bc13d777c123", "level": "level5", "llm_response": "```yaml\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - develop\n    paths:\n      - system/**\n      - .github/workflows/deploy-apidocs.yml\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-20.04\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    steps:\n      - name: Setup credentials\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"${GITHUB_ACTOR}\"\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          path: source\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          repository: codeigniter4/api\n          token: ${{ secrets.ACCESS_TOKEN }}\n          path: api\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: 8.0\n          tools: phive\n          coverage: none\n      - name: Download latest phpDocumentor\n        run: sudo phive --no-progress install --global --trust-gpg-keys 67F861C3D889C656 phpDocumentor\n      - name: Prepare API repo\n        run: |\n          git reset --hard master\n          rm -rfv docs\n          mkdir --parents --verbose docs\n      - name: Build API in source repo\n        run: |\n          phpDocumentor run --ansi --verbose\n          cp -R ${GITHUB_WORKSPACE}/source/api/build/* ${GITHUB_WORKSPACE}/api/docs\n      - name: Deploy to API repo\n        run: |\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Updated API for commit ${GITHUB_SHA}\"\n            git push origin master\n          fi\n```", "answer": "```yaml # When changes are pushed to the develop branch,\n# build the current version of the API documentation\n# with phpDocumentor and deploy it to codeigniter4/api.\nname: Deploy API Documentation\n\non:\n  push:\n    branches:\n      - 'develop'\n    paths:\n      - 'system/**'\n      - '.github/workflows/deploy-apidocs.yml'\n\njobs:\n  build:\n    name: Deploy to api\n    if: github.repository == 'codeigniter4/CodeIgniter4'\n    runs-on: ubuntu-20.04\n\n    steps:\n      - name: Setup credentials\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"${GITHUB_ACTOR}\"\n\n      - name: Checkout source\n        uses: actions/checkout@v3\n        with:\n          path: source\n\n      - name: Checkout target\n        uses: actions/checkout@v3\n        with:\n          repository: codeigniter4/api\n          token: ${{ secrets.ACCESS_TOKEN }}\n          path: api\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          tools: phive\n          coverage: none\n\n      - name: Download latest phpDocumentor\n        working-directory: source\n        run: sudo phive --no-progress install --global --trust-gpg-keys 67F861C3D889C656 phpDocumentor\n\n      - name: Prepare API repo\n        working-directory: api\n        run: |\n          git reset --hard master\n          rm -rfv docs\n          mkdir --parents --verbose docs\n\n      - name: Build API in source repo\n        working-directory: source\n        run: |\n          phpDocumentor run --ansi --verbose\n          cp -R ${GITHUB_WORKSPACE}/source/api/build/* ${GITHUB_WORKSPACE}/api/docs\n\n      - name: Deploy to API repo\n        working-directory: api\n        run: |\n          git add .\n          if ! git diff-index --quiet HEAD; then\n            git commit -m \"Updated API for commit ${GITHUB_SHA}\"\n            git push origin master\n          fi\n```"}
{"id": "63c49993517fc08c1eee4989", "level": "level5", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches: [ master ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '0 12 * * 6'\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 2\n    - name: Checkout HEAD on PR\n      if: github.event_name == 'pull_request'\n      run: git checkout HEAD^2\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: go\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: codeql\n\nconcurrency:\n  group: codeql-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches:\n      - 'master'\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - 'master'\n  schedule:\n    - cron: '0 12 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n      -\n        name: Checkout HEAD on PR\n        if: ${{ github.event_name == 'pull_request' }}\n        run: |\n          git checkout HEAD^2\n      -\n        name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n      -\n        name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      -\n        name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c499f16fc19abdf9cb2f18", "level": "level5", "llm_response": "```yaml\nname: jenkins-illa-builder-main\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: http://ec2-13-230-170-106.ap-northeast-1.compute.amazonaws.com:9000/\n          user: illasoft\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n          job: illa-builder-main\n```", "answer": "```yaml name: jenkins-illa-builder-main\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: trigger single Job\n        uses: appleboy/jenkins-action@master\n        with:\n          url: \"http://ec2-13-230-170-106.ap-northeast-1.compute.amazonaws.com:9000/\"\n          user: \"illasoft\"\n          token: ${{ secrets.JENKINS_API_TOKEN }}\n          job: \"illa-builder-main\"\n```"}
{"id": "63c49926b008460c1df25d1c", "level": "level5", "llm_response": "```yaml\nname: PR Check - Packaging: Config and input\n\non:\n  push:\n    branches:\n      - main\n      - releases/v1\n      - releases/v2\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n  workflow_dispatch:\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\n  INTERNAL_CODEQL_ACTION_DEBUG_LOC: True\n\njobs:\n  packaging-config-inputs-js:\n    id: packaging-config-inputs-js\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-2019, windows-2022]\n        version: [latest, cached, nightly-latest]\n    max-parallel: 4\n    timeout-minutes: 45\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Prepare test\n        id: prepare-test\n        run: ./.github/prepare-test\n        with:\n          version: ${{ matrix.version }}\n\n      - name: Set TEST_MODE environment variable\n        run: echo \"TEST_MODE=True\" >> $GITHUB_ENV\n\n      - name: Initialize action\n        run: ./../action/init\n        with:\n          config-file: .github/codeql/codeql-config-packaging3.yml\n          packs: +dsp-testing/codeql-pack1@1.0.0\n          languages: javascript\n          tools: ${{ steps.prepare-test.outputs.tools-url }}\n\n      - name: Build code\n        run: bash ./build.sh\n\n      - name: Analyze code\n        run: ./../action/analyze\n        with:\n          output: ${{ runner.temp }}/results\n\n      - name: Check results\n        run: ./../action/.github/check-sarif\n        with:\n          sarif-file: ${{ runner.temp }}/results/javascript.sarif\n          queries-run: javascript/example/empty-or-one-block,javascript/example/empty-or-one-block,javascript/example/other-query-block,javascript/example/two-block\n          queries-not-run: foo,bar\n\n      - name: Assert Results\n        run: |\n          cd \"$RUNNER_TEMP/results\"\n          # We should have 4 hits from these rules\n          EXPECTED_RULES=\"javascript/example/empty-or-one-block javascript/example/empty-or-one-block javascript/example/other-query-block javascript/example/two-block\"\n          RULES=\"$(cat javascript.sarif | jq -r '.runs[0].results[].ruleId' | sort | tr \"\\n\\r\" \" \" | xargs)\"\n          echo \"Found matching rules '$RULES'\"\n          if [ \"$RULES\" != \"$EXPECTED_RULES\" ]; then\n            echo \"Did not match expected rules '$EXPECTED_RULES'.\"\n            exit 1\n          fi\n```", "answer": "```yaml # Warning: This file is generated automatically, and should not be modified.\n# Instead, please modify the template in the pr-checks directory and run:\n#     pip install ruamel.yaml && python3 sync.py\n# to regenerate this file.\n\nname: 'PR Check - Packaging: Config and input'\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  GO111MODULE: auto\non:\n  push:\n    branches:\n    - main\n    - releases/v1\n    - releases/v2\n  pull_request:\n    types:\n    - opened\n    - synchronize\n    - reopened\n    - ready_for_review\n  workflow_dispatch: {}\njobs:\n  packaging-config-inputs-js:\n    strategy:\n      matrix:\n        include:\n        - os: ubuntu-latest\n          version: latest\n        - os: macos-latest\n          version: latest\n        - os: windows-2019\n          version: latest\n        - os: windows-2022\n          version: latest\n        - os: ubuntu-latest\n          version: cached\n        - os: macos-latest\n          version: cached\n        - os: windows-2019\n          version: cached\n        - os: ubuntu-latest\n          version: nightly-latest\n        - os: macos-latest\n          version: nightly-latest\n        - os: windows-2019\n          version: nightly-latest\n        - os: windows-2022\n          version: nightly-latest\n    name: 'Packaging: Config and input'\n    timeout-minutes: 45\n    runs-on: ${{ matrix.os }}\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n    - name: Prepare test\n      id: prepare-test\n      uses: ./.github/prepare-test\n      with:\n        version: ${{ matrix.version }}\n    - uses: ./../action/init\n      with:\n        config-file: .github/codeql/codeql-config-packaging3.yml\n        packs: +dsp-testing/codeql-pack1@1.0.0\n        languages: javascript\n        tools: ${{ steps.prepare-test.outputs.tools-url }}\n      env:\n        TEST_MODE: true\n    - name: Build code\n      shell: bash\n      run: ./build.sh\n    - uses: ./../action/analyze\n      with:\n        output: ${{ runner.temp }}/results\n      env:\n        TEST_MODE: true\n\n    - name: Check results\n      uses: ./../action/.github/check-sarif\n      with:\n        sarif-file: ${{ runner.temp }}/results/javascript.sarif\n        queries-run: javascript/example/empty-or-one-block,javascript/example/empty-or-one-block,javascript/example/other-query-block,javascript/example/two-block\n        queries-not-run: foo,bar\n\n    - name: Assert Results\n      shell: bash\n      run: |\n        cd \"$RUNNER_TEMP/results\"\n        # We should have 4 hits from these rules\n        EXPECTED_RULES=\"javascript/example/empty-or-one-block javascript/example/empty-or-one-block javascript/example/other-query-block javascript/example/two-block\"\n\n        # use tr to replace newlines with spaces and xargs to trim leading and trailing whitespace\n        RULES=\"$(cat javascript.sarif | jq -r '.runs[0].results[].ruleId' | sort | tr \"\\n\\r\" \" \" | xargs)\"\n        echo \"Found matching rules '$RULES'\"\n        if [ \"$RULES\" != \"$EXPECTED_RULES\" ]; then\n          echo \"Did not match expected rules '$EXPECTED_RULES'.\"\n          exit 1\n        fi\n    env:\n      INTERNAL_CODEQL_ACTION_DEBUG_LOC: true\n```"}
{"id": "63c49c4dcbc73931bb19fc2f", "level": "level5", "llm_response": "```yaml\nname: Build and test\n\non:\n  push:\n    branches:\n      - '*'\n\njobs:\n  build-all-versions:\n    id: build-all-versions\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        scala: [2.12.16, 2.13.8]\n        spark: [3.3.0, 3.2.1, 3.2.0, 3.1.3, 3.1.2, 3.1.1, 3.1.0, 3.0.3, 3.0.2, 3.0.1, 3.0.0]\n      exclude:\n        - scala: 2.13.8\n          spark: 3.1.3\n        - scala: 2.13.8\n          spark: 3.1.2\n        - scala: 2.13.8\n          spark: 3.1.1\n        - scala: 2.13.8\n          spark: 3.1.0\n        - scala: 2.13.8\n          spark: 3.0.3\n        - scala: 2.13.8\n          spark: 3.0.2\n        - scala: 2.13.8\n          spark: 3.0.1\n        - scala: 2.13.8\n          spark: 3.0.0\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n          check-latest: true\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          ~/.gradle/wrapper\n          ~/.gradle/jdks\n          key: ${{ runner.os }}-gradle-spark-${{ matrix.spark }}-${{ matrix.scala }}\n          restore-keys: ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: -Pspark=${{ matrix.spark }}\n          -Pscala=${{ matrix.scala }}\n          clean\n          test\n          --scan\n```", "answer": "```yaml name: Build and test\n\non:\n  push:\n    branches: '*'\n#  pull_request:\n#    branches: '*'\n\njobs:\n  build-all-versions:\n    strategy:\n      matrix:\n        scala: [ \"2.12.16\", \"2.13.8\" ]\n        spark: [ \"3.3.0\", \"3.2.1\", \"3.2.0\", \"3.1.3\", \"3.1.2\", \"3.1.1\", \"3.1.0\", \"3.0.3\", \"3.0.2\", \"3.0.1\", \"3.0.0\" ]\n        exclude:\n          - scala: \"2.13.8\"\n            spark: \"3.1.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.1.0\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.3\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.2\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.1\"\n          - scala: \"2.13.8\"\n            spark: \"3.0.0\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: adopt\n          java-version: 11\n          check-latest: true\n\n      - name: Cache Gradle packages\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.gradle/jdks\n          key: ${{ runner.os }}-gradle-spark-${{ matrix.spark }}-${{ matrix.scala }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n\n      - name: Build with Gradle\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: |\n            -Pspark=${{ matrix.spark }}\n            -Pscala=${{ matrix.scala }}\n            clean\n            test\n            --scan\n\n  #  qodana:\n  #    runs-on: ubuntu-latest\n  #    steps:\n  #      - uses: actions/checkout@v3\n  #      - name: 'Qodana Scan'\n  #        uses: JetBrains/qodana-action@v5.0.2\n\n\n\n# vim: ts=2:sts=2:sw=2:expandtab\n```"}
{"id": "63c496b21899db58864d49a8", "level": "level5", "llm_response": "```yaml\nname: Code Coverage\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Set up Java\n      uses: actions/setup-java@v3\n      with:\n        java-version: 11\n        distribution: temurin\n\n    - name: Set up Gradle\n      uses: gradle/gradle-build-action@v2\n\n    - name: Run Tests\n      run: ./gradlew test -x checkLicenseMain -x checkLicenses -x spotlessCheck -x spotlessApply -Pjacoco\n      continue-on-error: true\n\n    - name: Run Test Coverage\n      run: ./gradlew testCodeCoverageReport -Pjacoco\n\n    - name: Publish Coverage\n      env:\n        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n      run: ./gradlew coverallsJacoco -Pjacoco\n```", "answer": "```yaml name: Code Coverage\non:\n  push:\n    branches:\n      - master\n\njobs:\n  code-coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'temurin'\n\n      - name: Set up Gradle\n        uses: gradle/gradle-build-action@v2\n\n      - name: Run Tests\n        run: ./gradlew test -x checkLicenseMain -x checkLicenses -x spotlessCheck -x spotlessApply -Pjacoco\n        continue-on-error: true\n\n      - name: Run Test Coverage\n        run: ./gradlew testCodeCoverageReport -Pjacoco\n\n      - name: Publish Coverage\n        env:\n          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}\n        run: ./gradlew coverallsJacoco -Pjacoco\n```"}
{"id": "63c497091e3364807577e6aa", "level": "level5", "llm_response": "```yaml\nname: Build\n\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    branches:\n      - main\n      - dev\n    paths-ignore:\n      - docs/docs/**\n\njobs:\n  build:\n    id: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: check out code \ud83d\udece\n        uses: actions/checkout@v3\n\n      - name: Install Node v18\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18.x'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Cache node modules\n        id: cache-npm\n        env:\n          cache-name: cache-node-modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-\n\n      - name: List the state of node modules\n        if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run prettier\n        run: npm run format-check\n\n      - name: Run ESLint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run Tests\n        run: npm run test\n```", "answer": "```yaml name: Build\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n      - dev\n  push:\n    paths-ignore:\n      - \"docs/docs/**\"\n    branches:\n      - main\n      - dev\n\njobs:\n  build:\n    name: Build Monorepo\n    runs-on: ubuntu-latest\n    steps:\n      - name: check out code \ud83d\udece\n        uses: actions/checkout@v3\n\n      - name: Install Node v18\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"18.x\"\n          registry-url: \"https://registry.npmjs.org\"\n\n      - name: Cache node modules\n        id: cache-npm\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          # npm cache files are stored in `~/.npm` on Linux/macOS\n          path: ~/.npm\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-build-${{ env.cache-name }}-\n            ${{ runner.os }}-build-\n            ${{ runner.os }}-\n      - if: ${{ steps.cache-npm.outputs.cache-hit == 'false' }}\n        name: List the state of node modules\n        continue-on-error: true\n        run: npm list\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run prettier\n        run: npm run format-check\n\n      - name: Run ESLint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run Tests\n        run: npm run test\n```"}
{"id": "63c497ddb008460c1df1d95d", "level": "level5", "llm_response": "```yaml\nname: Remove old artifacts\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Remove old artifacts\n        uses: c-hive/gha-remove-artifacts@v1.2.0\n        with:\n          age: '1 month'\n          skip-tags: 'true'\n          skip-recent: '3'\n```", "answer": "```yaml name: Remove old artifacts\n\non:\n  schedule:\n    # Every day at 1am\n    - cron: '0 1 * * *'\n\njobs:\n  remove-old-artifacts:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n\n    steps:\n    - name: Remove old artifacts\n      uses: c-hive/gha-remove-artifacts@v1.2.0\n      with:\n        age: '1 month'\n        skip-tags: true\n        skip-recent: 3\n```"}
{"id": "63c496d51899db58864d5867", "level": "level5", "llm_response": "```yaml\nname: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    id: set_done_for_closed_issued\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Login\n      id: login\n      uses: atlassian/gajira-login@master\n      env:\n        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n\n    - name: Find comment with ticket number\n      id: comment\n      uses: peter-evans/find-comment@v1\n      with:\n        issue-number: ${{ github.event.issue.number }}\n        body-includes: Internal ticket number is FE-\n\n    - name: Get ticket number\n      id: ticket\n      uses: atlassian/gajira-find-issue-key@master\n      with:\n        string: ${{ steps.comment.outputs.comment-body }}\n\n    - name: Close\n      id: close\n      uses: atlassian/gajira-transition@master\n      with:\n        issue: ${{ steps.ticket.outputs.issue }}\n        transition: DONE\n```", "answer": "```yaml name: Set JIRA ticket to DONE\n\non:\n  issues:\n    types: [closed, deleted]\n\njobs:\n  set_done_for_closed_issued:\n    name: Set JIRA ticket to DONE\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login\n        uses: atlassian/gajira-login@master\n        env:\n          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n\n      - name: Find comment with ticket number\n        uses: peter-evans/find-comment@v1\n        id: comment\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body-includes: Internal ticket number is FE-\n\n      - name: Get ticket number\n        id: ticket\n        uses: atlassian/gajira-find-issue-key@master\n        with:\n          string: ${{ steps.comment.outputs.comment-body }}\n\n      - name: Close\n        uses: atlassian/gajira-transition@master\n        with:\n          issue: ${{ steps.ticket.outputs.issue }}\n          transition: 'DONE'\n```"}
{"id": "63c494a17843b61269a0272b", "level": "level5", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Update Package.swift.json\n        run: |\n          set -ex\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n          git pull --rebase origin master\n          tempdir=$(mktemp -d)\n          filename=\"Package.swift\"\n          curl -sfL -o \"$tempdir/$filename\" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename\n          sed -i 's/swift-tools-version:5.5/swift-tools-version:5.4/g' \"$tempdir/Package.swift\"\n          swift package --package-path \"$tempdir\" dump-package > Resources/$filename.json\n          git add Resources/$filename.json\n          git diff-index --quiet HEAD || git commit -m \"Update $filename.json\"\n          git push origin master\n      - name: Login to Azure\n        uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - name: Login to Azure Container Registry\n        uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n      - name: Build and Push Docker Images\n        run: |\n          set -ex\n          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.RESOURCE_GROUP }}/${{ env.SERVICE_NAME }}:latest\n          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .\n          docker push ${IMAGE_TAG}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n      - name: Login to Azure\n        uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - name: Set AKS context\n        uses: azure/aks-set-context@v3\n        with:\n          resource-group: ${{ env.RESOURCE_GROUP }}\n          cluster-name: ${{ env.CLUSTER_NAME }}\n      - name: Deploy\n        run: |\n          set -ex\n          sed \"s/%COMMIT_SHA%/${{ github.sha }}/g;\" \"k8s/pod_template.yaml\" | kubectl apply -f -\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }}\n          kubectl get services -o wide\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n        run: |\n          curl -X POST \"https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache\" \\\n            -H \"X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}\" \\\n            -H \"X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"purge_everything\":true}'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Test\n        run: |\n          set -ex\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"latest\"}'\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"stable\"}'\n          versions=$(curl --silent -X GET \"https://swiftfiddle.com/versions\" -H \"Content-Type:application/json\")\n          len=$(echo $versions | jq length)\n          for i in $( seq 0 $(($len - 1)) ); do\n            version=$(echo $versions | jq .[$i])\n            curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n              -H \"Content-Type:application/json\" \\\n              --data \"{\\\"code\\\":\\\"print(\\\\\\\"Hello, World!\\\\\\\")\\\",\\\"toolchain_version\\\":$version}\"\n          done\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [master]\n  workflow_dispatch:\n\nenv:\n  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}\n  REGISTRY_NAME: swiftfiddle.azurecr.io\n  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}\n  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n  CLUSTER_NAME: swiftfiddle\n  RESOURCE_GROUP: swiftfiddle\n  SERVICE_NAME: web-frontend\n\n  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}\n\n  CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}\n  CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}\n  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Update Package.swift.json\n        run: |\n          set -ex\n\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          git pull --rebase origin master\n\n          tempdir=$(mktemp -d)\n          filename=\"Package.swift\"\n          curl -sfL -o \"$tempdir/$filename\" https://raw.github.com/swiftfiddle/swiftfiddle-lsp/main/Resources/ProjectTemplate/$filename\n          sed -i 's/swift-tools-version:5.5/swift-tools-version:5.4/g' \"$tempdir/Package.swift\"\n          swift package --package-path \"$tempdir\" dump-package > Resources/$filename.json\n\n          git add Resources/$filename.json\n          git diff-index --quiet HEAD || git commit -m \"Update $filename.json\"\n          git push origin master\n\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/docker-login@v1\n        with:\n          login-server: ${{ env.REGISTRY_NAME }}\n          username: ${{ env.REGISTRY_USERNAME }}\n          password: ${{ env.REGISTRY_PASSWORD }}\n\n      - name: Build and Push Docker Images\n        run: |\n          set -ex\n\n          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.RESOURCE_GROUP }}/${{ env.SERVICE_NAME }}:latest\n\n          docker build --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }} --rm --tag ${IMAGE_TAG} .\n          docker push ${IMAGE_TAG}\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: azure/setup-kubectl@v3\n      - uses: azure/login@v1\n        with:\n          creds: ${{ env.AZURE_CREDENTIALS }}\n      - uses: azure/aks-set-context@v3\n        with:\n          resource-group: ${{ env.RESOURCE_GROUP }}\n          cluster-name: ${{ env.CLUSTER_NAME }}\n\n      - name: Deploy\n        run: |\n          set -ex\n\n          sed \"s/%COMMIT_SHA%/${{ github.sha }}/g;\" \"k8s/pod_template.yaml\" | kubectl apply -f -\n\n          kubectl rollout status deployment/${{ env.SERVICE_NAME }}\n          kubectl get services -o wide\n\n  purge_cache:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - name: Purge Cache\n        run: |\n          curl -X POST \"https://api.cloudflare.com/client/v4/zones/${{ env.CLOUDFLARE_ZONE_ID }}/purge_cache\" \\\n            -H \"X-Auth-Email: ${{ env.CLOUDFLARE_EMAIL }}\" \\\n            -H \"X-Auth-Key: ${{ env.CLOUDFLARE_API_KEY }}\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"purge_everything\":true}'\n\n  test:\n    runs-on: ubuntu-latest\n    needs: deploy\n    steps:\n      - uses: actions/checkout@v3\n      - name: Test\n        run: |\n          set -ex\n\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"latest\"}'\n          curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n            -H \"Content-Type:application/json\" \\\n            --data '{\"code\":\"print(\\\"Hello, World!\\\")\",\"toolchain_version\":\"stable\"}'\n\n          versions=$(curl --silent -X GET \"https://swiftfiddle.com/versions\" -H \"Content-Type:application/json\")\n          len=$(echo $versions | jq length)\n          for i in $( seq 0 $(($len - 1)) ); do\n            version=$(echo $versions | jq .[$i])\n            curl --silent --show-error --fail -i -X POST \"https://swiftfiddle.com/run\" \\\n              -H \"Content-Type:application/json\" \\\n              --data \"{\\\"code\\\":\\\"print(\\\\\\\"Hello, World!\\\\\\\")\\\",\\\"toolchain_version\\\":$version}\"\n          done\n```"}
{"id": "63c497fb517fc08c1eeda8d8", "level": "level5", "llm_response": "```yaml\nname: Support Requests\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    id: action\n    runs-on: ubuntu-latest\n    steps:\n      - name: Support Requests\n        uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: support\n          issue-comment: \ud83d\udc4b We use the issue tracker exclusively for bug reports and feature requests. However, this issue appears to be a support request. Please use our [support channels](https://github.com/kivy/kivy-ios/blob/master/README.md#support) to get help with the project.\n\n          If you're having trouble installing or using kivy-ios, maybe you could be interested to [installation and requirements](https://github.com/kivy/kivy-ios/blob/master/README.md#installation--requirements).\n\n          Let us know if this comment was made in error, and we'll be happy to reopen the issue.\n          close-issue: true\n          lock-issue: false\n```", "answer": "```yaml name: 'Support Requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\npermissions:\n  issues: write\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'support'\n          issue-comment: >\n            \ud83d\udc4b We use the issue tracker exclusively for bug reports and feature requests.\n            However, this issue appears to be a support request. Please use our\n            [support channels](https://github.com/kivy/kivy-ios/blob/master/README.md#support)\n            to get help with the project.\n            \n            \n            If you're having trouble installing or using kivy-ios,\n            maybe you could be interested to [installation and requirements](https://github.com/kivy/kivy-ios/blob/master/README.md#installation--requirements).\n            \n            \n            Let us know if this comment was made in error, and we'll be happy\n            to reopen the issue.\n          close-issue: true\n          lock-issue: false```"}
{"id": "63c49e0d1899db58865040a6", "level": "level5", "llm_response": "```yaml\nname: pull-request-lint\n\non:\n  pull_request:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\n\njobs:\n  validate:\n    id: validate\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - name: ''\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        uses: amannn/action-semantic-pull-request@v3.4.6\n        with:\n          types: 'feat\\nfix\\nchore'\n          requireScope: 'False'\n```", "answer": "```yaml # ~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\".\n\nname: pull-request-lint\non:\n  pull_request_target:\n    types:\n      - labeled\n      - opened\n      - synchronize\n      - reopened\n      - ready_for_review\n      - edited\njobs:\n  validate:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n    steps:\n      - uses: amannn/action-semantic-pull-request@v3.4.6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |-\n            feat\n            fix\n            chore\n          requireScope: false\n```"}
{"id": "63c497c61899db58864dbc6a", "level": "level5", "llm_response": "```yaml\nname: Manage the hold label\n\non:\n  workflow_dispatch:\n    inputs:\n      action:\n        description: 'Action to perform'\n        required: true\n        type: string\n        enum: ['hold-command', 'unhold-command']\n\njobs:\n  hold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.action == 'hold-command'\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: ${{ secrets.CI_TOKEN }}\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n\n  unhold:\n    runs-on: ubuntu-latest\n    if: github.event.inputs.action == 'unhold-command'\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: ${{ secrets.CI_TOKEN }}\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n```", "answer": "```yaml name: Manage the hold label\non:\n  repository_dispatch:\n    types:\n      - hold-command\n      - unhold-command\n\njobs:\n  hold:\n    name: Add hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'hold-command'\n\n    steps:\n      - name: Add the hold label to avoid merging\n        uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n\n  unhold:\n    name: Remove the hold label\n    runs-on: ubuntu-latest\n    if: github.event.action == 'unhold-command'\n\n    steps:\n      - name: Remove the hold label to allow merging\n        uses: actions-ecosystem/action-remove-labels@v1\n        with:\n          github_token: \"${{ secrets.CI_TOKEN }}\"\n          number: ${{ github.event.client_payload.github.payload.issue.number }}\n          labels: hold\n\n      - name: Report status as reaction\n        uses: peter-evans/create-or-update-comment@v2\n        with:\n          token: ${{ secrets.CI_TOKEN }}\n          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}\n          reactions: hooray\n```"}
{"id": "63c5ae9f6b748c7b1fadf422", "level": "level5", "llm_response": "```yaml\nname: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: 'Run with tmate debugging'\n        required: false\n        type: boolean\n        default: false\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```", "answer": "```yaml name: Molecule - Zsh\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.zsh.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/zsh/**\n      - roles/zsh/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  zsh:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: zsh\n```"}
{"id": "63c49742517fc08c1eed5bcf", "level": "level5", "llm_response": "```yaml\nname: Lint Format\n\non:\n  push:\n    branches:\n      - master\n      - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Disable automatic eol conversion\n        run: echo \"* -text\" > .git/info/attributes\n\n      - name: Install dependencies\n        run: pip3 install -r requirements-dev.txt\n\n      - name: Run qmk formatters\n        run: |\n          qmk format-c -a\n          qmk format-python -a\n          qmk format-text -a\n          git diff\n\n      - name: Set GitHub slug\n        uses: rlespinasse/github-slug-action@v3.x\n\n      - name: Become QMK Bot\n        run: |\n          git config user.name 'QMK Bot'\n          git config user.email 'hello@qmk.fm'\n\n      - name: Create Pull Request\n        if: github.repository == 'qmk/qmk_firmware'\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.QMK_BOT_TOKEN }}\n          delete-branch: true\n          branch: bugfix/format_${{ env.GITHUB_REF_SLUG }}\n          author: QMK Bot <hello@qmk.fm>\n          committer: QMK Bot <hello@qmk.fm>\n          commit-message: Format code according to conventions\n          title: '[CI] Format code according to conventions'\n```", "answer": "```yaml name: Lint Format\n\non:\n  push:\n    branches:\n    - master\n    - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    container: qmkfm/qmk_cli\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n\n    - name: Disable automatic eol conversion\n      run: |\n        echo \"* -text\" > .git/info/attributes\n\n    - name: Install dependencies\n      run: |\n        pip3 install -r requirements-dev.txt\n\n    - name: Run qmk formatters\n      shell: 'bash {0}'\n      run: |\n        qmk format-c -a\n        qmk format-python -a\n        qmk format-text -a\n        git diff\n\n    - uses: rlespinasse/github-slug-action@v3.x\n\n    - name: Become QMK Bot\n      run: |\n        git config user.name 'QMK Bot'\n        git config user.email 'hello@qmk.fm'\n\n    - name: Create Pull Request\n      uses: peter-evans/create-pull-request@v4\n      if: ${{ github.repository == 'qmk/qmk_firmware'}}\n      with:\n        token: ${{ secrets.QMK_BOT_TOKEN }}\n        delete-branch: true\n        branch: bugfix/format_${{ env.GITHUB_REF_SLUG }}\n        author: QMK Bot <hello@qmk.fm>\n        committer: QMK Bot <hello@qmk.fm>\n        commit-message: Format code according to conventions\n        title: '[CI] Format code according to conventions'\n```"}
{"id": "63c49ae81899db58864f05dc", "level": "level5", "llm_response": "```yaml\nname: Web-Ext lint\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  lint:\n    id: lint\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: web-ext lint\n        uses: kewisch/action-web-ext@v1\n        with:\n          cmd: lint\n          source: src\n          channel: listed\n```", "answer": "```yaml name: Web-Ext lint\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: \"Lint\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: \"web-ext lint\"\n        uses: kewisch/action-web-ext@v1\n        with:\n          cmd: lint\n          source: src\n          channel: listed\n```"}
{"id": "63c49ea41842bc13d7792231", "level": "level5", "llm_response": "```yaml\nname: Require PR Labels\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  pull_request_target:\n    types: [opened, synchronize, reopened]\n  pull_request_review:\n    types: [submitted]\n  pull_request_review_comment:\n    types: [created, edited, deleted]\n  label:\n    types: [added, removed]\n\njobs:\n  check-labels:\n    id: check-labels\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```", "answer": "```yaml name: Require PR Labels\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  check-labels:\n    uses: nvidia-merlin/.github/.github/workflows/require-label.yaml@main\n```"}
{"id": "63c49a4033b087f6bde447f3", "level": "level5", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    id: deploy\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7\n        with:\n          bundler-cache: true\n\n      - name: Run tests\n        run: bundle exec rake\n\n      - name: Deploy to Heroku\n        uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820\n        with:\n          heroku_api_key: ${{secrets.HEROKU_API_KEY}}\n          heroku_app_name: devdocs\n          heroku_email: team@freecodecamp.com\n          dontuseforce: true\n          dontautocreate: true\n```", "answer": "```yaml name: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: Deploy to Heroku\n    runs-on: ubuntu-20.04\n    if: github.repository == 'freeCodeCamp/devdocs'\n    steps:\n    - uses: actions/checkout@e2f20e631ae6d7dd3b768f56a5d2af784dd54791 # tag=v2.5.0\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@eae47962baca661befdfd24e4d6c34ade04858f7 # tag=v1.118.0\n      with:\n        bundler-cache: true # runs 'bundle install' and caches installed gems automatically\n    - name: Run tests\n      run: bundle exec rake\n    - name: Deploy to Heroku\n      uses: akhileshns/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820 # tag=v3.12.12\n      with:\n        heroku_api_key: ${{secrets.HEROKU_API_KEY}}\n        heroku_app_name: \"devdocs\"\n        heroku_email: \"team@freecodecamp.com\"\n        dontuseforce: true # --force should never be necessary\n        dontautocreate: true # The app exists, it should not be created\n```"}
{"id": "63c49f576fc19abdf9cd5856", "level": "level5", "llm_response": "```yaml\nname: Move new issues to correct docs repo\n\non:\n  issues:\n    types: [opened, transferred, reopened]\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    if: github.repository == 'github/docs-internal'\n    continue-on-error: true\n\n    steps:\n    - name: Move to correct repo\n      id: move_to_correct_repo\n      env:\n        TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}\n        TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}\n      uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n      with:\n        github-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n        script: |\n          const issueNo = context.issue.number\n          const owner = 'github'\n          const originalRepo = 'docs-internal'\n\n          // See if the engineering label is present.\n          const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')\n\n          // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo\n          let correctRepo = process.env.TEAM_CONTENT_REPO\n          if (engineeringLabel) {\n            correctRepo = process.env.TEAM_ENGINEERING_REPO\n          }\n\n          const correctRepoObject = await github.repos.get({\n            owner: owner,\n            repo: correctRepo\n          })\n\n          // Post a comment in the docs-internal issue\n          await github.issues.createComment({\n            owner: owner,\n            repo: originalRepo,\n            issue_number: issueNo,\n            body: `\ud83d\udc4b  You opened this issue in '${context.repo.repo}'. Moving forward, we're asking that folks create new issues in the following repositories instead:\\n- For issues with the docs site, please submit to the [${process.env.TEAM_ENGINEERING_REPO}](/${owner}/${process.env.TEAM_ENGINEERING_REPO}) repo.\\n- For all new content issues, please submit to the [${process.env.TEAM_CONTENT_REPO}](/${owner}/${process.env.TEAM_CONTENT_REPO}) repo.\\n\\nWe will transfer this issue for you!`\n          })\n\n          // Transfer the issue to the correct repo\n          const issueNodeId = context.payload.issue.node_id\n          const correctRepositoryNodeId = correctRepoObject.data.node_id\n          console.log(`Issue GraphQL Node ID: ${issueNodeId}`)\n          console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)\n\n          const mutation = `mutation ($id: ID!, $repositoryId: ID!) {\n            transferIssue(input: {\n              issueId: $id,\n              repositoryId: $repositoryId\n            }) {\n              issue {\n                url,\n                number\n              }\n            }\n          }`\n\n          const variables = {\n            id: issueNodeId,\n            repositoryId: correctRepositoryNodeId\n          }\n\n          const graph = await github.graphql(mutation, variables)\n          console.log('GraphQL mutation result:\\n' + JSON.stringify(graph))\n\n          // Add the same labels to the new issue\n          const newIssueNumber = graph.transferIssue.issue.number\n          await github.issues.addLabels({\n            owner: owner,\n            repo: correctRepo,\n            issue_number: newIssueNumber,\n            labels: context.payload.issue.labels.map(label => label.name),\n          })\n```", "answer": "```yaml name: Move new issues to correct docs repo\n\n# **What it does**: If anyone creates an issue in the docs-internal repo for the engineering team or the content team, move that issue and notify the author\n# **Why we have it**: We don't want engineering or content issues in the docs-internal repo\n# **Who does it impact**: GitHub staff.\n\non:\n  issues:\n    types:\n      - opened\n      - transferred\n      - reopened\n\npermissions:\n  contents: none\n\njobs:\n  transfer_issue:\n    runs-on: ubuntu-latest\n    continue-on-error: true\n    if: github.repository == 'github/docs-internal'\n    steps:\n      - id: move_to_correct_repo\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        env:\n          TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}\n          TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}\n        with:\n          github-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n          script: |\n            const issueNo = context.issue.number\n            const owner = 'github'\n            const originalRepo = 'docs-internal'\n\n            // See if the engineering label is present.\n            const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')\n\n            // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo\n            let correctRepo = process.env.TEAM_CONTENT_REPO\n            if (engineeringLabel) {\n              correctRepo = process.env.TEAM_ENGINEERING_REPO\n            }\n\n            const correctRepoObject = await github.repos.get({\n              owner: owner,\n              repo: correctRepo\n            })\n\n            // Post a comment in the docs-internal issue\n            await github.issues.createComment({\n              owner: owner,\n              repo: originalRepo,\n              issue_number: issueNo,\n              body: `\ud83d\udc4b  You opened this issue in '${context.repo.repo}'. Moving forward, we're asking that folks create new issues in the following repositories instead:\\n- For issues with the docs site, please submit to the [${process.env.TEAM_ENGINEERING_REPO}](/${owner}/${process.env.TEAM_ENGINEERING_REPO}) repo.\\n- For all new content issues, please submit to the [${process.env.TEAM_CONTENT_REPO}](/${owner}/${process.env.TEAM_CONTENT_REPO}) repo.\\n\\nWe will transfer this issue for you!`\n            })\n\n            // Transfer the issue to the correct repo\n            const issueNodeId = context.payload.issue.node_id\n            const correctRepositoryNodeId = correctRepoObject.data.node_id\n            console.log(`Issue GraphQL Node ID: ${issueNodeId}`)\n            console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)\n\n            const mutation = `mutation ($id: ID!, $repositoryId: ID!) {\n              transferIssue(input: {\n                issueId: $id,\n                repositoryId: $repositoryId\n              }) {\n                issue {\n                  url,\n                  number\n                }\n              }\n            }`\n\n            const variables = {\n              id: issueNodeId,\n              repositoryId: correctRepositoryNodeId\n            }\n\n            const graph = await github.graphql(mutation, variables)\n            console.log('GraphQL mutation result:\\n' + JSON.stringify(graph))\n\n            // Add the same labels to the new issue\n            const newIssueNumber = graph.transferIssue.issue.number\n            await github.issues.addLabels({\n              owner: owner,\n              repo: correctRepo,\n              issue_number: newIssueNumber,\n              labels: context.payload.issue.labels.map(label => label.name),\n            })\n```"}
{"id": "63c4a057cbc73931bb1b9c62", "level": "level5", "llm_response": "```yaml\nname: close stale issues/PRs\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close stale issues/PRs\n        uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: ''\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n          exempt-issue-labels: 'Status: Backlog,Status: In Progress'\n          stale-issue-label: 'Status: Stale'\n          stale-issue-message: 'This issue has gone three weeks without activity. In another week, I will close it.\n\nBut! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n----\n\n\"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40'\n          skip-stale-issue-message: false\n          close-issue-label: ''\n          close-issue-message: ''\n          exempt-pr-labels: 'Status: Backlog,Status: In Progress'\n          stale-pr-label: 'Status: Stale'\n          stale-pr-message: 'This pull request has gone three weeks without activity. In another week, I will close it.\n\nBut! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n----\n\n\"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40'\n          skip-stale-pr-message: false\n          close-pr-label: none\n          close-pr-message: ''\n```", "answer": "```yaml name: \"close stale issues/PRs\"\non:\n  schedule:\n    - cron: \"0 0 * * *\"\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label:\n          close-pr-message: \"\"\n```"}
{"id": "63c49f61736e7f0ed8c6df4d", "level": "level5", "llm_response": "```yaml\nname: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - packages/**/package.json\n      - examples/src\n      - .github/workflows/sandpack.yml\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          fetch-depth: 150\n\n      - name: Install\n        run: yarn add -D plop@3.1.1\n\n      - name: Update Code in Sandpack\n        run: yarn gen:code\n\n      - name: Update Version in Sandpack\n        run: yarn gen:v\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: Version Sandpack\n          body: Update Sandpack dependencies. Check the preview before merging.\n          commit-message: docs\n          committer: GitHub <noreply@github.com>\n          branch: docs/sandpack\n          delete-branch: true\n```", "answer": "```yaml name: Sandpack\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'packages/**/package.json'\n      - 'examples/src'\n      - '.github/workflows/sandpack.yml'\n\njobs:\n  release:\n    name: Update Sandpack\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@master\n        with:\n          # To run comparison we need more than the latest commit. Keep the fetch-depth relatively\n          # high or set it to zero to get all commits from the git repo.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 150\n \n      - name: Install\n        run: yarn add -D plop@3.1.1\n \n      - name: Update Code in Sandpack\n        run: yarn gen:code\n        \n      - name: Update Version in Sandpack\n        run: yarn gen:v\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          title: 'Version Sandpack'\n          body: |\n            Update Sandpack dependencies. Check the preview before merging.\n          commit-message: docs\n          committer: GitHub <noreply@github.com>\n          branch: docs/sandpack\n          delete-branch: true\n```"}
{"id": "63c495927843b61269a087ec", "level": "level5", "llm_response": "```yaml\nname: update changelog\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```", "answer": "```yaml name: update changelog\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```"}
{"id": "63c498c3cbc73931bb1892bc", "level": "level5", "llm_response": "```yaml\nname: Push to BitBucket\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    id: repo-sync\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          ref: master\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          name: id_rsa\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n\n      - name: Push to BitBucket\n        run: |\n          git remote add bitbucket git@bitbucket.org:DmitryKrutskikh/dart-code-metrics.git\n          git config --global user.email \"dmitry.krutskikh@gmail.com\"\n          git config --global user.name \"Dmitry Krutskikh\"\n          git checkout master\n          git push -u bitbucket master\n```", "answer": "```yaml name: \"Push to BitBucket\"\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  repo-sync:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: \"0\"\n          ref: \"master\"\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2.3.1\n        with:\n          key: ${{ secrets.SSH_PRIVATE_KEY }}\n          name: id_rsa\n          known_hosts: ${{ secrets.KNOWN_HOSTS }}\n\n      - run: |\n          git remote add bitbucket git@bitbucket.org:DmitryKrutskikh/dart-code-metrics.git\n          git config --global user.email \"dmitry.krutskikh@gmail.com\"\n          git config --global user.name \"Dmitry Krutskikh\"\n          git checkout master\n          git push -u bitbucket master\n```"}
{"id": "63c4994933b087f6bde3e523", "level": "level5", "llm_response": "```yaml\nname: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n\n    - name: Install pip for rosdep\n      run: |\n        sudo apt-get -y update\n        sudo apt-get -y install python3-pip\n\n    - name: Register AutonomouStuff repository\n      uses: autonomoustuff/autoware-github-actions/register-autonomoustuff-repository@v1\n      with:\n        rosdistro: galactic\n\n    - name: Set git config\n      uses: autonomoustuff/autoware-github-actions/set-git-config@v1\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Run vcs import\n      run: |\n        mkdir src\n        vcs import src < autoware.repos\n\n    - name: Run vcs export\n      run: vcs export --exact src || true\n\n    - name: Run rosdep install\n      run: |\n        sudo apt-get -y update\n        rosdep update\n        DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro galactic\n```", "answer": "```yaml name: vcs-import\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  vcs-import:\n    runs-on: ubuntu-latest\n    container: ros:galactic\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Install pip for rosdep\n        run: |\n          sudo apt-get -y update\n          sudo apt-get -y install python3-pip\n\n      - name: Register AutonomouStuff repository\n        uses: autowarefoundation/autoware-github-actions/register-autonomoustuff-repository@v1\n        with:\n          rosdistro: galactic\n\n      - name: Set git config\n        uses: autowarefoundation/autoware-github-actions/set-git-config@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Run vcs import\n        run: |\n          mkdir src\n          vcs import src < autoware.repos\n\n      - name: Run vcs export\n        run: |\n          vcs export --exact src || true\n\n      - name: Run rosdep install\n        run: |\n          sudo apt-get -y update\n          rosdep update\n          DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro galactic\n```"}
{"id": "63c495778052faa2781b1fcd", "level": "level5", "llm_response": "```yaml\nname: Autolocker\n\non:\n  pull_request:\n    types: [closed]\n\npermissions:\n  contents: write\n  issues: write\n\njobs:\n  autolock:\n    id: autolock\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |\n          github.rest.issues.lock({\n            issue_number: context.issue.number,\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            lock_reason: \"resolved\"\n          })\n```", "answer": "```yaml name: Autolocker\n\non:\n  pull_request_target:\n    types: [closed]\n\npermissions: write-all\n\njobs:\n  autolock:\n#     if: ${{ github.event.pull_request.merged }} # Uncomment if you want it to run only when a PR gets MERGED\n    runs-on: ubuntu-latest\n    name: Autolocker\n    steps:\n    - name: Autolock PRs that got merged or closed\n      uses: actions/github-script@v6\n      with:\n        script: |     \n            github.rest.issues.lock({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              lock_reason: \"resolved\" // [\"off-topic\", \"too heated\", \"resolved\", \"spam\"]\n            })\n```"}
{"id": "63c49fbe517fc08c1ef0b986", "level": "level5", "llm_response": "```yaml\nname: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Cache npm dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: ${{ runner.os }}-node-\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://stopcovid19.metro.tokyo.lg.jp/\n            https://stopcovid19-tokyo-staging.web.app/\n          uploadArtifacts: True\n\n      - name: Use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.13.0\n\n      - name: Install csv2md\n        run: npm install -g csv2md\n\n      - name: Summary\n        run: |\n          export LH_SUMMARY_FILE=\"${GITHUB_WORKSPACE}/.lighthouseci/result.md\"\n          echo \"LH_SUMMARY_FILE=${LH_SUMMARY_FILE}\" >> $GITHUB_ENV\n          cat \"${GITHUB_WORKSPACE}/.lighthouseci/\"lhr-*.json \\\n          | jq -rs 'def formatScore(s):\n              \"https://img.shields.io\" as $baseUrl |\n              \"logo=lighthouse&logoColor=lightgray\" as $query |\n              if s == null then \"![-1](\\($baseUrl)/badge/\\(\"?\" | @uri)-error-inactive?\\($query))\"\n                elif s < 0.5 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-red-critical?\\($query))\"\n                elif s < 0.9 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-orange-important?\\($query))\"\n                else \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-green-success?\\($query))\"\n              end;\n              [\"Metrics\", \"Score\", \"URL\"], ( [.[] | .requestedUrl as $url | .categories[] | {\n                metrics: .title,\n                score: formatScore(.score),\n                url: $url\n              } ] | sort_by(.metrics) | .[] | [.metrics, .score, .url] ) | @csv' \\\n          | csv2md | tee \"${LH_SUMMARY_FILE}\"\n\n      - name: Post summary to issue\n        uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs')\n            const table = fs.readFileSync(process.env.LH_SUMMARY_FILE, 'utf8')\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `<h4>Audit&nbsp;<a\n                  href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\"\n                  target=\"_blank\"><sup>[?]</sup></a></h4>\\n\\n${table}\\n\\n`.trim()\n            })\n```", "answer": "```yaml name: Audit staging URLs\n\non:\n  pull_request:\n    branches:\n      - staging\n\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Audit URLs using Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://stopcovid19.metro.tokyo.lg.jp/\n            https://stopcovid19-tokyo-staging.web.app/\n          uploadArtifacts: true\n\n      - name: Use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.13.0'\n      - run: npm install -g csv2md\n\n      # https://stedolan.github.io/jq/manual/\n      # https://shields.io/\n      - name: Summary\n        run: |\n          export LH_SUMMARY_FILE=\"${GITHUB_WORKSPACE}/.lighthouseci/result.md\"\n          echo \"LH_SUMMARY_FILE=${LH_SUMMARY_FILE}\" >> $GITHUB_ENV\n          cat \"${GITHUB_WORKSPACE}/.lighthouseci/\"lhr-*.json \\\n          | jq -rs 'def formatScore(s):\n              \"https://img.shields.io\" as $baseUrl |\n              \"logo=lighthouse&logoColor=lightgray\" as $query |\n              if s == null then \"![-1](\\($baseUrl)/badge/\\(\"?\" | @uri)-error-inactive?\\($query))\"\n                elif s < 0.5 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-red-critical?\\($query))\"\n                elif s < 0.9 then \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-orange-important?\\($query))\"\n                else \"![\\(s)](\\($baseUrl)/badge/\\( s * 100 )-green-success?\\($query))\"\n              end;\n              [\"Metrics\", \"Score\", \"URL\"], ( [.[] | .requestedUrl as $url | .categories[] | {\n                metrics: .title,\n                score: formatScore(.score),\n                url: $url\n              } ] | sort_by(.metrics) | .[] | [.metrics, .score, .url] ) | @csv' \\\n          | csv2md | tee \"${LH_SUMMARY_FILE}\"\n\n      - uses: actions/github-script@v6.3.3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const fs = require('fs')\n            const table = fs.readFileSync(process.env.LH_SUMMARY_FILE, 'utf8')\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: `<h4>Audit&nbsp;<a\n                  href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\"\n                  target=\"_blank\"><sup>[?]</sup></a></h4>\\n\\n${table}\\n\\n`.trim()\n            })\n```"}
{"id": "63c4982f6fc19abdf9ca783f", "level": "level5", "llm_response": "```yaml\nname: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n\ninputs:\n  name-this:\n    description: 'Build and publish an fbpcf/aws-s3-core image for a particular version'\n    required: false\n    default: 'Run'\n    type: string\n  aws_release:\n    description: 'The aws s3 version to build and publish (e.g. 1.8.177)'\n    required: true\n    type: string\n  os:\n    description: 'Which os to use. Currently only supports ubuntu'\n    required: false\n    default: 'ubuntu'\n    type: string\n  os_release:\n    description: 'The os version to use (e.g. 20.04 for ubuntu)'\n    required: false\n    default: '20.04'\n    type: string\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Log into registry ${{ env.REGISTRY }}\n      uses: docker/login-action@v1\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Build image\n      run: |\n        docker build \\\n        --build-arg os_release=${{ github.event.inputs.os_release }} \\\n        --build-arg aws_release=${{ github.event.inputs.aws_release }} \\\n        -t \"fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\" \\\n        -f \"docker/aws-s3-core/Dockerfile.${{ github.event.inputs.os }}\" .\n\n    - name: Tag image\n      run: |\n        docker tag fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }} \\\n        ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\n\n    - name: Publish image\n      run: |\n        docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core\n```", "answer": "```yaml name: Build and publish aws s3 dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/aws-s3-core image for a particular version\"\n        default: \"Run\"\n      aws_release:\n        description: \"The aws s3 version to build and publish (e.g. 1.8.177)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg aws_release=${{ github.event.inputs.aws_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\" \\\n          -f \"docker/aws-s3-core/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core:${{ github.event.inputs.aws_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-aws-s3-core\n```"}
{"id": "63c49f326fc19abdf9cd4900", "level": "level5", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n\njobs:\n  test:\n    id: test\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n      - name: Test\n        run: |\n          pwsh ./build.ps1 -Task Test -Bootstrap\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    name: Run Tests\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    steps:\n    - uses: actions/checkout@v1\n    - name: Test\n      shell: pwsh\n      run: ./build.ps1 -Task Test -Bootstrap\n```"}
{"id": "63c49dbd1842bc13d778c451", "level": "level5", "llm_response": "```yaml\nname: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - web/po/*.po\n      - backend/po/*.po\n      - susemanager/po/*.po\n      - spacecmd/po/*.po\n      - java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml\n      - java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml\n      - !java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml\n      - client/rhel/yum-rhn-plugin/po/*.po\n      - client/rhel/mgr-daemon/po/*.po\n      - client/rhel/spacewalk-client-tools/po/*.po\n\njobs:\n  run:\n    if: github.repository == 'uyuni-project/uyuni'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          access_token: ${{ github.token }}\n\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n      - name: Setup tooling\n        run: sudo apt-get install -y make git gettext intltool python3\n\n      - name: Setup git\n        run: |\n          git config --global user.name \"Galaxy CI\"\n          git config --global user.email \"galaxy-ci@suse.de\"\n\n      - name: Align translations files\n        env:\n          ADDITIONAL_SAFE_BRANCHNAME: master\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n        run: scripts/translation/update-all-translation-strings.sh\n\n      - name: Push changes\n        run: git push origin HEAD\n```", "answer": "```yaml name: Update translation files\n\non:\n  push:\n    branches:\n      - master-weblate\n    paths:\n      - 'web/po/*.po'\n      - 'backend/po/*.po'\n      - 'susemanager/po/*.po'\n      - 'spacecmd/po/*.po'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/database/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/java/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/jsp/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/nav/StringResource_en_US.xml'\n      - 'java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_*.xml'\n      - '!java/code/src/com/redhat/rhn/frontend/strings/template/StringResource_en_US.xml'\n      - 'client/rhel/yum-rhn-plugin/po/*.po'\n      - 'client/rhel/mgr-daemon/po/*.po'\n      - 'client/rhel/spacewalk-client-tools/po/*.po'\n\njobs:\n run:\n   name: Update translation files\n   if: github.repository == 'uyuni-project/uyuni'\n   runs-on: ubuntu-latest\n   steps:\n   - name: Cancel Previous Runs\n     uses: styfle/cancel-workflow-action@0.10.0\n     with:\n         access_token: ${{ github.token }}\n\n   - name: Checkout repo\n     uses: actions/checkout@v3\n     with:\n       token: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Setup tooling\n     run: sudo apt-get install -y make git gettext intltool python3\n\n   - name: Setup git\n     run: |\n       git config --global user.name \"Galaxy CI\"\n       git config --global user.email \"galaxy-ci@suse.de\"\n\n   - name: Align translations files\n     run: scripts/translation/update-all-translation-strings.sh\n     env:\n       ADDITIONAL_SAFE_BRANCHNAME: master\n       GITHUB_TOKEN: ${{ secrets.GH_TOKEN_GALAXY_CI }}\n\n   - name: Push changes\n     run: git push origin HEAD\n```"}
{"id": "63c49e1a1842bc13d778e9d5", "level": "level5", "llm_response": "```yaml\nname: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: yarn\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Run unit test\n        run: yarn test:unit\n\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n\n  browser-test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: yarn\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Run browser test\n        run: yarn test:browser\n\n  performance-test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: yarn\n\n      - name: Install dependencies\n        run: yarn install\n\n      - name: Run performance test\n        run: yarn test:performance\n```", "answer": "```yaml name: Js-sdsl test CI\n\non:\n  push:\n    branches:\n      - dev\n  pull_request:\n    branches:\n      - dev\n      - main\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run unit test\n        run: yarn test:unit\n      - name: Coveralls report\n        uses: coverallsapp/github-action@master\n        with:\n          github-token: ${{ github.token }}\n  browser-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run browser test\n        run: yarn test:browser\n  performance-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n      - name: Use node.js lts/Gallium\n        uses: actions/setup-node@v3\n        with:\n          node-version: lts/Gallium\n          cache: 'yarn'\n      - name: Install dependencies\n        run: yarn install\n      - name: Run performance test\n        run: yarn test:performance\n```"}
{"id": "63c49c8c517fc08c1eef7305", "level": "level5", "llm_response": "```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n    - name: Auto-merge Dependabot PRs\n      uses: ahmadnassri/action-dependabot-auto-merge@v2\n      with:\n        target: minor\n        github-token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2\n        with:\n          target: minor\n          github-token: ${{ secrets.DEPENDABOT_AUTOMERGE_TOKEN }}\n```"}
{"id": "63c49cd01e336480757a3424", "level": "level5", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    id: analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [go]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push: {}\n  pull_request: {}\n  schedule:\n    - cron: '20 23 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49bd9517fc08c1eef2fa7", "level": "level5", "llm_response": "```yaml\nname: Spell Check\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 8 * * 2'\n  workflow_dispatch:\n  repository_dispatch:\n    types: [spellcheck]\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: Spell check\n      uses: codespell-project/actions-codespell@master\n```", "answer": "```yaml name: Spell Check\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch new misspelling detections resulting from dictionary updates.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  spellcheck:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Spell check\n        uses: codespell-project/actions-codespell@master\n```"}
{"id": "63c4995a6fc19abdf9caf222", "level": "level5", "llm_response": "```yaml\nname: Update MagiskOnWSA\n\non:\n  schedule:\n    - cron: '0 0 * * 4'\n  workflow_dispatch:\n\npermissions:\n  actions: write\n  contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Rename tag\n      run: |\n        URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n        curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"tag_name\":\"outdated\"}' > /dev/null\n\n    - name: Delete tag\n      run: |\n        curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest\n\n    - name: Update MagiskOnWSA\n      run: |\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n        sleep 15m\n\n    - name: Publish release\n      run: |\n        URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n        curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"prerelease\":false}' > /dev/null\n\n    - name: Delete release\n      run: |\n        ID=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/outdated | jq -r .id)\"\n        curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/$ID\n        curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/outdated\n```", "answer": "```yaml name: Update MagiskOnWSA\non:\n  schedule:\n    - cron: \"0 0 * * 4\"\n  workflow_dispatch:\n\npermissions:\n    actions: write\n    contents: write\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Rename tag\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"tag_name\":\"outdated\"}' > /dev/null\n      - name: Delete tag\n        run: |\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest\n      - name: Update MagiskOnWSA\n        run: |\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Full\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"false\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"x86_64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"None\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Stable\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"None\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"Pico\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          curl -s -X POST -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yaml/dispatches -d '{\"ref\":\"master\",\"inputs\":{\"arch\":\"ARM64\",\"magisk_ver\":\"Canary\",\"gapps_var\":\"MindTheGapps\",\"title\":\"WSA\",\"tag\":\"latest\",\"prerelease\":\"true\"}}'\n          sleep 15m\n      - name: Publish release\n        run: |\n          URL=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/latest | jq -r .url)\"\n          curl -s -X PATCH -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" $URL -d '{\"prerelease\":false}' > /dev/null\n      - name: Delete release\n        run: |\n          ID=\"$(curl -s -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/tags/outdated | jq -r .id)\"\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/releases/$ID\n          curl -s -X DELETE -H \"Accept: application/vnd.github+json\" -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/outdated\n```"}
{"id": "63c4a1401899db5886518aff", "level": "level5", "llm_response": "```yaml\nname: Call commitlint\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    runs-on: ubuntu-latest\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```", "answer": "```yaml name: Call commitlint\non:\n  pull_request_target:\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  check_job:\n    uses: linuxdeepin/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c495f37843b61269a0b106", "level": "level5", "llm_response": "```yaml\nname: codeql\n\non:\n  push:\n    branches: [ main ]\n\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\n\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: initialize\n      if: success()\n      uses: github/codeql-action/init@v2\n      with:\n        languages: go\n\n    - name: autobuild\n      if: success()\n      uses: github/codeql-action/autobuild@v2\n\n    - name: analyze\n      if: success()\n      uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # Broadly based on example Github action from\n# https://github.com/github/codeql-action#usage\nname: codeql\n# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#permissions\n# https://github.com/github/codeql-action/issues/572\npermissions:\n  actions: read\n  contents: read\n  pull-requests: read\n  security-events: write\non:\n  push:\n    branches:\n      - main\njobs:\n  codeql:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n      - name: initialize\n        if: success()\n        uses: github/codeql-action/init@v2\n        with:\n          # Limit analysis to Go for now.\n          # Available languages: https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\n          languages: go\n      - name: autobuild\n        if: success()\n        uses: github/codeql-action/autobuild@v2\n      - name: analyze\n        if: success()\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f98cbc73931bb1b4f54", "level": "level5", "llm_response": "```yaml\nname: Sync To Gitee\n\non:\n  push:\n    branches: [ '*' ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ '*' ]\n  repository_dispatch:\n  delete:\n    branches: [ '*' ]\n    tags: [ '*' ]\n  create:\n    branches: [ '*' ]\n    tags: [ '*' ]\n\njobs:\n  sync:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Set up SSH key\n      run: echo \"${{ secrets.GITEE_PRIVATE_KEY }}\" | tee ~/.ssh/id_rsa | ssh-keygen -q -N \"\"\n      env:\n        SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n\n    - name: Sync repositories\n      uses: wearerequired/git-mirror-action@master\n      with:\n        source-repo: git@github.com:redleafnew/Chinese-STD-GB-T-7714-related-csl.git\n        destination-repo: git@gitee.com:redleafnew00/Chinese-STD-GB-T-7714-related-csl.git\n```", "answer": "```yaml name: Sync To Gitee  #\u540d\u5b57  \u53ef\u81ea\u5b9a\u4e49\non: [ push, delete, create ]  #\u89e6\u53d1\u6761\u4ef6   page_build\u8868\u793aGithub Page\u90e8\u7f72\u5b8c\u6210\u540e\u89e6\u53d1\njobs:\n  sync:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wearerequired/git-mirror-action@master #\u5f00\u6e90actions\u5305\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}\n        with:\n          source-repo: \"git@github.com:redleafnew/Chinese-STD-GB-T-7714-related-csl.git\" # github\u4ed3\u5e93\u5730\u5740\n          destination-repo: \"git@gitee.com:redleafnew00/Chinese-STD-GB-T-7714-related-csl.git\" # gitee\u4ed3\u5e93\u5730\u5740\n\n```"}
{"id": "63c4a0edcbc73931bb1bd96d", "level": "level5", "llm_response": "```yaml\nname: Unplugin Example\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  gh-pages:\n    id: gh-pages\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n\n      - name: Setup\n        run: npm i -g @antfu/ni\n\n      - name: Install\n        run: nci\n\n      - name: Build\n        run: nr build\n\n      - name: Install Example Dependencies & Build\n        run: pnpm -C examples/vite run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./examples/vite/dist\n          force_orphan: true\n```", "answer": "```yaml name: Unplugin Example\n\non:\n  push:\n    branches: [main]\n\njobs:\n  gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: Setup\n        run: npm i -g @antfu/ni\n\n      - name: Install\n        run: nci\n\n      - name: Build\n        run: nr build\n\n      - name: Install Example Dependencies & Build\n        run: pnpm -C examples/vite run build\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./examples/vite/dist\n          force_orphan: true\n```"}
{"id": "63c499bf1899db58864e8a2a", "level": "level5", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, synchronize, labeled, unlabeled]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Label PR\n        uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  - pull_request_target\n\njobs:\n  triage:\n    permissions:\n      contents: read\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v4\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a2db008460c1df2c5c9", "level": "level5", "llm_response": "```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, drafted]\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3\n\n    - name: Dispatch release event\n      uses: peter-evans/repository-dispatch@v2\n      with:\n        token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n        repository: ${{ github.repository }}\n        event-type: release\n        client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\" }'\n```", "answer": "```yaml name: Release\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    name: Trigger Build flow\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}\n          repository: ${{ github.repository }}\n          event-type: release\n          client-payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\n```"}
