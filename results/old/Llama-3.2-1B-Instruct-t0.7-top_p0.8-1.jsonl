{"id": "63c4990ccbc73931bb18b0e2", "level": "level1", "llm_response": "```yaml\nname: Test CI\non:\n  pull_request:\n    branches", "answer": "```yaml name: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n      - name: Install\n        run: |\n          npm install -g yarn\n          yarn\n        env:\n          CI: \"true\"\n      - name: Build\n        run: |\n          yarn build\n        env:\n          CI: \"true\"\n      - name: Check Circular Dependencies\n        run: |\n          yarn circular\n        env:\n          CI: \"true\"\n      - name: Test\n        run: |\n          yarn test\n        env:\n          CI: \"true\"\n      - name: Bench\n        run: |\n          node packages/core/build/examples/bench/queue.js\n        env:\n          CI: \"true\"\n```"}
{"id": "63c4a1971842bc13d77a4d18", "level": "level1", "llm_response": "```yml\nname: Tribble\non:\n  event:\n    type", "answer": "```yaml name: Tribble\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: arctic-hen7/tribble-bot@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a15933b087f6bde71f6b", "level": "level1", "llm_response": "```yml\nname: Create a Release\non:\n  push:\n   ", "answer": "```yaml name: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc*'\n\njobs:\n  release:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get the version\n        id: get_version\n        run: |\n          echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n          echo \"TRIMMED_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n\n      - name: REUSE Compliance Check\n        uses: fsfe/reuse-action@v1\n        with:\n          args: spdx -o zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: upload-results\n        uses: actions/upload-artifact@v3\n        continue-on-error: True\n        with:\n          name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: Create empty release notes body\n        run: |\n          echo \"TODO: add release overview and notes link\" > release-notes.txt\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Zephyr ${{ steps.get_version.outputs.TRIMMED_VERSION }}\n          body_path: release-notes.txt\n          draft: true\n          prerelease: true\n\n      - name: Upload Release Assets\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_content_type: text/plain\n```"}
{"id": "63c49f7a1e336480757b40f4", "level": "level1", "llm_response": "```yml\n---\nname: Lint\n\non:\n  pull_request:\n", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire ethermint repository This workflow is\n# run on every pull request and push to main The `golangci` will pass without\n# running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: Run golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      # Required: setup-go, for all versions v3.0.0+ of golangci-lint\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.3\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.\n          version: v1.46.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        # Check only if there are differences in the source code\n        if: \"env.GIT_DIFF\"\n  markdown-lint:\n    name: Run markdown-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            docs/**/*.md\n            x/**/*.md\n            README.md\n      - uses: nosborn/github-action-markdown-cli@v3.2.0\n        with:\n          files: .\n          config_file: .markdownlint.yml\n          ignore_path: .markdownlintignore\n        # Check only if there are differences in the source code\n        if: env.GIT_DIFF\n```"}
{"id": "63c494e18052faa2781adf47", "level": "level1", "llm_response": "```yml\nname: Lint I18N\non:\n  push", "answer": "```yaml name: Lint I18N\n\non:\n  push:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n\npermissions:\n  contents: read\n\n# Cancels all previous workflow runs for pull requests that have not completed.\nconcurrency:\n  # The concurrency group contains the workflow name and the (target) branch name.\n  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Install WP-CLI\n        run: |\n          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n          chmod +x wp-cli.phar\n          mkdir -p bin\n          mv wp-cli.phar bin/wp\n          echo \"${PWD}/bin\" >> $GITHUB_PATH\n\n      - name: WP-CLI Info\n        run: wp cli info\n\n      - name: Install latest version of i18n-command\n        run: wp package install wp-cli/i18n-command:dev-main\n\n      - name: List packages\n        run: wp package list\n\n      - name: Setup Node\n        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516\n        with:\n          node-version-file: '.nvmrc'\n          cache: npm\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@e04e1d97f0c0481c6e1ba40f8a538454fe5d7709\n        with:\n          php-version: '8.0'\n          coverage: none\n          tools: composer\n\n      - name: Install dependencies\n        run: |\n          npm ci\n        env:\n          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true\n\n      - name: Install PHP dependencies\n        uses: ramsey/composer-install@f680dac46551dffb2234a240d65ae806c2999dd6\n        with:\n          composer-options: '--prefer-dist --no-progress --no-interaction'\n\n      - name: Build plugin\n        run: npm run build:js\n\n      - name: Bundle regular version\n        run: npm run workflow:build-plugin\n\n      # Check if as many strings as expected were found.\n      # Fail job if `wp i18n make-pot` returns any warnings.\n      # Some false positive warnings are removed due to a bug in the string extraction.\n      # That's why this step is unfortunately a bit more complex.\n      # See https://github.com/wp-cli/i18n-command/issues/154\n      - name: Generate POT file\n        run: |\n          OUTPUT=$((wp i18n make-pot build/web-stories build/web-stories.pot) 2>&1 >/dev/null)\n\n          HAS_ERROR=false\n\n          EXPECTED_NUMBER_OF_STRINGS=1000\n          NUMBER_OF_FOUND_STRINGS=$(grep -o msgstr build/web-stories.pot | wc -l | xargs)\n\n          if (( \"$NUMBER_OF_FOUND_STRINGS\" < \"$EXPECTED_NUMBER_OF_STRINGS\" )); then\n          HAS_ERROR=true\n            echo \"String extraction found only $NUMBER_OF_FOUND_STRINGS translatable strings. Expected at least $EXPECTED_NUMBER_OF_STRINGS.\"\n          fi\n\n          IFS=$'\\n'\n          declare -a WARNINGS=($OUTPUT)\n          unset IFS\n\n          for WARNING in \"${WARNINGS[@]}\"; do\n            # Filter false positives.\n            if [[ $WARNING == *\"translator comment\"* ]] && [[ $WARNING != *\"%s\"* ]]; then\n              continue\n            fi\n\n            HAS_ERROR=true\n\n          \techo $WARNING\n          done\n\n          if [[ \"$HAS_ERROR\" = true ]]; then\n            exit 1\n          fi\n```"}
{"id": "63c499881e3364807578e735", "level": "level1", "llm_response": "```yml\nname: Deploy to WordPress.org\non:\n  push:\n", "answer": "```yaml name: Deploy to WordPress.org\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  tag:\n    name: New tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: WordPress Plugin Deploy\n        uses: 10up/action-wordpress-plugin-deploy@master\n        env:\n          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}\n          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}\n```"}
{"id": "63c498546fc19abdf9ca87b3", "level": "level1", "llm_response": "```yml\nname: Build And Test, NETCORE\non:\n ", "answer": "```yaml # Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\n# .NET CLI: https://docs.microsoft.com/dotnet/core/tools/\n# Description: The purpose of this workflow is to compile and run unit tests.\n\nname: Build And Test, NETCORE\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-test-NETCORE:\n\n    runs-on: ${{ matrix.os }}\n\n    env:\n      SOLUTION: ./NETCORE/ApplicationInsights.AspNetCore.sln\n      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/TestResults\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        framework: [net452, net462, net472, net480, net481, netcoreapp3.1, net6.0, net7.0]\n        include: \n          - os: ubuntu-latest\n            args: \"--filter TestCategory!=WindowsOnly\"\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: |\n            3.1.x\n            6.0.x\n\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '7.0.x'\n        include-prerelease: true\n\n    - name: Restore\n      run: dotnet restore ${{ env.SOLUTION }}\n\n    - name: Build\n      run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore\n\n    - name: Test\n      id: test1\n      continue-on-error: true\n      run: dotnet test ${{ env.SOLUTION }} --framework ${{ matrix.framework }} --configuration Release --no-build --results-directory ${{ env.TEST_RESULTS_DIRECTORY }} --logger:\"console;verbosity=detailed\" --logger:\"trx;logfileprefix=testResults_\" ${{ matrix.args }}\n\n    - name: Retry tests\n      if: steps.test1.outcome=='failure'\n      run: pwsh -f ./.scripts/build_RetryTests.ps1 -TestResultsDirectory ${{ env.TEST_RESULTS_DIRECTORY }} -WorkingDirectory ${{ github.workspace }}\n```"}
{"id": "63c49c5933b087f6bde52309", "level": "level1", "llm_response": "```yaml\nname: TagBot\non:\n  branches:\n    - main", "answer": "```yaml name: TagBot\non:\n issue_comment:\n    types:\n      - created\n workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5ecbc73931bb1a68c1", "level": "level1", "llm_response": "```yml\nname: Release\non:\n  push:\n    branches:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - r[0-9]*\n\njobs:\n  release:\n    uses: evanchooly/workflows/.github/workflows/release.yml@master\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b11899db58865154dc", "level": "level1", "llm_response": "```yml\n---\nname: Node-CI\non:\n  pull_request", "answer": "```yaml name: Node-CI\n\non:\n  pull_request: ~\n  push:\n    branches: [main, changeset-release/*]\n\njobs:\n  node-tests:\n    runs-on: ubuntu-latest\n    name: 'Test (Node ${{ matrix.node-version }}, React ${{ matrix.react-version }})'\n    strategy:\n      fail-fast: false\n      matrix:\n        # The action will first check the local cache for a semver match.\n        # If unable to find a specific version in the cache,\n        # the action will attempt to download a version of Node.js.\n        # It will pull LTS versions from node-versions releases and on miss\n        # or failure will fall back to the previous behavior of downloading\n        # directly from node dist.\n        # https://github.com/actions/setup-node\n        node-version: ['14', '16']\n        react-version: ['17', '18']\n    timeout-minutes: 15\n\n    steps:\n      - uses: actions/checkout@v3\n        name: Checkout\n\n      - uses: actions/setup-node@v3\n        name: Use Node.js ${{ matrix.node-version }}\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'yarn'\n          check-latest: true\n\n      - uses: actions/cache@v3\n        name: Restore loom cache\n        with:\n          path: |\n            .loom\n            packages/*/build/ts\n            packages/*/build/*.tsbuildinfo\n          key: ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-\n\n      - name: \ud83d\udce6 Install dependencies\n        run: yarn --frozen-lockfile\n\n      - name: \ud83d\udd28 Build\n        run: yarn build\n\n      - name: \ud83d\udc85\ud83c\udffc Lint\n        run: |\n          yarn lint\n          yarn ci:lint-docs\n\n      - name: Unit tests\n        run: yarn test \"^(?:(?!(address|react-server)).)*$\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n\n      - name: E2E tests\n        run: yarn test --debug \"(address|react-server)\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n```"}
{"id": "63c4a04c736e7f0ed8c73b97", "level": "level1", "llm_response": "```yml\nname: Notify Comments on Issues\non:\n  branches:\n", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Notify Comments on Issues\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow on comment events on pending response issues\n  issue_comment:\n    types: [created]\n\n# Limit the GITHUB_TOKEN permissions\npermissions: {}\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"notify\"\n  notify:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    if: ${{ !github.event.issue.pull_request && !contains(fromJSON('[\"palpatim\", \"brennanMKE\", \"lawmicha\", \"harsh62\", \"thisisabhash\", \"ameter\", \"royjit\", \"atierian\", \"ukhan-amazon\", \"ruisebas\", \"phantumcode\"]'), github.event.comment.user.login) }}\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Runs a single command using the runners shell\n      - name: Run webhook curl command\n        env:\n          WEBHOOK_URL: ${{ secrets.SLACK_COMMENT_WEBHOOK_URL }}\n          COMMENT: ${{toJson(github.event.comment.body)}}\n        shell: bash\n        run: echo $COMMENT | sed \"s/\\\\\\n/. /g; s/\\\\\\r//g; s/[^a-zA-Z0-9 &().,:]//g\" | xargs -I {} curl -s POST \"$WEBHOOK_URL\" -H \"Content-Type:application/json\" --data '{\"comment\":\"{}\", \"commentUrl\":\"${{github.event.comment.html_url}}\", \"user\":\"${{github.event.comment.user.login}}\"}'\n```"}
{"id": "63c496df1842bc13d77600b8", "level": "level1", "llm_response": "```yml\nname: Tools\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tools\n\non:\n   push:\n    branches: [ master ]\n   pull_request:\n    branches: [ master ]\n\njobs:\n   build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: 6.0.x\n        \n    - name: Build FileAnalyzer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileAnalyzer/\n        \n    - name: Build FileExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileExtractor/\n        \n    - name: Build JsonSerializer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.JsonSerializer/\n      \n    - name: Build SystemTester\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.SystemTester/\n      \n    - name: Build TypeTreeExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.TypeTreeExtractor/\n      ```"}
{"id": "63c499c41842bc13d7772cde", "level": "level1", "llm_response": "```yml\n---\nname: PR Reviewer Checklist\non:\n  branch", "answer": "```yaml name: PR Reviewer Checklist\n\non: pull_request_review\n\njobs:\n  checklist:\n    runs-on: ubuntu-latest\n    if: github.actor != 'OSBotify'\n    steps:\n      - name: contributorChecklist.js\n        uses: Expensify/App/.github/actions/javascript/contributorChecklist@main\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CHECKLIST: 'reviewer'\n```"}
{"id": "63c499aa6fc19abdf9cb1361", "level": "level1", "llm_response": "```yaml\nname: Checks\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Checks\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  NODE_VERSION: '16'\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    types: [\n        synchronize, # PR was updated\n        opened, # PR was open\n        reopened, # PR was closed and is now open again\n        ready_for_review, # PR was converted from draft to open\n      ]\n\njobs:\n  checks:\n    name: Checks\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          token: ${{ env.GITHUB_TOKEN }}\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ env.NODE_VERSION }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Install Dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Check Docs\n        run: npm run check-docs\n\n      - name: Check Typing\n        run: npm run check-typing\n\n      - name: Check Formatting\n        run: npm run check-formatting\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Check Prepack\n        run: npm run prepack\n```"}
{"id": "63c497c31842bc13d7765b0d", "level": "level1", "llm_response": "```yml\nname: CI Switch/libnx\non:\n  branches:\n", "answer": "```yaml name: CI Switch/libnx\n\non:\n  push:\n  pull_request:\n  repository_dispatch:\n    types: [run_build]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container: \n      image: git.libretro.com:5050/libretro-infrastructure/libretro-build-libnx-devkitpro:latest\n      options: --user root\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Compile RA\n      run: |\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) clean\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) HAVE_STATIC_DUMMY=1\n    - name: Get short SHA\n      id: slug\n      run: echo \"::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)\"\n    \n    - uses: actions/upload-artifact@v3\n      with:\n        name: RA-libnx-dummy-${{ steps.slug.outputs.sha8 }}\n        path: |\n          retroarch_switch.nro\n```"}
{"id": "63c4a19633b087f6bde73627", "level": "level1", "llm_response": "```yml\nname: Package Trigger Scheduler\n\non:\n  - schedule:\n", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '10 7 * * 2'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-netbootxyz/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for netbootxyz** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-netbootxyz/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c497e61e3364807578414d", "level": "level1", "llm_response": "```yml\n---\nname: Continuous integration\n\non:\n  push:\n   ", "answer": "```yaml #-----------------------------------------------------------------------------\n#\n#  TSDuck - The MPEG Transport Stream Toolkit\n#  Copyright (c) 2005-2022, Thierry Lelegard\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  1. Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n#  THE POSSIBILITY OF SUCH DAMAGE.\n#\n#-----------------------------------------------------------------------------\n#\n#  GitHub Actions configuration file : Continuous Integration\n#\n#-----------------------------------------------------------------------------\n\nname: Continuous integration\n\n# Trigger the workflow on push or pull request, for master branch only.\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\n# Build on Ubuntu, macOS and Windows, using C++11 (C++14 on Windows) and C++20 levels of standards.\njobs:\n  build_unix:\n    strategy:\n      fail-fast: false\n      matrix:\n        # ubuntu-latest is currently ubuntu-20.04, too old for C++20, force ubuntu-22.04.\n        os: [ubuntu-22.04, macos-latest]\n        compiler: [gcc, clang]\n        std: [11, 20]\n        include:\n        - os: ubuntu-22.04\n          compiler: clang\n          llvm: true\n        - os: macos-latest\n          # It has been noted on GitHub macOS runners that the host name can change\n          # between steps or even the middle of a step. This breaks the naming scheme\n          # of the build directory for binaries. As a consequence, we force BINDIR=bin.\n          bindir: bin\n        exclude:\n        - os: macos-latest\n          compiler: gcc\n          # Don't use gcc on macOS.\n    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}, C++${{ matrix.std }}\n    runs-on: ${{ matrix.os }}\n    env:\n      LLVM: ${{ matrix.llvm }}\n      BINDIR: ${{ matrix.bindir }}\n      CXXFLAGS_STANDARD: -std=c++${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        ${{ matrix.compiler }} --version\n        scripts/java-config.sh\n    - name: Build TSDuck\n      run: make -j5\n    - name: Check built version\n      run: make show-version\n    - name: Run unitary tests\n      run: make test\n    - name: Download test suite\n      run: |\n        mkdir -p ../tsduck-test\n        curl -s -L https://github.com/tsduck/tsduck-test/tarball/master | tar xz --strip 1 -C ../tsduck-test\n    - name: Run test suite\n      run: |\n        make test-suite && status=$? || status=$?\n        cd ../tsduck-test\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [Win64, Win32]\n        configuration: [Release]\n        std: [14, 20]\n        include:\n        - target: Win64\n          suffix: x64\n          testopt: --dev\n        - target: Win32\n          suffix: Win32\n          testopt: --dev32\n        exclude:\n        - target: Win32\n          std: 20\n    name: Build on ${{ matrix.target }} with VC++, C++${{ matrix.std }}\n    runs-on: windows-latest\n    env:\n      STDCPP: stdcpp${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause\n    - name: Dependencies check\n      run: |\n        Write-Output \"Path=${env:Path}\"\n        python --version\n    - name: Build TSDuck\n      run: |\n        scripts/build.ps1 -${{ matrix.target }} -${{ matrix.configuration }} -Parallel 5 -NoLowPriority -NoPause\n        Get-ChildItem bin/${{ matrix.configuration }}-${{ matrix.suffix }}\n    - name: Check built version\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsversion.exe --version=all\n    - name: Check plugins list\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsp.exe --list\n    - name: Run unitary tests\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsduckdll.exe\n    - name: Run unitary tests (static)\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsducklib.exe\n    - name: Download test suite\n      run: |\n        $ProgressPreference = 'SilentlyContinue'\n        Invoke-WebRequest -UseBasicParsing -Uri https://github.com/tsduck/tsduck-test/archive/master.zip -OutFile test.zip\n        Expand-Archive test.zip -DestinationPath . -Force\n        Move-Item tsduck-test-master ../tsduck-test -Force\n    - name: Run test suite\n      shell: bash\n      run: |\n        cd ../tsduck-test\n        ./run-all-tests.sh ${{ matrix.testopt }} && status=$? || status=$?\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_doxygen:\n    name: Doxygen documentation\n    # ubuntu-latest is currently ubuntu-20.04, try to grab a more recent version of doxygen.\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        doxygen --version\n    - name: Build TSDuck documentation\n      run: |\n        make doxygen\n```"}
{"id": "63c496ce517fc08c1eed2f51", "level": "level1", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [17.8]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm install\n    - run: npm run build\n    - run: npm run test\n    - name: Codecov\n      uses: codecov/codecov-action@v3.1.0\n```"}
{"id": "63c4967d6fc19abdf9c9c47c", "level": "level1", "llm_response": "```yml\nname: Build and deploy to GitHub Pages\n\non:\n ", "answer": "```yaml name: Build and deploy to GitHub Pages\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm ci\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.0\n        with:\n          branch: gh-pages\n          folder: dist\n```"}
{"id": "63c49df2cbc73931bb1aa4e2", "level": "level1", "llm_response": "```yml\nname: Node Publish Package\n\non:\n  release:\n   ", "answer": "```yaml name: Node Publish Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49d2f1842bc13d7788992", "level": "level1", "llm_response": "```yml\nname: Continuous Integration\n\non:\n  branch:\n    -", "answer": "```yaml name: Continuous Integration\non:\n  push:\n    branches: [ main ]\n\njobs:\n  snap:\n    uses: ./.github/workflows/snap.yml\n    with:\n      deploy: true\n      channel: edge\n    secrets: inherit\n\n  matrix:\n    uses: ./.github/workflows/matrix.yml\n\n  fuzzing:\n    permissions:\n      actions: read # to fetch the artifacts (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n      contents: read # to clone the repo (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Build Fuzzers\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        fuzz-seconds: 150\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v3\n      if: failure() && steps.build.outcome == 'success'\n      with:\n        name: artifacts\n        path: ./out/artifacts\n\n```"}
{"id": "63c497a01842bc13d7764d6f", "level": "level1", "llm_response": "```yml\nname: Rebuild LLVM 12.0\n\non:\n", "answer": "```yaml # Copyright 2022 Intel Corporation\n# SPDX-License-Identifier: BSD-3-Clause\n\nname: Rebuild LLVM 12.0\n\non:\n  push:\n    branches:\n      - main\n      - '**rebuild_llvm**'\n    paths:\n      - \"llvm_patches/*12_0*\"\n      - \"alloy.py\"\n      - \".github/workflows/rebuild-llvm12.yml\"\n  workflow_dispatch:\n\njobs:\n  llvm12:\n    uses: ./.github/workflows/reusable.rebuild.yml\n    with:\n      version: '12.0'\n      full_version: '12.0.1'\n      ubuntu: '18.04'\n      vs_generator: 'Visual Studio 16 2019'\n      vs_version_str: 'vs2019'\n```"}
{"id": "63c498e633b087f6bde3bbe1", "level": "level1", "llm_response": "```yml\nname: Backport Assistant Runner\n\non:\n  pull_request", "answer": "```yaml ---\nname: Backport Assistant Runner\n\non:\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n\njobs:\n  backport:\n    if: github.event.pull_request.merged\n    runs-on: ubuntu-latest\n    container: hashicorpdev/backport-assistant:0.2.3\n    steps:\n      - name: Backport changes to stable-website\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>website)\"\n          BACKPORT_TARGET_TEMPLATE: \"stable-{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n      - name: Backport changes to targeted release branch\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>\\\\d+\\\\.\\\\d+\\\\.[+\\\\w]+)\"\n          BACKPORT_TARGET_TEMPLATE: \"release/{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n```"}
{"id": "63c4a1a11842bc13d77a50d6", "level": "level1", "llm_response": "```yml\n---\nname: build\n\non:\n  branches:\n    -", "answer": "```yaml name: build\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: Build\n\n    strategy:\n      matrix:\n        os:\n          - macos-latest\n          - ubuntu-latest\n          - windows-latest\n        browser:\n          - ChromeHeadless\n          - FirefoxHeadless\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build --if-present\n\n      - name: Test\n        run: npm test -- --browsers ${{ matrix.browser }}\n\n      - name: Diff\n        run: git diff --exit-code\n```"}
{"id": "63c4a17bb008460c1df5aa2b", "level": "level1", "llm_response": "```yml\nname: CloseStaleIssue\non:\n  event:\n", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path\n\nname: CloseStaleIssue\n\non:\n   schedule: \n       - cron: '1 15 1/2 * *'\n       \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close issues of hosts label\n      uses: actions/github-script@0.4.0\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          let response = await github.issues.listForRepo({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            state: 'open'\n          });\n          let data = response['data'];\n          \n          data.forEach(function(issue){\n            var labels = issue['labels'];\n            var is2Deal = true;\n            for(var i=0,l=labels.length;i<l;i++){\n                if(labels[i]['name'] == 'pending' || labels[i]['name'] == 'help wanted' || labels[i]['name'] == 'instruction'){\n                    is2Deal = false;\n                    break;\n                }\n            }\n            if(is2Deal){\n                var updated_at = new Date(issue['updated_at']);\n                var time_now = new Date();\n                var deta = time_now.getTime() - updated_at.getTime();\n                console.log('deta: ' + deta);\n                if(deta < 1000*60*60*24*30){\n                    is2Deal = false;\n                }   \n            }\n            if(is2Deal){\n                var id = issue['number'];\n                github.issues.createComment({\n                    owner: context.repo.owner,\n                    repo: context.repo.repo,\n                    issue_number: id,\n                    body: '\u7531\u4e8e\u957f\u671f\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\uff0c\u8be5\u95ee\u9898\u81ea\u52a8\u5173\u95ed\u3002\u5982\u6709\u9700\u8981\u53ef\u91cd\u65b0\u6253\u5f00\u3002'\n                });\n                github.issues.update({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: id,\n                  state: 'closed'\n                });\n            }                \n          });\n\n    \n\n\n```"}
{"id": "63c497ab1899db58864db0f4", "level": "level1", "llm_response": "```yml\nname: release\non:\n  release:\n    types:", "answer": "```yaml ---\n# https://github.com/marketplace/actions/actions-tagger\nname: release\n\n\"on\":\n  release:\n    types: [published, edited]\n  workflow_dispatch:\n\njobs:\n  actions-tagger:\n    runs-on: windows-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n```"}
{"id": "63c49b8f517fc08c1eef11c2", "level": "level1", "llm_response": "```yml\nname: Release Drafter\n\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f1833b087f6bde640c7", "level": "level1", "llm_response": "```yaml\nname: Integration tests\non:\n  push:\n    branches:\n", "answer": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n    inputs:\n      test:\n        description: the integration test to run\n        default: fairscale_benchmarks\n        required: true\n        type: choice\n        options:\n          - fairscale_benchmarks\n      cluster:\n        description: the beaker cluster to run the test on\n        default: ai2/tango-integration-tests\n        required: true\n        type: choice\n        options:\n          - ai2/tango-integration-tests\n          - ai2/allennlp-cirrascale\n  # Uncomment this trigger to test changes on a pull request.\n  # You also have to uncomment the lines below that mention 'for pull request checks'\n  # pull_request:\n  #   branches:\n  #     - '*'\n\njobs:\n  run_test:\n    name: ${{ github.event.inputs.test }}\n    # name: fairscale_benchmarks  # for pull request checks\n    runs-on: [ubuntu-latest]\n    timeout-minutes: 60\n    env:\n      TEST_NAME: ${{ github.event.inputs.test }}\n      # TEST_NAME: fairscale_benchmarks  # for pull request checks\n      BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}\n      BEAKER_WORKSPACE: ai2/tango-integration-tests\n      BEAKER_CLUSTER: ${{ github.event.inputs.cluster }}\n      # BEAKER_CLUSTER: ai2/allennlp-cirrascale  # for pull request checks\n      IMAGE_NAME: petew/tango-testing\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Validate inputs\n        run: |\n          # The 'test' input should be a directory in `integration_tests/`\n          test -d \"integration_tests/${TEST_NAME}\"\n\n      - name: Determine current commit SHA (pull request)\n        if: github.event_name == 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\n      - name: Determine current commit SHA (push)\n        if: github.event_name != 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=$GITHUB_SHA\" >> $GITHUB_ENV\n\n      - name: Install beaker client\n        shell: bash\n        run: |\n          mkdir -p \"$HOME/bin\"\n\n          # Download and install from latest GitHub release.\n          curl -s https://api.github.com/repos/allenai/beaker/releases/latest \\\n            | grep 'browser_download_url.*linux' \\\n            | cut -d '\"' -f 4 \\\n            | wget -qi - \\\n          && tar -xvzf beaker_linux.tar.gz -C \"$HOME/bin\"\n\n          # Add to path.\n          echo \"$HOME/bin\" >> \"$GITHUB_PATH\"\n\n      - name: Verify beaker install\n        run: |\n          beaker account whoami\n\n      - name: Create beaker experiment config\n        run: |\n          cat >beaker_config.yml << EOL\n          version: v2-alpha\n          description: ${{ env.TEST_NAME }}\n          tasks:\n            - name: test\n              image:\n                beaker: ${{ env.IMAGE_NAME }}\n              command: [\"/entrypoint.sh\", \"integration_tests/${{ env.TEST_NAME }}/run.sh\"]\n              envVars:\n                - name: COMMIT_SHA\n                  value: $COMMIT_SHA\n                - name: WANDB_API_KEY\n                  secret: WANDB_API_KEY\n                - name: FILE_FRIENDLY_LOGGING\n                  value: \"true\"\n                - name: TOKENIZERS_PARALLELISM  # set this to avoid warnings\n                  value: \"true\"\n                - name: PYTHONUNBUFFERED\n                  value: \"true\"\n              result:\n                path: '/results'\n              resources:\n                gpuCount: 4\n              context:\n                cluster: ${{ env.BEAKER_CLUSTER }}\n                priority: normal\n          EOL\n          cat beaker_config.yml\n\n      - name: Submit beaker job\n        run: |\n          TIMESTAMP=$(date +%H%M%S)\n          EXPERIMENT=$(beaker experiment create beaker_config.yml --workspace $BEAKER_WORKSPACE --name \"${TEST_NAME}-${{ github.run_number }}-${TIMESTAMP}\" | awk '{print $2}')\n          if [ -z \"$EXPERIMENT\" ]; then\n            exit 1\n          else\n            echo \"EXPERIMENT=$EXPERIMENT\" >> $GITHUB_ENV\n            echo \"Experiment $EXPERIMENT submitted. See progress at https://beaker.org/ex/$EXPERIMENT\"\n          fi\n\n      - name: Wait for job to finish\n        run: |\n          beaker experiment await $EXPERIMENT test finalized --timeout 60m\n          # Check the job's exit code.\n          test $(beaker experiment get $EXPERIMENT --format=json | jq '.[0].jobs[0].status.exitCode') -eq 0\n\n      - name: Get logs\n        if: always()\n        run: |\n          # EXPERIMENT could be empty if the submission step failed.\n          # We'll exit right away if that's the case.\n          if [ -z \"$EXPERIMENT\" ]; then\n            echo \"No logs to show\"\n            exit 0\n          fi\n\n          # Download logs from beaker.\n          beaker experiment results $EXPERIMENT --prefix out.log --output results\n\n          # If the experiment failed during startup, there might not be any logs.\n          if [ -f results/test/out.log ]; then\n            echo \"\"\n            echo \">>> Logs:\"\n            echo \"\"\n            cat results/test/out.log\n          else\n            echo \"No logs to show\"\n          fi\n\n      - name: Stop job\n        if: cancelled()\n        run: |\n          if [ ! -z \"$EXPERIMENT\" ]; then\n            beaker experiment stop $EXPERIMENT\n          fi\n```"}
{"id": "63c497d86fc19abdf9ca540a", "level": "level1", "llm_response": "```yaml\nname: Tools\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Tools\n\non:\n push:\n  paths:\n  - '.github/workflows/tools.undatui.yml'\n  - 'Tools/UndatUI/src/**'\n\ndefaults:\n run:\n  shell: bash\n\nenv:\n DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n\n UndatUI:\n  runs-on: windows-2019\n  steps:\n\n  - name: Clone\n    uses: actions/checkout@v3\n\n  - name: Build\n    run:  |\n          :\n          MSBUILD_EXE=\"$(\"/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe\" -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)\"\n          \"$MSBUILD_EXE\" Tools/UndatUI/src/undat.sln -p:Configuration=Release\n```"}
{"id": "63c4a07ab008460c1df54484", "level": "level1", "llm_response": "```yml\nname: Docker Build\n\non:\n  release:\n    published", "answer": "```yaml name: 'Docker Build'\non:\n  release:\n    types: [released]\n\njobs:\n  build:\n    name: Dispatch release event to tobybatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Emit repository_dispatch\n        uses: mvasigh/dispatch-action@1.1.6\n        with:\n          token: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          repo: kimai2\n          owner: tobybatch\n          event_type: kimai_release\n```"}
{"id": "63c49a5acbc73931bb1933d0", "level": "level1", "llm_response": "```yml\nname: Kind Cluster E2E tests\n\non:\n ", "answer": "```yaml name: Kind Cluster E2E tests\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@v1.4.0\n        with:\n          version: v0.14.0\n          kubectl_version: v1.25.0\n          cluster_name: kinder\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-go@v3 # default version of go is 1.10\n        with:\n          go-version: \"1.19\"\n      - name: Install Carvel Tools\n        run: ./hack/install-deps.sh\n      # Run benchmark with `go test -bench` and stores the output to a file\n      - name: Install kc and run e2e tests on kind\n        run: |\n          set -e -x\n          kubectl version --short\n\n          source ./hack/version-util.sh\n\n          ytt -f config/ -v kapp_controller_version=\"$(get_kappctrl_ver)+develop\" | kbld -f- > kbld.out 2> kbldmeta.out\n          cat kbldmeta.out | tail -n 1 | sed 's/.*final: kapp-controller -> \\(.*\\)$/\\1/p'  | tail -n 1 | xargs kind load docker-image --name kinder\n          kapp deploy -a kc -f kbld.out -c -y\n\n          export KAPPCTRL_E2E_SECRETGEN_CONTROLLER=true\n          source ./hack/secretgen-controller.sh\n          deploy_secretgen-controller\n\n          mkdir tmp\n          KAPPCTRL_E2E_NAMESPACE=kappctrl-test eval './hack/test-e2e.sh'\n```"}
{"id": "63c4989533b087f6bde39d3c", "level": "level1", "llm_response": "```yml\nname: Stats\non:\n  schedule:\n    - cron", "answer": "```yaml on:\n  schedule:\n    # https://crontab.guru/once-a-day\n    - cron: 0 0 * * *\n  workflow_dispatch: {}\n\nname: Stats\njobs:\n  stats:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: gr2m/app-stats-action@v1.x\n        id: stats\n        with:\n          id: ${{ secrets.SETTINGS_APP_ID }}\n          private_key: ${{ secrets.SETTINGS_PRIVATE_KEY }}\n      - run: \"echo installations: '${{ steps.stats.outputs.installations }}'\"\n      - run: \"echo suspended: '${{ steps.stats.outputs.suspended_installations }}'\"\n      - run: \"echo repositories: '${{ steps.stats.outputs.repositories }}'\"\n      - run: \"echo most popular repositories: '${{ steps.stats.outputs.popular_repositories }}'\"\n```"}
{"id": "63c49aefcbc73931bb196efd", "level": "level1", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n  schedule:\n    - cron: '41 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          # If you wish to specify custom queries, you can do so here or in a config file.\n          # By default, queries listed here will override any specified in a config file.\n          # Prefix the list here with \"+\" to use these queries and those in the config file.\n          # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e671842bc13d7790940", "level": "level1", "llm_response": "```yml\nname: Auto-merge Dependabot PRs\non", "answer": "```yaml name: Auto-merge Dependabot PRs\non:\n  schedule:\n    - cron: '0 * * * *'\njobs:\n  auto_merge:\n    name: Auto-merge Dependabot PRs\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: akheron/dependabot-cron-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          auto-merge: 'minor'\n          merge-method: 'rebase'\n```"}
{"id": "63c49e7a517fc08c1ef03b74", "level": "level1", "llm_response": "```yml\nname: Check links\non:\n  branches:\n    -", "answer": "```yaml name: Check links\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron:  '0 12 */7 * *'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n    - name: Install Awesome Bot\n      run: gem install awesome_bot\n    - name: Run Awesome Bot\n      run: awesome_bot README.md --request-delay 1 --allow-ssl --allow-timeout -t 5 --allow-dupe --white-list sho.rt,your.site,long.url,awesome.re\n    - uses: actions/upload-artifact@v3\n      if: failure()\n      with:\n        name: ab-results\n        path: ab-results-README.md-filtered.json\n```"}
{"id": "63c49b2eb008460c1df32a6d", "level": "level1", "llm_response": "```yml\nname: License\non:\n  pull_request:\n    branches", "answer": "```yaml # Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: License\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\npermissions: read-all\njobs:\n  license:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[skip ci]')\"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n        id: go\n      - name: license\n        run: |\n          export PATH=${PATH}:`go env GOPATH`/bin\n          make license\n```"}
{"id": "63c49a16cbc73931bb1919aa", "level": "level1", "llm_response": "```yml\n---\nname: Flatpak dependency updates\n\non:\n  schedule", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```"}
{"id": "63c499411e3364807578cbd2", "level": "level1", "llm_response": "```yml\nname: CodeQL\non:\n  branches:\n    -", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ 3.X.X-Branch ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ 3.X.X-Branch ]\n  schedule:\n    - cron: '0 20 * * 6'\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: ${{ matrix.language }}\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497691e33648075780df0", "level": "level1", "llm_response": "```yml\nname: Publish Project to Gradle Plugin Portal\n\non:\n", "answer": "```yaml name: Publish Project to Gradle Plugin Portal\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'usefulness/easylauncher-gradle-plugin'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n\n      - uses: gradle/gradle-build-action@v2\n\n      - name: Build app with Gradle\n        run: ./gradlew build\n\n      - name: Publish to Gradle Plugin Portal\n        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.gradle_publish_key }} -Pgradle.publish.secret=${{ secrets.gradle_publish_secret }}\n\n      - name: Publish to Github Package Registry\n        run: ./gradlew publish --continue || true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499671842bc13d77707f8", "level": "level1", "llm_response": "```yml\nname: Create and publish a Docker image\n\non:\n ", "answer": "```yaml name: Create and publish a Docker image\n\non: [push]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            # set latest tag for default branch\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```"}
{"id": "63c49c8e517fc08c1eef73f9", "level": "level1", "llm_response": "```yaml\nname: Brick Build\n\non:\n  branches:\n    - main", "answer": "```yaml name: Brick Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"packages/brick_build/**\"\n      - \".github/workflows/brick_build.yaml\"\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    uses: ./.github/workflows/reusable-dart-analyze-format-test.yaml\n    with:\n      package: brick_build\n```"}
{"id": "63c49aa1cbc73931bb194f0a", "level": "level1", "llm_response": "```yml\nname: Sync workflows for GHES\n\non:\n  push", "answer": "```yaml name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n```"}
{"id": "63c49b936fc19abdf9cbd6f7", "level": "level1", "llm_response": "```yaml\nname: Deploy\non:\n  release:\n    types: [", "answer": "```yaml ---\nname: Deploy\n\n# yamllint disable-line rule:truthy\non:\n  release:\n    types:\n      - published\n  workflow_run:\n    workflows: [\"CI\"]\n    branches: [main]\n    types:\n      - completed\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/addon-deploy.yaml@main\n    secrets:\n      CAS_API_KEY: ${{ secrets.CAS_API_KEY }}\n      DISPATCH_TOKEN: ${{ secrets.DISPATCH_TOKEN }}\n```"}
{"id": "63c496ed6fc19abdf9c9f2dc", "level": "level1", "llm_response": "```yml\nname: Release Notes\non:\n  branches:\n    -", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Release Notes'\n\non:\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: 'Branch'\n        required: true\n        default: 'main'\n      start-rev:\n        description: 'Start Tag (defaults to merge-base(branch, prev-branch))'\n        required: false\n      end-rev:\n        description: 'End Tag (defaults to HEAD of the target branch)'\n        required: false\n\njobs:\n  release-notes:\n    uses: knative/actions/.github/workflows/release-notes.yaml@main\n    with:\n      branch: ${{ github.event.inputs.branch }}\n      start-rev: ${{ github.event.inputs.start-rev }}\n      end-rev: ${{ github.event.inputs.end-rev }}\n```"}
{"id": "63c49ddd517fc08c1eeffa78", "level": "level1", "llm_response": "```yml\nname: SVGOptimizer\non:\n  pull_request", "answer": "```yaml name: SVGOptimizer\non:\n  # Disable the following line if you don't want the Action to run on PRs.\n  pull_request:\n    paths:\n      - '**.svg'\n# Enable the following line if you want the Action to run on regular pushes.\n#  push:\n# Enable the following lines if you want the Action to run on a schedule.\n#  schedule:\n#  - cron:  '0 * * * 1'  # See https://crontab.guru/\n# Enable one of the following lines if you want to manually trigger the Action.\n#  repository_dispatch:\n#  workflow_dispatch:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ericcornelissen/svgo-action@v1\n        with:\n          test-run: false\n          svgo-version: 2\n          svgo-options: svgo.config.js\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d52517fc08c1eefc15c", "level": "level1", "llm_response": "```yml\n---\nname: External Trigger Main\non:\n  branch:", "answer": "```yaml name: External Trigger Main\n\non:\n  workflow_dispatch:\n\njobs:\n  external-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n\n      - name: External Trigger\n        if: github.ref == 'refs/heads/master'\n        run: |\n          if [ -n \"${{ secrets.PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER }}\" ]; then\n            echo \"**** Github secret PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER is set; skipping trigger. ****\"\n            exit 0\n          fi\n          echo \"**** External trigger running off of master branch. To disable this trigger, set a Github secret named \\\"PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER\\\". ****\"\n          echo \"**** Retrieving external version ****\"\n          EXT_RELEASE=$(curl -u \"${{ secrets.CR_USER }}:${{ secrets.CR_PAT }}\" -sX GET \"https://api.github.com/repos/Tautulli/Tautulli/releases/latest\" | jq -r '. | .tag_name')\n          if [ -z \"${EXT_RELEASE}\" ] || [ \"${EXT_RELEASE}\" == \"null\" ]; then\n            echo \"**** Can't retrieve external version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve external version for tautulli branch master\"\n            GHA_TRIGGER_URL=\"https://github.com/linuxserver/docker-tautulli/actions/runs/${{ github.run_id }}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n**Trigger URL:** '\"${GHA_TRIGGER_URL}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')\n          echo \"**** External version: ${EXT_RELEASE} ****\"\n          echo \"**** Retrieving last pushed version ****\"\n          image=\"linuxserver/tautulli\"\n          tag=\"latest\"\n          token=$(curl -sX GET \\\n            \"https://ghcr.io/token?scope=repository%3Alinuxserver%2Ftautulli%3Apull\" \\\n            | jq -r '.token')\n            multidigest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${tag}\" \\\n              | jq -r 'first(.manifests[].digest)')\n            digest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${multidigest}\" \\\n              | jq -r '.config.digest')\n          image_info=$(curl -sL \\\n            --header \"Authorization: Bearer ${token}\" \\\n            \"https://ghcr.io/v2/${image}/blobs/${digest}\" \\\n            | jq -r '.container_config')\n          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')\n          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')\n          if [ -z \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Can't retrieve last pushed version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve last pushed version for tautulli tag latest\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          echo \"**** Last pushed version: ${IMAGE_VERSION} ****\"\n          if [ \"${EXT_RELEASE}\" == \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Version ${EXT_RELEASE} already pushed, exiting ****\"\n            exit 0\n          elif [ $(curl -s https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/lastBuild/api/json | jq -r '.building') == \"true\" ]; then\n            echo \"**** New version ${EXT_RELEASE} found; but there already seems to be an active build on Jenkins; exiting ****\"\n            exit 0\n          else\n            echo \"**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build ****\"\n            response=$(curl -iX POST \\\n              https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/buildWithParameters?PACKAGE_CHECK=false \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} | grep -i location | sed \"s|^[L|l]ocation: \\(.*\\)|\\1|\")\n            echo \"**** Jenkins job queue url: ${response%$'\\r'} ****\"\n            echo \"**** Sleeping 10 seconds until job starts ****\"\n            sleep 10\n            buildurl=$(curl -s \"${response%$'\\r'}api/json\" | jq -r '.executable.url')\n            buildurl=\"${buildurl%$'\\r'}\"\n            echo \"**** Jenkins job build url: ${buildurl} ****\"\n            echo \"**** Attempting to change the Jenkins job description ****\"\n            curl -iX POST \\\n              \"${buildurl}submitDescription\" \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \\\n              --data-urlencode \"description=GHA external trigger https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\" \\\n              --data-urlencode \"Submit=Submit\"\n            echo \"**** Notifying Discord ****\"\n            TRIGGER_REASON=\"A version change was detected for tautulli tag latest. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n              \"description\": \"**Build Triggered** \\n**Reason:** '\"${TRIGGER_REASON}\"' \\n**Build URL:** '\"${buildurl}display/redirect\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n          fi\n```"}
{"id": "63c49ee31e336480757b05b6", "level": "level1", "llm_response": "```yml\nname: goreleaser\non:\n  push:\n   ", "answer": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Post release\n        run: ls -l ./dist/*```"}
{"id": "63c4a0a1517fc08c1ef11043", "level": "level1", "llm_response": "```yml\nname: Greetings\n\non:\n  pull_request:\n   ", "answer": "```yaml # YOLOv5 \ud83d\ude80 by Ultralytics, GPL-3.0 license\n\nname: Greetings\n\non:\n  pull_request_target:\n    types: [opened]\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for submitting a YOLOv5 \ud83d\ude80 PR! To allow your work to be integrated as seamlessly as possible, we advise you to:\n\n            - \u2705 Verify your PR is **up-to-date** with `ultralytics/yolov5` `master` branch. If your PR is behind you can update your code by clicking the 'Update branch' button or by running `git pull` and `git merge master` locally.\n            - \u2705 Verify all YOLOv5 Continuous Integration (CI) **checks are passing**.\n            - \u2705 Reduce changes to the absolute **minimum** required for your bug fix or feature addition. _\"It is not daily increase but daily decrease, hack away the unessential. The closer to the source, the less wastage there is.\"_  \u2014 Bruce Lee\n\n          issue-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for your interest in YOLOv5 \ud83d\ude80! Please visit our \u2b50\ufe0f [Tutorials](https://github.com/ultralytics/yolov5/wiki#tutorials) to get started, where you can find quickstart guides for simple tasks like [Custom Data Training](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data) all the way to advanced concepts like [Hyperparameter Evolution](https://github.com/ultralytics/yolov5/issues/607).\n\n            If this is a \ud83d\udc1b Bug Report, please provide screenshots and **minimum viable code to reproduce your issue**, otherwise we can not help you.\n\n            If this is a custom training \u2753 Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online [W&B logging](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize) if available.\n\n            For business inquiries or professional support requests please visit https://ultralytics.com or email support@ultralytics.com.\n\n            ## Requirements\n\n            [**Python>=3.7.0**](https://www.python.org/) with all [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) installed including [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/). To get started:\n            ```bash\n            git clone https://github.com/ultralytics/yolov5  # clone\n            cd yolov5\n            pip install -r requirements.txt  # install\n            ```\n\n            ## Environments\n\n            YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):\n\n            - **Notebooks** with free GPU: <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a> <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a> <a href=\"https://www.kaggle.com/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n            - **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/GCP-Quickstart)\n            - **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/AWS-Quickstart)\n            - **Docker Image**. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/Docker-Quickstart) <a href=\"https://hub.docker.com/r/ultralytics/yolov5\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov5?logo=docker\" alt=\"Docker Pulls\"></a>\n\n            ## Status\n\n            <a href=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv5 CI\"></a>\n\n            If this badge is green, all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 [training](https://github.com/ultralytics/yolov5/blob/master/train.py), [validation](https://github.com/ultralytics/yolov5/blob/master/val.py), [inference](https://github.com/ultralytics/yolov5/blob/master/detect.py), [export](https://github.com/ultralytics/yolov5/blob/master/export.py) and [benchmarks](https://github.com/ultralytics/yolov5/blob/master/benchmarks.py) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n\n```"}
{"id": "63c49dd4517fc08c1eeff6b7", "level": "level1", "llm_response": "```yml\nname: check-permissions\non:\n  branches:\n   ", "answer": "```yaml name: check-permissions\non: [push, pull_request]\njobs:\n  check-permissions:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Check permissions on swizzin files\n        run: ./.github/scripts/check-permissions.sh\n```"}
{"id": "63c499771899db58864e6cab", "level": "level1", "llm_response": "```yml\nname: Dependabot auto-merge\n\non:\n ", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49f061899db588650a81b", "level": "level1", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non: [push, pull_request]\n\npermissions: read-all\n\nenv:\n  XCODE_WORKSPACE: \"Rectangle.xcworkspace\"\n  XCODE_SCHEME: \"Rectangle\"\n  CODE_SIGN_IDENTITY: \"-\"\n  BUILD_DIR: \"build\"\n  XCODE_ARCHIVE: \"Rectangle.xcarchive\"\n  APP_NAME: \"Rectangle.app\"\n  EXPORT_OPTIONS_PLIST: \"exportOptions.plist\"\n  DMG_NAME: \"Rectangle\"\n  DMG_FILE_NAME: \"Rectangle.dmg\"\n\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Install Dependencies\n      run: |\n        pod repo update\n        pod install\n    - name: Build\n      run: xcodebuild -workspace \"$XCODE_WORKSPACE\" -scheme \"$XCODE_SCHEME\" archive CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\"\n    - name: Export\n      run: |\n        plutil -convert xml1 - -o \"$EXPORT_OPTIONS_PLIST\" << EOF\n          {\n            \"destination\": \"export\",\n            \"method\": \"mac-application\"\n          }\n        EOF\n\n        xcodebuild -exportArchive -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\" -exportPath \"$BUILD_DIR\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST\"\n    - name: Resign App\n      run: codesign --force --deep -s \"$CODE_SIGN_IDENTITY\" \"$BUILD_DIR/$APP_NAME\"\n    - name: Make DMG\n      run: hdiutil create -srcdir \"$BUILD_DIR\" -volname \"$DMG_NAME\" \"$DMG_FILE_NAME\"\n    - name: Upload\n      uses: actions/upload-artifact@v3\n      with:\n        name: Build\n        path: ${{ env.DMG_FILE_NAME }}\n```"}
{"id": "63c49de733b087f6bde5c4d9", "level": "level1", "llm_response": "```yml\nname: Compile Examples\n\non:\n  push:\n    branches", "answer": "```yaml name: Compile Examples\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  pull_request:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by changes to external resources (libraries, platforms).\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  build:\n    name: ${{ matrix.board.fqbn }}\n    runs-on: ubuntu-latest\n\n    env:\n      SKETCHES_REPORTS_PATH: sketches-reports\n\n    strategy:\n      fail-fast: false\n\n      matrix:\n        board:\n          - fqbn: arduino:avr:nano\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:mega\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:leonardo\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:megaavr:nona4809\n            platforms: |\n              - name: arduino:megaavr\n          - fqbn: arduino:sam:arduino_due_x_dbg\n            platforms: |\n              - name: arduino:sam\n          - fqbn: arduino:samd:mkrzero\n            platforms: |\n              - name: arduino:samd\n          - fqbn: arduino:mbed_portenta:envie_m4\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_portenta:envie_m7\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_nano:nano33ble\n            platforms: |\n              - name: arduino:mbed_nano\n          - fqbn: arduino:mbed_nano:nanorp2040connect\n            platforms: |\n              - name: arduino:mbed_nano\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Compile examples\n        uses: arduino/compile-sketches@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          fqbn: ${{ matrix.board.fqbn }}\n          platforms: ${{ matrix.board.platforms }}\n          libraries: |\n            # Install the library from the local path.\n            - source-path: ./\n            # Additional library dependencies can be listed here.\n            # See: https://github.com/arduino/compile-sketches#libraries\n          sketch-paths: |\n            - examples\n          enable-deltas-report: true\n          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}\n\n      - name: Save sketches report as workflow artifact\n        uses: actions/upload-artifact@v3\n        with:\n          if-no-files-found: error\n          path: ${{ env.SKETCHES_REPORTS_PATH }}\n          name: ${{ env.SKETCHES_REPORTS_PATH }}\n```"}
{"id": "63c4946f8052faa2781ab2f2", "level": "level1", "llm_response": "```yml\nname: Release\non:\n  push:\n    branches:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        include:\n          - os: ubuntu-latest\n            target: x86_64-unknown-linux-gnu\n            target_alias: linux-x86_64\n            bin_suffix: ''\n            archive_suffix: '.tar.bz2'\n          - os: windows-latest\n            target: x86_64-pc-windows-msvc\n            target_alias: win-x86_64-msvc\n            bin_suffix: '.exe'\n            archive_suffix: '.zip'\n    defaults:\n      run:\n        shell: bash\n    env:\n      ARCHIVE_PATH: encrypted-dns_${{ github.ref_name }}_${{ matrix.target_alias }}${{ matrix.archive_suffix }}\n\n    steps:\n      - uses: actions/checkout@master\n\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n          targets: ${{ matrix.target }}\n\n      - name: Check Cargo availability\n        run: cargo --version\n\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n\n      - name: Build\n        run: |\n          echo 'lto = \"fat\"' >> Cargo.toml\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo build --release\n          mkdir encrypted-dns\n          cp target/release/encrypted-dns${{ matrix.bin_suffix }} encrypted-dns/\n          cp README.md example-encrypted-dns.toml encrypted-dns/\n          if [ \"${{ matrix.os }}\" = \"ubuntu-latest\" ]; then\n            tar cjpf ${ARCHIVE_PATH} encrypted-dns\n          elif [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n            \"/C/Program Files/7-Zip/7z\" a ${ARCHIVE_PATH} encrypted-dns\n          fi\n\n      - name: Install cargo-deb and build Debian package\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |\n          cargo install --debug cargo-deb\n          cargo deb --output=encrypted-dns_${{ github.ref_name }}_amd64.deb --no-build\n\n      - uses: actions/upload-artifact@master\n        with:\n          name: encrypted-dns_${{ matrix.target_alias }}\n          path: ${{ env.ARCHIVE_PATH }}\n\n      - uses: actions/upload-artifact@master\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        with:\n          name: encrypted-dns_deb-amd64\n          path: encrypted-dns_${{ github.ref_name }}_amd64.deb\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          name: Release ${{ github.ref_name }}\n          draft: true\n          prerelease: false\n          files: |\n            encrypted-dns_deb-amd64/*.deb\n            encrypted-dns_linux-x86_64/*.tar.bz2\n            encrypted-dns_win-x86_64-msvc/*.zip\n```"}
{"id": "63c494d17843b61269a0399a", "level": "level1", "llm_response": "```yml\nname: Windows\non:\n  push:\n    branches:\n", "answer": "```yaml name: Windows\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        ruby:\n          - '3.0'\n          - '2.7'\n          - '2.6'\n          - '2.5'\n          - 'head'\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1.64.1\n      with:\n        ruby-version: ${{ matrix.ruby }}\n        bundler-cache: true\n    - name: Run test\n      run: |\n        rake test\n    - name: Run packaging\n      run: |\n        rake package\n        gem install --local pkg/gem-compiler-*.gem\n```"}
{"id": "63c4a0ee1899db5886516bef", "level": "level1", "llm_response": "```yml\nname: seqr prod release\non:\n  branch:\n", "answer": "```yaml name: seqr prod release\non:\n  workflow_run:\n    workflows: [\"Unit Tests\"]\n    types:\n      - completed\n    branches:\n      - master\n\npermissions:\n  id-token: write\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n\n      - name: authenticate to google cloud\n        id: \"auth\"\n        uses: google-github-actions/auth@v0\n        with:\n          workload_identity_provider: \"${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}\"\n          service_account: \"${{ secrets.RUN_SA_EMAIL }}\"\n\n      - name: \"setup gcloud sdk\"\n        uses: google-github-actions/setup-gcloud@v0\n\n      - name: Build and push images\n        run: |-\n          gcloud builds submit --quiet --substitutions=\"COMMIT_SHA=${{ github.event.workflow_run.head_sha }},_CUSTOM_BRANCH_TAG=gcloud-prod\" --config .cloudbuild/seqr-docker.cloudbuild.yaml --gcs-log-dir=gs://seqr-github-actions-logs/logs .\n\n  helm_update:\n    runs-on: ubuntu-latest\n    needs: docker\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: broadinstitute/seqr-helm\n          ref: main\n          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token\n          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo\n\n      - name: Update appVersion in seqr Chart file\n        uses: mikefarah/yq@v4.22.1\n        with:\n          cmd: >\n            yq -i '.appVersion = \"${{ github.event.workflow_run.head_sha }}\"' charts/seqr/Chart.yaml\n\n      - name: Commit and Push changes\n        uses: Andro999b/push@v1.3\n        with:\n          repository: broadinstitute/seqr-helm\n          branch: main\n          github_token: ${{ secrets.SEQR_VERSION_UPDATE_TOKEN }}\n          author_email: ${{ github.actor }}@users.noreply.github.com\n          author_name: tgg-automation\n          message: \"Update seqr chart appVersion to ${{ github.event.workflow_run.head_sha }}\"\n```"}
{"id": "63c49fb3cbc73931bb1b59fe", "level": "level1", "llm_response": "```yaml\n---\nname: Add issues to React Native Bug Board\non:", "answer": "```yaml name: Add issues to React Native Bug Board\r\n\r\non:\r\n  issues:\r\n    types:\r\n      - opened\r\n\r\njobs:\r\n  add-to-project:\r\n    name: Add issue to project\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/add-to-project@main\r\n        with:\r\n          project-url: https://github.com/orgs/microsoft/projects/235\r\n          github-token: ${{ secrets.RNBOT_GH_TOKEN }}\r\n```"}
{"id": "63c4a0b71899db5886515740", "level": "level1", "llm_response": "```yaml\n---\nname: CI\non:\n  pull_request:\n    branches", "answer": "```yaml name: CI\n\non:\n  pull_request:\n    branches: [master]\n  push:\n    branches: [master]\n    tags: '*'\n\nconcurrency: \n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        version:\n          - '1.0'\n          - '1'\n          - 'nightly'\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        arch: [x64]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.version }}\n          arch: ${{ matrix.arch }}\n      - uses: julia-actions/cache@v1\n      - uses: julia-actions/julia-buildpkg@latest\n      - uses: julia-actions/julia-runtest@latest\n      - uses: julia-actions/julia-processcoverage@latest\n      - uses: codecov/codecov-action@v3\n        with:\n          file: lcov.info\n```"}
{"id": "63c495638052faa2781b17aa", "level": "level1", "llm_response": "```yml\nname: Build wheels\n\non:\n  push:\n    branches", "answer": "```yaml name: Build wheels\n\non:\n  # Trigger on pushes to the mainline branches and version tags. This prevents building commits\n  # twice when the pull request source branch is in the same repository.\n  push:\n    branches:\n      - \"master\"\n      - \"next\"\n    tags:\n      - \"v*\"\n\n  pull_request:\n      types: [opened, labeled, reopened, synchronize]\n\n  # Trigger on request.\n  workflow_dispatch:\n\nenv:\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\njobs:\n  build_wheels:\n    name: Build wheel for ${{ matrix.os }}, Python ${{ matrix.pyver }}\n    runs-on: ${{ matrix.os }}\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, macos-12] #, windows-2019]\n        pyver: [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.10.2\n        env:\n          # Build for cpython >= 3.6.\n          CIBW_PROJECT_REQUIRES_PYTHON: \"==${{ matrix.pyver }}.*\"\n          CIBW_SKIP: \"{pp*,*-musllinux_*}\"\n\n          # Build only on 64-bit architectures.\n          CIBW_ARCHS_MACOS: \"x86_64 arm64\"\n          CIBW_ARCHS_LINUX: auto64\n          CIBW_ARCHS_WINDOWS: auto64\n\n          # Configure environment variables.\n          CIBW_ENVIRONMENT_LINUX: \"CMAKE_PREFIX_PATH=/project/tbb LD_LIBRARY_PATH=/project/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          CIBW_ENVIRONMENT_MACOS: \"CMAKE_PREFIX_PATH=/Users/runner/work/freud/freud/tbb LD_LIBRARY_PATH=/Users/runner/work/freud/freud/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          MACOSX_DEPLOYMENT_TARGET: \"10.14\"\n\n          # Set up TBB.\n          CIBW_BEFORE_BUILD_LINUX: \"source .github/workflows/cibuildwheel-before-build.sh {package} linux\"\n          CIBW_BEFORE_BUILD_MACOS: \"source .github/workflows/cibuildwheel-before-build.sh {package} macos\"\n          CIBW_BEFORE_BUILD_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-build.ps1 {package}\"\n\n          # Test the wheels.\n          CIBW_BEFORE_TEST_LINUX: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_MACOS: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-test.ps1 {package}\"\n          CIBW_TEST_COMMAND: \"cd {package}/tests && pytest . -v --log-level=DEBUG -n auto\"\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./wheelhouse/*.whl\n\n  build_sdist:\n    name: Build source distribution\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: '3.9'\n\n      - name: Install build requirements\n        run: python3 -m pip --disable-pip-version-check install scikit-build cmake -r requirements.txt --upgrade --progress-bar=off\n\n      - name: Build sdist\n        run: python setup.py sdist\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: dist/*.tar.gz\n\n  upload_pypi:\n    name: Publish [PyPI]\n    needs: [build_wheels, build_sdist]\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: dist\n          path: dist\n\n      - name: Check files\n        run: ls -lR dist\n\n      - name: Upload to PyPI\n        # upload to PyPI on every tag starting with 'v'\n        if: startsWith(github.ref, 'refs/tags/v')\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Upload to TestPyPI\n        # otherwise, upload to TestPyPi when secrets are available\n        if: ${{ !startsWith(github.ref, 'refs/tags/v') && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')) }}\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n          skip_existing: true\n\n      - name: Slack notification\n        if: startsWith(github.ref, 'refs/tags/v') || failure()\n        uses: act10ns/slack@v1.6.0\n        with:\n          status: ${{ job.status }}\n          channel: '#dev-freud'\n```"}
{"id": "63c49d95cbc73931bb1a811c", "level": "level1", "llm_response": "```yml\nname: Build and Publish Documentation\n\non:\n  branches:\n", "answer": "```yaml name: Build and Publish Documentation\n\non:\n  # Trigger the workflow on push or pull request,\n  # but only for the main branch\n  push:\n    branches:\n      - master\n  # Also trigger on page_build, as well as release created events\n  page_build:\n  release:\n    types: # This configuration does not affect the page_build event above\n      - created\n\nenv:\n  DOXYGEN_VERSION: Release_1_9_1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      # check out the Arduino-SDI-12 repo\n      - uses: actions/checkout@v3\n        with:\n          path: code_docs/Arduino-SDI-12\n\n      - name: Restore or Cache pip\n        uses: actions/cache@v3.0.11\n        id: cache_pip\n        with:\n          path: ~/.cache/pip\n          # if requirements.txt hasn't changed, then it will be a \"cache hit\" and pip will be restored\n          # if requirements.txt HAS changed, it will be a \"cache miss\" and a new cache of pip will be created if the job completes successfully\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Restore or Cache PlatformIO and Libraries\n        uses: actions/cache@v3.0.11\n        id: cache_pio\n        with:\n          path: ~/.platformio\n          # if nothing in the lock files has changed, then it will be a \"cache hit\"\n          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install PlatformIO\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade platformio\n\n      # Install *all* the dependencies!\n      # We're including the dependencies just so the includes can follow in the doxygen pre-processor\n      - name: Install the dependencies at global level\n        run: |\n          echo \"::debug::Installing greygnome/EnableInterrupt\"\n          pio lib -g install greygnome/EnableInterrupt\n\n      - name: Update Libraries from Cache\n        run: pio lib -g update\n\n      - name: Install GraphViz (dot)\n        run: sudo apt-get -y install graphviz\n\n      - name: Restore or Cache Doxygen\n        id: cache_doxygen\n        uses: actions/cache@v3.0.11\n        with:\n          path: doxygen-src\n          key: ${{ runner.os }}-doxygen-${{ env.DOXYGEN_VERSION }}\n\n      - name: Clone and build doxygen\n        if: steps.cache_doxygen.outputs.cache-hit != 'true'\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/build-install-doxygen.sh\n          sh continuous_integration/build-install-doxygen.sh\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install Pygments and other m.css requirements\n        run: pip3 install jinja2 Pygments beautifulsoup4\n\n      # check out my fork of m.css, for processing Doxygen output\n      - name: Checkout m.css\n        uses: actions/checkout@v3\n        with:\n          # Repository name with owner. For example, actions/checkout\n          repository: SRGDamia1/m.css\n          path: code_docs/m.css\n\n      - name: Generate all the documentation\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/generate-documentation.sh\n          sh continuous_integration/generate-documentation.sh\n\n      - name: Deploy to github pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ${{ github.workspace }}/code_docs/Arduino-SDI-12Doxygen/m.css\n```"}
{"id": "63c4a121517fc08c1ef14262", "level": "level1", "llm_response": "```yml\nname: Fix PHP code style issues\n\non:\n  push", "answer": "```yaml name: Fix PHP code style issues\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  php-code-styling:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n          token: ${{ secrets.COMMIT_TOKEN }}\n\n      - name: Fix PHP code style issues\n        uses: aglipanci/laravel-pint-action@1.0.0\n\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'PHP CS Fixer'\n```"}
{"id": "63c4a0aa33b087f6bde6e0bc", "level": "level1", "llm_response": "```yml\n---\nname: CodeQL\n\non:\n  branches:\n   ", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '21 0 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript' ]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'temurin'\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718f", "level": "level1", "llm_response": "```yml\nname: Stage\non:\n  branch:\n    - main", "answer": "```yaml name: Stage\non:\n  workflow_dispatch:\njobs:\n  stage:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: git config\n        env:\n          GPT_USER: ${{ secrets.GPT_USER }}\n        run: |\n          git config --global user.name $GPT_USER\n          git config --global pull.rebase false\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - name: Checkout release branch\n        run: git switch release || git switch -c release\n      - name: Merge main branch to release branch\n        run: git merge -X theirs main\n      - name: Git push\n        run: git push origin release\n```"}
{"id": "63c49d3433b087f6bde57d74", "level": "level1", "llm_response": "```yml\nname: Alpine 3\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Alpine 3\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/alpine_3.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: alpine:3\n      caches: apk pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c49e361842bc13d778f5e6", "level": "level1", "llm_response": "```yml\nname: Build\non:\n  branches:\n    - main", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n    tags:\n      - v*\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n  \n\njobs:\n  build:\n    uses: benjamin-hodgson/BuildScripts/.github/workflows/dotnet.yml@main\n    with:\n      DOCS_FOLDER: Pidgin.Docs\n    secrets:\n      NUGET_KEY: ${{ secrets.NUGET_KEY }}\n```"}
{"id": "63c49e7033b087f6bde5fc3c", "level": "level1", "llm_response": "```yml\nname: Run unit tests\n\non:\n  pull_request:\n", "answer": "```yaml name: Run unit tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n  # Upload code coverage results when PRs are merged\n  push:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n\nenv:\n  DOTNET_NOLOGO: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v3\n      - name: Setup .NET Core SDKs\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: |\n            3.1.x\n            5.0.x\n            6.0.x\n          source-url: https://nuget.pkg.github.com/graphql-dotnet/index.json\n        env:\n          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n      - name: Disable MSVS Nuget Source # see https://github.com/graphql-dotnet/graphql-dotnet/issues/2422\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        run: dotnet nuget disable source 'Microsoft Visual Studio Offline Packages'\n      - name: Install dependencies\n        working-directory: src\n        run: dotnet restore\n      - name: Check formatting\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: |\n          dotnet format --no-restore --verify-no-changes --severity warn || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\n      - name: Build solution [Release]\n        working-directory: src\n        run: dotnet build --no-restore -c Release\n      - name: Build solution [Debug]\n        working-directory: src\n        run: dotnet build --no-restore -c Debug\n      - name: Test solution [Debug] with code coverage\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build -p:CollectCoverage=true -p:DoesNotReturnAttribute=\"DoesNotReturnAttribute\"\n      - name: Test solution [Debug] without code coverage\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build\n      - name: Upload coverage to codecov\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        uses: codecov/codecov-action@v3\n        with:\n          files: .coverage/GraphQLParser.Tests/coverage.net5.opencover.xml\n\n  buildcheck:\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n      - name: Pass build check\n        if: ${{ needs.test.result == 'success' }}\n        run: exit 0\n      - name: Fail build check\n        if: ${{ needs.test.result != 'success' }}\n        run: exit 1\n```"}
{"id": "63c49fc91899db588650f490", "level": "level1", "llm_response": "```yml\nname: Build & Deploy - BETA linters\n\non", "answer": "```yaml ---\n#########################\n#########################\n## Deploy Docker Image Flavors ##\n#########################\n#########################\n# Documentation:\n# https://help.github.com/en/articles/workflow-syntax-for-github-actions\n#\n\n#######################################\n# Start the job on all push to main #\n#######################################\nname: \"Build & Deploy - BETA linters\"\non:\n  push:\n    branches:\n      - \"main\"\n    paths:\n      - \".github/workflows/**\"\n      - \"Dockerfile\"\n      - \"**/Dockerfile\"\n      - \"flavors/**\"\n      - \"megalinter/**\"\n      - \"mega-linter-runner/**\"\n      - \"**/linter-versions.json\"\n      - \"TEMPLATES/**\"\n      - \".trivyignore\"\n      - \"**/*.sh\"\n      - \"**/*.py\"\n      - \"**/sh/**\"\n\n###############\n# Set the Job #\n###############\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n\n  prepare:\n    name: Prepare matrix\n    runs-on: ubuntu-latest  \n    steps:\n\n    - name: Build unique image name for beta\n      shell: bash\n      run: echo \"UNIQUE_DOCKER_IMAGE_NAME=$(echo beta_$(date '+%Y%m%d-%H%M'))\" >> $GITHUB_ENV\n\n    - name: Prepare result is ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\n      shell: bash\n      run: echo ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}  \n\n    outputs:\n      unique_docker_image_name: \"${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\"  \n\n  build:\n    needs: prepare\n    # Name the Job\n    name: Deploy Docker Image - Beta - Linters\n    # Set the agent to run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        # linters-start\n        linter:\n          [\n            \"ansible_ansible_lint\",\n            \"bash_shellcheck\",\n            \"cloudformation_cfn_lint\",\n            \"dockerfile_hadolint\",\n            \"go_revive\",\n            \"groovy_npm_groovy_lint\",\n            \"java_checkstyle\",\n            \"java_pmd\",\n            \"javascript_es\",\n            \"json_eslint_plugin_jsonc\",\n            \"jsx_eslint\",\n            \"kotlin_ktlint\",\n            \"php_psalm\",\n            \"python_bandit\",\n            \"repository_checkov\",\n            \"repository_devskim\",\n            \"repository_dustilock\",\n            \"repository_gitleaks\",\n            \"repository_secretlint\",\n            \"repository_semgrep\",\n            \"repository_syft\",\n            \"repository_trivy\",\n            \"terraform_tflint\",\n            \"terraform_terrascan\",\n            \"terraform_checkov\",\n            \"tsx_eslint\",\n            \"typescript_es\",\n          ]\n# linters-end\n    # Only run this on the main repo\n    if: github.repository == 'oxsecurity/megalinter' && !contains(github.event.head_commit.message, 'skip deploy')\n    ##################\n    # Load all steps #\n    ##################\n    steps:\n      ##########################\n      # Checkout the code base #\n      ##########################\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      #####################\n      # Run Deploy script #\n      #####################\n      - name: Deploy Beta image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: beta\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      - name: Deploy ${{ needs.prepare.outputs.unique_docker_image_name }} image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: \"${{ needs.prepare.outputs.unique_docker_image_name }}\"\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n          ALWAYS_BUILD: force\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      #####################################\n      # Run Linter test cases #\n      #####################################\n      - name: Run Test Cases\n        shell: bash\n        run: |\n          TEST_KEYWORDS_TO_USE_UPPER=\"${{ matrix.linter }}\"\n          TEST_KEYWORDS_TO_USE=\"${TEST_KEYWORDS_TO_USE_UPPER,,}\"\n          docker run -e TEST_CASE_RUN=true -e OUTPUT_FORMAT=text -e OUTPUT_FOLDER=${GITHUB_SHA} -e OUTPUT_DETAIL=detailed -e GITHUB_SHA=${GITHUB_SHA} -e PAT=\"${{secrets.PAT}}\" -e TEST_KEYWORDS=\"${TEST_KEYWORDS_TO_USE}\" -e MEGALINTER_VOLUME_ROOT=\"${GITHUB_WORKSPACE}\" -v \"/var/run/docker.sock:/var/run/docker.sock:rw\" -v ${GITHUB_WORKSPACE}:/tmp/lint oxsecurity/megalinter-only-${{ matrix.linter }}:beta\n        timeout-minutes: 30\n\n      ##############################################\n      # Check Docker image security with Trivy #\n      ##############################################\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'docker.io/oxsecurity/megalinter-only-${{ matrix.linter }}:beta'\n          format: 'table'\n          exit-code: '1'\n          ignore-unfixed: true\n          security-checks: vuln\n          vuln-type: 'os,library'\n          severity: 'CRITICAL,HIGH'\n          timeout: 10m0s\n```"}
{"id": "63c4996433b087f6bde3f0a1", "level": "level1", "llm_response": "```yaml\nname: test\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: test\n\non: [push]\n\njobs:\n  lint:\n    runs-on: 'ubuntu-latest'\n\n    strategy:\n      matrix:\n        node: [14, 16, 18]\n\n    name: Lint (Node ${{ matrix.node }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run stylelint\n      - run: npm run eslint\n\n  test:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Test (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm test\n        env:\n          CI: true\n\n  build-examples:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Build examples (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    needs:\n      - test\n      - lint\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run build\n        env:\n          CI: true\n```"}
{"id": "63c4982f6fc19abdf9ca7842", "level": "level1", "llm_response": "```yml\nname: Build and publish folly dependency\non:\n  branches", "answer": "```yaml name: Build and publish folly dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/folly image for a particular version\"\n        default: \"Run\"\n      folly_release:\n        description: \"The folly version to build and publish (e.g. 2021.03.29.00)\"\n        required: true\n        type: string\n      fmt_release:\n        description: \"The fmt version to build and publish (e.g. 7.1.3)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg folly_release=${{ github.event.inputs.folly_release }} \\\n          --build-arg fmt_release=${{ github.event.inputs.fmt_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\" \\\n          -f \"docker/folly/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly\n```"}
{"id": "63c497b6cbc73931bb1820e9", "level": "level1", "llm_response": "```yml\n---\nname: Lib Injection Test\non:\n  pull_request", "answer": "```yaml name: \"Lib Injection Test\"\n\non:\n  pull_request:\n  push:\n    branches: [master]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  lib-injection-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d # 1.3.0\n        with:\n          config: k8s/kind-config.yaml\n          kubectl_version: v1.22.10\n          node_image: kindest/node:v1.22.9\n\n      - name: Deploy apm test trace agent\n        run: |\n          kubectl apply -f k8s/dd-apm-test-agent-config.yaml\n          kubectl rollout status daemonset/datadog-agent\n          kubectl wait $(kubectl get pods -l app=datadog-agent -o name) --for condition=ready\n          sleep 5\n\n      - name: Npm pack for injection image\n        run: |\n          npm pack\n\n      - uses: ./.github/actions/injection\n        with:\n          init-image-version: ${GITHUB_SHA}\n\n      - name: Build sample app image\n        run: |\n          docker build k8s/sample-app --build-arg npm_pkg=./dd-trace.tgz -t ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n          docker push ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n\n      - name: Deploy test pod\n        run: |\n          sed -i \"s|LATEST|$GITHUB_SHA|g\" k8s/test-pod.yaml\n          sleep 5\n          n=0\n          until [ \"$n\" -ge 5 ]\n          do\n            kubectl apply -f k8s/test-pod.yaml && sleep 5 && kubectl wait pod/sample-app --for condition=ready && break\n            n=$((n+1))\n            sleep 15\n          done\n          sleep 5\n\n      - name: Test\n        run: |\n          wget http://localhost:18126/test/session/traces || true\n          kubectl logs $(kubectl get pods -l app=datadog-agent -o name)\n\n          TRACES=`cat traces`\n          if [[ ${#TRACES} -lt 3 ]] ; then\n            echo \"No traces reported - ${TRACES}\"\n            exit 1\n          else\n            echo \"Traces reported - ${TRACES}\"\n            exit 0\n          fi\n```"}
{"id": "63c49b7b1842bc13d777d9d4", "level": "level1", "llm_response": "```yml\nname: Automated review labels\n\non:\n  branches:\n   ", "answer": "```yaml   name: 'Automated review labels'\n\n  on:\n    issue_comment:\n      types: [created]\n    issues:\n      types: [unlabeled]\n    pull_request_target:\n      types: [unlabeled]\n\n  jobs:\n\n    add-review-team-label:\n      name: 'When pinged, label a PR with review team'\n      if: >\n        github.event.issue\n        && github.event.issue.pull_request\n        && !contains(github.event.issue.labels.*.name, 'review-requested')\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-teams\n          id: check_teams\n          uses: actions/github-script@v6\n          with:\n            script: |\n              const teams = [\n                '@conda-forge/staged-recipes',\n                '@conda-forge/help-c-cpp',\n                '@conda-forge/help-cdts',\n                '@conda-forge/help-go',\n                '@conda-forge/help-java',\n                '@conda-forge/help-julia',\n                '@conda-forge/help-nodejs',\n                '@conda-forge/help-perl',\n                '@conda-forge/help-python',\n                '@conda-forge/help-python-c',\n                '@conda-forge/help-r',\n                '@conda-forge/help-ruby'\n              ];\n              let found_label = false;\n              for (const team of teams) {\n                  let text = context.payload.comment.body;\n                  const regex = new RegExp(team + '[^\\-]|' + team + '$');\n                  let result = regex.test(text);\n                  if (result) {\n                      const slug = team.replace(\"@conda-forge/\", \"\");\n                      const label = slug.replace(\"help-\", \"\");\n                      found_label = true;\n                      github.rest.issues.addLabels({\n                          issue_number: context.issue.number,\n                          owner: context.repo.owner,\n                          repo: context.repo.repo,\n                          labels: [label, 'review-requested']\n                      });\n                      // NOTE: GitHub Actions default token lacks permission to\n                      // assign teams for review; external bot required for\n                      // that feature.\n                      //\n                      https://github.com/conda-forge/staged-recipes/issues/18023#issuecomment-1080451231\n                      console.log(`Somebody mentioned ${slug}.`);\n                  }\n              }\n              return found_label;\n        - name: remove-labels\n          if: >\n            (steps.check_teams.outputs.result == 'true')\n            && contains(github.event.issue.labels.*.name, 'Awaiting author contribution')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.removeLabel({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  name: ['Awaiting author contribution']\n              })\n\n    check-remove-review-requested-label:\n      name: 'Check that review-requested label was removed by a team member'\n      if: >\n        github.event.action == 'unlabeled'\n        && github.event.label.name == 'review-requested'\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-team-membership\n          id: check_team_review\n          uses: actions/github-script@v6\n          with:\n            github-token: ${{ secrets.GH_TOKEN }}\n            script: |\n              console.log(`Label was removed by ${context.payload.sender.login}`);\n              let memberships = [];\n              for (const team of ['staged-recipes', 'core']) {\n                  const membership = github.rest.teams.getMembershipForUserInOrg({\n                      org: 'conda-forge',\n                      team_slug: team,\n                      username: context.payload.sender.login,\n                  });\n                  memberships.push(membership.then((result) => {\n                      if (result.status == 200 && result.data.state == 'active') {\n                          console.log('User is authorized');\n                          return true;\n                      } else {\n                          console.log('User is nonactive');\n                          return false;\n                      }\n                  }).catch((error) => {\n                      // Non-membership raises an HttpError\n                      return false;\n                  }));\n              }\n              return Promise.all(memberships).then((values) => {\n                  let is_authorized = false;\n                  for (const m of values) {\n                      is_authorized = is_authorized || m;\n                  }\n                  return is_authorized;\n              });\n        - name: add-labels\n          if: >\n            (steps.check_team_review.outputs.result == 'true')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['Awaiting author contribution']\n              });\n        - name: readd-review-label\n          if: >\n            (steps.check_team_review.outputs.result == 'false')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['review-requested']\n              });\n              console.log('Non-members of staged recipes cannot remove this label.')\n```"}
{"id": "63c4a1751899db5886519f71", "level": "level1", "llm_response": "```yml\n---\nname: Auto Author Assign\non:\n  pull_request", "answer": "```yaml name: \"Auto Author Assign\"\n\non:\n  pull_request_target:\n    types: [opened, reopened]\n\npermissions:\n  pull-requests: write\n\njobs:\n  assign-author:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toshimaru/auto-author-assign@v1.4.0\n```"}
{"id": "63c49a6c1899db58864ed1c5", "level": "level1", "llm_response": "```yml\nname: build-publish-unpacker-image\n\non:\n ", "answer": "```yaml name: build-publish-unpacker-image\non:\n  workflow_dispatch:\njobs:\n  build-and-publish:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout Epinio\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push unpacker\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          context: images/.\n          file: images/unpacker-Dockerfile\n          tags: ghcr.io/epinio/epinio-unpacker:1.0\n          build-args: |\n            VERSION=1.0\n```"}
{"id": "63c49bdc1899db58864f62db", "level": "level1", "llm_response": "```yml\nname: Ruby test and build\n\non:\n  pull_request", "answer": "```yaml # License: LGPL-3.0-or-later\nname: Ruby test and build\non: \n  pull_request:\n    paths-ignore:\n      - \"**.[jt]sx?\"\n      - \"**.md\"\n      - \"**.md\"\n      - \"NOTICE-js\"\n      - \"NOTICE-ruby\"\n      - \"package.json\"\n      - \"yarn.lock\"\n    types: [opened, reopened, synchronize]\njobs:\n  package-download: # this downloads and caches all of the packages. That way if a future job fails, the caching will still occur\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n  main_build:\n    needs: package-download\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup PostgreSQL with PostgreSQL extensions and unprivileged user\n        uses: Daniel-Marynicz/postgresql-action@1.0.0\n        with:\n          postgres_image_tag: 12-alpine\n          postgres_user: houdini_user\n          postgres_password: password\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - name: install bess dependencies\n        run: |\n          cd gems/bess\n          bundle install --jobs 3 --retry 3\n      - name: run spec for bess\n        run: |\n          cd gems/bess\n          bundle exec rake spec\n      - run: bin/setup ci\n      - name: Generate JS routes\n        run: bin/rails js:routes:typescript\n      - name: run spec\n        run: bundle exec rake spec\n    \n```"}
{"id": "63c49aca33b087f6bde47f19", "level": "level1", "llm_response": "```yml\nname: Node CI\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Node CI\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - name: Fetch commit count\n        env:\n          PR_COMMIT_COUNT: ${{ github.event.pull_request.commits }}\n        run: |\n          echo \"FETCH_DEPTH=$(($PR_COMMIT_COUNT + 1))\" >> $GITHUB_ENV\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: ${{ env.FETCH_DEPTH }}\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Collect changed files\n        run: |\n          mkdir ~/tmp/\n          git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --diff-filter=ACM --name-only --relative '*src/**/*.ts' > ~/tmp/changed_files\n          echo -e \"Changed files: \\n$(cat ~/tmp/changed_files)\"\n\n      - name: Lint\n        run: npx eslint $(cat ~/tmp/changed_files)\n\n      - name: Check types\n        run: npm run checktype\n\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Build release\n        run: npm run release\n\n      - name: Test generated DTS\n        run: npm run test:dts\n\n      - name: Unit Test\n        run: npm run test\n```"}
{"id": "63c4a03933b087f6bde6b332", "level": "level1", "llm_response": "```yml\nname: Go Checks\n\non:\n  branches:\n    -", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Checks\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    name: All\n    env:\n      RUNGOGENERATE: false\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: \"1.19.x\"\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-check-setup\n        if: hashFiles('./.github/actions/go-check-setup') != ''\n      - name: Read config\n        if: hashFiles('./.github/workflows/go-check-config.json') != ''\n        run: |\n          if jq -re .gogenerate ./.github/workflows/go-check-config.json; then\n            echo \"RUNGOGENERATE=true\" >> $GITHUB_ENV\n          fi\n      - name: Install staticcheck\n        run: go install honnef.co/go/tools/cmd/staticcheck@376210a89477dedbe6fdc4484b233998650d7b3c # 2022.1.3 (v0.3.3)\n      - name: Check that go.mod is tidy\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            go mod tidy\n            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then\n              echo \"go.sum was added by go mod tidy\"\n              exit 1\n            fi\n            git diff --exit-code -- go.sum go.mod\n      - name: gofmt\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        run: |\n          out=$(gofmt -s -l .)\n          if [[ -n \"$out\" ]]; then\n            echo $out | awk '{print \"::error file=\" $0 \",line=0,col=0::File is not gofmt-ed.\"}'\n            exit 1\n          fi\n      - name: go vet\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go vet ./...\n      - name: staticcheck\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            set -o pipefail\n            staticcheck ./... | sed -e 's@\\(.*\\)\\.go@./\\1.go@g'\n      - name: go generate\n        uses: protocol/multiple-go-modules@v1.2\n        if: (success() || failure()) && env.RUNGOGENERATE == 'true'\n        with:\n          run: |\n            git clean -fd # make sure there aren't untracked files / directories\n            go generate ./...\n            # check if go generate modified or added any files\n            if ! $(git add . && git diff-index HEAD --exit-code --quiet); then\n              echo \"go generated caused changes to the repository:\"\n              git status --short\n              exit 1\n            fi\n```"}
{"id": "63c498d76fc19abdf9cabcf5", "level": "level1", "llm_response": "```yml\nname: build\n\non:\n  branches:\n    - main", "answer": "```yaml name: build\non: [push, pull_request]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        go-version: [~1.16, ^1]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    env:\n      GO111MODULE: \"on\"\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.1\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Download Go modules\n        run: go mod download\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test ./...\n```"}
{"id": "63c49c3db008460c1df39721", "level": "level1", "llm_response": "```yml\n---\nname: CI\n\non:\n  push:\n    branches", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n    branches:\n    - master\n\njobs:\n  Debug-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Debug\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Debug Build and Test\n      working-directory: build/Debug\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Debug ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Debug\n        path: build/Debug/bin/llvm-mctoll\n\n  Release-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Release\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Release Build and Test\n      working-directory: build/Release\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Release\n        path: build/Release/bin/llvm-mctoll\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level1", "llm_response": "```yml\nname: Require pull request labels\non:\n  pull_request", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c4a059cbc73931bb1b9cf8", "level": "level1", "llm_response": "```yml\nname: Go\non:\n  push:\n    branches:\n", "answer": "```yaml name: Go\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [1.19]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Install libolm\n        run: sudo apt-get install libolm-dev libolm3\n\n      - name: Install goimports\n        run: |\n          go install golang.org/x/tools/cmd/goimports@latest\n          export PATH=\"$HOME/go/bin:$PATH\"\n\n      - name: Install pre-commit\n        run: pip install pre-commit\n\n      - name: Lint\n        run: pre-commit run -a\n```"}
{"id": "63c49ad91e33648075796ee0", "level": "level1", "llm_response": "```yaml\nname: Draft Release\non:\n  branch: master\njobs", "answer": "```yaml name: Draft Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5c621ac4f2678a5bd7759", "level": "level1", "llm_response": "```yml\nname: Reusable - Create Java contrib pull request\n\non", "answer": "```yaml name: Reusable - Create Java contrib pull request\n\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n    secrets:\n      BOT_TOKEN:\n        required: true\n  # to help with partial release build failures\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version\"\n        required: true\n\njobs:\n  create-java-contrib-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: opentelemetrybot/opentelemetry-java-contrib\n          # this is the personal access token used for \"git push\" below\n          token: ${{ secrets.BOT_TOKEN }}\n\n      - name: Initialize pull request branch\n        env:\n          VERSION: ${{ inputs.version }}\n        run: |\n          git remote add upstream https://github.com/open-telemetry/opentelemetry-java-contrib.git\n          git fetch upstream\n          git checkout -b update-opentelemetry-sdk-to-${VERSION} upstream/main\n\n      - name: Update version\n        env:\n          VERSION: ${{ inputs.version }}\n        run: ./.github/scripts/update-sdk-version.sh $VERSION\n\n      - name: Use CLA approved github bot\n        run: .github/scripts/use-cla-approved-github-bot.sh\n\n      - name: Create pull request against opentelemetry-java-contrib\n        env:\n          # this is the personal access token used for \"gh pr create\" below\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}\n          VERSION: ${{ inputs.version }}\n        run: |\n          message=\"Update the SDK and instrumentation versions to $VERSION\"\n          body=$(cat << EOF\n          Update the SDK and instrumentation versions to \\`$VERSION\\`.\n          \n          Note: you will likely need to re-run the checks on this PR in an hour or so, once the\n          updated dependencies are visible in maven central.\n          EOF\n          )\n\n          # gh pr create doesn't have a way to explicitly specify different head and base\n          # repositories currently, but it will implicitly pick up the head from a different\n          # repository if you set up a tracking branch\n\n          git commit -a -m \"$message\"\n          git push --set-upstream origin HEAD:update-opentelemetry-sdk-to-${VERSION}\n          gh pr create --title \"$message\" \\\n                       --body \"$body\" \\\n                       --repo open-telemetry/opentelemetry-java-contrib \\\n                       --base main\n```"}
{"id": "63c49781517fc08c1eed75fb", "level": "level1", "llm_response": "```yaml\nname: Release\non:\n  branch:\n    - master\n", "answer": "```yaml \nname: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.14.0\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npm run semantic-release\n```"}
{"id": "63c49d1d6fc19abdf9cc7410", "level": "level1", "llm_response": "```yml\nname: pre-commit\non:\n  push:\n    branches", "answer": "```yaml # yaml-language-server: $schema=https://json.schemastore.org/github-workflow\n\nname: pre-commit\n\non:\n  push:\n  pull_request:\n\njobs:\n  pre-commit:\n    name: Detecting code style issues\n    runs-on: ubuntu-latest\n    # The Dockerfile for this container can be found at:\n    # https://github.com/Holzhaus/mixxx-ci-docker\n    container: holzhaus/mixxx-ci:20220805\n    steps:\n      - name: \"Check out repository\"\n        uses: actions/checkout@v3\n        with:\n          # Unfortunately we need the whole history and can't use a shallow clone\n          # because the Appstream Metadata hook parses the history to find the\n          # latest changelog modification date. Otherwise, `fetch-depth: 2` would\n          # suffice.\n          fetch-depth: 0\n\n      - name: \"Add GitHub workspace as a safe directory\"\n        # Without this, git commands will fail due to mismatching permissions in\n        # the container. See actions/runner#2033 for details.\n        #\n        # The actions/checkout action should already take care of this thanks to\n        # commit actions/checkout@55fd82fc42c0cdd6f1f480dd23f60636a42f6f5c, but\n        # it seems like that's not working properly.\n        run: |\n          git config --global --add safe.directory \"${GITHUB_WORKSPACE}\"\n          git config --global --list\n\n      - name: \"Detect code style issues (push)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'push'\n        # There are too many files in the repo that have formatting issues. We'll\n        # disable these checks for now when pushing directly (but still run these\n        # on Pull Requests!).\n        env:\n          SKIP: clang-format,eslint,no-commit-to-branch\n\n      - name: \"Detect code style issues (pull_request)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'pull_request'\n        env:\n          SKIP: no-commit-to-branch\n        with:\n          # HEAD is the not yet integrated PR merge commit +refs/pull/xxxx/merge\n          # HEAD^1 is the PR target branch and HEAD^2 is the HEAD of the source branch\n          extra_args: --from-ref HEAD^1 --to-ref HEAD\n\n      - name: \"Generate patch file\"\n        if: failure()\n        run: |\n          git diff-index -p HEAD > \"${PATCH_FILE}\"\n          [ -s \"${PATCH_FILE}\" ] && echo \"UPLOAD_PATCH_FILE=${PATCH_FILE}\" >> \"${GITHUB_ENV}\"\n        env:\n          PATCH_FILE: pre-commit.patch\n\n      - name: \"Upload patch artifact\"\n        if: failure() && env.UPLOAD_PATCH_FILE != null\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.UPLOAD_PATCH_FILE }}\n          path: ${{ env.UPLOAD_PATCH_FILE }}\n\n      # AppStream metadata has been generated/updated by a pre-commit hook\n      - name: \"Validate AppStream metadata\"\n        run: appstreamcli validate res/linux/org.mixxx.Mixxx.metainfo.xml\n```"}
{"id": "63c4966e6fc19abdf9c9c155", "level": "level1", "llm_response": "```yml\nname: tfsec release\n\non:\n  push:\n   ", "answer": "```yaml name: tfsec release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create binary + dockerhub releases\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n          cache: true\n          cache-dependency-path: go.sum\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5.1.0\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: Login to docker.io registry\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USER }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Release\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```"}
{"id": "63c499d5517fc08c1eee63cc", "level": "level1", "llm_response": "```yml\nname: CodeQL\non:\n  branches:\n    -", "answer": "```yaml name: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    - cron: '0 3 * * 1'\n\npermissions:\n  actions: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0cc1899db5886515e72", "level": "level1", "llm_response": "```yml\nname: Deploy itch.io Packages\non:\n  event:\n", "answer": "```yaml name: Deploy itch.io Packages\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Git Tag'\n        required: true\n        default: 'release-xxxxxxxx'\n\njobs:\n  itch:\n    name: Deploy to itch.io\n    runs-on: ubuntu-20.04\n    if: github.repository == 'openra/openra'\n    steps:\n      - name: Download Packages\n        run: |\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64.exe\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64-winportable.zip\" -O \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}.dmg\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Dune-2000-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Red-Alert-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Tiberian-Dawn-x86_64.AppImage\"\n          wget -q \"https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tag }}/packaging/.itch.toml\"\n          zip -u \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\" .itch.toml\n\n      - name: Publish Windows Installer\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: win\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64.exe\n\n      - name: Publish Windows Itch Bundle\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: itch\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\n\n      - name: Publish macOS Package\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: macos\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}.dmg\n\n      - name: Publish RA AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-ra\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Red-Alert-x86_64.AppImage\n\n      - name: Publish TD AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-cnc\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Tiberian-Dawn-x86_64.AppImage\n\n      - name: Publish D2k AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-d2k\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Dune-2000-x86_64.AppImage\n```"}
{"id": "63c49c611e336480757a0842", "level": "level1", "llm_response": "```yml\nname: Build jellyfin-blog\n\non:\n  pull_request", "answer": "```yaml name: '\ud83c\udfd7\ufe0f Build jellyfin-blog'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '.github/*.json'\n\njobs:\n  build:\n    uses: ./.github/workflows/_meta.yaml\n    with:\n      publish: false\n```"}
{"id": "63c49edf1842bc13d779394c", "level": "level1", "llm_response": "```yml\nname: RSpec\non:\n  pull_request:\n   ", "answer": "```yaml name: RSpec\non:\n  pull_request:\n  push:\n    branches: [ main ]\njobs:\n  coverage:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.1\n          bundler: 2.3.19\n          bundler-cache: true\n\n      - name: Install Code Climate reporter\n        run: |\n          sudo curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n          sudo chmod +x ./cc-test-reporter\n      - name: Generate Coverage\n        env:\n          CC_TEST_REPORTER_ID: 88e524e8f638efe690def7a6e2c72b1a9db5cdfa74548921b734d609a5858ee5\n        run: |\n          export GIT_BRANCH=${GITHUB_REF#refs/heads/}\n          export GIT_COMMIT_SHA=${GITHUB_SHA}\n          echo $GIT_BRANCH\n          echo $GIT_COMMIT_SHA\n          ./cc-test-reporter before-build\n          COV=true bin/rspec --require spec_helper --tag ~perf\n          ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?\n\n  tests:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ruby: [2.5, 2.6, 2.7, '3.0', 3.1]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler: 2.3.19\n          bundler-cache: true\n      - run: bin/appraisal install --jobs=$(nproc) --retry=$(nproc)\n      - run: bin/appraisal rspec --require spec_helper --tag ~perf\n```"}
{"id": "63c5c634ac4f2678a5bd7cfa", "level": "level1", "llm_response": "```yml\n---\nname: Issue Subscriber\non:\n  event:\n   ", "answer": "```yaml name: Issue Subscriber\n\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  auto-subscribe:\n    runs-on: ubuntu-latest\n    if: github.repository == 'llvm/llvm-project'\n    steps:\n      - name: Setup Automation Script\n        run: |\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/github-automation.py\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/requirements.txt\n          chmod a+x github-automation.py\n          pip install -r requirements.txt\n\n      - name: Update watchers\n        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable\n        env:\n          LABEL_NAME: ${{ github.event.label.name }}\n        run: |\n          ./github-automation.py \\\n            --token '${{ secrets.ISSUE_SUBSCRIBER_TOKEN }}' \\\n            issue-subscriber \\\n            --issue-number '${{ github.event.issue.number }}' \\\n            --label-name \"$LABEL_NAME\"\n```"}
{"id": "63c494bb7843b61269a03187", "level": "level1", "llm_response": "```yml\nname: lint-and-test\n\non:\n  pull_request:\n", "answer": "```yaml name: lint-and-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    tags-ignore:\n      - \"**\"  # Skip re-linting when tags are added\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install poetry\n        poetry install\n\n    - name: Run flake8\n      run: poetry run flake8 .\n\n    - name: Run mypy\n      run: poetry run mypy .\n\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n      fail-fast: false\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install tox-gh-actions\n\n    - name: Run tests w/tox\n      run: tox\n\n    - name: Cache coverage for ${{ matrix.python-version }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: cov_py${{ matrix.python-version }}\n        path: .coverage\n\n  combine-cov:\n    runs-on: ubuntu-latest\n    needs: test\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Pull coverage workflow artifacts\n      uses: actions/download-artifact@v3\n      with:\n        path: cov_cache/\n\n    - name: Install cov & combine\n      run: |\n        pip install coverage\n        coverage combine ./cov_cache/**/.coverage\n\n    - name: Report coverage\n      run: |\n        echo '**Combined Coverage**' >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage report -m --skip-covered >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage html\n\n    - name: Publish cov HTML\n      uses: actions/upload-artifact@v3\n      with:\n        path: htmlcov/\n        name: cov_report_html\n```"}
{"id": "63c49df933b087f6bde5cc80", "level": "level1", "llm_response": "```yml\nname: Deploy CI\n\non:\n  branch: master\n", "answer": "```yaml name: Deploy CI\n\nenv:\n  NODE_OPTIONS: --max-old-space-size=6144\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: 'Setup Node.js'\n        uses: actions/setup-node@v3\n        with:\n          node-version: 14\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-\n\n      - name: Pnpm action\n        uses: pnpm/action-setup@v2\n        with:\n          version: latest\n          run_install: true\n\n      - name: Build\n        run: pnpm build:site\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          cname: watermark.xingkang.wang\n```"}
{"id": "63c4a15b1842bc13d77a36dc", "level": "level1", "llm_response": "```yml\n---\nname: PHP 5.2\n\non:\n ", "answer": "```yaml \non: push\n\njobs:\n  test-idiorm-with-php5-2:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n\n    env:\n      REGISTRY: ghcr.io\n      IMAGE_NAME: treffynnon/php5.2cli:latest\n\n    name: 'PHP 5.2'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Pull docker image\n        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - name: Run PHPUnit tests\n        run: docker run -t -v $(realpath ./):/tmp/idiorm --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} /root/phpunit -c /tmp/idiorm/phpunit.xml\n\n  test-idiorm-against-php-matrix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-versions:     ['5.4', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4']\n        phpunit-versions: ['4.8']\n        include:\n          - php-versions: '8.0'\n            phpunit-versions: '8.5.21'\n          - php-versions: '8.2'\n            phpunit-versions: '8.5.21'\n\n    name: PHP ${{ matrix.php-versions }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php-versions }}\n          coverage: xdebug\n          tools: composer, phpunit:${{ matrix.phpunit-versions }}\n\n      - name: Setup problem matchers for PHPUnit\n        run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Add PHP 8 return types\n        if: ${{ matrix.php-versions >= '8.0' }}\n        run: |\n          sed -i 's#setUp()#setUp(): void#' test/*.php\n          sed -i 's#tearDown()#tearDown(): void#' test/*.php\n\n      - name: Run phpunit tests\n        run: composer run-script test -- --colors --coverage-text\n```"}
{"id": "63c49cdc517fc08c1eef9339", "level": "level1", "llm_response": "```yaml\nname: Build debug apk\non:\n  pull_request:\n   ", "answer": "```yaml name: Build debug apk\n\non:\n  pull_request:\n    branches:\n      - develop\n    paths-ignore:\n      - '**.md'\n      - '.github/**'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build_debug_apk:\n    name: Build debug apk\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: assembleInternalDebug\n\n      - name: Obtain debug apk\n        if: always()\n        run: cp $(find . -regex '.*outputs/apk/.*internal-debug.apk') pr-ddg-debug.apk\n\n      - name: Upload debug apk\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: pr-ddg-debug\n          path: pr-ddg-debug.apk```"}
{"id": "63c497e4cbc73931bb18352f", "level": "level1", "llm_response": "```yml\nname: binder-badge\non:\n  event:\n    type", "answer": "```yaml name: binder-badge\non:\n  pull_request_target:\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: manics/action-binderbadge@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4990d33b087f6bde3ccdf", "level": "level1", "llm_response": "```yml\nname: Test C++\non:\n  push:\n    branches", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C++\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - '.github/workflows/test-lang-c\\+\\+.yml'\n    - 'lang/c\\+\\+/**'\n\ndefaults:\n  run:\n    working-directory: lang/c++\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt update && sudo apt-get install -qqy cppcheck libboost-all-dev libsnappy-dev cmake\n\n      - name: Clean\n        run: ./build.sh clean\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Release build\n        run: |\n          mkdir -p build\n          cd build\n          cmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release ..\n```"}
{"id": "63c49a65517fc08c1eee9b6d", "level": "level1", "llm_response": "```yml\n---\nname: Compress images\non:\n  pull_request", "answer": "```yaml name: Compress images\n\non:\n  pull_request:\n    paths:\n      - '**.jpg'\n      - '**.png'\n      - '**.webp'\n\njobs:\n  build:\n    name: calibreapp/image-actions\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Compress Images\n        uses: calibreapp/image-actions@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e5933b087f6bde5f2bb", "level": "level1", "llm_response": "```yaml\nname: Docker Build TeamCity\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-05-26 12:00:50 +0100 (Thu, 26 May 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Dockerfiles\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Docker Build TeamCity\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - teamcity/Dockerfile\n      - .github/workflows/docker_build_teamcity.yaml\n  workflow_dispatch:\n  #schedule:\n  #  - cron: '0 2 * * *'\n\njobs:\n  docker_build:\n    name: Docker Build\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: |\n      github.repository_owner == 'HariSekhon' &&\n      (\n        github.event_name == 'schedule' ||\n        (\n          github.ref_type == 'branch' &&\n          ( github.ref_name == github.event.repository.default_branch || github.ref_name == 'docker' )\n        )\n      )\n    uses: HariSekhon/GitHub-Actions/.github/workflows/docker_build.yaml@master\n    with:\n      repo_tags: |\n        ghcr.io/harisekhon/teamcity:latest\n        harisekhon/teamcity:alpine\n      context: teamcity\n    secrets:\n      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n    permissions:\n      contents: read\n      packages: write\n```"}
{"id": "63c49ec1cbc73931bb1af7f3", "level": "level1", "llm_response": "```yml\nname: Aggregate sources and rebuild\n\non:\n  event_type", "answer": "```yaml name: Aggregate sources and rebuild\n\non:\n  schedule:\n    # 19:42 UTC every Sunday\n    - cron: \"42 19 * * 0\"\n\n  # push:\n    # branches:\n      # - gh-pages\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: gh-pages\n          fetch-depth: 1\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r scripts/requirements.txt\n\n      - name: Aggregate and build\n        run: |\n          rm -rf src/aggregations\n          python scripts/build.py auto aggregate\n          python scripts/build.py auto\n\n      - name: Commit files\n        run: |\n          git config user.name 'GitHub Action'\n          git config user.email 'actions@github.com'\n          git add -u .\n          git commit -m \"cd: auto build at $(TZ=UTC date +'%F'T'%T'Z)\"\n          git push --force-with-lease\n```"}
{"id": "63c4975e1e33648075780971", "level": "level1", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c498d933b087f6bde3b708", "level": "level1", "llm_response": "```yml\n---\nname: No Response\non:\n  branches:\n   ", "answer": "```yaml name: No Response\n\n# **What it does**: Closes issues where the original author doesn't respond to a request for information.\n# **Why we have it**: To remove the need for maintainers to remember to check back on issues periodically to see if contributors have responded.\n# **Who does it impact**: Everyone that works on docs or docs-internal.\n\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ github.token }}\n          daysUntilClose: 14 # Number of days of inactivity before an Issue is closed for lack of response\n          responseRequiredLabel: \"Reporter Feedback\" # Label indicating that a response from the original author is required\n          closeComment: >\n            This issue has been automatically closed because there has been no response\n            to our request for more information. With only the\n            information that is currently in the issue, we don't have enough information\n            to take action. Please reach out if you have or find the answers we need so\n            that we can investigate further. See [this blog post on bug reports and the\n            importance of repro steps](https://www.lee-dohm.com/2015/01/04/writing-good-bug-reports/)\n            for more information about the kind of information that may be helpful.\n```"}
{"id": "63c49d67517fc08c1eefc9e1", "level": "level1", "llm_response": "```yml\nname: Sync Wiki\non:\n  push:\n    branches", "answer": "```yaml name: Sync Wiki\n\n# Ignored. To make it work, we would need a secret named GH_PERSONAL_ACCESS_TOKEN with a Github personal access token with \"repo\" authorization.\n# Inspired in: https://github.com/marketplace/actions/publish-to-github-wiki\n\non:\n  push:\n    branches-ignore:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Sync GitHub Wiki from Sources\n    steps:\n      - run: ./scripts/sync-wiki.sh\n        env:\n          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}\n        shell: bash\n        timeout-minutes: 5\n```"}
{"id": "63c49b9c6fc19abdf9cbda1a", "level": "level1", "llm_response": "```yml\nname: CI\non:\n  branches:\n    - master", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm i\n      - run: npm test\n```"}
{"id": "63c4985e1e3364807578700c", "level": "level1", "llm_response": "```yml\nname: Lint Commit Messages\non:\n  pull_request", "answer": "```yaml # Run commitlint on the commit messages in a pull request.\n\nname: Lint Commit Messages\n\non:\n  - pull_request\n\njobs:\n  commitlint:\n    uses: openedx/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c49e451e336480757ac7a0", "level": "level1", "llm_response": "```yml\nname: Documentation Generator\n\non:\n  push:\n    branches", "answer": "```yaml name: Documentation Generator\non:\n  push:\n    branches:\n      - \"*\"\n      - \"!docs\"\n    tags:\n      - \"*\"\njobs:\n  docs:\n    name: Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n\n      - name: Install dependencies\n        run: yarn --immutable\n\n      - name: Checkout docs branch\n        uses: actions/checkout@v3\n        with:\n          ref: \"docs\"\n          path: \"docs\"\n\n      - name: Generate documentation\n        run: yarn docs\n\n      - name: Move generated docs file\n        run: mv docs.json docs/${{ github.ref_name }}.json\n\n      - name: Commit and push\n        run: |\n          cd docs\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Docs build for ${{ github.ref_type }} ${{ github.ref_name }}: ${{ github.sha }}\"\n          git push\n```"}
{"id": "63c49ad8517fc08c1eeeca56", "level": "level1", "llm_response": "```yml\nname: dependabot-auto-merge\non:\n ", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    \n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          \n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          \n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c4a0f16fc19abdf9cdf46c", "level": "level1", "llm_response": "```yaml\nname: Check Lint\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Check Lint\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  check-lint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install clang-format\n        run: |\n          sudo apt update\n          sudo apt install clang-format-10\n      - uses: actions/checkout@v3\n      - run: ./scripts/check-lint.sh\n        env:\n          CLANG_FORMAT_PATH: \"/usr/bin/clang-format-10\"\n```"}
{"id": "63c49df81842bc13d778dba8", "level": "level1", "llm_response": "```yml\n---\nname: Pull Request Required Labels\non:\n  branch", "answer": "```yaml #  https://github.com/mheap/github-action-required-labels\nname: Pull Request Required Labels\non:\n  pull_request:\n    types: [ opened, labeled, unlabeled, synchronize ]\njobs:\n  label:\n    if: github.event.pull_request.state == 'open'\n    runs-on: ubuntu-latest\n    name: Verify Pull Request has labels\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        with:\n          mode: minimum\n          count: 1\n          labels: \"breaking-change, feature, enhancement, bug, dependencies, documentation, housekeeping\"```"}
{"id": "63c49f50736e7f0ed8c6d7ce", "level": "level1", "llm_response": "```yml\nname: Conventional Commits\non:\n  pull_request", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - master\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  commitsar:\n    name: Validate Conventional Commits\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Run commitsar\n        uses: docker://outillage/commitsar:0.11.2\n```"}
{"id": "63c49feeb008460c1df50a68", "level": "level1", "llm_response": "```yml\nname: Create Releasable Package Drop\n\non:\n", "answer": "```yaml name: Create Releasable Package Drop\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - release-*\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - uses: actions/setup-node@v3\r\n    - name: npm install and test\r\n      run: |\r\n        npm ci\r\n        npm test\r\n    - name: Adding playwright\r\n      run: npm install --no-save --no-package-lock playwright\r\n    - name: Validate the browser can import TypeScript\r\n      run: gulp test-browser-integration\r\n    - name: LKG, clean, and pack\r\n      run: |\r\n        gulp LKG\r\n        gulp clean\r\n        npm pack ./\r\n        mv typescript-*.tgz typescript.tgz\r\n    - name: Upload built tarfile\r\n      uses: actions/upload-artifact@v3\r\n      with:\r\n        name: tgz\r\n        path: typescript.tgz\r\n```"}
{"id": "63c4a1386fc19abdf9ce1169", "level": "level1", "llm_response": "```yml\n---\nname: Codacy Security Scan\non:\n  branch", "answer": "```yaml # This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow checks out code, performs a Codacy security scan\n# and integrates the results with the\n# GitHub Advanced Security code scanning feature.  For more information on\n# the Codacy security scan action usage and parameters, see\n# https://github.com/codacy/codacy-analysis-cli-action.\n# For more information on Codacy Analysis CLI in general, see\n# https://github.com/codacy/codacy-analysis-cli.\n\nname: Codacy Security Scan\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '17 14 * * 5'\n\npermissions:\n  contents: read\n\njobs:\n  codacy-security-scan:\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    name: Codacy Security Scan\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository to the GitHub Actions runner\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis\n      - name: Run Codacy Analysis CLI\n        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b\n        with:\n          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository\n          # You can also omit the token and run the tools that support default configurations\n          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}\n          verbose: true\n          output: results.sarif\n          format: sarif\n          # Adjust severity of non-security issues\n          gh-code-scanning-compat: true\n          # Force 0 exit code to allow SARIF file generation\n          # This will handover control about PR rejection to the GitHub side\n          max-allowed-issues: 2147483647\n\n      # Upload the SARIF file generated in the previous step\n      - name: Upload SARIF results file\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n```"}
{"id": "63c49eca517fc08c1ef05b75", "level": "level1", "llm_response": "```yml\nname: check-only\non:\n  pull_request:\n   ", "answer": "```yaml name: check-only\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  desktop-win:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore .\\WolvenKit\\WolvenKit.csproj\n    - name: Build\n      run: dotnet build .\\WolvenKit\\WolvenKit.csproj --no-restore\n\n  console-linux:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore ./WolvenKit.CLI/WolvenKit.CLI.csproj\n    - name: Build\n      run: dotnet build ./WolvenKit.CLI/WolvenKit.CLI.csproj --no-restore```"}
{"id": "63c497d3cbc73931bb182d2f", "level": "level1", "llm_response": "```yml\nname: Dependency Review\non: pull_request.event.types.push", "answer": "```yaml name: 'Dependency Review'\non: [ pull_request ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    continue-on-error: false\n    steps:\n      - name: 'Checkout Repository'\n        uses: actions/checkout@v3\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v2\n        with:\n          fail-on-severity: critical\n          # Representation of this list: https://www.eclipse.org/legal/licenses.php#\n          # Expressed with the help of the following IDs: https://spdx.org/licenses/\n          allow-licenses: >-\n            Adobe-Glyph, Apache-1.0, Apache-1.1, Apache-2.0, Artistic-2.0, BSD-2-Clause, BSD-3-Clause,\n            BSD-4-Clause, 0BSD, BSL-1.0, CDDL-1.0, CDDL-1.1, CPL-1.0, CC-BY-3.0, CC-BY-4.0, CC-BY-2.5,\n            CC-BY-SA-3.0, CC-BY-SA-4.0, CC0-1.0, EPL-1.0, EPL-2.0, FTL, GFDL-1.3-only, IPL-1.0, ISC,\n            MIT, MIT-0, MPL-1.1, MPL-2.0, NTP, OpenSSL, PHP-3.01, PostgreSQL, OFL-1.1, Unlicense,\n            Unicode-DFS-2015, Unicode-DFS-2016, Unicode-TOU, UPL-1.0, W3C-20150513, W3C-19980720, W3C,\n            WTFPL, X11, Zlib, ZPL-2.1\n```"}
{"id": "63c4a061cbc73931bb1ba068", "level": "level1", "llm_response": "```yml\nname: check-x-pack-heartbeat\n\non:\n  pull", "answer": "```yaml name: check-x-pack-heartbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-heartbeat.yml'\n      - 'x-pack/heartbeat/**'\n      - 'heartbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/heartbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      run: |\n        go install github.com/magefile/mage\n        make -C ${{ env.BEAT_MODULE }} check update\n        make check-no-changes\n```"}
{"id": "63c49d6eb008460c1df40ff3", "level": "level1", "llm_response": "```yml\n---\nname: frontend\non:\n  pull_request:\n   ", "answer": "```yaml name: frontend\n\non:\n  pull_request:\n\njobs:\n\n  frontend:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Node\n        uses: actions/setup-node@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n            node-version: '16.x'\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          yarn\n\n      - name: Lint and test Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn run test\n\n      - name: Store test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        uses: actions/upload-artifact@v3\n        with:\n          name: frontend_coverage\n          path: ./test/unit_test_coverage/clover.xml\n\n      - name: Build Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn build\n\n  coverage:\n    runs-on: ubuntu-latest\n    needs:\n      - frontend\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements/ci.txt\n\n      - name: Retrieve frontend coverage\n        uses: actions/download-artifact@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          name: frontend_coverage\n          path: frontend_coverage\n\n      - name: Check frontend test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          diff-cover frontend_coverage/clover.xml --compare-branch=origin/main --fail-under=100\n```"}
{"id": "63c49fae33b087f6bde67bc4", "level": "level1", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n\njobs:\n  verify_module:\n    name: Verify module\n    strategy:\n      matrix:\n        terraform: [1.1.9]\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - run: terraform fmt -recursive -check=true -write=false\n\n  verify_examples:\n    name: Verify examples\n    strategy:\n      fail-fast: false\n      matrix:\n        terraform: [1.0.11, latest]\n        example:\n          [\n            \"runner-default\",\n            \"runner-docker\",\n            \"runner-multi-region\",\n            \"runner-pre-registered\",\n            \"runner-public\",\n          ]\n    defaults:\n      run:\n        working-directory: examples/${{ matrix.example }}\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - if: contains(matrix.terraform, '1.0.')\n        run: terraform fmt -recursive -check=true -write=false\n      - run: terraform validate\n\n  docs:\n    # update docs after merge back to develop\n    if: github.event_name != 'pull_request' && contains('refs/heads/develop', github.ref)\n    name: Auto update terraform docs\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: CHeckout branch\n      uses: actions/checkout@v3\n\n    - name: Generate TF docs\n      uses: terraform-docs/gh-actions@v1.0.0\n      with:\n        find-dir: .\n        git-commit-message: \"docs: auto update terraform docs\"\n        git-push: true\n\n  tfsec:\n    name: tfsec PR commenter\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Clone repo\n        uses: actions/checkout@master\n      - name: tfsec\n        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0\n        with:\n          github_token: ${{ github.token }}\n\n  release:\n    if: github.event_name != 'pull_request' && contains('refs/heads/main', github.ref)\n    name: Release\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Get installation token\n        uses: npalm/action-app-token@v1.0.0\n        id: app-token\n        with:\n          appId: ${{ secrets.APP_ID }}\n          appPrivateKeyBase64: ${{ secrets.APP_PRIVATE_KEY_BASE64 }}\n          appInstallationType: repo\n          appInstallationValue: ${{ github.repository }}\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}\n        run: |\n          cp .release/* .\n          yarn \n          yarn release --repositoryUrl https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git\n```"}
{"id": "63c49df8517fc08c1ef0053c", "level": "level1", "llm_response": "```yml\nname: Dependency Review\non: pull_request.event.pull_request", "answer": "```yaml name: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit\n\n      - name: 'Checkout Repository'\n        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@fd675ced9c17f1393071e1a2e685ab527e585a0c\n```"}
{"id": "63c49e6f1842bc13d7790c57", "level": "level1", "llm_response": "```yml\nname: Auto merge\n\non:\n  events:\n    -", "answer": "```yaml name: Auto merge\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Tests'\n\njobs:\n  merge-me:\n    name: Auto merge\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Auto merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2\n        with:\n          # Depending on branch protection rules, a  manually populated\n          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to\n          # a protected branch must be used.\n          #\n          # When using a custom token, it is recommended to leave the following\n          # comment for other developers to be aware of the reasoning behind it:\n          #\n          # This must be used as GitHub Actions token does not support pushing\n          # to protected branches.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PRESET: DEPENDABOT_MINOR\n```"}
{"id": "63c49728b008460c1df19228", "level": "level1", "llm_response": "```yml\nname: JOSS\non:\n  branch:\n    -", "answer": "```yaml name: JOSS\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"joss/**\"\n\njobs:\n  joss:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Generate .tex\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml --to=latex --output=paper.tex\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Generate .pdf\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Upload the generated files as an artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: joss\n          name: joss\n\n      - name: Deploy\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: peaceiris/actions-gh-pages@v3.8.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./joss\n          force_orphan: true\n          publish_branch: joss-compiled\n```"}
{"id": "63c4989e6fc19abdf9caa598", "level": "level1", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  nodejs:\n    # Documentation: https://github.com/zakodium/workflows#nodejs-ci\n    uses: zakodium/workflows/.github/workflows/nodejs.yml@nodejs-v1\n    with:\n      node-version-matrix: '[12, 14, 16, 18]'\n```"}
{"id": "63c49ce633b087f6bde55c90", "level": "level1", "llm_response": "```yml\nname: Lint and Test\non:\n  push:\n", "answer": "```yaml name: Lint and Test\n\non: [push]\n\njobs:\n  lint_and_test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: Install dependencies\n      run: make install\n    - name: Lint\n      run: make lint\n    - name: Test\n      run: make test\n```"}
{"id": "63c49c3d1e3364807579f946", "level": "level1", "llm_response": "```yml\nname: notify-release\non:\n  branches:\n    -", "answer": "```yaml name: notify-release\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    - cron: '30 8 * * *'\r\njobs:\r\n  setup:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Notify release\r\n        uses: nearform/github-action-notify-release@v1\r\n        with:\r\n          github-token: ${{ secrets.GITHUB_TOKEN }}\r\n```"}
{"id": "63c4a096736e7f0ed8c75ab0", "level": "level1", "llm_response": "```yml\nname: test-get-target-config\n\non:\n  pull_request", "answer": "```yaml name: test-get-target-config\n\non:\n  pull_request:\n    branches:\n    - main\n  push:\n    branches:\n    - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: aws/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_assume_role_arn }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_region }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n  test-gcp:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: gcp/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n```"}
{"id": "63c4975e6fc19abdf9ca2240", "level": "level1", "llm_response": "```yml\nname: Automatic Rebase\non:\n  event:\n   ", "answer": "```yaml on:\n  issue_comment:\n    types: [created]\nname: Automatic Rebase\njobs:\n  rebase:\n    name: Rebase\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/rebase')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n        with:\n          fetch-depth: 0\n      - name: Automatic Rebase\n        uses: cirrus-actions/rebase@1.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e301899db5886504fda", "level": "level1", "llm_response": "```yml\nname: CodeQL\non: push\njobs:\n ", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\n#on:\n#  push:\n#    branches: [ master ]\n#  pull_request:\n#    # The branches below must be a subset of the branches above\n#    branches: [ master ]\n#  schedule:\n#    - cron: '30 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: true\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 6.0.100\n\n    - name: Build\n      run: dotnet build\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```"}
{"id": "63c4a09333b087f6bde6d774", "level": "level1", "llm_response": "```yml\n---\nname: Nix\n\non:\n  branches:\n   ", "answer": "```yaml name: Nix\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Nix Flake - Linux\n    permissions:\n      contents: read\n    steps:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install\n          install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Clone project\n        uses: actions/checkout@v3\n      - name: Build\n        # \"nix build\" builds with full optimization and includes a profiling\n        # build, so just the build of xmonad-contrib itself takes 3 minutes.\n        # As a workaround, we invoke cabal manually here.\n        run: nix develop -c cabal v2-build -O0 -j\n```"}
{"id": "63c49cf21899db58864fd39b", "level": "level1", "llm_response": "```yml\nname: Cache libs (dist)\non:\n  branches:\n", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n      - 'epic/**'\n      - 'release/**'\nname: Cache libs (dist)\njobs:\n  cacheBuildedLibs:\n    name: Builded libs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Cache builded libs\n        uses: ./.github/cache-builded-libs\n```"}
{"id": "63c4a1266fc19abdf9ce0a0e", "level": "level1", "llm_response": "```yml\nname: Debug on Windows\non:\n  branches:\n   ", "answer": "```yaml on: workflow_dispatch\n\nname: Debug on Windows\njobs:\n    debug-windows:\n        runs-on: windows-latest\n        strategy:\n            fail-fast: false\n            matrix:\n                language: [\"cpp\"]\n\n        steps:\n            - name: Setup NuGet.exe for use with actions\n              uses: NuGet/setup-nuget@v1.0.5\n\n            - name: Checkout\n              uses: actions/checkout@v2.3.4\n              with:\n                  submodules: recursive\n\n            - name: Install OpenSSL\n              uses: crazy-max/ghaction-chocolatey@v1.6.0\n              with:\n                  args: install openssl -y\n\n            - name: Add NuGet Remote\n              run: \"nuget.exe sources Add -Name NuGetRemote -Source https://api.nuget.org/v3/index.json\"\n\n            - name: Setup tmate session\n              uses: mxschmitt/action-tmate@v3\n              with:\n                limit-access-to-actor: true\n              continue-on-error: true```"}
{"id": "63c4986cb008460c1df210dd", "level": "level1", "llm_response": "```yml\nname: Large Repo Benchmark\n\non:\n  branches:\n   ", "answer": "```yaml name: Large Repo Benchmark\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [Release]\n    types:\n      - completed\n\njobs:\n  build:\n    name: Run Benchmarks\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-node\n      - uses: ./.github/actions/setup-go\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Build\n        run: cd cli && make turbo\n\n      - name: Download previous benchmark results\n        # continue on error so that we handle the bootstrap case where there is no previous data\n        continue-on-error: true\n        run: mkdir -p raw-data/${{ runner.os }} && curl -f -o raw-data/${{ runner.os }}/benchmark-data.json https://raw.githubusercontent.com/vercel/turborepo/gh-pages/${{ runner.os }}/benchmark-data.json\n\n      - name: Run benchmarks\n        run: cd benchmark && pnpm benchmark\n\n      - name: Save to Tinybird\n        if: github.ref == 'refs/heads/main'\n        run: |\n          curl \\\n            -i \\\n            -F \"ndjson=@./benchmark/tinybird.ndjson\" \\\n            -X POST \\\n            -H 'Authorization: Bearer ${{ secrets.TINYBIRD_TOKEN }}' \\\n            'https://api.us-east.tinybird.co/v0/datasources?format=ndjson&name=turbo_benchmarks&mode=append'\n\n      - name: Store Benchmark Result\n        uses: benchmark-action/github-action-benchmark@v1\n        with:\n          name: \"${{ runner.os }} Benchmark\"\n          # What benchmark tool the output is formatted as\n          tool: \"customSmallerIsBetter\"\n          output-file-path: ./benchmark/benchmarks.json\n          external-data-json-path: ./raw-data/${{ runner.os }}/benchmark-data.json\n          auto-push: false\n          # GitHub API token to make a commit\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          skip-fetch-gh-pages: true\n\n      - name: Deploy\n        if: github.ref == 'refs/heads/main'\n        uses: JamesIves/github-pages-deploy-action@v4.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          folder: raw-data\n          clean: false\n          single-commit: false\n          git-config-email: github-bot@turborepo.org\n          repository-name: vercel/turborepo\n          commit-message: \"Update\"\n```"}
{"id": "63c4a04c1e336480757b949e", "level": "level1", "llm_response": "```yml\n---\nname: Tests: pretest/posttest\n\non:\n", "answer": "```yaml name: 'Tests: pretest/posttest'\n\non: [pull_request, push]\n\njobs:\n  tests:\n    uses: ljharb/actions/.github/workflows/pretest.yml@main\n```"}
{"id": "63c49dc61842bc13d778c79d", "level": "level1", "llm_response": "```yml\n---\nname: Node.js Package\n\non:\n  release:\n", "answer": "```yaml # This workflow will run tests using node and then publish a package to GitHub Packages when a release is created\n# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages\n\nname: Node.js Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: 'npm'\n      - run: npm ci\n\n      - name: Determine dist-tag\n        id: dist_tag\n        uses: actions/github-script@v6\n        with:\n          result-encoding: string\n          script: |\n            const semver = require(\"semver\");\n            const version = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version;\n            const parsed = semver.parse(version);\n            return parsed.prerelease.length ? \"--tag next\" : \"\";\n\n      - name: Publish to NPM\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n          TAG: ${{ steps.dist_tag.outputs.result }}\n        run: npm publish $TAG\n```"}
{"id": "63c498f31e3364807578ae91", "level": "level1", "llm_response": "```yml\nname: close stale issues/PRs\non:\n ", "answer": "```yaml name: 'close stale issues/PRs'\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@87c2b794b9b47a9bec68ae03c01aeb572ffebdb1\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label: \"\"\n          close-pr-message: \"\"\n```"}
{"id": "63c49ce96fc19abdf9cc5f23", "level": "level1", "llm_response": "```yml\nname: Builds\non:\n  branches:\n    - main", "answer": "```yaml name: Builds\non:\n  - push\n  - pull_request\n\npermissions:\n  contents: read\n\njobs:\n  doc:\n    name: Documentation (Sphinx)\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build docs\n        run: make doc\n\n      - name: Print warnings\n        run: if [ -s .sphinx/warnings.txt ]; then cat .sphinx/warnings.txt; exit 1; fi\n\n      - name: Upload artifacts\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: documentation\n          path: doc/html\n\n  static:\n    name: Static binaries\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n          - windows-latest\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create build directory\n        run: |\n          mkdir bin\n\n      - name: Build static lxc\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxc\n\n      - name: Build static lxd-migrate\n        if: runner.os == 'Linux'\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxd-migrate\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        continue-on-error: true\n        with:\n          name: ${{ runner.os }}\n          path: bin/\n```"}
{"id": "63c494d87843b61269a03c6b", "level": "level1", "llm_response": "```yml\nname: Check Pull Request\n\non:\n  pull_request:\n", "answer": "```yaml name: Check Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  check-title:\n    name: Check Title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Semantic pull request\n        uses: amannn/action-semantic-pull-request@v5.0.1\n        with:\n          validateSingleCommit: true\n          ignoreLabels: revert\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4972bb008460c1df19384", "level": "level1", "llm_response": "```yml\nname: Publish MacOS \u2014 x64\n\non:\n  branch", "answer": "```yaml name: Publish MacOS \u2014 x64\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    runs-on: macos-11\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install Packages\n        run: yarn install\n      - name: Rebuild Native Modules\n        run: npx electron-rebuild\n      - name: Get Urbit Binaries\n        run: ./get-urbit.sh\n      - name: Add MacOS certs\n        run: chmod +x add-osx-cert.sh && ./add-osx-cert.sh\n        env:\n          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}\n          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n      - name: Build & Publish\n        run: |\n          yarn run publish --arch x64\n        env:\n          APPLE_ID: ${{secrets.APPLE_ID}}\n          APPLE_ID_PASSWORD: ${{secrets.APPLE_ID_PASSWORD}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}```"}
{"id": "63c49df8517fc08c1ef0053b", "level": "level1", "llm_response": "```yml\nname: CodeQL\non:\n  branch:\n    -", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  schedule:\n    - cron: '0 7 * * 1' # Monday at 7:00 AM\n\npermissions: read-all\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n\n    steps:\n    - name: Harden Runner\n      uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n      with:\n        egress-policy: audit\n\n    - name: Checkout repository\n      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@807578363a7869ca324a79039e6db9c843e0e100\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@807578363a7869ca324a79039e6db9c843e0e100\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@807578363a7869ca324a79039e6db9c843e0e100\n```"}
{"id": "63c499856fc19abdf9cb0415", "level": "level1", "llm_response": "```yml\nname: make all\non:\n  push:\n    branches", "answer": "```yaml on: push\nname: make all\njobs:\n  makeall:\n    name: make all\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make all\n        uses: docker://golang:latest\n        with:\n          entrypoint: bash\n          args: -c \"go get honnef.co/go/tools/cmd/staticcheck && go get golang.org/x/lint/golint && git checkout . && make all\"\n```"}
{"id": "63c49ade517fc08c1eeecd16", "level": "level1", "llm_response": "```yml\nname: Test installation and doccano commands\non:\n ", "answer": "```yaml name: Test installation and doccano commands\n\non:\n  schedule:\n    - cron: \"15 22 * * *\"\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    steps:\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Enabling JSON1 extension on SQLite\n      if: ${{ startsWith(matrix.os, 'windows') && matrix.python-version == '3.8' }}\n      shell: bash\n      run: |\n        export VERSION=`python -V | cut -f2 -d \" \"`\n        curl -LO https://www.sqlite.org/2022/sqlite-dll-win64-x64-3390300.zip\n        unzip sqlite-dll-win64-x64-3390300.zip\n        mv sqlite3.dll /c/hostedtoolcache/windows/Python/$VERSION/x64/DLLs/\n    - name: Test installation\n      run: pip install doccano\n    - name: Test doccano init command\n      run: doccano init\n    - name: Test doccano createuser command\n      run: doccano createuser --username admin --password pass\n```"}
{"id": "63c49ba0b008460c1df358ce", "level": "level1", "llm_response": "```yml\nname: Deploy demo to Fly\non:\n  branch:\n", "answer": "```yaml name: Deploy demo to Fly\non:\n  workflow_run:\n    workflows: [Cookie cutter test]\n    branches: [main]\n    types:\n      - completed\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      if: ${{ github.event.workflow_run.conclusion == 'success' }}\n      timeout-minutes: 6\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - name: Install dependencies\n          run: |\n            apk update && apk add py3-pip python3\n            pip3 install cookiecutter\n        - run: bash scripts/deploy-demo-project-to-fly.sh\n```"}
{"id": "63c495c57843b61269a09c8f", "level": "level1", "llm_response": "```yml\n---\nname: CI and CD\n\non:\n  branches:\n", "answer": "```yaml name: CI and CD\n\non:\n  push:\n    branches:\n    - master\n  workflow_dispatch:\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run a one-line script\n      run: echo Hello, world!\n    - name: Start environment\n      run: make start-containers\n    - name: Run tests\n      run: make params=-T tests\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    needs: tests\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run Ansible playbook\n      uses: dawidd6/action-ansible-playbook@v2\n      with:\n        playbook: ./infrastructure/playbooks/deploy.yml\n        directory: ./\n        key: ${{secrets.SSH_KEY}}\n        vault_password: ${{secrets.VAULT_PASSWORD}}\n        options: |\n          --inventory infrastructure/playbooks/hosts\n      env:\n        ANSIBLE_HOST_KEY_CHECKING: False\n```"}
{"id": "63c4966d1e3364807577a9d1", "level": "level1", "llm_response": "```yml\nname: Compile test\n\non:\n  push:\n    branches", "answer": "```yaml name: Compile test\n\non:\n  push:\n    branches:\n      - \"**\"\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  compile:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048 # tag=v3\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm install\n    - run: npm run build```"}
{"id": "63c497691899db58864d95cc", "level": "level1", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n    paths-ignore:\n      - '*/spec/fixtures/**'\n      - 'CHANGELOG.md'\n      - 'common/lib/dependabot/version.rb'\n  schedule:\n    - cron: '41 4 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'schedule' || github.repository == 'dependabot/dependabot-core' }}\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go', 'javascript', 'python', 'ruby' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49a5e6fc19abdf9cb5a11", "level": "level1", "llm_response": "```yml\n---\nname: npm-update-pf\non:\n  -", "answer": "```yaml name: npm-update-pf\non:\n  schedule:\n    - cron: '0 3 * * 1'\n  # can be run manually on https://github.com/cockpit-project/cockpit/actions\n  workflow_dispatch:\njobs:\n  npm-update:\n    environment: npm-update\n    permissions:\n      pull-requests: write\n      contents: write\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v3\n\n      - name: Run npm-update bot\n        run: |\n          tools/make-bots\n          git config --global user.name \"GitHub Workflow\"\n          git config --global user.email \"cockpituous@cockpit-project.org\"\n          mkdir -p ~/.config/cockpit-dev\n          echo ${{ github.token }} >> ~/.config/cockpit-dev/github-token\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}'\n          bots/npm-update @patternfly >&2\n          ssh-add -D\n          ssh-agent -k\n\n      - name: Force push the change to trigger testing workflows\n        run: |\n          # Don't force-push if no branch was created\n          test \"$(git symbolic-ref HEAD)\" = '${{ github.ref }}' && exit\n\n          sleep 1 # make sure the timestamp changes\n          git commit --amend --no-edit\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.COCKPIT_DEPLOY_KEY }}'\n          git push --force 'git@github.com:${{ github.repository }}' HEAD\n          ssh-add -D\n          ssh-agent -k\n```"}
{"id": "63c49dc8517fc08c1eeff286", "level": "level1", "llm_response": "```yml\nname: Build & Test\n\non:\n  pull_request:\n", "answer": "```yaml name: Build & Test\n\non:\n  push: {}\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build-and-test:\n    name: Build & Test\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ocaml-compiler:\n          - 4.11.0\n          - 4.10.1\n          - 4.09.1\n          - 4.08.1\n        os:\n          - ubuntu-latest\n          - macOS-latest\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      # Cancel queued workflows from earlier commits in this branch\n      - uses: fkirc/skip-duplicate-actions@master\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Retrieve opam cache\n        uses: actions/cache@v3\n        id: cache-opam\n        with:\n          path: ~/.opam\n          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-${{ hashFiles('*.opam') }}\n          restore-keys: |\n            v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-\n\n      - name: Use OCaml ${{ matrix.ocaml-compiler }}\n        uses: ocaml/setup-ocaml@v2\n        with:\n          ocaml-compiler: ${{ matrix.ocaml-compiler }}\n\n      - name: Install dependencies\n        run: opam install --deps-only --with-test .\n\n      - name: Build\n        run: opam exec -- make\n\n      - name: Test\n        run: opam exec -- make all-test\n\n      - name: Check whitespaces\n        run: opam exec -- ./LINT\n```"}
{"id": "63c4a1a433b087f6bde73a98", "level": "level1", "llm_response": "```yml\nname: Build Site\non:\n  event:\n    pull", "answer": "```yaml name: Build Site\non:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Install deps\n        run: |\n          npm install postcss-cli\n          npm install autoprefixer\n          sudo -E make docs-deps\n      - name: Build pages\n        run: |\n           make docs-build\n           ls -liah public/```"}
{"id": "63c5aec46b748c7b1fadfc79", "level": "level1", "llm_response": "```yml\nname: Humble Semi-Binary Build - testing\n\non", "answer": "```yaml name: Humble Semi-Binary Build - testing\n# description: 'Build & test that compiles the main dependencies from source.'\n\non:\n  workflow_dispatch:\n    branches:\n      - humble\n  pull_request:\n    branches:\n      - humble\n  push:\n    branches:\n      - humble\n  schedule:\n    # Run every morning to detect flakiness and broken dependencies\n    - cron: '33 1 * * *'\n\njobs:\n  semi_binary:\n    uses: ./.github/workflows/reusable-industrial-ci-with-cache.yml\n    with:\n      ros_distro: humble\n      ros_repo: testing\n      upstream_workspace: ros2_control.humble.repos\n      ref_for_scheduled_build: humble\n```"}
{"id": "63c49f6233b087f6bde65d6f", "level": "level1", "llm_response": "```yaml\nname: HealthChecks MongoDb CI\non:\n  push:\n", "answer": "```yaml name: HealthChecks MongoDb CI\r\n\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n    branches: [ master ]\r\n    paths:\r\n      - src/HealthChecks.MongoDb/**\r\n      - test/HealthChecks.MongoDb.Tests/**\r\n      - .github/workflows/healthchecks_mongodb_ci.yml\r\n      - Directory.Build.props\r\n      - Directory.Build.targets\r\n    tags-ignore:\r\n      - release-*\r\n  pull_request:\r\n    branches: [ master ]\r\n    paths:\r\n    - src/HealthChecks.MongoDb/**\r\n    - test/HealthChecks.MongoDb.Tests/**\r\n    - .github/workflows/healthchecks_mongodb_ci.yml\r\n    - Directory.Build.props\r\n    - Directory.Build.targets\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    services:\r\n      mongo:\r\n        image: mongo\r\n        ports:\r\n          - 27017:27017\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: |\r\n        dotnet restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Check formatting\r\n      run: |\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1) &&\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\r\n    - name: Build\r\n      run: |\r\n        dotnet build --no-restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet build --no-restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Test\r\n      run: dotnet test --no-restore --no-build ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n```"}
{"id": "63c49b6533b087f6bde4bd34", "level": "level1", "llm_response": "```yml\nname: Auto approve\non:\n  branch: main\n", "answer": "```yaml name: Auto approve\n\non: [pull_request_target]\n\njobs:\n  auto-approve:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hmarr/auto-approve-action@v2\n      if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"```"}
{"id": "63c49e9a33b087f6bde60c8f", "level": "level1", "llm_response": "```yaml\n---\nname: package-macos-anaconda\non:\n ", "answer": "```yaml name: package-macos-anaconda\n\non:\n  release:\n    types: [created]\n\njobs:\n  package:\n\n    runs-on: macos-latest\n\n    steps:\n\n    - name: fetch MacOSX 10.11 SDK\n      run: curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/MacOSX10.11.sdk/MacOSX10.11.sdk.tar.xz | sudo tar xf - -C /opt/\n\n    - name: install conda-build # and anaconda-client\n      run: sudo $CONDA/bin/conda install -y conda-build # anaconda-client\n\n    - name: fetch recipe\n      run: |\n        git clone https://github.com/MRtrix3/conda-build.git\n        mv conda-build/* .\n        { echo \"CONDA_BUILD_SYSROOT:\"; echo \"  - /opt/MacOSX10.11.sdk        # [osx]\"; } > conda_build_config.yaml\n\n    - name: build package\n      run: sudo CONDA=\"$CONDA\" ./run.sh ${GITHUB_REF#refs/*/} ${GITHUB_REPOSITORY%/*} conda-macos\n\n#    - name: upload package\n#      run: $CONDA/bin/anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u MRtrix3 $(sudo $CONDA/bin/conda build conda-build/ --output)\n\n    - name: Upload package to GitHub Release\n      uses: AButler/upload-release-assets@v2.0\n      with:\n        files: '*.tar.bz2'\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n\n```"}
{"id": "63c49a6f6fc19abdf9cb61cd", "level": "level1", "llm_response": "```yml\n---\nname: Prepare Release Add-on\non: push\n", "answer": "```yaml name: Prepare Release Add-on\n\non:\n  workflow_dispatch:\n\njobs:\n  prepare-release:\n    name: Prepare Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Prepare Release and Create Pull Request\n      env:\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n      run: ./gradlew createPullRequestRelease\n```"}
{"id": "63c49ef31842bc13d779415a", "level": "level1", "llm_response": "```yml\nname: Pull request automation\non:\n  pull_request:\n", "answer": "```yaml # This file is maintained in https://github.com/WeblateOrg/meta/\n\nname: Pull request automation\n\non:\n  pull_request_target:\n    types: opened\n\npermissions:\n  contents: read\n\njobs:\n  weblate_automerge:\n    permissions:\n      pull-requests: write # for actions-ecosystem/action-add-labels to add label\n    runs-on: ubuntu-20.04\n    name: Weblate automerge\n    if: ${{ github.actor == 'weblate' || github.actor == 'pre-commit-ci[bot]' }}\n    steps:\n    - uses: actions-ecosystem/action-add-labels@v1.1.3\n      with:\n        labels: automerge\n```"}
{"id": "63c49779cbc73931bb180a0e", "level": "level1", "llm_response": "```yml\n---\nname: Archs\non:\n  branches:\n   ", "answer": "```yaml name: Archs\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    name: Build on ${{ matrix.arch }}\n\n    strategy:\n      matrix:\n        include:\n          - arch: armv7\n            distro: ubuntu20.04\n          - arch: aarch64\n            distro: ubuntu20.04\n          - arch: ppc64le\n            distro: ubuntu20.04\n          - arch: s390x\n            distro: ubuntu20.04\n  \n    steps:\n    - uses: actions/checkout@v2.4.0\n    - uses: uraimo/run-on-arch-action@v2.1.1\n      name: Build\n      id: build\n      with:\n        arch: ${{ matrix.arch }}\n        distro: ${{ matrix.distro }}\n        install: |\n          apt-get update -y\n          apt-get install -y apache2-dev libcjose-dev libssl-dev check pkg-config\n          apt-get install -y libjansson-dev libcurl4-openssl-dev libhiredis-dev libpcre2-dev\n        setup: |\n          mkdir -p \"${PWD}/logs\"\n        dockerRunArgs: |\n          --volume \"${PWD}/logs:/logs\"\n        env: |\n          logfilename: test-suite-${{ matrix.distro }}-${{ matrix.arch }}.log\n        run: |\n          ./autogen.sh\n          ./configure\n          make check\n          cp test-suite.log \"/logs/${logfilename}\"\n          echo \"Copied test-suite.log to /logs/${logfilename}\"\n          \n    - name: Results\n      run: |\n        cat ${PWD}/logs/*.log\n```"}
{"id": "63c4a11c1899db5886517d65", "level": "level1", "llm_response": "```yml\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49adb1899db58864f007e", "level": "level1", "llm_response": "```yml\nname: TLS protocol scan\non:\n  push:\n   ", "answer": "```yaml name: \"TLS protocol scan\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n\npermissions: read-all\n\njobs:\n  tls-check:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [linux]\n        arch: [amd64]\n    name: TLS check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Install dependencies\n        run: |\n          cd $GITHUB_WORKSPACE\n          sudo apt-get update\n          sudo apt-get install -y apache2-utils openssl\n          mkdir -p test/data\n          cd test/data\n          ../scripts/gen_certs.sh\n          htpasswd -bBn test test123 > htpasswd\n      - name: Check for TLS settings\n        continue-on-error: true\n        run: |\n          cd $GITHUB_WORKSPACE\n          make OS=$OS ARCH=$ARCH binary\n          bin/zot-$OS-$ARCH serve examples/config-tls.json &\n          sleep 5\n          curl -kv --tls-max 1.0 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.0 detected\"; exit 1; fi\n          curl -kv --tls-max 1.1 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.1 detected\"; exit 1; fi\n          curl -kv --tls-max 1.2 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -ne 0 ]]; then echo \"TLSv1.2 missing\"; exit 1; fi\n        env:\n          OS: ${{ matrix.os }}\n          ARCH: ${{ matrix.arch }}\n```"}
{"id": "63c497711e33648075781160", "level": "level1", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n  pull_request:\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n\njobs:\n  publish:\n    name: Publish to MavenLocal\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: publishToMavenLocal\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: app:assembleDebug\n```"}
{"id": "63c4a03a1899db588651233d", "level": "level1", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n         languages: ${{ matrix.language }}\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a19d6fc19abdf9ce3478", "level": "level1", "llm_response": "```yaml\nname: depaware\non:\n  push:\n    branches:\n", "answer": "```yaml name: depaware\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n      - 'release-branch/*'\n\nconcurrency:\n  group: ${{ github.workflow }}-$${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: go.mod\n\n    - name: depaware\n      run: go run github.com/tailscale/depaware --check\n        tailscale.com/cmd/tailscaled\n        tailscale.com/cmd/tailscale\n        tailscale.com/cmd/derper\n```"}
{"id": "63c49d2133b087f6bde57611", "level": "level1", "llm_response": "```yml\n---\nname: Repository Dispatch Triggered\non:\n  event", "answer": "```yaml name: Repository Dispatch Triggered\n\non: [repository_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Repository Dispatch Triggered\n        if: github.event.action == 'event-demo'\n        run: |\n          echo \"Workflow triggered successfully by repository dispatch action!\"```"}
{"id": "63c49d231899db58864fe6c8", "level": "level1", "llm_response": "```yml\nname: docs\non:\n  branch:\n    - develop", "answer": "```yaml name: docs\n\non:\n  push:\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    branches:\n      - develop\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    if: github.repository == 'theforeman/foreman-ansible-modules'\n    steps:\n      - uses: actions/checkout@v3\n      - name: configure git\n        run: |\n          git config user.name \"${GITHUB_ACTOR}\"\n          git config user.email \"${GITHUB_ACTOR}@bots.github.com\"\n          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.8\"\n      - name: Install dependencies\n        run: make doc-setup\n      - name: Build docs\n        run: make doc\n      - name: commit docs\n        run: |\n          git checkout gh-pages\n          rm -rf $(basename ${GITHUB_REF})\n          mv docs/_build/html $(basename ${GITHUB_REF})\n          ln --force --no-dereference --symbolic  $(dirname v*/index.html | sort --version-sort --reverse | head -n1) latest\n          git show origin/develop:docs/_gh_include/header.inc > index.html\n          (echo develop; echo latest; dirname v*/index.html | sort --version-sort --reverse) | xargs -I@@ -n1 echo '<div class=\"col-md-4 center\"><a href=\"@@/\" class=\"btn-doc btn\"><i class=\"fa fa-newspaper-o\"></i><p>@@</p></a></div>' >> index.html\n          git show origin/develop:docs/_gh_include/footer.inc >> index.html\n          git add $(basename ${GITHUB_REF}) latest index.html\n          git commit -m \"update docs for $(basename ${GITHUB_REF})\" || true\n      - name: push docs\n        run: git push origin gh-pages\n```"}
{"id": "63c4a06bcbc73931bb1ba455", "level": "level1", "llm_response": "```yml\nname: Windows GPU CI Pipeline\n\non:\n  push:\n", "answer": "```yaml # Don't edit this file manully.\n# Run generate-skip-doc-change.py to generate it.\n\nname: Windows GPU CI Pipeline\non:\n  pull_request:\n    paths:\n      - docs/**\n      - README.md\n      - CONTRIBUTING.md\n      - BUILD.md\n\njobs:\n  job1:\n    name: cuda build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job2:\n    name: dml build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job3:\n    name: training build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job4:\n    name: kernelDocumentation build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n```"}
{"id": "63c496df1e3364807577d7a8", "level": "level1", "llm_response": "```yml\nname: sast\non:\n  push:\n    branches", "answer": "```yaml name: sast\n\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n  pull_request:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      security-events: write\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'javascript' ]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0e1517fc08c1ef127c9", "level": "level1", "llm_response": "```yml\nname: Send publish metrics to bigquery\non:\n ", "answer": "```yaml name: Send publish metrics to bigquery\non:\n  release:\n    types: published\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.0\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_BQ_METRICS_KEY }}\n          export_default_credentials: true\n      - run: 'jq -c ''.release |\n             {\n               package_name: .name | split(\" \")[0],\n               name,\n               tag_name,\n               version: .tag_name | split(\"-v\")[1],\n               html_url,\n               target_commitish,\n               created_at,\n               published_at,\n               draft,\n               prerelease\n             }'' $GITHUB_EVENT_PATH > releases.json'\n      - run: bq load --source_format=NEWLINE_DELIMITED_JSON metrics.releases releases.json\n```"}
{"id": "63c49d796fc19abdf9cc9892", "level": "level1", "llm_response": "```yml\nname: Deploy App to Staging\n\non:\n  branch", "answer": "```yaml name: Deploy App to Staging\non:\n  workflow_dispatch:\n    inputs:\n      # commit hash (for frontend deploy to fleek)\n      commit:\n        description: \"Branch/Commit ref\"\n        default: \"origin/main\"\n        type: string\njobs:\n  deploy-app:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Checkout staging-app\n        run: |\n          git fetch\n          git checkout -b staging-app origin/staging-app\n          git reset --hard ${{ github.event.inputs.commit }}\n          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/gitcoinco/passport.git\n          git push origin staging-app -f\n```"}
{"id": "63c49e4b1e336480757ac9aa", "level": "level1", "llm_response": "```yml\nname: amd64 Windows Java\non:\n  push:\n", "answer": "```yaml name: amd64 Windows Java\n\non: [push, pull_request]\n\njobs:\n  # Building using the github runner environement directly.\n  visual-studio:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Check cmake\n      run: cmake --version\n    - name: Install SWIG 4.0.2\n      run: |\n        (New-Object System.Net.WebClient).DownloadFile(\"http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip\",\"swigwin-4.0.2.zip\");\n        Expand-Archive .\\swigwin-4.0.2.zip .;\n        echo \"$((Get-Item .).FullName)/swigwin-4.0.2\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n    - name: Check swig\n      run: swig -version\n    - name: Check mvn\n      run: mvn.cmd --version\n    - name: Configure\n      run: cmake -S. -Bbuild -G \"Visual Studio 17 2022\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_JAVA=ON -DSKIP_GPG=ON\n    - name: Build\n      run: cmake --build build --config Release --target ALL_BUILD -- /verbosity:normal /maxcpucount\n    - name: Test\n      run: cmake --build build --config Release --target RUN_TESTS -- /verbosity:normal /maxcpucount\n    - name: Install\n      run: cmake --build build --config Release --target INSTALL -- /verbosity:normal /maxcpucount\n```"}
{"id": "63c497d3cbc73931bb182d46", "level": "level1", "llm_response": "```yml\nname: Build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ruby: [ '2.7.6', '3.0.4', '3.1.2' ] #, 'jruby-head' ]\n    steps:\n      - name: Setup Ruby, JRuby and TruffleRuby\n        uses: ruby/setup-ruby@v1.118.0\n        with:\n          ruby-version: ${{ matrix.ruby }}\n      - uses: actions/checkout@v3   \n      - name: Install dependecies\n        run: bundle install\n      - name: Run Tests\n        run: ./run_tests.sh\n     \n  auto-merge:\n    needs: run-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          gh pr merge --auto --rebase \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}} \n```"}
{"id": "63c49fb91899db588650eeb3", "level": "level1", "llm_response": "```yml\nname: Release Pull Request Automation\n\non:\n  branches:\n", "answer": "```yaml name: Release Pull Request Automation\n\n# Controls when the action will run. Triggers the workflow on create branch or tag\n# events but only acts on branch create.\non:\n    create:\njobs:\n    release-pull-request-automation:\n        if: ${{ github.event.ref_type == 'branch' && contains( github.ref, 'release/' ) }}\n        env:\n            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n        runs-on: ubuntu-latest\n        steps:\n            - uses: act10ns/slack@v1\n              with:\n                  status: starting\n              if: ${{ always() }}\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Create changeset for pull request\n              run: |\n                  git config user.name github-actions\n                  git config user.email github-actions@github.com\n                  git commit -m 'Empty commit for release pull request' --allow-empty\n                  git push\n            - name: Create Release Pull Request\n              uses: woocommerce/automations@v1\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n                  automations: release\n            - uses: act10ns/slack@v1\n              with:\n                  status: ${{ job.status }}\n                  steps: ${{ toJson(steps) }}\n              if: ${{ always() }}\n```"}
{"id": "63c49e83517fc08c1ef03f35", "level": "level1", "llm_response": "```yml\nname: test-flax\non:\n  branch:\n   ", "answer": "```yaml name: test-flax\n\non:\n  push:\n    branches:\n      - 'integration'\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=jammy\"\n            \"MACHINARIS_STREAM=test\"\n            \"CHIADOG_BRANCH=dev\"\n            \"FLAX_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n```"}
{"id": "63c49f4a1842bc13d779622d", "level": "level1", "llm_response": "```yml\nname: New Release - Update other projects\n\non:\n ", "answer": "```yaml name: New Release - Update other projects\non:\n  repository_dispatch:\n    types: [http4k-release]\njobs:\n  create-upgrade-branches:\n    strategy:\n      matrix:\n        repo:\n          - 'http4k/toolbox'\n          - 'http4k/examples'\n          - 'http4k/http4k-by-example'\n          - 'http4k/http4k-connect'\n          - 'http4k/http4k-heroku-travis-example-app'\n          - 'http4k/http4k-contract-todo-backend'\n          - 'http4k/http4k-bin'\n          - 'http4k/http4k-todo-backend'\n          - 'http4k/http4k-bootstrap'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger ${{ matrix.repo }}\n        uses: peter-evans/repository-dispatch@v1.1.1\n        with:\n          token: ${{ secrets.TOOLBOX_REPO_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: http4k-release\n          client-payload: '{\"version\": \"${{ github.event.client_payload.version }}\"}'\n```"}
{"id": "63c49cbe1899db58864fbd78", "level": "level1", "llm_response": "```yml\n---\nname: Build\non:\n  push:\n    branches", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  # Cancel any in-progress workflows for this workflow/branch combination.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    name: Build without tests\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'Source/ViewControllerPresentationSpy.xcodeproj', scheme: 'ViewControllerPresentationSpy-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }\n          - { project: 'ObjCSample/ObjCSampleViewControllerPresentationSpy.xcodeproj', scheme: 'ObjCSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 8' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  test:\n    name: Build & test\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'SwiftSample/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n          - { project: 'SwiftSamplePackage/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build & test\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  buildCarthage:\n    needs: [ build, test ]\n    name: Build Carthage\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Build\n      run: carthage build --configuration Release --no-skip-current --use-xcframeworks\n\n  podspec:\n    needs: [ build, test ]\n    name: Pod Spec Lint\n    runs-on: macos-latest\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Lint the pod spec\n        run: pod spec lint --quick\n\n  auto-merge:\n    needs: [ buildCarthage, podspec ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          ./merge_dependabot.sh\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}\n```"}
{"id": "63c49eaa517fc08c1ef04e4d", "level": "level1", "llm_response": "```yml\nname: Labeler\non:\n  pull_request:\n   ", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: actions/labeler@v4.0.2\n      if: github.event.pull_request.head.repo.full_name == github.repository\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a51517fc08c1eee9273", "level": "level1", "llm_response": "```yml\nname: Typescript Types\n\non:\n  push:\n   ", "answer": "```yaml name: Typescript Types\non:\n  pull_request:\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint TS-Files\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 14\n\n      - run: npm install\n\n      - name: Lint TS-Files\n        run: npm run lint-ts\n\n  test-ts-types:\n    needs:\n      - lint\n    runs-on: ubuntu-latest\n    name: Test Typescript Types\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 12\n\n      - run: npm install\n\n      - name: Typings\n        run: npm run test-tsd```"}
{"id": "63c49a2633b087f6bde43c7c", "level": "level1", "llm_response": "```yml\nname: Support requests\n\non:\n  pull_request:\n   ", "answer": "```yaml name: 'Support requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\njobs:\n  support:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'repro-required'\n          issue-comment: >\n            :wave: @{issue-author}, sorry you're having an issue. As the issue template explains, we require that you provide a runnable example that reproduces your issue (please read the [issue template](https://raw.githubusercontent.com/react-native-google-signin/google-signin/master/.github/ISSUE_TEMPLATE/Custom.md)).\n\n            The reason is that maintainers do not have time to try reproduce bugs themselves. Please try to minimize the superfluous code and focus only on reproducing the bug.\n\n            Please create a new issue with this and we'll be happy to review it! If you're hitting a hard wall, you may consider [paid assistance](https://github.com/react-native-google-signin/google-signin/pull/861).\n          close-issue: true\n          lock-issue: false\n```"}
{"id": "63c49abb33b087f6bde478b7", "level": "level1", "llm_response": "```yml\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 43 7 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'```"}
{"id": "63c497bf1899db58864db96b", "level": "level1", "llm_response": "```yml\nname: Verify docs\non:\n  schedule:\n    -", "answer": "```yaml name: Verify docs\n\non:\n  schedule:\n    # every day at 9am\n    - cron: '0 9 * * *'\n\njobs:\n  verify:\n    name: Verify docs and spelling\n    runs-on: [ubuntu-latest]\n    steps:\n    - name: Check-out code\n      uses: actions/checkout@v3\n    - name: Set up Go using version from go.mod\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: 'go.mod'\n    - name: Run verify scripts\n      run: make verify\n    - name: Checking for broken Markdown links for main branch\n      uses: gaurav-nelson/github-action-markdown-link-check@v1\n      with:\n        folder-path: './docs'\n        file-path: './README.md, ./CHANGELOG.md, ./CONTRIBUTING.md, ./GOVERNANCE.md, ./MAINTAINERS.md, ./ROADMAP.md, ./SECURITY.md'\n        config-file: 'hack/.md_links_config.json'\n    - name: Markdownlint\n      run: |\n        sudo npm install -g markdownlint-cli@0.31.1\n        make markdownlint \n```"}
{"id": "63c49a471899db58864ec29a", "level": "level1", "llm_response": "```yml\n---\nname: CodeQL Analysis\non:\n  push:\n", "answer": "```yaml name: CodeQL Analysis\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '0 8 * * *'\n\njobs:\n  analyze:\n    name: CodeQL Analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        id: checkout_repo\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        id: init_codeql\n        uses: github/codeql-action/init@v2\n        with:\n          queries: security-and-quality\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        id: analyze_codeql\n        uses: github/codeql-action/analyze@v2\n\n# Built with \u2764 by [Pipeline Foundation](https://pipeline.foundation)```"}
{"id": "63c496ba33b087f6bde2deab", "level": "level1", "llm_response": "```yml\nname: Release Drafter\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    if: github.repository == 'activeloopai/deeplake'\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a586fc19abdf9cb5781", "level": "level1", "llm_response": "```yaml\n---\nname: publish-build\non:\n  release:\n    types", "answer": "```yaml name: publish-build\non:\n  release:\n    types: [released]\n\njobs:\n  build-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node and cache\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n      - name: Check release validity\n        run: sh .github/scripts/check-release.sh\n      - name: Install project dependencies\n        run: yarn install\n      - name: Build project\n        run: yarn build\n      - name: Create ZIP folder\n        uses: thedoctor0/zip-release@master\n        with:\n          filename: 'build.zip'\n          directory: 'build'\n      - name: Upload build to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: build/build.zip\n          tag: ${{ github.ref }}\n```"}
{"id": "63c497311899db58864d7f91", "level": "level1", "llm_response": "```yml\nname: CLA\n\non:\n  pull_request:\n   ", "answer": "```yaml \nname: CLA\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request'\n        # Alpha Release\n        uses: hanxiao/github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: '.github/signatures/v1/cla.json'\n          path-To-cladocument: 'https://github.com/jina-ai/jinabox.js/blob/master/CLA.md'\n          # branch should not be protected\n          branch: 'cla'\n          whitelist: hanxiao,nan-wang,jina-bot,BingHo1013,alexcg1,imsergiy,YueLiu-jina,JoanFM,lusloher\n          empty-commit-flag: false\n          blockchain-storage-flag: false```"}
{"id": "63c49f771842bc13d77973e6", "level": "level1", "llm_response": "```yml\n---\nname: Pull Request Validation\n\non:\n  pull_request", "answer": "```yaml name: Pull Request Validation\n\non:\n  pull_request:\n    branches:\n      - trunk\n      - 'release/**'\n      - 'feature/**'\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - reopened\n      - synchronize\n      - edited\n\nenv:\n  LABELS: ${{ join( github.event.pull_request.labels.*.name, ' ' ) }}\n\njobs:\n  check-type-label:\n    name: Check [Type] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Type]' ) == false\n        run: exit 1\n  check-focus-label:\n    name: Check [Focus] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Focus]' ) == false && contains( env.LABELS, 'Infrastructure' ) == false\n        run: exit 1\n  check-milestone:\n    name: Check Milestone\n    runs-on: ubuntu-latest\n    steps:\n      - if: github.event.pull_request.milestone == null && contains( env.LABELS, 'no milestone' ) == false\n        run: exit 1\n```"}
{"id": "63c49eb6cbc73931bb1af2d4", "level": "level1", "llm_response": "```yaml\nname: Notify Downstream Projects\n\non:\n  push:\n   ", "answer": "```yaml name: Notify Downstream Projects\non:\n  push:\n    branches: [ develop ]\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\njobs:\n  notify-downstream:\n    # Only respect triggers from our develop branch, ignore that of forks\n    if: github.repository == 'matrix-org/matrix-js-sdk'\n    continue-on-error: true\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - repo: vector-im/element-web\n            event: element-web-notify\n          - repo: matrix-org/matrix-react-sdk\n            event: upstream-sdk-notify\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify matrix-react-sdk repo that a new SDK build is on develop so it can CI against it\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.ELEMENT_BOT_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: ${{ matrix.event }}\n```"}
{"id": "63c496381e3364807577930d", "level": "level1", "llm_response": "```yml\nname: Wrye Bash CI\non:\n  push", "answer": "```yaml name: Wrye Bash CI\n\non: push\n\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout commit\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n        architecture: 'x64'\n    - name: Restore dependencies cache\n      uses: actions/cache@v3\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools wheel\n        python -m pip install -r requirements.txt\n    - name: Test Wrye Bash\n      run: |\n        python -m pytest\n    - name: Build Wrye Bash\n      # Note the configs - needed for build.py\n      run: |\n        git config --local user.name \"GitHub Actions\"\n        git config --local user.email \"github-action@users.noreply.github.com\"\n        python scripts/build.py --verbose\n    - name: Copy executable/license files\n      run: |\n        cp \"scripts/build/standalone/dist/Wrye Bash.exe\" Mopy\n        cp LICENSE.md Mopy/LICENSE.md\n#    - name: Create Apps folder # does not work\n#      run: mkdir Mopy/Apps\n    - name: Upload Standalone Build Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: ${{ format('Wrye Bash CI {0}.{1}', github.ref_name, github.sha) }}\n        path: |\n          Mopy/*\n          Mopy/LICENSE.md\n          !Mopy/**.py\n          !Mopy/**.pyw\n          !Mopy/**.pyd\n          !Mopy/**.bat\n          !Mopy/**.template\n          !Mopy/redist\n          !Mopy/__pycache__\n          !Mopy/bash/**.py\n          !Mopy/bash/__pycache__\n          !Mopy/bash/basher\n          !Mopy/bash/bosh\n          !Mopy/bash/brec\n          !Mopy/bash/env\n          !Mopy/bash/game\n          !Mopy/bash/gui\n          !Mopy/bash/patcher\n          !Mopy/bash/tests\n```"}
{"id": "63c49e83517fc08c1ef03f23", "level": "level1", "llm_response": "```yml\nname: release-petroleum\non:\n  event:\n", "answer": "```yaml name: release-petroleum\n\non: \n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Release Version' \n\njobs:\n  docker:\n    runs-on: ubuntu-20.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=focal\"\n            \"MACHINARIS_STREAM=latest\"\n            \"PETROLEUM_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n```"}
{"id": "63c49ecacbc73931bb1afb61", "level": "level1", "llm_response": "```yml\nname: Upgrade Python Requirements\n\non:\n  schedule:\n   ", "answer": "```yaml name: Upgrade Python Requirements\n\non:\n  schedule:\n    # will start the job at 01:30 UTC every Friday\n    - cron: \"30 1 * * 5\"\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: \"Target branch against which to create requirements PR\"\n        required: true\n        default: '$default-branch'\n\njobs:\n  call-upgrade-python-requirements-workflow:\n    uses: openedx/.github/.github/workflows/upgrade-python-requirements.yml@master\n    with:\n      branch: ${{ github.event.inputs.branch || '$default-branch' }}\n      # optional parameters below; fill in if you'd like github or email notifications\n      # user_reviewers: \"\"\n      # team_reviewers: \"\"\n      # email_address: \"\"\n      # send_success_notification: false\n    secrets:\n      requirements_bot_github_token: ${{ secrets.REQUIREMENTS_BOT_GITHUB_TOKEN }}\n      requirements_bot_github_email: ${{ secrets.REQUIREMENTS_BOT_GITHUB_EMAIL }}\n      edx_smtp_username: ${{ secrets.EDX_SMTP_USERNAME }}\n      edx_smtp_password: ${{ secrets.EDX_SMTP_PASSWORD }}\n```"}
{"id": "63c49717517fc08c1eed4a9a", "level": "level1", "llm_response": "```yml\nname: Update Prettier\non:\n  push:\n", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\n  workflow_dispatch: {}\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49fa5736e7f0ed8c6f75c", "level": "level1", "llm_response": "```yml\nname: Deploy Documentation\non:\n  branch:\n    -", "answer": "```yaml name: Deploy Documentation\n\non:\n  push:\n    branches:\n    - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n\n    - name: vuepress-deploy\n      uses: jenkey2011/vuepress-deploy@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        TARGET_REPO: OT-CONTAINER-KIT/redis-operator\n        TARGET_BRANCH: gh-pages\n        BUILD_SCRIPT: cd docs; yarn && yarn build\n        BUILD_DIR: src/.vuepress/dist/\n \n```"}
{"id": "63c49feb1899db58865101eb", "level": "level1", "llm_response": "```yaml\nname: Release Drafter\non:\n  branch:\n    -", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches: [ main ]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n          # config-name: my-config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c49db51899db5886501d95", "level": "level1", "llm_response": "```yml\nname: spring-reactive-groovy-dsl\non", "answer": "```yaml name: spring-reactive-groovy-dsl\n\non:\n  push:\n    paths:\n      - \"groovy-dsl/**\"\n    branches: [ master ]\n  pull_request:\n    paths:\n      - \"groovy-dsl/**\"\n    types:\n      - opened\n      - synchronize\n      - reopened\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n          fetch-depth: 0\n    - name: Set up JDK\n      uses: actions/setup-java@v3\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: 'maven'\n    - name: Start up databases via Docker Compose \n      run: |\n        docker-compose up -d mongodb\n        sleep 5\n        docker ps -a  \n    - name: Build with Maven\n      run: |\n        cd groovy-dsl\n        mvn -B package --file pom.xml\n```"}
{"id": "63c49ac5cbc73931bb195e22", "level": "level1", "llm_response": "```yml\nname: Build and Deploy Documentation\n\non:\n  push:\n", "answer": "```yaml name: Build and Deploy Documentation\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set release env\n        run: echo \"RELEASE_VERSION=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\n      - name: Set up python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Configure the git user\n        run: |\n          git config user.name \"versioning_user\"\n          git config user.email \"connaisseur@securesystems.dev\"\n      - name: Set up Python\n        run: |\n          pip install -r docs/requirements_docs.txt\n      - name: deploy\n        run: |\n          mike deploy --push --update-aliases ${RELEASE_VERSION} latest\n```"}
{"id": "63c49b76cbc73931bb19a77b", "level": "level1", "llm_response": "```yml\n---\nname: CI\non:\n  push:\n    branches", "answer": "```yaml name: CI\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n\n    services:\n      postgres:\n        image: postgres:14-alpine\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n\n      redis:\n        image: redis:alpine\n        ports: ['6379:6379']\n\n    env:\n      DB_HOST: localhost\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      REDIS_URL: redis://localhost:6379/0\n      RAILS_ENV: test\n      DISABLE_SPRING: true\n      CI: true\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          bundler-cache: true\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3.5.1\n        with:\n          cache: yarn\n\n      - name: Install Yarn packages\n        run: bin/yarn install --frozen-lockfile\n\n      - name: Lint with RuboCop\n        run: bin/rubocop --parallel\n\n      - name: Run ESLint\n        run: bin/yarn lint\n\n      - name: Lint with SlimLint\n        run: bundle exec slim-lint .\n\n      - name: Setup PostgreSQL\n        run: bin/rails db:create\n\n      - name: Compile assets\n        run: bin/rails assets:precompile\n\n      - name: Run Ruby Tests\n        run: bin/rspec\n\n      - name: End-to-end tests\n        uses: cypress-io/github-action@v4\n        with:\n          start: bundle exec rails server\n          wait-on: http://localhost:3000\n          browser: chrome\n          record: true\n        env:\n          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CYPRESS_BASE_URL: http://localhost:3000\n          CYPRESS: true\n        if: env.CYPRESS_RECORD_KEY != null\n\n      - name: Check JS size limit\n        run: yarn size-limit\n\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: Cypress screenshots and videos\n          path: |\n            tmp/cypress_screenshots/\n            tmp/cypress_videos/\n          if-no-files-found: ignore\n\n  deploy:\n    runs-on: ubuntu-20.04\n\n    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Fetch tag annotations\n        # https://github.com/actions/checkout/issues/290\n        run: git fetch --tags --force\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build the production image\n        run: |\n          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})\n          export COMMIT_VERSION=$(git describe --always)\n          echo $GITHUB_SHA\n          echo $COMMIT_TIME\n          echo $COMMIT_VERSION\n          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .\n\n      - name: Push the image tagged as LATEST to the container registry\n        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:latest\n          docker push ghcr.io/${{ github.repository }}:latest\n\n      - name: Push the image tagged with version to the container registry\n        if: startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n          docker push ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n\n      - name: Send webhook to start deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n        if: env.DEPLOY_HOOK != null\n        run: curl -X POST ${{ env.DEPLOY_HOOK }}\n\n      - name: Notify Honeybadger about deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}\n        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null\n        uses: honeybadger-io/github-notify-deploy-action@v1\n        with:\n          api_key: ${{ secrets.HONEYBADGER_API_KEY }}\n```"}
{"id": "63c49eb21842bc13d77927ac", "level": "level1", "llm_response": "```yml\nname: Nightly Vinix rebuild\n\non:\n  push", "answer": "```yaml name: Nightly Vinix rebuild\n\n#on:\n#  schedule:\n#    - cron: '0 0 * * *'\n\njobs:\n  vinix-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install make curl git mercurial libarchive-tools xorriso -y\n\n      - name: Build distro\n        run: make distro-full\n\n      - name: Build ISO\n        run: make all\n\n      - name: Set TAG_DATE variable\n        run: echo \"TAG_DATE=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n\n      - name: Tag new nightly release\n        run: git tag nightly-$TAG_DATE && git push --tags\n\n      - name: Rename vinix.iso\n        run: mv vinix.iso vinix-nightly-$(date +'%Y%m%d').iso\n\n      - name: Create nightly release\n        uses: softprops/action-gh-release@v1\n        with:\n          name: Nightly build ${{ env.TAG_DATE }}\n          tag_name: nightly-${{ env.TAG_DATE }}\n          body: Image of an up to date Vinix nightly build.\n          files: |\n            vinix-nightly-*.iso\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a052b008460c1df53339", "level": "level1", "llm_response": "```yml\nname: Pull Request\n\non:\n  branches:\n    -", "answer": "```yaml name: Pull Request\non:\n  push:\n    paths:\n      - \"**.go\"\n    tags:\n      - v*\n    branches:\n      - master\n      - development\n  pull_request:\n    branches-ignore:\n      - dependabot/**\n\njobs:\n  checks:\n    name: Pull Request Checks\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, '[ci skip]') == false && contains(github.event.head_commit.message, '[skip ci]') == false\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      # - name: Run tests\n      #   run: make test\n\n      - name: Run GolangCI-Lint\n        uses: golangci/golangci-lint-action@v3.1.0\n        with:\n          version: latest\n          args: --tests=0 --timeout=30m\n\n      - name: Run Semgrep\n        run: |\n          python3 -m pip install semgrep\n          semgrep scan --config auto --dryrun -q --include \"**.go\"\n\n      - name: Cross-platform checks\n        uses: goreleaser/goreleaser-action@v3\n        with: \n          version: latest\n          args: build --skip-validate --rm-dist --snapshot --timeout=30m\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2```"}
{"id": "63c5c55aac4f2678a5bd5362", "level": "level1", "llm_response": "```yml\nname: Code Scanning - Action\non:\n  schedule", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  # push:\n  schedule:\n    - cron: '0 12 * * 0'\n\npermissions:\n  contents: read\n\njobs:\n  CodeQL-Build:\n\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/analyze to upload SARIF results\n    strategy:\n      fail-fast: false\n\n\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below).\n    #- name: Autobuild\n    #  uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    - name: Clean Install\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n      \n    - name: Build packages \n      run: npm run build\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49b791899db58864f3ba0", "level": "level1", "llm_response": "```yml\n---\nname: discussion-questions\ndescription: A GitHub Actions", "answer": "```yaml name: discussion-questions\non:\n  discussion:\n    types: [created, answered]\njobs:\n  new_question:\n    if: github.event.action == 'created' && github.event.discussion.category.is_answerable\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :thinking: *{{ EVENT_PAYLOAD.discussion.user.login }} asked a question*\n\n            **{{ EVENT_PAYLOAD.discussion.title }}**\n            {{ EVENT_PAYLOAD.discussion.body }}\n\n            {{ EVENT_PAYLOAD.discussion.html_url }}\n\n  question_answered:\n    if: github.event.action == 'answered'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :tada: *{{ EVENT_PAYLOAD.answer.user.login }} answered a question*\n\n            **Q**: {{ EVENT_PAYLOAD.discussion.title }}\n            **A**: *{{ EVENT_PAYLOAD.answer.body }}*\n\n            {{ EVENT_PAYLOAD.answer.html_url }}\n```"}
{"id": "63c4992d6fc19abdf9cae027", "level": "level1", "llm_response": "```yml\nname: Issue Labeler\n\non:\n  issues:\n   ", "answer": "```yaml name: \"Issue Labeler\"\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: github/issue-labeler@v2.5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/issue-labeler.yml\n        #not-before: 2020-01-15T02:54:32Z\n        enable-versioned-regex: 0\n        #versioned-regex: 'issue_labeler_regex_version=(\\d+)'\n        body-missing-regex-label: 'broken-template'\n```"}
{"id": "63c49f746fc19abdf9cd63ff", "level": "level1", "llm_response": "```yml\nname: s2i-mvn-gradle-pr\n", "answer": "```yaml ---\nname: s2i-mvn-gradle-pr\non:\n  pull_request:\n    paths:\n      - s2i-mvn-gradle/**\n      - .github/workflows/s2i-mvn-gradle-pr.yaml\njobs:\n  build:\n    env:\n      context: s2i-mvn-gradle\n      image_name: s2i-mvn-gradle\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49ab4517fc08c1eeebb47", "level": "level1", "llm_response": "```yml\n---\nname: Tests\non:\n  push:\n    branches", "answer": "```yaml name: Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n        test-type: [e2e, lint]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Run test (${{ matrix.test-type }})\n        run: 'npm run test:${{ matrix.test-type }}'\n        env:\n          CI: true\n```"}
{"id": "63c49db2b008460c1df42b9d", "level": "level1", "llm_response": "```yml\nname: Upload Snapshot\n\non:\n  branches:\n    -", "answer": "```yaml name: Upload Snapshot\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n\njobs:\n  verify:\n    name: latest-images\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 8.0.x\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: GPG_PASSPHRASE\n      - name: Assert Snapshot Version\n        run: |\n          ./mvnw clean install -Dmaven.test.skip=true\n          ./mvnw -q \\\n            -Dexec.executable=echo \\\n            -Dexec.args='${project.version}' \\\n            exec:exec | perl -ne 'die unless m/.*-SNAPSHOT/'\n      - name: Publish to Apache Maven Central\n        run: ./mvnw deploy\n        env:\n          OSSRH_USERNAME: ${{ secrets.SNAPSHOT_UPLOAD_USER }}\n          OSSRH_TOKEN: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}```"}
{"id": "63c49b7e33b087f6bde4c721", "level": "level1", "llm_response": "```yml\nname: CI: Lint\n\non:\n  branches:\n", "answer": "```yaml name: \"CI: Lint\"\n\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  lint:\n\n    runs-on: ubuntu-latest\n\n    container:\n      image: valalang/lint\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Lint\n      run: io.elementary.vala-lint -d .\n```"}
{"id": "63c49ecc33b087f6bde620ae", "level": "level1", "llm_response": "```yml\nname: Java CI with Maven for PRs\non:\n", "answer": "```yaml # This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Java CI with Maven for PRs\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Disabling shallow clone is recommended for improving relevancy of reporting with SonarCloud\n          fetch-depth: 0\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: 8\n      - name: Build with Maven\n        run: mvn --show-version --no-transfer-progress verify --file pom.xml -Pcoverage,cloudbees-oss-release -Dgpg.skip=true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499541842bc13d7770086", "level": "level1", "llm_response": "```yml\nname: Generate Roblox Standard Library\non:\n  push", "answer": "```yaml name: Generate Roblox standard library\r\non: [push, pull_request]\r\njobs:\r\n  generate:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v1\r\n    - name: Generate\r\n      run: cargo run --bin selene --verbose -- generate-roblox-std\r\n    - name: Upload\r\n      uses: actions/upload-artifact@v1\r\n      with:\r\n        name: roblox\r\n        path: roblox.yml```"}
{"id": "63c4a061cbc73931bb1ba06d", "level": "level1", "llm_response": "```yml\nname: check-x-pack-winlogbeat\non:\n ", "answer": "```yaml name: check-x-pack-winlogbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-winlogbeat.yml'\n      - 'x-pack/winlogbeat/**'\n      - 'winlogbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/winlogbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      uses: magefile/mage-action@v2\n      with:\n        args: check update\n        workdir: \"${{ env.BEAT_MODULE }}\"\n```"}
{"id": "63c4990ccbc73931bb18b0e2", "level": "level2", "llm_response": "```yml\nname: Test CI\non:\n  pull_request:\n   ", "answer": "```yaml name: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n      - name: Install\n        run: |\n          npm install -g yarn\n          yarn\n        env:\n          CI: \"true\"\n      - name: Build\n        run: |\n          yarn build\n        env:\n          CI: \"true\"\n      - name: Check Circular Dependencies\n        run: |\n          yarn circular\n        env:\n          CI: \"true\"\n      - name: Test\n        run: |\n          yarn test\n        env:\n          CI: \"true\"\n      - name: Bench\n        run: |\n          node packages/core/build/examples/bench/queue.js\n        env:\n          CI: \"true\"\n```"}
{"id": "63c4a1971842bc13d77a4d18", "level": "level2", "llm_response": "```yml\nname: Tribble\non:\n  event:\n    type", "answer": "```yaml name: Tribble\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: arctic-hen7/tribble-bot@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a15933b087f6bde71f6b", "level": "level2", "llm_response": "```yml\n---\nname: Create a Release\non:\n  branches:\n", "answer": "```yaml name: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc*'\n\njobs:\n  release:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get the version\n        id: get_version\n        run: |\n          echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n          echo \"TRIMMED_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n\n      - name: REUSE Compliance Check\n        uses: fsfe/reuse-action@v1\n        with:\n          args: spdx -o zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: upload-results\n        uses: actions/upload-artifact@v3\n        continue-on-error: True\n        with:\n          name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: Create empty release notes body\n        run: |\n          echo \"TODO: add release overview and notes link\" > release-notes.txt\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Zephyr ${{ steps.get_version.outputs.TRIMMED_VERSION }}\n          body_path: release-notes.txt\n          draft: true\n          prerelease: true\n\n      - name: Upload Release Assets\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_content_type: text/plain\n```"}
{"id": "63c49f7a1e336480757b40f4", "level": "level2", "llm_response": "```yml\nname: Lint\non:\n  pull_request:\n   ", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire ethermint repository This workflow is\n# run on every pull request and push to main The `golangci` will pass without\n# running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: Run golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      # Required: setup-go, for all versions v3.0.0+ of golangci-lint\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.3\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.\n          version: v1.46.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        # Check only if there are differences in the source code\n        if: \"env.GIT_DIFF\"\n  markdown-lint:\n    name: Run markdown-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            docs/**/*.md\n            x/**/*.md\n            README.md\n      - uses: nosborn/github-action-markdown-cli@v3.2.0\n        with:\n          files: .\n          config_file: .markdownlint.yml\n          ignore_path: .markdownlintignore\n        # Check only if there are differences in the source code\n        if: env.GIT_DIFF\n```"}
{"id": "63c494e18052faa2781adf47", "level": "level2", "llm_response": "```yml\nname: Lint I18N\non:\n  push", "answer": "```yaml name: Lint I18N\n\non:\n  push:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n\npermissions:\n  contents: read\n\n# Cancels all previous workflow runs for pull requests that have not completed.\nconcurrency:\n  # The concurrency group contains the workflow name and the (target) branch name.\n  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Install WP-CLI\n        run: |\n          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n          chmod +x wp-cli.phar\n          mkdir -p bin\n          mv wp-cli.phar bin/wp\n          echo \"${PWD}/bin\" >> $GITHUB_PATH\n\n      - name: WP-CLI Info\n        run: wp cli info\n\n      - name: Install latest version of i18n-command\n        run: wp package install wp-cli/i18n-command:dev-main\n\n      - name: List packages\n        run: wp package list\n\n      - name: Setup Node\n        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516\n        with:\n          node-version-file: '.nvmrc'\n          cache: npm\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@e04e1d97f0c0481c6e1ba40f8a538454fe5d7709\n        with:\n          php-version: '8.0'\n          coverage: none\n          tools: composer\n\n      - name: Install dependencies\n        run: |\n          npm ci\n        env:\n          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true\n\n      - name: Install PHP dependencies\n        uses: ramsey/composer-install@f680dac46551dffb2234a240d65ae806c2999dd6\n        with:\n          composer-options: '--prefer-dist --no-progress --no-interaction'\n\n      - name: Build plugin\n        run: npm run build:js\n\n      - name: Bundle regular version\n        run: npm run workflow:build-plugin\n\n      # Check if as many strings as expected were found.\n      # Fail job if `wp i18n make-pot` returns any warnings.\n      # Some false positive warnings are removed due to a bug in the string extraction.\n      # That's why this step is unfortunately a bit more complex.\n      # See https://github.com/wp-cli/i18n-command/issues/154\n      - name: Generate POT file\n        run: |\n          OUTPUT=$((wp i18n make-pot build/web-stories build/web-stories.pot) 2>&1 >/dev/null)\n\n          HAS_ERROR=false\n\n          EXPECTED_NUMBER_OF_STRINGS=1000\n          NUMBER_OF_FOUND_STRINGS=$(grep -o msgstr build/web-stories.pot | wc -l | xargs)\n\n          if (( \"$NUMBER_OF_FOUND_STRINGS\" < \"$EXPECTED_NUMBER_OF_STRINGS\" )); then\n          HAS_ERROR=true\n            echo \"String extraction found only $NUMBER_OF_FOUND_STRINGS translatable strings. Expected at least $EXPECTED_NUMBER_OF_STRINGS.\"\n          fi\n\n          IFS=$'\\n'\n          declare -a WARNINGS=($OUTPUT)\n          unset IFS\n\n          for WARNING in \"${WARNINGS[@]}\"; do\n            # Filter false positives.\n            if [[ $WARNING == *\"translator comment\"* ]] && [[ $WARNING != *\"%s\"* ]]; then\n              continue\n            fi\n\n            HAS_ERROR=true\n\n          \techo $WARNING\n          done\n\n          if [[ \"$HAS_ERROR\" = true ]]; then\n            exit 1\n          fi\n```"}
{"id": "63c499881e3364807578e735", "level": "level2", "llm_response": "```yml\nname: Deploy to WordPress.org\non:\n  event:\n", "answer": "```yaml name: Deploy to WordPress.org\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  tag:\n    name: New tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: WordPress Plugin Deploy\n        uses: 10up/action-wordpress-plugin-deploy@master\n        env:\n          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}\n          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}\n```"}
{"id": "63c498546fc19abdf9ca87b3", "level": "level2", "llm_response": "```yml\nname: Build And Test, NETCORE\n\non:\n ", "answer": "```yaml # Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\n# .NET CLI: https://docs.microsoft.com/dotnet/core/tools/\n# Description: The purpose of this workflow is to compile and run unit tests.\n\nname: Build And Test, NETCORE\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-test-NETCORE:\n\n    runs-on: ${{ matrix.os }}\n\n    env:\n      SOLUTION: ./NETCORE/ApplicationInsights.AspNetCore.sln\n      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/TestResults\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        framework: [net452, net462, net472, net480, net481, netcoreapp3.1, net6.0, net7.0]\n        include: \n          - os: ubuntu-latest\n            args: \"--filter TestCategory!=WindowsOnly\"\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: |\n            3.1.x\n            6.0.x\n\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '7.0.x'\n        include-prerelease: true\n\n    - name: Restore\n      run: dotnet restore ${{ env.SOLUTION }}\n\n    - name: Build\n      run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore\n\n    - name: Test\n      id: test1\n      continue-on-error: true\n      run: dotnet test ${{ env.SOLUTION }} --framework ${{ matrix.framework }} --configuration Release --no-build --results-directory ${{ env.TEST_RESULTS_DIRECTORY }} --logger:\"console;verbosity=detailed\" --logger:\"trx;logfileprefix=testResults_\" ${{ matrix.args }}\n\n    - name: Retry tests\n      if: steps.test1.outcome=='failure'\n      run: pwsh -f ./.scripts/build_RetryTests.ps1 -TestResultsDirectory ${{ env.TEST_RESULTS_DIRECTORY }} -WorkingDirectory ${{ github.workspace }}\n```"}
{"id": "63c49c5933b087f6bde52309", "level": "level2", "llm_response": "```yaml\nname: TagBot\n\non:\n  branches:\n    - main", "answer": "```yaml name: TagBot\non:\n issue_comment:\n    types:\n      - created\n workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5ecbc73931bb1a68c1", "level": "level2", "llm_response": "```yml\nname: Release\non:\n  push:\n    branches:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - r[0-9]*\n\njobs:\n  release:\n    uses: evanchooly/workflows/.github/workflows/release.yml@master\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b11899db58865154dc", "level": "level2", "llm_response": "```yml\nname: Node-CI\n\non:\n  pull_request:\n", "answer": "```yaml name: Node-CI\n\non:\n  pull_request: ~\n  push:\n    branches: [main, changeset-release/*]\n\njobs:\n  node-tests:\n    runs-on: ubuntu-latest\n    name: 'Test (Node ${{ matrix.node-version }}, React ${{ matrix.react-version }})'\n    strategy:\n      fail-fast: false\n      matrix:\n        # The action will first check the local cache for a semver match.\n        # If unable to find a specific version in the cache,\n        # the action will attempt to download a version of Node.js.\n        # It will pull LTS versions from node-versions releases and on miss\n        # or failure will fall back to the previous behavior of downloading\n        # directly from node dist.\n        # https://github.com/actions/setup-node\n        node-version: ['14', '16']\n        react-version: ['17', '18']\n    timeout-minutes: 15\n\n    steps:\n      - uses: actions/checkout@v3\n        name: Checkout\n\n      - uses: actions/setup-node@v3\n        name: Use Node.js ${{ matrix.node-version }}\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'yarn'\n          check-latest: true\n\n      - uses: actions/cache@v3\n        name: Restore loom cache\n        with:\n          path: |\n            .loom\n            packages/*/build/ts\n            packages/*/build/*.tsbuildinfo\n          key: ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-\n\n      - name: \ud83d\udce6 Install dependencies\n        run: yarn --frozen-lockfile\n\n      - name: \ud83d\udd28 Build\n        run: yarn build\n\n      - name: \ud83d\udc85\ud83c\udffc Lint\n        run: |\n          yarn lint\n          yarn ci:lint-docs\n\n      - name: Unit tests\n        run: yarn test \"^(?:(?!(address|react-server)).)*$\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n\n      - name: E2E tests\n        run: yarn test --debug \"(address|react-server)\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n```"}
{"id": "63c4a04c736e7f0ed8c73b97", "level": "level2", "llm_response": "```yml\nname: Notify Comments on Issues\non:\n  branches:\n", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Notify Comments on Issues\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow on comment events on pending response issues\n  issue_comment:\n    types: [created]\n\n# Limit the GITHUB_TOKEN permissions\npermissions: {}\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"notify\"\n  notify:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    if: ${{ !github.event.issue.pull_request && !contains(fromJSON('[\"palpatim\", \"brennanMKE\", \"lawmicha\", \"harsh62\", \"thisisabhash\", \"ameter\", \"royjit\", \"atierian\", \"ukhan-amazon\", \"ruisebas\", \"phantumcode\"]'), github.event.comment.user.login) }}\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Runs a single command using the runners shell\n      - name: Run webhook curl command\n        env:\n          WEBHOOK_URL: ${{ secrets.SLACK_COMMENT_WEBHOOK_URL }}\n          COMMENT: ${{toJson(github.event.comment.body)}}\n        shell: bash\n        run: echo $COMMENT | sed \"s/\\\\\\n/. /g; s/\\\\\\r//g; s/[^a-zA-Z0-9 &().,:]//g\" | xargs -I {} curl -s POST \"$WEBHOOK_URL\" -H \"Content-Type:application/json\" --data '{\"comment\":\"{}\", \"commentUrl\":\"${{github.event.comment.html_url}}\", \"user\":\"${{github.event.comment.user.login}}\"}'\n```"}
{"id": "63c496df1842bc13d77600b8", "level": "level2", "llm_response": "```yml\nname: Tools\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tools\n\non:\n   push:\n    branches: [ master ]\n   pull_request:\n    branches: [ master ]\n\njobs:\n   build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: 6.0.x\n        \n    - name: Build FileAnalyzer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileAnalyzer/\n        \n    - name: Build FileExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileExtractor/\n        \n    - name: Build JsonSerializer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.JsonSerializer/\n      \n    - name: Build SystemTester\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.SystemTester/\n      \n    - name: Build TypeTreeExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.TypeTreeExtractor/\n      ```"}
{"id": "63c499c41842bc13d7772cde", "level": "level2", "llm_response": "```yml\n---\nname: PR Reviewer Checklist\non:\n  branch", "answer": "```yaml name: PR Reviewer Checklist\n\non: pull_request_review\n\njobs:\n  checklist:\n    runs-on: ubuntu-latest\n    if: github.actor != 'OSBotify'\n    steps:\n      - name: contributorChecklist.js\n        uses: Expensify/App/.github/actions/javascript/contributorChecklist@main\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CHECKLIST: 'reviewer'\n```"}
{"id": "63c499aa6fc19abdf9cb1361", "level": "level2", "llm_response": "```yml\n---\nname: Checks\non:\n  push:\n    branches", "answer": "```yaml name: Checks\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  NODE_VERSION: '16'\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    types: [\n        synchronize, # PR was updated\n        opened, # PR was open\n        reopened, # PR was closed and is now open again\n        ready_for_review, # PR was converted from draft to open\n      ]\n\njobs:\n  checks:\n    name: Checks\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          token: ${{ env.GITHUB_TOKEN }}\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ env.NODE_VERSION }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Install Dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Check Docs\n        run: npm run check-docs\n\n      - name: Check Typing\n        run: npm run check-typing\n\n      - name: Check Formatting\n        run: npm run check-formatting\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Check Prepack\n        run: npm run prepack\n```"}
{"id": "63c497c31842bc13d7765b0d", "level": "level2", "llm_response": "```yaml\nname: CI Switch/libnx\non:\n  branches:\n   ", "answer": "```yaml name: CI Switch/libnx\n\non:\n  push:\n  pull_request:\n  repository_dispatch:\n    types: [run_build]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container: \n      image: git.libretro.com:5050/libretro-infrastructure/libretro-build-libnx-devkitpro:latest\n      options: --user root\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Compile RA\n      run: |\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) clean\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) HAVE_STATIC_DUMMY=1\n    - name: Get short SHA\n      id: slug\n      run: echo \"::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)\"\n    \n    - uses: actions/upload-artifact@v3\n      with:\n        name: RA-libnx-dummy-${{ steps.slug.outputs.sha8 }}\n        path: |\n          retroarch_switch.nro\n```"}
{"id": "63c4a19633b087f6bde73627", "level": "level2", "llm_response": "```yml\n---\nname: Package Trigger Scheduler\n\non:\n  branches:\n", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '10 7 * * 2'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-netbootxyz/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for netbootxyz** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-netbootxyz/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c497e61e3364807578414d", "level": "level2", "llm_response": "```yml\n---\nname: Continuous integration\non:\n  push:\n   ", "answer": "```yaml #-----------------------------------------------------------------------------\n#\n#  TSDuck - The MPEG Transport Stream Toolkit\n#  Copyright (c) 2005-2022, Thierry Lelegard\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  1. Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n#  THE POSSIBILITY OF SUCH DAMAGE.\n#\n#-----------------------------------------------------------------------------\n#\n#  GitHub Actions configuration file : Continuous Integration\n#\n#-----------------------------------------------------------------------------\n\nname: Continuous integration\n\n# Trigger the workflow on push or pull request, for master branch only.\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\n# Build on Ubuntu, macOS and Windows, using C++11 (C++14 on Windows) and C++20 levels of standards.\njobs:\n  build_unix:\n    strategy:\n      fail-fast: false\n      matrix:\n        # ubuntu-latest is currently ubuntu-20.04, too old for C++20, force ubuntu-22.04.\n        os: [ubuntu-22.04, macos-latest]\n        compiler: [gcc, clang]\n        std: [11, 20]\n        include:\n        - os: ubuntu-22.04\n          compiler: clang\n          llvm: true\n        - os: macos-latest\n          # It has been noted on GitHub macOS runners that the host name can change\n          # between steps or even the middle of a step. This breaks the naming scheme\n          # of the build directory for binaries. As a consequence, we force BINDIR=bin.\n          bindir: bin\n        exclude:\n        - os: macos-latest\n          compiler: gcc\n          # Don't use gcc on macOS.\n    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}, C++${{ matrix.std }}\n    runs-on: ${{ matrix.os }}\n    env:\n      LLVM: ${{ matrix.llvm }}\n      BINDIR: ${{ matrix.bindir }}\n      CXXFLAGS_STANDARD: -std=c++${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        ${{ matrix.compiler }} --version\n        scripts/java-config.sh\n    - name: Build TSDuck\n      run: make -j5\n    - name: Check built version\n      run: make show-version\n    - name: Run unitary tests\n      run: make test\n    - name: Download test suite\n      run: |\n        mkdir -p ../tsduck-test\n        curl -s -L https://github.com/tsduck/tsduck-test/tarball/master | tar xz --strip 1 -C ../tsduck-test\n    - name: Run test suite\n      run: |\n        make test-suite && status=$? || status=$?\n        cd ../tsduck-test\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [Win64, Win32]\n        configuration: [Release]\n        std: [14, 20]\n        include:\n        - target: Win64\n          suffix: x64\n          testopt: --dev\n        - target: Win32\n          suffix: Win32\n          testopt: --dev32\n        exclude:\n        - target: Win32\n          std: 20\n    name: Build on ${{ matrix.target }} with VC++, C++${{ matrix.std }}\n    runs-on: windows-latest\n    env:\n      STDCPP: stdcpp${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause\n    - name: Dependencies check\n      run: |\n        Write-Output \"Path=${env:Path}\"\n        python --version\n    - name: Build TSDuck\n      run: |\n        scripts/build.ps1 -${{ matrix.target }} -${{ matrix.configuration }} -Parallel 5 -NoLowPriority -NoPause\n        Get-ChildItem bin/${{ matrix.configuration }}-${{ matrix.suffix }}\n    - name: Check built version\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsversion.exe --version=all\n    - name: Check plugins list\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsp.exe --list\n    - name: Run unitary tests\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsduckdll.exe\n    - name: Run unitary tests (static)\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsducklib.exe\n    - name: Download test suite\n      run: |\n        $ProgressPreference = 'SilentlyContinue'\n        Invoke-WebRequest -UseBasicParsing -Uri https://github.com/tsduck/tsduck-test/archive/master.zip -OutFile test.zip\n        Expand-Archive test.zip -DestinationPath . -Force\n        Move-Item tsduck-test-master ../tsduck-test -Force\n    - name: Run test suite\n      shell: bash\n      run: |\n        cd ../tsduck-test\n        ./run-all-tests.sh ${{ matrix.testopt }} && status=$? || status=$?\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_doxygen:\n    name: Doxygen documentation\n    # ubuntu-latest is currently ubuntu-20.04, try to grab a more recent version of doxygen.\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        doxygen --version\n    - name: Build TSDuck documentation\n      run: |\n        make doxygen\n```"}
{"id": "63c496ce517fc08c1eed2f51", "level": "level2", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [17.8]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm install\n    - run: npm run build\n    - run: npm run test\n    - name: Codecov\n      uses: codecov/codecov-action@v3.1.0\n```"}
{"id": "63c4967d6fc19abdf9c9c47c", "level": "level2", "llm_response": "```yml\nname: Build and deploy to GitHub Pages\n\non:\n ", "answer": "```yaml name: Build and deploy to GitHub Pages\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm ci\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.0\n        with:\n          branch: gh-pages\n          folder: dist\n```"}
{"id": "63c49df2cbc73931bb1aa4e2", "level": "level2", "llm_response": "```yaml\nname: Node Publish Package\n\non:\n  release:\n    types", "answer": "```yaml name: Node Publish Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49d2f1842bc13d7788992", "level": "level2", "llm_response": "```yml\n---\nname: Continuous Integration\n\non:\n  push:\n   ", "answer": "```yaml name: Continuous Integration\non:\n  push:\n    branches: [ main ]\n\njobs:\n  snap:\n    uses: ./.github/workflows/snap.yml\n    with:\n      deploy: true\n      channel: edge\n    secrets: inherit\n\n  matrix:\n    uses: ./.github/workflows/matrix.yml\n\n  fuzzing:\n    permissions:\n      actions: read # to fetch the artifacts (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n      contents: read # to clone the repo (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Build Fuzzers\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        fuzz-seconds: 150\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v3\n      if: failure() && steps.build.outcome == 'success'\n      with:\n        name: artifacts\n        path: ./out/artifacts\n\n```"}
{"id": "63c497a01842bc13d7764d6f", "level": "level2", "llm_response": "```yml\nname: Rebuild LLVM 12.0\n\non:\n", "answer": "```yaml # Copyright 2022 Intel Corporation\n# SPDX-License-Identifier: BSD-3-Clause\n\nname: Rebuild LLVM 12.0\n\non:\n  push:\n    branches:\n      - main\n      - '**rebuild_llvm**'\n    paths:\n      - \"llvm_patches/*12_0*\"\n      - \"alloy.py\"\n      - \".github/workflows/rebuild-llvm12.yml\"\n  workflow_dispatch:\n\njobs:\n  llvm12:\n    uses: ./.github/workflows/reusable.rebuild.yml\n    with:\n      version: '12.0'\n      full_version: '12.0.1'\n      ubuntu: '18.04'\n      vs_generator: 'Visual Studio 16 2019'\n      vs_version_str: 'vs2019'\n```"}
{"id": "63c498e633b087f6bde3bbe1", "level": "level2", "llm_response": "```yml\nname: Backport Assistant Runner\n\non:\n  pull_request", "answer": "```yaml ---\nname: Backport Assistant Runner\n\non:\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n\njobs:\n  backport:\n    if: github.event.pull_request.merged\n    runs-on: ubuntu-latest\n    container: hashicorpdev/backport-assistant:0.2.3\n    steps:\n      - name: Backport changes to stable-website\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>website)\"\n          BACKPORT_TARGET_TEMPLATE: \"stable-{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n      - name: Backport changes to targeted release branch\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>\\\\d+\\\\.\\\\d+\\\\.[+\\\\w]+)\"\n          BACKPORT_TARGET_TEMPLATE: \"release/{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n```"}
{"id": "63c4a1a11842bc13d77a50d6", "level": "level2", "llm_response": "```yml\nname: build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: Build\n\n    strategy:\n      matrix:\n        os:\n          - macos-latest\n          - ubuntu-latest\n          - windows-latest\n        browser:\n          - ChromeHeadless\n          - FirefoxHeadless\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build --if-present\n\n      - name: Test\n        run: npm test -- --browsers ${{ matrix.browser }}\n\n      - name: Diff\n        run: git diff --exit-code\n```"}
{"id": "63c4a17bb008460c1df5aa2b", "level": "level2", "llm_response": "```yml\n---\nname: CloseStaleIssue\non:\n  schedule", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path\n\nname: CloseStaleIssue\n\non:\n   schedule: \n       - cron: '1 15 1/2 * *'\n       \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close issues of hosts label\n      uses: actions/github-script@0.4.0\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          let response = await github.issues.listForRepo({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            state: 'open'\n          });\n          let data = response['data'];\n          \n          data.forEach(function(issue){\n            var labels = issue['labels'];\n            var is2Deal = true;\n            for(var i=0,l=labels.length;i<l;i++){\n                if(labels[i]['name'] == 'pending' || labels[i]['name'] == 'help wanted' || labels[i]['name'] == 'instruction'){\n                    is2Deal = false;\n                    break;\n                }\n            }\n            if(is2Deal){\n                var updated_at = new Date(issue['updated_at']);\n                var time_now = new Date();\n                var deta = time_now.getTime() - updated_at.getTime();\n                console.log('deta: ' + deta);\n                if(deta < 1000*60*60*24*30){\n                    is2Deal = false;\n                }   \n            }\n            if(is2Deal){\n                var id = issue['number'];\n                github.issues.createComment({\n                    owner: context.repo.owner,\n                    repo: context.repo.repo,\n                    issue_number: id,\n                    body: '\u7531\u4e8e\u957f\u671f\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\uff0c\u8be5\u95ee\u9898\u81ea\u52a8\u5173\u95ed\u3002\u5982\u6709\u9700\u8981\u53ef\u91cd\u65b0\u6253\u5f00\u3002'\n                });\n                github.issues.update({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: id,\n                  state: 'closed'\n                });\n            }                \n          });\n\n    \n\n\n```"}
{"id": "63c497ab1899db58864db0f4", "level": "level2", "llm_response": "```yml\nname: Release\non:\n  release:\n    types:", "answer": "```yaml ---\n# https://github.com/marketplace/actions/actions-tagger\nname: release\n\n\"on\":\n  release:\n    types: [published, edited]\n  workflow_dispatch:\n\njobs:\n  actions-tagger:\n    runs-on: windows-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n```"}
{"id": "63c49b8f517fc08c1eef11c2", "level": "level2", "llm_response": "```yml\nname: Release Drafter\n\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f1833b087f6bde640c7", "level": "level2", "llm_response": "```yml\n---\nname: Integration tests\non: push\njobs:\n", "answer": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n    inputs:\n      test:\n        description: the integration test to run\n        default: fairscale_benchmarks\n        required: true\n        type: choice\n        options:\n          - fairscale_benchmarks\n      cluster:\n        description: the beaker cluster to run the test on\n        default: ai2/tango-integration-tests\n        required: true\n        type: choice\n        options:\n          - ai2/tango-integration-tests\n          - ai2/allennlp-cirrascale\n  # Uncomment this trigger to test changes on a pull request.\n  # You also have to uncomment the lines below that mention 'for pull request checks'\n  # pull_request:\n  #   branches:\n  #     - '*'\n\njobs:\n  run_test:\n    name: ${{ github.event.inputs.test }}\n    # name: fairscale_benchmarks  # for pull request checks\n    runs-on: [ubuntu-latest]\n    timeout-minutes: 60\n    env:\n      TEST_NAME: ${{ github.event.inputs.test }}\n      # TEST_NAME: fairscale_benchmarks  # for pull request checks\n      BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}\n      BEAKER_WORKSPACE: ai2/tango-integration-tests\n      BEAKER_CLUSTER: ${{ github.event.inputs.cluster }}\n      # BEAKER_CLUSTER: ai2/allennlp-cirrascale  # for pull request checks\n      IMAGE_NAME: petew/tango-testing\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Validate inputs\n        run: |\n          # The 'test' input should be a directory in `integration_tests/`\n          test -d \"integration_tests/${TEST_NAME}\"\n\n      - name: Determine current commit SHA (pull request)\n        if: github.event_name == 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\n      - name: Determine current commit SHA (push)\n        if: github.event_name != 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=$GITHUB_SHA\" >> $GITHUB_ENV\n\n      - name: Install beaker client\n        shell: bash\n        run: |\n          mkdir -p \"$HOME/bin\"\n\n          # Download and install from latest GitHub release.\n          curl -s https://api.github.com/repos/allenai/beaker/releases/latest \\\n            | grep 'browser_download_url.*linux' \\\n            | cut -d '\"' -f 4 \\\n            | wget -qi - \\\n          && tar -xvzf beaker_linux.tar.gz -C \"$HOME/bin\"\n\n          # Add to path.\n          echo \"$HOME/bin\" >> \"$GITHUB_PATH\"\n\n      - name: Verify beaker install\n        run: |\n          beaker account whoami\n\n      - name: Create beaker experiment config\n        run: |\n          cat >beaker_config.yml << EOL\n          version: v2-alpha\n          description: ${{ env.TEST_NAME }}\n          tasks:\n            - name: test\n              image:\n                beaker: ${{ env.IMAGE_NAME }}\n              command: [\"/entrypoint.sh\", \"integration_tests/${{ env.TEST_NAME }}/run.sh\"]\n              envVars:\n                - name: COMMIT_SHA\n                  value: $COMMIT_SHA\n                - name: WANDB_API_KEY\n                  secret: WANDB_API_KEY\n                - name: FILE_FRIENDLY_LOGGING\n                  value: \"true\"\n                - name: TOKENIZERS_PARALLELISM  # set this to avoid warnings\n                  value: \"true\"\n                - name: PYTHONUNBUFFERED\n                  value: \"true\"\n              result:\n                path: '/results'\n              resources:\n                gpuCount: 4\n              context:\n                cluster: ${{ env.BEAKER_CLUSTER }}\n                priority: normal\n          EOL\n          cat beaker_config.yml\n\n      - name: Submit beaker job\n        run: |\n          TIMESTAMP=$(date +%H%M%S)\n          EXPERIMENT=$(beaker experiment create beaker_config.yml --workspace $BEAKER_WORKSPACE --name \"${TEST_NAME}-${{ github.run_number }}-${TIMESTAMP}\" | awk '{print $2}')\n          if [ -z \"$EXPERIMENT\" ]; then\n            exit 1\n          else\n            echo \"EXPERIMENT=$EXPERIMENT\" >> $GITHUB_ENV\n            echo \"Experiment $EXPERIMENT submitted. See progress at https://beaker.org/ex/$EXPERIMENT\"\n          fi\n\n      - name: Wait for job to finish\n        run: |\n          beaker experiment await $EXPERIMENT test finalized --timeout 60m\n          # Check the job's exit code.\n          test $(beaker experiment get $EXPERIMENT --format=json | jq '.[0].jobs[0].status.exitCode') -eq 0\n\n      - name: Get logs\n        if: always()\n        run: |\n          # EXPERIMENT could be empty if the submission step failed.\n          # We'll exit right away if that's the case.\n          if [ -z \"$EXPERIMENT\" ]; then\n            echo \"No logs to show\"\n            exit 0\n          fi\n\n          # Download logs from beaker.\n          beaker experiment results $EXPERIMENT --prefix out.log --output results\n\n          # If the experiment failed during startup, there might not be any logs.\n          if [ -f results/test/out.log ]; then\n            echo \"\"\n            echo \">>> Logs:\"\n            echo \"\"\n            cat results/test/out.log\n          else\n            echo \"No logs to show\"\n          fi\n\n      - name: Stop job\n        if: cancelled()\n        run: |\n          if [ ! -z \"$EXPERIMENT\" ]; then\n            beaker experiment stop $EXPERIMENT\n          fi\n```"}
{"id": "63c497d86fc19abdf9ca540a", "level": "level2", "llm_response": "```yml\n---\nname: Tools\non:\n  push:\n    branches", "answer": "```yaml name: Tools\n\non:\n push:\n  paths:\n  - '.github/workflows/tools.undatui.yml'\n  - 'Tools/UndatUI/src/**'\n\ndefaults:\n run:\n  shell: bash\n\nenv:\n DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n\n UndatUI:\n  runs-on: windows-2019\n  steps:\n\n  - name: Clone\n    uses: actions/checkout@v3\n\n  - name: Build\n    run:  |\n          :\n          MSBUILD_EXE=\"$(\"/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe\" -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)\"\n          \"$MSBUILD_EXE\" Tools/UndatUI/src/undat.sln -p:Configuration=Release\n```"}
{"id": "63c4a07ab008460c1df54484", "level": "level2", "llm_response": "```yml\n---\nname: Docker Build\n\non:\n  release:\n   ", "answer": "```yaml name: 'Docker Build'\non:\n  release:\n    types: [released]\n\njobs:\n  build:\n    name: Dispatch release event to tobybatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Emit repository_dispatch\n        uses: mvasigh/dispatch-action@1.1.6\n        with:\n          token: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          repo: kimai2\n          owner: tobybatch\n          event_type: kimai_release\n```"}
{"id": "63c49a5acbc73931bb1933d0", "level": "level2", "llm_response": "```yml\nname: Kind Cluster E2E tests\n\non:\n ", "answer": "```yaml name: Kind Cluster E2E tests\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@v1.4.0\n        with:\n          version: v0.14.0\n          kubectl_version: v1.25.0\n          cluster_name: kinder\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-go@v3 # default version of go is 1.10\n        with:\n          go-version: \"1.19\"\n      - name: Install Carvel Tools\n        run: ./hack/install-deps.sh\n      # Run benchmark with `go test -bench` and stores the output to a file\n      - name: Install kc and run e2e tests on kind\n        run: |\n          set -e -x\n          kubectl version --short\n\n          source ./hack/version-util.sh\n\n          ytt -f config/ -v kapp_controller_version=\"$(get_kappctrl_ver)+develop\" | kbld -f- > kbld.out 2> kbldmeta.out\n          cat kbldmeta.out | tail -n 1 | sed 's/.*final: kapp-controller -> \\(.*\\)$/\\1/p'  | tail -n 1 | xargs kind load docker-image --name kinder\n          kapp deploy -a kc -f kbld.out -c -y\n\n          export KAPPCTRL_E2E_SECRETGEN_CONTROLLER=true\n          source ./hack/secretgen-controller.sh\n          deploy_secretgen-controller\n\n          mkdir tmp\n          KAPPCTRL_E2E_NAMESPACE=kappctrl-test eval './hack/test-e2e.sh'\n```"}
{"id": "63c4989533b087f6bde39d3c", "level": "level2", "llm_response": "```yaml\nname: Stats\non:\n  schedule:\n    - cron:", "answer": "```yaml on:\n  schedule:\n    # https://crontab.guru/once-a-day\n    - cron: 0 0 * * *\n  workflow_dispatch: {}\n\nname: Stats\njobs:\n  stats:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: gr2m/app-stats-action@v1.x\n        id: stats\n        with:\n          id: ${{ secrets.SETTINGS_APP_ID }}\n          private_key: ${{ secrets.SETTINGS_PRIVATE_KEY }}\n      - run: \"echo installations: '${{ steps.stats.outputs.installations }}'\"\n      - run: \"echo suspended: '${{ steps.stats.outputs.suspended_installations }}'\"\n      - run: \"echo repositories: '${{ steps.stats.outputs.repositories }}'\"\n      - run: \"echo most popular repositories: '${{ steps.stats.outputs.popular_repositories }}'\"\n```"}
{"id": "63c49aefcbc73931bb196efd", "level": "level2", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n  schedule:\n    - cron: '41 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          # If you wish to specify custom queries, you can do so here or in a config file.\n          # By default, queries listed here will override any specified in a config file.\n          # Prefix the list here with \"+\" to use these queries and those in the config file.\n          # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e671842bc13d7790940", "level": "level2", "llm_response": "```yml\n---\nname: Auto-merge Dependabot PRs\n", "answer": "```yaml name: Auto-merge Dependabot PRs\non:\n  schedule:\n    - cron: '0 * * * *'\njobs:\n  auto_merge:\n    name: Auto-merge Dependabot PRs\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: akheron/dependabot-cron-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          auto-merge: 'minor'\n          merge-method: 'rebase'\n```"}
{"id": "63c49e7a517fc08c1ef03b74", "level": "level2", "llm_response": "```yaml\nname: Check links\n\non:\n  branches:\n    - main", "answer": "```yaml name: Check links\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron:  '0 12 */7 * *'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n    - name: Install Awesome Bot\n      run: gem install awesome_bot\n    - name: Run Awesome Bot\n      run: awesome_bot README.md --request-delay 1 --allow-ssl --allow-timeout -t 5 --allow-dupe --white-list sho.rt,your.site,long.url,awesome.re\n    - uses: actions/upload-artifact@v3\n      if: failure()\n      with:\n        name: ab-results\n        path: ab-results-README.md-filtered.json\n```"}
{"id": "63c49b2eb008460c1df32a6d", "level": "level2", "llm_response": "```yml\nname: License\non:\n  pull_request:\n    branches", "answer": "```yaml # Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: License\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\npermissions: read-all\njobs:\n  license:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[skip ci]')\"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n        id: go\n      - name: license\n        run: |\n          export PATH=${PATH}:`go env GOPATH`/bin\n          make license\n```"}
{"id": "63c49a16cbc73931bb1919aa", "level": "level2", "llm_response": "```yml\nname: Flatpak dependency updates\n\non:\n  schedule:\n", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```"}
{"id": "63c499411e3364807578cbd2", "level": "level2", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ 3.X.X-Branch ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ 3.X.X-Branch ]\n  schedule:\n    - cron: '0 20 * * 6'\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: ${{ matrix.language }}\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497691e33648075780df0", "level": "level2", "llm_response": "```yaml\nname: Publish Project to Gradle Plugin Portal\n\non:\n ", "answer": "```yaml name: Publish Project to Gradle Plugin Portal\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'usefulness/easylauncher-gradle-plugin'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n\n      - uses: gradle/gradle-build-action@v2\n\n      - name: Build app with Gradle\n        run: ./gradlew build\n\n      - name: Publish to Gradle Plugin Portal\n        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.gradle_publish_key }} -Pgradle.publish.secret=${{ secrets.gradle_publish_secret }}\n\n      - name: Publish to Github Package Registry\n        run: ./gradlew publish --continue || true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499671842bc13d77707f8", "level": "level2", "llm_response": "```yml\nname: Create and publish a Docker image\n\non:\n ", "answer": "```yaml name: Create and publish a Docker image\n\non: [push]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            # set latest tag for default branch\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```"}
{"id": "63c49c8e517fc08c1eef73f9", "level": "level2", "llm_response": "```yml\nname: Brick Build\n\non:\n  push:\n    branches", "answer": "```yaml name: Brick Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"packages/brick_build/**\"\n      - \".github/workflows/brick_build.yaml\"\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    uses: ./.github/workflows/reusable-dart-analyze-format-test.yaml\n    with:\n      package: brick_build\n```"}
{"id": "63c49aa1cbc73931bb194f0a", "level": "level2", "llm_response": "```yaml\nname: Sync workflows for GHES\non:\n  branches:\n", "answer": "```yaml name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n```"}
{"id": "63c49b936fc19abdf9cbd6f7", "level": "level2", "llm_response": "```yml\nname: Deploy\n\non:\n  releases:\n    releases:\n", "answer": "```yaml ---\nname: Deploy\n\n# yamllint disable-line rule:truthy\non:\n  release:\n    types:\n      - published\n  workflow_run:\n    workflows: [\"CI\"]\n    branches: [main]\n    types:\n      - completed\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/addon-deploy.yaml@main\n    secrets:\n      CAS_API_KEY: ${{ secrets.CAS_API_KEY }}\n      DISPATCH_TOKEN: ${{ secrets.DISPATCH_TOKEN }}\n```"}
{"id": "63c496ed6fc19abdf9c9f2dc", "level": "level2", "llm_response": "```yml\nname: Release Notes\non:\n  branches:\n    -", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Release Notes'\n\non:\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: 'Branch'\n        required: true\n        default: 'main'\n      start-rev:\n        description: 'Start Tag (defaults to merge-base(branch, prev-branch))'\n        required: false\n      end-rev:\n        description: 'End Tag (defaults to HEAD of the target branch)'\n        required: false\n\njobs:\n  release-notes:\n    uses: knative/actions/.github/workflows/release-notes.yaml@main\n    with:\n      branch: ${{ github.event.inputs.branch }}\n      start-rev: ${{ github.event.inputs.start-rev }}\n      end-rev: ${{ github.event.inputs.end-rev }}\n```"}
{"id": "63c49ddd517fc08c1eeffa78", "level": "level2", "llm_response": "```yml\nname: SVGOptimizer\non:\n  pull_request", "answer": "```yaml name: SVGOptimizer\non:\n  # Disable the following line if you don't want the Action to run on PRs.\n  pull_request:\n    paths:\n      - '**.svg'\n# Enable the following line if you want the Action to run on regular pushes.\n#  push:\n# Enable the following lines if you want the Action to run on a schedule.\n#  schedule:\n#  - cron:  '0 * * * 1'  # See https://crontab.guru/\n# Enable one of the following lines if you want to manually trigger the Action.\n#  repository_dispatch:\n#  workflow_dispatch:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ericcornelissen/svgo-action@v1\n        with:\n          test-run: false\n          svgo-version: 2\n          svgo-options: svgo.config.js\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d52517fc08c1eefc15c", "level": "level2", "llm_response": "```yml\n---\ntrigger:\n  event:\n    id: external-trigger-master", "answer": "```yaml name: External Trigger Main\n\non:\n  workflow_dispatch:\n\njobs:\n  external-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n\n      - name: External Trigger\n        if: github.ref == 'refs/heads/master'\n        run: |\n          if [ -n \"${{ secrets.PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER }}\" ]; then\n            echo \"**** Github secret PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER is set; skipping trigger. ****\"\n            exit 0\n          fi\n          echo \"**** External trigger running off of master branch. To disable this trigger, set a Github secret named \\\"PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER\\\". ****\"\n          echo \"**** Retrieving external version ****\"\n          EXT_RELEASE=$(curl -u \"${{ secrets.CR_USER }}:${{ secrets.CR_PAT }}\" -sX GET \"https://api.github.com/repos/Tautulli/Tautulli/releases/latest\" | jq -r '. | .tag_name')\n          if [ -z \"${EXT_RELEASE}\" ] || [ \"${EXT_RELEASE}\" == \"null\" ]; then\n            echo \"**** Can't retrieve external version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve external version for tautulli branch master\"\n            GHA_TRIGGER_URL=\"https://github.com/linuxserver/docker-tautulli/actions/runs/${{ github.run_id }}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n**Trigger URL:** '\"${GHA_TRIGGER_URL}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')\n          echo \"**** External version: ${EXT_RELEASE} ****\"\n          echo \"**** Retrieving last pushed version ****\"\n          image=\"linuxserver/tautulli\"\n          tag=\"latest\"\n          token=$(curl -sX GET \\\n            \"https://ghcr.io/token?scope=repository%3Alinuxserver%2Ftautulli%3Apull\" \\\n            | jq -r '.token')\n            multidigest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${tag}\" \\\n              | jq -r 'first(.manifests[].digest)')\n            digest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${multidigest}\" \\\n              | jq -r '.config.digest')\n          image_info=$(curl -sL \\\n            --header \"Authorization: Bearer ${token}\" \\\n            \"https://ghcr.io/v2/${image}/blobs/${digest}\" \\\n            | jq -r '.container_config')\n          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')\n          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')\n          if [ -z \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Can't retrieve last pushed version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve last pushed version for tautulli tag latest\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          echo \"**** Last pushed version: ${IMAGE_VERSION} ****\"\n          if [ \"${EXT_RELEASE}\" == \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Version ${EXT_RELEASE} already pushed, exiting ****\"\n            exit 0\n          elif [ $(curl -s https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/lastBuild/api/json | jq -r '.building') == \"true\" ]; then\n            echo \"**** New version ${EXT_RELEASE} found; but there already seems to be an active build on Jenkins; exiting ****\"\n            exit 0\n          else\n            echo \"**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build ****\"\n            response=$(curl -iX POST \\\n              https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/buildWithParameters?PACKAGE_CHECK=false \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} | grep -i location | sed \"s|^[L|l]ocation: \\(.*\\)|\\1|\")\n            echo \"**** Jenkins job queue url: ${response%$'\\r'} ****\"\n            echo \"**** Sleeping 10 seconds until job starts ****\"\n            sleep 10\n            buildurl=$(curl -s \"${response%$'\\r'}api/json\" | jq -r '.executable.url')\n            buildurl=\"${buildurl%$'\\r'}\"\n            echo \"**** Jenkins job build url: ${buildurl} ****\"\n            echo \"**** Attempting to change the Jenkins job description ****\"\n            curl -iX POST \\\n              \"${buildurl}submitDescription\" \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \\\n              --data-urlencode \"description=GHA external trigger https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\" \\\n              --data-urlencode \"Submit=Submit\"\n            echo \"**** Notifying Discord ****\"\n            TRIGGER_REASON=\"A version change was detected for tautulli tag latest. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n              \"description\": \"**Build Triggered** \\n**Reason:** '\"${TRIGGER_REASON}\"' \\n**Build URL:** '\"${buildurl}display/redirect\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n          fi\n```"}
{"id": "63c49ee31e336480757b05b6", "level": "level2", "llm_response": "```yml\nname: goreleaser\n\non:\n  push:\n   ", "answer": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Post release\n        run: ls -l ./dist/*```"}
{"id": "63c4a0a1517fc08c1ef11043", "level": "level2", "llm_response": "```yml\n---\nname: Greetings\non:\n  pull_request:\n", "answer": "```yaml # YOLOv5 \ud83d\ude80 by Ultralytics, GPL-3.0 license\n\nname: Greetings\n\non:\n  pull_request_target:\n    types: [opened]\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for submitting a YOLOv5 \ud83d\ude80 PR! To allow your work to be integrated as seamlessly as possible, we advise you to:\n\n            - \u2705 Verify your PR is **up-to-date** with `ultralytics/yolov5` `master` branch. If your PR is behind you can update your code by clicking the 'Update branch' button or by running `git pull` and `git merge master` locally.\n            - \u2705 Verify all YOLOv5 Continuous Integration (CI) **checks are passing**.\n            - \u2705 Reduce changes to the absolute **minimum** required for your bug fix or feature addition. _\"It is not daily increase but daily decrease, hack away the unessential. The closer to the source, the less wastage there is.\"_  \u2014 Bruce Lee\n\n          issue-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for your interest in YOLOv5 \ud83d\ude80! Please visit our \u2b50\ufe0f [Tutorials](https://github.com/ultralytics/yolov5/wiki#tutorials) to get started, where you can find quickstart guides for simple tasks like [Custom Data Training](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data) all the way to advanced concepts like [Hyperparameter Evolution](https://github.com/ultralytics/yolov5/issues/607).\n\n            If this is a \ud83d\udc1b Bug Report, please provide screenshots and **minimum viable code to reproduce your issue**, otherwise we can not help you.\n\n            If this is a custom training \u2753 Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online [W&B logging](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize) if available.\n\n            For business inquiries or professional support requests please visit https://ultralytics.com or email support@ultralytics.com.\n\n            ## Requirements\n\n            [**Python>=3.7.0**](https://www.python.org/) with all [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) installed including [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/). To get started:\n            ```bash\n            git clone https://github.com/ultralytics/yolov5  # clone\n            cd yolov5\n            pip install -r requirements.txt  # install\n            ```\n\n            ## Environments\n\n            YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):\n\n            - **Notebooks** with free GPU: <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a> <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a> <a href=\"https://www.kaggle.com/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n            - **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/GCP-Quickstart)\n            - **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/AWS-Quickstart)\n            - **Docker Image**. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/Docker-Quickstart) <a href=\"https://hub.docker.com/r/ultralytics/yolov5\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov5?logo=docker\" alt=\"Docker Pulls\"></a>\n\n            ## Status\n\n            <a href=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv5 CI\"></a>\n\n            If this badge is green, all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 [training](https://github.com/ultralytics/yolov5/blob/master/train.py), [validation](https://github.com/ultralytics/yolov5/blob/master/val.py), [inference](https://github.com/ultralytics/yolov5/blob/master/detect.py), [export](https://github.com/ultralytics/yolov5/blob/master/export.py) and [benchmarks](https://github.com/ultralytics/yolov5/blob/master/benchmarks.py) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n\n```"}
{"id": "63c49dd4517fc08c1eeff6b7", "level": "level2", "llm_response": "```yml\n---\nname: check-permissions\n\non:\n  push:\n", "answer": "```yaml name: check-permissions\non: [push, pull_request]\njobs:\n  check-permissions:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Check permissions on swizzin files\n        run: ./.github/scripts/check-permissions.sh\n```"}
{"id": "63c499771899db58864e6cab", "level": "level2", "llm_response": "```yml\n---\nname: Dependabot auto-merge\n\non:\n", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49f061899db588650a81b", "level": "level2", "llm_response": "```yml\nname: Build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non: [push, pull_request]\n\npermissions: read-all\n\nenv:\n  XCODE_WORKSPACE: \"Rectangle.xcworkspace\"\n  XCODE_SCHEME: \"Rectangle\"\n  CODE_SIGN_IDENTITY: \"-\"\n  BUILD_DIR: \"build\"\n  XCODE_ARCHIVE: \"Rectangle.xcarchive\"\n  APP_NAME: \"Rectangle.app\"\n  EXPORT_OPTIONS_PLIST: \"exportOptions.plist\"\n  DMG_NAME: \"Rectangle\"\n  DMG_FILE_NAME: \"Rectangle.dmg\"\n\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Install Dependencies\n      run: |\n        pod repo update\n        pod install\n    - name: Build\n      run: xcodebuild -workspace \"$XCODE_WORKSPACE\" -scheme \"$XCODE_SCHEME\" archive CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\"\n    - name: Export\n      run: |\n        plutil -convert xml1 - -o \"$EXPORT_OPTIONS_PLIST\" << EOF\n          {\n            \"destination\": \"export\",\n            \"method\": \"mac-application\"\n          }\n        EOF\n\n        xcodebuild -exportArchive -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\" -exportPath \"$BUILD_DIR\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST\"\n    - name: Resign App\n      run: codesign --force --deep -s \"$CODE_SIGN_IDENTITY\" \"$BUILD_DIR/$APP_NAME\"\n    - name: Make DMG\n      run: hdiutil create -srcdir \"$BUILD_DIR\" -volname \"$DMG_NAME\" \"$DMG_FILE_NAME\"\n    - name: Upload\n      uses: actions/upload-artifact@v3\n      with:\n        name: Build\n        path: ${{ env.DMG_FILE_NAME }}\n```"}
{"id": "63c49de733b087f6bde5c4d9", "level": "level2", "llm_response": "```yml\nname: Compile Examples\non:\n  push:\n    branches", "answer": "```yaml name: Compile Examples\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  pull_request:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by changes to external resources (libraries, platforms).\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  build:\n    name: ${{ matrix.board.fqbn }}\n    runs-on: ubuntu-latest\n\n    env:\n      SKETCHES_REPORTS_PATH: sketches-reports\n\n    strategy:\n      fail-fast: false\n\n      matrix:\n        board:\n          - fqbn: arduino:avr:nano\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:mega\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:leonardo\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:megaavr:nona4809\n            platforms: |\n              - name: arduino:megaavr\n          - fqbn: arduino:sam:arduino_due_x_dbg\n            platforms: |\n              - name: arduino:sam\n          - fqbn: arduino:samd:mkrzero\n            platforms: |\n              - name: arduino:samd\n          - fqbn: arduino:mbed_portenta:envie_m4\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_portenta:envie_m7\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_nano:nano33ble\n            platforms: |\n              - name: arduino:mbed_nano\n          - fqbn: arduino:mbed_nano:nanorp2040connect\n            platforms: |\n              - name: arduino:mbed_nano\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Compile examples\n        uses: arduino/compile-sketches@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          fqbn: ${{ matrix.board.fqbn }}\n          platforms: ${{ matrix.board.platforms }}\n          libraries: |\n            # Install the library from the local path.\n            - source-path: ./\n            # Additional library dependencies can be listed here.\n            # See: https://github.com/arduino/compile-sketches#libraries\n          sketch-paths: |\n            - examples\n          enable-deltas-report: true\n          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}\n\n      - name: Save sketches report as workflow artifact\n        uses: actions/upload-artifact@v3\n        with:\n          if-no-files-found: error\n          path: ${{ env.SKETCHES_REPORTS_PATH }}\n          name: ${{ env.SKETCHES_REPORTS_PATH }}\n```"}
{"id": "63c4946f8052faa2781ab2f2", "level": "level2", "llm_response": "```yml\nname: Release\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        include:\n          - os: ubuntu-latest\n            target: x86_64-unknown-linux-gnu\n            target_alias: linux-x86_64\n            bin_suffix: ''\n            archive_suffix: '.tar.bz2'\n          - os: windows-latest\n            target: x86_64-pc-windows-msvc\n            target_alias: win-x86_64-msvc\n            bin_suffix: '.exe'\n            archive_suffix: '.zip'\n    defaults:\n      run:\n        shell: bash\n    env:\n      ARCHIVE_PATH: encrypted-dns_${{ github.ref_name }}_${{ matrix.target_alias }}${{ matrix.archive_suffix }}\n\n    steps:\n      - uses: actions/checkout@master\n\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n          targets: ${{ matrix.target }}\n\n      - name: Check Cargo availability\n        run: cargo --version\n\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n\n      - name: Build\n        run: |\n          echo 'lto = \"fat\"' >> Cargo.toml\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo build --release\n          mkdir encrypted-dns\n          cp target/release/encrypted-dns${{ matrix.bin_suffix }} encrypted-dns/\n          cp README.md example-encrypted-dns.toml encrypted-dns/\n          if [ \"${{ matrix.os }}\" = \"ubuntu-latest\" ]; then\n            tar cjpf ${ARCHIVE_PATH} encrypted-dns\n          elif [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n            \"/C/Program Files/7-Zip/7z\" a ${ARCHIVE_PATH} encrypted-dns\n          fi\n\n      - name: Install cargo-deb and build Debian package\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |\n          cargo install --debug cargo-deb\n          cargo deb --output=encrypted-dns_${{ github.ref_name }}_amd64.deb --no-build\n\n      - uses: actions/upload-artifact@master\n        with:\n          name: encrypted-dns_${{ matrix.target_alias }}\n          path: ${{ env.ARCHIVE_PATH }}\n\n      - uses: actions/upload-artifact@master\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        with:\n          name: encrypted-dns_deb-amd64\n          path: encrypted-dns_${{ github.ref_name }}_amd64.deb\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          name: Release ${{ github.ref_name }}\n          draft: true\n          prerelease: false\n          files: |\n            encrypted-dns_deb-amd64/*.deb\n            encrypted-dns_linux-x86_64/*.tar.bz2\n            encrypted-dns_win-x86_64-msvc/*.zip\n```"}
{"id": "63c494d17843b61269a0399a", "level": "level2", "llm_response": "```yml\n---\nname: Windows\non:\n  branches:\n    -", "answer": "```yaml name: Windows\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        ruby:\n          - '3.0'\n          - '2.7'\n          - '2.6'\n          - '2.5'\n          - 'head'\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1.64.1\n      with:\n        ruby-version: ${{ matrix.ruby }}\n        bundler-cache: true\n    - name: Run test\n      run: |\n        rake test\n    - name: Run packaging\n      run: |\n        rake package\n        gem install --local pkg/gem-compiler-*.gem\n```"}
{"id": "63c4a0ee1899db5886516bef", "level": "level2", "llm_response": "```yml\n---\nname: seqr prod release\non:\n  branch", "answer": "```yaml name: seqr prod release\non:\n  workflow_run:\n    workflows: [\"Unit Tests\"]\n    types:\n      - completed\n    branches:\n      - master\n\npermissions:\n  id-token: write\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n\n      - name: authenticate to google cloud\n        id: \"auth\"\n        uses: google-github-actions/auth@v0\n        with:\n          workload_identity_provider: \"${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}\"\n          service_account: \"${{ secrets.RUN_SA_EMAIL }}\"\n\n      - name: \"setup gcloud sdk\"\n        uses: google-github-actions/setup-gcloud@v0\n\n      - name: Build and push images\n        run: |-\n          gcloud builds submit --quiet --substitutions=\"COMMIT_SHA=${{ github.event.workflow_run.head_sha }},_CUSTOM_BRANCH_TAG=gcloud-prod\" --config .cloudbuild/seqr-docker.cloudbuild.yaml --gcs-log-dir=gs://seqr-github-actions-logs/logs .\n\n  helm_update:\n    runs-on: ubuntu-latest\n    needs: docker\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: broadinstitute/seqr-helm\n          ref: main\n          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token\n          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo\n\n      - name: Update appVersion in seqr Chart file\n        uses: mikefarah/yq@v4.22.1\n        with:\n          cmd: >\n            yq -i '.appVersion = \"${{ github.event.workflow_run.head_sha }}\"' charts/seqr/Chart.yaml\n\n      - name: Commit and Push changes\n        uses: Andro999b/push@v1.3\n        with:\n          repository: broadinstitute/seqr-helm\n          branch: main\n          github_token: ${{ secrets.SEQR_VERSION_UPDATE_TOKEN }}\n          author_email: ${{ github.actor }}@users.noreply.github.com\n          author_name: tgg-automation\n          message: \"Update seqr chart appVersion to ${{ github.event.workflow_run.head_sha }}\"\n```"}
{"id": "63c49fb3cbc73931bb1b59fe", "level": "level2", "llm_response": "```yml\nname: Add issues to React Native Bug Board\non:", "answer": "```yaml name: Add issues to React Native Bug Board\r\n\r\non:\r\n  issues:\r\n    types:\r\n      - opened\r\n\r\njobs:\r\n  add-to-project:\r\n    name: Add issue to project\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/add-to-project@main\r\n        with:\r\n          project-url: https://github.com/orgs/microsoft/projects/235\r\n          github-token: ${{ secrets.RNBOT_GH_TOKEN }}\r\n```"}
{"id": "63c4a0b71899db5886515740", "level": "level2", "llm_response": "```yaml\nname: CI\non:\n  pull_request:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  pull_request:\n    branches: [master]\n  push:\n    branches: [master]\n    tags: '*'\n\nconcurrency: \n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        version:\n          - '1.0'\n          - '1'\n          - 'nightly'\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        arch: [x64]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.version }}\n          arch: ${{ matrix.arch }}\n      - uses: julia-actions/cache@v1\n      - uses: julia-actions/julia-buildpkg@latest\n      - uses: julia-actions/julia-runtest@latest\n      - uses: julia-actions/julia-processcoverage@latest\n      - uses: codecov/codecov-action@v3\n        with:\n          file: lcov.info\n```"}
{"id": "63c495638052faa2781b17aa", "level": "level2", "llm_response": "```yml\n---\nname: Build wheels\non:\n  branches:\n   ", "answer": "```yaml name: Build wheels\n\non:\n  # Trigger on pushes to the mainline branches and version tags. This prevents building commits\n  # twice when the pull request source branch is in the same repository.\n  push:\n    branches:\n      - \"master\"\n      - \"next\"\n    tags:\n      - \"v*\"\n\n  pull_request:\n      types: [opened, labeled, reopened, synchronize]\n\n  # Trigger on request.\n  workflow_dispatch:\n\nenv:\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\njobs:\n  build_wheels:\n    name: Build wheel for ${{ matrix.os }}, Python ${{ matrix.pyver }}\n    runs-on: ${{ matrix.os }}\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, macos-12] #, windows-2019]\n        pyver: [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.10.2\n        env:\n          # Build for cpython >= 3.6.\n          CIBW_PROJECT_REQUIRES_PYTHON: \"==${{ matrix.pyver }}.*\"\n          CIBW_SKIP: \"{pp*,*-musllinux_*}\"\n\n          # Build only on 64-bit architectures.\n          CIBW_ARCHS_MACOS: \"x86_64 arm64\"\n          CIBW_ARCHS_LINUX: auto64\n          CIBW_ARCHS_WINDOWS: auto64\n\n          # Configure environment variables.\n          CIBW_ENVIRONMENT_LINUX: \"CMAKE_PREFIX_PATH=/project/tbb LD_LIBRARY_PATH=/project/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          CIBW_ENVIRONMENT_MACOS: \"CMAKE_PREFIX_PATH=/Users/runner/work/freud/freud/tbb LD_LIBRARY_PATH=/Users/runner/work/freud/freud/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          MACOSX_DEPLOYMENT_TARGET: \"10.14\"\n\n          # Set up TBB.\n          CIBW_BEFORE_BUILD_LINUX: \"source .github/workflows/cibuildwheel-before-build.sh {package} linux\"\n          CIBW_BEFORE_BUILD_MACOS: \"source .github/workflows/cibuildwheel-before-build.sh {package} macos\"\n          CIBW_BEFORE_BUILD_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-build.ps1 {package}\"\n\n          # Test the wheels.\n          CIBW_BEFORE_TEST_LINUX: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_MACOS: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-test.ps1 {package}\"\n          CIBW_TEST_COMMAND: \"cd {package}/tests && pytest . -v --log-level=DEBUG -n auto\"\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./wheelhouse/*.whl\n\n  build_sdist:\n    name: Build source distribution\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: '3.9'\n\n      - name: Install build requirements\n        run: python3 -m pip --disable-pip-version-check install scikit-build cmake -r requirements.txt --upgrade --progress-bar=off\n\n      - name: Build sdist\n        run: python setup.py sdist\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: dist/*.tar.gz\n\n  upload_pypi:\n    name: Publish [PyPI]\n    needs: [build_wheels, build_sdist]\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: dist\n          path: dist\n\n      - name: Check files\n        run: ls -lR dist\n\n      - name: Upload to PyPI\n        # upload to PyPI on every tag starting with 'v'\n        if: startsWith(github.ref, 'refs/tags/v')\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Upload to TestPyPI\n        # otherwise, upload to TestPyPi when secrets are available\n        if: ${{ !startsWith(github.ref, 'refs/tags/v') && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')) }}\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n          skip_existing: true\n\n      - name: Slack notification\n        if: startsWith(github.ref, 'refs/tags/v') || failure()\n        uses: act10ns/slack@v1.6.0\n        with:\n          status: ${{ job.status }}\n          channel: '#dev-freud'\n```"}
{"id": "63c49d95cbc73931bb1a811c", "level": "level2", "llm_response": "```yml\nname: Build and Publish Documentation\n\non:\n  push:\n", "answer": "```yaml name: Build and Publish Documentation\n\non:\n  # Trigger the workflow on push or pull request,\n  # but only for the main branch\n  push:\n    branches:\n      - master\n  # Also trigger on page_build, as well as release created events\n  page_build:\n  release:\n    types: # This configuration does not affect the page_build event above\n      - created\n\nenv:\n  DOXYGEN_VERSION: Release_1_9_1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      # check out the Arduino-SDI-12 repo\n      - uses: actions/checkout@v3\n        with:\n          path: code_docs/Arduino-SDI-12\n\n      - name: Restore or Cache pip\n        uses: actions/cache@v3.0.11\n        id: cache_pip\n        with:\n          path: ~/.cache/pip\n          # if requirements.txt hasn't changed, then it will be a \"cache hit\" and pip will be restored\n          # if requirements.txt HAS changed, it will be a \"cache miss\" and a new cache of pip will be created if the job completes successfully\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Restore or Cache PlatformIO and Libraries\n        uses: actions/cache@v3.0.11\n        id: cache_pio\n        with:\n          path: ~/.platformio\n          # if nothing in the lock files has changed, then it will be a \"cache hit\"\n          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install PlatformIO\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade platformio\n\n      # Install *all* the dependencies!\n      # We're including the dependencies just so the includes can follow in the doxygen pre-processor\n      - name: Install the dependencies at global level\n        run: |\n          echo \"::debug::Installing greygnome/EnableInterrupt\"\n          pio lib -g install greygnome/EnableInterrupt\n\n      - name: Update Libraries from Cache\n        run: pio lib -g update\n\n      - name: Install GraphViz (dot)\n        run: sudo apt-get -y install graphviz\n\n      - name: Restore or Cache Doxygen\n        id: cache_doxygen\n        uses: actions/cache@v3.0.11\n        with:\n          path: doxygen-src\n          key: ${{ runner.os }}-doxygen-${{ env.DOXYGEN_VERSION }}\n\n      - name: Clone and build doxygen\n        if: steps.cache_doxygen.outputs.cache-hit != 'true'\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/build-install-doxygen.sh\n          sh continuous_integration/build-install-doxygen.sh\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install Pygments and other m.css requirements\n        run: pip3 install jinja2 Pygments beautifulsoup4\n\n      # check out my fork of m.css, for processing Doxygen output\n      - name: Checkout m.css\n        uses: actions/checkout@v3\n        with:\n          # Repository name with owner. For example, actions/checkout\n          repository: SRGDamia1/m.css\n          path: code_docs/m.css\n\n      - name: Generate all the documentation\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/generate-documentation.sh\n          sh continuous_integration/generate-documentation.sh\n\n      - name: Deploy to github pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ${{ github.workspace }}/code_docs/Arduino-SDI-12Doxygen/m.css\n```"}
{"id": "63c4a121517fc08c1ef14262", "level": "level2", "llm_response": "```yml\nname: Fix PHP code style issues\n\non:\n  push", "answer": "```yaml name: Fix PHP code style issues\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  php-code-styling:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n          token: ${{ secrets.COMMIT_TOKEN }}\n\n      - name: Fix PHP code style issues\n        uses: aglipanci/laravel-pint-action@1.0.0\n\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'PHP CS Fixer'\n```"}
{"id": "63c4a0aa33b087f6bde6e0bc", "level": "level2", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '21 0 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript' ]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'temurin'\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718f", "level": "level2", "llm_response": "```yml\nname: Stage\n\non:\n  event_type: push\n", "answer": "```yaml name: Stage\non:\n  workflow_dispatch:\njobs:\n  stage:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: git config\n        env:\n          GPT_USER: ${{ secrets.GPT_USER }}\n        run: |\n          git config --global user.name $GPT_USER\n          git config --global pull.rebase false\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - name: Checkout release branch\n        run: git switch release || git switch -c release\n      - name: Merge main branch to release branch\n        run: git merge -X theirs main\n      - name: Git push\n        run: git push origin release\n```"}
{"id": "63c49d3433b087f6bde57d74", "level": "level2", "llm_response": "```yml\nname: Alpine 3\n\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Alpine 3\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/alpine_3.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: alpine:3\n      caches: apk pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c49e361842bc13d778f5e6", "level": "level2", "llm_response": "```yml\nname: Build\non:\n  branches:\n    - main", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n    tags:\n      - v*\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n  \n\njobs:\n  build:\n    uses: benjamin-hodgson/BuildScripts/.github/workflows/dotnet.yml@main\n    with:\n      DOCS_FOLDER: Pidgin.Docs\n    secrets:\n      NUGET_KEY: ${{ secrets.NUGET_KEY }}\n```"}
{"id": "63c49e7033b087f6bde5fc3c", "level": "level2", "llm_response": "```yml\nname: Run unit tests\n\non:\n  pull_request:\n", "answer": "```yaml name: Run unit tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n  # Upload code coverage results when PRs are merged\n  push:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n\nenv:\n  DOTNET_NOLOGO: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v3\n      - name: Setup .NET Core SDKs\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: |\n            3.1.x\n            5.0.x\n            6.0.x\n          source-url: https://nuget.pkg.github.com/graphql-dotnet/index.json\n        env:\n          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n      - name: Disable MSVS Nuget Source # see https://github.com/graphql-dotnet/graphql-dotnet/issues/2422\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        run: dotnet nuget disable source 'Microsoft Visual Studio Offline Packages'\n      - name: Install dependencies\n        working-directory: src\n        run: dotnet restore\n      - name: Check formatting\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: |\n          dotnet format --no-restore --verify-no-changes --severity warn || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\n      - name: Build solution [Release]\n        working-directory: src\n        run: dotnet build --no-restore -c Release\n      - name: Build solution [Debug]\n        working-directory: src\n        run: dotnet build --no-restore -c Debug\n      - name: Test solution [Debug] with code coverage\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build -p:CollectCoverage=true -p:DoesNotReturnAttribute=\"DoesNotReturnAttribute\"\n      - name: Test solution [Debug] without code coverage\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build\n      - name: Upload coverage to codecov\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        uses: codecov/codecov-action@v3\n        with:\n          files: .coverage/GraphQLParser.Tests/coverage.net5.opencover.xml\n\n  buildcheck:\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n      - name: Pass build check\n        if: ${{ needs.test.result == 'success' }}\n        run: exit 0\n      - name: Fail build check\n        if: ${{ needs.test.result != 'success' }}\n        run: exit 1\n```"}
{"id": "63c49fc91899db588650f490", "level": "level2", "llm_response": "```yml\nname: Build & Deploy - BETA linters\n\non", "answer": "```yaml ---\n#########################\n#########################\n## Deploy Docker Image Flavors ##\n#########################\n#########################\n# Documentation:\n# https://help.github.com/en/articles/workflow-syntax-for-github-actions\n#\n\n#######################################\n# Start the job on all push to main #\n#######################################\nname: \"Build & Deploy - BETA linters\"\non:\n  push:\n    branches:\n      - \"main\"\n    paths:\n      - \".github/workflows/**\"\n      - \"Dockerfile\"\n      - \"**/Dockerfile\"\n      - \"flavors/**\"\n      - \"megalinter/**\"\n      - \"mega-linter-runner/**\"\n      - \"**/linter-versions.json\"\n      - \"TEMPLATES/**\"\n      - \".trivyignore\"\n      - \"**/*.sh\"\n      - \"**/*.py\"\n      - \"**/sh/**\"\n\n###############\n# Set the Job #\n###############\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n\n  prepare:\n    name: Prepare matrix\n    runs-on: ubuntu-latest  \n    steps:\n\n    - name: Build unique image name for beta\n      shell: bash\n      run: echo \"UNIQUE_DOCKER_IMAGE_NAME=$(echo beta_$(date '+%Y%m%d-%H%M'))\" >> $GITHUB_ENV\n\n    - name: Prepare result is ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\n      shell: bash\n      run: echo ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}  \n\n    outputs:\n      unique_docker_image_name: \"${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\"  \n\n  build:\n    needs: prepare\n    # Name the Job\n    name: Deploy Docker Image - Beta - Linters\n    # Set the agent to run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        # linters-start\n        linter:\n          [\n            \"ansible_ansible_lint\",\n            \"bash_shellcheck\",\n            \"cloudformation_cfn_lint\",\n            \"dockerfile_hadolint\",\n            \"go_revive\",\n            \"groovy_npm_groovy_lint\",\n            \"java_checkstyle\",\n            \"java_pmd\",\n            \"javascript_es\",\n            \"json_eslint_plugin_jsonc\",\n            \"jsx_eslint\",\n            \"kotlin_ktlint\",\n            \"php_psalm\",\n            \"python_bandit\",\n            \"repository_checkov\",\n            \"repository_devskim\",\n            \"repository_dustilock\",\n            \"repository_gitleaks\",\n            \"repository_secretlint\",\n            \"repository_semgrep\",\n            \"repository_syft\",\n            \"repository_trivy\",\n            \"terraform_tflint\",\n            \"terraform_terrascan\",\n            \"terraform_checkov\",\n            \"tsx_eslint\",\n            \"typescript_es\",\n          ]\n# linters-end\n    # Only run this on the main repo\n    if: github.repository == 'oxsecurity/megalinter' && !contains(github.event.head_commit.message, 'skip deploy')\n    ##################\n    # Load all steps #\n    ##################\n    steps:\n      ##########################\n      # Checkout the code base #\n      ##########################\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      #####################\n      # Run Deploy script #\n      #####################\n      - name: Deploy Beta image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: beta\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      - name: Deploy ${{ needs.prepare.outputs.unique_docker_image_name }} image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: \"${{ needs.prepare.outputs.unique_docker_image_name }}\"\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n          ALWAYS_BUILD: force\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      #####################################\n      # Run Linter test cases #\n      #####################################\n      - name: Run Test Cases\n        shell: bash\n        run: |\n          TEST_KEYWORDS_TO_USE_UPPER=\"${{ matrix.linter }}\"\n          TEST_KEYWORDS_TO_USE=\"${TEST_KEYWORDS_TO_USE_UPPER,,}\"\n          docker run -e TEST_CASE_RUN=true -e OUTPUT_FORMAT=text -e OUTPUT_FOLDER=${GITHUB_SHA} -e OUTPUT_DETAIL=detailed -e GITHUB_SHA=${GITHUB_SHA} -e PAT=\"${{secrets.PAT}}\" -e TEST_KEYWORDS=\"${TEST_KEYWORDS_TO_USE}\" -e MEGALINTER_VOLUME_ROOT=\"${GITHUB_WORKSPACE}\" -v \"/var/run/docker.sock:/var/run/docker.sock:rw\" -v ${GITHUB_WORKSPACE}:/tmp/lint oxsecurity/megalinter-only-${{ matrix.linter }}:beta\n        timeout-minutes: 30\n\n      ##############################################\n      # Check Docker image security with Trivy #\n      ##############################################\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'docker.io/oxsecurity/megalinter-only-${{ matrix.linter }}:beta'\n          format: 'table'\n          exit-code: '1'\n          ignore-unfixed: true\n          security-checks: vuln\n          vuln-type: 'os,library'\n          severity: 'CRITICAL,HIGH'\n          timeout: 10m0s\n```"}
{"id": "63c4996433b087f6bde3f0a1", "level": "level2", "llm_response": "```yml\n---\nname: test\n\non:\n  push:\n    branches", "answer": "```yaml name: test\n\non: [push]\n\njobs:\n  lint:\n    runs-on: 'ubuntu-latest'\n\n    strategy:\n      matrix:\n        node: [14, 16, 18]\n\n    name: Lint (Node ${{ matrix.node }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run stylelint\n      - run: npm run eslint\n\n  test:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Test (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm test\n        env:\n          CI: true\n\n  build-examples:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Build examples (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    needs:\n      - test\n      - lint\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run build\n        env:\n          CI: true\n```"}
{"id": "63c4982f6fc19abdf9ca7842", "level": "level2", "llm_response": "```yml\n---\nname: Build and publish folly dependency\non: push", "answer": "```yaml name: Build and publish folly dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/folly image for a particular version\"\n        default: \"Run\"\n      folly_release:\n        description: \"The folly version to build and publish (e.g. 2021.03.29.00)\"\n        required: true\n        type: string\n      fmt_release:\n        description: \"The fmt version to build and publish (e.g. 7.1.3)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg folly_release=${{ github.event.inputs.folly_release }} \\\n          --build-arg fmt_release=${{ github.event.inputs.fmt_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\" \\\n          -f \"docker/folly/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly\n```"}
{"id": "63c497b6cbc73931bb1820e9", "level": "level2", "llm_response": "```yml\n---\nname: Lib Injection Test\non:\n  pull_request", "answer": "```yaml name: \"Lib Injection Test\"\n\non:\n  pull_request:\n  push:\n    branches: [master]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  lib-injection-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d # 1.3.0\n        with:\n          config: k8s/kind-config.yaml\n          kubectl_version: v1.22.10\n          node_image: kindest/node:v1.22.9\n\n      - name: Deploy apm test trace agent\n        run: |\n          kubectl apply -f k8s/dd-apm-test-agent-config.yaml\n          kubectl rollout status daemonset/datadog-agent\n          kubectl wait $(kubectl get pods -l app=datadog-agent -o name) --for condition=ready\n          sleep 5\n\n      - name: Npm pack for injection image\n        run: |\n          npm pack\n\n      - uses: ./.github/actions/injection\n        with:\n          init-image-version: ${GITHUB_SHA}\n\n      - name: Build sample app image\n        run: |\n          docker build k8s/sample-app --build-arg npm_pkg=./dd-trace.tgz -t ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n          docker push ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n\n      - name: Deploy test pod\n        run: |\n          sed -i \"s|LATEST|$GITHUB_SHA|g\" k8s/test-pod.yaml\n          sleep 5\n          n=0\n          until [ \"$n\" -ge 5 ]\n          do\n            kubectl apply -f k8s/test-pod.yaml && sleep 5 && kubectl wait pod/sample-app --for condition=ready && break\n            n=$((n+1))\n            sleep 15\n          done\n          sleep 5\n\n      - name: Test\n        run: |\n          wget http://localhost:18126/test/session/traces || true\n          kubectl logs $(kubectl get pods -l app=datadog-agent -o name)\n\n          TRACES=`cat traces`\n          if [[ ${#TRACES} -lt 3 ]] ; then\n            echo \"No traces reported - ${TRACES}\"\n            exit 1\n          else\n            echo \"Traces reported - ${TRACES}\"\n            exit 0\n          fi\n```"}
{"id": "63c49b7b1842bc13d777d9d4", "level": "level2", "llm_response": "```yml\n---\nname: Automated review labels\n\non:\n  branches:\n", "answer": "```yaml   name: 'Automated review labels'\n\n  on:\n    issue_comment:\n      types: [created]\n    issues:\n      types: [unlabeled]\n    pull_request_target:\n      types: [unlabeled]\n\n  jobs:\n\n    add-review-team-label:\n      name: 'When pinged, label a PR with review team'\n      if: >\n        github.event.issue\n        && github.event.issue.pull_request\n        && !contains(github.event.issue.labels.*.name, 'review-requested')\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-teams\n          id: check_teams\n          uses: actions/github-script@v6\n          with:\n            script: |\n              const teams = [\n                '@conda-forge/staged-recipes',\n                '@conda-forge/help-c-cpp',\n                '@conda-forge/help-cdts',\n                '@conda-forge/help-go',\n                '@conda-forge/help-java',\n                '@conda-forge/help-julia',\n                '@conda-forge/help-nodejs',\n                '@conda-forge/help-perl',\n                '@conda-forge/help-python',\n                '@conda-forge/help-python-c',\n                '@conda-forge/help-r',\n                '@conda-forge/help-ruby'\n              ];\n              let found_label = false;\n              for (const team of teams) {\n                  let text = context.payload.comment.body;\n                  const regex = new RegExp(team + '[^\\-]|' + team + '$');\n                  let result = regex.test(text);\n                  if (result) {\n                      const slug = team.replace(\"@conda-forge/\", \"\");\n                      const label = slug.replace(\"help-\", \"\");\n                      found_label = true;\n                      github.rest.issues.addLabels({\n                          issue_number: context.issue.number,\n                          owner: context.repo.owner,\n                          repo: context.repo.repo,\n                          labels: [label, 'review-requested']\n                      });\n                      // NOTE: GitHub Actions default token lacks permission to\n                      // assign teams for review; external bot required for\n                      // that feature.\n                      //\n                      https://github.com/conda-forge/staged-recipes/issues/18023#issuecomment-1080451231\n                      console.log(`Somebody mentioned ${slug}.`);\n                  }\n              }\n              return found_label;\n        - name: remove-labels\n          if: >\n            (steps.check_teams.outputs.result == 'true')\n            && contains(github.event.issue.labels.*.name, 'Awaiting author contribution')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.removeLabel({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  name: ['Awaiting author contribution']\n              })\n\n    check-remove-review-requested-label:\n      name: 'Check that review-requested label was removed by a team member'\n      if: >\n        github.event.action == 'unlabeled'\n        && github.event.label.name == 'review-requested'\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-team-membership\n          id: check_team_review\n          uses: actions/github-script@v6\n          with:\n            github-token: ${{ secrets.GH_TOKEN }}\n            script: |\n              console.log(`Label was removed by ${context.payload.sender.login}`);\n              let memberships = [];\n              for (const team of ['staged-recipes', 'core']) {\n                  const membership = github.rest.teams.getMembershipForUserInOrg({\n                      org: 'conda-forge',\n                      team_slug: team,\n                      username: context.payload.sender.login,\n                  });\n                  memberships.push(membership.then((result) => {\n                      if (result.status == 200 && result.data.state == 'active') {\n                          console.log('User is authorized');\n                          return true;\n                      } else {\n                          console.log('User is nonactive');\n                          return false;\n                      }\n                  }).catch((error) => {\n                      // Non-membership raises an HttpError\n                      return false;\n                  }));\n              }\n              return Promise.all(memberships).then((values) => {\n                  let is_authorized = false;\n                  for (const m of values) {\n                      is_authorized = is_authorized || m;\n                  }\n                  return is_authorized;\n              });\n        - name: add-labels\n          if: >\n            (steps.check_team_review.outputs.result == 'true')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['Awaiting author contribution']\n              });\n        - name: readd-review-label\n          if: >\n            (steps.check_team_review.outputs.result == 'false')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['review-requested']\n              });\n              console.log('Non-members of staged recipes cannot remove this label.')\n```"}
{"id": "63c4a1751899db5886519f71", "level": "level2", "llm_response": "```yml\n---\nname: Auto Author Assign\non:\n  pull_request", "answer": "```yaml name: \"Auto Author Assign\"\n\non:\n  pull_request_target:\n    types: [opened, reopened]\n\npermissions:\n  pull-requests: write\n\njobs:\n  assign-author:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toshimaru/auto-author-assign@v1.4.0\n```"}
{"id": "63c49a6c1899db58864ed1c5", "level": "level2", "llm_response": "```yml\n---\nname: build-publish-unpacker-image\n\non:", "answer": "```yaml name: build-publish-unpacker-image\non:\n  workflow_dispatch:\njobs:\n  build-and-publish:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout Epinio\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push unpacker\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          context: images/.\n          file: images/unpacker-Dockerfile\n          tags: ghcr.io/epinio/epinio-unpacker:1.0\n          build-args: |\n            VERSION=1.0\n```"}
{"id": "63c49bdc1899db58864f62db", "level": "level2", "llm_response": "```yml\n---\nname: Ruby test and build\n\non:\n  pull", "answer": "```yaml # License: LGPL-3.0-or-later\nname: Ruby test and build\non: \n  pull_request:\n    paths-ignore:\n      - \"**.[jt]sx?\"\n      - \"**.md\"\n      - \"**.md\"\n      - \"NOTICE-js\"\n      - \"NOTICE-ruby\"\n      - \"package.json\"\n      - \"yarn.lock\"\n    types: [opened, reopened, synchronize]\njobs:\n  package-download: # this downloads and caches all of the packages. That way if a future job fails, the caching will still occur\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n  main_build:\n    needs: package-download\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup PostgreSQL with PostgreSQL extensions and unprivileged user\n        uses: Daniel-Marynicz/postgresql-action@1.0.0\n        with:\n          postgres_image_tag: 12-alpine\n          postgres_user: houdini_user\n          postgres_password: password\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - name: install bess dependencies\n        run: |\n          cd gems/bess\n          bundle install --jobs 3 --retry 3\n      - name: run spec for bess\n        run: |\n          cd gems/bess\n          bundle exec rake spec\n      - run: bin/setup ci\n      - name: Generate JS routes\n        run: bin/rails js:routes:typescript\n      - name: run spec\n        run: bundle exec rake spec\n    \n```"}
{"id": "63c49aca33b087f6bde47f19", "level": "level2", "llm_response": "```yml\nname: Node CI\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Node CI\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - name: Fetch commit count\n        env:\n          PR_COMMIT_COUNT: ${{ github.event.pull_request.commits }}\n        run: |\n          echo \"FETCH_DEPTH=$(($PR_COMMIT_COUNT + 1))\" >> $GITHUB_ENV\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: ${{ env.FETCH_DEPTH }}\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Collect changed files\n        run: |\n          mkdir ~/tmp/\n          git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --diff-filter=ACM --name-only --relative '*src/**/*.ts' > ~/tmp/changed_files\n          echo -e \"Changed files: \\n$(cat ~/tmp/changed_files)\"\n\n      - name: Lint\n        run: npx eslint $(cat ~/tmp/changed_files)\n\n      - name: Check types\n        run: npm run checktype\n\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Build release\n        run: npm run release\n\n      - name: Test generated DTS\n        run: npm run test:dts\n\n      - name: Unit Test\n        run: npm run test\n```"}
{"id": "63c4a03933b087f6bde6b332", "level": "level2", "llm_response": "```yml\nname: Go Checks\n\non:\n  branches:\n    -", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Checks\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    name: All\n    env:\n      RUNGOGENERATE: false\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: \"1.19.x\"\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-check-setup\n        if: hashFiles('./.github/actions/go-check-setup') != ''\n      - name: Read config\n        if: hashFiles('./.github/workflows/go-check-config.json') != ''\n        run: |\n          if jq -re .gogenerate ./.github/workflows/go-check-config.json; then\n            echo \"RUNGOGENERATE=true\" >> $GITHUB_ENV\n          fi\n      - name: Install staticcheck\n        run: go install honnef.co/go/tools/cmd/staticcheck@376210a89477dedbe6fdc4484b233998650d7b3c # 2022.1.3 (v0.3.3)\n      - name: Check that go.mod is tidy\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            go mod tidy\n            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then\n              echo \"go.sum was added by go mod tidy\"\n              exit 1\n            fi\n            git diff --exit-code -- go.sum go.mod\n      - name: gofmt\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        run: |\n          out=$(gofmt -s -l .)\n          if [[ -n \"$out\" ]]; then\n            echo $out | awk '{print \"::error file=\" $0 \",line=0,col=0::File is not gofmt-ed.\"}'\n            exit 1\n          fi\n      - name: go vet\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go vet ./...\n      - name: staticcheck\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            set -o pipefail\n            staticcheck ./... | sed -e 's@\\(.*\\)\\.go@./\\1.go@g'\n      - name: go generate\n        uses: protocol/multiple-go-modules@v1.2\n        if: (success() || failure()) && env.RUNGOGENERATE == 'true'\n        with:\n          run: |\n            git clean -fd # make sure there aren't untracked files / directories\n            go generate ./...\n            # check if go generate modified or added any files\n            if ! $(git add . && git diff-index HEAD --exit-code --quiet); then\n              echo \"go generated caused changes to the repository:\"\n              git status --short\n              exit 1\n            fi\n```"}
{"id": "63c498d76fc19abdf9cabcf5", "level": "level2", "llm_response": "```yml\nname: build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\non: [push, pull_request]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        go-version: [~1.16, ^1]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    env:\n      GO111MODULE: \"on\"\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.1\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Download Go modules\n        run: go mod download\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test ./...\n```"}
{"id": "63c49c3db008460c1df39721", "level": "level2", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n    branches:\n    - master\n\njobs:\n  Debug-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Debug\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Debug Build and Test\n      working-directory: build/Debug\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Debug ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Debug\n        path: build/Debug/bin/llvm-mctoll\n\n  Release-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Release\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Release Build and Test\n      working-directory: build/Release\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Release\n        path: build/Release/bin/llvm-mctoll\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level2", "llm_response": "```yaml\nname: Require pull request labels\non:\n  pull_request:\n", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c4a059cbc73931bb1b9cf8", "level": "level2", "llm_response": "```yml\nname: Go\non:\n  push:\n    branches:\n", "answer": "```yaml name: Go\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [1.19]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Install libolm\n        run: sudo apt-get install libolm-dev libolm3\n\n      - name: Install goimports\n        run: |\n          go install golang.org/x/tools/cmd/goimports@latest\n          export PATH=\"$HOME/go/bin:$PATH\"\n\n      - name: Install pre-commit\n        run: pip install pre-commit\n\n      - name: Lint\n        run: pre-commit run -a\n```"}
{"id": "63c49ad91e33648075796ee0", "level": "level2", "llm_response": "```yml\nname: Draft Release\non:\n  branch: master\n", "answer": "```yaml name: Draft Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5c621ac4f2678a5bd7759", "level": "level2", "llm_response": "```yml\nname: Reusable - Create Java contrib pull request\n\non", "answer": "```yaml name: Reusable - Create Java contrib pull request\n\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n    secrets:\n      BOT_TOKEN:\n        required: true\n  # to help with partial release build failures\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version\"\n        required: true\n\njobs:\n  create-java-contrib-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: opentelemetrybot/opentelemetry-java-contrib\n          # this is the personal access token used for \"git push\" below\n          token: ${{ secrets.BOT_TOKEN }}\n\n      - name: Initialize pull request branch\n        env:\n          VERSION: ${{ inputs.version }}\n        run: |\n          git remote add upstream https://github.com/open-telemetry/opentelemetry-java-contrib.git\n          git fetch upstream\n          git checkout -b update-opentelemetry-sdk-to-${VERSION} upstream/main\n\n      - name: Update version\n        env:\n          VERSION: ${{ inputs.version }}\n        run: ./.github/scripts/update-sdk-version.sh $VERSION\n\n      - name: Use CLA approved github bot\n        run: .github/scripts/use-cla-approved-github-bot.sh\n\n      - name: Create pull request against opentelemetry-java-contrib\n        env:\n          # this is the personal access token used for \"gh pr create\" below\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}\n          VERSION: ${{ inputs.version }}\n        run: |\n          message=\"Update the SDK and instrumentation versions to $VERSION\"\n          body=$(cat << EOF\n          Update the SDK and instrumentation versions to \\`$VERSION\\`.\n          \n          Note: you will likely need to re-run the checks on this PR in an hour or so, once the\n          updated dependencies are visible in maven central.\n          EOF\n          )\n\n          # gh pr create doesn't have a way to explicitly specify different head and base\n          # repositories currently, but it will implicitly pick up the head from a different\n          # repository if you set up a tracking branch\n\n          git commit -a -m \"$message\"\n          git push --set-upstream origin HEAD:update-opentelemetry-sdk-to-${VERSION}\n          gh pr create --title \"$message\" \\\n                       --body \"$body\" \\\n                       --repo open-telemetry/opentelemetry-java-contrib \\\n                       --base main\n```"}
{"id": "63c49781517fc08c1eed75fb", "level": "level2", "llm_response": "```yml\nname: Release\non:\n  branch:\n    - master", "answer": "```yaml \nname: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.14.0\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npm run semantic-release\n```"}
{"id": "63c49d1d6fc19abdf9cc7410", "level": "level2", "llm_response": "```yml\n---\nname: pre-commit\n\non:\n  push:\n   ", "answer": "```yaml # yaml-language-server: $schema=https://json.schemastore.org/github-workflow\n\nname: pre-commit\n\non:\n  push:\n  pull_request:\n\njobs:\n  pre-commit:\n    name: Detecting code style issues\n    runs-on: ubuntu-latest\n    # The Dockerfile for this container can be found at:\n    # https://github.com/Holzhaus/mixxx-ci-docker\n    container: holzhaus/mixxx-ci:20220805\n    steps:\n      - name: \"Check out repository\"\n        uses: actions/checkout@v3\n        with:\n          # Unfortunately we need the whole history and can't use a shallow clone\n          # because the Appstream Metadata hook parses the history to find the\n          # latest changelog modification date. Otherwise, `fetch-depth: 2` would\n          # suffice.\n          fetch-depth: 0\n\n      - name: \"Add GitHub workspace as a safe directory\"\n        # Without this, git commands will fail due to mismatching permissions in\n        # the container. See actions/runner#2033 for details.\n        #\n        # The actions/checkout action should already take care of this thanks to\n        # commit actions/checkout@55fd82fc42c0cdd6f1f480dd23f60636a42f6f5c, but\n        # it seems like that's not working properly.\n        run: |\n          git config --global --add safe.directory \"${GITHUB_WORKSPACE}\"\n          git config --global --list\n\n      - name: \"Detect code style issues (push)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'push'\n        # There are too many files in the repo that have formatting issues. We'll\n        # disable these checks for now when pushing directly (but still run these\n        # on Pull Requests!).\n        env:\n          SKIP: clang-format,eslint,no-commit-to-branch\n\n      - name: \"Detect code style issues (pull_request)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'pull_request'\n        env:\n          SKIP: no-commit-to-branch\n        with:\n          # HEAD is the not yet integrated PR merge commit +refs/pull/xxxx/merge\n          # HEAD^1 is the PR target branch and HEAD^2 is the HEAD of the source branch\n          extra_args: --from-ref HEAD^1 --to-ref HEAD\n\n      - name: \"Generate patch file\"\n        if: failure()\n        run: |\n          git diff-index -p HEAD > \"${PATCH_FILE}\"\n          [ -s \"${PATCH_FILE}\" ] && echo \"UPLOAD_PATCH_FILE=${PATCH_FILE}\" >> \"${GITHUB_ENV}\"\n        env:\n          PATCH_FILE: pre-commit.patch\n\n      - name: \"Upload patch artifact\"\n        if: failure() && env.UPLOAD_PATCH_FILE != null\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.UPLOAD_PATCH_FILE }}\n          path: ${{ env.UPLOAD_PATCH_FILE }}\n\n      # AppStream metadata has been generated/updated by a pre-commit hook\n      - name: \"Validate AppStream metadata\"\n        run: appstreamcli validate res/linux/org.mixxx.Mixxx.metainfo.xml\n```"}
{"id": "63c4966e6fc19abdf9c9c155", "level": "level2", "llm_response": "```yml\n---\nname: tfsec release\non:\n  branch:\n", "answer": "```yaml name: tfsec release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create binary + dockerhub releases\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n          cache: true\n          cache-dependency-path: go.sum\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5.1.0\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: Login to docker.io registry\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USER }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Release\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```"}
{"id": "63c499d5517fc08c1eee63cc", "level": "level2", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml name: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    - cron: '0 3 * * 1'\n\npermissions:\n  actions: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0cc1899db5886515e72", "level": "level2", "llm_response": "```yml\n---\nname: Deploy itch.io Packages\non: push\n", "answer": "```yaml name: Deploy itch.io Packages\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Git Tag'\n        required: true\n        default: 'release-xxxxxxxx'\n\njobs:\n  itch:\n    name: Deploy to itch.io\n    runs-on: ubuntu-20.04\n    if: github.repository == 'openra/openra'\n    steps:\n      - name: Download Packages\n        run: |\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64.exe\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64-winportable.zip\" -O \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}.dmg\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Dune-2000-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Red-Alert-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Tiberian-Dawn-x86_64.AppImage\"\n          wget -q \"https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tag }}/packaging/.itch.toml\"\n          zip -u \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\" .itch.toml\n\n      - name: Publish Windows Installer\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: win\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64.exe\n\n      - name: Publish Windows Itch Bundle\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: itch\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\n\n      - name: Publish macOS Package\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: macos\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}.dmg\n\n      - name: Publish RA AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-ra\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Red-Alert-x86_64.AppImage\n\n      - name: Publish TD AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-cnc\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Tiberian-Dawn-x86_64.AppImage\n\n      - name: Publish D2k AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-d2k\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Dune-2000-x86_64.AppImage\n```"}
{"id": "63c49c611e336480757a0842", "level": "level2", "llm_response": "```yaml\nname: Build jellyfin-blog\non:\n  pull_request:\n", "answer": "```yaml name: '\ud83c\udfd7\ufe0f Build jellyfin-blog'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '.github/*.json'\n\njobs:\n  build:\n    uses: ./.github/workflows/_meta.yaml\n    with:\n      publish: false\n```"}
{"id": "63c49edf1842bc13d779394c", "level": "level2", "llm_response": "```yml\nname: RSpec\non:\n  pull_request:\n   ", "answer": "```yaml name: RSpec\non:\n  pull_request:\n  push:\n    branches: [ main ]\njobs:\n  coverage:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.1\n          bundler: 2.3.19\n          bundler-cache: true\n\n      - name: Install Code Climate reporter\n        run: |\n          sudo curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n          sudo chmod +x ./cc-test-reporter\n      - name: Generate Coverage\n        env:\n          CC_TEST_REPORTER_ID: 88e524e8f638efe690def7a6e2c72b1a9db5cdfa74548921b734d609a5858ee5\n        run: |\n          export GIT_BRANCH=${GITHUB_REF#refs/heads/}\n          export GIT_COMMIT_SHA=${GITHUB_SHA}\n          echo $GIT_BRANCH\n          echo $GIT_COMMIT_SHA\n          ./cc-test-reporter before-build\n          COV=true bin/rspec --require spec_helper --tag ~perf\n          ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?\n\n  tests:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ruby: [2.5, 2.6, 2.7, '3.0', 3.1]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler: 2.3.19\n          bundler-cache: true\n      - run: bin/appraisal install --jobs=$(nproc) --retry=$(nproc)\n      - run: bin/appraisal rspec --require spec_helper --tag ~perf\n```"}
{"id": "63c5c634ac4f2678a5bd7cfa", "level": "level2", "llm_response": "```yml\n---\nname: Issue Subscriber\non:\n  event:\n   ", "answer": "```yaml name: Issue Subscriber\n\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  auto-subscribe:\n    runs-on: ubuntu-latest\n    if: github.repository == 'llvm/llvm-project'\n    steps:\n      - name: Setup Automation Script\n        run: |\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/github-automation.py\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/requirements.txt\n          chmod a+x github-automation.py\n          pip install -r requirements.txt\n\n      - name: Update watchers\n        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable\n        env:\n          LABEL_NAME: ${{ github.event.label.name }}\n        run: |\n          ./github-automation.py \\\n            --token '${{ secrets.ISSUE_SUBSCRIBER_TOKEN }}' \\\n            issue-subscriber \\\n            --issue-number '${{ github.event.issue.number }}' \\\n            --label-name \"$LABEL_NAME\"\n```"}
{"id": "63c494bb7843b61269a03187", "level": "level2", "llm_response": "```yml\nname: lint-and-test\n\non:\n  pull_request:\n", "answer": "```yaml name: lint-and-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    tags-ignore:\n      - \"**\"  # Skip re-linting when tags are added\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install poetry\n        poetry install\n\n    - name: Run flake8\n      run: poetry run flake8 .\n\n    - name: Run mypy\n      run: poetry run mypy .\n\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n      fail-fast: false\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install tox-gh-actions\n\n    - name: Run tests w/tox\n      run: tox\n\n    - name: Cache coverage for ${{ matrix.python-version }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: cov_py${{ matrix.python-version }}\n        path: .coverage\n\n  combine-cov:\n    runs-on: ubuntu-latest\n    needs: test\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Pull coverage workflow artifacts\n      uses: actions/download-artifact@v3\n      with:\n        path: cov_cache/\n\n    - name: Install cov & combine\n      run: |\n        pip install coverage\n        coverage combine ./cov_cache/**/.coverage\n\n    - name: Report coverage\n      run: |\n        echo '**Combined Coverage**' >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage report -m --skip-covered >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage html\n\n    - name: Publish cov HTML\n      uses: actions/upload-artifact@v3\n      with:\n        path: htmlcov/\n        name: cov_report_html\n```"}
{"id": "63c49df933b087f6bde5cc80", "level": "level2", "llm_response": "```yml\nname: Deploy CI\n\non:\n  branch:\n    -", "answer": "```yaml name: Deploy CI\n\nenv:\n  NODE_OPTIONS: --max-old-space-size=6144\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: 'Setup Node.js'\n        uses: actions/setup-node@v3\n        with:\n          node-version: 14\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-\n\n      - name: Pnpm action\n        uses: pnpm/action-setup@v2\n        with:\n          version: latest\n          run_install: true\n\n      - name: Build\n        run: pnpm build:site\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          cname: watermark.xingkang.wang\n```"}
{"id": "63c4a15b1842bc13d77a36dc", "level": "level2", "llm_response": "```yml\nname: PHP 5.2\n\non:\n  push", "answer": "```yaml \non: push\n\njobs:\n  test-idiorm-with-php5-2:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n\n    env:\n      REGISTRY: ghcr.io\n      IMAGE_NAME: treffynnon/php5.2cli:latest\n\n    name: 'PHP 5.2'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Pull docker image\n        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - name: Run PHPUnit tests\n        run: docker run -t -v $(realpath ./):/tmp/idiorm --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} /root/phpunit -c /tmp/idiorm/phpunit.xml\n\n  test-idiorm-against-php-matrix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-versions:     ['5.4', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4']\n        phpunit-versions: ['4.8']\n        include:\n          - php-versions: '8.0'\n            phpunit-versions: '8.5.21'\n          - php-versions: '8.2'\n            phpunit-versions: '8.5.21'\n\n    name: PHP ${{ matrix.php-versions }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php-versions }}\n          coverage: xdebug\n          tools: composer, phpunit:${{ matrix.phpunit-versions }}\n\n      - name: Setup problem matchers for PHPUnit\n        run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Add PHP 8 return types\n        if: ${{ matrix.php-versions >= '8.0' }}\n        run: |\n          sed -i 's#setUp()#setUp(): void#' test/*.php\n          sed -i 's#tearDown()#tearDown(): void#' test/*.php\n\n      - name: Run phpunit tests\n        run: composer run-script test -- --colors --coverage-text\n```"}
{"id": "63c49cdc517fc08c1eef9339", "level": "level2", "llm_response": "```yml\n---\nname: Build debug apk\n\non:\n  pull_request", "answer": "```yaml name: Build debug apk\n\non:\n  pull_request:\n    branches:\n      - develop\n    paths-ignore:\n      - '**.md'\n      - '.github/**'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build_debug_apk:\n    name: Build debug apk\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: assembleInternalDebug\n\n      - name: Obtain debug apk\n        if: always()\n        run: cp $(find . -regex '.*outputs/apk/.*internal-debug.apk') pr-ddg-debug.apk\n\n      - name: Upload debug apk\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: pr-ddg-debug\n          path: pr-ddg-debug.apk```"}
{"id": "63c497e4cbc73931bb18352f", "level": "level2", "llm_response": "```yml\n---\nname: binder-badge\non:\n  pull_request:\n", "answer": "```yaml name: binder-badge\non:\n  pull_request_target:\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: manics/action-binderbadge@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4990d33b087f6bde3ccdf", "level": "level2", "llm_response": "```yml\nname: Test C++\non:\n  branches:\n    -", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C++\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - '.github/workflows/test-lang-c\\+\\+.yml'\n    - 'lang/c\\+\\+/**'\n\ndefaults:\n  run:\n    working-directory: lang/c++\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt update && sudo apt-get install -qqy cppcheck libboost-all-dev libsnappy-dev cmake\n\n      - name: Clean\n        run: ./build.sh clean\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Release build\n        run: |\n          mkdir -p build\n          cd build\n          cmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release ..\n```"}
{"id": "63c49a65517fc08c1eee9b6d", "level": "level2", "llm_response": "```yml\nname: Compress images\non:\n  push:\n   ", "answer": "```yaml name: Compress images\n\non:\n  pull_request:\n    paths:\n      - '**.jpg'\n      - '**.png'\n      - '**.webp'\n\njobs:\n  build:\n    name: calibreapp/image-actions\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Compress Images\n        uses: calibreapp/image-actions@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e5933b087f6bde5f2bb", "level": "level2", "llm_response": "```yaml\nname: Docker Build TeamCity\ntrigger:\n  branches:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-05-26 12:00:50 +0100 (Thu, 26 May 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Dockerfiles\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Docker Build TeamCity\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - teamcity/Dockerfile\n      - .github/workflows/docker_build_teamcity.yaml\n  workflow_dispatch:\n  #schedule:\n  #  - cron: '0 2 * * *'\n\njobs:\n  docker_build:\n    name: Docker Build\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: |\n      github.repository_owner == 'HariSekhon' &&\n      (\n        github.event_name == 'schedule' ||\n        (\n          github.ref_type == 'branch' &&\n          ( github.ref_name == github.event.repository.default_branch || github.ref_name == 'docker' )\n        )\n      )\n    uses: HariSekhon/GitHub-Actions/.github/workflows/docker_build.yaml@master\n    with:\n      repo_tags: |\n        ghcr.io/harisekhon/teamcity:latest\n        harisekhon/teamcity:alpine\n      context: teamcity\n    secrets:\n      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n    permissions:\n      contents: read\n      packages: write\n```"}
{"id": "63c49ec1cbc73931bb1af7f3", "level": "level2", "llm_response": "```yml\nname: Aggregate sources and rebuild\n\non:\n  schedule:\n", "answer": "```yaml name: Aggregate sources and rebuild\n\non:\n  schedule:\n    # 19:42 UTC every Sunday\n    - cron: \"42 19 * * 0\"\n\n  # push:\n    # branches:\n      # - gh-pages\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: gh-pages\n          fetch-depth: 1\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r scripts/requirements.txt\n\n      - name: Aggregate and build\n        run: |\n          rm -rf src/aggregations\n          python scripts/build.py auto aggregate\n          python scripts/build.py auto\n\n      - name: Commit files\n        run: |\n          git config user.name 'GitHub Action'\n          git config user.email 'actions@github.com'\n          git add -u .\n          git commit -m \"cd: auto build at $(TZ=UTC date +'%F'T'%T'Z)\"\n          git push --force-with-lease\n```"}
{"id": "63c4975e1e33648075780971", "level": "level2", "llm_response": "```yml\nname: Build docker sample-extension-dotnet-minimalapi\n\n", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c498d933b087f6bde3b708", "level": "level2", "llm_response": "```yml\nname: No Response\n\non:\n  issues:\n    -", "answer": "```yaml name: No Response\n\n# **What it does**: Closes issues where the original author doesn't respond to a request for information.\n# **Why we have it**: To remove the need for maintainers to remember to check back on issues periodically to see if contributors have responded.\n# **Who does it impact**: Everyone that works on docs or docs-internal.\n\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ github.token }}\n          daysUntilClose: 14 # Number of days of inactivity before an Issue is closed for lack of response\n          responseRequiredLabel: \"Reporter Feedback\" # Label indicating that a response from the original author is required\n          closeComment: >\n            This issue has been automatically closed because there has been no response\n            to our request for more information. With only the\n            information that is currently in the issue, we don't have enough information\n            to take action. Please reach out if you have or find the answers we need so\n            that we can investigate further. See [this blog post on bug reports and the\n            importance of repro steps](https://www.lee-dohm.com/2015/01/04/writing-good-bug-reports/)\n            for more information about the kind of information that may be helpful.\n```"}
{"id": "63c49d67517fc08c1eefc9e1", "level": "level2", "llm_response": "```yaml\n---\nname: Sync Wiki\non:\n  push:\n    branches", "answer": "```yaml name: Sync Wiki\n\n# Ignored. To make it work, we would need a secret named GH_PERSONAL_ACCESS_TOKEN with a Github personal access token with \"repo\" authorization.\n# Inspired in: https://github.com/marketplace/actions/publish-to-github-wiki\n\non:\n  push:\n    branches-ignore:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Sync GitHub Wiki from Sources\n    steps:\n      - run: ./scripts/sync-wiki.sh\n        env:\n          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}\n        shell: bash\n        timeout-minutes: 5\n```"}
{"id": "63c49b9c6fc19abdf9cbda1a", "level": "level2", "llm_response": "```yml\nname: CI\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm i\n      - run: npm test\n```"}
{"id": "63c4985e1e3364807578700c", "level": "level2", "llm_response": "```yml\nname: Lint Commit Messages\non:\n  pull_request", "answer": "```yaml # Run commitlint on the commit messages in a pull request.\n\nname: Lint Commit Messages\n\non:\n  - pull_request\n\njobs:\n  commitlint:\n    uses: openedx/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c49e451e336480757ac7a0", "level": "level2", "llm_response": "```yml\nname: Documentation Generator\n\non:\n  push:\n    branches", "answer": "```yaml name: Documentation Generator\non:\n  push:\n    branches:\n      - \"*\"\n      - \"!docs\"\n    tags:\n      - \"*\"\njobs:\n  docs:\n    name: Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n\n      - name: Install dependencies\n        run: yarn --immutable\n\n      - name: Checkout docs branch\n        uses: actions/checkout@v3\n        with:\n          ref: \"docs\"\n          path: \"docs\"\n\n      - name: Generate documentation\n        run: yarn docs\n\n      - name: Move generated docs file\n        run: mv docs.json docs/${{ github.ref_name }}.json\n\n      - name: Commit and push\n        run: |\n          cd docs\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Docs build for ${{ github.ref_type }} ${{ github.ref_name }}: ${{ github.sha }}\"\n          git push\n```"}
{"id": "63c49ad8517fc08c1eeeca56", "level": "level2", "llm_response": "```yaml\n---\nname: dependabot-auto-merge\ndescription: Autom", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    \n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          \n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          \n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c4a0f16fc19abdf9cdf46c", "level": "level2", "llm_response": "```yml\nname: Check Lint\non:\n  pull_request:\n", "answer": "```yaml name: Check Lint\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  check-lint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install clang-format\n        run: |\n          sudo apt update\n          sudo apt install clang-format-10\n      - uses: actions/checkout@v3\n      - run: ./scripts/check-lint.sh\n        env:\n          CLANG_FORMAT_PATH: \"/usr/bin/clang-format-10\"\n```"}
{"id": "63c49df81842bc13d778dba8", "level": "level2", "llm_response": "```yml\n---\nname: Pull Request Required Labels\non:\n  pull", "answer": "```yaml #  https://github.com/mheap/github-action-required-labels\nname: Pull Request Required Labels\non:\n  pull_request:\n    types: [ opened, labeled, unlabeled, synchronize ]\njobs:\n  label:\n    if: github.event.pull_request.state == 'open'\n    runs-on: ubuntu-latest\n    name: Verify Pull Request has labels\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        with:\n          mode: minimum\n          count: 1\n          labels: \"breaking-change, feature, enhancement, bug, dependencies, documentation, housekeeping\"```"}
{"id": "63c49f50736e7f0ed8c6d7ce", "level": "level2", "llm_response": "```yml\nname: Conventional Commits\non:\n  branch:\n", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - master\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  commitsar:\n    name: Validate Conventional Commits\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Run commitsar\n        uses: docker://outillage/commitsar:0.11.2\n```"}
{"id": "63c49feeb008460c1df50a68", "level": "level2", "llm_response": "```yml\nname: Create Releasable Package Drop\n\non:\n", "answer": "```yaml name: Create Releasable Package Drop\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - release-*\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - uses: actions/setup-node@v3\r\n    - name: npm install and test\r\n      run: |\r\n        npm ci\r\n        npm test\r\n    - name: Adding playwright\r\n      run: npm install --no-save --no-package-lock playwright\r\n    - name: Validate the browser can import TypeScript\r\n      run: gulp test-browser-integration\r\n    - name: LKG, clean, and pack\r\n      run: |\r\n        gulp LKG\r\n        gulp clean\r\n        npm pack ./\r\n        mv typescript-*.tgz typescript.tgz\r\n    - name: Upload built tarfile\r\n      uses: actions/upload-artifact@v3\r\n      with:\r\n        name: tgz\r\n        path: typescript.tgz\r\n```"}
{"id": "63c4a1386fc19abdf9ce1169", "level": "level2", "llm_response": "```yml\nname: Codacy Security Scan\n\non:\n  branches:\n", "answer": "```yaml # This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow checks out code, performs a Codacy security scan\n# and integrates the results with the\n# GitHub Advanced Security code scanning feature.  For more information on\n# the Codacy security scan action usage and parameters, see\n# https://github.com/codacy/codacy-analysis-cli-action.\n# For more information on Codacy Analysis CLI in general, see\n# https://github.com/codacy/codacy-analysis-cli.\n\nname: Codacy Security Scan\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '17 14 * * 5'\n\npermissions:\n  contents: read\n\njobs:\n  codacy-security-scan:\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    name: Codacy Security Scan\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository to the GitHub Actions runner\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis\n      - name: Run Codacy Analysis CLI\n        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b\n        with:\n          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository\n          # You can also omit the token and run the tools that support default configurations\n          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}\n          verbose: true\n          output: results.sarif\n          format: sarif\n          # Adjust severity of non-security issues\n          gh-code-scanning-compat: true\n          # Force 0 exit code to allow SARIF file generation\n          # This will handover control about PR rejection to the GitHub side\n          max-allowed-issues: 2147483647\n\n      # Upload the SARIF file generated in the previous step\n      - name: Upload SARIF results file\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n```"}
{"id": "63c49eca517fc08c1ef05b75", "level": "level2", "llm_response": "```yml\nname: check-only\n\non:\n  pull_request:\n   ", "answer": "```yaml name: check-only\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  desktop-win:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore .\\WolvenKit\\WolvenKit.csproj\n    - name: Build\n      run: dotnet build .\\WolvenKit\\WolvenKit.csproj --no-restore\n\n  console-linux:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore ./WolvenKit.CLI/WolvenKit.CLI.csproj\n    - name: Build\n      run: dotnet build ./WolvenKit.CLI/WolvenKit.CLI.csproj --no-restore```"}
{"id": "63c497d3cbc73931bb182d2f", "level": "level2", "llm_response": "```yml\nname: Dependency Review\n\non:\n  pull_request:\n   ", "answer": "```yaml name: 'Dependency Review'\non: [ pull_request ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    continue-on-error: false\n    steps:\n      - name: 'Checkout Repository'\n        uses: actions/checkout@v3\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v2\n        with:\n          fail-on-severity: critical\n          # Representation of this list: https://www.eclipse.org/legal/licenses.php#\n          # Expressed with the help of the following IDs: https://spdx.org/licenses/\n          allow-licenses: >-\n            Adobe-Glyph, Apache-1.0, Apache-1.1, Apache-2.0, Artistic-2.0, BSD-2-Clause, BSD-3-Clause,\n            BSD-4-Clause, 0BSD, BSL-1.0, CDDL-1.0, CDDL-1.1, CPL-1.0, CC-BY-3.0, CC-BY-4.0, CC-BY-2.5,\n            CC-BY-SA-3.0, CC-BY-SA-4.0, CC0-1.0, EPL-1.0, EPL-2.0, FTL, GFDL-1.3-only, IPL-1.0, ISC,\n            MIT, MIT-0, MPL-1.1, MPL-2.0, NTP, OpenSSL, PHP-3.01, PostgreSQL, OFL-1.1, Unlicense,\n            Unicode-DFS-2015, Unicode-DFS-2016, Unicode-TOU, UPL-1.0, W3C-20150513, W3C-19980720, W3C,\n            WTFPL, X11, Zlib, ZPL-2.1\n```"}
{"id": "63c4a061cbc73931bb1ba068", "level": "level2", "llm_response": "```yaml\n---\nname: check-x-pack-heartbeat\n\non:\n  branches", "answer": "```yaml name: check-x-pack-heartbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-heartbeat.yml'\n      - 'x-pack/heartbeat/**'\n      - 'heartbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/heartbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      run: |\n        go install github.com/magefile/mage\n        make -C ${{ env.BEAT_MODULE }} check update\n        make check-no-changes\n```"}
{"id": "63c49d6eb008460c1df40ff3", "level": "level2", "llm_response": "```yml\n---\nname: frontend\non:\n  pull_request:\n   ", "answer": "```yaml name: frontend\n\non:\n  pull_request:\n\njobs:\n\n  frontend:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Node\n        uses: actions/setup-node@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n            node-version: '16.x'\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          yarn\n\n      - name: Lint and test Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn run test\n\n      - name: Store test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        uses: actions/upload-artifact@v3\n        with:\n          name: frontend_coverage\n          path: ./test/unit_test_coverage/clover.xml\n\n      - name: Build Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn build\n\n  coverage:\n    runs-on: ubuntu-latest\n    needs:\n      - frontend\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements/ci.txt\n\n      - name: Retrieve frontend coverage\n        uses: actions/download-artifact@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          name: frontend_coverage\n          path: frontend_coverage\n\n      - name: Check frontend test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          diff-cover frontend_coverage/clover.xml --compare-branch=origin/main --fail-under=100\n```"}
{"id": "63c49fae33b087f6bde67bc4", "level": "level2", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n\njobs:\n  verify_module:\n    name: Verify module\n    strategy:\n      matrix:\n        terraform: [1.1.9]\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - run: terraform fmt -recursive -check=true -write=false\n\n  verify_examples:\n    name: Verify examples\n    strategy:\n      fail-fast: false\n      matrix:\n        terraform: [1.0.11, latest]\n        example:\n          [\n            \"runner-default\",\n            \"runner-docker\",\n            \"runner-multi-region\",\n            \"runner-pre-registered\",\n            \"runner-public\",\n          ]\n    defaults:\n      run:\n        working-directory: examples/${{ matrix.example }}\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - if: contains(matrix.terraform, '1.0.')\n        run: terraform fmt -recursive -check=true -write=false\n      - run: terraform validate\n\n  docs:\n    # update docs after merge back to develop\n    if: github.event_name != 'pull_request' && contains('refs/heads/develop', github.ref)\n    name: Auto update terraform docs\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: CHeckout branch\n      uses: actions/checkout@v3\n\n    - name: Generate TF docs\n      uses: terraform-docs/gh-actions@v1.0.0\n      with:\n        find-dir: .\n        git-commit-message: \"docs: auto update terraform docs\"\n        git-push: true\n\n  tfsec:\n    name: tfsec PR commenter\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Clone repo\n        uses: actions/checkout@master\n      - name: tfsec\n        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0\n        with:\n          github_token: ${{ github.token }}\n\n  release:\n    if: github.event_name != 'pull_request' && contains('refs/heads/main', github.ref)\n    name: Release\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Get installation token\n        uses: npalm/action-app-token@v1.0.0\n        id: app-token\n        with:\n          appId: ${{ secrets.APP_ID }}\n          appPrivateKeyBase64: ${{ secrets.APP_PRIVATE_KEY_BASE64 }}\n          appInstallationType: repo\n          appInstallationValue: ${{ github.repository }}\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}\n        run: |\n          cp .release/* .\n          yarn \n          yarn release --repositoryUrl https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git\n```"}
{"id": "63c49df8517fc08c1ef0053c", "level": "level2", "llm_response": "```yml\n---\nname: Dependency Review\non: pull_request.event.pull", "answer": "```yaml name: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit\n\n      - name: 'Checkout Repository'\n        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@fd675ced9c17f1393071e1a2e685ab527e585a0c\n```"}
{"id": "63c49e6f1842bc13d7790c57", "level": "level2", "llm_response": "```yml\nname: Auto merge\non:\n  events:\n    -", "answer": "```yaml name: Auto merge\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Tests'\n\njobs:\n  merge-me:\n    name: Auto merge\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Auto merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2\n        with:\n          # Depending on branch protection rules, a  manually populated\n          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to\n          # a protected branch must be used.\n          #\n          # When using a custom token, it is recommended to leave the following\n          # comment for other developers to be aware of the reasoning behind it:\n          #\n          # This must be used as GitHub Actions token does not support pushing\n          # to protected branches.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PRESET: DEPENDABOT_MINOR\n```"}
{"id": "63c49728b008460c1df19228", "level": "level2", "llm_response": "```yml\nname: JOSS\non:\n  branch:\n    name", "answer": "```yaml name: JOSS\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"joss/**\"\n\njobs:\n  joss:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Generate .tex\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml --to=latex --output=paper.tex\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Generate .pdf\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Upload the generated files as an artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: joss\n          name: joss\n\n      - name: Deploy\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: peaceiris/actions-gh-pages@v3.8.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./joss\n          force_orphan: true\n          publish_branch: joss-compiled\n```"}
{"id": "63c4989e6fc19abdf9caa598", "level": "level2", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  nodejs:\n    # Documentation: https://github.com/zakodium/workflows#nodejs-ci\n    uses: zakodium/workflows/.github/workflows/nodejs.yml@nodejs-v1\n    with:\n      node-version-matrix: '[12, 14, 16, 18]'\n```"}
{"id": "63c49ce633b087f6bde55c90", "level": "level2", "llm_response": "```yml\n---\nname: Lint and Test\n\non:\n  push", "answer": "```yaml name: Lint and Test\n\non: [push]\n\njobs:\n  lint_and_test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: Install dependencies\n      run: make install\n    - name: Lint\n      run: make lint\n    - name: Test\n      run: make test\n```"}
{"id": "63c49c3d1e3364807579f946", "level": "level2", "llm_response": "```yml\n---\nname: notify-release\ndescription: Notification workflow for release", "answer": "```yaml name: notify-release\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    - cron: '30 8 * * *'\r\njobs:\r\n  setup:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Notify release\r\n        uses: nearform/github-action-notify-release@v1\r\n        with:\r\n          github-token: ${{ secrets.GITHUB_TOKEN }}\r\n```"}
{"id": "63c4a096736e7f0ed8c75ab0", "level": "level2", "llm_response": "```yaml\nname: test-get-target-config\n\non:\n  pull_request:\n", "answer": "```yaml name: test-get-target-config\n\non:\n  pull_request:\n    branches:\n    - main\n  push:\n    branches:\n    - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: aws/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_assume_role_arn }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_region }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n  test-gcp:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: gcp/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n```"}
{"id": "63c4975e6fc19abdf9ca2240", "level": "level2", "llm_response": "```yml\n---\nname: Automatic Rebase\non:\n  branches:\n", "answer": "```yaml on:\n  issue_comment:\n    types: [created]\nname: Automatic Rebase\njobs:\n  rebase:\n    name: Rebase\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/rebase')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n        with:\n          fetch-depth: 0\n      - name: Automatic Rebase\n        uses: cirrus-actions/rebase@1.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e301899db5886504fda", "level": "level2", "llm_response": "```yml\n---\nname: CodeQL\non: push\njobs:\n", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\n#on:\n#  push:\n#    branches: [ master ]\n#  pull_request:\n#    # The branches below must be a subset of the branches above\n#    branches: [ master ]\n#  schedule:\n#    - cron: '30 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: true\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 6.0.100\n\n    - name: Build\n      run: dotnet build\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```"}
{"id": "63c4a09333b087f6bde6d774", "level": "level2", "llm_response": "```yml\n---\nname: Nix\n\non:\n  branches:\n   ", "answer": "```yaml name: Nix\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Nix Flake - Linux\n    permissions:\n      contents: read\n    steps:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install\n          install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Clone project\n        uses: actions/checkout@v3\n      - name: Build\n        # \"nix build\" builds with full optimization and includes a profiling\n        # build, so just the build of xmonad-contrib itself takes 3 minutes.\n        # As a workaround, we invoke cabal manually here.\n        run: nix develop -c cabal v2-build -O0 -j\n```"}
{"id": "63c49cf21899db58864fd39b", "level": "level2", "llm_response": "```yml\nname: Cache libs (dist)\n\non:\n  push:\n", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n      - 'epic/**'\n      - 'release/**'\nname: Cache libs (dist)\njobs:\n  cacheBuildedLibs:\n    name: Builded libs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Cache builded libs\n        uses: ./.github/cache-builded-libs\n```"}
{"id": "63c4a1266fc19abdf9ce0a0e", "level": "level2", "llm_response": "```yml\nname: Debug on Windows\non:\n  branches:\n   ", "answer": "```yaml on: workflow_dispatch\n\nname: Debug on Windows\njobs:\n    debug-windows:\n        runs-on: windows-latest\n        strategy:\n            fail-fast: false\n            matrix:\n                language: [\"cpp\"]\n\n        steps:\n            - name: Setup NuGet.exe for use with actions\n              uses: NuGet/setup-nuget@v1.0.5\n\n            - name: Checkout\n              uses: actions/checkout@v2.3.4\n              with:\n                  submodules: recursive\n\n            - name: Install OpenSSL\n              uses: crazy-max/ghaction-chocolatey@v1.6.0\n              with:\n                  args: install openssl -y\n\n            - name: Add NuGet Remote\n              run: \"nuget.exe sources Add -Name NuGetRemote -Source https://api.nuget.org/v3/index.json\"\n\n            - name: Setup tmate session\n              uses: mxschmitt/action-tmate@v3\n              with:\n                limit-access-to-actor: true\n              continue-on-error: true```"}
{"id": "63c4986cb008460c1df210dd", "level": "level2", "llm_response": "```yml\nname: Large Repo Benchmark\n\non:\n  branches:\n   ", "answer": "```yaml name: Large Repo Benchmark\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [Release]\n    types:\n      - completed\n\njobs:\n  build:\n    name: Run Benchmarks\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-node\n      - uses: ./.github/actions/setup-go\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Build\n        run: cd cli && make turbo\n\n      - name: Download previous benchmark results\n        # continue on error so that we handle the bootstrap case where there is no previous data\n        continue-on-error: true\n        run: mkdir -p raw-data/${{ runner.os }} && curl -f -o raw-data/${{ runner.os }}/benchmark-data.json https://raw.githubusercontent.com/vercel/turborepo/gh-pages/${{ runner.os }}/benchmark-data.json\n\n      - name: Run benchmarks\n        run: cd benchmark && pnpm benchmark\n\n      - name: Save to Tinybird\n        if: github.ref == 'refs/heads/main'\n        run: |\n          curl \\\n            -i \\\n            -F \"ndjson=@./benchmark/tinybird.ndjson\" \\\n            -X POST \\\n            -H 'Authorization: Bearer ${{ secrets.TINYBIRD_TOKEN }}' \\\n            'https://api.us-east.tinybird.co/v0/datasources?format=ndjson&name=turbo_benchmarks&mode=append'\n\n      - name: Store Benchmark Result\n        uses: benchmark-action/github-action-benchmark@v1\n        with:\n          name: \"${{ runner.os }} Benchmark\"\n          # What benchmark tool the output is formatted as\n          tool: \"customSmallerIsBetter\"\n          output-file-path: ./benchmark/benchmarks.json\n          external-data-json-path: ./raw-data/${{ runner.os }}/benchmark-data.json\n          auto-push: false\n          # GitHub API token to make a commit\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          skip-fetch-gh-pages: true\n\n      - name: Deploy\n        if: github.ref == 'refs/heads/main'\n        uses: JamesIves/github-pages-deploy-action@v4.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          folder: raw-data\n          clean: false\n          single-commit: false\n          git-config-email: github-bot@turborepo.org\n          repository-name: vercel/turborepo\n          commit-message: \"Update\"\n```"}
{"id": "63c4a04c1e336480757b949e", "level": "level2", "llm_response": "```yml\nname: Tests: pretest/posttest\non:\n ", "answer": "```yaml name: 'Tests: pretest/posttest'\n\non: [pull_request, push]\n\njobs:\n  tests:\n    uses: ljharb/actions/.github/workflows/pretest.yml@main\n```"}
{"id": "63c49dc61842bc13d778c79d", "level": "level2", "llm_response": "```yml\n---\nname: Node.js Package\n\non:\n  release:\n", "answer": "```yaml # This workflow will run tests using node and then publish a package to GitHub Packages when a release is created\n# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages\n\nname: Node.js Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: 'npm'\n      - run: npm ci\n\n      - name: Determine dist-tag\n        id: dist_tag\n        uses: actions/github-script@v6\n        with:\n          result-encoding: string\n          script: |\n            const semver = require(\"semver\");\n            const version = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version;\n            const parsed = semver.parse(version);\n            return parsed.prerelease.length ? \"--tag next\" : \"\";\n\n      - name: Publish to NPM\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n          TAG: ${{ steps.dist_tag.outputs.result }}\n        run: npm publish $TAG\n```"}
{"id": "63c498f31e3364807578ae91", "level": "level2", "llm_response": "```yml\n---\nname: close stale issues/PRs\non:\n", "answer": "```yaml name: 'close stale issues/PRs'\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@87c2b794b9b47a9bec68ae03c01aeb572ffebdb1\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label: \"\"\n          close-pr-message: \"\"\n```"}
{"id": "63c49ce96fc19abdf9cc5f23", "level": "level2", "llm_response": "```yml\n---\nname: Builds\non:\n  branches:\n    -", "answer": "```yaml name: Builds\non:\n  - push\n  - pull_request\n\npermissions:\n  contents: read\n\njobs:\n  doc:\n    name: Documentation (Sphinx)\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build docs\n        run: make doc\n\n      - name: Print warnings\n        run: if [ -s .sphinx/warnings.txt ]; then cat .sphinx/warnings.txt; exit 1; fi\n\n      - name: Upload artifacts\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: documentation\n          path: doc/html\n\n  static:\n    name: Static binaries\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n          - windows-latest\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create build directory\n        run: |\n          mkdir bin\n\n      - name: Build static lxc\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxc\n\n      - name: Build static lxd-migrate\n        if: runner.os == 'Linux'\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxd-migrate\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        continue-on-error: true\n        with:\n          name: ${{ runner.os }}\n          path: bin/\n```"}
{"id": "63c494d87843b61269a03c6b", "level": "level2", "llm_response": "```yml\n---\nname: Check Pull Request\non:\n  pull_request", "answer": "```yaml name: Check Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  check-title:\n    name: Check Title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Semantic pull request\n        uses: amannn/action-semantic-pull-request@v5.0.1\n        with:\n          validateSingleCommit: true\n          ignoreLabels: revert\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4972bb008460c1df19384", "level": "level2", "llm_response": "```yaml\n---\nname: Publish MacOS \u2014 x64\non:\n  branch", "answer": "```yaml name: Publish MacOS \u2014 x64\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    runs-on: macos-11\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install Packages\n        run: yarn install\n      - name: Rebuild Native Modules\n        run: npx electron-rebuild\n      - name: Get Urbit Binaries\n        run: ./get-urbit.sh\n      - name: Add MacOS certs\n        run: chmod +x add-osx-cert.sh && ./add-osx-cert.sh\n        env:\n          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}\n          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n      - name: Build & Publish\n        run: |\n          yarn run publish --arch x64\n        env:\n          APPLE_ID: ${{secrets.APPLE_ID}}\n          APPLE_ID_PASSWORD: ${{secrets.APPLE_ID_PASSWORD}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}```"}
{"id": "63c49df8517fc08c1ef0053b", "level": "level2", "llm_response": "```yml\nname: CodeQL\non:\n  branches:\n    main", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  schedule:\n    - cron: '0 7 * * 1' # Monday at 7:00 AM\n\npermissions: read-all\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n\n    steps:\n    - name: Harden Runner\n      uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n      with:\n        egress-policy: audit\n\n    - name: Checkout repository\n      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@807578363a7869ca324a79039e6db9c843e0e100\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@807578363a7869ca324a79039e6db9c843e0e100\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@807578363a7869ca324a79039e6db9c843e0e100\n```"}
{"id": "63c499856fc19abdf9cb0415", "level": "level2", "llm_response": "```yml\n---\nname: make all\non:\n  branches:\n   ", "answer": "```yaml on: push\nname: make all\njobs:\n  makeall:\n    name: make all\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make all\n        uses: docker://golang:latest\n        with:\n          entrypoint: bash\n          args: -c \"go get honnef.co/go/tools/cmd/staticcheck && go get golang.org/x/lint/golint && git checkout . && make all\"\n```"}
{"id": "63c49ade517fc08c1eeecd16", "level": "level2", "llm_response": "```yml\n---\nname: Test installation and doccano commands\non:\n", "answer": "```yaml name: Test installation and doccano commands\n\non:\n  schedule:\n    - cron: \"15 22 * * *\"\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    steps:\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Enabling JSON1 extension on SQLite\n      if: ${{ startsWith(matrix.os, 'windows') && matrix.python-version == '3.8' }}\n      shell: bash\n      run: |\n        export VERSION=`python -V | cut -f2 -d \" \"`\n        curl -LO https://www.sqlite.org/2022/sqlite-dll-win64-x64-3390300.zip\n        unzip sqlite-dll-win64-x64-3390300.zip\n        mv sqlite3.dll /c/hostedtoolcache/windows/Python/$VERSION/x64/DLLs/\n    - name: Test installation\n      run: pip install doccano\n    - name: Test doccano init command\n      run: doccano init\n    - name: Test doccano createuser command\n      run: doccano createuser --username admin --password pass\n```"}
{"id": "63c49ba0b008460c1df358ce", "level": "level2", "llm_response": "```yml\nname: Deploy demo to Fly\n\non:\n  event:\n", "answer": "```yaml name: Deploy demo to Fly\non:\n  workflow_run:\n    workflows: [Cookie cutter test]\n    branches: [main]\n    types:\n      - completed\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      if: ${{ github.event.workflow_run.conclusion == 'success' }}\n      timeout-minutes: 6\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - name: Install dependencies\n          run: |\n            apk update && apk add py3-pip python3\n            pip3 install cookiecutter\n        - run: bash scripts/deploy-demo-project-to-fly.sh\n```"}
{"id": "63c495c57843b61269a09c8f", "level": "level2", "llm_response": "```yml\n---\nname: CI and CD\n\non:\n  push:\n", "answer": "```yaml name: CI and CD\n\non:\n  push:\n    branches:\n    - master\n  workflow_dispatch:\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run a one-line script\n      run: echo Hello, world!\n    - name: Start environment\n      run: make start-containers\n    - name: Run tests\n      run: make params=-T tests\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    needs: tests\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run Ansible playbook\n      uses: dawidd6/action-ansible-playbook@v2\n      with:\n        playbook: ./infrastructure/playbooks/deploy.yml\n        directory: ./\n        key: ${{secrets.SSH_KEY}}\n        vault_password: ${{secrets.VAULT_PASSWORD}}\n        options: |\n          --inventory infrastructure/playbooks/hosts\n      env:\n        ANSIBLE_HOST_KEY_CHECKING: False\n```"}
{"id": "63c4966d1e3364807577a9d1", "level": "level2", "llm_response": "```yaml\nname: Compile test\n\non:\n  branches:\n    - main", "answer": "```yaml name: Compile test\n\non:\n  push:\n    branches:\n      - \"**\"\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  compile:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048 # tag=v3\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm install\n    - run: npm run build```"}
{"id": "63c497691899db58864d95cc", "level": "level2", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n    paths-ignore:\n      - '*/spec/fixtures/**'\n      - 'CHANGELOG.md'\n      - 'common/lib/dependabot/version.rb'\n  schedule:\n    - cron: '41 4 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'schedule' || github.repository == 'dependabot/dependabot-core' }}\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go', 'javascript', 'python', 'ruby' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49a5e6fc19abdf9cb5a11", "level": "level2", "llm_response": "```yml\nname: npm-update-pf\n\non:\n  schedule:\n", "answer": "```yaml name: npm-update-pf\non:\n  schedule:\n    - cron: '0 3 * * 1'\n  # can be run manually on https://github.com/cockpit-project/cockpit/actions\n  workflow_dispatch:\njobs:\n  npm-update:\n    environment: npm-update\n    permissions:\n      pull-requests: write\n      contents: write\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v3\n\n      - name: Run npm-update bot\n        run: |\n          tools/make-bots\n          git config --global user.name \"GitHub Workflow\"\n          git config --global user.email \"cockpituous@cockpit-project.org\"\n          mkdir -p ~/.config/cockpit-dev\n          echo ${{ github.token }} >> ~/.config/cockpit-dev/github-token\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}'\n          bots/npm-update @patternfly >&2\n          ssh-add -D\n          ssh-agent -k\n\n      - name: Force push the change to trigger testing workflows\n        run: |\n          # Don't force-push if no branch was created\n          test \"$(git symbolic-ref HEAD)\" = '${{ github.ref }}' && exit\n\n          sleep 1 # make sure the timestamp changes\n          git commit --amend --no-edit\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.COCKPIT_DEPLOY_KEY }}'\n          git push --force 'git@github.com:${{ github.repository }}' HEAD\n          ssh-add -D\n          ssh-agent -k\n```"}
{"id": "63c49dc8517fc08c1eeff286", "level": "level2", "llm_response": "```yml\n---\nname: Build & Test\n\non:\n  pull_request", "answer": "```yaml name: Build & Test\n\non:\n  push: {}\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build-and-test:\n    name: Build & Test\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ocaml-compiler:\n          - 4.11.0\n          - 4.10.1\n          - 4.09.1\n          - 4.08.1\n        os:\n          - ubuntu-latest\n          - macOS-latest\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      # Cancel queued workflows from earlier commits in this branch\n      - uses: fkirc/skip-duplicate-actions@master\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Retrieve opam cache\n        uses: actions/cache@v3\n        id: cache-opam\n        with:\n          path: ~/.opam\n          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-${{ hashFiles('*.opam') }}\n          restore-keys: |\n            v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-\n\n      - name: Use OCaml ${{ matrix.ocaml-compiler }}\n        uses: ocaml/setup-ocaml@v2\n        with:\n          ocaml-compiler: ${{ matrix.ocaml-compiler }}\n\n      - name: Install dependencies\n        run: opam install --deps-only --with-test .\n\n      - name: Build\n        run: opam exec -- make\n\n      - name: Test\n        run: opam exec -- make all-test\n\n      - name: Check whitespaces\n        run: opam exec -- ./LINT\n```"}
{"id": "63c4a1a433b087f6bde73a98", "level": "level2", "llm_response": "```yml\n---\nname: Build Site\non:\n  branch: main", "answer": "```yaml name: Build Site\non:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Install deps\n        run: |\n          npm install postcss-cli\n          npm install autoprefixer\n          sudo -E make docs-deps\n      - name: Build pages\n        run: |\n           make docs-build\n           ls -liah public/```"}
{"id": "63c5aec46b748c7b1fadfc79", "level": "level2", "llm_response": "```yml\nname: Humble Semi-Binary Build - testing\n\non", "answer": "```yaml name: Humble Semi-Binary Build - testing\n# description: 'Build & test that compiles the main dependencies from source.'\n\non:\n  workflow_dispatch:\n    branches:\n      - humble\n  pull_request:\n    branches:\n      - humble\n  push:\n    branches:\n      - humble\n  schedule:\n    # Run every morning to detect flakiness and broken dependencies\n    - cron: '33 1 * * *'\n\njobs:\n  semi_binary:\n    uses: ./.github/workflows/reusable-industrial-ci-with-cache.yml\n    with:\n      ros_distro: humble\n      ros_repo: testing\n      upstream_workspace: ros2_control.humble.repos\n      ref_for_scheduled_build: humble\n```"}
{"id": "63c49f6233b087f6bde65d6f", "level": "level2", "llm_response": "```yml\n---\nname: HealthChecks MongoDb CI\n\non:\n ", "answer": "```yaml name: HealthChecks MongoDb CI\r\n\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n    branches: [ master ]\r\n    paths:\r\n      - src/HealthChecks.MongoDb/**\r\n      - test/HealthChecks.MongoDb.Tests/**\r\n      - .github/workflows/healthchecks_mongodb_ci.yml\r\n      - Directory.Build.props\r\n      - Directory.Build.targets\r\n    tags-ignore:\r\n      - release-*\r\n  pull_request:\r\n    branches: [ master ]\r\n    paths:\r\n    - src/HealthChecks.MongoDb/**\r\n    - test/HealthChecks.MongoDb.Tests/**\r\n    - .github/workflows/healthchecks_mongodb_ci.yml\r\n    - Directory.Build.props\r\n    - Directory.Build.targets\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    services:\r\n      mongo:\r\n        image: mongo\r\n        ports:\r\n          - 27017:27017\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: |\r\n        dotnet restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Check formatting\r\n      run: |\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1) &&\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\r\n    - name: Build\r\n      run: |\r\n        dotnet build --no-restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet build --no-restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Test\r\n      run: dotnet test --no-restore --no-build ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n```"}
{"id": "63c49b6533b087f6bde4bd34", "level": "level2", "llm_response": "```yml\n---\nname: Auto approve\non:\n  pull_request:\n", "answer": "```yaml name: Auto approve\n\non: [pull_request_target]\n\njobs:\n  auto-approve:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hmarr/auto-approve-action@v2\n      if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"```"}
{"id": "63c49e9a33b087f6bde60c8f", "level": "level2", "llm_response": "```yml\nname: package-macos-anaconda\n\non:\n ", "answer": "```yaml name: package-macos-anaconda\n\non:\n  release:\n    types: [created]\n\njobs:\n  package:\n\n    runs-on: macos-latest\n\n    steps:\n\n    - name: fetch MacOSX 10.11 SDK\n      run: curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/MacOSX10.11.sdk/MacOSX10.11.sdk.tar.xz | sudo tar xf - -C /opt/\n\n    - name: install conda-build # and anaconda-client\n      run: sudo $CONDA/bin/conda install -y conda-build # anaconda-client\n\n    - name: fetch recipe\n      run: |\n        git clone https://github.com/MRtrix3/conda-build.git\n        mv conda-build/* .\n        { echo \"CONDA_BUILD_SYSROOT:\"; echo \"  - /opt/MacOSX10.11.sdk        # [osx]\"; } > conda_build_config.yaml\n\n    - name: build package\n      run: sudo CONDA=\"$CONDA\" ./run.sh ${GITHUB_REF#refs/*/} ${GITHUB_REPOSITORY%/*} conda-macos\n\n#    - name: upload package\n#      run: $CONDA/bin/anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u MRtrix3 $(sudo $CONDA/bin/conda build conda-build/ --output)\n\n    - name: Upload package to GitHub Release\n      uses: AButler/upload-release-assets@v2.0\n      with:\n        files: '*.tar.bz2'\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n\n```"}
{"id": "63c49a6f6fc19abdf9cb61cd", "level": "level2", "llm_response": "```yml\n---\nname: Prepare Release Add-on\non: push\n", "answer": "```yaml name: Prepare Release Add-on\n\non:\n  workflow_dispatch:\n\njobs:\n  prepare-release:\n    name: Prepare Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Prepare Release and Create Pull Request\n      env:\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n      run: ./gradlew createPullRequestRelease\n```"}
{"id": "63c49ef31842bc13d779415a", "level": "level2", "llm_response": "```yaml\nname: Pull request automation\n\non:\n  pull_request:\n   ", "answer": "```yaml # This file is maintained in https://github.com/WeblateOrg/meta/\n\nname: Pull request automation\n\non:\n  pull_request_target:\n    types: opened\n\npermissions:\n  contents: read\n\njobs:\n  weblate_automerge:\n    permissions:\n      pull-requests: write # for actions-ecosystem/action-add-labels to add label\n    runs-on: ubuntu-20.04\n    name: Weblate automerge\n    if: ${{ github.actor == 'weblate' || github.actor == 'pre-commit-ci[bot]' }}\n    steps:\n    - uses: actions-ecosystem/action-add-labels@v1.1.3\n      with:\n        labels: automerge\n```"}
{"id": "63c49779cbc73931bb180a0e", "level": "level2", "llm_response": "```yml\n---\nname: Archs\non:\n  push:\n   ", "answer": "```yaml name: Archs\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    name: Build on ${{ matrix.arch }}\n\n    strategy:\n      matrix:\n        include:\n          - arch: armv7\n            distro: ubuntu20.04\n          - arch: aarch64\n            distro: ubuntu20.04\n          - arch: ppc64le\n            distro: ubuntu20.04\n          - arch: s390x\n            distro: ubuntu20.04\n  \n    steps:\n    - uses: actions/checkout@v2.4.0\n    - uses: uraimo/run-on-arch-action@v2.1.1\n      name: Build\n      id: build\n      with:\n        arch: ${{ matrix.arch }}\n        distro: ${{ matrix.distro }}\n        install: |\n          apt-get update -y\n          apt-get install -y apache2-dev libcjose-dev libssl-dev check pkg-config\n          apt-get install -y libjansson-dev libcurl4-openssl-dev libhiredis-dev libpcre2-dev\n        setup: |\n          mkdir -p \"${PWD}/logs\"\n        dockerRunArgs: |\n          --volume \"${PWD}/logs:/logs\"\n        env: |\n          logfilename: test-suite-${{ matrix.distro }}-${{ matrix.arch }}.log\n        run: |\n          ./autogen.sh\n          ./configure\n          make check\n          cp test-suite.log \"/logs/${logfilename}\"\n          echo \"Copied test-suite.log to /logs/${logfilename}\"\n          \n    - name: Results\n      run: |\n        cat ${PWD}/logs/*.log\n```"}
{"id": "63c4a11c1899db5886517d65", "level": "level2", "llm_response": "```yaml\n---\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49adb1899db58864f007e", "level": "level2", "llm_response": "```yml\nname: TLS protocol scan\non:\n  push:\n   ", "answer": "```yaml name: \"TLS protocol scan\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n\npermissions: read-all\n\njobs:\n  tls-check:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [linux]\n        arch: [amd64]\n    name: TLS check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Install dependencies\n        run: |\n          cd $GITHUB_WORKSPACE\n          sudo apt-get update\n          sudo apt-get install -y apache2-utils openssl\n          mkdir -p test/data\n          cd test/data\n          ../scripts/gen_certs.sh\n          htpasswd -bBn test test123 > htpasswd\n      - name: Check for TLS settings\n        continue-on-error: true\n        run: |\n          cd $GITHUB_WORKSPACE\n          make OS=$OS ARCH=$ARCH binary\n          bin/zot-$OS-$ARCH serve examples/config-tls.json &\n          sleep 5\n          curl -kv --tls-max 1.0 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.0 detected\"; exit 1; fi\n          curl -kv --tls-max 1.1 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.1 detected\"; exit 1; fi\n          curl -kv --tls-max 1.2 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -ne 0 ]]; then echo \"TLSv1.2 missing\"; exit 1; fi\n        env:\n          OS: ${{ matrix.os }}\n          ARCH: ${{ matrix.arch }}\n```"}
{"id": "63c497711e33648075781160", "level": "level2", "llm_response": "```yaml\n---\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n  pull_request:\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n\njobs:\n  publish:\n    name: Publish to MavenLocal\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: publishToMavenLocal\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: app:assembleDebug\n```"}
{"id": "63c4a03a1899db588651233d", "level": "level2", "llm_response": "```yml\n---\nname: CodeQL\non:\n  push:\n   ", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n         languages: ${{ matrix.language }}\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a19d6fc19abdf9ce3478", "level": "level2", "llm_response": "```yml\nname: depaware\non:\n  push:\n    branches", "answer": "```yaml name: depaware\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n      - 'release-branch/*'\n\nconcurrency:\n  group: ${{ github.workflow }}-$${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: go.mod\n\n    - name: depaware\n      run: go run github.com/tailscale/depaware --check\n        tailscale.com/cmd/tailscaled\n        tailscale.com/cmd/tailscale\n        tailscale.com/cmd/derper\n```"}
{"id": "63c49d2133b087f6bde57611", "level": "level2", "llm_response": "```yml\n---\nname: Repository Dispatch Triggered\non:\n  event", "answer": "```yaml name: Repository Dispatch Triggered\n\non: [repository_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Repository Dispatch Triggered\n        if: github.event.action == 'event-demo'\n        run: |\n          echo \"Workflow triggered successfully by repository dispatch action!\"```"}
{"id": "63c49d231899db58864fe6c8", "level": "level2", "llm_response": "```yml\nname: docs\non:\n  push:\n    branches:\n", "answer": "```yaml name: docs\n\non:\n  push:\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    branches:\n      - develop\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    if: github.repository == 'theforeman/foreman-ansible-modules'\n    steps:\n      - uses: actions/checkout@v3\n      - name: configure git\n        run: |\n          git config user.name \"${GITHUB_ACTOR}\"\n          git config user.email \"${GITHUB_ACTOR}@bots.github.com\"\n          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.8\"\n      - name: Install dependencies\n        run: make doc-setup\n      - name: Build docs\n        run: make doc\n      - name: commit docs\n        run: |\n          git checkout gh-pages\n          rm -rf $(basename ${GITHUB_REF})\n          mv docs/_build/html $(basename ${GITHUB_REF})\n          ln --force --no-dereference --symbolic  $(dirname v*/index.html | sort --version-sort --reverse | head -n1) latest\n          git show origin/develop:docs/_gh_include/header.inc > index.html\n          (echo develop; echo latest; dirname v*/index.html | sort --version-sort --reverse) | xargs -I@@ -n1 echo '<div class=\"col-md-4 center\"><a href=\"@@/\" class=\"btn-doc btn\"><i class=\"fa fa-newspaper-o\"></i><p>@@</p></a></div>' >> index.html\n          git show origin/develop:docs/_gh_include/footer.inc >> index.html\n          git add $(basename ${GITHUB_REF}) latest index.html\n          git commit -m \"update docs for $(basename ${GITHUB_REF})\" || true\n      - name: push docs\n        run: git push origin gh-pages\n```"}
{"id": "63c4a06bcbc73931bb1ba455", "level": "level2", "llm_response": "```yml\nname: Windows GPU CI Pipeline\n\non:\n  branches:\n", "answer": "```yaml # Don't edit this file manully.\n# Run generate-skip-doc-change.py to generate it.\n\nname: Windows GPU CI Pipeline\non:\n  pull_request:\n    paths:\n      - docs/**\n      - README.md\n      - CONTRIBUTING.md\n      - BUILD.md\n\njobs:\n  job1:\n    name: cuda build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job2:\n    name: dml build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job3:\n    name: training build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job4:\n    name: kernelDocumentation build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n```"}
{"id": "63c496df1e3364807577d7a8", "level": "level2", "llm_response": "```yml\nname: sast\n\non:\n  push:\n    branches", "answer": "```yaml name: sast\n\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n  pull_request:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      security-events: write\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'javascript' ]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0e1517fc08c1ef127c9", "level": "level2", "llm_response": "```yml\nname: Send publish metrics to BigQuery\non:\n ", "answer": "```yaml name: Send publish metrics to bigquery\non:\n  release:\n    types: published\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.0\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_BQ_METRICS_KEY }}\n          export_default_credentials: true\n      - run: 'jq -c ''.release |\n             {\n               package_name: .name | split(\" \")[0],\n               name,\n               tag_name,\n               version: .tag_name | split(\"-v\")[1],\n               html_url,\n               target_commitish,\n               created_at,\n               published_at,\n               draft,\n               prerelease\n             }'' $GITHUB_EVENT_PATH > releases.json'\n      - run: bq load --source_format=NEWLINE_DELIMITED_JSON metrics.releases releases.json\n```"}
{"id": "63c49d796fc19abdf9cc9892", "level": "level2", "llm_response": "```yml\n---\nname: Deploy App to Staging\non:\n ", "answer": "```yaml name: Deploy App to Staging\non:\n  workflow_dispatch:\n    inputs:\n      # commit hash (for frontend deploy to fleek)\n      commit:\n        description: \"Branch/Commit ref\"\n        default: \"origin/main\"\n        type: string\njobs:\n  deploy-app:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Checkout staging-app\n        run: |\n          git fetch\n          git checkout -b staging-app origin/staging-app\n          git reset --hard ${{ github.event.inputs.commit }}\n          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/gitcoinco/passport.git\n          git push origin staging-app -f\n```"}
{"id": "63c49e4b1e336480757ac9aa", "level": "level2", "llm_response": "```yml\nname: amd64 Windows Java\non:\n  push:\n", "answer": "```yaml name: amd64 Windows Java\n\non: [push, pull_request]\n\njobs:\n  # Building using the github runner environement directly.\n  visual-studio:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Check cmake\n      run: cmake --version\n    - name: Install SWIG 4.0.2\n      run: |\n        (New-Object System.Net.WebClient).DownloadFile(\"http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip\",\"swigwin-4.0.2.zip\");\n        Expand-Archive .\\swigwin-4.0.2.zip .;\n        echo \"$((Get-Item .).FullName)/swigwin-4.0.2\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n    - name: Check swig\n      run: swig -version\n    - name: Check mvn\n      run: mvn.cmd --version\n    - name: Configure\n      run: cmake -S. -Bbuild -G \"Visual Studio 17 2022\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_JAVA=ON -DSKIP_GPG=ON\n    - name: Build\n      run: cmake --build build --config Release --target ALL_BUILD -- /verbosity:normal /maxcpucount\n    - name: Test\n      run: cmake --build build --config Release --target RUN_TESTS -- /verbosity:normal /maxcpucount\n    - name: Install\n      run: cmake --build build --config Release --target INSTALL -- /verbosity:normal /maxcpucount\n```"}
{"id": "63c497d3cbc73931bb182d46", "level": "level2", "llm_response": "```yml\n---\nname: Build\non:\n  push:\n    branches", "answer": "```yaml name: Build\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ruby: [ '2.7.6', '3.0.4', '3.1.2' ] #, 'jruby-head' ]\n    steps:\n      - name: Setup Ruby, JRuby and TruffleRuby\n        uses: ruby/setup-ruby@v1.118.0\n        with:\n          ruby-version: ${{ matrix.ruby }}\n      - uses: actions/checkout@v3   \n      - name: Install dependecies\n        run: bundle install\n      - name: Run Tests\n        run: ./run_tests.sh\n     \n  auto-merge:\n    needs: run-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          gh pr merge --auto --rebase \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}} \n```"}
{"id": "63c49fb91899db588650eeb3", "level": "level2", "llm_response": "```yml\n---\nname: Release Pull Request Automation\non:\n  branch", "answer": "```yaml name: Release Pull Request Automation\n\n# Controls when the action will run. Triggers the workflow on create branch or tag\n# events but only acts on branch create.\non:\n    create:\njobs:\n    release-pull-request-automation:\n        if: ${{ github.event.ref_type == 'branch' && contains( github.ref, 'release/' ) }}\n        env:\n            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n        runs-on: ubuntu-latest\n        steps:\n            - uses: act10ns/slack@v1\n              with:\n                  status: starting\n              if: ${{ always() }}\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Create changeset for pull request\n              run: |\n                  git config user.name github-actions\n                  git config user.email github-actions@github.com\n                  git commit -m 'Empty commit for release pull request' --allow-empty\n                  git push\n            - name: Create Release Pull Request\n              uses: woocommerce/automations@v1\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n                  automations: release\n            - uses: act10ns/slack@v1\n              with:\n                  status: ${{ job.status }}\n                  steps: ${{ toJson(steps) }}\n              if: ${{ always() }}\n```"}
{"id": "63c49e83517fc08c1ef03f35", "level": "level2", "llm_response": "```yml\nname: test-flax\non:\n  branch:\n   ", "answer": "```yaml name: test-flax\n\non:\n  push:\n    branches:\n      - 'integration'\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=jammy\"\n            \"MACHINARIS_STREAM=test\"\n            \"CHIADOG_BRANCH=dev\"\n            \"FLAX_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n```"}
{"id": "63c49f4a1842bc13d779622d", "level": "level2", "llm_response": "```yaml\nname: New Release - Update other projects\non: [push", "answer": "```yaml name: New Release - Update other projects\non:\n  repository_dispatch:\n    types: [http4k-release]\njobs:\n  create-upgrade-branches:\n    strategy:\n      matrix:\n        repo:\n          - 'http4k/toolbox'\n          - 'http4k/examples'\n          - 'http4k/http4k-by-example'\n          - 'http4k/http4k-connect'\n          - 'http4k/http4k-heroku-travis-example-app'\n          - 'http4k/http4k-contract-todo-backend'\n          - 'http4k/http4k-bin'\n          - 'http4k/http4k-todo-backend'\n          - 'http4k/http4k-bootstrap'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger ${{ matrix.repo }}\n        uses: peter-evans/repository-dispatch@v1.1.1\n        with:\n          token: ${{ secrets.TOOLBOX_REPO_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: http4k-release\n          client-payload: '{\"version\": \"${{ github.event.client_payload.version }}\"}'\n```"}
{"id": "63c49cbe1899db58864fbd78", "level": "level2", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  # Cancel any in-progress workflows for this workflow/branch combination.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    name: Build without tests\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'Source/ViewControllerPresentationSpy.xcodeproj', scheme: 'ViewControllerPresentationSpy-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }\n          - { project: 'ObjCSample/ObjCSampleViewControllerPresentationSpy.xcodeproj', scheme: 'ObjCSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 8' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  test:\n    name: Build & test\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'SwiftSample/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n          - { project: 'SwiftSamplePackage/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build & test\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  buildCarthage:\n    needs: [ build, test ]\n    name: Build Carthage\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Build\n      run: carthage build --configuration Release --no-skip-current --use-xcframeworks\n\n  podspec:\n    needs: [ build, test ]\n    name: Pod Spec Lint\n    runs-on: macos-latest\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Lint the pod spec\n        run: pod spec lint --quick\n\n  auto-merge:\n    needs: [ buildCarthage, podspec ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          ./merge_dependabot.sh\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}\n```"}
{"id": "63c49eaa517fc08c1ef04e4d", "level": "level2", "llm_response": "```yml\n---\nname: Labeler\non:\n  event:\n   ", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: actions/labeler@v4.0.2\n      if: github.event.pull_request.head.repo.full_name == github.repository\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a51517fc08c1eee9273", "level": "level2", "llm_response": "```yml\nname: Typescript Types\non:\n  push:\n   ", "answer": "```yaml name: Typescript Types\non:\n  pull_request:\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint TS-Files\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 14\n\n      - run: npm install\n\n      - name: Lint TS-Files\n        run: npm run lint-ts\n\n  test-ts-types:\n    needs:\n      - lint\n    runs-on: ubuntu-latest\n    name: Test Typescript Types\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 12\n\n      - run: npm install\n\n      - name: Typings\n        run: npm run test-tsd```"}
{"id": "63c49a2633b087f6bde43c7c", "level": "level2", "llm_response": "```yaml\n---\nname: Support requests\non:\n  branch: main\n", "answer": "```yaml name: 'Support requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\njobs:\n  support:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'repro-required'\n          issue-comment: >\n            :wave: @{issue-author}, sorry you're having an issue. As the issue template explains, we require that you provide a runnable example that reproduces your issue (please read the [issue template](https://raw.githubusercontent.com/react-native-google-signin/google-signin/master/.github/ISSUE_TEMPLATE/Custom.md)).\n\n            The reason is that maintainers do not have time to try reproduce bugs themselves. Please try to minimize the superfluous code and focus only on reproducing the bug.\n\n            Please create a new issue with this and we'll be happy to review it! If you're hitting a hard wall, you may consider [paid assistance](https://github.com/react-native-google-signin/google-signin/pull/861).\n          close-issue: true\n          lock-issue: false\n```"}
{"id": "63c49abb33b087f6bde478b7", "level": "level2", "llm_response": "```yml\n---\nname: CompatHelper\n\non:\n  schedule:\n", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 43 7 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'```"}
{"id": "63c497bf1899db58864db96b", "level": "level2", "llm_response": "```yml\n---\nname: Verify docs\non:\n  schedule:\n   ", "answer": "```yaml name: Verify docs\n\non:\n  schedule:\n    # every day at 9am\n    - cron: '0 9 * * *'\n\njobs:\n  verify:\n    name: Verify docs and spelling\n    runs-on: [ubuntu-latest]\n    steps:\n    - name: Check-out code\n      uses: actions/checkout@v3\n    - name: Set up Go using version from go.mod\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: 'go.mod'\n    - name: Run verify scripts\n      run: make verify\n    - name: Checking for broken Markdown links for main branch\n      uses: gaurav-nelson/github-action-markdown-link-check@v1\n      with:\n        folder-path: './docs'\n        file-path: './README.md, ./CHANGELOG.md, ./CONTRIBUTING.md, ./GOVERNANCE.md, ./MAINTAINERS.md, ./ROADMAP.md, ./SECURITY.md'\n        config-file: 'hack/.md_links_config.json'\n    - name: Markdownlint\n      run: |\n        sudo npm install -g markdownlint-cli@0.31.1\n        make markdownlint \n```"}
{"id": "63c49a471899db58864ec29a", "level": "level2", "llm_response": "```yml\n---\nname: CodeQL Analysis\non:\n  push:\n", "answer": "```yaml name: CodeQL Analysis\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '0 8 * * *'\n\njobs:\n  analyze:\n    name: CodeQL Analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        id: checkout_repo\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        id: init_codeql\n        uses: github/codeql-action/init@v2\n        with:\n          queries: security-and-quality\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        id: analyze_codeql\n        uses: github/codeql-action/analyze@v2\n\n# Built with \u2764 by [Pipeline Foundation](https://pipeline.foundation)```"}
{"id": "63c496ba33b087f6bde2deab", "level": "level2", "llm_response": "```yml\nname: Release Drafter\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    if: github.repository == 'activeloopai/deeplake'\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a586fc19abdf9cb5781", "level": "level2", "llm_response": "```yaml\n---\nname: publish-build\non:\n  release:\n    types", "answer": "```yaml name: publish-build\non:\n  release:\n    types: [released]\n\njobs:\n  build-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node and cache\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n      - name: Check release validity\n        run: sh .github/scripts/check-release.sh\n      - name: Install project dependencies\n        run: yarn install\n      - name: Build project\n        run: yarn build\n      - name: Create ZIP folder\n        uses: thedoctor0/zip-release@master\n        with:\n          filename: 'build.zip'\n          directory: 'build'\n      - name: Upload build to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: build/build.zip\n          tag: ${{ github.ref }}\n```"}
{"id": "63c497311899db58864d7f91", "level": "level2", "llm_response": "```yml\nname: CLA\non:\n  issues:\n    types", "answer": "```yaml \nname: CLA\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request'\n        # Alpha Release\n        uses: hanxiao/github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: '.github/signatures/v1/cla.json'\n          path-To-cladocument: 'https://github.com/jina-ai/jinabox.js/blob/master/CLA.md'\n          # branch should not be protected\n          branch: 'cla'\n          whitelist: hanxiao,nan-wang,jina-bot,BingHo1013,alexcg1,imsergiy,YueLiu-jina,JoanFM,lusloher\n          empty-commit-flag: false\n          blockchain-storage-flag: false```"}
{"id": "63c49f771842bc13d77973e6", "level": "level2", "llm_response": "```yml\n---\nname: Pull Request Validation\non:\n  pull_request", "answer": "```yaml name: Pull Request Validation\n\non:\n  pull_request:\n    branches:\n      - trunk\n      - 'release/**'\n      - 'feature/**'\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - reopened\n      - synchronize\n      - edited\n\nenv:\n  LABELS: ${{ join( github.event.pull_request.labels.*.name, ' ' ) }}\n\njobs:\n  check-type-label:\n    name: Check [Type] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Type]' ) == false\n        run: exit 1\n  check-focus-label:\n    name: Check [Focus] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Focus]' ) == false && contains( env.LABELS, 'Infrastructure' ) == false\n        run: exit 1\n  check-milestone:\n    name: Check Milestone\n    runs-on: ubuntu-latest\n    steps:\n      - if: github.event.pull_request.milestone == null && contains( env.LABELS, 'no milestone' ) == false\n        run: exit 1\n```"}
{"id": "63c49eb6cbc73931bb1af2d4", "level": "level2", "llm_response": "```yml\n---\nname: Notify Downstream Projects\non: push:\n", "answer": "```yaml name: Notify Downstream Projects\non:\n  push:\n    branches: [ develop ]\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\njobs:\n  notify-downstream:\n    # Only respect triggers from our develop branch, ignore that of forks\n    if: github.repository == 'matrix-org/matrix-js-sdk'\n    continue-on-error: true\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - repo: vector-im/element-web\n            event: element-web-notify\n          - repo: matrix-org/matrix-react-sdk\n            event: upstream-sdk-notify\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify matrix-react-sdk repo that a new SDK build is on develop so it can CI against it\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.ELEMENT_BOT_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: ${{ matrix.event }}\n```"}
{"id": "63c496381e3364807577930d", "level": "level2", "llm_response": "```yml\n---\nname: Wrye Bash CI\n\non:\n ", "answer": "```yaml name: Wrye Bash CI\n\non: push\n\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout commit\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n        architecture: 'x64'\n    - name: Restore dependencies cache\n      uses: actions/cache@v3\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools wheel\n        python -m pip install -r requirements.txt\n    - name: Test Wrye Bash\n      run: |\n        python -m pytest\n    - name: Build Wrye Bash\n      # Note the configs - needed for build.py\n      run: |\n        git config --local user.name \"GitHub Actions\"\n        git config --local user.email \"github-action@users.noreply.github.com\"\n        python scripts/build.py --verbose\n    - name: Copy executable/license files\n      run: |\n        cp \"scripts/build/standalone/dist/Wrye Bash.exe\" Mopy\n        cp LICENSE.md Mopy/LICENSE.md\n#    - name: Create Apps folder # does not work\n#      run: mkdir Mopy/Apps\n    - name: Upload Standalone Build Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: ${{ format('Wrye Bash CI {0}.{1}', github.ref_name, github.sha) }}\n        path: |\n          Mopy/*\n          Mopy/LICENSE.md\n          !Mopy/**.py\n          !Mopy/**.pyw\n          !Mopy/**.pyd\n          !Mopy/**.bat\n          !Mopy/**.template\n          !Mopy/redist\n          !Mopy/__pycache__\n          !Mopy/bash/**.py\n          !Mopy/bash/__pycache__\n          !Mopy/bash/basher\n          !Mopy/bash/bosh\n          !Mopy/bash/brec\n          !Mopy/bash/env\n          !Mopy/bash/game\n          !Mopy/bash/gui\n          !Mopy/bash/patcher\n          !Mopy/bash/tests\n```"}
{"id": "63c49e83517fc08c1ef03f23", "level": "level2", "llm_response": "```yml\n---\nname: release-petroleum\non: push\n", "answer": "```yaml name: release-petroleum\n\non: \n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Release Version' \n\njobs:\n  docker:\n    runs-on: ubuntu-20.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=focal\"\n            \"MACHINARIS_STREAM=latest\"\n            \"PETROLEUM_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n```"}
{"id": "63c49ecacbc73931bb1afb61", "level": "level2", "llm_response": "```yml\nname: Upgrade Python Requirements\non:\n  branches:\n   ", "answer": "```yaml name: Upgrade Python Requirements\n\non:\n  schedule:\n    # will start the job at 01:30 UTC every Friday\n    - cron: \"30 1 * * 5\"\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: \"Target branch against which to create requirements PR\"\n        required: true\n        default: '$default-branch'\n\njobs:\n  call-upgrade-python-requirements-workflow:\n    uses: openedx/.github/.github/workflows/upgrade-python-requirements.yml@master\n    with:\n      branch: ${{ github.event.inputs.branch || '$default-branch' }}\n      # optional parameters below; fill in if you'd like github or email notifications\n      # user_reviewers: \"\"\n      # team_reviewers: \"\"\n      # email_address: \"\"\n      # send_success_notification: false\n    secrets:\n      requirements_bot_github_token: ${{ secrets.REQUIREMENTS_BOT_GITHUB_TOKEN }}\n      requirements_bot_github_email: ${{ secrets.REQUIREMENTS_BOT_GITHUB_EMAIL }}\n      edx_smtp_username: ${{ secrets.EDX_SMTP_USERNAME }}\n      edx_smtp_password: ${{ secrets.EDX_SMTP_PASSWORD }}\n```"}
{"id": "63c49717517fc08c1eed4a9a", "level": "level2", "llm_response": "```yaml\nname: Update Prettier\n\non:\n  branches:\n   ", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\n  workflow_dispatch: {}\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49fa5736e7f0ed8c6f75c", "level": "level2", "llm_response": "```yml\n---\nname: Deploy Documentation\n\non:\n  branch:\n   ", "answer": "```yaml name: Deploy Documentation\n\non:\n  push:\n    branches:\n    - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n\n    - name: vuepress-deploy\n      uses: jenkey2011/vuepress-deploy@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        TARGET_REPO: OT-CONTAINER-KIT/redis-operator\n        TARGET_BRANCH: gh-pages\n        BUILD_SCRIPT: cd docs; yarn && yarn build\n        BUILD_DIR: src/.vuepress/dist/\n \n```"}
{"id": "63c49feb1899db58865101eb", "level": "level2", "llm_response": "```yml\nname: Release Drafter\n\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches: [ main ]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n          # config-name: my-config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c49db51899db5886501d95", "level": "level2", "llm_response": "```yml\nname: spring-reactive-groovy-dsl\non", "answer": "```yaml name: spring-reactive-groovy-dsl\n\non:\n  push:\n    paths:\n      - \"groovy-dsl/**\"\n    branches: [ master ]\n  pull_request:\n    paths:\n      - \"groovy-dsl/**\"\n    types:\n      - opened\n      - synchronize\n      - reopened\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n          fetch-depth: 0\n    - name: Set up JDK\n      uses: actions/setup-java@v3\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: 'maven'\n    - name: Start up databases via Docker Compose \n      run: |\n        docker-compose up -d mongodb\n        sleep 5\n        docker ps -a  \n    - name: Build with Maven\n      run: |\n        cd groovy-dsl\n        mvn -B package --file pom.xml\n```"}
{"id": "63c49ac5cbc73931bb195e22", "level": "level2", "llm_response": "```yml\nname: Build and Deploy Documentation\n\non:\n  event_type", "answer": "```yaml name: Build and Deploy Documentation\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set release env\n        run: echo \"RELEASE_VERSION=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\n      - name: Set up python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Configure the git user\n        run: |\n          git config user.name \"versioning_user\"\n          git config user.email \"connaisseur@securesystems.dev\"\n      - name: Set up Python\n        run: |\n          pip install -r docs/requirements_docs.txt\n      - name: deploy\n        run: |\n          mike deploy --push --update-aliases ${RELEASE_VERSION} latest\n```"}
{"id": "63c49b76cbc73931bb19a77b", "level": "level2", "llm_response": "```yml\n---\nname: CI\non:\n  push:\n    branches", "answer": "```yaml name: CI\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n\n    services:\n      postgres:\n        image: postgres:14-alpine\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n\n      redis:\n        image: redis:alpine\n        ports: ['6379:6379']\n\n    env:\n      DB_HOST: localhost\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      REDIS_URL: redis://localhost:6379/0\n      RAILS_ENV: test\n      DISABLE_SPRING: true\n      CI: true\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          bundler-cache: true\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3.5.1\n        with:\n          cache: yarn\n\n      - name: Install Yarn packages\n        run: bin/yarn install --frozen-lockfile\n\n      - name: Lint with RuboCop\n        run: bin/rubocop --parallel\n\n      - name: Run ESLint\n        run: bin/yarn lint\n\n      - name: Lint with SlimLint\n        run: bundle exec slim-lint .\n\n      - name: Setup PostgreSQL\n        run: bin/rails db:create\n\n      - name: Compile assets\n        run: bin/rails assets:precompile\n\n      - name: Run Ruby Tests\n        run: bin/rspec\n\n      - name: End-to-end tests\n        uses: cypress-io/github-action@v4\n        with:\n          start: bundle exec rails server\n          wait-on: http://localhost:3000\n          browser: chrome\n          record: true\n        env:\n          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CYPRESS_BASE_URL: http://localhost:3000\n          CYPRESS: true\n        if: env.CYPRESS_RECORD_KEY != null\n\n      - name: Check JS size limit\n        run: yarn size-limit\n\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: Cypress screenshots and videos\n          path: |\n            tmp/cypress_screenshots/\n            tmp/cypress_videos/\n          if-no-files-found: ignore\n\n  deploy:\n    runs-on: ubuntu-20.04\n\n    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Fetch tag annotations\n        # https://github.com/actions/checkout/issues/290\n        run: git fetch --tags --force\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build the production image\n        run: |\n          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})\n          export COMMIT_VERSION=$(git describe --always)\n          echo $GITHUB_SHA\n          echo $COMMIT_TIME\n          echo $COMMIT_VERSION\n          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .\n\n      - name: Push the image tagged as LATEST to the container registry\n        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:latest\n          docker push ghcr.io/${{ github.repository }}:latest\n\n      - name: Push the image tagged with version to the container registry\n        if: startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n          docker push ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n\n      - name: Send webhook to start deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n        if: env.DEPLOY_HOOK != null\n        run: curl -X POST ${{ env.DEPLOY_HOOK }}\n\n      - name: Notify Honeybadger about deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}\n        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null\n        uses: honeybadger-io/github-notify-deploy-action@v1\n        with:\n          api_key: ${{ secrets.HONEYBADGER_API_KEY }}\n```"}
{"id": "63c49eb21842bc13d77927ac", "level": "level2", "llm_response": "```yml\n---\nname: Nightly Vinix Rebuild\non:", "answer": "```yaml name: Nightly Vinix rebuild\n\n#on:\n#  schedule:\n#    - cron: '0 0 * * *'\n\njobs:\n  vinix-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install make curl git mercurial libarchive-tools xorriso -y\n\n      - name: Build distro\n        run: make distro-full\n\n      - name: Build ISO\n        run: make all\n\n      - name: Set TAG_DATE variable\n        run: echo \"TAG_DATE=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n\n      - name: Tag new nightly release\n        run: git tag nightly-$TAG_DATE && git push --tags\n\n      - name: Rename vinix.iso\n        run: mv vinix.iso vinix-nightly-$(date +'%Y%m%d').iso\n\n      - name: Create nightly release\n        uses: softprops/action-gh-release@v1\n        with:\n          name: Nightly build ${{ env.TAG_DATE }}\n          tag_name: nightly-${{ env.TAG_DATE }}\n          body: Image of an up to date Vinix nightly build.\n          files: |\n            vinix-nightly-*.iso\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a052b008460c1df53339", "level": "level2", "llm_response": "```yml\nname: Pull Request\non:\n  push:\n    branches", "answer": "```yaml name: Pull Request\non:\n  push:\n    paths:\n      - \"**.go\"\n    tags:\n      - v*\n    branches:\n      - master\n      - development\n  pull_request:\n    branches-ignore:\n      - dependabot/**\n\njobs:\n  checks:\n    name: Pull Request Checks\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, '[ci skip]') == false && contains(github.event.head_commit.message, '[skip ci]') == false\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      # - name: Run tests\n      #   run: make test\n\n      - name: Run GolangCI-Lint\n        uses: golangci/golangci-lint-action@v3.1.0\n        with:\n          version: latest\n          args: --tests=0 --timeout=30m\n\n      - name: Run Semgrep\n        run: |\n          python3 -m pip install semgrep\n          semgrep scan --config auto --dryrun -q --include \"**.go\"\n\n      - name: Cross-platform checks\n        uses: goreleaser/goreleaser-action@v3\n        with: \n          version: latest\n          args: build --skip-validate --rm-dist --snapshot --timeout=30m\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2```"}
{"id": "63c5c55aac4f2678a5bd5362", "level": "level2", "llm_response": "```yml\nname: Code Scanning - Action\n\non:\n  schedule", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  # push:\n  schedule:\n    - cron: '0 12 * * 0'\n\npermissions:\n  contents: read\n\njobs:\n  CodeQL-Build:\n\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/analyze to upload SARIF results\n    strategy:\n      fail-fast: false\n\n\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below).\n    #- name: Autobuild\n    #  uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    - name: Clean Install\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n      \n    - name: Build packages \n      run: npm run build\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49b791899db58864f3ba0", "level": "level2", "llm_response": "```yml\nname: discussion-questions\non:\n  push:\n   ", "answer": "```yaml name: discussion-questions\non:\n  discussion:\n    types: [created, answered]\njobs:\n  new_question:\n    if: github.event.action == 'created' && github.event.discussion.category.is_answerable\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :thinking: *{{ EVENT_PAYLOAD.discussion.user.login }} asked a question*\n\n            **{{ EVENT_PAYLOAD.discussion.title }}**\n            {{ EVENT_PAYLOAD.discussion.body }}\n\n            {{ EVENT_PAYLOAD.discussion.html_url }}\n\n  question_answered:\n    if: github.event.action == 'answered'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :tada: *{{ EVENT_PAYLOAD.answer.user.login }} answered a question*\n\n            **Q**: {{ EVENT_PAYLOAD.discussion.title }}\n            **A**: *{{ EVENT_PAYLOAD.answer.body }}*\n\n            {{ EVENT_PAYLOAD.answer.html_url }}\n```"}
{"id": "63c4992d6fc19abdf9cae027", "level": "level2", "llm_response": "```yml\n---\nname: Issue Labeler\non:\n  branches:\n", "answer": "```yaml name: \"Issue Labeler\"\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: github/issue-labeler@v2.5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/issue-labeler.yml\n        #not-before: 2020-01-15T02:54:32Z\n        enable-versioned-regex: 0\n        #versioned-regex: 'issue_labeler_regex_version=(\\d+)'\n        body-missing-regex-label: 'broken-template'\n```"}
{"id": "63c49f746fc19abdf9cd63ff", "level": "level2", "llm_response": "```yml\n---\nname: s2i-mvn-gradle-pr", "answer": "```yaml ---\nname: s2i-mvn-gradle-pr\non:\n  pull_request:\n    paths:\n      - s2i-mvn-gradle/**\n      - .github/workflows/s2i-mvn-gradle-pr.yaml\njobs:\n  build:\n    env:\n      context: s2i-mvn-gradle\n      image_name: s2i-mvn-gradle\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49ab4517fc08c1eeebb47", "level": "level2", "llm_response": "```yml\nname: Tests\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n        test-type: [e2e, lint]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Run test (${{ matrix.test-type }})\n        run: 'npm run test:${{ matrix.test-type }}'\n        env:\n          CI: true\n```"}
{"id": "63c49db2b008460c1df42b9d", "level": "level2", "llm_response": "```yml\nname: Upload Snapshot\n\non:\n  push:\n    branches", "answer": "```yaml name: Upload Snapshot\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n\njobs:\n  verify:\n    name: latest-images\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 8.0.x\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: GPG_PASSPHRASE\n      - name: Assert Snapshot Version\n        run: |\n          ./mvnw clean install -Dmaven.test.skip=true\n          ./mvnw -q \\\n            -Dexec.executable=echo \\\n            -Dexec.args='${project.version}' \\\n            exec:exec | perl -ne 'die unless m/.*-SNAPSHOT/'\n      - name: Publish to Apache Maven Central\n        run: ./mvnw deploy\n        env:\n          OSSRH_USERNAME: ${{ secrets.SNAPSHOT_UPLOAD_USER }}\n          OSSRH_TOKEN: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}```"}
{"id": "63c49b7e33b087f6bde4c721", "level": "level2", "llm_response": "```yaml\n---\nname: CI: Lint\n\non:\n  push:\n", "answer": "```yaml name: \"CI: Lint\"\n\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  lint:\n\n    runs-on: ubuntu-latest\n\n    container:\n      image: valalang/lint\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Lint\n      run: io.elementary.vala-lint -d .\n```"}
{"id": "63c49ecc33b087f6bde620ae", "level": "level2", "llm_response": "```yml\n---\nname: Java CI with Maven for PRs\non", "answer": "```yaml # This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Java CI with Maven for PRs\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Disabling shallow clone is recommended for improving relevancy of reporting with SonarCloud\n          fetch-depth: 0\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: 8\n      - name: Build with Maven\n        run: mvn --show-version --no-transfer-progress verify --file pom.xml -Pcoverage,cloudbees-oss-release -Dgpg.skip=true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499541842bc13d7770086", "level": "level2", "llm_response": "```yml\nname: Generate Roblox standard library\n\non:\n  branches", "answer": "```yaml name: Generate Roblox standard library\r\non: [push, pull_request]\r\njobs:\r\n  generate:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v1\r\n    - name: Generate\r\n      run: cargo run --bin selene --verbose -- generate-roblox-std\r\n    - name: Upload\r\n      uses: actions/upload-artifact@v1\r\n      with:\r\n        name: roblox\r\n        path: roblox.yml```"}
{"id": "63c4a061cbc73931bb1ba06d", "level": "level2", "llm_response": "```yml\n---\ntrigger:\n  branches:\n    - main\n  events", "answer": "```yaml name: check-x-pack-winlogbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-winlogbeat.yml'\n      - 'x-pack/winlogbeat/**'\n      - 'winlogbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/winlogbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      uses: magefile/mage-action@v2\n      with:\n        args: check update\n        workdir: \"${{ env.BEAT_MODULE }}\"\n```"}
{"id": "63c4990ccbc73931bb18b0e2", "level": "level3", "llm_response": "```yaml\nname: Test CI\n\non:\n  pull_request:\n    branches", "answer": "```yaml name: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n      - name: Install\n        run: |\n          npm install -g yarn\n          yarn\n        env:\n          CI: \"true\"\n      - name: Build\n        run: |\n          yarn build\n        env:\n          CI: \"true\"\n      - name: Check Circular Dependencies\n        run: |\n          yarn circular\n        env:\n          CI: \"true\"\n      - name: Test\n        run: |\n          yarn test\n        env:\n          CI: \"true\"\n      - name: Bench\n        run: |\n          node packages/core/build/examples/bench/queue.js\n        env:\n          CI: \"true\"\n```"}
{"id": "63c4a1971842bc13d77a4d18", "level": "level3", "llm_response": "```yaml\nname: Tribble\n\non:\n  event:\n    types:\n", "answer": "```yaml name: Tribble\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: arctic-hen7/tribble-bot@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a15933b087f6bde71f6b", "level": "level3", "llm_response": "```yml\nname: Create a Release\non:\n  push:\n   ", "answer": "```yaml name: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc*'\n\njobs:\n  release:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get the version\n        id: get_version\n        run: |\n          echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n          echo \"TRIMMED_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n\n      - name: REUSE Compliance Check\n        uses: fsfe/reuse-action@v1\n        with:\n          args: spdx -o zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: upload-results\n        uses: actions/upload-artifact@v3\n        continue-on-error: True\n        with:\n          name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: Create empty release notes body\n        run: |\n          echo \"TODO: add release overview and notes link\" > release-notes.txt\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Zephyr ${{ steps.get_version.outputs.TRIMMED_VERSION }}\n          body_path: release-notes.txt\n          draft: true\n          prerelease: true\n\n      - name: Upload Release Assets\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_content_type: text/plain\n```"}
{"id": "63c49f7a1e336480757b40f4", "level": "level3", "llm_response": "```yml\nname: Lint\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire ethermint repository This workflow is\n# run on every pull request and push to main The `golangci` will pass without\n# running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: Run golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      # Required: setup-go, for all versions v3.0.0+ of golangci-lint\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.3\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.\n          version: v1.46.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        # Check only if there are differences in the source code\n        if: \"env.GIT_DIFF\"\n  markdown-lint:\n    name: Run markdown-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            docs/**/*.md\n            x/**/*.md\n            README.md\n      - uses: nosborn/github-action-markdown-cli@v3.2.0\n        with:\n          files: .\n          config_file: .markdownlint.yml\n          ignore_path: .markdownlintignore\n        # Check only if there are differences in the source code\n        if: env.GIT_DIFF\n```"}
{"id": "63c494e18052faa2781adf47", "level": "level3", "llm_response": "```yaml\nname: Lint I18N\non:\n  push:\n", "answer": "```yaml name: Lint I18N\n\non:\n  push:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n\npermissions:\n  contents: read\n\n# Cancels all previous workflow runs for pull requests that have not completed.\nconcurrency:\n  # The concurrency group contains the workflow name and the (target) branch name.\n  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Install WP-CLI\n        run: |\n          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n          chmod +x wp-cli.phar\n          mkdir -p bin\n          mv wp-cli.phar bin/wp\n          echo \"${PWD}/bin\" >> $GITHUB_PATH\n\n      - name: WP-CLI Info\n        run: wp cli info\n\n      - name: Install latest version of i18n-command\n        run: wp package install wp-cli/i18n-command:dev-main\n\n      - name: List packages\n        run: wp package list\n\n      - name: Setup Node\n        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516\n        with:\n          node-version-file: '.nvmrc'\n          cache: npm\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@e04e1d97f0c0481c6e1ba40f8a538454fe5d7709\n        with:\n          php-version: '8.0'\n          coverage: none\n          tools: composer\n\n      - name: Install dependencies\n        run: |\n          npm ci\n        env:\n          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true\n\n      - name: Install PHP dependencies\n        uses: ramsey/composer-install@f680dac46551dffb2234a240d65ae806c2999dd6\n        with:\n          composer-options: '--prefer-dist --no-progress --no-interaction'\n\n      - name: Build plugin\n        run: npm run build:js\n\n      - name: Bundle regular version\n        run: npm run workflow:build-plugin\n\n      # Check if as many strings as expected were found.\n      # Fail job if `wp i18n make-pot` returns any warnings.\n      # Some false positive warnings are removed due to a bug in the string extraction.\n      # That's why this step is unfortunately a bit more complex.\n      # See https://github.com/wp-cli/i18n-command/issues/154\n      - name: Generate POT file\n        run: |\n          OUTPUT=$((wp i18n make-pot build/web-stories build/web-stories.pot) 2>&1 >/dev/null)\n\n          HAS_ERROR=false\n\n          EXPECTED_NUMBER_OF_STRINGS=1000\n          NUMBER_OF_FOUND_STRINGS=$(grep -o msgstr build/web-stories.pot | wc -l | xargs)\n\n          if (( \"$NUMBER_OF_FOUND_STRINGS\" < \"$EXPECTED_NUMBER_OF_STRINGS\" )); then\n          HAS_ERROR=true\n            echo \"String extraction found only $NUMBER_OF_FOUND_STRINGS translatable strings. Expected at least $EXPECTED_NUMBER_OF_STRINGS.\"\n          fi\n\n          IFS=$'\\n'\n          declare -a WARNINGS=($OUTPUT)\n          unset IFS\n\n          for WARNING in \"${WARNINGS[@]}\"; do\n            # Filter false positives.\n            if [[ $WARNING == *\"translator comment\"* ]] && [[ $WARNING != *\"%s\"* ]]; then\n              continue\n            fi\n\n            HAS_ERROR=true\n\n          \techo $WARNING\n          done\n\n          if [[ \"$HAS_ERROR\" = true ]]; then\n            exit 1\n          fi\n```"}
{"id": "63c499881e3364807578e735", "level": "level3", "llm_response": "```yaml\nname: Deploy to WordPress.org\n\non:\n  push:\n   ", "answer": "```yaml name: Deploy to WordPress.org\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  tag:\n    name: New tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: WordPress Plugin Deploy\n        uses: 10up/action-wordpress-plugin-deploy@master\n        env:\n          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}\n          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}\n```"}
{"id": "63c498546fc19abdf9ca87b3", "level": "level3", "llm_response": "```yml\nname: Build And Test, NETCORE\non:\n ", "answer": "```yaml # Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\n# .NET CLI: https://docs.microsoft.com/dotnet/core/tools/\n# Description: The purpose of this workflow is to compile and run unit tests.\n\nname: Build And Test, NETCORE\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-test-NETCORE:\n\n    runs-on: ${{ matrix.os }}\n\n    env:\n      SOLUTION: ./NETCORE/ApplicationInsights.AspNetCore.sln\n      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/TestResults\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        framework: [net452, net462, net472, net480, net481, netcoreapp3.1, net6.0, net7.0]\n        include: \n          - os: ubuntu-latest\n            args: \"--filter TestCategory!=WindowsOnly\"\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: |\n            3.1.x\n            6.0.x\n\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '7.0.x'\n        include-prerelease: true\n\n    - name: Restore\n      run: dotnet restore ${{ env.SOLUTION }}\n\n    - name: Build\n      run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore\n\n    - name: Test\n      id: test1\n      continue-on-error: true\n      run: dotnet test ${{ env.SOLUTION }} --framework ${{ matrix.framework }} --configuration Release --no-build --results-directory ${{ env.TEST_RESULTS_DIRECTORY }} --logger:\"console;verbosity=detailed\" --logger:\"trx;logfileprefix=testResults_\" ${{ matrix.args }}\n\n    - name: Retry tests\n      if: steps.test1.outcome=='failure'\n      run: pwsh -f ./.scripts/build_RetryTests.ps1 -TestResultsDirectory ${{ env.TEST_RESULTS_DIRECTORY }} -WorkingDirectory ${{ github.workspace }}\n```"}
{"id": "63c49c5933b087f6bde52309", "level": "level3", "llm_response": "```yaml\nname: TagBot\n\non:\n  branches:\n    - main", "answer": "```yaml name: TagBot\non:\n issue_comment:\n    types:\n      - created\n workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5ecbc73931bb1a68c1", "level": "level3", "llm_response": "```yml\nname: Release\non:\n  push:\n    branches:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - r[0-9]*\n\njobs:\n  release:\n    uses: evanchooly/workflows/.github/workflows/release.yml@master\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b11899db58865154dc", "level": "level3", "llm_response": "```yml\nname: Node-CI\n\non:\n  pull_request:\n", "answer": "```yaml name: Node-CI\n\non:\n  pull_request: ~\n  push:\n    branches: [main, changeset-release/*]\n\njobs:\n  node-tests:\n    runs-on: ubuntu-latest\n    name: 'Test (Node ${{ matrix.node-version }}, React ${{ matrix.react-version }})'\n    strategy:\n      fail-fast: false\n      matrix:\n        # The action will first check the local cache for a semver match.\n        # If unable to find a specific version in the cache,\n        # the action will attempt to download a version of Node.js.\n        # It will pull LTS versions from node-versions releases and on miss\n        # or failure will fall back to the previous behavior of downloading\n        # directly from node dist.\n        # https://github.com/actions/setup-node\n        node-version: ['14', '16']\n        react-version: ['17', '18']\n    timeout-minutes: 15\n\n    steps:\n      - uses: actions/checkout@v3\n        name: Checkout\n\n      - uses: actions/setup-node@v3\n        name: Use Node.js ${{ matrix.node-version }}\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'yarn'\n          check-latest: true\n\n      - uses: actions/cache@v3\n        name: Restore loom cache\n        with:\n          path: |\n            .loom\n            packages/*/build/ts\n            packages/*/build/*.tsbuildinfo\n          key: ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-\n\n      - name: \ud83d\udce6 Install dependencies\n        run: yarn --frozen-lockfile\n\n      - name: \ud83d\udd28 Build\n        run: yarn build\n\n      - name: \ud83d\udc85\ud83c\udffc Lint\n        run: |\n          yarn lint\n          yarn ci:lint-docs\n\n      - name: Unit tests\n        run: yarn test \"^(?:(?!(address|react-server)).)*$\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n\n      - name: E2E tests\n        run: yarn test --debug \"(address|react-server)\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n```"}
{"id": "63c4a04c736e7f0ed8c73b97", "level": "level3", "llm_response": "```yml\nname: Notify Comments on Issues\non:\n  pull_request", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Notify Comments on Issues\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow on comment events on pending response issues\n  issue_comment:\n    types: [created]\n\n# Limit the GITHUB_TOKEN permissions\npermissions: {}\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"notify\"\n  notify:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    if: ${{ !github.event.issue.pull_request && !contains(fromJSON('[\"palpatim\", \"brennanMKE\", \"lawmicha\", \"harsh62\", \"thisisabhash\", \"ameter\", \"royjit\", \"atierian\", \"ukhan-amazon\", \"ruisebas\", \"phantumcode\"]'), github.event.comment.user.login) }}\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Runs a single command using the runners shell\n      - name: Run webhook curl command\n        env:\n          WEBHOOK_URL: ${{ secrets.SLACK_COMMENT_WEBHOOK_URL }}\n          COMMENT: ${{toJson(github.event.comment.body)}}\n        shell: bash\n        run: echo $COMMENT | sed \"s/\\\\\\n/. /g; s/\\\\\\r//g; s/[^a-zA-Z0-9 &().,:]//g\" | xargs -I {} curl -s POST \"$WEBHOOK_URL\" -H \"Content-Type:application/json\" --data '{\"comment\":\"{}\", \"commentUrl\":\"${{github.event.comment.html_url}}\", \"user\":\"${{github.event.comment.user.login}}\"}'\n```"}
{"id": "63c496df1842bc13d77600b8", "level": "level3", "llm_response": "```yml\nname: Tools\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tools\n\non:\n   push:\n    branches: [ master ]\n   pull_request:\n    branches: [ master ]\n\njobs:\n   build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: 6.0.x\n        \n    - name: Build FileAnalyzer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileAnalyzer/\n        \n    - name: Build FileExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileExtractor/\n        \n    - name: Build JsonSerializer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.JsonSerializer/\n      \n    - name: Build SystemTester\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.SystemTester/\n      \n    - name: Build TypeTreeExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.TypeTreeExtractor/\n      ```"}
{"id": "63c499c41842bc13d7772cde", "level": "level3", "llm_response": "```yml\nname: PR Reviewer Checklist\non:\n  pull_request", "answer": "```yaml name: PR Reviewer Checklist\n\non: pull_request_review\n\njobs:\n  checklist:\n    runs-on: ubuntu-latest\n    if: github.actor != 'OSBotify'\n    steps:\n      - name: contributorChecklist.js\n        uses: Expensify/App/.github/actions/javascript/contributorChecklist@main\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CHECKLIST: 'reviewer'\n```"}
{"id": "63c499aa6fc19abdf9cb1361", "level": "level3", "llm_response": "```yml\nname: Checks\non:\n  push:\n    branches:\n", "answer": "```yaml name: Checks\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  NODE_VERSION: '16'\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    types: [\n        synchronize, # PR was updated\n        opened, # PR was open\n        reopened, # PR was closed and is now open again\n        ready_for_review, # PR was converted from draft to open\n      ]\n\njobs:\n  checks:\n    name: Checks\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          token: ${{ env.GITHUB_TOKEN }}\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ env.NODE_VERSION }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Install Dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Check Docs\n        run: npm run check-docs\n\n      - name: Check Typing\n        run: npm run check-typing\n\n      - name: Check Formatting\n        run: npm run check-formatting\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Check Prepack\n        run: npm run prepack\n```"}
{"id": "63c497c31842bc13d7765b0d", "level": "level3", "llm_response": "```yml\nname: CI Switch/libnx\n\non:\n  push:\n", "answer": "```yaml name: CI Switch/libnx\n\non:\n  push:\n  pull_request:\n  repository_dispatch:\n    types: [run_build]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container: \n      image: git.libretro.com:5050/libretro-infrastructure/libretro-build-libnx-devkitpro:latest\n      options: --user root\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Compile RA\n      run: |\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) clean\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) HAVE_STATIC_DUMMY=1\n    - name: Get short SHA\n      id: slug\n      run: echo \"::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)\"\n    \n    - uses: actions/upload-artifact@v3\n      with:\n        name: RA-libnx-dummy-${{ steps.slug.outputs.sha8 }}\n        path: |\n          retroarch_switch.nro\n```"}
{"id": "63c4a19633b087f6bde73627", "level": "level3", "llm_response": "```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    -", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '10 7 * * 2'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-netbootxyz/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for netbootxyz** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-netbootxyz/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c497e61e3364807578414d", "level": "level3", "llm_response": "```yml\nname: Continuous integration\n\non:\n  push:\n    branches", "answer": "```yaml #-----------------------------------------------------------------------------\n#\n#  TSDuck - The MPEG Transport Stream Toolkit\n#  Copyright (c) 2005-2022, Thierry Lelegard\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  1. Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n#  THE POSSIBILITY OF SUCH DAMAGE.\n#\n#-----------------------------------------------------------------------------\n#\n#  GitHub Actions configuration file : Continuous Integration\n#\n#-----------------------------------------------------------------------------\n\nname: Continuous integration\n\n# Trigger the workflow on push or pull request, for master branch only.\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\n# Build on Ubuntu, macOS and Windows, using C++11 (C++14 on Windows) and C++20 levels of standards.\njobs:\n  build_unix:\n    strategy:\n      fail-fast: false\n      matrix:\n        # ubuntu-latest is currently ubuntu-20.04, too old for C++20, force ubuntu-22.04.\n        os: [ubuntu-22.04, macos-latest]\n        compiler: [gcc, clang]\n        std: [11, 20]\n        include:\n        - os: ubuntu-22.04\n          compiler: clang\n          llvm: true\n        - os: macos-latest\n          # It has been noted on GitHub macOS runners that the host name can change\n          # between steps or even the middle of a step. This breaks the naming scheme\n          # of the build directory for binaries. As a consequence, we force BINDIR=bin.\n          bindir: bin\n        exclude:\n        - os: macos-latest\n          compiler: gcc\n          # Don't use gcc on macOS.\n    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}, C++${{ matrix.std }}\n    runs-on: ${{ matrix.os }}\n    env:\n      LLVM: ${{ matrix.llvm }}\n      BINDIR: ${{ matrix.bindir }}\n      CXXFLAGS_STANDARD: -std=c++${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        ${{ matrix.compiler }} --version\n        scripts/java-config.sh\n    - name: Build TSDuck\n      run: make -j5\n    - name: Check built version\n      run: make show-version\n    - name: Run unitary tests\n      run: make test\n    - name: Download test suite\n      run: |\n        mkdir -p ../tsduck-test\n        curl -s -L https://github.com/tsduck/tsduck-test/tarball/master | tar xz --strip 1 -C ../tsduck-test\n    - name: Run test suite\n      run: |\n        make test-suite && status=$? || status=$?\n        cd ../tsduck-test\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [Win64, Win32]\n        configuration: [Release]\n        std: [14, 20]\n        include:\n        - target: Win64\n          suffix: x64\n          testopt: --dev\n        - target: Win32\n          suffix: Win32\n          testopt: --dev32\n        exclude:\n        - target: Win32\n          std: 20\n    name: Build on ${{ matrix.target }} with VC++, C++${{ matrix.std }}\n    runs-on: windows-latest\n    env:\n      STDCPP: stdcpp${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause\n    - name: Dependencies check\n      run: |\n        Write-Output \"Path=${env:Path}\"\n        python --version\n    - name: Build TSDuck\n      run: |\n        scripts/build.ps1 -${{ matrix.target }} -${{ matrix.configuration }} -Parallel 5 -NoLowPriority -NoPause\n        Get-ChildItem bin/${{ matrix.configuration }}-${{ matrix.suffix }}\n    - name: Check built version\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsversion.exe --version=all\n    - name: Check plugins list\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsp.exe --list\n    - name: Run unitary tests\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsduckdll.exe\n    - name: Run unitary tests (static)\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsducklib.exe\n    - name: Download test suite\n      run: |\n        $ProgressPreference = 'SilentlyContinue'\n        Invoke-WebRequest -UseBasicParsing -Uri https://github.com/tsduck/tsduck-test/archive/master.zip -OutFile test.zip\n        Expand-Archive test.zip -DestinationPath . -Force\n        Move-Item tsduck-test-master ../tsduck-test -Force\n    - name: Run test suite\n      shell: bash\n      run: |\n        cd ../tsduck-test\n        ./run-all-tests.sh ${{ matrix.testopt }} && status=$? || status=$?\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_doxygen:\n    name: Doxygen documentation\n    # ubuntu-latest is currently ubuntu-20.04, try to grab a more recent version of doxygen.\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        doxygen --version\n    - name: Build TSDuck documentation\n      run: |\n        make doxygen\n```"}
{"id": "63c496ce517fc08c1eed2f51", "level": "level3", "llm_response": "```yaml\nname: Node.js CI\n\non:\n  push:\n    branches", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [17.8]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm install\n    - run: npm run build\n    - run: npm run test\n    - name: Codecov\n      uses: codecov/codecov-action@v3.1.0\n```"}
{"id": "63c4967d6fc19abdf9c9c47c", "level": "level3", "llm_response": "```yml\nname: Build and deploy to GitHub Pages\n\non:\n ", "answer": "```yaml name: Build and deploy to GitHub Pages\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm ci\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.0\n        with:\n          branch: gh-pages\n          folder: dist\n```"}
{"id": "63c49df2cbc73931bb1aa4e2", "level": "level3", "llm_response": "```yml\nname: Node Publish Package\n\non:\n  release:\n   ", "answer": "```yaml name: Node Publish Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49d2f1842bc13d7788992", "level": "level3", "llm_response": "```yaml\nname: Continuous Integration\n\non:\n  branches:\n    - main", "answer": "```yaml name: Continuous Integration\non:\n  push:\n    branches: [ main ]\n\njobs:\n  snap:\n    uses: ./.github/workflows/snap.yml\n    with:\n      deploy: true\n      channel: edge\n    secrets: inherit\n\n  matrix:\n    uses: ./.github/workflows/matrix.yml\n\n  fuzzing:\n    permissions:\n      actions: read # to fetch the artifacts (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n      contents: read # to clone the repo (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Build Fuzzers\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        fuzz-seconds: 150\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v3\n      if: failure() && steps.build.outcome == 'success'\n      with:\n        name: artifacts\n        path: ./out/artifacts\n\n```"}
{"id": "63c497a01842bc13d7764d6f", "level": "level3", "llm_response": "```yml\nname: Rebuild LLVM 12.0\non:\n", "answer": "```yaml # Copyright 2022 Intel Corporation\n# SPDX-License-Identifier: BSD-3-Clause\n\nname: Rebuild LLVM 12.0\n\non:\n  push:\n    branches:\n      - main\n      - '**rebuild_llvm**'\n    paths:\n      - \"llvm_patches/*12_0*\"\n      - \"alloy.py\"\n      - \".github/workflows/rebuild-llvm12.yml\"\n  workflow_dispatch:\n\njobs:\n  llvm12:\n    uses: ./.github/workflows/reusable.rebuild.yml\n    with:\n      version: '12.0'\n      full_version: '12.0.1'\n      ubuntu: '18.04'\n      vs_generator: 'Visual Studio 16 2019'\n      vs_version_str: 'vs2019'\n```"}
{"id": "63c498e633b087f6bde3bbe1", "level": "level3", "llm_response": "```yaml\nname: Backport Assistant Runner\n\non:\n  pull_request:\n", "answer": "```yaml ---\nname: Backport Assistant Runner\n\non:\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n\njobs:\n  backport:\n    if: github.event.pull_request.merged\n    runs-on: ubuntu-latest\n    container: hashicorpdev/backport-assistant:0.2.3\n    steps:\n      - name: Backport changes to stable-website\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>website)\"\n          BACKPORT_TARGET_TEMPLATE: \"stable-{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n      - name: Backport changes to targeted release branch\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>\\\\d+\\\\.\\\\d+\\\\.[+\\\\w]+)\"\n          BACKPORT_TARGET_TEMPLATE: \"release/{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n```"}
{"id": "63c4a1a11842bc13d77a50d6", "level": "level3", "llm_response": "```yml\nname: build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: Build\n\n    strategy:\n      matrix:\n        os:\n          - macos-latest\n          - ubuntu-latest\n          - windows-latest\n        browser:\n          - ChromeHeadless\n          - FirefoxHeadless\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build --if-present\n\n      - name: Test\n        run: npm test -- --browsers ${{ matrix.browser }}\n\n      - name: Diff\n        run: git diff --exit-code\n```"}
{"id": "63c4a17bb008460c1df5aa2b", "level": "level3", "llm_response": "```yml\nname: CloseStaleIssue\non:\n  schedule:\n", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path\n\nname: CloseStaleIssue\n\non:\n   schedule: \n       - cron: '1 15 1/2 * *'\n       \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close issues of hosts label\n      uses: actions/github-script@0.4.0\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          let response = await github.issues.listForRepo({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            state: 'open'\n          });\n          let data = response['data'];\n          \n          data.forEach(function(issue){\n            var labels = issue['labels'];\n            var is2Deal = true;\n            for(var i=0,l=labels.length;i<l;i++){\n                if(labels[i]['name'] == 'pending' || labels[i]['name'] == 'help wanted' || labels[i]['name'] == 'instruction'){\n                    is2Deal = false;\n                    break;\n                }\n            }\n            if(is2Deal){\n                var updated_at = new Date(issue['updated_at']);\n                var time_now = new Date();\n                var deta = time_now.getTime() - updated_at.getTime();\n                console.log('deta: ' + deta);\n                if(deta < 1000*60*60*24*30){\n                    is2Deal = false;\n                }   \n            }\n            if(is2Deal){\n                var id = issue['number'];\n                github.issues.createComment({\n                    owner: context.repo.owner,\n                    repo: context.repo.repo,\n                    issue_number: id,\n                    body: '\u7531\u4e8e\u957f\u671f\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\uff0c\u8be5\u95ee\u9898\u81ea\u52a8\u5173\u95ed\u3002\u5982\u6709\u9700\u8981\u53ef\u91cd\u65b0\u6253\u5f00\u3002'\n                });\n                github.issues.update({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: id,\n                  state: 'closed'\n                });\n            }                \n          });\n\n    \n\n\n```"}
{"id": "63c497ab1899db58864db0f4", "level": "level3", "llm_response": "```yml\nname: Release\non:\n  release:\n    types:", "answer": "```yaml ---\n# https://github.com/marketplace/actions/actions-tagger\nname: release\n\n\"on\":\n  release:\n    types: [published, edited]\n  workflow_dispatch:\n\njobs:\n  actions-tagger:\n    runs-on: windows-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n```"}
{"id": "63c49b8f517fc08c1eef11c2", "level": "level3", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  branch:\n    -", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f1833b087f6bde640c7", "level": "level3", "llm_response": "```yml\nname: Integration tests\non:\n  event:\n    types", "answer": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n    inputs:\n      test:\n        description: the integration test to run\n        default: fairscale_benchmarks\n        required: true\n        type: choice\n        options:\n          - fairscale_benchmarks\n      cluster:\n        description: the beaker cluster to run the test on\n        default: ai2/tango-integration-tests\n        required: true\n        type: choice\n        options:\n          - ai2/tango-integration-tests\n          - ai2/allennlp-cirrascale\n  # Uncomment this trigger to test changes on a pull request.\n  # You also have to uncomment the lines below that mention 'for pull request checks'\n  # pull_request:\n  #   branches:\n  #     - '*'\n\njobs:\n  run_test:\n    name: ${{ github.event.inputs.test }}\n    # name: fairscale_benchmarks  # for pull request checks\n    runs-on: [ubuntu-latest]\n    timeout-minutes: 60\n    env:\n      TEST_NAME: ${{ github.event.inputs.test }}\n      # TEST_NAME: fairscale_benchmarks  # for pull request checks\n      BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}\n      BEAKER_WORKSPACE: ai2/tango-integration-tests\n      BEAKER_CLUSTER: ${{ github.event.inputs.cluster }}\n      # BEAKER_CLUSTER: ai2/allennlp-cirrascale  # for pull request checks\n      IMAGE_NAME: petew/tango-testing\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Validate inputs\n        run: |\n          # The 'test' input should be a directory in `integration_tests/`\n          test -d \"integration_tests/${TEST_NAME}\"\n\n      - name: Determine current commit SHA (pull request)\n        if: github.event_name == 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\n      - name: Determine current commit SHA (push)\n        if: github.event_name != 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=$GITHUB_SHA\" >> $GITHUB_ENV\n\n      - name: Install beaker client\n        shell: bash\n        run: |\n          mkdir -p \"$HOME/bin\"\n\n          # Download and install from latest GitHub release.\n          curl -s https://api.github.com/repos/allenai/beaker/releases/latest \\\n            | grep 'browser_download_url.*linux' \\\n            | cut -d '\"' -f 4 \\\n            | wget -qi - \\\n          && tar -xvzf beaker_linux.tar.gz -C \"$HOME/bin\"\n\n          # Add to path.\n          echo \"$HOME/bin\" >> \"$GITHUB_PATH\"\n\n      - name: Verify beaker install\n        run: |\n          beaker account whoami\n\n      - name: Create beaker experiment config\n        run: |\n          cat >beaker_config.yml << EOL\n          version: v2-alpha\n          description: ${{ env.TEST_NAME }}\n          tasks:\n            - name: test\n              image:\n                beaker: ${{ env.IMAGE_NAME }}\n              command: [\"/entrypoint.sh\", \"integration_tests/${{ env.TEST_NAME }}/run.sh\"]\n              envVars:\n                - name: COMMIT_SHA\n                  value: $COMMIT_SHA\n                - name: WANDB_API_KEY\n                  secret: WANDB_API_KEY\n                - name: FILE_FRIENDLY_LOGGING\n                  value: \"true\"\n                - name: TOKENIZERS_PARALLELISM  # set this to avoid warnings\n                  value: \"true\"\n                - name: PYTHONUNBUFFERED\n                  value: \"true\"\n              result:\n                path: '/results'\n              resources:\n                gpuCount: 4\n              context:\n                cluster: ${{ env.BEAKER_CLUSTER }}\n                priority: normal\n          EOL\n          cat beaker_config.yml\n\n      - name: Submit beaker job\n        run: |\n          TIMESTAMP=$(date +%H%M%S)\n          EXPERIMENT=$(beaker experiment create beaker_config.yml --workspace $BEAKER_WORKSPACE --name \"${TEST_NAME}-${{ github.run_number }}-${TIMESTAMP}\" | awk '{print $2}')\n          if [ -z \"$EXPERIMENT\" ]; then\n            exit 1\n          else\n            echo \"EXPERIMENT=$EXPERIMENT\" >> $GITHUB_ENV\n            echo \"Experiment $EXPERIMENT submitted. See progress at https://beaker.org/ex/$EXPERIMENT\"\n          fi\n\n      - name: Wait for job to finish\n        run: |\n          beaker experiment await $EXPERIMENT test finalized --timeout 60m\n          # Check the job's exit code.\n          test $(beaker experiment get $EXPERIMENT --format=json | jq '.[0].jobs[0].status.exitCode') -eq 0\n\n      - name: Get logs\n        if: always()\n        run: |\n          # EXPERIMENT could be empty if the submission step failed.\n          # We'll exit right away if that's the case.\n          if [ -z \"$EXPERIMENT\" ]; then\n            echo \"No logs to show\"\n            exit 0\n          fi\n\n          # Download logs from beaker.\n          beaker experiment results $EXPERIMENT --prefix out.log --output results\n\n          # If the experiment failed during startup, there might not be any logs.\n          if [ -f results/test/out.log ]; then\n            echo \"\"\n            echo \">>> Logs:\"\n            echo \"\"\n            cat results/test/out.log\n          else\n            echo \"No logs to show\"\n          fi\n\n      - name: Stop job\n        if: cancelled()\n        run: |\n          if [ ! -z \"$EXPERIMENT\" ]; then\n            beaker experiment stop $EXPERIMENT\n          fi\n```"}
{"id": "63c497d86fc19abdf9ca540a", "level": "level3", "llm_response": "```yaml\nname: Tools\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Tools\n\non:\n push:\n  paths:\n  - '.github/workflows/tools.undatui.yml'\n  - 'Tools/UndatUI/src/**'\n\ndefaults:\n run:\n  shell: bash\n\nenv:\n DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n\n UndatUI:\n  runs-on: windows-2019\n  steps:\n\n  - name: Clone\n    uses: actions/checkout@v3\n\n  - name: Build\n    run:  |\n          :\n          MSBUILD_EXE=\"$(\"/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe\" -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)\"\n          \"$MSBUILD_EXE\" Tools/UndatUI/src/undat.sln -p:Configuration=Release\n```"}
{"id": "63c4a07ab008460c1df54484", "level": "level3", "llm_response": "```yaml\nname: Docker Build\n\non:\n  release:\n    types:", "answer": "```yaml name: 'Docker Build'\non:\n  release:\n    types: [released]\n\njobs:\n  build:\n    name: Dispatch release event to tobybatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Emit repository_dispatch\n        uses: mvasigh/dispatch-action@1.1.6\n        with:\n          token: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          repo: kimai2\n          owner: tobybatch\n          event_type: kimai_release\n```"}
{"id": "63c49a5acbc73931bb1933d0", "level": "level3", "llm_response": "```yml\nname: Kind Cluster E2E tests\n\non:\n ", "answer": "```yaml name: Kind Cluster E2E tests\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@v1.4.0\n        with:\n          version: v0.14.0\n          kubectl_version: v1.25.0\n          cluster_name: kinder\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-go@v3 # default version of go is 1.10\n        with:\n          go-version: \"1.19\"\n      - name: Install Carvel Tools\n        run: ./hack/install-deps.sh\n      # Run benchmark with `go test -bench` and stores the output to a file\n      - name: Install kc and run e2e tests on kind\n        run: |\n          set -e -x\n          kubectl version --short\n\n          source ./hack/version-util.sh\n\n          ytt -f config/ -v kapp_controller_version=\"$(get_kappctrl_ver)+develop\" | kbld -f- > kbld.out 2> kbldmeta.out\n          cat kbldmeta.out | tail -n 1 | sed 's/.*final: kapp-controller -> \\(.*\\)$/\\1/p'  | tail -n 1 | xargs kind load docker-image --name kinder\n          kapp deploy -a kc -f kbld.out -c -y\n\n          export KAPPCTRL_E2E_SECRETGEN_CONTROLLER=true\n          source ./hack/secretgen-controller.sh\n          deploy_secretgen-controller\n\n          mkdir tmp\n          KAPPCTRL_E2E_NAMESPACE=kappctrl-test eval './hack/test-e2e.sh'\n```"}
{"id": "63c4989533b087f6bde39d3c", "level": "level3", "llm_response": "```yml\nname: Stats\non:\n  schedule:\n    - cron", "answer": "```yaml on:\n  schedule:\n    # https://crontab.guru/once-a-day\n    - cron: 0 0 * * *\n  workflow_dispatch: {}\n\nname: Stats\njobs:\n  stats:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: gr2m/app-stats-action@v1.x\n        id: stats\n        with:\n          id: ${{ secrets.SETTINGS_APP_ID }}\n          private_key: ${{ secrets.SETTINGS_PRIVATE_KEY }}\n      - run: \"echo installations: '${{ steps.stats.outputs.installations }}'\"\n      - run: \"echo suspended: '${{ steps.stats.outputs.suspended_installations }}'\"\n      - run: \"echo repositories: '${{ steps.stats.outputs.repositories }}'\"\n      - run: \"echo most popular repositories: '${{ steps.stats.outputs.popular_repositories }}'\"\n```"}
{"id": "63c49aefcbc73931bb196efd", "level": "level3", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n  schedule:\n    - cron: '41 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          # If you wish to specify custom queries, you can do so here or in a config file.\n          # By default, queries listed here will override any specified in a config file.\n          # Prefix the list here with \"+\" to use these queries and those in the config file.\n          # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e671842bc13d7790940", "level": "level3", "llm_response": "```yml\n---\nname: Auto-merge Dependabot PRs\n", "answer": "```yaml name: Auto-merge Dependabot PRs\non:\n  schedule:\n    - cron: '0 * * * *'\njobs:\n  auto_merge:\n    name: Auto-merge Dependabot PRs\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: akheron/dependabot-cron-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          auto-merge: 'minor'\n          merge-method: 'rebase'\n```"}
{"id": "63c49e7a517fc08c1ef03b74", "level": "level3", "llm_response": "```yaml\nname: Check links\non:\n  branches:\n    - main", "answer": "```yaml name: Check links\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron:  '0 12 */7 * *'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n    - name: Install Awesome Bot\n      run: gem install awesome_bot\n    - name: Run Awesome Bot\n      run: awesome_bot README.md --request-delay 1 --allow-ssl --allow-timeout -t 5 --allow-dupe --white-list sho.rt,your.site,long.url,awesome.re\n    - uses: actions/upload-artifact@v3\n      if: failure()\n      with:\n        name: ab-results\n        path: ab-results-README.md-filtered.json\n```"}
{"id": "63c49b2eb008460c1df32a6d", "level": "level3", "llm_response": "```yaml\nname: License\non:\n  pull_request:\n    branches:\n", "answer": "```yaml # Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: License\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\npermissions: read-all\njobs:\n  license:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[skip ci]')\"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n        id: go\n      - name: license\n        run: |\n          export PATH=${PATH}:`go env GOPATH`/bin\n          make license\n```"}
{"id": "63c49a16cbc73931bb1919aa", "level": "level3", "llm_response": "```yaml\nname: Flatpak dependency updates\n\non:\n  schedule:\n   ", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```"}
{"id": "63c499411e3364807578cbd2", "level": "level3", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ 3.X.X-Branch ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ 3.X.X-Branch ]\n  schedule:\n    - cron: '0 20 * * 6'\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: ${{ matrix.language }}\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497691e33648075780df0", "level": "level3", "llm_response": "```yaml\nname: Publish Project to Gradle Plugin Portal\n\non:\n ", "answer": "```yaml name: Publish Project to Gradle Plugin Portal\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'usefulness/easylauncher-gradle-plugin'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n\n      - uses: gradle/gradle-build-action@v2\n\n      - name: Build app with Gradle\n        run: ./gradlew build\n\n      - name: Publish to Gradle Plugin Portal\n        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.gradle_publish_key }} -Pgradle.publish.secret=${{ secrets.gradle_publish_secret }}\n\n      - name: Publish to Github Package Registry\n        run: ./gradlew publish --continue || true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499671842bc13d77707f8", "level": "level3", "llm_response": "```yml\n---\nname: Create and publish a Docker image\non:\n", "answer": "```yaml name: Create and publish a Docker image\n\non: [push]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            # set latest tag for default branch\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```"}
{"id": "63c49c8e517fc08c1eef73f9", "level": "level3", "llm_response": "```yml\n---\nname: Brick Build\non:\n  push:\n   ", "answer": "```yaml name: Brick Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"packages/brick_build/**\"\n      - \".github/workflows/brick_build.yaml\"\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    uses: ./.github/workflows/reusable-dart-analyze-format-test.yaml\n    with:\n      package: brick_build\n```"}
{"id": "63c49aa1cbc73931bb194f0a", "level": "level3", "llm_response": "```yaml\nname: Sync workflows for GHES\n\non:\n  branch:\n", "answer": "```yaml name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n```"}
{"id": "63c49b936fc19abdf9cbd6f7", "level": "level3", "llm_response": "```yml\n---\nname: Deploy\non:\n  release:\n    types", "answer": "```yaml ---\nname: Deploy\n\n# yamllint disable-line rule:truthy\non:\n  release:\n    types:\n      - published\n  workflow_run:\n    workflows: [\"CI\"]\n    branches: [main]\n    types:\n      - completed\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/addon-deploy.yaml@main\n    secrets:\n      CAS_API_KEY: ${{ secrets.CAS_API_KEY }}\n      DISPATCH_TOKEN: ${{ secrets.DISPATCH_TOKEN }}\n```"}
{"id": "63c496ed6fc19abdf9c9f2dc", "level": "level3", "llm_response": "```yml\nname: Release Notes\non:\n  branch:\n    default", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Release Notes'\n\non:\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: 'Branch'\n        required: true\n        default: 'main'\n      start-rev:\n        description: 'Start Tag (defaults to merge-base(branch, prev-branch))'\n        required: false\n      end-rev:\n        description: 'End Tag (defaults to HEAD of the target branch)'\n        required: false\n\njobs:\n  release-notes:\n    uses: knative/actions/.github/workflows/release-notes.yaml@main\n    with:\n      branch: ${{ github.event.inputs.branch }}\n      start-rev: ${{ github.event.inputs.start-rev }}\n      end-rev: ${{ github.event.inputs.end-rev }}\n```"}
{"id": "63c49ddd517fc08c1eeffa78", "level": "level3", "llm_response": "```yml\nname: SVGOptimizer\non:\n  pull_request", "answer": "```yaml name: SVGOptimizer\non:\n  # Disable the following line if you don't want the Action to run on PRs.\n  pull_request:\n    paths:\n      - '**.svg'\n# Enable the following line if you want the Action to run on regular pushes.\n#  push:\n# Enable the following lines if you want the Action to run on a schedule.\n#  schedule:\n#  - cron:  '0 * * * 1'  # See https://crontab.guru/\n# Enable one of the following lines if you want to manually trigger the Action.\n#  repository_dispatch:\n#  workflow_dispatch:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ericcornelissen/svgo-action@v1\n        with:\n          test-run: false\n          svgo-version: 2\n          svgo-options: svgo.config.js\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d52517fc08c1eefc15c", "level": "level3", "llm_response": "```yaml\nname: External Trigger Main\n\non:\n  branches:\n    -", "answer": "```yaml name: External Trigger Main\n\non:\n  workflow_dispatch:\n\njobs:\n  external-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n\n      - name: External Trigger\n        if: github.ref == 'refs/heads/master'\n        run: |\n          if [ -n \"${{ secrets.PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER }}\" ]; then\n            echo \"**** Github secret PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER is set; skipping trigger. ****\"\n            exit 0\n          fi\n          echo \"**** External trigger running off of master branch. To disable this trigger, set a Github secret named \\\"PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER\\\". ****\"\n          echo \"**** Retrieving external version ****\"\n          EXT_RELEASE=$(curl -u \"${{ secrets.CR_USER }}:${{ secrets.CR_PAT }}\" -sX GET \"https://api.github.com/repos/Tautulli/Tautulli/releases/latest\" | jq -r '. | .tag_name')\n          if [ -z \"${EXT_RELEASE}\" ] || [ \"${EXT_RELEASE}\" == \"null\" ]; then\n            echo \"**** Can't retrieve external version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve external version for tautulli branch master\"\n            GHA_TRIGGER_URL=\"https://github.com/linuxserver/docker-tautulli/actions/runs/${{ github.run_id }}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n**Trigger URL:** '\"${GHA_TRIGGER_URL}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')\n          echo \"**** External version: ${EXT_RELEASE} ****\"\n          echo \"**** Retrieving last pushed version ****\"\n          image=\"linuxserver/tautulli\"\n          tag=\"latest\"\n          token=$(curl -sX GET \\\n            \"https://ghcr.io/token?scope=repository%3Alinuxserver%2Ftautulli%3Apull\" \\\n            | jq -r '.token')\n            multidigest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${tag}\" \\\n              | jq -r 'first(.manifests[].digest)')\n            digest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${multidigest}\" \\\n              | jq -r '.config.digest')\n          image_info=$(curl -sL \\\n            --header \"Authorization: Bearer ${token}\" \\\n            \"https://ghcr.io/v2/${image}/blobs/${digest}\" \\\n            | jq -r '.container_config')\n          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')\n          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')\n          if [ -z \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Can't retrieve last pushed version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve last pushed version for tautulli tag latest\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          echo \"**** Last pushed version: ${IMAGE_VERSION} ****\"\n          if [ \"${EXT_RELEASE}\" == \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Version ${EXT_RELEASE} already pushed, exiting ****\"\n            exit 0\n          elif [ $(curl -s https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/lastBuild/api/json | jq -r '.building') == \"true\" ]; then\n            echo \"**** New version ${EXT_RELEASE} found; but there already seems to be an active build on Jenkins; exiting ****\"\n            exit 0\n          else\n            echo \"**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build ****\"\n            response=$(curl -iX POST \\\n              https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/buildWithParameters?PACKAGE_CHECK=false \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} | grep -i location | sed \"s|^[L|l]ocation: \\(.*\\)|\\1|\")\n            echo \"**** Jenkins job queue url: ${response%$'\\r'} ****\"\n            echo \"**** Sleeping 10 seconds until job starts ****\"\n            sleep 10\n            buildurl=$(curl -s \"${response%$'\\r'}api/json\" | jq -r '.executable.url')\n            buildurl=\"${buildurl%$'\\r'}\"\n            echo \"**** Jenkins job build url: ${buildurl} ****\"\n            echo \"**** Attempting to change the Jenkins job description ****\"\n            curl -iX POST \\\n              \"${buildurl}submitDescription\" \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \\\n              --data-urlencode \"description=GHA external trigger https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\" \\\n              --data-urlencode \"Submit=Submit\"\n            echo \"**** Notifying Discord ****\"\n            TRIGGER_REASON=\"A version change was detected for tautulli tag latest. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n              \"description\": \"**Build Triggered** \\n**Reason:** '\"${TRIGGER_REASON}\"' \\n**Build URL:** '\"${buildurl}display/redirect\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n          fi\n```"}
{"id": "63c49ee31e336480757b05b6", "level": "level3", "llm_response": "```yml\nname: goreleaser\non:\n  push:\n   ", "answer": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Post release\n        run: ls -l ./dist/*```"}
{"id": "63c4a0a1517fc08c1ef11043", "level": "level3", "llm_response": "```yml\nname: Greetings\n\non:\n  pull_request:\n   ", "answer": "```yaml # YOLOv5 \ud83d\ude80 by Ultralytics, GPL-3.0 license\n\nname: Greetings\n\non:\n  pull_request_target:\n    types: [opened]\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for submitting a YOLOv5 \ud83d\ude80 PR! To allow your work to be integrated as seamlessly as possible, we advise you to:\n\n            - \u2705 Verify your PR is **up-to-date** with `ultralytics/yolov5` `master` branch. If your PR is behind you can update your code by clicking the 'Update branch' button or by running `git pull` and `git merge master` locally.\n            - \u2705 Verify all YOLOv5 Continuous Integration (CI) **checks are passing**.\n            - \u2705 Reduce changes to the absolute **minimum** required for your bug fix or feature addition. _\"It is not daily increase but daily decrease, hack away the unessential. The closer to the source, the less wastage there is.\"_  \u2014 Bruce Lee\n\n          issue-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for your interest in YOLOv5 \ud83d\ude80! Please visit our \u2b50\ufe0f [Tutorials](https://github.com/ultralytics/yolov5/wiki#tutorials) to get started, where you can find quickstart guides for simple tasks like [Custom Data Training](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data) all the way to advanced concepts like [Hyperparameter Evolution](https://github.com/ultralytics/yolov5/issues/607).\n\n            If this is a \ud83d\udc1b Bug Report, please provide screenshots and **minimum viable code to reproduce your issue**, otherwise we can not help you.\n\n            If this is a custom training \u2753 Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online [W&B logging](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize) if available.\n\n            For business inquiries or professional support requests please visit https://ultralytics.com or email support@ultralytics.com.\n\n            ## Requirements\n\n            [**Python>=3.7.0**](https://www.python.org/) with all [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) installed including [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/). To get started:\n            ```bash\n            git clone https://github.com/ultralytics/yolov5  # clone\n            cd yolov5\n            pip install -r requirements.txt  # install\n            ```\n\n            ## Environments\n\n            YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):\n\n            - **Notebooks** with free GPU: <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a> <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a> <a href=\"https://www.kaggle.com/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n            - **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/GCP-Quickstart)\n            - **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/AWS-Quickstart)\n            - **Docker Image**. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/Docker-Quickstart) <a href=\"https://hub.docker.com/r/ultralytics/yolov5\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov5?logo=docker\" alt=\"Docker Pulls\"></a>\n\n            ## Status\n\n            <a href=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv5 CI\"></a>\n\n            If this badge is green, all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 [training](https://github.com/ultralytics/yolov5/blob/master/train.py), [validation](https://github.com/ultralytics/yolov5/blob/master/val.py), [inference](https://github.com/ultralytics/yolov5/blob/master/detect.py), [export](https://github.com/ultralytics/yolov5/blob/master/export.py) and [benchmarks](https://github.com/ultralytics/yolov5/blob/master/benchmarks.py) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n\n```"}
{"id": "63c49dd4517fc08c1eeff6b7", "level": "level3", "llm_response": "```yml\nname: check-permissions\n\non:\n  push:\n   ", "answer": "```yaml name: check-permissions\non: [push, pull_request]\njobs:\n  check-permissions:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Check permissions on swizzin files\n        run: ./.github/scripts/check-permissions.sh\n```"}
{"id": "63c499771899db58864e6cab", "level": "level3", "llm_response": "```yml\n---\nname: Dependabot auto-merge\non:\n", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49f061899db588650a81b", "level": "level3", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non: [push, pull_request]\n\npermissions: read-all\n\nenv:\n  XCODE_WORKSPACE: \"Rectangle.xcworkspace\"\n  XCODE_SCHEME: \"Rectangle\"\n  CODE_SIGN_IDENTITY: \"-\"\n  BUILD_DIR: \"build\"\n  XCODE_ARCHIVE: \"Rectangle.xcarchive\"\n  APP_NAME: \"Rectangle.app\"\n  EXPORT_OPTIONS_PLIST: \"exportOptions.plist\"\n  DMG_NAME: \"Rectangle\"\n  DMG_FILE_NAME: \"Rectangle.dmg\"\n\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Install Dependencies\n      run: |\n        pod repo update\n        pod install\n    - name: Build\n      run: xcodebuild -workspace \"$XCODE_WORKSPACE\" -scheme \"$XCODE_SCHEME\" archive CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\"\n    - name: Export\n      run: |\n        plutil -convert xml1 - -o \"$EXPORT_OPTIONS_PLIST\" << EOF\n          {\n            \"destination\": \"export\",\n            \"method\": \"mac-application\"\n          }\n        EOF\n\n        xcodebuild -exportArchive -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\" -exportPath \"$BUILD_DIR\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST\"\n    - name: Resign App\n      run: codesign --force --deep -s \"$CODE_SIGN_IDENTITY\" \"$BUILD_DIR/$APP_NAME\"\n    - name: Make DMG\n      run: hdiutil create -srcdir \"$BUILD_DIR\" -volname \"$DMG_NAME\" \"$DMG_FILE_NAME\"\n    - name: Upload\n      uses: actions/upload-artifact@v3\n      with:\n        name: Build\n        path: ${{ env.DMG_FILE_NAME }}\n```"}
{"id": "63c49de733b087f6bde5c4d9", "level": "level3", "llm_response": "```yaml\nname: Compile Examples\non:\n  push:\n    branches:\n", "answer": "```yaml name: Compile Examples\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  pull_request:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by changes to external resources (libraries, platforms).\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  build:\n    name: ${{ matrix.board.fqbn }}\n    runs-on: ubuntu-latest\n\n    env:\n      SKETCHES_REPORTS_PATH: sketches-reports\n\n    strategy:\n      fail-fast: false\n\n      matrix:\n        board:\n          - fqbn: arduino:avr:nano\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:mega\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:leonardo\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:megaavr:nona4809\n            platforms: |\n              - name: arduino:megaavr\n          - fqbn: arduino:sam:arduino_due_x_dbg\n            platforms: |\n              - name: arduino:sam\n          - fqbn: arduino:samd:mkrzero\n            platforms: |\n              - name: arduino:samd\n          - fqbn: arduino:mbed_portenta:envie_m4\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_portenta:envie_m7\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_nano:nano33ble\n            platforms: |\n              - name: arduino:mbed_nano\n          - fqbn: arduino:mbed_nano:nanorp2040connect\n            platforms: |\n              - name: arduino:mbed_nano\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Compile examples\n        uses: arduino/compile-sketches@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          fqbn: ${{ matrix.board.fqbn }}\n          platforms: ${{ matrix.board.platforms }}\n          libraries: |\n            # Install the library from the local path.\n            - source-path: ./\n            # Additional library dependencies can be listed here.\n            # See: https://github.com/arduino/compile-sketches#libraries\n          sketch-paths: |\n            - examples\n          enable-deltas-report: true\n          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}\n\n      - name: Save sketches report as workflow artifact\n        uses: actions/upload-artifact@v3\n        with:\n          if-no-files-found: error\n          path: ${{ env.SKETCHES_REPORTS_PATH }}\n          name: ${{ env.SKETCHES_REPORTS_PATH }}\n```"}
{"id": "63c4946f8052faa2781ab2f2", "level": "level3", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        include:\n          - os: ubuntu-latest\n            target: x86_64-unknown-linux-gnu\n            target_alias: linux-x86_64\n            bin_suffix: ''\n            archive_suffix: '.tar.bz2'\n          - os: windows-latest\n            target: x86_64-pc-windows-msvc\n            target_alias: win-x86_64-msvc\n            bin_suffix: '.exe'\n            archive_suffix: '.zip'\n    defaults:\n      run:\n        shell: bash\n    env:\n      ARCHIVE_PATH: encrypted-dns_${{ github.ref_name }}_${{ matrix.target_alias }}${{ matrix.archive_suffix }}\n\n    steps:\n      - uses: actions/checkout@master\n\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n          targets: ${{ matrix.target }}\n\n      - name: Check Cargo availability\n        run: cargo --version\n\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n\n      - name: Build\n        run: |\n          echo 'lto = \"fat\"' >> Cargo.toml\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo build --release\n          mkdir encrypted-dns\n          cp target/release/encrypted-dns${{ matrix.bin_suffix }} encrypted-dns/\n          cp README.md example-encrypted-dns.toml encrypted-dns/\n          if [ \"${{ matrix.os }}\" = \"ubuntu-latest\" ]; then\n            tar cjpf ${ARCHIVE_PATH} encrypted-dns\n          elif [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n            \"/C/Program Files/7-Zip/7z\" a ${ARCHIVE_PATH} encrypted-dns\n          fi\n\n      - name: Install cargo-deb and build Debian package\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |\n          cargo install --debug cargo-deb\n          cargo deb --output=encrypted-dns_${{ github.ref_name }}_amd64.deb --no-build\n\n      - uses: actions/upload-artifact@master\n        with:\n          name: encrypted-dns_${{ matrix.target_alias }}\n          path: ${{ env.ARCHIVE_PATH }}\n\n      - uses: actions/upload-artifact@master\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        with:\n          name: encrypted-dns_deb-amd64\n          path: encrypted-dns_${{ github.ref_name }}_amd64.deb\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          name: Release ${{ github.ref_name }}\n          draft: true\n          prerelease: false\n          files: |\n            encrypted-dns_deb-amd64/*.deb\n            encrypted-dns_linux-x86_64/*.tar.bz2\n            encrypted-dns_win-x86_64-msvc/*.zip\n```"}
{"id": "63c494d17843b61269a0399a", "level": "level3", "llm_response": "```yaml\nname: Windows\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Windows\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        ruby:\n          - '3.0'\n          - '2.7'\n          - '2.6'\n          - '2.5'\n          - 'head'\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1.64.1\n      with:\n        ruby-version: ${{ matrix.ruby }}\n        bundler-cache: true\n    - name: Run test\n      run: |\n        rake test\n    - name: Run packaging\n      run: |\n        rake package\n        gem install --local pkg/gem-compiler-*.gem\n```"}
{"id": "63c4a0ee1899db5886516bef", "level": "level3", "llm_response": "```yaml\nname: seqr prod release\n\non:\n  branch:\n   ", "answer": "```yaml name: seqr prod release\non:\n  workflow_run:\n    workflows: [\"Unit Tests\"]\n    types:\n      - completed\n    branches:\n      - master\n\npermissions:\n  id-token: write\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n\n      - name: authenticate to google cloud\n        id: \"auth\"\n        uses: google-github-actions/auth@v0\n        with:\n          workload_identity_provider: \"${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}\"\n          service_account: \"${{ secrets.RUN_SA_EMAIL }}\"\n\n      - name: \"setup gcloud sdk\"\n        uses: google-github-actions/setup-gcloud@v0\n\n      - name: Build and push images\n        run: |-\n          gcloud builds submit --quiet --substitutions=\"COMMIT_SHA=${{ github.event.workflow_run.head_sha }},_CUSTOM_BRANCH_TAG=gcloud-prod\" --config .cloudbuild/seqr-docker.cloudbuild.yaml --gcs-log-dir=gs://seqr-github-actions-logs/logs .\n\n  helm_update:\n    runs-on: ubuntu-latest\n    needs: docker\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: broadinstitute/seqr-helm\n          ref: main\n          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token\n          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo\n\n      - name: Update appVersion in seqr Chart file\n        uses: mikefarah/yq@v4.22.1\n        with:\n          cmd: >\n            yq -i '.appVersion = \"${{ github.event.workflow_run.head_sha }}\"' charts/seqr/Chart.yaml\n\n      - name: Commit and Push changes\n        uses: Andro999b/push@v1.3\n        with:\n          repository: broadinstitute/seqr-helm\n          branch: main\n          github_token: ${{ secrets.SEQR_VERSION_UPDATE_TOKEN }}\n          author_email: ${{ github.actor }}@users.noreply.github.com\n          author_name: tgg-automation\n          message: \"Update seqr chart appVersion to ${{ github.event.workflow_run.head_sha }}\"\n```"}
{"id": "63c49fb3cbc73931bb1b59fe", "level": "level3", "llm_response": "```yml\n---\nname: Add issues to React Native Bug Board\n\non", "answer": "```yaml name: Add issues to React Native Bug Board\r\n\r\non:\r\n  issues:\r\n    types:\r\n      - opened\r\n\r\njobs:\r\n  add-to-project:\r\n    name: Add issue to project\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/add-to-project@main\r\n        with:\r\n          project-url: https://github.com/orgs/microsoft/projects/235\r\n          github-token: ${{ secrets.RNBOT_GH_TOKEN }}\r\n```"}
{"id": "63c4a0b71899db5886515740", "level": "level3", "llm_response": "```yaml\nname: CI\non:\n  pull_request:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  pull_request:\n    branches: [master]\n  push:\n    branches: [master]\n    tags: '*'\n\nconcurrency: \n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        version:\n          - '1.0'\n          - '1'\n          - 'nightly'\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        arch: [x64]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.version }}\n          arch: ${{ matrix.arch }}\n      - uses: julia-actions/cache@v1\n      - uses: julia-actions/julia-buildpkg@latest\n      - uses: julia-actions/julia-runtest@latest\n      - uses: julia-actions/julia-processcoverage@latest\n      - uses: codecov/codecov-action@v3\n        with:\n          file: lcov.info\n```"}
{"id": "63c495638052faa2781b17aa", "level": "level3", "llm_response": "```yml\nname: Build wheels\n\non:\n  push:\n    branches", "answer": "```yaml name: Build wheels\n\non:\n  # Trigger on pushes to the mainline branches and version tags. This prevents building commits\n  # twice when the pull request source branch is in the same repository.\n  push:\n    branches:\n      - \"master\"\n      - \"next\"\n    tags:\n      - \"v*\"\n\n  pull_request:\n      types: [opened, labeled, reopened, synchronize]\n\n  # Trigger on request.\n  workflow_dispatch:\n\nenv:\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\njobs:\n  build_wheels:\n    name: Build wheel for ${{ matrix.os }}, Python ${{ matrix.pyver }}\n    runs-on: ${{ matrix.os }}\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, macos-12] #, windows-2019]\n        pyver: [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.10.2\n        env:\n          # Build for cpython >= 3.6.\n          CIBW_PROJECT_REQUIRES_PYTHON: \"==${{ matrix.pyver }}.*\"\n          CIBW_SKIP: \"{pp*,*-musllinux_*}\"\n\n          # Build only on 64-bit architectures.\n          CIBW_ARCHS_MACOS: \"x86_64 arm64\"\n          CIBW_ARCHS_LINUX: auto64\n          CIBW_ARCHS_WINDOWS: auto64\n\n          # Configure environment variables.\n          CIBW_ENVIRONMENT_LINUX: \"CMAKE_PREFIX_PATH=/project/tbb LD_LIBRARY_PATH=/project/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          CIBW_ENVIRONMENT_MACOS: \"CMAKE_PREFIX_PATH=/Users/runner/work/freud/freud/tbb LD_LIBRARY_PATH=/Users/runner/work/freud/freud/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          MACOSX_DEPLOYMENT_TARGET: \"10.14\"\n\n          # Set up TBB.\n          CIBW_BEFORE_BUILD_LINUX: \"source .github/workflows/cibuildwheel-before-build.sh {package} linux\"\n          CIBW_BEFORE_BUILD_MACOS: \"source .github/workflows/cibuildwheel-before-build.sh {package} macos\"\n          CIBW_BEFORE_BUILD_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-build.ps1 {package}\"\n\n          # Test the wheels.\n          CIBW_BEFORE_TEST_LINUX: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_MACOS: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-test.ps1 {package}\"\n          CIBW_TEST_COMMAND: \"cd {package}/tests && pytest . -v --log-level=DEBUG -n auto\"\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./wheelhouse/*.whl\n\n  build_sdist:\n    name: Build source distribution\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: '3.9'\n\n      - name: Install build requirements\n        run: python3 -m pip --disable-pip-version-check install scikit-build cmake -r requirements.txt --upgrade --progress-bar=off\n\n      - name: Build sdist\n        run: python setup.py sdist\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: dist/*.tar.gz\n\n  upload_pypi:\n    name: Publish [PyPI]\n    needs: [build_wheels, build_sdist]\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: dist\n          path: dist\n\n      - name: Check files\n        run: ls -lR dist\n\n      - name: Upload to PyPI\n        # upload to PyPI on every tag starting with 'v'\n        if: startsWith(github.ref, 'refs/tags/v')\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Upload to TestPyPI\n        # otherwise, upload to TestPyPi when secrets are available\n        if: ${{ !startsWith(github.ref, 'refs/tags/v') && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')) }}\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n          skip_existing: true\n\n      - name: Slack notification\n        if: startsWith(github.ref, 'refs/tags/v') || failure()\n        uses: act10ns/slack@v1.6.0\n        with:\n          status: ${{ job.status }}\n          channel: '#dev-freud'\n```"}
{"id": "63c49d95cbc73931bb1a811c", "level": "level3", "llm_response": "```yml\nname: Build and Publish Documentation\n\non:\n  push:\n", "answer": "```yaml name: Build and Publish Documentation\n\non:\n  # Trigger the workflow on push or pull request,\n  # but only for the main branch\n  push:\n    branches:\n      - master\n  # Also trigger on page_build, as well as release created events\n  page_build:\n  release:\n    types: # This configuration does not affect the page_build event above\n      - created\n\nenv:\n  DOXYGEN_VERSION: Release_1_9_1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      # check out the Arduino-SDI-12 repo\n      - uses: actions/checkout@v3\n        with:\n          path: code_docs/Arduino-SDI-12\n\n      - name: Restore or Cache pip\n        uses: actions/cache@v3.0.11\n        id: cache_pip\n        with:\n          path: ~/.cache/pip\n          # if requirements.txt hasn't changed, then it will be a \"cache hit\" and pip will be restored\n          # if requirements.txt HAS changed, it will be a \"cache miss\" and a new cache of pip will be created if the job completes successfully\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Restore or Cache PlatformIO and Libraries\n        uses: actions/cache@v3.0.11\n        id: cache_pio\n        with:\n          path: ~/.platformio\n          # if nothing in the lock files has changed, then it will be a \"cache hit\"\n          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install PlatformIO\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade platformio\n\n      # Install *all* the dependencies!\n      # We're including the dependencies just so the includes can follow in the doxygen pre-processor\n      - name: Install the dependencies at global level\n        run: |\n          echo \"::debug::Installing greygnome/EnableInterrupt\"\n          pio lib -g install greygnome/EnableInterrupt\n\n      - name: Update Libraries from Cache\n        run: pio lib -g update\n\n      - name: Install GraphViz (dot)\n        run: sudo apt-get -y install graphviz\n\n      - name: Restore or Cache Doxygen\n        id: cache_doxygen\n        uses: actions/cache@v3.0.11\n        with:\n          path: doxygen-src\n          key: ${{ runner.os }}-doxygen-${{ env.DOXYGEN_VERSION }}\n\n      - name: Clone and build doxygen\n        if: steps.cache_doxygen.outputs.cache-hit != 'true'\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/build-install-doxygen.sh\n          sh continuous_integration/build-install-doxygen.sh\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install Pygments and other m.css requirements\n        run: pip3 install jinja2 Pygments beautifulsoup4\n\n      # check out my fork of m.css, for processing Doxygen output\n      - name: Checkout m.css\n        uses: actions/checkout@v3\n        with:\n          # Repository name with owner. For example, actions/checkout\n          repository: SRGDamia1/m.css\n          path: code_docs/m.css\n\n      - name: Generate all the documentation\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/generate-documentation.sh\n          sh continuous_integration/generate-documentation.sh\n\n      - name: Deploy to github pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ${{ github.workspace }}/code_docs/Arduino-SDI-12Doxygen/m.css\n```"}
{"id": "63c4a121517fc08c1ef14262", "level": "level3", "llm_response": "```yml\nname: Fix PHP code style issues\n\non:\n  push", "answer": "```yaml name: Fix PHP code style issues\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  php-code-styling:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n          token: ${{ secrets.COMMIT_TOKEN }}\n\n      - name: Fix PHP code style issues\n        uses: aglipanci/laravel-pint-action@1.0.0\n\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'PHP CS Fixer'\n```"}
{"id": "63c4a0aa33b087f6bde6e0bc", "level": "level3", "llm_response": "```yml\nname: CodeQL\non:\n  branches:\n    -", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '21 0 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript' ]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'temurin'\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718f", "level": "level3", "llm_response": "```yml\nname: Stage\non: manual\njobs:\n  stage", "answer": "```yaml name: Stage\non:\n  workflow_dispatch:\njobs:\n  stage:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: git config\n        env:\n          GPT_USER: ${{ secrets.GPT_USER }}\n        run: |\n          git config --global user.name $GPT_USER\n          git config --global pull.rebase false\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - name: Checkout release branch\n        run: git switch release || git switch -c release\n      - name: Merge main branch to release branch\n        run: git merge -X theirs main\n      - name: Git push\n        run: git push origin release\n```"}
{"id": "63c49d3433b087f6bde57d74", "level": "level3", "llm_response": "```yml\nname: Alpine 3\n\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Alpine 3\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/alpine_3.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: alpine:3\n      caches: apk pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c49e361842bc13d778f5e6", "level": "level3", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n    tags:\n      - v*\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n  \n\njobs:\n  build:\n    uses: benjamin-hodgson/BuildScripts/.github/workflows/dotnet.yml@main\n    with:\n      DOCS_FOLDER: Pidgin.Docs\n    secrets:\n      NUGET_KEY: ${{ secrets.NUGET_KEY }}\n```"}
{"id": "63c49e7033b087f6bde5fc3c", "level": "level3", "llm_response": "```yml\nname: Run unit tests\n\non:\n  pull_request:\n", "answer": "```yaml name: Run unit tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n  # Upload code coverage results when PRs are merged\n  push:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n\nenv:\n  DOTNET_NOLOGO: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v3\n      - name: Setup .NET Core SDKs\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: |\n            3.1.x\n            5.0.x\n            6.0.x\n          source-url: https://nuget.pkg.github.com/graphql-dotnet/index.json\n        env:\n          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n      - name: Disable MSVS Nuget Source # see https://github.com/graphql-dotnet/graphql-dotnet/issues/2422\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        run: dotnet nuget disable source 'Microsoft Visual Studio Offline Packages'\n      - name: Install dependencies\n        working-directory: src\n        run: dotnet restore\n      - name: Check formatting\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: |\n          dotnet format --no-restore --verify-no-changes --severity warn || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\n      - name: Build solution [Release]\n        working-directory: src\n        run: dotnet build --no-restore -c Release\n      - name: Build solution [Debug]\n        working-directory: src\n        run: dotnet build --no-restore -c Debug\n      - name: Test solution [Debug] with code coverage\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build -p:CollectCoverage=true -p:DoesNotReturnAttribute=\"DoesNotReturnAttribute\"\n      - name: Test solution [Debug] without code coverage\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build\n      - name: Upload coverage to codecov\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        uses: codecov/codecov-action@v3\n        with:\n          files: .coverage/GraphQLParser.Tests/coverage.net5.opencover.xml\n\n  buildcheck:\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n      - name: Pass build check\n        if: ${{ needs.test.result == 'success' }}\n        run: exit 0\n      - name: Fail build check\n        if: ${{ needs.test.result != 'success' }}\n        run: exit 1\n```"}
{"id": "63c49fc91899db588650f490", "level": "level3", "llm_response": "```yml\nname: Build & Deploy - BETA linters\n\non", "answer": "```yaml ---\n#########################\n#########################\n## Deploy Docker Image Flavors ##\n#########################\n#########################\n# Documentation:\n# https://help.github.com/en/articles/workflow-syntax-for-github-actions\n#\n\n#######################################\n# Start the job on all push to main #\n#######################################\nname: \"Build & Deploy - BETA linters\"\non:\n  push:\n    branches:\n      - \"main\"\n    paths:\n      - \".github/workflows/**\"\n      - \"Dockerfile\"\n      - \"**/Dockerfile\"\n      - \"flavors/**\"\n      - \"megalinter/**\"\n      - \"mega-linter-runner/**\"\n      - \"**/linter-versions.json\"\n      - \"TEMPLATES/**\"\n      - \".trivyignore\"\n      - \"**/*.sh\"\n      - \"**/*.py\"\n      - \"**/sh/**\"\n\n###############\n# Set the Job #\n###############\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n\n  prepare:\n    name: Prepare matrix\n    runs-on: ubuntu-latest  \n    steps:\n\n    - name: Build unique image name for beta\n      shell: bash\n      run: echo \"UNIQUE_DOCKER_IMAGE_NAME=$(echo beta_$(date '+%Y%m%d-%H%M'))\" >> $GITHUB_ENV\n\n    - name: Prepare result is ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\n      shell: bash\n      run: echo ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}  \n\n    outputs:\n      unique_docker_image_name: \"${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\"  \n\n  build:\n    needs: prepare\n    # Name the Job\n    name: Deploy Docker Image - Beta - Linters\n    # Set the agent to run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        # linters-start\n        linter:\n          [\n            \"ansible_ansible_lint\",\n            \"bash_shellcheck\",\n            \"cloudformation_cfn_lint\",\n            \"dockerfile_hadolint\",\n            \"go_revive\",\n            \"groovy_npm_groovy_lint\",\n            \"java_checkstyle\",\n            \"java_pmd\",\n            \"javascript_es\",\n            \"json_eslint_plugin_jsonc\",\n            \"jsx_eslint\",\n            \"kotlin_ktlint\",\n            \"php_psalm\",\n            \"python_bandit\",\n            \"repository_checkov\",\n            \"repository_devskim\",\n            \"repository_dustilock\",\n            \"repository_gitleaks\",\n            \"repository_secretlint\",\n            \"repository_semgrep\",\n            \"repository_syft\",\n            \"repository_trivy\",\n            \"terraform_tflint\",\n            \"terraform_terrascan\",\n            \"terraform_checkov\",\n            \"tsx_eslint\",\n            \"typescript_es\",\n          ]\n# linters-end\n    # Only run this on the main repo\n    if: github.repository == 'oxsecurity/megalinter' && !contains(github.event.head_commit.message, 'skip deploy')\n    ##################\n    # Load all steps #\n    ##################\n    steps:\n      ##########################\n      # Checkout the code base #\n      ##########################\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      #####################\n      # Run Deploy script #\n      #####################\n      - name: Deploy Beta image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: beta\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      - name: Deploy ${{ needs.prepare.outputs.unique_docker_image_name }} image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: \"${{ needs.prepare.outputs.unique_docker_image_name }}\"\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n          ALWAYS_BUILD: force\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      #####################################\n      # Run Linter test cases #\n      #####################################\n      - name: Run Test Cases\n        shell: bash\n        run: |\n          TEST_KEYWORDS_TO_USE_UPPER=\"${{ matrix.linter }}\"\n          TEST_KEYWORDS_TO_USE=\"${TEST_KEYWORDS_TO_USE_UPPER,,}\"\n          docker run -e TEST_CASE_RUN=true -e OUTPUT_FORMAT=text -e OUTPUT_FOLDER=${GITHUB_SHA} -e OUTPUT_DETAIL=detailed -e GITHUB_SHA=${GITHUB_SHA} -e PAT=\"${{secrets.PAT}}\" -e TEST_KEYWORDS=\"${TEST_KEYWORDS_TO_USE}\" -e MEGALINTER_VOLUME_ROOT=\"${GITHUB_WORKSPACE}\" -v \"/var/run/docker.sock:/var/run/docker.sock:rw\" -v ${GITHUB_WORKSPACE}:/tmp/lint oxsecurity/megalinter-only-${{ matrix.linter }}:beta\n        timeout-minutes: 30\n\n      ##############################################\n      # Check Docker image security with Trivy #\n      ##############################################\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'docker.io/oxsecurity/megalinter-only-${{ matrix.linter }}:beta'\n          format: 'table'\n          exit-code: '1'\n          ignore-unfixed: true\n          security-checks: vuln\n          vuln-type: 'os,library'\n          severity: 'CRITICAL,HIGH'\n          timeout: 10m0s\n```"}
{"id": "63c4996433b087f6bde3f0a1", "level": "level3", "llm_response": "```yml\nname: test\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: test\n\non: [push]\n\njobs:\n  lint:\n    runs-on: 'ubuntu-latest'\n\n    strategy:\n      matrix:\n        node: [14, 16, 18]\n\n    name: Lint (Node ${{ matrix.node }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run stylelint\n      - run: npm run eslint\n\n  test:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Test (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm test\n        env:\n          CI: true\n\n  build-examples:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Build examples (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    needs:\n      - test\n      - lint\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run build\n        env:\n          CI: true\n```"}
{"id": "63c4982f6fc19abdf9ca7842", "level": "level3", "llm_response": "```yaml\nname: Build and publish folly dependency\n\non:\n  event:\n", "answer": "```yaml name: Build and publish folly dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/folly image for a particular version\"\n        default: \"Run\"\n      folly_release:\n        description: \"The folly version to build and publish (e.g. 2021.03.29.00)\"\n        required: true\n        type: string\n      fmt_release:\n        description: \"The fmt version to build and publish (e.g. 7.1.3)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg folly_release=${{ github.event.inputs.folly_release }} \\\n          --build-arg fmt_release=${{ github.event.inputs.fmt_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\" \\\n          -f \"docker/folly/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly\n```"}
{"id": "63c497b6cbc73931bb1820e9", "level": "level3", "llm_response": "```yaml\nname: Lib Injection Test\n\non:\n  pull_request:\n   ", "answer": "```yaml name: \"Lib Injection Test\"\n\non:\n  pull_request:\n  push:\n    branches: [master]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  lib-injection-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d # 1.3.0\n        with:\n          config: k8s/kind-config.yaml\n          kubectl_version: v1.22.10\n          node_image: kindest/node:v1.22.9\n\n      - name: Deploy apm test trace agent\n        run: |\n          kubectl apply -f k8s/dd-apm-test-agent-config.yaml\n          kubectl rollout status daemonset/datadog-agent\n          kubectl wait $(kubectl get pods -l app=datadog-agent -o name) --for condition=ready\n          sleep 5\n\n      - name: Npm pack for injection image\n        run: |\n          npm pack\n\n      - uses: ./.github/actions/injection\n        with:\n          init-image-version: ${GITHUB_SHA}\n\n      - name: Build sample app image\n        run: |\n          docker build k8s/sample-app --build-arg npm_pkg=./dd-trace.tgz -t ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n          docker push ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n\n      - name: Deploy test pod\n        run: |\n          sed -i \"s|LATEST|$GITHUB_SHA|g\" k8s/test-pod.yaml\n          sleep 5\n          n=0\n          until [ \"$n\" -ge 5 ]\n          do\n            kubectl apply -f k8s/test-pod.yaml && sleep 5 && kubectl wait pod/sample-app --for condition=ready && break\n            n=$((n+1))\n            sleep 15\n          done\n          sleep 5\n\n      - name: Test\n        run: |\n          wget http://localhost:18126/test/session/traces || true\n          kubectl logs $(kubectl get pods -l app=datadog-agent -o name)\n\n          TRACES=`cat traces`\n          if [[ ${#TRACES} -lt 3 ]] ; then\n            echo \"No traces reported - ${TRACES}\"\n            exit 1\n          else\n            echo \"Traces reported - ${TRACES}\"\n            exit 0\n          fi\n```"}
{"id": "63c49b7b1842bc13d777d9d4", "level": "level3", "llm_response": "```yml\n---\nname: Automated review labels\n\non:\n  branches:\n", "answer": "```yaml   name: 'Automated review labels'\n\n  on:\n    issue_comment:\n      types: [created]\n    issues:\n      types: [unlabeled]\n    pull_request_target:\n      types: [unlabeled]\n\n  jobs:\n\n    add-review-team-label:\n      name: 'When pinged, label a PR with review team'\n      if: >\n        github.event.issue\n        && github.event.issue.pull_request\n        && !contains(github.event.issue.labels.*.name, 'review-requested')\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-teams\n          id: check_teams\n          uses: actions/github-script@v6\n          with:\n            script: |\n              const teams = [\n                '@conda-forge/staged-recipes',\n                '@conda-forge/help-c-cpp',\n                '@conda-forge/help-cdts',\n                '@conda-forge/help-go',\n                '@conda-forge/help-java',\n                '@conda-forge/help-julia',\n                '@conda-forge/help-nodejs',\n                '@conda-forge/help-perl',\n                '@conda-forge/help-python',\n                '@conda-forge/help-python-c',\n                '@conda-forge/help-r',\n                '@conda-forge/help-ruby'\n              ];\n              let found_label = false;\n              for (const team of teams) {\n                  let text = context.payload.comment.body;\n                  const regex = new RegExp(team + '[^\\-]|' + team + '$');\n                  let result = regex.test(text);\n                  if (result) {\n                      const slug = team.replace(\"@conda-forge/\", \"\");\n                      const label = slug.replace(\"help-\", \"\");\n                      found_label = true;\n                      github.rest.issues.addLabels({\n                          issue_number: context.issue.number,\n                          owner: context.repo.owner,\n                          repo: context.repo.repo,\n                          labels: [label, 'review-requested']\n                      });\n                      // NOTE: GitHub Actions default token lacks permission to\n                      // assign teams for review; external bot required for\n                      // that feature.\n                      //\n                      https://github.com/conda-forge/staged-recipes/issues/18023#issuecomment-1080451231\n                      console.log(`Somebody mentioned ${slug}.`);\n                  }\n              }\n              return found_label;\n        - name: remove-labels\n          if: >\n            (steps.check_teams.outputs.result == 'true')\n            && contains(github.event.issue.labels.*.name, 'Awaiting author contribution')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.removeLabel({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  name: ['Awaiting author contribution']\n              })\n\n    check-remove-review-requested-label:\n      name: 'Check that review-requested label was removed by a team member'\n      if: >\n        github.event.action == 'unlabeled'\n        && github.event.label.name == 'review-requested'\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-team-membership\n          id: check_team_review\n          uses: actions/github-script@v6\n          with:\n            github-token: ${{ secrets.GH_TOKEN }}\n            script: |\n              console.log(`Label was removed by ${context.payload.sender.login}`);\n              let memberships = [];\n              for (const team of ['staged-recipes', 'core']) {\n                  const membership = github.rest.teams.getMembershipForUserInOrg({\n                      org: 'conda-forge',\n                      team_slug: team,\n                      username: context.payload.sender.login,\n                  });\n                  memberships.push(membership.then((result) => {\n                      if (result.status == 200 && result.data.state == 'active') {\n                          console.log('User is authorized');\n                          return true;\n                      } else {\n                          console.log('User is nonactive');\n                          return false;\n                      }\n                  }).catch((error) => {\n                      // Non-membership raises an HttpError\n                      return false;\n                  }));\n              }\n              return Promise.all(memberships).then((values) => {\n                  let is_authorized = false;\n                  for (const m of values) {\n                      is_authorized = is_authorized || m;\n                  }\n                  return is_authorized;\n              });\n        - name: add-labels\n          if: >\n            (steps.check_team_review.outputs.result == 'true')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['Awaiting author contribution']\n              });\n        - name: readd-review-label\n          if: >\n            (steps.check_team_review.outputs.result == 'false')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['review-requested']\n              });\n              console.log('Non-members of staged recipes cannot remove this label.')\n```"}
{"id": "63c4a1751899db5886519f71", "level": "level3", "llm_response": "```yml\nname: Auto Author Assign\non:\n  pull_request:\n", "answer": "```yaml name: \"Auto Author Assign\"\n\non:\n  pull_request_target:\n    types: [opened, reopened]\n\npermissions:\n  pull-requests: write\n\njobs:\n  assign-author:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toshimaru/auto-author-assign@v1.4.0\n```"}
{"id": "63c49a6c1899db58864ed1c5", "level": "level3", "llm_response": "```yml\nname: build-publish-unpacker-image\n\non:\n ", "answer": "```yaml name: build-publish-unpacker-image\non:\n  workflow_dispatch:\njobs:\n  build-and-publish:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout Epinio\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push unpacker\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          context: images/.\n          file: images/unpacker-Dockerfile\n          tags: ghcr.io/epinio/epinio-unpacker:1.0\n          build-args: |\n            VERSION=1.0\n```"}
{"id": "63c49bdc1899db58864f62db", "level": "level3", "llm_response": "```yml\nname: Ruby test and build\n\non:\n  pull_request", "answer": "```yaml # License: LGPL-3.0-or-later\nname: Ruby test and build\non: \n  pull_request:\n    paths-ignore:\n      - \"**.[jt]sx?\"\n      - \"**.md\"\n      - \"**.md\"\n      - \"NOTICE-js\"\n      - \"NOTICE-ruby\"\n      - \"package.json\"\n      - \"yarn.lock\"\n    types: [opened, reopened, synchronize]\njobs:\n  package-download: # this downloads and caches all of the packages. That way if a future job fails, the caching will still occur\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n  main_build:\n    needs: package-download\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup PostgreSQL with PostgreSQL extensions and unprivileged user\n        uses: Daniel-Marynicz/postgresql-action@1.0.0\n        with:\n          postgres_image_tag: 12-alpine\n          postgres_user: houdini_user\n          postgres_password: password\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - name: install bess dependencies\n        run: |\n          cd gems/bess\n          bundle install --jobs 3 --retry 3\n      - name: run spec for bess\n        run: |\n          cd gems/bess\n          bundle exec rake spec\n      - run: bin/setup ci\n      - name: Generate JS routes\n        run: bin/rails js:routes:typescript\n      - name: run spec\n        run: bundle exec rake spec\n    \n```"}
{"id": "63c49aca33b087f6bde47f19", "level": "level3", "llm_response": "```yml\nname: Node CI\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Node CI\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - name: Fetch commit count\n        env:\n          PR_COMMIT_COUNT: ${{ github.event.pull_request.commits }}\n        run: |\n          echo \"FETCH_DEPTH=$(($PR_COMMIT_COUNT + 1))\" >> $GITHUB_ENV\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: ${{ env.FETCH_DEPTH }}\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Collect changed files\n        run: |\n          mkdir ~/tmp/\n          git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --diff-filter=ACM --name-only --relative '*src/**/*.ts' > ~/tmp/changed_files\n          echo -e \"Changed files: \\n$(cat ~/tmp/changed_files)\"\n\n      - name: Lint\n        run: npx eslint $(cat ~/tmp/changed_files)\n\n      - name: Check types\n        run: npm run checktype\n\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Build release\n        run: npm run release\n\n      - name: Test generated DTS\n        run: npm run test:dts\n\n      - name: Unit Test\n        run: npm run test\n```"}
{"id": "63c4a03933b087f6bde6b332", "level": "level3", "llm_response": "```yml\nname: Go Checks\n\non:\n  push:\n    branches", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Checks\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    name: All\n    env:\n      RUNGOGENERATE: false\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: \"1.19.x\"\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-check-setup\n        if: hashFiles('./.github/actions/go-check-setup') != ''\n      - name: Read config\n        if: hashFiles('./.github/workflows/go-check-config.json') != ''\n        run: |\n          if jq -re .gogenerate ./.github/workflows/go-check-config.json; then\n            echo \"RUNGOGENERATE=true\" >> $GITHUB_ENV\n          fi\n      - name: Install staticcheck\n        run: go install honnef.co/go/tools/cmd/staticcheck@376210a89477dedbe6fdc4484b233998650d7b3c # 2022.1.3 (v0.3.3)\n      - name: Check that go.mod is tidy\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            go mod tidy\n            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then\n              echo \"go.sum was added by go mod tidy\"\n              exit 1\n            fi\n            git diff --exit-code -- go.sum go.mod\n      - name: gofmt\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        run: |\n          out=$(gofmt -s -l .)\n          if [[ -n \"$out\" ]]; then\n            echo $out | awk '{print \"::error file=\" $0 \",line=0,col=0::File is not gofmt-ed.\"}'\n            exit 1\n          fi\n      - name: go vet\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go vet ./...\n      - name: staticcheck\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            set -o pipefail\n            staticcheck ./... | sed -e 's@\\(.*\\)\\.go@./\\1.go@g'\n      - name: go generate\n        uses: protocol/multiple-go-modules@v1.2\n        if: (success() || failure()) && env.RUNGOGENERATE == 'true'\n        with:\n          run: |\n            git clean -fd # make sure there aren't untracked files / directories\n            go generate ./...\n            # check if go generate modified or added any files\n            if ! $(git add . && git diff-index HEAD --exit-code --quiet); then\n              echo \"go generated caused changes to the repository:\"\n              git status --short\n              exit 1\n            fi\n```"}
{"id": "63c498d76fc19abdf9cabcf5", "level": "level3", "llm_response": "```yml\nname: build\non:\n  branches:\n    - main", "answer": "```yaml name: build\non: [push, pull_request]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        go-version: [~1.16, ^1]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    env:\n      GO111MODULE: \"on\"\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.1\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Download Go modules\n        run: go mod download\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test ./...\n```"}
{"id": "63c49c3db008460c1df39721", "level": "level3", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n    branches:\n    - master\n\njobs:\n  Debug-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Debug\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Debug Build and Test\n      working-directory: build/Debug\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Debug ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Debug\n        path: build/Debug/bin/llvm-mctoll\n\n  Release-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Release\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Release Build and Test\n      working-directory: build/Release\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Release\n        path: build/Release/bin/llvm-mctoll\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level3", "llm_response": "```yaml\n---\nname: Require pull request labels\njobs:\n  require-pr", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c4a059cbc73931bb1b9cf8", "level": "level3", "llm_response": "```yml\nname: Go\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Go\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [1.19]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Install libolm\n        run: sudo apt-get install libolm-dev libolm3\n\n      - name: Install goimports\n        run: |\n          go install golang.org/x/tools/cmd/goimports@latest\n          export PATH=\"$HOME/go/bin:$PATH\"\n\n      - name: Install pre-commit\n        run: pip install pre-commit\n\n      - name: Lint\n        run: pre-commit run -a\n```"}
{"id": "63c49ad91e33648075796ee0", "level": "level3", "llm_response": "```yaml\nname: Draft Release\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Draft Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5c621ac4f2678a5bd7759", "level": "level3", "llm_response": "```yml\nname: Reusable - Create Java contrib pull request\n\non", "answer": "```yaml name: Reusable - Create Java contrib pull request\n\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n    secrets:\n      BOT_TOKEN:\n        required: true\n  # to help with partial release build failures\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version\"\n        required: true\n\njobs:\n  create-java-contrib-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: opentelemetrybot/opentelemetry-java-contrib\n          # this is the personal access token used for \"git push\" below\n          token: ${{ secrets.BOT_TOKEN }}\n\n      - name: Initialize pull request branch\n        env:\n          VERSION: ${{ inputs.version }}\n        run: |\n          git remote add upstream https://github.com/open-telemetry/opentelemetry-java-contrib.git\n          git fetch upstream\n          git checkout -b update-opentelemetry-sdk-to-${VERSION} upstream/main\n\n      - name: Update version\n        env:\n          VERSION: ${{ inputs.version }}\n        run: ./.github/scripts/update-sdk-version.sh $VERSION\n\n      - name: Use CLA approved github bot\n        run: .github/scripts/use-cla-approved-github-bot.sh\n\n      - name: Create pull request against opentelemetry-java-contrib\n        env:\n          # this is the personal access token used for \"gh pr create\" below\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}\n          VERSION: ${{ inputs.version }}\n        run: |\n          message=\"Update the SDK and instrumentation versions to $VERSION\"\n          body=$(cat << EOF\n          Update the SDK and instrumentation versions to \\`$VERSION\\`.\n          \n          Note: you will likely need to re-run the checks on this PR in an hour or so, once the\n          updated dependencies are visible in maven central.\n          EOF\n          )\n\n          # gh pr create doesn't have a way to explicitly specify different head and base\n          # repositories currently, but it will implicitly pick up the head from a different\n          # repository if you set up a tracking branch\n\n          git commit -a -m \"$message\"\n          git push --set-upstream origin HEAD:update-opentelemetry-sdk-to-${VERSION}\n          gh pr create --title \"$message\" \\\n                       --body \"$body\" \\\n                       --repo open-telemetry/opentelemetry-java-contrib \\\n                       --base main\n```"}
{"id": "63c49781517fc08c1eed75fb", "level": "level3", "llm_response": "```yml\nname: Release\n\non:\n  push:\n    branches:\n", "answer": "```yaml \nname: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.14.0\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npm run semantic-release\n```"}
{"id": "63c49d1d6fc19abdf9cc7410", "level": "level3", "llm_response": "```yml\nname: pre-commit\n\non:\n  push:\n    branches", "answer": "```yaml # yaml-language-server: $schema=https://json.schemastore.org/github-workflow\n\nname: pre-commit\n\non:\n  push:\n  pull_request:\n\njobs:\n  pre-commit:\n    name: Detecting code style issues\n    runs-on: ubuntu-latest\n    # The Dockerfile for this container can be found at:\n    # https://github.com/Holzhaus/mixxx-ci-docker\n    container: holzhaus/mixxx-ci:20220805\n    steps:\n      - name: \"Check out repository\"\n        uses: actions/checkout@v3\n        with:\n          # Unfortunately we need the whole history and can't use a shallow clone\n          # because the Appstream Metadata hook parses the history to find the\n          # latest changelog modification date. Otherwise, `fetch-depth: 2` would\n          # suffice.\n          fetch-depth: 0\n\n      - name: \"Add GitHub workspace as a safe directory\"\n        # Without this, git commands will fail due to mismatching permissions in\n        # the container. See actions/runner#2033 for details.\n        #\n        # The actions/checkout action should already take care of this thanks to\n        # commit actions/checkout@55fd82fc42c0cdd6f1f480dd23f60636a42f6f5c, but\n        # it seems like that's not working properly.\n        run: |\n          git config --global --add safe.directory \"${GITHUB_WORKSPACE}\"\n          git config --global --list\n\n      - name: \"Detect code style issues (push)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'push'\n        # There are too many files in the repo that have formatting issues. We'll\n        # disable these checks for now when pushing directly (but still run these\n        # on Pull Requests!).\n        env:\n          SKIP: clang-format,eslint,no-commit-to-branch\n\n      - name: \"Detect code style issues (pull_request)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'pull_request'\n        env:\n          SKIP: no-commit-to-branch\n        with:\n          # HEAD is the not yet integrated PR merge commit +refs/pull/xxxx/merge\n          # HEAD^1 is the PR target branch and HEAD^2 is the HEAD of the source branch\n          extra_args: --from-ref HEAD^1 --to-ref HEAD\n\n      - name: \"Generate patch file\"\n        if: failure()\n        run: |\n          git diff-index -p HEAD > \"${PATCH_FILE}\"\n          [ -s \"${PATCH_FILE}\" ] && echo \"UPLOAD_PATCH_FILE=${PATCH_FILE}\" >> \"${GITHUB_ENV}\"\n        env:\n          PATCH_FILE: pre-commit.patch\n\n      - name: \"Upload patch artifact\"\n        if: failure() && env.UPLOAD_PATCH_FILE != null\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.UPLOAD_PATCH_FILE }}\n          path: ${{ env.UPLOAD_PATCH_FILE }}\n\n      # AppStream metadata has been generated/updated by a pre-commit hook\n      - name: \"Validate AppStream metadata\"\n        run: appstreamcli validate res/linux/org.mixxx.Mixxx.metainfo.xml\n```"}
{"id": "63c4966e6fc19abdf9c9c155", "level": "level3", "llm_response": "```yml\nname: tfsec release\n\non:\n  push:\n   ", "answer": "```yaml name: tfsec release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create binary + dockerhub releases\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n          cache: true\n          cache-dependency-path: go.sum\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5.1.0\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: Login to docker.io registry\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USER }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Release\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```"}
{"id": "63c499d5517fc08c1eee63cc", "level": "level3", "llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    - cron: '0 3 * * 1'\n\npermissions:\n  actions: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0cc1899db5886515e72", "level": "level3", "llm_response": "```yml\nname: Deploy itch.io Packages\n\non:\n  event:\n", "answer": "```yaml name: Deploy itch.io Packages\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Git Tag'\n        required: true\n        default: 'release-xxxxxxxx'\n\njobs:\n  itch:\n    name: Deploy to itch.io\n    runs-on: ubuntu-20.04\n    if: github.repository == 'openra/openra'\n    steps:\n      - name: Download Packages\n        run: |\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64.exe\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64-winportable.zip\" -O \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}.dmg\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Dune-2000-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Red-Alert-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Tiberian-Dawn-x86_64.AppImage\"\n          wget -q \"https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tag }}/packaging/.itch.toml\"\n          zip -u \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\" .itch.toml\n\n      - name: Publish Windows Installer\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: win\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64.exe\n\n      - name: Publish Windows Itch Bundle\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: itch\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\n\n      - name: Publish macOS Package\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: macos\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}.dmg\n\n      - name: Publish RA AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-ra\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Red-Alert-x86_64.AppImage\n\n      - name: Publish TD AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-cnc\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Tiberian-Dawn-x86_64.AppImage\n\n      - name: Publish D2k AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-d2k\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Dune-2000-x86_64.AppImage\n```"}
{"id": "63c49c611e336480757a0842", "level": "level3", "llm_response": "```yaml\nname: Build jellyfin-blog\non:\n  pull_request:\n", "answer": "```yaml name: '\ud83c\udfd7\ufe0f Build jellyfin-blog'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '.github/*.json'\n\njobs:\n  build:\n    uses: ./.github/workflows/_meta.yaml\n    with:\n      publish: false\n```"}
{"id": "63c49edf1842bc13d779394c", "level": "level3", "llm_response": "```yml\nname: RSpec\n\non:\n  pull_request:\n   ", "answer": "```yaml name: RSpec\non:\n  pull_request:\n  push:\n    branches: [ main ]\njobs:\n  coverage:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.1\n          bundler: 2.3.19\n          bundler-cache: true\n\n      - name: Install Code Climate reporter\n        run: |\n          sudo curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n          sudo chmod +x ./cc-test-reporter\n      - name: Generate Coverage\n        env:\n          CC_TEST_REPORTER_ID: 88e524e8f638efe690def7a6e2c72b1a9db5cdfa74548921b734d609a5858ee5\n        run: |\n          export GIT_BRANCH=${GITHUB_REF#refs/heads/}\n          export GIT_COMMIT_SHA=${GITHUB_SHA}\n          echo $GIT_BRANCH\n          echo $GIT_COMMIT_SHA\n          ./cc-test-reporter before-build\n          COV=true bin/rspec --require spec_helper --tag ~perf\n          ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?\n\n  tests:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ruby: [2.5, 2.6, 2.7, '3.0', 3.1]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler: 2.3.19\n          bundler-cache: true\n      - run: bin/appraisal install --jobs=$(nproc) --retry=$(nproc)\n      - run: bin/appraisal rspec --require spec_helper --tag ~perf\n```"}
{"id": "63c5c634ac4f2678a5bd7cfa", "level": "level3", "llm_response": "```yaml\n---\nname: Issue Subscriber\ndescription: Automate the subscription of", "answer": "```yaml name: Issue Subscriber\n\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  auto-subscribe:\n    runs-on: ubuntu-latest\n    if: github.repository == 'llvm/llvm-project'\n    steps:\n      - name: Setup Automation Script\n        run: |\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/github-automation.py\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/requirements.txt\n          chmod a+x github-automation.py\n          pip install -r requirements.txt\n\n      - name: Update watchers\n        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable\n        env:\n          LABEL_NAME: ${{ github.event.label.name }}\n        run: |\n          ./github-automation.py \\\n            --token '${{ secrets.ISSUE_SUBSCRIBER_TOKEN }}' \\\n            issue-subscriber \\\n            --issue-number '${{ github.event.issue.number }}' \\\n            --label-name \"$LABEL_NAME\"\n```"}
{"id": "63c494bb7843b61269a03187", "level": "level3", "llm_response": "```yml\nname: Lint and Test\n\non:\n  pull_request", "answer": "```yaml name: lint-and-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    tags-ignore:\n      - \"**\"  # Skip re-linting when tags are added\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install poetry\n        poetry install\n\n    - name: Run flake8\n      run: poetry run flake8 .\n\n    - name: Run mypy\n      run: poetry run mypy .\n\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n      fail-fast: false\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install tox-gh-actions\n\n    - name: Run tests w/tox\n      run: tox\n\n    - name: Cache coverage for ${{ matrix.python-version }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: cov_py${{ matrix.python-version }}\n        path: .coverage\n\n  combine-cov:\n    runs-on: ubuntu-latest\n    needs: test\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Pull coverage workflow artifacts\n      uses: actions/download-artifact@v3\n      with:\n        path: cov_cache/\n\n    - name: Install cov & combine\n      run: |\n        pip install coverage\n        coverage combine ./cov_cache/**/.coverage\n\n    - name: Report coverage\n      run: |\n        echo '**Combined Coverage**' >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage report -m --skip-covered >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage html\n\n    - name: Publish cov HTML\n      uses: actions/upload-artifact@v3\n      with:\n        path: htmlcov/\n        name: cov_report_html\n```"}
{"id": "63c49df933b087f6bde5cc80", "level": "level3", "llm_response": "```yaml\nname: Deploy CI\non:\n  branch:\n    - master", "answer": "```yaml name: Deploy CI\n\nenv:\n  NODE_OPTIONS: --max-old-space-size=6144\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: 'Setup Node.js'\n        uses: actions/setup-node@v3\n        with:\n          node-version: 14\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-\n\n      - name: Pnpm action\n        uses: pnpm/action-setup@v2\n        with:\n          version: latest\n          run_install: true\n\n      - name: Build\n        run: pnpm build:site\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          cname: watermark.xingkang.wang\n```"}
{"id": "63c4a15b1842bc13d77a36dc", "level": "level3", "llm_response": "```yml\nname: PHP ${{ matrix.php-versions }} workflow\n\n", "answer": "```yaml \non: push\n\njobs:\n  test-idiorm-with-php5-2:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n\n    env:\n      REGISTRY: ghcr.io\n      IMAGE_NAME: treffynnon/php5.2cli:latest\n\n    name: 'PHP 5.2'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Pull docker image\n        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - name: Run PHPUnit tests\n        run: docker run -t -v $(realpath ./):/tmp/idiorm --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} /root/phpunit -c /tmp/idiorm/phpunit.xml\n\n  test-idiorm-against-php-matrix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-versions:     ['5.4', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4']\n        phpunit-versions: ['4.8']\n        include:\n          - php-versions: '8.0'\n            phpunit-versions: '8.5.21'\n          - php-versions: '8.2'\n            phpunit-versions: '8.5.21'\n\n    name: PHP ${{ matrix.php-versions }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php-versions }}\n          coverage: xdebug\n          tools: composer, phpunit:${{ matrix.phpunit-versions }}\n\n      - name: Setup problem matchers for PHPUnit\n        run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Add PHP 8 return types\n        if: ${{ matrix.php-versions >= '8.0' }}\n        run: |\n          sed -i 's#setUp()#setUp(): void#' test/*.php\n          sed -i 's#tearDown()#tearDown(): void#' test/*.php\n\n      - name: Run phpunit tests\n        run: composer run-script test -- --colors --coverage-text\n```"}
{"id": "63c49cdc517fc08c1eef9339", "level": "level3", "llm_response": "```yml\nname: Build debug apk\n\non:\n  pull_request:\n", "answer": "```yaml name: Build debug apk\n\non:\n  pull_request:\n    branches:\n      - develop\n    paths-ignore:\n      - '**.md'\n      - '.github/**'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build_debug_apk:\n    name: Build debug apk\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: assembleInternalDebug\n\n      - name: Obtain debug apk\n        if: always()\n        run: cp $(find . -regex '.*outputs/apk/.*internal-debug.apk') pr-ddg-debug.apk\n\n      - name: Upload debug apk\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: pr-ddg-debug\n          path: pr-ddg-debug.apk```"}
{"id": "63c497e4cbc73931bb18352f", "level": "level3", "llm_response": "```yml\nname: binder-badge\non:\n  event:\n    type", "answer": "```yaml name: binder-badge\non:\n  pull_request_target:\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: manics/action-binderbadge@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4990d33b087f6bde3ccdf", "level": "level3", "llm_response": "```yaml\nname: Test C++\non:\n  push:\n    branches:\n", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C++\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - '.github/workflows/test-lang-c\\+\\+.yml'\n    - 'lang/c\\+\\+/**'\n\ndefaults:\n  run:\n    working-directory: lang/c++\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt update && sudo apt-get install -qqy cppcheck libboost-all-dev libsnappy-dev cmake\n\n      - name: Clean\n        run: ./build.sh clean\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Release build\n        run: |\n          mkdir -p build\n          cd build\n          cmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release ..\n```"}
{"id": "63c49a65517fc08c1eee9b6d", "level": "level3", "llm_response": "```yml\nname: Compress images\n\non:\n  pull_request:\n", "answer": "```yaml name: Compress images\n\non:\n  pull_request:\n    paths:\n      - '**.jpg'\n      - '**.png'\n      - '**.webp'\n\njobs:\n  build:\n    name: calibreapp/image-actions\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Compress Images\n        uses: calibreapp/image-actions@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e5933b087f6bde5f2bb", "level": "level3", "llm_response": "```yml\nname: Docker Build TeamCity\ntrigger:\n  branches:\n", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-05-26 12:00:50 +0100 (Thu, 26 May 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Dockerfiles\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Docker Build TeamCity\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - teamcity/Dockerfile\n      - .github/workflows/docker_build_teamcity.yaml\n  workflow_dispatch:\n  #schedule:\n  #  - cron: '0 2 * * *'\n\njobs:\n  docker_build:\n    name: Docker Build\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: |\n      github.repository_owner == 'HariSekhon' &&\n      (\n        github.event_name == 'schedule' ||\n        (\n          github.ref_type == 'branch' &&\n          ( github.ref_name == github.event.repository.default_branch || github.ref_name == 'docker' )\n        )\n      )\n    uses: HariSekhon/GitHub-Actions/.github/workflows/docker_build.yaml@master\n    with:\n      repo_tags: |\n        ghcr.io/harisekhon/teamcity:latest\n        harisekhon/teamcity:alpine\n      context: teamcity\n    secrets:\n      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n    permissions:\n      contents: read\n      packages: write\n```"}
{"id": "63c49ec1cbc73931bb1af7f3", "level": "level3", "llm_response": "```yml\nname: Aggregate sources and rebuild\n\non:\n  schedule:\n", "answer": "```yaml name: Aggregate sources and rebuild\n\non:\n  schedule:\n    # 19:42 UTC every Sunday\n    - cron: \"42 19 * * 0\"\n\n  # push:\n    # branches:\n      # - gh-pages\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: gh-pages\n          fetch-depth: 1\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r scripts/requirements.txt\n\n      - name: Aggregate and build\n        run: |\n          rm -rf src/aggregations\n          python scripts/build.py auto aggregate\n          python scripts/build.py auto\n\n      - name: Commit files\n        run: |\n          git config user.name 'GitHub Action'\n          git config user.email 'actions@github.com'\n          git add -u .\n          git commit -m \"cd: auto build at $(TZ=UTC date +'%F'T'%T'Z)\"\n          git push --force-with-lease\n```"}
{"id": "63c4975e1e33648075780971", "level": "level3", "llm_response": "```yaml\nname: Build docker sample-extension-dotnet-minimalapi\n\non", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c498d933b087f6bde3b708", "level": "level3", "llm_response": "```yaml\nname: No Response\n\non:\n  issues:\n    - type", "answer": "```yaml name: No Response\n\n# **What it does**: Closes issues where the original author doesn't respond to a request for information.\n# **Why we have it**: To remove the need for maintainers to remember to check back on issues periodically to see if contributors have responded.\n# **Who does it impact**: Everyone that works on docs or docs-internal.\n\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ github.token }}\n          daysUntilClose: 14 # Number of days of inactivity before an Issue is closed for lack of response\n          responseRequiredLabel: \"Reporter Feedback\" # Label indicating that a response from the original author is required\n          closeComment: >\n            This issue has been automatically closed because there has been no response\n            to our request for more information. With only the\n            information that is currently in the issue, we don't have enough information\n            to take action. Please reach out if you have or find the answers we need so\n            that we can investigate further. See [this blog post on bug reports and the\n            importance of repro steps](https://www.lee-dohm.com/2015/01/04/writing-good-bug-reports/)\n            for more information about the kind of information that may be helpful.\n```"}
{"id": "63c49d67517fc08c1eefc9e1", "level": "level3", "llm_response": "```yml\n---\nname: Sync Wiki\non: push\njobs:\n", "answer": "```yaml name: Sync Wiki\n\n# Ignored. To make it work, we would need a secret named GH_PERSONAL_ACCESS_TOKEN with a Github personal access token with \"repo\" authorization.\n# Inspired in: https://github.com/marketplace/actions/publish-to-github-wiki\n\non:\n  push:\n    branches-ignore:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Sync GitHub Wiki from Sources\n    steps:\n      - run: ./scripts/sync-wiki.sh\n        env:\n          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}\n        shell: bash\n        timeout-minutes: 5\n```"}
{"id": "63c49b9c6fc19abdf9cbda1a", "level": "level3", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm i\n      - run: npm test\n```"}
{"id": "63c4985e1e3364807578700c", "level": "level3", "llm_response": "```yml\n---\nname: Lint Commit Messages\non: pull_request", "answer": "```yaml # Run commitlint on the commit messages in a pull request.\n\nname: Lint Commit Messages\n\non:\n  - pull_request\n\njobs:\n  commitlint:\n    uses: openedx/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c49e451e336480757ac7a0", "level": "level3", "llm_response": "```yml\nname: Documentation Generator\n\non:\n  push:\n    branches", "answer": "```yaml name: Documentation Generator\non:\n  push:\n    branches:\n      - \"*\"\n      - \"!docs\"\n    tags:\n      - \"*\"\njobs:\n  docs:\n    name: Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n\n      - name: Install dependencies\n        run: yarn --immutable\n\n      - name: Checkout docs branch\n        uses: actions/checkout@v3\n        with:\n          ref: \"docs\"\n          path: \"docs\"\n\n      - name: Generate documentation\n        run: yarn docs\n\n      - name: Move generated docs file\n        run: mv docs.json docs/${{ github.ref_name }}.json\n\n      - name: Commit and push\n        run: |\n          cd docs\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Docs build for ${{ github.ref_type }} ${{ github.ref_name }}: ${{ github.sha }}\"\n          git push\n```"}
{"id": "63c49ad8517fc08c1eeeca56", "level": "level3", "llm_response": "```yml\n---\nname: dependabot-auto-merge\n\non:\n", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    \n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          \n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          \n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c4a0f16fc19abdf9cdf46c", "level": "level3", "llm_response": "```yml\nname: Check Lint\n\non:\n  pull_request:\n", "answer": "```yaml name: Check Lint\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  check-lint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install clang-format\n        run: |\n          sudo apt update\n          sudo apt install clang-format-10\n      - uses: actions/checkout@v3\n      - run: ./scripts/check-lint.sh\n        env:\n          CLANG_FORMAT_PATH: \"/usr/bin/clang-format-10\"\n```"}
{"id": "63c49df81842bc13d778dba8", "level": "level3", "llm_response": "```yaml\n---\nname: Pull Request Required Labels\non:\n  pull_request", "answer": "```yaml #  https://github.com/mheap/github-action-required-labels\nname: Pull Request Required Labels\non:\n  pull_request:\n    types: [ opened, labeled, unlabeled, synchronize ]\njobs:\n  label:\n    if: github.event.pull_request.state == 'open'\n    runs-on: ubuntu-latest\n    name: Verify Pull Request has labels\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        with:\n          mode: minimum\n          count: 1\n          labels: \"breaking-change, feature, enhancement, bug, dependencies, documentation, housekeeping\"```"}
{"id": "63c49f50736e7f0ed8c6d7ce", "level": "level3", "llm_response": "```yml\nname: Conventional Commits\n\non:\n  pull_request", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - master\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  commitsar:\n    name: Validate Conventional Commits\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Run commitsar\n        uses: docker://outillage/commitsar:0.11.2\n```"}
{"id": "63c49feeb008460c1df50a68", "level": "level3", "llm_response": "```yml\nname: Create Releasable Package Drop\n\non:\n", "answer": "```yaml name: Create Releasable Package Drop\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - release-*\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - uses: actions/setup-node@v3\r\n    - name: npm install and test\r\n      run: |\r\n        npm ci\r\n        npm test\r\n    - name: Adding playwright\r\n      run: npm install --no-save --no-package-lock playwright\r\n    - name: Validate the browser can import TypeScript\r\n      run: gulp test-browser-integration\r\n    - name: LKG, clean, and pack\r\n      run: |\r\n        gulp LKG\r\n        gulp clean\r\n        npm pack ./\r\n        mv typescript-*.tgz typescript.tgz\r\n    - name: Upload built tarfile\r\n      uses: actions/upload-artifact@v3\r\n      with:\r\n        name: tgz\r\n        path: typescript.tgz\r\n```"}
{"id": "63c4a1386fc19abdf9ce1169", "level": "level3", "llm_response": "```yml\nname: Codacy Security Scan\n\non:\n  push:\n", "answer": "```yaml # This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow checks out code, performs a Codacy security scan\n# and integrates the results with the\n# GitHub Advanced Security code scanning feature.  For more information on\n# the Codacy security scan action usage and parameters, see\n# https://github.com/codacy/codacy-analysis-cli-action.\n# For more information on Codacy Analysis CLI in general, see\n# https://github.com/codacy/codacy-analysis-cli.\n\nname: Codacy Security Scan\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '17 14 * * 5'\n\npermissions:\n  contents: read\n\njobs:\n  codacy-security-scan:\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    name: Codacy Security Scan\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository to the GitHub Actions runner\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis\n      - name: Run Codacy Analysis CLI\n        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b\n        with:\n          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository\n          # You can also omit the token and run the tools that support default configurations\n          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}\n          verbose: true\n          output: results.sarif\n          format: sarif\n          # Adjust severity of non-security issues\n          gh-code-scanning-compat: true\n          # Force 0 exit code to allow SARIF file generation\n          # This will handover control about PR rejection to the GitHub side\n          max-allowed-issues: 2147483647\n\n      # Upload the SARIF file generated in the previous step\n      - name: Upload SARIF results file\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n```"}
{"id": "63c49eca517fc08c1ef05b75", "level": "level3", "llm_response": "```yml\nname: check-only\n\non:\n  pull_request:\n   ", "answer": "```yaml name: check-only\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  desktop-win:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore .\\WolvenKit\\WolvenKit.csproj\n    - name: Build\n      run: dotnet build .\\WolvenKit\\WolvenKit.csproj --no-restore\n\n  console-linux:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore ./WolvenKit.CLI/WolvenKit.CLI.csproj\n    - name: Build\n      run: dotnet build ./WolvenKit.CLI/WolvenKit.CLI.csproj --no-restore```"}
{"id": "63c497d3cbc73931bb182d2f", "level": "level3", "llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n    branches", "answer": "```yaml name: 'Dependency Review'\non: [ pull_request ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    continue-on-error: false\n    steps:\n      - name: 'Checkout Repository'\n        uses: actions/checkout@v3\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v2\n        with:\n          fail-on-severity: critical\n          # Representation of this list: https://www.eclipse.org/legal/licenses.php#\n          # Expressed with the help of the following IDs: https://spdx.org/licenses/\n          allow-licenses: >-\n            Adobe-Glyph, Apache-1.0, Apache-1.1, Apache-2.0, Artistic-2.0, BSD-2-Clause, BSD-3-Clause,\n            BSD-4-Clause, 0BSD, BSL-1.0, CDDL-1.0, CDDL-1.1, CPL-1.0, CC-BY-3.0, CC-BY-4.0, CC-BY-2.5,\n            CC-BY-SA-3.0, CC-BY-SA-4.0, CC0-1.0, EPL-1.0, EPL-2.0, FTL, GFDL-1.3-only, IPL-1.0, ISC,\n            MIT, MIT-0, MPL-1.1, MPL-2.0, NTP, OpenSSL, PHP-3.01, PostgreSQL, OFL-1.1, Unlicense,\n            Unicode-DFS-2015, Unicode-DFS-2016, Unicode-TOU, UPL-1.0, W3C-20150513, W3C-19980720, W3C,\n            WTFPL, X11, Zlib, ZPL-2.1\n```"}
{"id": "63c4a061cbc73931bb1ba068", "level": "level3", "llm_response": "```yaml\n---\nname: check-x-pack-heartbeat\non:\n  pull", "answer": "```yaml name: check-x-pack-heartbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-heartbeat.yml'\n      - 'x-pack/heartbeat/**'\n      - 'heartbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/heartbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      run: |\n        go install github.com/magefile/mage\n        make -C ${{ env.BEAT_MODULE }} check update\n        make check-no-changes\n```"}
{"id": "63c49d6eb008460c1df40ff3", "level": "level3", "llm_response": "```yml\nname: Frontend Workflow\n\non:\n  pull_request:\n", "answer": "```yaml name: frontend\n\non:\n  pull_request:\n\njobs:\n\n  frontend:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Node\n        uses: actions/setup-node@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n            node-version: '16.x'\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          yarn\n\n      - name: Lint and test Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn run test\n\n      - name: Store test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        uses: actions/upload-artifact@v3\n        with:\n          name: frontend_coverage\n          path: ./test/unit_test_coverage/clover.xml\n\n      - name: Build Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn build\n\n  coverage:\n    runs-on: ubuntu-latest\n    needs:\n      - frontend\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements/ci.txt\n\n      - name: Retrieve frontend coverage\n        uses: actions/download-artifact@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          name: frontend_coverage\n          path: frontend_coverage\n\n      - name: Check frontend test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          diff-cover frontend_coverage/clover.xml --compare-branch=origin/main --fail-under=100\n```"}
{"id": "63c49fae33b087f6bde67bc4", "level": "level3", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n\njobs:\n  verify_module:\n    name: Verify module\n    strategy:\n      matrix:\n        terraform: [1.1.9]\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - run: terraform fmt -recursive -check=true -write=false\n\n  verify_examples:\n    name: Verify examples\n    strategy:\n      fail-fast: false\n      matrix:\n        terraform: [1.0.11, latest]\n        example:\n          [\n            \"runner-default\",\n            \"runner-docker\",\n            \"runner-multi-region\",\n            \"runner-pre-registered\",\n            \"runner-public\",\n          ]\n    defaults:\n      run:\n        working-directory: examples/${{ matrix.example }}\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - if: contains(matrix.terraform, '1.0.')\n        run: terraform fmt -recursive -check=true -write=false\n      - run: terraform validate\n\n  docs:\n    # update docs after merge back to develop\n    if: github.event_name != 'pull_request' && contains('refs/heads/develop', github.ref)\n    name: Auto update terraform docs\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: CHeckout branch\n      uses: actions/checkout@v3\n\n    - name: Generate TF docs\n      uses: terraform-docs/gh-actions@v1.0.0\n      with:\n        find-dir: .\n        git-commit-message: \"docs: auto update terraform docs\"\n        git-push: true\n\n  tfsec:\n    name: tfsec PR commenter\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Clone repo\n        uses: actions/checkout@master\n      - name: tfsec\n        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0\n        with:\n          github_token: ${{ github.token }}\n\n  release:\n    if: github.event_name != 'pull_request' && contains('refs/heads/main', github.ref)\n    name: Release\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Get installation token\n        uses: npalm/action-app-token@v1.0.0\n        id: app-token\n        with:\n          appId: ${{ secrets.APP_ID }}\n          appPrivateKeyBase64: ${{ secrets.APP_PRIVATE_KEY_BASE64 }}\n          appInstallationType: repo\n          appInstallationValue: ${{ github.repository }}\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}\n        run: |\n          cp .release/* .\n          yarn \n          yarn release --repositoryUrl https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git\n```"}
{"id": "63c49df8517fc08c1ef0053c", "level": "level3", "llm_response": "```yaml\nname: Dependency Review\non:\n  event:\n    types:\n", "answer": "```yaml name: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit\n\n      - name: 'Checkout Repository'\n        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@fd675ced9c17f1393071e1a2e685ab527e585a0c\n```"}
{"id": "63c49e6f1842bc13d7790c57", "level": "level3", "llm_response": "```yaml\nname: Auto merge\n\non:\n  events:\n    - type", "answer": "```yaml name: Auto merge\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Tests'\n\njobs:\n  merge-me:\n    name: Auto merge\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Auto merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2\n        with:\n          # Depending on branch protection rules, a  manually populated\n          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to\n          # a protected branch must be used.\n          #\n          # When using a custom token, it is recommended to leave the following\n          # comment for other developers to be aware of the reasoning behind it:\n          #\n          # This must be used as GitHub Actions token does not support pushing\n          # to protected branches.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PRESET: DEPENDABOT_MINOR\n```"}
{"id": "63c49728b008460c1df19228", "level": "level3", "llm_response": "```yml\nname: JOSS\non:\n  push:\n    branches", "answer": "```yaml name: JOSS\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"joss/**\"\n\njobs:\n  joss:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Generate .tex\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml --to=latex --output=paper.tex\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Generate .pdf\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Upload the generated files as an artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: joss\n          name: joss\n\n      - name: Deploy\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: peaceiris/actions-gh-pages@v3.8.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./joss\n          force_orphan: true\n          publish_branch: joss-compiled\n```"}
{"id": "63c4989e6fc19abdf9caa598", "level": "level3", "llm_response": "```yml\nname: Node.js CI\non:\n  push:\n   ", "answer": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  nodejs:\n    # Documentation: https://github.com/zakodium/workflows#nodejs-ci\n    uses: zakodium/workflows/.github/workflows/nodejs.yml@nodejs-v1\n    with:\n      node-version-matrix: '[12, 14, 16, 18]'\n```"}
{"id": "63c49ce633b087f6bde55c90", "level": "level3", "llm_response": "```yaml\nname: Lint and Test\n\non:\n  push:\n   ", "answer": "```yaml name: Lint and Test\n\non: [push]\n\njobs:\n  lint_and_test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: Install dependencies\n      run: make install\n    - name: Lint\n      run: make lint\n    - name: Test\n      run: make test\n```"}
{"id": "63c49c3d1e3364807579f946", "level": "level3", "llm_response": "```yml\nname: notify-release\non:\n  branches:\n    -", "answer": "```yaml name: notify-release\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    - cron: '30 8 * * *'\r\njobs:\r\n  setup:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Notify release\r\n        uses: nearform/github-action-notify-release@v1\r\n        with:\r\n          github-token: ${{ secrets.GITHUB_TOKEN }}\r\n```"}
{"id": "63c4a096736e7f0ed8c75ab0", "level": "level3", "llm_response": "```yaml\nname: test-get-target-config\n\non:\n  pull_request:\n", "answer": "```yaml name: test-get-target-config\n\non:\n  pull_request:\n    branches:\n    - main\n  push:\n    branches:\n    - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: aws/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_assume_role_arn }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_region }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n  test-gcp:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: gcp/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n```"}
{"id": "63c4975e6fc19abdf9ca2240", "level": "level3", "llm_response": "```yml\nname: Automatic Rebase\n\non:\n  pull_request:\n", "answer": "```yaml on:\n  issue_comment:\n    types: [created]\nname: Automatic Rebase\njobs:\n  rebase:\n    name: Rebase\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/rebase')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n        with:\n          fetch-depth: 0\n      - name: Automatic Rebase\n        uses: cirrus-actions/rebase@1.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e301899db5886504fda", "level": "level3", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\n#on:\n#  push:\n#    branches: [ master ]\n#  pull_request:\n#    # The branches below must be a subset of the branches above\n#    branches: [ master ]\n#  schedule:\n#    - cron: '30 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: true\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 6.0.100\n\n    - name: Build\n      run: dotnet build\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```"}
{"id": "63c4a09333b087f6bde6d774", "level": "level3", "llm_response": "```yml\nname: Nix\n\non:\n  push:\n    branches", "answer": "```yaml name: Nix\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Nix Flake - Linux\n    permissions:\n      contents: read\n    steps:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install\n          install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Clone project\n        uses: actions/checkout@v3\n      - name: Build\n        # \"nix build\" builds with full optimization and includes a profiling\n        # build, so just the build of xmonad-contrib itself takes 3 minutes.\n        # As a workaround, we invoke cabal manually here.\n        run: nix develop -c cabal v2-build -O0 -j\n```"}
{"id": "63c49cf21899db58864fd39b", "level": "level3", "llm_response": "```yml\nname: Cache libs (dist)\n\non:\n  push:\n", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n      - 'epic/**'\n      - 'release/**'\nname: Cache libs (dist)\njobs:\n  cacheBuildedLibs:\n    name: Builded libs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Cache builded libs\n        uses: ./.github/cache-builded-libs\n```"}
{"id": "63c4a1266fc19abdf9ce0a0e", "level": "level3", "llm_response": "```yml\nname: Debug on Windows\n\non:\n  event:\n   ", "answer": "```yaml on: workflow_dispatch\n\nname: Debug on Windows\njobs:\n    debug-windows:\n        runs-on: windows-latest\n        strategy:\n            fail-fast: false\n            matrix:\n                language: [\"cpp\"]\n\n        steps:\n            - name: Setup NuGet.exe for use with actions\n              uses: NuGet/setup-nuget@v1.0.5\n\n            - name: Checkout\n              uses: actions/checkout@v2.3.4\n              with:\n                  submodules: recursive\n\n            - name: Install OpenSSL\n              uses: crazy-max/ghaction-chocolatey@v1.6.0\n              with:\n                  args: install openssl -y\n\n            - name: Add NuGet Remote\n              run: \"nuget.exe sources Add -Name NuGetRemote -Source https://api.nuget.org/v3/index.json\"\n\n            - name: Setup tmate session\n              uses: mxschmitt/action-tmate@v3\n              with:\n                limit-access-to-actor: true\n              continue-on-error: true```"}
{"id": "63c4986cb008460c1df210dd", "level": "level3", "llm_response": "```yml\nname: Large Repo Benchmark\n\non:\n  push:\n   ", "answer": "```yaml name: Large Repo Benchmark\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [Release]\n    types:\n      - completed\n\njobs:\n  build:\n    name: Run Benchmarks\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-node\n      - uses: ./.github/actions/setup-go\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Build\n        run: cd cli && make turbo\n\n      - name: Download previous benchmark results\n        # continue on error so that we handle the bootstrap case where there is no previous data\n        continue-on-error: true\n        run: mkdir -p raw-data/${{ runner.os }} && curl -f -o raw-data/${{ runner.os }}/benchmark-data.json https://raw.githubusercontent.com/vercel/turborepo/gh-pages/${{ runner.os }}/benchmark-data.json\n\n      - name: Run benchmarks\n        run: cd benchmark && pnpm benchmark\n\n      - name: Save to Tinybird\n        if: github.ref == 'refs/heads/main'\n        run: |\n          curl \\\n            -i \\\n            -F \"ndjson=@./benchmark/tinybird.ndjson\" \\\n            -X POST \\\n            -H 'Authorization: Bearer ${{ secrets.TINYBIRD_TOKEN }}' \\\n            'https://api.us-east.tinybird.co/v0/datasources?format=ndjson&name=turbo_benchmarks&mode=append'\n\n      - name: Store Benchmark Result\n        uses: benchmark-action/github-action-benchmark@v1\n        with:\n          name: \"${{ runner.os }} Benchmark\"\n          # What benchmark tool the output is formatted as\n          tool: \"customSmallerIsBetter\"\n          output-file-path: ./benchmark/benchmarks.json\n          external-data-json-path: ./raw-data/${{ runner.os }}/benchmark-data.json\n          auto-push: false\n          # GitHub API token to make a commit\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          skip-fetch-gh-pages: true\n\n      - name: Deploy\n        if: github.ref == 'refs/heads/main'\n        uses: JamesIves/github-pages-deploy-action@v4.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          folder: raw-data\n          clean: false\n          single-commit: false\n          git-config-email: github-bot@turborepo.org\n          repository-name: vercel/turborepo\n          commit-message: \"Update\"\n```"}
{"id": "63c4a04c1e336480757b949e", "level": "level3", "llm_response": "```yml\n---\nname: Tests: pretest/posttest\non:\n", "answer": "```yaml name: 'Tests: pretest/posttest'\n\non: [pull_request, push]\n\njobs:\n  tests:\n    uses: ljharb/actions/.github/workflows/pretest.yml@main\n```"}
{"id": "63c49dc61842bc13d778c79d", "level": "level3", "llm_response": "```yaml\nname: Node.js Package\n\non:\n  release:\n    types", "answer": "```yaml # This workflow will run tests using node and then publish a package to GitHub Packages when a release is created\n# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages\n\nname: Node.js Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: 'npm'\n      - run: npm ci\n\n      - name: Determine dist-tag\n        id: dist_tag\n        uses: actions/github-script@v6\n        with:\n          result-encoding: string\n          script: |\n            const semver = require(\"semver\");\n            const version = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version;\n            const parsed = semver.parse(version);\n            return parsed.prerelease.length ? \"--tag next\" : \"\";\n\n      - name: Publish to NPM\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n          TAG: ${{ steps.dist_tag.outputs.result }}\n        run: npm publish $TAG\n```"}
{"id": "63c498f31e3364807578ae91", "level": "level3", "llm_response": "```yaml\nname: close stale issues/PRs\non:\n  schedule", "answer": "```yaml name: 'close stale issues/PRs'\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@87c2b794b9b47a9bec68ae03c01aeb572ffebdb1\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label: \"\"\n          close-pr-message: \"\"\n```"}
{"id": "63c49ce96fc19abdf9cc5f23", "level": "level3", "llm_response": "```yaml\nname: Builds\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Builds\non:\n  - push\n  - pull_request\n\npermissions:\n  contents: read\n\njobs:\n  doc:\n    name: Documentation (Sphinx)\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build docs\n        run: make doc\n\n      - name: Print warnings\n        run: if [ -s .sphinx/warnings.txt ]; then cat .sphinx/warnings.txt; exit 1; fi\n\n      - name: Upload artifacts\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: documentation\n          path: doc/html\n\n  static:\n    name: Static binaries\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n          - windows-latest\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create build directory\n        run: |\n          mkdir bin\n\n      - name: Build static lxc\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxc\n\n      - name: Build static lxd-migrate\n        if: runner.os == 'Linux'\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxd-migrate\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        continue-on-error: true\n        with:\n          name: ${{ runner.os }}\n          path: bin/\n```"}
{"id": "63c494d87843b61269a03c6b", "level": "level3", "llm_response": "```yaml\nname: Check Pull Request\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Check Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  check-title:\n    name: Check Title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Semantic pull request\n        uses: amannn/action-semantic-pull-request@v5.0.1\n        with:\n          validateSingleCommit: true\n          ignoreLabels: revert\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4972bb008460c1df19384", "level": "level3", "llm_response": "```yaml\nname: Publish MacOS \u2014 x64\non:\n  branch:", "answer": "```yaml name: Publish MacOS \u2014 x64\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    runs-on: macos-11\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install Packages\n        run: yarn install\n      - name: Rebuild Native Modules\n        run: npx electron-rebuild\n      - name: Get Urbit Binaries\n        run: ./get-urbit.sh\n      - name: Add MacOS certs\n        run: chmod +x add-osx-cert.sh && ./add-osx-cert.sh\n        env:\n          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}\n          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n      - name: Build & Publish\n        run: |\n          yarn run publish --arch x64\n        env:\n          APPLE_ID: ${{secrets.APPLE_ID}}\n          APPLE_ID_PASSWORD: ${{secrets.APPLE_ID_PASSWORD}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}```"}
{"id": "63c49df8517fc08c1ef0053b", "level": "level3", "llm_response": "```yaml\nname: CodeQL\non:\n  push:\n    branches:\n", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  schedule:\n    - cron: '0 7 * * 1' # Monday at 7:00 AM\n\npermissions: read-all\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n\n    steps:\n    - name: Harden Runner\n      uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n      with:\n        egress-policy: audit\n\n    - name: Checkout repository\n      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@807578363a7869ca324a79039e6db9c843e0e100\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@807578363a7869ca324a79039e6db9c843e0e100\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@807578363a7869ca324a79039e6db9c843e0e100\n```"}
{"id": "63c499856fc19abdf9cb0415", "level": "level3", "llm_response": "```yml\nname: make all\n\non:\n  push:\n    branches", "answer": "```yaml on: push\nname: make all\njobs:\n  makeall:\n    name: make all\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make all\n        uses: docker://golang:latest\n        with:\n          entrypoint: bash\n          args: -c \"go get honnef.co/go/tools/cmd/staticcheck && go get golang.org/x/lint/golint && git checkout . && make all\"\n```"}
{"id": "63c49ade517fc08c1eeecd16", "level": "level3", "llm_response": "```yml\nname: Test installation and doccano commands\n\non:\n ", "answer": "```yaml name: Test installation and doccano commands\n\non:\n  schedule:\n    - cron: \"15 22 * * *\"\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    steps:\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Enabling JSON1 extension on SQLite\n      if: ${{ startsWith(matrix.os, 'windows') && matrix.python-version == '3.8' }}\n      shell: bash\n      run: |\n        export VERSION=`python -V | cut -f2 -d \" \"`\n        curl -LO https://www.sqlite.org/2022/sqlite-dll-win64-x64-3390300.zip\n        unzip sqlite-dll-win64-x64-3390300.zip\n        mv sqlite3.dll /c/hostedtoolcache/windows/Python/$VERSION/x64/DLLs/\n    - name: Test installation\n      run: pip install doccano\n    - name: Test doccano init command\n      run: doccano init\n    - name: Test doccano createuser command\n      run: doccano createuser --username admin --password pass\n```"}
{"id": "63c49ba0b008460c1df358ce", "level": "level3", "llm_response": "```yaml\nname: Deploy demo to Fly\non:\n  branch:\n   ", "answer": "```yaml name: Deploy demo to Fly\non:\n  workflow_run:\n    workflows: [Cookie cutter test]\n    branches: [main]\n    types:\n      - completed\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      if: ${{ github.event.workflow_run.conclusion == 'success' }}\n      timeout-minutes: 6\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - name: Install dependencies\n          run: |\n            apk update && apk add py3-pip python3\n            pip3 install cookiecutter\n        - run: bash scripts/deploy-demo-project-to-fly.sh\n```"}
{"id": "63c495c57843b61269a09c8f", "level": "level3", "llm_response": "```yml\nname: CI and CD\non:\n  push:\n   ", "answer": "```yaml name: CI and CD\n\non:\n  push:\n    branches:\n    - master\n  workflow_dispatch:\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run a one-line script\n      run: echo Hello, world!\n    - name: Start environment\n      run: make start-containers\n    - name: Run tests\n      run: make params=-T tests\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    needs: tests\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run Ansible playbook\n      uses: dawidd6/action-ansible-playbook@v2\n      with:\n        playbook: ./infrastructure/playbooks/deploy.yml\n        directory: ./\n        key: ${{secrets.SSH_KEY}}\n        vault_password: ${{secrets.VAULT_PASSWORD}}\n        options: |\n          --inventory infrastructure/playbooks/hosts\n      env:\n        ANSIBLE_HOST_KEY_CHECKING: False\n```"}
{"id": "63c4966d1e3364807577a9d1", "level": "level3", "llm_response": "```yaml\nname: Compile test\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Compile test\n\non:\n  push:\n    branches:\n      - \"**\"\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  compile:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048 # tag=v3\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm install\n    - run: npm run build```"}
{"id": "63c497691899db58864d95cc", "level": "level3", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n    paths-ignore:\n      - '*/spec/fixtures/**'\n      - 'CHANGELOG.md'\n      - 'common/lib/dependabot/version.rb'\n  schedule:\n    - cron: '41 4 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'schedule' || github.repository == 'dependabot/dependabot-core' }}\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go', 'javascript', 'python', 'ruby' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49a5e6fc19abdf9cb5a11", "level": "level3", "llm_response": "```yml\nname: npm-update-pf\n\non:\n  schedule:\n", "answer": "```yaml name: npm-update-pf\non:\n  schedule:\n    - cron: '0 3 * * 1'\n  # can be run manually on https://github.com/cockpit-project/cockpit/actions\n  workflow_dispatch:\njobs:\n  npm-update:\n    environment: npm-update\n    permissions:\n      pull-requests: write\n      contents: write\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v3\n\n      - name: Run npm-update bot\n        run: |\n          tools/make-bots\n          git config --global user.name \"GitHub Workflow\"\n          git config --global user.email \"cockpituous@cockpit-project.org\"\n          mkdir -p ~/.config/cockpit-dev\n          echo ${{ github.token }} >> ~/.config/cockpit-dev/github-token\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}'\n          bots/npm-update @patternfly >&2\n          ssh-add -D\n          ssh-agent -k\n\n      - name: Force push the change to trigger testing workflows\n        run: |\n          # Don't force-push if no branch was created\n          test \"$(git symbolic-ref HEAD)\" = '${{ github.ref }}' && exit\n\n          sleep 1 # make sure the timestamp changes\n          git commit --amend --no-edit\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.COCKPIT_DEPLOY_KEY }}'\n          git push --force 'git@github.com:${{ github.repository }}' HEAD\n          ssh-add -D\n          ssh-agent -k\n```"}
{"id": "63c49dc8517fc08c1eeff286", "level": "level3", "llm_response": "```yaml\nname: Build & Test\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Build & Test\n\non:\n  push: {}\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build-and-test:\n    name: Build & Test\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ocaml-compiler:\n          - 4.11.0\n          - 4.10.1\n          - 4.09.1\n          - 4.08.1\n        os:\n          - ubuntu-latest\n          - macOS-latest\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      # Cancel queued workflows from earlier commits in this branch\n      - uses: fkirc/skip-duplicate-actions@master\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Retrieve opam cache\n        uses: actions/cache@v3\n        id: cache-opam\n        with:\n          path: ~/.opam\n          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-${{ hashFiles('*.opam') }}\n          restore-keys: |\n            v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-\n\n      - name: Use OCaml ${{ matrix.ocaml-compiler }}\n        uses: ocaml/setup-ocaml@v2\n        with:\n          ocaml-compiler: ${{ matrix.ocaml-compiler }}\n\n      - name: Install dependencies\n        run: opam install --deps-only --with-test .\n\n      - name: Build\n        run: opam exec -- make\n\n      - name: Test\n        run: opam exec -- make all-test\n\n      - name: Check whitespaces\n        run: opam exec -- ./LINT\n```"}
{"id": "63c4a1a433b087f6bde73a98", "level": "level3", "llm_response": "```yml\nname: Build Site\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Build Site\non:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Install deps\n        run: |\n          npm install postcss-cli\n          npm install autoprefixer\n          sudo -E make docs-deps\n      - name: Build pages\n        run: |\n           make docs-build\n           ls -liah public/```"}
{"id": "63c5aec46b748c7b1fadfc79", "level": "level3", "llm_response": "```yaml\n---\nname: Humble Semi-Binary Build - testing\ndescription", "answer": "```yaml name: Humble Semi-Binary Build - testing\n# description: 'Build & test that compiles the main dependencies from source.'\n\non:\n  workflow_dispatch:\n    branches:\n      - humble\n  pull_request:\n    branches:\n      - humble\n  push:\n    branches:\n      - humble\n  schedule:\n    # Run every morning to detect flakiness and broken dependencies\n    - cron: '33 1 * * *'\n\njobs:\n  semi_binary:\n    uses: ./.github/workflows/reusable-industrial-ci-with-cache.yml\n    with:\n      ros_distro: humble\n      ros_repo: testing\n      upstream_workspace: ros2_control.humble.repos\n      ref_for_scheduled_build: humble\n```"}
{"id": "63c49f6233b087f6bde65d6f", "level": "level3", "llm_response": "```yml\nname: HealthChecks MongoDb CI\n\non:\n  branches", "answer": "```yaml name: HealthChecks MongoDb CI\r\n\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n    branches: [ master ]\r\n    paths:\r\n      - src/HealthChecks.MongoDb/**\r\n      - test/HealthChecks.MongoDb.Tests/**\r\n      - .github/workflows/healthchecks_mongodb_ci.yml\r\n      - Directory.Build.props\r\n      - Directory.Build.targets\r\n    tags-ignore:\r\n      - release-*\r\n  pull_request:\r\n    branches: [ master ]\r\n    paths:\r\n    - src/HealthChecks.MongoDb/**\r\n    - test/HealthChecks.MongoDb.Tests/**\r\n    - .github/workflows/healthchecks_mongodb_ci.yml\r\n    - Directory.Build.props\r\n    - Directory.Build.targets\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    services:\r\n      mongo:\r\n        image: mongo\r\n        ports:\r\n          - 27017:27017\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: |\r\n        dotnet restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Check formatting\r\n      run: |\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1) &&\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\r\n    - name: Build\r\n      run: |\r\n        dotnet build --no-restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet build --no-restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Test\r\n      run: dotnet test --no-restore --no-build ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n```"}
{"id": "63c49b6533b087f6bde4bd34", "level": "level3", "llm_response": "```yml\nname: Auto approve\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Auto approve\n\non: [pull_request_target]\n\njobs:\n  auto-approve:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hmarr/auto-approve-action@v2\n      if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"```"}
{"id": "63c49e9a33b087f6bde60c8f", "level": "level3", "llm_response": "```yaml\nname: package-macos-anaconda\n\non:\n  event", "answer": "```yaml name: package-macos-anaconda\n\non:\n  release:\n    types: [created]\n\njobs:\n  package:\n\n    runs-on: macos-latest\n\n    steps:\n\n    - name: fetch MacOSX 10.11 SDK\n      run: curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/MacOSX10.11.sdk/MacOSX10.11.sdk.tar.xz | sudo tar xf - -C /opt/\n\n    - name: install conda-build # and anaconda-client\n      run: sudo $CONDA/bin/conda install -y conda-build # anaconda-client\n\n    - name: fetch recipe\n      run: |\n        git clone https://github.com/MRtrix3/conda-build.git\n        mv conda-build/* .\n        { echo \"CONDA_BUILD_SYSROOT:\"; echo \"  - /opt/MacOSX10.11.sdk        # [osx]\"; } > conda_build_config.yaml\n\n    - name: build package\n      run: sudo CONDA=\"$CONDA\" ./run.sh ${GITHUB_REF#refs/*/} ${GITHUB_REPOSITORY%/*} conda-macos\n\n#    - name: upload package\n#      run: $CONDA/bin/anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u MRtrix3 $(sudo $CONDA/bin/conda build conda-build/ --output)\n\n    - name: Upload package to GitHub Release\n      uses: AButler/upload-release-assets@v2.0\n      with:\n        files: '*.tar.bz2'\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n\n```"}
{"id": "63c49a6f6fc19abdf9cb61cd", "level": "level3", "llm_response": "```yaml\nname: Prepare Release Add-on\n\non:\n  event: push", "answer": "```yaml name: Prepare Release Add-on\n\non:\n  workflow_dispatch:\n\njobs:\n  prepare-release:\n    name: Prepare Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Prepare Release and Create Pull Request\n      env:\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n      run: ./gradlew createPullRequestRelease\n```"}
{"id": "63c49ef31842bc13d779415a", "level": "level3", "llm_response": "```yml\nname: Pull request automation\non: pull_request.push\n", "answer": "```yaml # This file is maintained in https://github.com/WeblateOrg/meta/\n\nname: Pull request automation\n\non:\n  pull_request_target:\n    types: opened\n\npermissions:\n  contents: read\n\njobs:\n  weblate_automerge:\n    permissions:\n      pull-requests: write # for actions-ecosystem/action-add-labels to add label\n    runs-on: ubuntu-20.04\n    name: Weblate automerge\n    if: ${{ github.actor == 'weblate' || github.actor == 'pre-commit-ci[bot]' }}\n    steps:\n    - uses: actions-ecosystem/action-add-labels@v1.1.3\n      with:\n        labels: automerge\n```"}
{"id": "63c49779cbc73931bb180a0e", "level": "level3", "llm_response": "```yml\nname: Archs\n\non:\n  push:\n    branches", "answer": "```yaml name: Archs\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    name: Build on ${{ matrix.arch }}\n\n    strategy:\n      matrix:\n        include:\n          - arch: armv7\n            distro: ubuntu20.04\n          - arch: aarch64\n            distro: ubuntu20.04\n          - arch: ppc64le\n            distro: ubuntu20.04\n          - arch: s390x\n            distro: ubuntu20.04\n  \n    steps:\n    - uses: actions/checkout@v2.4.0\n    - uses: uraimo/run-on-arch-action@v2.1.1\n      name: Build\n      id: build\n      with:\n        arch: ${{ matrix.arch }}\n        distro: ${{ matrix.distro }}\n        install: |\n          apt-get update -y\n          apt-get install -y apache2-dev libcjose-dev libssl-dev check pkg-config\n          apt-get install -y libjansson-dev libcurl4-openssl-dev libhiredis-dev libpcre2-dev\n        setup: |\n          mkdir -p \"${PWD}/logs\"\n        dockerRunArgs: |\n          --volume \"${PWD}/logs:/logs\"\n        env: |\n          logfilename: test-suite-${{ matrix.distro }}-${{ matrix.arch }}.log\n        run: |\n          ./autogen.sh\n          ./configure\n          make check\n          cp test-suite.log \"/logs/${logfilename}\"\n          echo \"Copied test-suite.log to /logs/${logfilename}\"\n          \n    - name: Results\n      run: |\n        cat ${PWD}/logs/*.log\n```"}
{"id": "63c4a11c1899db5886517d65", "level": "level3", "llm_response": "```yaml\n---\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49adb1899db58864f007e", "level": "level3", "llm_response": "```yml\nname: TLS protocol scan\n\non:\n  push:\n   ", "answer": "```yaml name: \"TLS protocol scan\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n\npermissions: read-all\n\njobs:\n  tls-check:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [linux]\n        arch: [amd64]\n    name: TLS check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Install dependencies\n        run: |\n          cd $GITHUB_WORKSPACE\n          sudo apt-get update\n          sudo apt-get install -y apache2-utils openssl\n          mkdir -p test/data\n          cd test/data\n          ../scripts/gen_certs.sh\n          htpasswd -bBn test test123 > htpasswd\n      - name: Check for TLS settings\n        continue-on-error: true\n        run: |\n          cd $GITHUB_WORKSPACE\n          make OS=$OS ARCH=$ARCH binary\n          bin/zot-$OS-$ARCH serve examples/config-tls.json &\n          sleep 5\n          curl -kv --tls-max 1.0 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.0 detected\"; exit 1; fi\n          curl -kv --tls-max 1.1 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.1 detected\"; exit 1; fi\n          curl -kv --tls-max 1.2 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -ne 0 ]]; then echo \"TLSv1.2 missing\"; exit 1; fi\n        env:\n          OS: ${{ matrix.os }}\n          ARCH: ${{ matrix.arch }}\n```"}
{"id": "63c497711e33648075781160", "level": "level3", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n  pull_request:\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n\njobs:\n  publish:\n    name: Publish to MavenLocal\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: publishToMavenLocal\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: app:assembleDebug\n```"}
{"id": "63c4a03a1899db588651233d", "level": "level3", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n         languages: ${{ matrix.language }}\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a19d6fc19abdf9ce3478", "level": "level3", "llm_response": "```yml\nname: depaware\non:\n  push:\n    branches", "answer": "```yaml name: depaware\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n      - 'release-branch/*'\n\nconcurrency:\n  group: ${{ github.workflow }}-$${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: go.mod\n\n    - name: depaware\n      run: go run github.com/tailscale/depaware --check\n        tailscale.com/cmd/tailscaled\n        tailscale.com/cmd/tailscale\n        tailscale.com/cmd/derper\n```"}
{"id": "63c49d2133b087f6bde57611", "level": "level3", "llm_response": "```yml\n---\nname: Repository Dispatch Triggered\non: events/work", "answer": "```yaml name: Repository Dispatch Triggered\n\non: [repository_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Repository Dispatch Triggered\n        if: github.event.action == 'event-demo'\n        run: |\n          echo \"Workflow triggered successfully by repository dispatch action!\"```"}
{"id": "63c49d231899db58864fe6c8", "level": "level3", "llm_response": "```yml\nname: docs\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: docs\n\non:\n  push:\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    branches:\n      - develop\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    if: github.repository == 'theforeman/foreman-ansible-modules'\n    steps:\n      - uses: actions/checkout@v3\n      - name: configure git\n        run: |\n          git config user.name \"${GITHUB_ACTOR}\"\n          git config user.email \"${GITHUB_ACTOR}@bots.github.com\"\n          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.8\"\n      - name: Install dependencies\n        run: make doc-setup\n      - name: Build docs\n        run: make doc\n      - name: commit docs\n        run: |\n          git checkout gh-pages\n          rm -rf $(basename ${GITHUB_REF})\n          mv docs/_build/html $(basename ${GITHUB_REF})\n          ln --force --no-dereference --symbolic  $(dirname v*/index.html | sort --version-sort --reverse | head -n1) latest\n          git show origin/develop:docs/_gh_include/header.inc > index.html\n          (echo develop; echo latest; dirname v*/index.html | sort --version-sort --reverse) | xargs -I@@ -n1 echo '<div class=\"col-md-4 center\"><a href=\"@@/\" class=\"btn-doc btn\"><i class=\"fa fa-newspaper-o\"></i><p>@@</p></a></div>' >> index.html\n          git show origin/develop:docs/_gh_include/footer.inc >> index.html\n          git add $(basename ${GITHUB_REF}) latest index.html\n          git commit -m \"update docs for $(basename ${GITHUB_REF})\" || true\n      - name: push docs\n        run: git push origin gh-pages\n```"}
{"id": "63c4a06bcbc73931bb1ba455", "level": "level3", "llm_response": "```yml\n---\nname: Windows GPU CI Pipeline\non:\n  pull", "answer": "```yaml # Don't edit this file manully.\n# Run generate-skip-doc-change.py to generate it.\n\nname: Windows GPU CI Pipeline\non:\n  pull_request:\n    paths:\n      - docs/**\n      - README.md\n      - CONTRIBUTING.md\n      - BUILD.md\n\njobs:\n  job1:\n    name: cuda build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job2:\n    name: dml build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job3:\n    name: training build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job4:\n    name: kernelDocumentation build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n```"}
{"id": "63c496df1e3364807577d7a8", "level": "level3", "llm_response": "```yml\nname: sast\n\non:\n  push:\n    branches", "answer": "```yaml name: sast\n\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n  pull_request:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      security-events: write\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'javascript' ]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0e1517fc08c1ef127c9", "level": "level3", "llm_response": "```yaml\nname: Send publish metrics to BigQuery\n\non:\n  release", "answer": "```yaml name: Send publish metrics to bigquery\non:\n  release:\n    types: published\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.0\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_BQ_METRICS_KEY }}\n          export_default_credentials: true\n      - run: 'jq -c ''.release |\n             {\n               package_name: .name | split(\" \")[0],\n               name,\n               tag_name,\n               version: .tag_name | split(\"-v\")[1],\n               html_url,\n               target_commitish,\n               created_at,\n               published_at,\n               draft,\n               prerelease\n             }'' $GITHUB_EVENT_PATH > releases.json'\n      - run: bq load --source_format=NEWLINE_DELIMITED_JSON metrics.releases releases.json\n```"}
{"id": "63c49d796fc19abdf9cc9892", "level": "level3", "llm_response": "```yml\nname: Deploy App to Staging\non:\n  branch", "answer": "```yaml name: Deploy App to Staging\non:\n  workflow_dispatch:\n    inputs:\n      # commit hash (for frontend deploy to fleek)\n      commit:\n        description: \"Branch/Commit ref\"\n        default: \"origin/main\"\n        type: string\njobs:\n  deploy-app:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Checkout staging-app\n        run: |\n          git fetch\n          git checkout -b staging-app origin/staging-app\n          git reset --hard ${{ github.event.inputs.commit }}\n          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/gitcoinco/passport.git\n          git push origin staging-app -f\n```"}
{"id": "63c49e4b1e336480757ac9aa", "level": "level3", "llm_response": "```yml\nname: amd64 Windows Java\n\non:\n  push:\n", "answer": "```yaml name: amd64 Windows Java\n\non: [push, pull_request]\n\njobs:\n  # Building using the github runner environement directly.\n  visual-studio:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Check cmake\n      run: cmake --version\n    - name: Install SWIG 4.0.2\n      run: |\n        (New-Object System.Net.WebClient).DownloadFile(\"http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip\",\"swigwin-4.0.2.zip\");\n        Expand-Archive .\\swigwin-4.0.2.zip .;\n        echo \"$((Get-Item .).FullName)/swigwin-4.0.2\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n    - name: Check swig\n      run: swig -version\n    - name: Check mvn\n      run: mvn.cmd --version\n    - name: Configure\n      run: cmake -S. -Bbuild -G \"Visual Studio 17 2022\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_JAVA=ON -DSKIP_GPG=ON\n    - name: Build\n      run: cmake --build build --config Release --target ALL_BUILD -- /verbosity:normal /maxcpucount\n    - name: Test\n      run: cmake --build build --config Release --target RUN_TESTS -- /verbosity:normal /maxcpucount\n    - name: Install\n      run: cmake --build build --config Release --target INSTALL -- /verbosity:normal /maxcpucount\n```"}
{"id": "63c497d3cbc73931bb182d46", "level": "level3", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ruby: [ '2.7.6', '3.0.4', '3.1.2' ] #, 'jruby-head' ]\n    steps:\n      - name: Setup Ruby, JRuby and TruffleRuby\n        uses: ruby/setup-ruby@v1.118.0\n        with:\n          ruby-version: ${{ matrix.ruby }}\n      - uses: actions/checkout@v3   \n      - name: Install dependecies\n        run: bundle install\n      - name: Run Tests\n        run: ./run_tests.sh\n     \n  auto-merge:\n    needs: run-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          gh pr merge --auto --rebase \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}} \n```"}
{"id": "63c49fb91899db588650eeb3", "level": "level3", "llm_response": "```yml\nname: Release Pull Request Automation\n\non:\n  push:\n", "answer": "```yaml name: Release Pull Request Automation\n\n# Controls when the action will run. Triggers the workflow on create branch or tag\n# events but only acts on branch create.\non:\n    create:\njobs:\n    release-pull-request-automation:\n        if: ${{ github.event.ref_type == 'branch' && contains( github.ref, 'release/' ) }}\n        env:\n            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n        runs-on: ubuntu-latest\n        steps:\n            - uses: act10ns/slack@v1\n              with:\n                  status: starting\n              if: ${{ always() }}\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Create changeset for pull request\n              run: |\n                  git config user.name github-actions\n                  git config user.email github-actions@github.com\n                  git commit -m 'Empty commit for release pull request' --allow-empty\n                  git push\n            - name: Create Release Pull Request\n              uses: woocommerce/automations@v1\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n                  automations: release\n            - uses: act10ns/slack@v1\n              with:\n                  status: ${{ job.status }}\n                  steps: ${{ toJson(steps) }}\n              if: ${{ always() }}\n```"}
{"id": "63c49e83517fc08c1ef03f35", "level": "level3", "llm_response": "```yaml\nname: test-flax\n\non:\n  push:\n    branches", "answer": "```yaml name: test-flax\n\non:\n  push:\n    branches:\n      - 'integration'\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=jammy\"\n            \"MACHINARIS_STREAM=test\"\n            \"CHIADOG_BRANCH=dev\"\n            \"FLAX_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n```"}
{"id": "63c49f4a1842bc13d779622d", "level": "level3", "llm_response": "```yaml\nname: New Release - Update other projects\non:\n  event", "answer": "```yaml name: New Release - Update other projects\non:\n  repository_dispatch:\n    types: [http4k-release]\njobs:\n  create-upgrade-branches:\n    strategy:\n      matrix:\n        repo:\n          - 'http4k/toolbox'\n          - 'http4k/examples'\n          - 'http4k/http4k-by-example'\n          - 'http4k/http4k-connect'\n          - 'http4k/http4k-heroku-travis-example-app'\n          - 'http4k/http4k-contract-todo-backend'\n          - 'http4k/http4k-bin'\n          - 'http4k/http4k-todo-backend'\n          - 'http4k/http4k-bootstrap'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger ${{ matrix.repo }}\n        uses: peter-evans/repository-dispatch@v1.1.1\n        with:\n          token: ${{ secrets.TOOLBOX_REPO_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: http4k-release\n          client-payload: '{\"version\": \"${{ github.event.client_payload.version }}\"}'\n```"}
{"id": "63c49cbe1899db58864fbd78", "level": "level3", "llm_response": "```yaml\nname: Build\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  # Cancel any in-progress workflows for this workflow/branch combination.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    name: Build without tests\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'Source/ViewControllerPresentationSpy.xcodeproj', scheme: 'ViewControllerPresentationSpy-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }\n          - { project: 'ObjCSample/ObjCSampleViewControllerPresentationSpy.xcodeproj', scheme: 'ObjCSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 8' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  test:\n    name: Build & test\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'SwiftSample/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n          - { project: 'SwiftSamplePackage/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build & test\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  buildCarthage:\n    needs: [ build, test ]\n    name: Build Carthage\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Build\n      run: carthage build --configuration Release --no-skip-current --use-xcframeworks\n\n  podspec:\n    needs: [ build, test ]\n    name: Pod Spec Lint\n    runs-on: macos-latest\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Lint the pod spec\n        run: pod spec lint --quick\n\n  auto-merge:\n    needs: [ buildCarthage, podspec ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          ./merge_dependabot.sh\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}\n```"}
{"id": "63c49eaa517fc08c1ef04e4d", "level": "level3", "llm_response": "```yml\nname: Labeler\n\non:\n  pull_request:\n   ", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: actions/labeler@v4.0.2\n      if: github.event.pull_request.head.repo.full_name == github.repository\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a51517fc08c1eee9273", "level": "level3", "llm_response": "```yaml\nname: Typescript Types\non:\n  pull_request:\n   ", "answer": "```yaml name: Typescript Types\non:\n  pull_request:\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint TS-Files\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 14\n\n      - run: npm install\n\n      - name: Lint TS-Files\n        run: npm run lint-ts\n\n  test-ts-types:\n    needs:\n      - lint\n    runs-on: ubuntu-latest\n    name: Test Typescript Types\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 12\n\n      - run: npm install\n\n      - name: Typings\n        run: npm run test-tsd```"}
{"id": "63c49a2633b087f6bde43c7c", "level": "level3", "llm_response": "```yml\nname: Support requests\non:\n  branches:\n    -", "answer": "```yaml name: 'Support requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\njobs:\n  support:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'repro-required'\n          issue-comment: >\n            :wave: @{issue-author}, sorry you're having an issue. As the issue template explains, we require that you provide a runnable example that reproduces your issue (please read the [issue template](https://raw.githubusercontent.com/react-native-google-signin/google-signin/master/.github/ISSUE_TEMPLATE/Custom.md)).\n\n            The reason is that maintainers do not have time to try reproduce bugs themselves. Please try to minimize the superfluous code and focus only on reproducing the bug.\n\n            Please create a new issue with this and we'll be happy to review it! If you're hitting a hard wall, you may consider [paid assistance](https://github.com/react-native-google-signin/google-signin/pull/861).\n          close-issue: true\n          lock-issue: false\n```"}
{"id": "63c49abb33b087f6bde478b7", "level": "level3", "llm_response": "```yml\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 43 7 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'```"}
{"id": "63c497bf1899db58864db96b", "level": "level3", "llm_response": "```yaml\nname: Verify docs\n\non:\n  schedule:\n    - cron", "answer": "```yaml name: Verify docs\n\non:\n  schedule:\n    # every day at 9am\n    - cron: '0 9 * * *'\n\njobs:\n  verify:\n    name: Verify docs and spelling\n    runs-on: [ubuntu-latest]\n    steps:\n    - name: Check-out code\n      uses: actions/checkout@v3\n    - name: Set up Go using version from go.mod\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: 'go.mod'\n    - name: Run verify scripts\n      run: make verify\n    - name: Checking for broken Markdown links for main branch\n      uses: gaurav-nelson/github-action-markdown-link-check@v1\n      with:\n        folder-path: './docs'\n        file-path: './README.md, ./CHANGELOG.md, ./CONTRIBUTING.md, ./GOVERNANCE.md, ./MAINTAINERS.md, ./ROADMAP.md, ./SECURITY.md'\n        config-file: 'hack/.md_links_config.json'\n    - name: Markdownlint\n      run: |\n        sudo npm install -g markdownlint-cli@0.31.1\n        make markdownlint \n```"}
{"id": "63c49a471899db58864ec29a", "level": "level3", "llm_response": "```yml\nname: CodeQL Analysis\n\non:\n  branches:\n   ", "answer": "```yaml name: CodeQL Analysis\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '0 8 * * *'\n\njobs:\n  analyze:\n    name: CodeQL Analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        id: checkout_repo\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        id: init_codeql\n        uses: github/codeql-action/init@v2\n        with:\n          queries: security-and-quality\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        id: analyze_codeql\n        uses: github/codeql-action/analyze@v2\n\n# Built with \u2764 by [Pipeline Foundation](https://pipeline.foundation)```"}
{"id": "63c496ba33b087f6bde2deab", "level": "level3", "llm_response": "```yml\nname: Release Drafter\n\non:\n  push:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    if: github.repository == 'activeloopai/deeplake'\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a586fc19abdf9cb5781", "level": "level3", "llm_response": "```yml\nname: publish-build\n\non:\n  release:\n    types", "answer": "```yaml name: publish-build\non:\n  release:\n    types: [released]\n\njobs:\n  build-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node and cache\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n      - name: Check release validity\n        run: sh .github/scripts/check-release.sh\n      - name: Install project dependencies\n        run: yarn install\n      - name: Build project\n        run: yarn build\n      - name: Create ZIP folder\n        uses: thedoctor0/zip-release@master\n        with:\n          filename: 'build.zip'\n          directory: 'build'\n      - name: Upload build to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: build/build.zip\n          tag: ${{ github.ref }}\n```"}
{"id": "63c497311899db58864d7f91", "level": "level3", "llm_response": "```yaml\nname: CLA\non:\n  issues:\n    - type", "answer": "```yaml \nname: CLA\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request'\n        # Alpha Release\n        uses: hanxiao/github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: '.github/signatures/v1/cla.json'\n          path-To-cladocument: 'https://github.com/jina-ai/jinabox.js/blob/master/CLA.md'\n          # branch should not be protected\n          branch: 'cla'\n          whitelist: hanxiao,nan-wang,jina-bot,BingHo1013,alexcg1,imsergiy,YueLiu-jina,JoanFM,lusloher\n          empty-commit-flag: false\n          blockchain-storage-flag: false```"}
{"id": "63c49f771842bc13d77973e6", "level": "level3", "llm_response": "```yml\nname: Pull Request Validation\n\non:\n  pull_request:\n", "answer": "```yaml name: Pull Request Validation\n\non:\n  pull_request:\n    branches:\n      - trunk\n      - 'release/**'\n      - 'feature/**'\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - reopened\n      - synchronize\n      - edited\n\nenv:\n  LABELS: ${{ join( github.event.pull_request.labels.*.name, ' ' ) }}\n\njobs:\n  check-type-label:\n    name: Check [Type] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Type]' ) == false\n        run: exit 1\n  check-focus-label:\n    name: Check [Focus] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Focus]' ) == false && contains( env.LABELS, 'Infrastructure' ) == false\n        run: exit 1\n  check-milestone:\n    name: Check Milestone\n    runs-on: ubuntu-latest\n    steps:\n      - if: github.event.pull_request.milestone == null && contains( env.LABELS, 'no milestone' ) == false\n        run: exit 1\n```"}
{"id": "63c49eb6cbc73931bb1af2d4", "level": "level3", "llm_response": "```yaml\nname: Notify Downstream Projects\non:\n  branch: develop", "answer": "```yaml name: Notify Downstream Projects\non:\n  push:\n    branches: [ develop ]\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\njobs:\n  notify-downstream:\n    # Only respect triggers from our develop branch, ignore that of forks\n    if: github.repository == 'matrix-org/matrix-js-sdk'\n    continue-on-error: true\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - repo: vector-im/element-web\n            event: element-web-notify\n          - repo: matrix-org/matrix-react-sdk\n            event: upstream-sdk-notify\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify matrix-react-sdk repo that a new SDK build is on develop so it can CI against it\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.ELEMENT_BOT_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: ${{ matrix.event }}\n```"}
{"id": "63c496381e3364807577930d", "level": "level3", "llm_response": "```yaml\nname: Wrye Bash CI\n\non:\n  push:\n", "answer": "```yaml name: Wrye Bash CI\n\non: push\n\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout commit\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n        architecture: 'x64'\n    - name: Restore dependencies cache\n      uses: actions/cache@v3\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools wheel\n        python -m pip install -r requirements.txt\n    - name: Test Wrye Bash\n      run: |\n        python -m pytest\n    - name: Build Wrye Bash\n      # Note the configs - needed for build.py\n      run: |\n        git config --local user.name \"GitHub Actions\"\n        git config --local user.email \"github-action@users.noreply.github.com\"\n        python scripts/build.py --verbose\n    - name: Copy executable/license files\n      run: |\n        cp \"scripts/build/standalone/dist/Wrye Bash.exe\" Mopy\n        cp LICENSE.md Mopy/LICENSE.md\n#    - name: Create Apps folder # does not work\n#      run: mkdir Mopy/Apps\n    - name: Upload Standalone Build Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: ${{ format('Wrye Bash CI {0}.{1}', github.ref_name, github.sha) }}\n        path: |\n          Mopy/*\n          Mopy/LICENSE.md\n          !Mopy/**.py\n          !Mopy/**.pyw\n          !Mopy/**.pyd\n          !Mopy/**.bat\n          !Mopy/**.template\n          !Mopy/redist\n          !Mopy/__pycache__\n          !Mopy/bash/**.py\n          !Mopy/bash/__pycache__\n          !Mopy/bash/basher\n          !Mopy/bash/bosh\n          !Mopy/bash/brec\n          !Mopy/bash/env\n          !Mopy/bash/game\n          !Mopy/bash/gui\n          !Mopy/bash/patcher\n          !Mopy/bash/tests\n```"}
{"id": "63c49e83517fc08c1ef03f23", "level": "level3", "llm_response": "```yaml\nname: release-petroleum\non: manual\njobs:\n", "answer": "```yaml name: release-petroleum\n\non: \n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Release Version' \n\njobs:\n  docker:\n    runs-on: ubuntu-20.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=focal\"\n            \"MACHINARIS_STREAM=latest\"\n            \"PETROLEUM_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n```"}
{"id": "63c49ecacbc73931bb1afb61", "level": "level3", "llm_response": "```yml\nname: Upgrade Python Requirements\non:\n  schedule:\n   ", "answer": "```yaml name: Upgrade Python Requirements\n\non:\n  schedule:\n    # will start the job at 01:30 UTC every Friday\n    - cron: \"30 1 * * 5\"\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: \"Target branch against which to create requirements PR\"\n        required: true\n        default: '$default-branch'\n\njobs:\n  call-upgrade-python-requirements-workflow:\n    uses: openedx/.github/.github/workflows/upgrade-python-requirements.yml@master\n    with:\n      branch: ${{ github.event.inputs.branch || '$default-branch' }}\n      # optional parameters below; fill in if you'd like github or email notifications\n      # user_reviewers: \"\"\n      # team_reviewers: \"\"\n      # email_address: \"\"\n      # send_success_notification: false\n    secrets:\n      requirements_bot_github_token: ${{ secrets.REQUIREMENTS_BOT_GITHUB_TOKEN }}\n      requirements_bot_github_email: ${{ secrets.REQUIREMENTS_BOT_GITHUB_EMAIL }}\n      edx_smtp_username: ${{ secrets.EDX_SMTP_USERNAME }}\n      edx_smtp_password: ${{ secrets.EDX_SMTP_PASSWORD }}\n```"}
{"id": "63c49717517fc08c1eed4a9a", "level": "level3", "llm_response": "```yml\nname: Update Prettier\n\non:\n  push:\n", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\n  workflow_dispatch: {}\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49fa5736e7f0ed8c6f75c", "level": "level3", "llm_response": "```yaml\nname: Deploy Documentation\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Deploy Documentation\n\non:\n  push:\n    branches:\n    - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n\n    - name: vuepress-deploy\n      uses: jenkey2011/vuepress-deploy@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        TARGET_REPO: OT-CONTAINER-KIT/redis-operator\n        TARGET_BRANCH: gh-pages\n        BUILD_SCRIPT: cd docs; yarn && yarn build\n        BUILD_DIR: src/.vuepress/dist/\n \n```"}
{"id": "63c49feb1899db58865101eb", "level": "level3", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches: [ main ]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n          # config-name: my-config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c49db51899db5886501d95", "level": "level3", "llm_response": "```yml\nname: spring-reactive-groovy-dsl\n\non", "answer": "```yaml name: spring-reactive-groovy-dsl\n\non:\n  push:\n    paths:\n      - \"groovy-dsl/**\"\n    branches: [ master ]\n  pull_request:\n    paths:\n      - \"groovy-dsl/**\"\n    types:\n      - opened\n      - synchronize\n      - reopened\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n          fetch-depth: 0\n    - name: Set up JDK\n      uses: actions/setup-java@v3\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: 'maven'\n    - name: Start up databases via Docker Compose \n      run: |\n        docker-compose up -d mongodb\n        sleep 5\n        docker ps -a  \n    - name: Build with Maven\n      run: |\n        cd groovy-dsl\n        mvn -B package --file pom.xml\n```"}
{"id": "63c49ac5cbc73931bb195e22", "level": "level3", "llm_response": "```yml\nname: Build and Deploy Documentation\n\non:\n  push:\n", "answer": "```yaml name: Build and Deploy Documentation\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set release env\n        run: echo \"RELEASE_VERSION=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\n      - name: Set up python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Configure the git user\n        run: |\n          git config user.name \"versioning_user\"\n          git config user.email \"connaisseur@securesystems.dev\"\n      - name: Set up Python\n        run: |\n          pip install -r docs/requirements_docs.txt\n      - name: deploy\n        run: |\n          mike deploy --push --update-aliases ${RELEASE_VERSION} latest\n```"}
{"id": "63c49b76cbc73931bb19a77b", "level": "level3", "llm_response": "```yaml\n---\nname: CI\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n\n    services:\n      postgres:\n        image: postgres:14-alpine\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n\n      redis:\n        image: redis:alpine\n        ports: ['6379:6379']\n\n    env:\n      DB_HOST: localhost\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      REDIS_URL: redis://localhost:6379/0\n      RAILS_ENV: test\n      DISABLE_SPRING: true\n      CI: true\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          bundler-cache: true\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3.5.1\n        with:\n          cache: yarn\n\n      - name: Install Yarn packages\n        run: bin/yarn install --frozen-lockfile\n\n      - name: Lint with RuboCop\n        run: bin/rubocop --parallel\n\n      - name: Run ESLint\n        run: bin/yarn lint\n\n      - name: Lint with SlimLint\n        run: bundle exec slim-lint .\n\n      - name: Setup PostgreSQL\n        run: bin/rails db:create\n\n      - name: Compile assets\n        run: bin/rails assets:precompile\n\n      - name: Run Ruby Tests\n        run: bin/rspec\n\n      - name: End-to-end tests\n        uses: cypress-io/github-action@v4\n        with:\n          start: bundle exec rails server\n          wait-on: http://localhost:3000\n          browser: chrome\n          record: true\n        env:\n          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CYPRESS_BASE_URL: http://localhost:3000\n          CYPRESS: true\n        if: env.CYPRESS_RECORD_KEY != null\n\n      - name: Check JS size limit\n        run: yarn size-limit\n\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: Cypress screenshots and videos\n          path: |\n            tmp/cypress_screenshots/\n            tmp/cypress_videos/\n          if-no-files-found: ignore\n\n  deploy:\n    runs-on: ubuntu-20.04\n\n    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Fetch tag annotations\n        # https://github.com/actions/checkout/issues/290\n        run: git fetch --tags --force\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build the production image\n        run: |\n          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})\n          export COMMIT_VERSION=$(git describe --always)\n          echo $GITHUB_SHA\n          echo $COMMIT_TIME\n          echo $COMMIT_VERSION\n          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .\n\n      - name: Push the image tagged as LATEST to the container registry\n        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:latest\n          docker push ghcr.io/${{ github.repository }}:latest\n\n      - name: Push the image tagged with version to the container registry\n        if: startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n          docker push ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n\n      - name: Send webhook to start deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n        if: env.DEPLOY_HOOK != null\n        run: curl -X POST ${{ env.DEPLOY_HOOK }}\n\n      - name: Notify Honeybadger about deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}\n        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null\n        uses: honeybadger-io/github-notify-deploy-action@v1\n        with:\n          api_key: ${{ secrets.HONEYBADGER_API_KEY }}\n```"}
{"id": "63c49eb21842bc13d77927ac", "level": "level3", "llm_response": "```yml\nname: Nightly Vinix Rebuild\n\non: [", "answer": "```yaml name: Nightly Vinix rebuild\n\n#on:\n#  schedule:\n#    - cron: '0 0 * * *'\n\njobs:\n  vinix-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install make curl git mercurial libarchive-tools xorriso -y\n\n      - name: Build distro\n        run: make distro-full\n\n      - name: Build ISO\n        run: make all\n\n      - name: Set TAG_DATE variable\n        run: echo \"TAG_DATE=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n\n      - name: Tag new nightly release\n        run: git tag nightly-$TAG_DATE && git push --tags\n\n      - name: Rename vinix.iso\n        run: mv vinix.iso vinix-nightly-$(date +'%Y%m%d').iso\n\n      - name: Create nightly release\n        uses: softprops/action-gh-release@v1\n        with:\n          name: Nightly build ${{ env.TAG_DATE }}\n          tag_name: nightly-${{ env.TAG_DATE }}\n          body: Image of an up to date Vinix nightly build.\n          files: |\n            vinix-nightly-*.iso\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a052b008460c1df53339", "level": "level3", "llm_response": "```yml\nname: Pull Request\n\non:\n  push:\n    branches", "answer": "```yaml name: Pull Request\non:\n  push:\n    paths:\n      - \"**.go\"\n    tags:\n      - v*\n    branches:\n      - master\n      - development\n  pull_request:\n    branches-ignore:\n      - dependabot/**\n\njobs:\n  checks:\n    name: Pull Request Checks\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, '[ci skip]') == false && contains(github.event.head_commit.message, '[skip ci]') == false\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      # - name: Run tests\n      #   run: make test\n\n      - name: Run GolangCI-Lint\n        uses: golangci/golangci-lint-action@v3.1.0\n        with:\n          version: latest\n          args: --tests=0 --timeout=30m\n\n      - name: Run Semgrep\n        run: |\n          python3 -m pip install semgrep\n          semgrep scan --config auto --dryrun -q --include \"**.go\"\n\n      - name: Cross-platform checks\n        uses: goreleaser/goreleaser-action@v3\n        with: \n          version: latest\n          args: build --skip-validate --rm-dist --snapshot --timeout=30m\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2```"}
{"id": "63c5c55aac4f2678a5bd5362", "level": "level3", "llm_response": "```yaml\nname: Code Scanning - Action\n\non:\n  schedule:\n", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  # push:\n  schedule:\n    - cron: '0 12 * * 0'\n\npermissions:\n  contents: read\n\njobs:\n  CodeQL-Build:\n\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/analyze to upload SARIF results\n    strategy:\n      fail-fast: false\n\n\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below).\n    #- name: Autobuild\n    #  uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    - name: Clean Install\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n      \n    - name: Build packages \n      run: npm run build\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49b791899db58864f3ba0", "level": "level3", "llm_response": "```yml\n---\nname: discussion-questions\n\non:\n  branches:\n", "answer": "```yaml name: discussion-questions\non:\n  discussion:\n    types: [created, answered]\njobs:\n  new_question:\n    if: github.event.action == 'created' && github.event.discussion.category.is_answerable\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :thinking: *{{ EVENT_PAYLOAD.discussion.user.login }} asked a question*\n\n            **{{ EVENT_PAYLOAD.discussion.title }}**\n            {{ EVENT_PAYLOAD.discussion.body }}\n\n            {{ EVENT_PAYLOAD.discussion.html_url }}\n\n  question_answered:\n    if: github.event.action == 'answered'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :tada: *{{ EVENT_PAYLOAD.answer.user.login }} answered a question*\n\n            **Q**: {{ EVENT_PAYLOAD.discussion.title }}\n            **A**: *{{ EVENT_PAYLOAD.answer.body }}*\n\n            {{ EVENT_PAYLOAD.answer.html_url }}\n```"}
{"id": "63c4992d6fc19abdf9cae027", "level": "level3", "llm_response": "```yml\nname: Issue Labeler\n\non:\n  issues:\n   ", "answer": "```yaml name: \"Issue Labeler\"\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: github/issue-labeler@v2.5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/issue-labeler.yml\n        #not-before: 2020-01-15T02:54:32Z\n        enable-versioned-regex: 0\n        #versioned-regex: 'issue_labeler_regex_version=(\\d+)'\n        body-missing-regex-label: 'broken-template'\n```"}
{"id": "63c49f746fc19abdf9cd63ff", "level": "level3", "llm_response": "```yaml\nname: s2i-mvn-gradle-pr\non", "answer": "```yaml ---\nname: s2i-mvn-gradle-pr\non:\n  pull_request:\n    paths:\n      - s2i-mvn-gradle/**\n      - .github/workflows/s2i-mvn-gradle-pr.yaml\njobs:\n  build:\n    env:\n      context: s2i-mvn-gradle\n      image_name: s2i-mvn-gradle\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49ab4517fc08c1eeebb47", "level": "level3", "llm_response": "```yaml\nname: Tests\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n        test-type: [e2e, lint]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Run test (${{ matrix.test-type }})\n        run: 'npm run test:${{ matrix.test-type }}'\n        env:\n          CI: true\n```"}
{"id": "63c49db2b008460c1df42b9d", "level": "level3", "llm_response": "```yaml\nname: Upload Snapshot\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Upload Snapshot\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n\njobs:\n  verify:\n    name: latest-images\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 8.0.x\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: GPG_PASSPHRASE\n      - name: Assert Snapshot Version\n        run: |\n          ./mvnw clean install -Dmaven.test.skip=true\n          ./mvnw -q \\\n            -Dexec.executable=echo \\\n            -Dexec.args='${project.version}' \\\n            exec:exec | perl -ne 'die unless m/.*-SNAPSHOT/'\n      - name: Publish to Apache Maven Central\n        run: ./mvnw deploy\n        env:\n          OSSRH_USERNAME: ${{ secrets.SNAPSHOT_UPLOAD_USER }}\n          OSSRH_TOKEN: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}```"}
{"id": "63c49b7e33b087f6bde4c721", "level": "level3", "llm_response": "```yaml\nname: CI: Lint\n\non:\n  push:\n   ", "answer": "```yaml name: \"CI: Lint\"\n\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  lint:\n\n    runs-on: ubuntu-latest\n\n    container:\n      image: valalang/lint\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Lint\n      run: io.elementary.vala-lint -d .\n```"}
{"id": "63c49ecc33b087f6bde620ae", "level": "level3", "llm_response": "```yaml\nname: Java CI with Maven for PRs\n\non:\n ", "answer": "```yaml # This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Java CI with Maven for PRs\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Disabling shallow clone is recommended for improving relevancy of reporting with SonarCloud\n          fetch-depth: 0\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: 8\n      - name: Build with Maven\n        run: mvn --show-version --no-transfer-progress verify --file pom.xml -Pcoverage,cloudbees-oss-release -Dgpg.skip=true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499541842bc13d7770086", "level": "level3", "llm_response": "```yml\nname: Generate Roblox standard library\n\non:\n  push", "answer": "```yaml name: Generate Roblox standard library\r\non: [push, pull_request]\r\njobs:\r\n  generate:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v1\r\n    - name: Generate\r\n      run: cargo run --bin selene --verbose -- generate-roblox-std\r\n    - name: Upload\r\n      uses: actions/upload-artifact@v1\r\n      with:\r\n        name: roblox\r\n        path: roblox.yml```"}
{"id": "63c4a061cbc73931bb1ba06d", "level": "level3", "llm_response": "```yml\nname: check-x-pack-winlogbeat\n\non:\n ", "answer": "```yaml name: check-x-pack-winlogbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-winlogbeat.yml'\n      - 'x-pack/winlogbeat/**'\n      - 'winlogbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/winlogbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      uses: magefile/mage-action@v2\n      with:\n        args: check update\n        workdir: \"${{ env.BEAT_MODULE }}\"\n```"}
{"id": "63c4990ccbc73931bb18b0e2", "level": "level4", "llm_response": "```yml\nname: Test CI\non:\n  event:\n    type", "answer": "```yaml name: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n      - name: Install\n        run: |\n          npm install -g yarn\n          yarn\n        env:\n          CI: \"true\"\n      - name: Build\n        run: |\n          yarn build\n        env:\n          CI: \"true\"\n      - name: Check Circular Dependencies\n        run: |\n          yarn circular\n        env:\n          CI: \"true\"\n      - name: Test\n        run: |\n          yarn test\n        env:\n          CI: \"true\"\n      - name: Bench\n        run: |\n          node packages/core/build/examples/bench/queue.js\n        env:\n          CI: \"true\"\n```"}
{"id": "63c4a1971842bc13d77a4d18", "level": "level4", "llm_response": "```yml\nname: Tribble\n\non:\n  issue:\n    opened", "answer": "```yaml name: Tribble\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: arctic-hen7/tribble-bot@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a15933b087f6bde71f6b", "level": "level4", "llm_response": "```yml\nname: Create a Release\n\non:\n  push:\n   ", "answer": "```yaml name: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc*'\n\njobs:\n  release:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get the version\n        id: get_version\n        run: |\n          echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n          echo \"TRIMMED_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n\n      - name: REUSE Compliance Check\n        uses: fsfe/reuse-action@v1\n        with:\n          args: spdx -o zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: upload-results\n        uses: actions/upload-artifact@v3\n        continue-on-error: True\n        with:\n          name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: Create empty release notes body\n        run: |\n          echo \"TODO: add release overview and notes link\" > release-notes.txt\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Zephyr ${{ steps.get_version.outputs.TRIMMED_VERSION }}\n          body_path: release-notes.txt\n          draft: true\n          prerelease: true\n\n      - name: Upload Release Assets\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_content_type: text/plain\n```"}
{"id": "63c49f7a1e336480757b40f4", "level": "level4", "llm_response": "```yml\n---\nname: Lint\non:\n  pull_request:\n", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire ethermint repository This workflow is\n# run on every pull request and push to main The `golangci` will pass without\n# running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: Run golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      # Required: setup-go, for all versions v3.0.0+ of golangci-lint\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.3\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.\n          version: v1.46.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        # Check only if there are differences in the source code\n        if: \"env.GIT_DIFF\"\n  markdown-lint:\n    name: Run markdown-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            docs/**/*.md\n            x/**/*.md\n            README.md\n      - uses: nosborn/github-action-markdown-cli@v3.2.0\n        with:\n          files: .\n          config_file: .markdownlint.yml\n          ignore_path: .markdownlintignore\n        # Check only if there are differences in the source code\n        if: env.GIT_DIFF\n```"}
{"id": "63c494e18052faa2781adf47", "level": "level4", "llm_response": "```yml\nname: Lint I18N\n\non:\n  push", "answer": "```yaml name: Lint I18N\n\non:\n  push:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n\npermissions:\n  contents: read\n\n# Cancels all previous workflow runs for pull requests that have not completed.\nconcurrency:\n  # The concurrency group contains the workflow name and the (target) branch name.\n  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Install WP-CLI\n        run: |\n          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n          chmod +x wp-cli.phar\n          mkdir -p bin\n          mv wp-cli.phar bin/wp\n          echo \"${PWD}/bin\" >> $GITHUB_PATH\n\n      - name: WP-CLI Info\n        run: wp cli info\n\n      - name: Install latest version of i18n-command\n        run: wp package install wp-cli/i18n-command:dev-main\n\n      - name: List packages\n        run: wp package list\n\n      - name: Setup Node\n        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516\n        with:\n          node-version-file: '.nvmrc'\n          cache: npm\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@e04e1d97f0c0481c6e1ba40f8a538454fe5d7709\n        with:\n          php-version: '8.0'\n          coverage: none\n          tools: composer\n\n      - name: Install dependencies\n        run: |\n          npm ci\n        env:\n          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true\n\n      - name: Install PHP dependencies\n        uses: ramsey/composer-install@f680dac46551dffb2234a240d65ae806c2999dd6\n        with:\n          composer-options: '--prefer-dist --no-progress --no-interaction'\n\n      - name: Build plugin\n        run: npm run build:js\n\n      - name: Bundle regular version\n        run: npm run workflow:build-plugin\n\n      # Check if as many strings as expected were found.\n      # Fail job if `wp i18n make-pot` returns any warnings.\n      # Some false positive warnings are removed due to a bug in the string extraction.\n      # That's why this step is unfortunately a bit more complex.\n      # See https://github.com/wp-cli/i18n-command/issues/154\n      - name: Generate POT file\n        run: |\n          OUTPUT=$((wp i18n make-pot build/web-stories build/web-stories.pot) 2>&1 >/dev/null)\n\n          HAS_ERROR=false\n\n          EXPECTED_NUMBER_OF_STRINGS=1000\n          NUMBER_OF_FOUND_STRINGS=$(grep -o msgstr build/web-stories.pot | wc -l | xargs)\n\n          if (( \"$NUMBER_OF_FOUND_STRINGS\" < \"$EXPECTED_NUMBER_OF_STRINGS\" )); then\n          HAS_ERROR=true\n            echo \"String extraction found only $NUMBER_OF_FOUND_STRINGS translatable strings. Expected at least $EXPECTED_NUMBER_OF_STRINGS.\"\n          fi\n\n          IFS=$'\\n'\n          declare -a WARNINGS=($OUTPUT)\n          unset IFS\n\n          for WARNING in \"${WARNINGS[@]}\"; do\n            # Filter false positives.\n            if [[ $WARNING == *\"translator comment\"* ]] && [[ $WARNING != *\"%s\"* ]]; then\n              continue\n            fi\n\n            HAS_ERROR=true\n\n          \techo $WARNING\n          done\n\n          if [[ \"$HAS_ERROR\" = true ]]; then\n            exit 1\n          fi\n```"}
{"id": "63c499881e3364807578e735", "level": "level4", "llm_response": "```yml\nname: Deploy to WordPress.org\n\non:\n  event:\n", "answer": "```yaml name: Deploy to WordPress.org\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  tag:\n    name: New tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: WordPress Plugin Deploy\n        uses: 10up/action-wordpress-plugin-deploy@master\n        env:\n          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}\n          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}\n```"}
{"id": "63c498546fc19abdf9ca87b3", "level": "level4", "llm_response": "```yml\nname: Build And Test, NETCORE\non:\n ", "answer": "```yaml # Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\n# .NET CLI: https://docs.microsoft.com/dotnet/core/tools/\n# Description: The purpose of this workflow is to compile and run unit tests.\n\nname: Build And Test, NETCORE\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-test-NETCORE:\n\n    runs-on: ${{ matrix.os }}\n\n    env:\n      SOLUTION: ./NETCORE/ApplicationInsights.AspNetCore.sln\n      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/TestResults\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        framework: [net452, net462, net472, net480, net481, netcoreapp3.1, net6.0, net7.0]\n        include: \n          - os: ubuntu-latest\n            args: \"--filter TestCategory!=WindowsOnly\"\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: |\n            3.1.x\n            6.0.x\n\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '7.0.x'\n        include-prerelease: true\n\n    - name: Restore\n      run: dotnet restore ${{ env.SOLUTION }}\n\n    - name: Build\n      run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore\n\n    - name: Test\n      id: test1\n      continue-on-error: true\n      run: dotnet test ${{ env.SOLUTION }} --framework ${{ matrix.framework }} --configuration Release --no-build --results-directory ${{ env.TEST_RESULTS_DIRECTORY }} --logger:\"console;verbosity=detailed\" --logger:\"trx;logfileprefix=testResults_\" ${{ matrix.args }}\n\n    - name: Retry tests\n      if: steps.test1.outcome=='failure'\n      run: pwsh -f ./.scripts/build_RetryTests.ps1 -TestResultsDirectory ${{ env.TEST_RESULTS_DIRECTORY }} -WorkingDirectory ${{ github.workspace }}\n```"}
{"id": "63c49c5933b087f6bde52309", "level": "level4", "llm_response": "```yaml\nname: TagBot\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: TagBot\non:\n issue_comment:\n    types:\n      - created\n workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5ecbc73931bb1a68c1", "level": "level4", "llm_response": "```yml\nname: Release\non:\n  push:\n    branches:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - r[0-9]*\n\njobs:\n  release:\n    uses: evanchooly/workflows/.github/workflows/release.yml@master\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b11899db58865154dc", "level": "level4", "llm_response": "```yml\nname: Node-CI\n\non:\n  pull_request:\n", "answer": "```yaml name: Node-CI\n\non:\n  pull_request: ~\n  push:\n    branches: [main, changeset-release/*]\n\njobs:\n  node-tests:\n    runs-on: ubuntu-latest\n    name: 'Test (Node ${{ matrix.node-version }}, React ${{ matrix.react-version }})'\n    strategy:\n      fail-fast: false\n      matrix:\n        # The action will first check the local cache for a semver match.\n        # If unable to find a specific version in the cache,\n        # the action will attempt to download a version of Node.js.\n        # It will pull LTS versions from node-versions releases and on miss\n        # or failure will fall back to the previous behavior of downloading\n        # directly from node dist.\n        # https://github.com/actions/setup-node\n        node-version: ['14', '16']\n        react-version: ['17', '18']\n    timeout-minutes: 15\n\n    steps:\n      - uses: actions/checkout@v3\n        name: Checkout\n\n      - uses: actions/setup-node@v3\n        name: Use Node.js ${{ matrix.node-version }}\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'yarn'\n          check-latest: true\n\n      - uses: actions/cache@v3\n        name: Restore loom cache\n        with:\n          path: |\n            .loom\n            packages/*/build/ts\n            packages/*/build/*.tsbuildinfo\n          key: ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-\n\n      - name: \ud83d\udce6 Install dependencies\n        run: yarn --frozen-lockfile\n\n      - name: \ud83d\udd28 Build\n        run: yarn build\n\n      - name: \ud83d\udc85\ud83c\udffc Lint\n        run: |\n          yarn lint\n          yarn ci:lint-docs\n\n      - name: Unit tests\n        run: yarn test \"^(?:(?!(address|react-server)).)*$\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n\n      - name: E2E tests\n        run: yarn test --debug \"(address|react-server)\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n```"}
{"id": "63c4a04c736e7f0ed8c73b97", "level": "level4", "llm_response": "```yaml\n---\nname: Notify Comments on Issues\non:\n  event:\n", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Notify Comments on Issues\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow on comment events on pending response issues\n  issue_comment:\n    types: [created]\n\n# Limit the GITHUB_TOKEN permissions\npermissions: {}\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"notify\"\n  notify:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    if: ${{ !github.event.issue.pull_request && !contains(fromJSON('[\"palpatim\", \"brennanMKE\", \"lawmicha\", \"harsh62\", \"thisisabhash\", \"ameter\", \"royjit\", \"atierian\", \"ukhan-amazon\", \"ruisebas\", \"phantumcode\"]'), github.event.comment.user.login) }}\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Runs a single command using the runners shell\n      - name: Run webhook curl command\n        env:\n          WEBHOOK_URL: ${{ secrets.SLACK_COMMENT_WEBHOOK_URL }}\n          COMMENT: ${{toJson(github.event.comment.body)}}\n        shell: bash\n        run: echo $COMMENT | sed \"s/\\\\\\n/. /g; s/\\\\\\r//g; s/[^a-zA-Z0-9 &().,:]//g\" | xargs -I {} curl -s POST \"$WEBHOOK_URL\" -H \"Content-Type:application/json\" --data '{\"comment\":\"{}\", \"commentUrl\":\"${{github.event.comment.html_url}}\", \"user\":\"${{github.event.comment.user.login}}\"}'\n```"}
{"id": "63c496df1842bc13d77600b8", "level": "level4", "llm_response": "```yaml\nname: Tools\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Tools\n\non:\n   push:\n    branches: [ master ]\n   pull_request:\n    branches: [ master ]\n\njobs:\n   build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: 6.0.x\n        \n    - name: Build FileAnalyzer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileAnalyzer/\n        \n    - name: Build FileExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileExtractor/\n        \n    - name: Build JsonSerializer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.JsonSerializer/\n      \n    - name: Build SystemTester\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.SystemTester/\n      \n    - name: Build TypeTreeExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.TypeTreeExtractor/\n      ```"}
{"id": "63c499c41842bc13d7772cde", "level": "level4", "llm_response": "```yml\n---\nname: PR Reviewer Checklist\non:\n  pull", "answer": "```yaml name: PR Reviewer Checklist\n\non: pull_request_review\n\njobs:\n  checklist:\n    runs-on: ubuntu-latest\n    if: github.actor != 'OSBotify'\n    steps:\n      - name: contributorChecklist.js\n        uses: Expensify/App/.github/actions/javascript/contributorChecklist@main\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CHECKLIST: 'reviewer'\n```"}
{"id": "63c499aa6fc19abdf9cb1361", "level": "level4", "llm_response": "```yml\n---\nname: Checks\non:\n  push:\n    branches", "answer": "```yaml name: Checks\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  NODE_VERSION: '16'\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    types: [\n        synchronize, # PR was updated\n        opened, # PR was open\n        reopened, # PR was closed and is now open again\n        ready_for_review, # PR was converted from draft to open\n      ]\n\njobs:\n  checks:\n    name: Checks\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          token: ${{ env.GITHUB_TOKEN }}\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ env.NODE_VERSION }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Install Dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Check Docs\n        run: npm run check-docs\n\n      - name: Check Typing\n        run: npm run check-typing\n\n      - name: Check Formatting\n        run: npm run check-formatting\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Check Prepack\n        run: npm run prepack\n```"}
{"id": "63c497c31842bc13d7765b0d", "level": "level4", "llm_response": "```yml\n---\nname: CI Switch/libnx\non:\n  push", "answer": "```yaml name: CI Switch/libnx\n\non:\n  push:\n  pull_request:\n  repository_dispatch:\n    types: [run_build]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container: \n      image: git.libretro.com:5050/libretro-infrastructure/libretro-build-libnx-devkitpro:latest\n      options: --user root\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Compile RA\n      run: |\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) clean\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) HAVE_STATIC_DUMMY=1\n    - name: Get short SHA\n      id: slug\n      run: echo \"::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)\"\n    \n    - uses: actions/upload-artifact@v3\n      with:\n        name: RA-libnx-dummy-${{ steps.slug.outputs.sha8 }}\n        path: |\n          retroarch_switch.nro\n```"}
{"id": "63c4a19633b087f6bde73627", "level": "level4", "llm_response": "```yml\nname: Package Trigger Scheduler\n\non:\n  branch: main", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '10 7 * * 2'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-netbootxyz/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for netbootxyz** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-netbootxyz/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c497e61e3364807578414d", "level": "level4", "llm_response": "```yml\n---\nname: Continuous integration\ndescription: A GitHub workflow that", "answer": "```yaml #-----------------------------------------------------------------------------\n#\n#  TSDuck - The MPEG Transport Stream Toolkit\n#  Copyright (c) 2005-2022, Thierry Lelegard\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  1. Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n#  THE POSSIBILITY OF SUCH DAMAGE.\n#\n#-----------------------------------------------------------------------------\n#\n#  GitHub Actions configuration file : Continuous Integration\n#\n#-----------------------------------------------------------------------------\n\nname: Continuous integration\n\n# Trigger the workflow on push or pull request, for master branch only.\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\n# Build on Ubuntu, macOS and Windows, using C++11 (C++14 on Windows) and C++20 levels of standards.\njobs:\n  build_unix:\n    strategy:\n      fail-fast: false\n      matrix:\n        # ubuntu-latest is currently ubuntu-20.04, too old for C++20, force ubuntu-22.04.\n        os: [ubuntu-22.04, macos-latest]\n        compiler: [gcc, clang]\n        std: [11, 20]\n        include:\n        - os: ubuntu-22.04\n          compiler: clang\n          llvm: true\n        - os: macos-latest\n          # It has been noted on GitHub macOS runners that the host name can change\n          # between steps or even the middle of a step. This breaks the naming scheme\n          # of the build directory for binaries. As a consequence, we force BINDIR=bin.\n          bindir: bin\n        exclude:\n        - os: macos-latest\n          compiler: gcc\n          # Don't use gcc on macOS.\n    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}, C++${{ matrix.std }}\n    runs-on: ${{ matrix.os }}\n    env:\n      LLVM: ${{ matrix.llvm }}\n      BINDIR: ${{ matrix.bindir }}\n      CXXFLAGS_STANDARD: -std=c++${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        ${{ matrix.compiler }} --version\n        scripts/java-config.sh\n    - name: Build TSDuck\n      run: make -j5\n    - name: Check built version\n      run: make show-version\n    - name: Run unitary tests\n      run: make test\n    - name: Download test suite\n      run: |\n        mkdir -p ../tsduck-test\n        curl -s -L https://github.com/tsduck/tsduck-test/tarball/master | tar xz --strip 1 -C ../tsduck-test\n    - name: Run test suite\n      run: |\n        make test-suite && status=$? || status=$?\n        cd ../tsduck-test\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [Win64, Win32]\n        configuration: [Release]\n        std: [14, 20]\n        include:\n        - target: Win64\n          suffix: x64\n          testopt: --dev\n        - target: Win32\n          suffix: Win32\n          testopt: --dev32\n        exclude:\n        - target: Win32\n          std: 20\n    name: Build on ${{ matrix.target }} with VC++, C++${{ matrix.std }}\n    runs-on: windows-latest\n    env:\n      STDCPP: stdcpp${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause\n    - name: Dependencies check\n      run: |\n        Write-Output \"Path=${env:Path}\"\n        python --version\n    - name: Build TSDuck\n      run: |\n        scripts/build.ps1 -${{ matrix.target }} -${{ matrix.configuration }} -Parallel 5 -NoLowPriority -NoPause\n        Get-ChildItem bin/${{ matrix.configuration }}-${{ matrix.suffix }}\n    - name: Check built version\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsversion.exe --version=all\n    - name: Check plugins list\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsp.exe --list\n    - name: Run unitary tests\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsduckdll.exe\n    - name: Run unitary tests (static)\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsducklib.exe\n    - name: Download test suite\n      run: |\n        $ProgressPreference = 'SilentlyContinue'\n        Invoke-WebRequest -UseBasicParsing -Uri https://github.com/tsduck/tsduck-test/archive/master.zip -OutFile test.zip\n        Expand-Archive test.zip -DestinationPath . -Force\n        Move-Item tsduck-test-master ../tsduck-test -Force\n    - name: Run test suite\n      shell: bash\n      run: |\n        cd ../tsduck-test\n        ./run-all-tests.sh ${{ matrix.testopt }} && status=$? || status=$?\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_doxygen:\n    name: Doxygen documentation\n    # ubuntu-latest is currently ubuntu-20.04, try to grab a more recent version of doxygen.\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        doxygen --version\n    - name: Build TSDuck documentation\n      run: |\n        make doxygen\n```"}
{"id": "63c496ce517fc08c1eed2f51", "level": "level4", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [17.8]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm install\n    - run: npm run build\n    - run: npm run test\n    - name: Codecov\n      uses: codecov/codecov-action@v3.1.0\n```"}
{"id": "63c4967d6fc19abdf9c9c47c", "level": "level4", "llm_response": "```yml\nname: Build and deploy to GitHub Pages\n\non:\n ", "answer": "```yaml name: Build and deploy to GitHub Pages\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm ci\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.0\n        with:\n          branch: gh-pages\n          folder: dist\n```"}
{"id": "63c49df2cbc73931bb1aa4e2", "level": "level4", "llm_response": "```yml\n---\nname: Node Publish Package\non:\n  release:\n", "answer": "```yaml name: Node Publish Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49d2f1842bc13d7788992", "level": "level4", "llm_response": "```yml\nname: Continuous Integration\n\non:\n  push:\n    branches", "answer": "```yaml name: Continuous Integration\non:\n  push:\n    branches: [ main ]\n\njobs:\n  snap:\n    uses: ./.github/workflows/snap.yml\n    with:\n      deploy: true\n      channel: edge\n    secrets: inherit\n\n  matrix:\n    uses: ./.github/workflows/matrix.yml\n\n  fuzzing:\n    permissions:\n      actions: read # to fetch the artifacts (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n      contents: read # to clone the repo (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Build Fuzzers\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        fuzz-seconds: 150\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v3\n      if: failure() && steps.build.outcome == 'success'\n      with:\n        name: artifacts\n        path: ./out/artifacts\n\n```"}
{"id": "63c497a01842bc13d7764d6f", "level": "level4", "llm_response": "```yml\n---\nname: Rebuild LLVM 12.0\non", "answer": "```yaml # Copyright 2022 Intel Corporation\n# SPDX-License-Identifier: BSD-3-Clause\n\nname: Rebuild LLVM 12.0\n\non:\n  push:\n    branches:\n      - main\n      - '**rebuild_llvm**'\n    paths:\n      - \"llvm_patches/*12_0*\"\n      - \"alloy.py\"\n      - \".github/workflows/rebuild-llvm12.yml\"\n  workflow_dispatch:\n\njobs:\n  llvm12:\n    uses: ./.github/workflows/reusable.rebuild.yml\n    with:\n      version: '12.0'\n      full_version: '12.0.1'\n      ubuntu: '18.04'\n      vs_generator: 'Visual Studio 16 2019'\n      vs_version_str: 'vs2019'\n```"}
{"id": "63c498e633b087f6bde3bbe1", "level": "level4", "llm_response": "```yml\n---\nname: Backport Assistant Runner\n\non:\n  event", "answer": "```yaml ---\nname: Backport Assistant Runner\n\non:\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n\njobs:\n  backport:\n    if: github.event.pull_request.merged\n    runs-on: ubuntu-latest\n    container: hashicorpdev/backport-assistant:0.2.3\n    steps:\n      - name: Backport changes to stable-website\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>website)\"\n          BACKPORT_TARGET_TEMPLATE: \"stable-{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n      - name: Backport changes to targeted release branch\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>\\\\d+\\\\.\\\\d+\\\\.[+\\\\w]+)\"\n          BACKPORT_TARGET_TEMPLATE: \"release/{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n```"}
{"id": "63c4a1a11842bc13d77a50d6", "level": "level4", "llm_response": "```yml\nname: build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: Build\n\n    strategy:\n      matrix:\n        os:\n          - macos-latest\n          - ubuntu-latest\n          - windows-latest\n        browser:\n          - ChromeHeadless\n          - FirefoxHeadless\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build --if-present\n\n      - name: Test\n        run: npm test -- --browsers ${{ matrix.browser }}\n\n      - name: Diff\n        run: git diff --exit-code\n```"}
{"id": "63c4a17bb008460c1df5aa2b", "level": "level4", "llm_response": "```yml\n---\nname: CloseStaleIssue\non:\n  schedule", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path\n\nname: CloseStaleIssue\n\non:\n   schedule: \n       - cron: '1 15 1/2 * *'\n       \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close issues of hosts label\n      uses: actions/github-script@0.4.0\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          let response = await github.issues.listForRepo({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            state: 'open'\n          });\n          let data = response['data'];\n          \n          data.forEach(function(issue){\n            var labels = issue['labels'];\n            var is2Deal = true;\n            for(var i=0,l=labels.length;i<l;i++){\n                if(labels[i]['name'] == 'pending' || labels[i]['name'] == 'help wanted' || labels[i]['name'] == 'instruction'){\n                    is2Deal = false;\n                    break;\n                }\n            }\n            if(is2Deal){\n                var updated_at = new Date(issue['updated_at']);\n                var time_now = new Date();\n                var deta = time_now.getTime() - updated_at.getTime();\n                console.log('deta: ' + deta);\n                if(deta < 1000*60*60*24*30){\n                    is2Deal = false;\n                }   \n            }\n            if(is2Deal){\n                var id = issue['number'];\n                github.issues.createComment({\n                    owner: context.repo.owner,\n                    repo: context.repo.repo,\n                    issue_number: id,\n                    body: '\u7531\u4e8e\u957f\u671f\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\uff0c\u8be5\u95ee\u9898\u81ea\u52a8\u5173\u95ed\u3002\u5982\u6709\u9700\u8981\u53ef\u91cd\u65b0\u6253\u5f00\u3002'\n                });\n                github.issues.update({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: id,\n                  state: 'closed'\n                });\n            }                \n          });\n\n    \n\n\n```"}
{"id": "63c497ab1899db58864db0f4", "level": "level4", "llm_response": "```yml\nname: Release\non:\n  release:\n    types:\n", "answer": "```yaml ---\n# https://github.com/marketplace/actions/actions-tagger\nname: release\n\n\"on\":\n  release:\n    types: [published, edited]\n  workflow_dispatch:\n\njobs:\n  actions-tagger:\n    runs-on: windows-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n```"}
{"id": "63c49b8f517fc08c1eef11c2", "level": "level4", "llm_response": "```yml\nname: Release Drafter\n\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f1833b087f6bde640c7", "level": "level4", "llm_response": "```yml\nname: Integration tests\n\non:\n  event:\n    type", "answer": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n    inputs:\n      test:\n        description: the integration test to run\n        default: fairscale_benchmarks\n        required: true\n        type: choice\n        options:\n          - fairscale_benchmarks\n      cluster:\n        description: the beaker cluster to run the test on\n        default: ai2/tango-integration-tests\n        required: true\n        type: choice\n        options:\n          - ai2/tango-integration-tests\n          - ai2/allennlp-cirrascale\n  # Uncomment this trigger to test changes on a pull request.\n  # You also have to uncomment the lines below that mention 'for pull request checks'\n  # pull_request:\n  #   branches:\n  #     - '*'\n\njobs:\n  run_test:\n    name: ${{ github.event.inputs.test }}\n    # name: fairscale_benchmarks  # for pull request checks\n    runs-on: [ubuntu-latest]\n    timeout-minutes: 60\n    env:\n      TEST_NAME: ${{ github.event.inputs.test }}\n      # TEST_NAME: fairscale_benchmarks  # for pull request checks\n      BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}\n      BEAKER_WORKSPACE: ai2/tango-integration-tests\n      BEAKER_CLUSTER: ${{ github.event.inputs.cluster }}\n      # BEAKER_CLUSTER: ai2/allennlp-cirrascale  # for pull request checks\n      IMAGE_NAME: petew/tango-testing\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Validate inputs\n        run: |\n          # The 'test' input should be a directory in `integration_tests/`\n          test -d \"integration_tests/${TEST_NAME}\"\n\n      - name: Determine current commit SHA (pull request)\n        if: github.event_name == 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\n      - name: Determine current commit SHA (push)\n        if: github.event_name != 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=$GITHUB_SHA\" >> $GITHUB_ENV\n\n      - name: Install beaker client\n        shell: bash\n        run: |\n          mkdir -p \"$HOME/bin\"\n\n          # Download and install from latest GitHub release.\n          curl -s https://api.github.com/repos/allenai/beaker/releases/latest \\\n            | grep 'browser_download_url.*linux' \\\n            | cut -d '\"' -f 4 \\\n            | wget -qi - \\\n          && tar -xvzf beaker_linux.tar.gz -C \"$HOME/bin\"\n\n          # Add to path.\n          echo \"$HOME/bin\" >> \"$GITHUB_PATH\"\n\n      - name: Verify beaker install\n        run: |\n          beaker account whoami\n\n      - name: Create beaker experiment config\n        run: |\n          cat >beaker_config.yml << EOL\n          version: v2-alpha\n          description: ${{ env.TEST_NAME }}\n          tasks:\n            - name: test\n              image:\n                beaker: ${{ env.IMAGE_NAME }}\n              command: [\"/entrypoint.sh\", \"integration_tests/${{ env.TEST_NAME }}/run.sh\"]\n              envVars:\n                - name: COMMIT_SHA\n                  value: $COMMIT_SHA\n                - name: WANDB_API_KEY\n                  secret: WANDB_API_KEY\n                - name: FILE_FRIENDLY_LOGGING\n                  value: \"true\"\n                - name: TOKENIZERS_PARALLELISM  # set this to avoid warnings\n                  value: \"true\"\n                - name: PYTHONUNBUFFERED\n                  value: \"true\"\n              result:\n                path: '/results'\n              resources:\n                gpuCount: 4\n              context:\n                cluster: ${{ env.BEAKER_CLUSTER }}\n                priority: normal\n          EOL\n          cat beaker_config.yml\n\n      - name: Submit beaker job\n        run: |\n          TIMESTAMP=$(date +%H%M%S)\n          EXPERIMENT=$(beaker experiment create beaker_config.yml --workspace $BEAKER_WORKSPACE --name \"${TEST_NAME}-${{ github.run_number }}-${TIMESTAMP}\" | awk '{print $2}')\n          if [ -z \"$EXPERIMENT\" ]; then\n            exit 1\n          else\n            echo \"EXPERIMENT=$EXPERIMENT\" >> $GITHUB_ENV\n            echo \"Experiment $EXPERIMENT submitted. See progress at https://beaker.org/ex/$EXPERIMENT\"\n          fi\n\n      - name: Wait for job to finish\n        run: |\n          beaker experiment await $EXPERIMENT test finalized --timeout 60m\n          # Check the job's exit code.\n          test $(beaker experiment get $EXPERIMENT --format=json | jq '.[0].jobs[0].status.exitCode') -eq 0\n\n      - name: Get logs\n        if: always()\n        run: |\n          # EXPERIMENT could be empty if the submission step failed.\n          # We'll exit right away if that's the case.\n          if [ -z \"$EXPERIMENT\" ]; then\n            echo \"No logs to show\"\n            exit 0\n          fi\n\n          # Download logs from beaker.\n          beaker experiment results $EXPERIMENT --prefix out.log --output results\n\n          # If the experiment failed during startup, there might not be any logs.\n          if [ -f results/test/out.log ]; then\n            echo \"\"\n            echo \">>> Logs:\"\n            echo \"\"\n            cat results/test/out.log\n          else\n            echo \"No logs to show\"\n          fi\n\n      - name: Stop job\n        if: cancelled()\n        run: |\n          if [ ! -z \"$EXPERIMENT\" ]; then\n            beaker experiment stop $EXPERIMENT\n          fi\n```"}
{"id": "63c497d86fc19abdf9ca540a", "level": "level4", "llm_response": "```yml\nname: Tools\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tools\n\non:\n push:\n  paths:\n  - '.github/workflows/tools.undatui.yml'\n  - 'Tools/UndatUI/src/**'\n\ndefaults:\n run:\n  shell: bash\n\nenv:\n DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n\n UndatUI:\n  runs-on: windows-2019\n  steps:\n\n  - name: Clone\n    uses: actions/checkout@v3\n\n  - name: Build\n    run:  |\n          :\n          MSBUILD_EXE=\"$(\"/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe\" -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)\"\n          \"$MSBUILD_EXE\" Tools/UndatUI/src/undat.sln -p:Configuration=Release\n```"}
{"id": "63c4a07ab008460c1df54484", "level": "level4", "llm_response": "```yml\nname: Docker Build\n\non:\n  release:\n    published", "answer": "```yaml name: 'Docker Build'\non:\n  release:\n    types: [released]\n\njobs:\n  build:\n    name: Dispatch release event to tobybatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Emit repository_dispatch\n        uses: mvasigh/dispatch-action@1.1.6\n        with:\n          token: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          repo: kimai2\n          owner: tobybatch\n          event_type: kimai_release\n```"}
{"id": "63c49a5acbc73931bb1933d0", "level": "level4", "llm_response": "```yml\n---\nname: Kind Cluster E2E tests\n\non:\n", "answer": "```yaml name: Kind Cluster E2E tests\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@v1.4.0\n        with:\n          version: v0.14.0\n          kubectl_version: v1.25.0\n          cluster_name: kinder\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-go@v3 # default version of go is 1.10\n        with:\n          go-version: \"1.19\"\n      - name: Install Carvel Tools\n        run: ./hack/install-deps.sh\n      # Run benchmark with `go test -bench` and stores the output to a file\n      - name: Install kc and run e2e tests on kind\n        run: |\n          set -e -x\n          kubectl version --short\n\n          source ./hack/version-util.sh\n\n          ytt -f config/ -v kapp_controller_version=\"$(get_kappctrl_ver)+develop\" | kbld -f- > kbld.out 2> kbldmeta.out\n          cat kbldmeta.out | tail -n 1 | sed 's/.*final: kapp-controller -> \\(.*\\)$/\\1/p'  | tail -n 1 | xargs kind load docker-image --name kinder\n          kapp deploy -a kc -f kbld.out -c -y\n\n          export KAPPCTRL_E2E_SECRETGEN_CONTROLLER=true\n          source ./hack/secretgen-controller.sh\n          deploy_secretgen-controller\n\n          mkdir tmp\n          KAPPCTRL_E2E_NAMESPACE=kappctrl-test eval './hack/test-e2e.sh'\n```"}
{"id": "63c4989533b087f6bde39d3c", "level": "level4", "llm_response": "```yml\nname: Stats\non:\n  schedule:\n    - cron", "answer": "```yaml on:\n  schedule:\n    # https://crontab.guru/once-a-day\n    - cron: 0 0 * * *\n  workflow_dispatch: {}\n\nname: Stats\njobs:\n  stats:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: gr2m/app-stats-action@v1.x\n        id: stats\n        with:\n          id: ${{ secrets.SETTINGS_APP_ID }}\n          private_key: ${{ secrets.SETTINGS_PRIVATE_KEY }}\n      - run: \"echo installations: '${{ steps.stats.outputs.installations }}'\"\n      - run: \"echo suspended: '${{ steps.stats.outputs.suspended_installations }}'\"\n      - run: \"echo repositories: '${{ steps.stats.outputs.repositories }}'\"\n      - run: \"echo most popular repositories: '${{ steps.stats.outputs.popular_repositories }}'\"\n```"}
{"id": "63c49aefcbc73931bb196efd", "level": "level4", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n  schedule:\n    - cron: '41 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          # If you wish to specify custom queries, you can do so here or in a config file.\n          # By default, queries listed here will override any specified in a config file.\n          # Prefix the list here with \"+\" to use these queries and those in the config file.\n          # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e671842bc13d7790940", "level": "level4", "llm_response": "```yml\n---\nname: Auto-merge Dependabot PRs\n", "answer": "```yaml name: Auto-merge Dependabot PRs\non:\n  schedule:\n    - cron: '0 * * * *'\njobs:\n  auto_merge:\n    name: Auto-merge Dependabot PRs\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: akheron/dependabot-cron-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          auto-merge: 'minor'\n          merge-method: 'rebase'\n```"}
{"id": "63c49e7a517fc08c1ef03b74", "level": "level4", "llm_response": "```yml\nname: Check links\n\non:\n  branches:\n    -", "answer": "```yaml name: Check links\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron:  '0 12 */7 * *'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n    - name: Install Awesome Bot\n      run: gem install awesome_bot\n    - name: Run Awesome Bot\n      run: awesome_bot README.md --request-delay 1 --allow-ssl --allow-timeout -t 5 --allow-dupe --white-list sho.rt,your.site,long.url,awesome.re\n    - uses: actions/upload-artifact@v3\n      if: failure()\n      with:\n        name: ab-results\n        path: ab-results-README.md-filtered.json\n```"}
{"id": "63c49b2eb008460c1df32a6d", "level": "level4", "llm_response": "```yml\nname: License\non:\n  push:\n    branches:\n", "answer": "```yaml # Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: License\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\npermissions: read-all\njobs:\n  license:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[skip ci]')\"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n        id: go\n      - name: license\n        run: |\n          export PATH=${PATH}:`go env GOPATH`/bin\n          make license\n```"}
{"id": "63c49a16cbc73931bb1919aa", "level": "level4", "llm_response": "```yml\nname: Flatpak dependency updates\n\non:\n  schedule:\n", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```"}
{"id": "63c499411e3364807578cbd2", "level": "level4", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ 3.X.X-Branch ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ 3.X.X-Branch ]\n  schedule:\n    - cron: '0 20 * * 6'\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: ${{ matrix.language }}\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497691e33648075780df0", "level": "level4", "llm_response": "```yaml\nname: Publish Project to Gradle Plugin Portal\n\non:\n ", "answer": "```yaml name: Publish Project to Gradle Plugin Portal\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'usefulness/easylauncher-gradle-plugin'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n\n      - uses: gradle/gradle-build-action@v2\n\n      - name: Build app with Gradle\n        run: ./gradlew build\n\n      - name: Publish to Gradle Plugin Portal\n        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.gradle_publish_key }} -Pgradle.publish.secret=${{ secrets.gradle_publish_secret }}\n\n      - name: Publish to Github Package Registry\n        run: ./gradlew publish --continue || true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499671842bc13d77707f8", "level": "level4", "llm_response": "```yml\n---\nname: Create and publish a Docker image\n\non:\n", "answer": "```yaml name: Create and publish a Docker image\n\non: [push]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            # set latest tag for default branch\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```"}
{"id": "63c49c8e517fc08c1eef73f9", "level": "level4", "llm_response": "```yml\n---\nname: Brick Build\n\non:\n  push:\n   ", "answer": "```yaml name: Brick Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"packages/brick_build/**\"\n      - \".github/workflows/brick_build.yaml\"\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    uses: ./.github/workflows/reusable-dart-analyze-format-test.yaml\n    with:\n      package: brick_build\n```"}
{"id": "63c49aa1cbc73931bb194f0a", "level": "level4", "llm_response": "```yml\n---\nname: Sync workflows for GHES\non:\n ", "answer": "```yaml name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n```"}
{"id": "63c49b936fc19abdf9cbd6f7", "level": "level4", "llm_response": "```yml\nname: Deploy\n\non:\n  release:\n    types:", "answer": "```yaml ---\nname: Deploy\n\n# yamllint disable-line rule:truthy\non:\n  release:\n    types:\n      - published\n  workflow_run:\n    workflows: [\"CI\"]\n    branches: [main]\n    types:\n      - completed\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/addon-deploy.yaml@main\n    secrets:\n      CAS_API_KEY: ${{ secrets.CAS_API_KEY }}\n      DISPATCH_TOKEN: ${{ secrets.DISPATCH_TOKEN }}\n```"}
{"id": "63c496ed6fc19abdf9c9f2dc", "level": "level4", "llm_response": "```yml\nname: Release Notes\non:\n  branches:\n    -", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Release Notes'\n\non:\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: 'Branch'\n        required: true\n        default: 'main'\n      start-rev:\n        description: 'Start Tag (defaults to merge-base(branch, prev-branch))'\n        required: false\n      end-rev:\n        description: 'End Tag (defaults to HEAD of the target branch)'\n        required: false\n\njobs:\n  release-notes:\n    uses: knative/actions/.github/workflows/release-notes.yaml@main\n    with:\n      branch: ${{ github.event.inputs.branch }}\n      start-rev: ${{ github.event.inputs.start-rev }}\n      end-rev: ${{ github.event.inputs.end-rev }}\n```"}
{"id": "63c49ddd517fc08c1eeffa78", "level": "level4", "llm_response": "```yml\nname: SVGOptimizer\non:\n  pull_request", "answer": "```yaml name: SVGOptimizer\non:\n  # Disable the following line if you don't want the Action to run on PRs.\n  pull_request:\n    paths:\n      - '**.svg'\n# Enable the following line if you want the Action to run on regular pushes.\n#  push:\n# Enable the following lines if you want the Action to run on a schedule.\n#  schedule:\n#  - cron:  '0 * * * 1'  # See https://crontab.guru/\n# Enable one of the following lines if you want to manually trigger the Action.\n#  repository_dispatch:\n#  workflow_dispatch:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ericcornelissen/svgo-action@v1\n        with:\n          test-run: false\n          svgo-version: 2\n          svgo-options: svgo.config.js\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d52517fc08c1eefc15c", "level": "level4", "llm_response": "```yml\n---\nname: External Trigger Main\ndescription: External trigger for", "answer": "```yaml name: External Trigger Main\n\non:\n  workflow_dispatch:\n\njobs:\n  external-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n\n      - name: External Trigger\n        if: github.ref == 'refs/heads/master'\n        run: |\n          if [ -n \"${{ secrets.PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER }}\" ]; then\n            echo \"**** Github secret PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER is set; skipping trigger. ****\"\n            exit 0\n          fi\n          echo \"**** External trigger running off of master branch. To disable this trigger, set a Github secret named \\\"PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER\\\". ****\"\n          echo \"**** Retrieving external version ****\"\n          EXT_RELEASE=$(curl -u \"${{ secrets.CR_USER }}:${{ secrets.CR_PAT }}\" -sX GET \"https://api.github.com/repos/Tautulli/Tautulli/releases/latest\" | jq -r '. | .tag_name')\n          if [ -z \"${EXT_RELEASE}\" ] || [ \"${EXT_RELEASE}\" == \"null\" ]; then\n            echo \"**** Can't retrieve external version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve external version for tautulli branch master\"\n            GHA_TRIGGER_URL=\"https://github.com/linuxserver/docker-tautulli/actions/runs/${{ github.run_id }}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n**Trigger URL:** '\"${GHA_TRIGGER_URL}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')\n          echo \"**** External version: ${EXT_RELEASE} ****\"\n          echo \"**** Retrieving last pushed version ****\"\n          image=\"linuxserver/tautulli\"\n          tag=\"latest\"\n          token=$(curl -sX GET \\\n            \"https://ghcr.io/token?scope=repository%3Alinuxserver%2Ftautulli%3Apull\" \\\n            | jq -r '.token')\n            multidigest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${tag}\" \\\n              | jq -r 'first(.manifests[].digest)')\n            digest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${multidigest}\" \\\n              | jq -r '.config.digest')\n          image_info=$(curl -sL \\\n            --header \"Authorization: Bearer ${token}\" \\\n            \"https://ghcr.io/v2/${image}/blobs/${digest}\" \\\n            | jq -r '.container_config')\n          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')\n          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')\n          if [ -z \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Can't retrieve last pushed version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve last pushed version for tautulli tag latest\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          echo \"**** Last pushed version: ${IMAGE_VERSION} ****\"\n          if [ \"${EXT_RELEASE}\" == \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Version ${EXT_RELEASE} already pushed, exiting ****\"\n            exit 0\n          elif [ $(curl -s https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/lastBuild/api/json | jq -r '.building') == \"true\" ]; then\n            echo \"**** New version ${EXT_RELEASE} found; but there already seems to be an active build on Jenkins; exiting ****\"\n            exit 0\n          else\n            echo \"**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build ****\"\n            response=$(curl -iX POST \\\n              https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/buildWithParameters?PACKAGE_CHECK=false \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} | grep -i location | sed \"s|^[L|l]ocation: \\(.*\\)|\\1|\")\n            echo \"**** Jenkins job queue url: ${response%$'\\r'} ****\"\n            echo \"**** Sleeping 10 seconds until job starts ****\"\n            sleep 10\n            buildurl=$(curl -s \"${response%$'\\r'}api/json\" | jq -r '.executable.url')\n            buildurl=\"${buildurl%$'\\r'}\"\n            echo \"**** Jenkins job build url: ${buildurl} ****\"\n            echo \"**** Attempting to change the Jenkins job description ****\"\n            curl -iX POST \\\n              \"${buildurl}submitDescription\" \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \\\n              --data-urlencode \"description=GHA external trigger https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\" \\\n              --data-urlencode \"Submit=Submit\"\n            echo \"**** Notifying Discord ****\"\n            TRIGGER_REASON=\"A version change was detected for tautulli tag latest. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n              \"description\": \"**Build Triggered** \\n**Reason:** '\"${TRIGGER_REASON}\"' \\n**Build URL:** '\"${buildurl}display/redirect\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n          fi\n```"}
{"id": "63c49ee31e336480757b05b6", "level": "level4", "llm_response": "```yml\nname: goreleaser\n\non:\n  push:\n   ", "answer": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Post release\n        run: ls -l ./dist/*```"}
{"id": "63c4a0a1517fc08c1ef11043", "level": "level4", "llm_response": "```yml\nname: Greetings\non:\n  pull_request:\n   ", "answer": "```yaml # YOLOv5 \ud83d\ude80 by Ultralytics, GPL-3.0 license\n\nname: Greetings\n\non:\n  pull_request_target:\n    types: [opened]\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for submitting a YOLOv5 \ud83d\ude80 PR! To allow your work to be integrated as seamlessly as possible, we advise you to:\n\n            - \u2705 Verify your PR is **up-to-date** with `ultralytics/yolov5` `master` branch. If your PR is behind you can update your code by clicking the 'Update branch' button or by running `git pull` and `git merge master` locally.\n            - \u2705 Verify all YOLOv5 Continuous Integration (CI) **checks are passing**.\n            - \u2705 Reduce changes to the absolute **minimum** required for your bug fix or feature addition. _\"It is not daily increase but daily decrease, hack away the unessential. The closer to the source, the less wastage there is.\"_  \u2014 Bruce Lee\n\n          issue-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for your interest in YOLOv5 \ud83d\ude80! Please visit our \u2b50\ufe0f [Tutorials](https://github.com/ultralytics/yolov5/wiki#tutorials) to get started, where you can find quickstart guides for simple tasks like [Custom Data Training](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data) all the way to advanced concepts like [Hyperparameter Evolution](https://github.com/ultralytics/yolov5/issues/607).\n\n            If this is a \ud83d\udc1b Bug Report, please provide screenshots and **minimum viable code to reproduce your issue**, otherwise we can not help you.\n\n            If this is a custom training \u2753 Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online [W&B logging](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize) if available.\n\n            For business inquiries or professional support requests please visit https://ultralytics.com or email support@ultralytics.com.\n\n            ## Requirements\n\n            [**Python>=3.7.0**](https://www.python.org/) with all [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) installed including [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/). To get started:\n            ```bash\n            git clone https://github.com/ultralytics/yolov5  # clone\n            cd yolov5\n            pip install -r requirements.txt  # install\n            ```\n\n            ## Environments\n\n            YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):\n\n            - **Notebooks** with free GPU: <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a> <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a> <a href=\"https://www.kaggle.com/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n            - **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/GCP-Quickstart)\n            - **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/AWS-Quickstart)\n            - **Docker Image**. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/Docker-Quickstart) <a href=\"https://hub.docker.com/r/ultralytics/yolov5\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov5?logo=docker\" alt=\"Docker Pulls\"></a>\n\n            ## Status\n\n            <a href=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv5 CI\"></a>\n\n            If this badge is green, all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 [training](https://github.com/ultralytics/yolov5/blob/master/train.py), [validation](https://github.com/ultralytics/yolov5/blob/master/val.py), [inference](https://github.com/ultralytics/yolov5/blob/master/detect.py), [export](https://github.com/ultralytics/yolov5/blob/master/export.py) and [benchmarks](https://github.com/ultralytics/yolov5/blob/master/benchmarks.py) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n\n```"}
{"id": "63c49dd4517fc08c1eeff6b7", "level": "level4", "llm_response": "```yml\nname: check-permissions\n\non:\n  push:\n   ", "answer": "```yaml name: check-permissions\non: [push, pull_request]\njobs:\n  check-permissions:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Check permissions on swizzin files\n        run: ./.github/scripts/check-permissions.sh\n```"}
{"id": "63c499771899db58864e6cab", "level": "level4", "llm_response": "```yml\n---\nname: Dependabot auto-merge\n\non:\n", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49f061899db588650a81b", "level": "level4", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non: [push, pull_request]\n\npermissions: read-all\n\nenv:\n  XCODE_WORKSPACE: \"Rectangle.xcworkspace\"\n  XCODE_SCHEME: \"Rectangle\"\n  CODE_SIGN_IDENTITY: \"-\"\n  BUILD_DIR: \"build\"\n  XCODE_ARCHIVE: \"Rectangle.xcarchive\"\n  APP_NAME: \"Rectangle.app\"\n  EXPORT_OPTIONS_PLIST: \"exportOptions.plist\"\n  DMG_NAME: \"Rectangle\"\n  DMG_FILE_NAME: \"Rectangle.dmg\"\n\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Install Dependencies\n      run: |\n        pod repo update\n        pod install\n    - name: Build\n      run: xcodebuild -workspace \"$XCODE_WORKSPACE\" -scheme \"$XCODE_SCHEME\" archive CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\"\n    - name: Export\n      run: |\n        plutil -convert xml1 - -o \"$EXPORT_OPTIONS_PLIST\" << EOF\n          {\n            \"destination\": \"export\",\n            \"method\": \"mac-application\"\n          }\n        EOF\n\n        xcodebuild -exportArchive -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\" -exportPath \"$BUILD_DIR\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST\"\n    - name: Resign App\n      run: codesign --force --deep -s \"$CODE_SIGN_IDENTITY\" \"$BUILD_DIR/$APP_NAME\"\n    - name: Make DMG\n      run: hdiutil create -srcdir \"$BUILD_DIR\" -volname \"$DMG_NAME\" \"$DMG_FILE_NAME\"\n    - name: Upload\n      uses: actions/upload-artifact@v3\n      with:\n        name: Build\n        path: ${{ env.DMG_FILE_NAME }}\n```"}
{"id": "63c49de733b087f6bde5c4d9", "level": "level4", "llm_response": "```yml\n---\ntrigger:\n  branches:\n    - main\n  events", "answer": "```yaml name: Compile Examples\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  pull_request:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by changes to external resources (libraries, platforms).\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  build:\n    name: ${{ matrix.board.fqbn }}\n    runs-on: ubuntu-latest\n\n    env:\n      SKETCHES_REPORTS_PATH: sketches-reports\n\n    strategy:\n      fail-fast: false\n\n      matrix:\n        board:\n          - fqbn: arduino:avr:nano\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:mega\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:leonardo\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:megaavr:nona4809\n            platforms: |\n              - name: arduino:megaavr\n          - fqbn: arduino:sam:arduino_due_x_dbg\n            platforms: |\n              - name: arduino:sam\n          - fqbn: arduino:samd:mkrzero\n            platforms: |\n              - name: arduino:samd\n          - fqbn: arduino:mbed_portenta:envie_m4\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_portenta:envie_m7\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_nano:nano33ble\n            platforms: |\n              - name: arduino:mbed_nano\n          - fqbn: arduino:mbed_nano:nanorp2040connect\n            platforms: |\n              - name: arduino:mbed_nano\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Compile examples\n        uses: arduino/compile-sketches@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          fqbn: ${{ matrix.board.fqbn }}\n          platforms: ${{ matrix.board.platforms }}\n          libraries: |\n            # Install the library from the local path.\n            - source-path: ./\n            # Additional library dependencies can be listed here.\n            # See: https://github.com/arduino/compile-sketches#libraries\n          sketch-paths: |\n            - examples\n          enable-deltas-report: true\n          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}\n\n      - name: Save sketches report as workflow artifact\n        uses: actions/upload-artifact@v3\n        with:\n          if-no-files-found: error\n          path: ${{ env.SKETCHES_REPORTS_PATH }}\n          name: ${{ env.SKETCHES_REPORTS_PATH }}\n```"}
{"id": "63c4946f8052faa2781ab2f2", "level": "level4", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        include:\n          - os: ubuntu-latest\n            target: x86_64-unknown-linux-gnu\n            target_alias: linux-x86_64\n            bin_suffix: ''\n            archive_suffix: '.tar.bz2'\n          - os: windows-latest\n            target: x86_64-pc-windows-msvc\n            target_alias: win-x86_64-msvc\n            bin_suffix: '.exe'\n            archive_suffix: '.zip'\n    defaults:\n      run:\n        shell: bash\n    env:\n      ARCHIVE_PATH: encrypted-dns_${{ github.ref_name }}_${{ matrix.target_alias }}${{ matrix.archive_suffix }}\n\n    steps:\n      - uses: actions/checkout@master\n\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n          targets: ${{ matrix.target }}\n\n      - name: Check Cargo availability\n        run: cargo --version\n\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n\n      - name: Build\n        run: |\n          echo 'lto = \"fat\"' >> Cargo.toml\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo build --release\n          mkdir encrypted-dns\n          cp target/release/encrypted-dns${{ matrix.bin_suffix }} encrypted-dns/\n          cp README.md example-encrypted-dns.toml encrypted-dns/\n          if [ \"${{ matrix.os }}\" = \"ubuntu-latest\" ]; then\n            tar cjpf ${ARCHIVE_PATH} encrypted-dns\n          elif [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n            \"/C/Program Files/7-Zip/7z\" a ${ARCHIVE_PATH} encrypted-dns\n          fi\n\n      - name: Install cargo-deb and build Debian package\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |\n          cargo install --debug cargo-deb\n          cargo deb --output=encrypted-dns_${{ github.ref_name }}_amd64.deb --no-build\n\n      - uses: actions/upload-artifact@master\n        with:\n          name: encrypted-dns_${{ matrix.target_alias }}\n          path: ${{ env.ARCHIVE_PATH }}\n\n      - uses: actions/upload-artifact@master\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        with:\n          name: encrypted-dns_deb-amd64\n          path: encrypted-dns_${{ github.ref_name }}_amd64.deb\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          name: Release ${{ github.ref_name }}\n          draft: true\n          prerelease: false\n          files: |\n            encrypted-dns_deb-amd64/*.deb\n            encrypted-dns_linux-x86_64/*.tar.bz2\n            encrypted-dns_win-x86_64-msvc/*.zip\n```"}
{"id": "63c494d17843b61269a0399a", "level": "level4", "llm_response": "```yml\n---\nname: Windows\non:\n  push:\n    branches", "answer": "```yaml name: Windows\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        ruby:\n          - '3.0'\n          - '2.7'\n          - '2.6'\n          - '2.5'\n          - 'head'\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1.64.1\n      with:\n        ruby-version: ${{ matrix.ruby }}\n        bundler-cache: true\n    - name: Run test\n      run: |\n        rake test\n    - name: Run packaging\n      run: |\n        rake package\n        gem install --local pkg/gem-compiler-*.gem\n```"}
{"id": "63c4a0ee1899db5886516bef", "level": "level4", "llm_response": "```yml\n---\nname: seqr prod release\non:\n  branch", "answer": "```yaml name: seqr prod release\non:\n  workflow_run:\n    workflows: [\"Unit Tests\"]\n    types:\n      - completed\n    branches:\n      - master\n\npermissions:\n  id-token: write\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n\n      - name: authenticate to google cloud\n        id: \"auth\"\n        uses: google-github-actions/auth@v0\n        with:\n          workload_identity_provider: \"${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}\"\n          service_account: \"${{ secrets.RUN_SA_EMAIL }}\"\n\n      - name: \"setup gcloud sdk\"\n        uses: google-github-actions/setup-gcloud@v0\n\n      - name: Build and push images\n        run: |-\n          gcloud builds submit --quiet --substitutions=\"COMMIT_SHA=${{ github.event.workflow_run.head_sha }},_CUSTOM_BRANCH_TAG=gcloud-prod\" --config .cloudbuild/seqr-docker.cloudbuild.yaml --gcs-log-dir=gs://seqr-github-actions-logs/logs .\n\n  helm_update:\n    runs-on: ubuntu-latest\n    needs: docker\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: broadinstitute/seqr-helm\n          ref: main\n          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token\n          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo\n\n      - name: Update appVersion in seqr Chart file\n        uses: mikefarah/yq@v4.22.1\n        with:\n          cmd: >\n            yq -i '.appVersion = \"${{ github.event.workflow_run.head_sha }}\"' charts/seqr/Chart.yaml\n\n      - name: Commit and Push changes\n        uses: Andro999b/push@v1.3\n        with:\n          repository: broadinstitute/seqr-helm\n          branch: main\n          github_token: ${{ secrets.SEQR_VERSION_UPDATE_TOKEN }}\n          author_email: ${{ github.actor }}@users.noreply.github.com\n          author_name: tgg-automation\n          message: \"Update seqr chart appVersion to ${{ github.event.workflow_run.head_sha }}\"\n```"}
{"id": "63c49fb3cbc73931bb1b59fe", "level": "level4", "llm_response": "```yml\n---\nname: Add issues to React Native Bug Board\n\non", "answer": "```yaml name: Add issues to React Native Bug Board\r\n\r\non:\r\n  issues:\r\n    types:\r\n      - opened\r\n\r\njobs:\r\n  add-to-project:\r\n    name: Add issue to project\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/add-to-project@main\r\n        with:\r\n          project-url: https://github.com/orgs/microsoft/projects/235\r\n          github-token: ${{ secrets.RNBOT_GH_TOKEN }}\r\n```"}
{"id": "63c4a0b71899db5886515740", "level": "level4", "llm_response": "```yml\n---\nname: CI\non:\n  pull_request:\n   ", "answer": "```yaml name: CI\n\non:\n  pull_request:\n    branches: [master]\n  push:\n    branches: [master]\n    tags: '*'\n\nconcurrency: \n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        version:\n          - '1.0'\n          - '1'\n          - 'nightly'\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        arch: [x64]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.version }}\n          arch: ${{ matrix.arch }}\n      - uses: julia-actions/cache@v1\n      - uses: julia-actions/julia-buildpkg@latest\n      - uses: julia-actions/julia-runtest@latest\n      - uses: julia-actions/julia-processcoverage@latest\n      - uses: codecov/codecov-action@v3\n        with:\n          file: lcov.info\n```"}
{"id": "63c495638052faa2781b17aa", "level": "level4", "llm_response": "```yml\n---\nname: Build wheels\non:\n  push:\n   ", "answer": "```yaml name: Build wheels\n\non:\n  # Trigger on pushes to the mainline branches and version tags. This prevents building commits\n  # twice when the pull request source branch is in the same repository.\n  push:\n    branches:\n      - \"master\"\n      - \"next\"\n    tags:\n      - \"v*\"\n\n  pull_request:\n      types: [opened, labeled, reopened, synchronize]\n\n  # Trigger on request.\n  workflow_dispatch:\n\nenv:\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\njobs:\n  build_wheels:\n    name: Build wheel for ${{ matrix.os }}, Python ${{ matrix.pyver }}\n    runs-on: ${{ matrix.os }}\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, macos-12] #, windows-2019]\n        pyver: [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.10.2\n        env:\n          # Build for cpython >= 3.6.\n          CIBW_PROJECT_REQUIRES_PYTHON: \"==${{ matrix.pyver }}.*\"\n          CIBW_SKIP: \"{pp*,*-musllinux_*}\"\n\n          # Build only on 64-bit architectures.\n          CIBW_ARCHS_MACOS: \"x86_64 arm64\"\n          CIBW_ARCHS_LINUX: auto64\n          CIBW_ARCHS_WINDOWS: auto64\n\n          # Configure environment variables.\n          CIBW_ENVIRONMENT_LINUX: \"CMAKE_PREFIX_PATH=/project/tbb LD_LIBRARY_PATH=/project/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          CIBW_ENVIRONMENT_MACOS: \"CMAKE_PREFIX_PATH=/Users/runner/work/freud/freud/tbb LD_LIBRARY_PATH=/Users/runner/work/freud/freud/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          MACOSX_DEPLOYMENT_TARGET: \"10.14\"\n\n          # Set up TBB.\n          CIBW_BEFORE_BUILD_LINUX: \"source .github/workflows/cibuildwheel-before-build.sh {package} linux\"\n          CIBW_BEFORE_BUILD_MACOS: \"source .github/workflows/cibuildwheel-before-build.sh {package} macos\"\n          CIBW_BEFORE_BUILD_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-build.ps1 {package}\"\n\n          # Test the wheels.\n          CIBW_BEFORE_TEST_LINUX: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_MACOS: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-test.ps1 {package}\"\n          CIBW_TEST_COMMAND: \"cd {package}/tests && pytest . -v --log-level=DEBUG -n auto\"\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./wheelhouse/*.whl\n\n  build_sdist:\n    name: Build source distribution\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: '3.9'\n\n      - name: Install build requirements\n        run: python3 -m pip --disable-pip-version-check install scikit-build cmake -r requirements.txt --upgrade --progress-bar=off\n\n      - name: Build sdist\n        run: python setup.py sdist\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: dist/*.tar.gz\n\n  upload_pypi:\n    name: Publish [PyPI]\n    needs: [build_wheels, build_sdist]\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: dist\n          path: dist\n\n      - name: Check files\n        run: ls -lR dist\n\n      - name: Upload to PyPI\n        # upload to PyPI on every tag starting with 'v'\n        if: startsWith(github.ref, 'refs/tags/v')\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Upload to TestPyPI\n        # otherwise, upload to TestPyPi when secrets are available\n        if: ${{ !startsWith(github.ref, 'refs/tags/v') && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')) }}\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n          skip_existing: true\n\n      - name: Slack notification\n        if: startsWith(github.ref, 'refs/tags/v') || failure()\n        uses: act10ns/slack@v1.6.0\n        with:\n          status: ${{ job.status }}\n          channel: '#dev-freud'\n```"}
{"id": "63c49d95cbc73931bb1a811c", "level": "level4", "llm_response": "```yml\n---\nname: Build and Publish Documentation\non:\n  branches", "answer": "```yaml name: Build and Publish Documentation\n\non:\n  # Trigger the workflow on push or pull request,\n  # but only for the main branch\n  push:\n    branches:\n      - master\n  # Also trigger on page_build, as well as release created events\n  page_build:\n  release:\n    types: # This configuration does not affect the page_build event above\n      - created\n\nenv:\n  DOXYGEN_VERSION: Release_1_9_1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      # check out the Arduino-SDI-12 repo\n      - uses: actions/checkout@v3\n        with:\n          path: code_docs/Arduino-SDI-12\n\n      - name: Restore or Cache pip\n        uses: actions/cache@v3.0.11\n        id: cache_pip\n        with:\n          path: ~/.cache/pip\n          # if requirements.txt hasn't changed, then it will be a \"cache hit\" and pip will be restored\n          # if requirements.txt HAS changed, it will be a \"cache miss\" and a new cache of pip will be created if the job completes successfully\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Restore or Cache PlatformIO and Libraries\n        uses: actions/cache@v3.0.11\n        id: cache_pio\n        with:\n          path: ~/.platformio\n          # if nothing in the lock files has changed, then it will be a \"cache hit\"\n          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install PlatformIO\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade platformio\n\n      # Install *all* the dependencies!\n      # We're including the dependencies just so the includes can follow in the doxygen pre-processor\n      - name: Install the dependencies at global level\n        run: |\n          echo \"::debug::Installing greygnome/EnableInterrupt\"\n          pio lib -g install greygnome/EnableInterrupt\n\n      - name: Update Libraries from Cache\n        run: pio lib -g update\n\n      - name: Install GraphViz (dot)\n        run: sudo apt-get -y install graphviz\n\n      - name: Restore or Cache Doxygen\n        id: cache_doxygen\n        uses: actions/cache@v3.0.11\n        with:\n          path: doxygen-src\n          key: ${{ runner.os }}-doxygen-${{ env.DOXYGEN_VERSION }}\n\n      - name: Clone and build doxygen\n        if: steps.cache_doxygen.outputs.cache-hit != 'true'\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/build-install-doxygen.sh\n          sh continuous_integration/build-install-doxygen.sh\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install Pygments and other m.css requirements\n        run: pip3 install jinja2 Pygments beautifulsoup4\n\n      # check out my fork of m.css, for processing Doxygen output\n      - name: Checkout m.css\n        uses: actions/checkout@v3\n        with:\n          # Repository name with owner. For example, actions/checkout\n          repository: SRGDamia1/m.css\n          path: code_docs/m.css\n\n      - name: Generate all the documentation\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/generate-documentation.sh\n          sh continuous_integration/generate-documentation.sh\n\n      - name: Deploy to github pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ${{ github.workspace }}/code_docs/Arduino-SDI-12Doxygen/m.css\n```"}
{"id": "63c4a121517fc08c1ef14262", "level": "level4", "llm_response": "```yml\nname: Fix PHP code style issues\n\non:\n  push", "answer": "```yaml name: Fix PHP code style issues\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  php-code-styling:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n          token: ${{ secrets.COMMIT_TOKEN }}\n\n      - name: Fix PHP code style issues\n        uses: aglipanci/laravel-pint-action@1.0.0\n\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'PHP CS Fixer'\n```"}
{"id": "63c4a0aa33b087f6bde6e0bc", "level": "level4", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '21 0 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript' ]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'temurin'\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718f", "level": "level4", "llm_response": "```yml\nname: Stage\n\non:\n  event_type: push\n", "answer": "```yaml name: Stage\non:\n  workflow_dispatch:\njobs:\n  stage:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: git config\n        env:\n          GPT_USER: ${{ secrets.GPT_USER }}\n        run: |\n          git config --global user.name $GPT_USER\n          git config --global pull.rebase false\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - name: Checkout release branch\n        run: git switch release || git switch -c release\n      - name: Merge main branch to release branch\n        run: git merge -X theirs main\n      - name: Git push\n        run: git push origin release\n```"}
{"id": "63c49d3433b087f6bde57d74", "level": "level4", "llm_response": "```yml\nname: Alpine 3\n\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Alpine 3\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/alpine_3.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: alpine:3\n      caches: apk pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c49e361842bc13d778f5e6", "level": "level4", "llm_response": "```yml\nname: Build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n    tags:\n      - v*\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n  \n\njobs:\n  build:\n    uses: benjamin-hodgson/BuildScripts/.github/workflows/dotnet.yml@main\n    with:\n      DOCS_FOLDER: Pidgin.Docs\n    secrets:\n      NUGET_KEY: ${{ secrets.NUGET_KEY }}\n```"}
{"id": "63c49e7033b087f6bde5fc3c", "level": "level4", "llm_response": "```yml\n---\nname: Run unit tests\non:\n  pull_request", "answer": "```yaml name: Run unit tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n  # Upload code coverage results when PRs are merged\n  push:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n\nenv:\n  DOTNET_NOLOGO: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v3\n      - name: Setup .NET Core SDKs\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: |\n            3.1.x\n            5.0.x\n            6.0.x\n          source-url: https://nuget.pkg.github.com/graphql-dotnet/index.json\n        env:\n          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n      - name: Disable MSVS Nuget Source # see https://github.com/graphql-dotnet/graphql-dotnet/issues/2422\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        run: dotnet nuget disable source 'Microsoft Visual Studio Offline Packages'\n      - name: Install dependencies\n        working-directory: src\n        run: dotnet restore\n      - name: Check formatting\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: |\n          dotnet format --no-restore --verify-no-changes --severity warn || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\n      - name: Build solution [Release]\n        working-directory: src\n        run: dotnet build --no-restore -c Release\n      - name: Build solution [Debug]\n        working-directory: src\n        run: dotnet build --no-restore -c Debug\n      - name: Test solution [Debug] with code coverage\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build -p:CollectCoverage=true -p:DoesNotReturnAttribute=\"DoesNotReturnAttribute\"\n      - name: Test solution [Debug] without code coverage\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build\n      - name: Upload coverage to codecov\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        uses: codecov/codecov-action@v3\n        with:\n          files: .coverage/GraphQLParser.Tests/coverage.net5.opencover.xml\n\n  buildcheck:\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n      - name: Pass build check\n        if: ${{ needs.test.result == 'success' }}\n        run: exit 0\n      - name: Fail build check\n        if: ${{ needs.test.result != 'success' }}\n        run: exit 1\n```"}
{"id": "63c49fc91899db588650f490", "level": "level4", "llm_response": "```yml\n---\nname: Build & Deploy - BETA linters\n", "answer": "```yaml ---\n#########################\n#########################\n## Deploy Docker Image Flavors ##\n#########################\n#########################\n# Documentation:\n# https://help.github.com/en/articles/workflow-syntax-for-github-actions\n#\n\n#######################################\n# Start the job on all push to main #\n#######################################\nname: \"Build & Deploy - BETA linters\"\non:\n  push:\n    branches:\n      - \"main\"\n    paths:\n      - \".github/workflows/**\"\n      - \"Dockerfile\"\n      - \"**/Dockerfile\"\n      - \"flavors/**\"\n      - \"megalinter/**\"\n      - \"mega-linter-runner/**\"\n      - \"**/linter-versions.json\"\n      - \"TEMPLATES/**\"\n      - \".trivyignore\"\n      - \"**/*.sh\"\n      - \"**/*.py\"\n      - \"**/sh/**\"\n\n###############\n# Set the Job #\n###############\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n\n  prepare:\n    name: Prepare matrix\n    runs-on: ubuntu-latest  \n    steps:\n\n    - name: Build unique image name for beta\n      shell: bash\n      run: echo \"UNIQUE_DOCKER_IMAGE_NAME=$(echo beta_$(date '+%Y%m%d-%H%M'))\" >> $GITHUB_ENV\n\n    - name: Prepare result is ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\n      shell: bash\n      run: echo ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}  \n\n    outputs:\n      unique_docker_image_name: \"${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\"  \n\n  build:\n    needs: prepare\n    # Name the Job\n    name: Deploy Docker Image - Beta - Linters\n    # Set the agent to run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        # linters-start\n        linter:\n          [\n            \"ansible_ansible_lint\",\n            \"bash_shellcheck\",\n            \"cloudformation_cfn_lint\",\n            \"dockerfile_hadolint\",\n            \"go_revive\",\n            \"groovy_npm_groovy_lint\",\n            \"java_checkstyle\",\n            \"java_pmd\",\n            \"javascript_es\",\n            \"json_eslint_plugin_jsonc\",\n            \"jsx_eslint\",\n            \"kotlin_ktlint\",\n            \"php_psalm\",\n            \"python_bandit\",\n            \"repository_checkov\",\n            \"repository_devskim\",\n            \"repository_dustilock\",\n            \"repository_gitleaks\",\n            \"repository_secretlint\",\n            \"repository_semgrep\",\n            \"repository_syft\",\n            \"repository_trivy\",\n            \"terraform_tflint\",\n            \"terraform_terrascan\",\n            \"terraform_checkov\",\n            \"tsx_eslint\",\n            \"typescript_es\",\n          ]\n# linters-end\n    # Only run this on the main repo\n    if: github.repository == 'oxsecurity/megalinter' && !contains(github.event.head_commit.message, 'skip deploy')\n    ##################\n    # Load all steps #\n    ##################\n    steps:\n      ##########################\n      # Checkout the code base #\n      ##########################\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      #####################\n      # Run Deploy script #\n      #####################\n      - name: Deploy Beta image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: beta\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      - name: Deploy ${{ needs.prepare.outputs.unique_docker_image_name }} image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: \"${{ needs.prepare.outputs.unique_docker_image_name }}\"\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n          ALWAYS_BUILD: force\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      #####################################\n      # Run Linter test cases #\n      #####################################\n      - name: Run Test Cases\n        shell: bash\n        run: |\n          TEST_KEYWORDS_TO_USE_UPPER=\"${{ matrix.linter }}\"\n          TEST_KEYWORDS_TO_USE=\"${TEST_KEYWORDS_TO_USE_UPPER,,}\"\n          docker run -e TEST_CASE_RUN=true -e OUTPUT_FORMAT=text -e OUTPUT_FOLDER=${GITHUB_SHA} -e OUTPUT_DETAIL=detailed -e GITHUB_SHA=${GITHUB_SHA} -e PAT=\"${{secrets.PAT}}\" -e TEST_KEYWORDS=\"${TEST_KEYWORDS_TO_USE}\" -e MEGALINTER_VOLUME_ROOT=\"${GITHUB_WORKSPACE}\" -v \"/var/run/docker.sock:/var/run/docker.sock:rw\" -v ${GITHUB_WORKSPACE}:/tmp/lint oxsecurity/megalinter-only-${{ matrix.linter }}:beta\n        timeout-minutes: 30\n\n      ##############################################\n      # Check Docker image security with Trivy #\n      ##############################################\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'docker.io/oxsecurity/megalinter-only-${{ matrix.linter }}:beta'\n          format: 'table'\n          exit-code: '1'\n          ignore-unfixed: true\n          security-checks: vuln\n          vuln-type: 'os,library'\n          severity: 'CRITICAL,HIGH'\n          timeout: 10m0s\n```"}
{"id": "63c4996433b087f6bde3f0a1", "level": "level4", "llm_response": "```yaml\n---\nname: test\non:\n  push:\n    branches:\n", "answer": "```yaml name: test\n\non: [push]\n\njobs:\n  lint:\n    runs-on: 'ubuntu-latest'\n\n    strategy:\n      matrix:\n        node: [14, 16, 18]\n\n    name: Lint (Node ${{ matrix.node }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run stylelint\n      - run: npm run eslint\n\n  test:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Test (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm test\n        env:\n          CI: true\n\n  build-examples:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Build examples (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    needs:\n      - test\n      - lint\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run build\n        env:\n          CI: true\n```"}
{"id": "63c4982f6fc19abdf9ca7842", "level": "level4", "llm_response": "```yml\nname: Build and publish folly dependency\n\non:\n  branches", "answer": "```yaml name: Build and publish folly dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/folly image for a particular version\"\n        default: \"Run\"\n      folly_release:\n        description: \"The folly version to build and publish (e.g. 2021.03.29.00)\"\n        required: true\n        type: string\n      fmt_release:\n        description: \"The fmt version to build and publish (e.g. 7.1.3)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg folly_release=${{ github.event.inputs.folly_release }} \\\n          --build-arg fmt_release=${{ github.event.inputs.fmt_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\" \\\n          -f \"docker/folly/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly\n```"}
{"id": "63c497b6cbc73931bb1820e9", "level": "level4", "llm_response": "```yml\n---\nname: Lib Injection Test\non:\n  pull_request", "answer": "```yaml name: \"Lib Injection Test\"\n\non:\n  pull_request:\n  push:\n    branches: [master]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  lib-injection-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d # 1.3.0\n        with:\n          config: k8s/kind-config.yaml\n          kubectl_version: v1.22.10\n          node_image: kindest/node:v1.22.9\n\n      - name: Deploy apm test trace agent\n        run: |\n          kubectl apply -f k8s/dd-apm-test-agent-config.yaml\n          kubectl rollout status daemonset/datadog-agent\n          kubectl wait $(kubectl get pods -l app=datadog-agent -o name) --for condition=ready\n          sleep 5\n\n      - name: Npm pack for injection image\n        run: |\n          npm pack\n\n      - uses: ./.github/actions/injection\n        with:\n          init-image-version: ${GITHUB_SHA}\n\n      - name: Build sample app image\n        run: |\n          docker build k8s/sample-app --build-arg npm_pkg=./dd-trace.tgz -t ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n          docker push ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n\n      - name: Deploy test pod\n        run: |\n          sed -i \"s|LATEST|$GITHUB_SHA|g\" k8s/test-pod.yaml\n          sleep 5\n          n=0\n          until [ \"$n\" -ge 5 ]\n          do\n            kubectl apply -f k8s/test-pod.yaml && sleep 5 && kubectl wait pod/sample-app --for condition=ready && break\n            n=$((n+1))\n            sleep 15\n          done\n          sleep 5\n\n      - name: Test\n        run: |\n          wget http://localhost:18126/test/session/traces || true\n          kubectl logs $(kubectl get pods -l app=datadog-agent -o name)\n\n          TRACES=`cat traces`\n          if [[ ${#TRACES} -lt 3 ]] ; then\n            echo \"No traces reported - ${TRACES}\"\n            exit 1\n          else\n            echo \"Traces reported - ${TRACES}\"\n            exit 0\n          fi\n```"}
{"id": "63c49b7b1842bc13d777d9d4", "level": "level4", "llm_response": "```yml\nname: Automated review labels\non:\n  issues:\n   ", "answer": "```yaml   name: 'Automated review labels'\n\n  on:\n    issue_comment:\n      types: [created]\n    issues:\n      types: [unlabeled]\n    pull_request_target:\n      types: [unlabeled]\n\n  jobs:\n\n    add-review-team-label:\n      name: 'When pinged, label a PR with review team'\n      if: >\n        github.event.issue\n        && github.event.issue.pull_request\n        && !contains(github.event.issue.labels.*.name, 'review-requested')\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-teams\n          id: check_teams\n          uses: actions/github-script@v6\n          with:\n            script: |\n              const teams = [\n                '@conda-forge/staged-recipes',\n                '@conda-forge/help-c-cpp',\n                '@conda-forge/help-cdts',\n                '@conda-forge/help-go',\n                '@conda-forge/help-java',\n                '@conda-forge/help-julia',\n                '@conda-forge/help-nodejs',\n                '@conda-forge/help-perl',\n                '@conda-forge/help-python',\n                '@conda-forge/help-python-c',\n                '@conda-forge/help-r',\n                '@conda-forge/help-ruby'\n              ];\n              let found_label = false;\n              for (const team of teams) {\n                  let text = context.payload.comment.body;\n                  const regex = new RegExp(team + '[^\\-]|' + team + '$');\n                  let result = regex.test(text);\n                  if (result) {\n                      const slug = team.replace(\"@conda-forge/\", \"\");\n                      const label = slug.replace(\"help-\", \"\");\n                      found_label = true;\n                      github.rest.issues.addLabels({\n                          issue_number: context.issue.number,\n                          owner: context.repo.owner,\n                          repo: context.repo.repo,\n                          labels: [label, 'review-requested']\n                      });\n                      // NOTE: GitHub Actions default token lacks permission to\n                      // assign teams for review; external bot required for\n                      // that feature.\n                      //\n                      https://github.com/conda-forge/staged-recipes/issues/18023#issuecomment-1080451231\n                      console.log(`Somebody mentioned ${slug}.`);\n                  }\n              }\n              return found_label;\n        - name: remove-labels\n          if: >\n            (steps.check_teams.outputs.result == 'true')\n            && contains(github.event.issue.labels.*.name, 'Awaiting author contribution')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.removeLabel({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  name: ['Awaiting author contribution']\n              })\n\n    check-remove-review-requested-label:\n      name: 'Check that review-requested label was removed by a team member'\n      if: >\n        github.event.action == 'unlabeled'\n        && github.event.label.name == 'review-requested'\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-team-membership\n          id: check_team_review\n          uses: actions/github-script@v6\n          with:\n            github-token: ${{ secrets.GH_TOKEN }}\n            script: |\n              console.log(`Label was removed by ${context.payload.sender.login}`);\n              let memberships = [];\n              for (const team of ['staged-recipes', 'core']) {\n                  const membership = github.rest.teams.getMembershipForUserInOrg({\n                      org: 'conda-forge',\n                      team_slug: team,\n                      username: context.payload.sender.login,\n                  });\n                  memberships.push(membership.then((result) => {\n                      if (result.status == 200 && result.data.state == 'active') {\n                          console.log('User is authorized');\n                          return true;\n                      } else {\n                          console.log('User is nonactive');\n                          return false;\n                      }\n                  }).catch((error) => {\n                      // Non-membership raises an HttpError\n                      return false;\n                  }));\n              }\n              return Promise.all(memberships).then((values) => {\n                  let is_authorized = false;\n                  for (const m of values) {\n                      is_authorized = is_authorized || m;\n                  }\n                  return is_authorized;\n              });\n        - name: add-labels\n          if: >\n            (steps.check_team_review.outputs.result == 'true')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['Awaiting author contribution']\n              });\n        - name: readd-review-label\n          if: >\n            (steps.check_team_review.outputs.result == 'false')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['review-requested']\n              });\n              console.log('Non-members of staged recipes cannot remove this label.')\n```"}
{"id": "63c4a1751899db5886519f71", "level": "level4", "llm_response": "```yml\nname: Auto Author Assign\non:\n  pull_request:\n", "answer": "```yaml name: \"Auto Author Assign\"\n\non:\n  pull_request_target:\n    types: [opened, reopened]\n\npermissions:\n  pull-requests: write\n\njobs:\n  assign-author:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toshimaru/auto-author-assign@v1.4.0\n```"}
{"id": "63c49a6c1899db58864ed1c5", "level": "level4", "llm_response": "```yml\nname: build-publish-unpacker-image\n\non:\n ", "answer": "```yaml name: build-publish-unpacker-image\non:\n  workflow_dispatch:\njobs:\n  build-and-publish:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout Epinio\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push unpacker\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          context: images/.\n          file: images/unpacker-Dockerfile\n          tags: ghcr.io/epinio/epinio-unpacker:1.0\n          build-args: |\n            VERSION=1.0\n```"}
{"id": "63c49bdc1899db58864f62db", "level": "level4", "llm_response": "```yml\nname: Ruby test and build\n\non:\n  pull_request", "answer": "```yaml # License: LGPL-3.0-or-later\nname: Ruby test and build\non: \n  pull_request:\n    paths-ignore:\n      - \"**.[jt]sx?\"\n      - \"**.md\"\n      - \"**.md\"\n      - \"NOTICE-js\"\n      - \"NOTICE-ruby\"\n      - \"package.json\"\n      - \"yarn.lock\"\n    types: [opened, reopened, synchronize]\njobs:\n  package-download: # this downloads and caches all of the packages. That way if a future job fails, the caching will still occur\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n  main_build:\n    needs: package-download\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup PostgreSQL with PostgreSQL extensions and unprivileged user\n        uses: Daniel-Marynicz/postgresql-action@1.0.0\n        with:\n          postgres_image_tag: 12-alpine\n          postgres_user: houdini_user\n          postgres_password: password\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - name: install bess dependencies\n        run: |\n          cd gems/bess\n          bundle install --jobs 3 --retry 3\n      - name: run spec for bess\n        run: |\n          cd gems/bess\n          bundle exec rake spec\n      - run: bin/setup ci\n      - name: Generate JS routes\n        run: bin/rails js:routes:typescript\n      - name: run spec\n        run: bundle exec rake spec\n    \n```"}
{"id": "63c49aca33b087f6bde47f19", "level": "level4", "llm_response": "```yml\nname: Node CI\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Node CI\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - name: Fetch commit count\n        env:\n          PR_COMMIT_COUNT: ${{ github.event.pull_request.commits }}\n        run: |\n          echo \"FETCH_DEPTH=$(($PR_COMMIT_COUNT + 1))\" >> $GITHUB_ENV\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: ${{ env.FETCH_DEPTH }}\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Collect changed files\n        run: |\n          mkdir ~/tmp/\n          git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --diff-filter=ACM --name-only --relative '*src/**/*.ts' > ~/tmp/changed_files\n          echo -e \"Changed files: \\n$(cat ~/tmp/changed_files)\"\n\n      - name: Lint\n        run: npx eslint $(cat ~/tmp/changed_files)\n\n      - name: Check types\n        run: npm run checktype\n\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Build release\n        run: npm run release\n\n      - name: Test generated DTS\n        run: npm run test:dts\n\n      - name: Unit Test\n        run: npm run test\n```"}
{"id": "63c4a03933b087f6bde6b332", "level": "level4", "llm_response": "```yml\n---\nname: Go Checks\non:\n  push:\n   ", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Checks\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    name: All\n    env:\n      RUNGOGENERATE: false\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: \"1.19.x\"\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-check-setup\n        if: hashFiles('./.github/actions/go-check-setup') != ''\n      - name: Read config\n        if: hashFiles('./.github/workflows/go-check-config.json') != ''\n        run: |\n          if jq -re .gogenerate ./.github/workflows/go-check-config.json; then\n            echo \"RUNGOGENERATE=true\" >> $GITHUB_ENV\n          fi\n      - name: Install staticcheck\n        run: go install honnef.co/go/tools/cmd/staticcheck@376210a89477dedbe6fdc4484b233998650d7b3c # 2022.1.3 (v0.3.3)\n      - name: Check that go.mod is tidy\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            go mod tidy\n            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then\n              echo \"go.sum was added by go mod tidy\"\n              exit 1\n            fi\n            git diff --exit-code -- go.sum go.mod\n      - name: gofmt\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        run: |\n          out=$(gofmt -s -l .)\n          if [[ -n \"$out\" ]]; then\n            echo $out | awk '{print \"::error file=\" $0 \",line=0,col=0::File is not gofmt-ed.\"}'\n            exit 1\n          fi\n      - name: go vet\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go vet ./...\n      - name: staticcheck\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            set -o pipefail\n            staticcheck ./... | sed -e 's@\\(.*\\)\\.go@./\\1.go@g'\n      - name: go generate\n        uses: protocol/multiple-go-modules@v1.2\n        if: (success() || failure()) && env.RUNGOGENERATE == 'true'\n        with:\n          run: |\n            git clean -fd # make sure there aren't untracked files / directories\n            go generate ./...\n            # check if go generate modified or added any files\n            if ! $(git add . && git diff-index HEAD --exit-code --quiet); then\n              echo \"go generated caused changes to the repository:\"\n              git status --short\n              exit 1\n            fi\n```"}
{"id": "63c498d76fc19abdf9cabcf5", "level": "level4", "llm_response": "```yml\nname: build\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\non: [push, pull_request]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        go-version: [~1.16, ^1]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    env:\n      GO111MODULE: \"on\"\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.1\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Download Go modules\n        run: go mod download\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test ./...\n```"}
{"id": "63c49c3db008460c1df39721", "level": "level4", "llm_response": "```yml\n---\nname: CI\non:\n  push:\n    branches", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n    branches:\n    - master\n\njobs:\n  Debug-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Debug\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Debug Build and Test\n      working-directory: build/Debug\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Debug ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Debug\n        path: build/Debug/bin/llvm-mctoll\n\n  Release-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Release\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Release Build and Test\n      working-directory: build/Release\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Release\n        path: build/Release/bin/llvm-mctoll\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level4", "llm_response": "```yml\n---\nname: Require Pull Request Labels\n\non:\n  pull", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c4a059cbc73931bb1b9cf8", "level": "level4", "llm_response": "```yml\nname: Go\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Go\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [1.19]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Install libolm\n        run: sudo apt-get install libolm-dev libolm3\n\n      - name: Install goimports\n        run: |\n          go install golang.org/x/tools/cmd/goimports@latest\n          export PATH=\"$HOME/go/bin:$PATH\"\n\n      - name: Install pre-commit\n        run: pip install pre-commit\n\n      - name: Lint\n        run: pre-commit run -a\n```"}
{"id": "63c49ad91e33648075796ee0", "level": "level4", "llm_response": "```yml\nname: Draft Release\n\non:\n  branch: master\n", "answer": "```yaml name: Draft Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5c621ac4f2678a5bd7759", "level": "level4", "llm_response": "```yml\nname: Reusable - Create Java contrib pull request\n\non", "answer": "```yaml name: Reusable - Create Java contrib pull request\n\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n    secrets:\n      BOT_TOKEN:\n        required: true\n  # to help with partial release build failures\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version\"\n        required: true\n\njobs:\n  create-java-contrib-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: opentelemetrybot/opentelemetry-java-contrib\n          # this is the personal access token used for \"git push\" below\n          token: ${{ secrets.BOT_TOKEN }}\n\n      - name: Initialize pull request branch\n        env:\n          VERSION: ${{ inputs.version }}\n        run: |\n          git remote add upstream https://github.com/open-telemetry/opentelemetry-java-contrib.git\n          git fetch upstream\n          git checkout -b update-opentelemetry-sdk-to-${VERSION} upstream/main\n\n      - name: Update version\n        env:\n          VERSION: ${{ inputs.version }}\n        run: ./.github/scripts/update-sdk-version.sh $VERSION\n\n      - name: Use CLA approved github bot\n        run: .github/scripts/use-cla-approved-github-bot.sh\n\n      - name: Create pull request against opentelemetry-java-contrib\n        env:\n          # this is the personal access token used for \"gh pr create\" below\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}\n          VERSION: ${{ inputs.version }}\n        run: |\n          message=\"Update the SDK and instrumentation versions to $VERSION\"\n          body=$(cat << EOF\n          Update the SDK and instrumentation versions to \\`$VERSION\\`.\n          \n          Note: you will likely need to re-run the checks on this PR in an hour or so, once the\n          updated dependencies are visible in maven central.\n          EOF\n          )\n\n          # gh pr create doesn't have a way to explicitly specify different head and base\n          # repositories currently, but it will implicitly pick up the head from a different\n          # repository if you set up a tracking branch\n\n          git commit -a -m \"$message\"\n          git push --set-upstream origin HEAD:update-opentelemetry-sdk-to-${VERSION}\n          gh pr create --title \"$message\" \\\n                       --body \"$body\" \\\n                       --repo open-telemetry/opentelemetry-java-contrib \\\n                       --base main\n```"}
{"id": "63c49781517fc08c1eed75fb", "level": "level4", "llm_response": "```yml\nname: Release\non:\n  push:\n    branches:\n", "answer": "```yaml \nname: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.14.0\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npm run semantic-release\n```"}
{"id": "63c49d1d6fc19abdf9cc7410", "level": "level4", "llm_response": "```yml\n---\nname: pre-commit\non:\n  push:\n   ", "answer": "```yaml # yaml-language-server: $schema=https://json.schemastore.org/github-workflow\n\nname: pre-commit\n\non:\n  push:\n  pull_request:\n\njobs:\n  pre-commit:\n    name: Detecting code style issues\n    runs-on: ubuntu-latest\n    # The Dockerfile for this container can be found at:\n    # https://github.com/Holzhaus/mixxx-ci-docker\n    container: holzhaus/mixxx-ci:20220805\n    steps:\n      - name: \"Check out repository\"\n        uses: actions/checkout@v3\n        with:\n          # Unfortunately we need the whole history and can't use a shallow clone\n          # because the Appstream Metadata hook parses the history to find the\n          # latest changelog modification date. Otherwise, `fetch-depth: 2` would\n          # suffice.\n          fetch-depth: 0\n\n      - name: \"Add GitHub workspace as a safe directory\"\n        # Without this, git commands will fail due to mismatching permissions in\n        # the container. See actions/runner#2033 for details.\n        #\n        # The actions/checkout action should already take care of this thanks to\n        # commit actions/checkout@55fd82fc42c0cdd6f1f480dd23f60636a42f6f5c, but\n        # it seems like that's not working properly.\n        run: |\n          git config --global --add safe.directory \"${GITHUB_WORKSPACE}\"\n          git config --global --list\n\n      - name: \"Detect code style issues (push)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'push'\n        # There are too many files in the repo that have formatting issues. We'll\n        # disable these checks for now when pushing directly (but still run these\n        # on Pull Requests!).\n        env:\n          SKIP: clang-format,eslint,no-commit-to-branch\n\n      - name: \"Detect code style issues (pull_request)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'pull_request'\n        env:\n          SKIP: no-commit-to-branch\n        with:\n          # HEAD is the not yet integrated PR merge commit +refs/pull/xxxx/merge\n          # HEAD^1 is the PR target branch and HEAD^2 is the HEAD of the source branch\n          extra_args: --from-ref HEAD^1 --to-ref HEAD\n\n      - name: \"Generate patch file\"\n        if: failure()\n        run: |\n          git diff-index -p HEAD > \"${PATCH_FILE}\"\n          [ -s \"${PATCH_FILE}\" ] && echo \"UPLOAD_PATCH_FILE=${PATCH_FILE}\" >> \"${GITHUB_ENV}\"\n        env:\n          PATCH_FILE: pre-commit.patch\n\n      - name: \"Upload patch artifact\"\n        if: failure() && env.UPLOAD_PATCH_FILE != null\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.UPLOAD_PATCH_FILE }}\n          path: ${{ env.UPLOAD_PATCH_FILE }}\n\n      # AppStream metadata has been generated/updated by a pre-commit hook\n      - name: \"Validate AppStream metadata\"\n        run: appstreamcli validate res/linux/org.mixxx.Mixxx.metainfo.xml\n```"}
{"id": "63c4966e6fc19abdf9c9c155", "level": "level4", "llm_response": "```yml\nname: tfsec release\non:\n  event:\n   ", "answer": "```yaml name: tfsec release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create binary + dockerhub releases\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n          cache: true\n          cache-dependency-path: go.sum\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5.1.0\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: Login to docker.io registry\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USER }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Release\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```"}
{"id": "63c499d5517fc08c1eee63cc", "level": "level4", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml name: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    - cron: '0 3 * * 1'\n\npermissions:\n  actions: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0cc1899db5886515e72", "level": "level4", "llm_response": "```yml\nname: Deploy itch.io Packages\n\non:\n  event:\n", "answer": "```yaml name: Deploy itch.io Packages\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Git Tag'\n        required: true\n        default: 'release-xxxxxxxx'\n\njobs:\n  itch:\n    name: Deploy to itch.io\n    runs-on: ubuntu-20.04\n    if: github.repository == 'openra/openra'\n    steps:\n      - name: Download Packages\n        run: |\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64.exe\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64-winportable.zip\" -O \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}.dmg\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Dune-2000-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Red-Alert-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Tiberian-Dawn-x86_64.AppImage\"\n          wget -q \"https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tag }}/packaging/.itch.toml\"\n          zip -u \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\" .itch.toml\n\n      - name: Publish Windows Installer\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: win\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64.exe\n\n      - name: Publish Windows Itch Bundle\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: itch\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\n\n      - name: Publish macOS Package\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: macos\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}.dmg\n\n      - name: Publish RA AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-ra\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Red-Alert-x86_64.AppImage\n\n      - name: Publish TD AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-cnc\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Tiberian-Dawn-x86_64.AppImage\n\n      - name: Publish D2k AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-d2k\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Dune-2000-x86_64.AppImage\n```"}
{"id": "63c49c611e336480757a0842", "level": "level4", "llm_response": "```yml\n---\nname: Build jellyfin-blog\non:\n  pull", "answer": "```yaml name: '\ud83c\udfd7\ufe0f Build jellyfin-blog'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '.github/*.json'\n\njobs:\n  build:\n    uses: ./.github/workflows/_meta.yaml\n    with:\n      publish: false\n```"}
{"id": "63c49edf1842bc13d779394c", "level": "level4", "llm_response": "```yml\n---\nname: RSpec\non:\n  pull_request:\n", "answer": "```yaml name: RSpec\non:\n  pull_request:\n  push:\n    branches: [ main ]\njobs:\n  coverage:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.1\n          bundler: 2.3.19\n          bundler-cache: true\n\n      - name: Install Code Climate reporter\n        run: |\n          sudo curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n          sudo chmod +x ./cc-test-reporter\n      - name: Generate Coverage\n        env:\n          CC_TEST_REPORTER_ID: 88e524e8f638efe690def7a6e2c72b1a9db5cdfa74548921b734d609a5858ee5\n        run: |\n          export GIT_BRANCH=${GITHUB_REF#refs/heads/}\n          export GIT_COMMIT_SHA=${GITHUB_SHA}\n          echo $GIT_BRANCH\n          echo $GIT_COMMIT_SHA\n          ./cc-test-reporter before-build\n          COV=true bin/rspec --require spec_helper --tag ~perf\n          ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?\n\n  tests:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ruby: [2.5, 2.6, 2.7, '3.0', 3.1]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler: 2.3.19\n          bundler-cache: true\n      - run: bin/appraisal install --jobs=$(nproc) --retry=$(nproc)\n      - run: bin/appraisal rspec --require spec_helper --tag ~perf\n```"}
{"id": "63c5c634ac4f2678a5bd7cfa", "level": "level4", "llm_response": "```yml\n---\nname: Issue Subscriber\non:\n  issues:\n   ", "answer": "```yaml name: Issue Subscriber\n\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  auto-subscribe:\n    runs-on: ubuntu-latest\n    if: github.repository == 'llvm/llvm-project'\n    steps:\n      - name: Setup Automation Script\n        run: |\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/github-automation.py\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/requirements.txt\n          chmod a+x github-automation.py\n          pip install -r requirements.txt\n\n      - name: Update watchers\n        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable\n        env:\n          LABEL_NAME: ${{ github.event.label.name }}\n        run: |\n          ./github-automation.py \\\n            --token '${{ secrets.ISSUE_SUBSCRIBER_TOKEN }}' \\\n            issue-subscriber \\\n            --issue-number '${{ github.event.issue.number }}' \\\n            --label-name \"$LABEL_NAME\"\n```"}
{"id": "63c494bb7843b61269a03187", "level": "level4", "llm_response": "```yml\n---\nname: lint-and-test\non:\n  pull_request", "answer": "```yaml name: lint-and-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    tags-ignore:\n      - \"**\"  # Skip re-linting when tags are added\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install poetry\n        poetry install\n\n    - name: Run flake8\n      run: poetry run flake8 .\n\n    - name: Run mypy\n      run: poetry run mypy .\n\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n      fail-fast: false\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install tox-gh-actions\n\n    - name: Run tests w/tox\n      run: tox\n\n    - name: Cache coverage for ${{ matrix.python-version }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: cov_py${{ matrix.python-version }}\n        path: .coverage\n\n  combine-cov:\n    runs-on: ubuntu-latest\n    needs: test\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Pull coverage workflow artifacts\n      uses: actions/download-artifact@v3\n      with:\n        path: cov_cache/\n\n    - name: Install cov & combine\n      run: |\n        pip install coverage\n        coverage combine ./cov_cache/**/.coverage\n\n    - name: Report coverage\n      run: |\n        echo '**Combined Coverage**' >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage report -m --skip-covered >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage html\n\n    - name: Publish cov HTML\n      uses: actions/upload-artifact@v3\n      with:\n        path: htmlcov/\n        name: cov_report_html\n```"}
{"id": "63c49df933b087f6bde5cc80", "level": "level4", "llm_response": "```yml\nname: Deploy CI\n\non:\n  push:\n    branches", "answer": "```yaml name: Deploy CI\n\nenv:\n  NODE_OPTIONS: --max-old-space-size=6144\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: 'Setup Node.js'\n        uses: actions/setup-node@v3\n        with:\n          node-version: 14\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-\n\n      - name: Pnpm action\n        uses: pnpm/action-setup@v2\n        with:\n          version: latest\n          run_install: true\n\n      - name: Build\n        run: pnpm build:site\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          cname: watermark.xingkang.wang\n```"}
{"id": "63c4a15b1842bc13d77a36dc", "level": "level4", "llm_response": "```yml\nname: PHP ${{ matrix.php-versions }}\njobs:\n", "answer": "```yaml \non: push\n\njobs:\n  test-idiorm-with-php5-2:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n\n    env:\n      REGISTRY: ghcr.io\n      IMAGE_NAME: treffynnon/php5.2cli:latest\n\n    name: 'PHP 5.2'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Pull docker image\n        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - name: Run PHPUnit tests\n        run: docker run -t -v $(realpath ./):/tmp/idiorm --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} /root/phpunit -c /tmp/idiorm/phpunit.xml\n\n  test-idiorm-against-php-matrix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-versions:     ['5.4', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4']\n        phpunit-versions: ['4.8']\n        include:\n          - php-versions: '8.0'\n            phpunit-versions: '8.5.21'\n          - php-versions: '8.2'\n            phpunit-versions: '8.5.21'\n\n    name: PHP ${{ matrix.php-versions }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php-versions }}\n          coverage: xdebug\n          tools: composer, phpunit:${{ matrix.phpunit-versions }}\n\n      - name: Setup problem matchers for PHPUnit\n        run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Add PHP 8 return types\n        if: ${{ matrix.php-versions >= '8.0' }}\n        run: |\n          sed -i 's#setUp()#setUp(): void#' test/*.php\n          sed -i 's#tearDown()#tearDown(): void#' test/*.php\n\n      - name: Run phpunit tests\n        run: composer run-script test -- --colors --coverage-text\n```"}
{"id": "63c49cdc517fc08c1eef9339", "level": "level4", "llm_response": "```yaml\nname: Build debug apk\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Build debug apk\n\non:\n  pull_request:\n    branches:\n      - develop\n    paths-ignore:\n      - '**.md'\n      - '.github/**'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build_debug_apk:\n    name: Build debug apk\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: assembleInternalDebug\n\n      - name: Obtain debug apk\n        if: always()\n        run: cp $(find . -regex '.*outputs/apk/.*internal-debug.apk') pr-ddg-debug.apk\n\n      - name: Upload debug apk\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: pr-ddg-debug\n          path: pr-ddg-debug.apk```"}
{"id": "63c497e4cbc73931bb18352f", "level": "level4", "llm_response": "```yml\nname: binder-badge\non:\n  pull_request:\n   ", "answer": "```yaml name: binder-badge\non:\n  pull_request_target:\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: manics/action-binderbadge@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4990d33b087f6bde3ccdf", "level": "level4", "llm_response": "```yml\nname: Test C++\non:\n  branches:\n    -", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C++\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - '.github/workflows/test-lang-c\\+\\+.yml'\n    - 'lang/c\\+\\+/**'\n\ndefaults:\n  run:\n    working-directory: lang/c++\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt update && sudo apt-get install -qqy cppcheck libboost-all-dev libsnappy-dev cmake\n\n      - name: Clean\n        run: ./build.sh clean\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Release build\n        run: |\n          mkdir -p build\n          cd build\n          cmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release ..\n```"}
{"id": "63c49a65517fc08c1eee9b6d", "level": "level4", "llm_response": "```yml\n---\nname: Compress images\non:\n  pull_request", "answer": "```yaml name: Compress images\n\non:\n  pull_request:\n    paths:\n      - '**.jpg'\n      - '**.png'\n      - '**.webp'\n\njobs:\n  build:\n    name: calibreapp/image-actions\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Compress Images\n        uses: calibreapp/image-actions@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e5933b087f6bde5f2bb", "level": "level4", "llm_response": "```yaml\nname: Docker Build TeamCity\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-05-26 12:00:50 +0100 (Thu, 26 May 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Dockerfiles\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Docker Build TeamCity\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - teamcity/Dockerfile\n      - .github/workflows/docker_build_teamcity.yaml\n  workflow_dispatch:\n  #schedule:\n  #  - cron: '0 2 * * *'\n\njobs:\n  docker_build:\n    name: Docker Build\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: |\n      github.repository_owner == 'HariSekhon' &&\n      (\n        github.event_name == 'schedule' ||\n        (\n          github.ref_type == 'branch' &&\n          ( github.ref_name == github.event.repository.default_branch || github.ref_name == 'docker' )\n        )\n      )\n    uses: HariSekhon/GitHub-Actions/.github/workflows/docker_build.yaml@master\n    with:\n      repo_tags: |\n        ghcr.io/harisekhon/teamcity:latest\n        harisekhon/teamcity:alpine\n      context: teamcity\n    secrets:\n      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n    permissions:\n      contents: read\n      packages: write\n```"}
{"id": "63c49ec1cbc73931bb1af7f3", "level": "level4", "llm_response": "```yml\n---\nname: Aggregate sources and rebuild\non:\n  event", "answer": "```yaml name: Aggregate sources and rebuild\n\non:\n  schedule:\n    # 19:42 UTC every Sunday\n    - cron: \"42 19 * * 0\"\n\n  # push:\n    # branches:\n      # - gh-pages\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: gh-pages\n          fetch-depth: 1\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r scripts/requirements.txt\n\n      - name: Aggregate and build\n        run: |\n          rm -rf src/aggregations\n          python scripts/build.py auto aggregate\n          python scripts/build.py auto\n\n      - name: Commit files\n        run: |\n          git config user.name 'GitHub Action'\n          git config user.email 'actions@github.com'\n          git add -u .\n          git commit -m \"cd: auto build at $(TZ=UTC date +'%F'T'%T'Z)\"\n          git push --force-with-lease\n```"}
{"id": "63c4975e1e33648075780971", "level": "level4", "llm_response": "```yml\nname: Build docker sample-extension-dotnet-minimalapi\n\n", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c498d933b087f6bde3b708", "level": "level4", "llm_response": "```yml\nname: No Response\n\non:\n  branches:\n    -", "answer": "```yaml name: No Response\n\n# **What it does**: Closes issues where the original author doesn't respond to a request for information.\n# **Why we have it**: To remove the need for maintainers to remember to check back on issues periodically to see if contributors have responded.\n# **Who does it impact**: Everyone that works on docs or docs-internal.\n\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ github.token }}\n          daysUntilClose: 14 # Number of days of inactivity before an Issue is closed for lack of response\n          responseRequiredLabel: \"Reporter Feedback\" # Label indicating that a response from the original author is required\n          closeComment: >\n            This issue has been automatically closed because there has been no response\n            to our request for more information. With only the\n            information that is currently in the issue, we don't have enough information\n            to take action. Please reach out if you have or find the answers we need so\n            that we can investigate further. See [this blog post on bug reports and the\n            importance of repro steps](https://www.lee-dohm.com/2015/01/04/writing-good-bug-reports/)\n            for more information about the kind of information that may be helpful.\n```"}
{"id": "63c49d67517fc08c1eefc9e1", "level": "level4", "llm_response": "```yml\nname: Sync Wiki\n\non:\n  branch:\n    -", "answer": "```yaml name: Sync Wiki\n\n# Ignored. To make it work, we would need a secret named GH_PERSONAL_ACCESS_TOKEN with a Github personal access token with \"repo\" authorization.\n# Inspired in: https://github.com/marketplace/actions/publish-to-github-wiki\n\non:\n  push:\n    branches-ignore:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Sync GitHub Wiki from Sources\n    steps:\n      - run: ./scripts/sync-wiki.sh\n        env:\n          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}\n        shell: bash\n        timeout-minutes: 5\n```"}
{"id": "63c49b9c6fc19abdf9cbda1a", "level": "level4", "llm_response": "```yaml\nname: CI\non:\n  push:\n    branches:\n     ", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm i\n      - run: npm test\n```"}
{"id": "63c4985e1e3364807578700c", "level": "level4", "llm_response": "```yml\n---\nname: Lint Commit Messages\non:\n  branch", "answer": "```yaml # Run commitlint on the commit messages in a pull request.\n\nname: Lint Commit Messages\n\non:\n  - pull_request\n\njobs:\n  commitlint:\n    uses: openedx/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c49e451e336480757ac7a0", "level": "level4", "llm_response": "```yml\nname: Documentation Generator\n\non:\n  push:\n    branches", "answer": "```yaml name: Documentation Generator\non:\n  push:\n    branches:\n      - \"*\"\n      - \"!docs\"\n    tags:\n      - \"*\"\njobs:\n  docs:\n    name: Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n\n      - name: Install dependencies\n        run: yarn --immutable\n\n      - name: Checkout docs branch\n        uses: actions/checkout@v3\n        with:\n          ref: \"docs\"\n          path: \"docs\"\n\n      - name: Generate documentation\n        run: yarn docs\n\n      - name: Move generated docs file\n        run: mv docs.json docs/${{ github.ref_name }}.json\n\n      - name: Commit and push\n        run: |\n          cd docs\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Docs build for ${{ github.ref_type }} ${{ github.ref_name }}: ${{ github.sha }}\"\n          git push\n```"}
{"id": "63c49ad8517fc08c1eeeca56", "level": "level4", "llm_response": "```yml\nname: dependabot-auto-merge\n\non:\n ", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    \n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          \n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          \n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c4a0f16fc19abdf9cdf46c", "level": "level4", "llm_response": "```yml\nname: Check Lint\n\non:\n  pull_request:\n", "answer": "```yaml name: Check Lint\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  check-lint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install clang-format\n        run: |\n          sudo apt update\n          sudo apt install clang-format-10\n      - uses: actions/checkout@v3\n      - run: ./scripts/check-lint.sh\n        env:\n          CLANG_FORMAT_PATH: \"/usr/bin/clang-format-10\"\n```"}
{"id": "63c49df81842bc13d778dba8", "level": "level4", "llm_response": "```yml\nname: Pull Request Required Labels\n\non:\n  pull_request", "answer": "```yaml #  https://github.com/mheap/github-action-required-labels\nname: Pull Request Required Labels\non:\n  pull_request:\n    types: [ opened, labeled, unlabeled, synchronize ]\njobs:\n  label:\n    if: github.event.pull_request.state == 'open'\n    runs-on: ubuntu-latest\n    name: Verify Pull Request has labels\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        with:\n          mode: minimum\n          count: 1\n          labels: \"breaking-change, feature, enhancement, bug, dependencies, documentation, housekeeping\"```"}
{"id": "63c49f50736e7f0ed8c6d7ce", "level": "level4", "llm_response": "```yml\n---\nname: Conventional Commits\non:\n  pull", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - master\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  commitsar:\n    name: Validate Conventional Commits\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Run commitsar\n        uses: docker://outillage/commitsar:0.11.2\n```"}
{"id": "63c49feeb008460c1df50a68", "level": "level4", "llm_response": "```yml\n---\nname: Create Releasable Package Drop\n\non", "answer": "```yaml name: Create Releasable Package Drop\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - release-*\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - uses: actions/setup-node@v3\r\n    - name: npm install and test\r\n      run: |\r\n        npm ci\r\n        npm test\r\n    - name: Adding playwright\r\n      run: npm install --no-save --no-package-lock playwright\r\n    - name: Validate the browser can import TypeScript\r\n      run: gulp test-browser-integration\r\n    - name: LKG, clean, and pack\r\n      run: |\r\n        gulp LKG\r\n        gulp clean\r\n        npm pack ./\r\n        mv typescript-*.tgz typescript.tgz\r\n    - name: Upload built tarfile\r\n      uses: actions/upload-artifact@v3\r\n      with:\r\n        name: tgz\r\n        path: typescript.tgz\r\n```"}
{"id": "63c4a1386fc19abdf9ce1169", "level": "level4", "llm_response": "```yml\nname: Codacy Security Scan\n\non:\n  push:\n", "answer": "```yaml # This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow checks out code, performs a Codacy security scan\n# and integrates the results with the\n# GitHub Advanced Security code scanning feature.  For more information on\n# the Codacy security scan action usage and parameters, see\n# https://github.com/codacy/codacy-analysis-cli-action.\n# For more information on Codacy Analysis CLI in general, see\n# https://github.com/codacy/codacy-analysis-cli.\n\nname: Codacy Security Scan\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '17 14 * * 5'\n\npermissions:\n  contents: read\n\njobs:\n  codacy-security-scan:\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    name: Codacy Security Scan\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository to the GitHub Actions runner\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis\n      - name: Run Codacy Analysis CLI\n        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b\n        with:\n          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository\n          # You can also omit the token and run the tools that support default configurations\n          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}\n          verbose: true\n          output: results.sarif\n          format: sarif\n          # Adjust severity of non-security issues\n          gh-code-scanning-compat: true\n          # Force 0 exit code to allow SARIF file generation\n          # This will handover control about PR rejection to the GitHub side\n          max-allowed-issues: 2147483647\n\n      # Upload the SARIF file generated in the previous step\n      - name: Upload SARIF results file\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n```"}
{"id": "63c49eca517fc08c1ef05b75", "level": "level4", "llm_response": "```yml\nname: check-only\n\non:\n  pull_request:\n   ", "answer": "```yaml name: check-only\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  desktop-win:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore .\\WolvenKit\\WolvenKit.csproj\n    - name: Build\n      run: dotnet build .\\WolvenKit\\WolvenKit.csproj --no-restore\n\n  console-linux:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore ./WolvenKit.CLI/WolvenKit.CLI.csproj\n    - name: Build\n      run: dotnet build ./WolvenKit.CLI/WolvenKit.CLI.csproj --no-restore```"}
{"id": "63c497d3cbc73931bb182d2f", "level": "level4", "llm_response": "```yml\nname: Dependency Review\n\non:\n  pull_request:\n   ", "answer": "```yaml name: 'Dependency Review'\non: [ pull_request ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    continue-on-error: false\n    steps:\n      - name: 'Checkout Repository'\n        uses: actions/checkout@v3\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v2\n        with:\n          fail-on-severity: critical\n          # Representation of this list: https://www.eclipse.org/legal/licenses.php#\n          # Expressed with the help of the following IDs: https://spdx.org/licenses/\n          allow-licenses: >-\n            Adobe-Glyph, Apache-1.0, Apache-1.1, Apache-2.0, Artistic-2.0, BSD-2-Clause, BSD-3-Clause,\n            BSD-4-Clause, 0BSD, BSL-1.0, CDDL-1.0, CDDL-1.1, CPL-1.0, CC-BY-3.0, CC-BY-4.0, CC-BY-2.5,\n            CC-BY-SA-3.0, CC-BY-SA-4.0, CC0-1.0, EPL-1.0, EPL-2.0, FTL, GFDL-1.3-only, IPL-1.0, ISC,\n            MIT, MIT-0, MPL-1.1, MPL-2.0, NTP, OpenSSL, PHP-3.01, PostgreSQL, OFL-1.1, Unlicense,\n            Unicode-DFS-2015, Unicode-DFS-2016, Unicode-TOU, UPL-1.0, W3C-20150513, W3C-19980720, W3C,\n            WTFPL, X11, Zlib, ZPL-2.1\n```"}
{"id": "63c4a061cbc73931bb1ba068", "level": "level4", "llm_response": "```yml\n---\nname: check-x-pack-heartbeat\non: pull", "answer": "```yaml name: check-x-pack-heartbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-heartbeat.yml'\n      - 'x-pack/heartbeat/**'\n      - 'heartbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/heartbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      run: |\n        go install github.com/magefile/mage\n        make -C ${{ env.BEAT_MODULE }} check update\n        make check-no-changes\n```"}
{"id": "63c49d6eb008460c1df40ff3", "level": "level4", "llm_response": "```yml\n---\nname: Frontend\non: pull_request.event\n", "answer": "```yaml name: frontend\n\non:\n  pull_request:\n\njobs:\n\n  frontend:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Node\n        uses: actions/setup-node@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n            node-version: '16.x'\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          yarn\n\n      - name: Lint and test Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn run test\n\n      - name: Store test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        uses: actions/upload-artifact@v3\n        with:\n          name: frontend_coverage\n          path: ./test/unit_test_coverage/clover.xml\n\n      - name: Build Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn build\n\n  coverage:\n    runs-on: ubuntu-latest\n    needs:\n      - frontend\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements/ci.txt\n\n      - name: Retrieve frontend coverage\n        uses: actions/download-artifact@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          name: frontend_coverage\n          path: frontend_coverage\n\n      - name: Check frontend test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          diff-cover frontend_coverage/clover.xml --compare-branch=origin/main --fail-under=100\n```"}
{"id": "63c49fae33b087f6bde67bc4", "level": "level4", "llm_response": "```yml\n---\nname: CI\non:\n  push:\n    branches", "answer": "```yaml name: CI\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n\njobs:\n  verify_module:\n    name: Verify module\n    strategy:\n      matrix:\n        terraform: [1.1.9]\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - run: terraform fmt -recursive -check=true -write=false\n\n  verify_examples:\n    name: Verify examples\n    strategy:\n      fail-fast: false\n      matrix:\n        terraform: [1.0.11, latest]\n        example:\n          [\n            \"runner-default\",\n            \"runner-docker\",\n            \"runner-multi-region\",\n            \"runner-pre-registered\",\n            \"runner-public\",\n          ]\n    defaults:\n      run:\n        working-directory: examples/${{ matrix.example }}\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - if: contains(matrix.terraform, '1.0.')\n        run: terraform fmt -recursive -check=true -write=false\n      - run: terraform validate\n\n  docs:\n    # update docs after merge back to develop\n    if: github.event_name != 'pull_request' && contains('refs/heads/develop', github.ref)\n    name: Auto update terraform docs\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: CHeckout branch\n      uses: actions/checkout@v3\n\n    - name: Generate TF docs\n      uses: terraform-docs/gh-actions@v1.0.0\n      with:\n        find-dir: .\n        git-commit-message: \"docs: auto update terraform docs\"\n        git-push: true\n\n  tfsec:\n    name: tfsec PR commenter\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Clone repo\n        uses: actions/checkout@master\n      - name: tfsec\n        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0\n        with:\n          github_token: ${{ github.token }}\n\n  release:\n    if: github.event_name != 'pull_request' && contains('refs/heads/main', github.ref)\n    name: Release\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Get installation token\n        uses: npalm/action-app-token@v1.0.0\n        id: app-token\n        with:\n          appId: ${{ secrets.APP_ID }}\n          appPrivateKeyBase64: ${{ secrets.APP_PRIVATE_KEY_BASE64 }}\n          appInstallationType: repo\n          appInstallationValue: ${{ github.repository }}\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}\n        run: |\n          cp .release/* .\n          yarn \n          yarn release --repositoryUrl https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git\n```"}
{"id": "63c49df8517fc08c1ef0053c", "level": "level4", "llm_response": "```yml\n---\nname: Dependency Review\non: pull_request.event.pull", "answer": "```yaml name: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit\n\n      - name: 'Checkout Repository'\n        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@fd675ced9c17f1393071e1a2e685ab527e585a0c\n```"}
{"id": "63c49e6f1842bc13d7790c57", "level": "level4", "llm_response": "```yml\n---\nname: Auto merge\ndescription: |\n  Auto merge", "answer": "```yaml name: Auto merge\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Tests'\n\njobs:\n  merge-me:\n    name: Auto merge\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Auto merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2\n        with:\n          # Depending on branch protection rules, a  manually populated\n          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to\n          # a protected branch must be used.\n          #\n          # When using a custom token, it is recommended to leave the following\n          # comment for other developers to be aware of the reasoning behind it:\n          #\n          # This must be used as GitHub Actions token does not support pushing\n          # to protected branches.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PRESET: DEPENDABOT_MINOR\n```"}
{"id": "63c49728b008460c1df19228", "level": "level4", "llm_response": "```yml\nname: JOSS\n\non:\n  push:\n    branches", "answer": "```yaml name: JOSS\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"joss/**\"\n\njobs:\n  joss:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Generate .tex\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml --to=latex --output=paper.tex\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Generate .pdf\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Upload the generated files as an artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: joss\n          name: joss\n\n      - name: Deploy\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: peaceiris/actions-gh-pages@v3.8.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./joss\n          force_orphan: true\n          publish_branch: joss-compiled\n```"}
{"id": "63c4989e6fc19abdf9caa598", "level": "level4", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  nodejs:\n    # Documentation: https://github.com/zakodium/workflows#nodejs-ci\n    uses: zakodium/workflows/.github/workflows/nodejs.yml@nodejs-v1\n    with:\n      node-version-matrix: '[12, 14, 16, 18]'\n```"}
{"id": "63c49ce633b087f6bde55c90", "level": "level4", "llm_response": "```yml\nname: Lint and Test\n\non:\n  push:\n", "answer": "```yaml name: Lint and Test\n\non: [push]\n\njobs:\n  lint_and_test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: Install dependencies\n      run: make install\n    - name: Lint\n      run: make lint\n    - name: Test\n      run: make test\n```"}
{"id": "63c49c3d1e3364807579f946", "level": "level4", "llm_response": "```yml\nname: notify-release\non:\n  branches:\n    -", "answer": "```yaml name: notify-release\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    - cron: '30 8 * * *'\r\njobs:\r\n  setup:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Notify release\r\n        uses: nearform/github-action-notify-release@v1\r\n        with:\r\n          github-token: ${{ secrets.GITHUB_TOKEN }}\r\n```"}
{"id": "63c4a096736e7f0ed8c75ab0", "level": "level4", "llm_response": "```yaml\n---\nname: test-get-target-config\non:\n  pull_request", "answer": "```yaml name: test-get-target-config\n\non:\n  pull_request:\n    branches:\n    - main\n  push:\n    branches:\n    - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: aws/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_assume_role_arn }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_region }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n  test-gcp:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: gcp/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n```"}
{"id": "63c4975e6fc19abdf9ca2240", "level": "level4", "llm_response": "```yml\n---\nname: Automatic Rebase\ndescription: Rebase the", "answer": "```yaml on:\n  issue_comment:\n    types: [created]\nname: Automatic Rebase\njobs:\n  rebase:\n    name: Rebase\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/rebase')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n        with:\n          fetch-depth: 0\n      - name: Automatic Rebase\n        uses: cirrus-actions/rebase@1.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e301899db5886504fda", "level": "level4", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\n#on:\n#  push:\n#    branches: [ master ]\n#  pull_request:\n#    # The branches below must be a subset of the branches above\n#    branches: [ master ]\n#  schedule:\n#    - cron: '30 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: true\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 6.0.100\n\n    - name: Build\n      run: dotnet build\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```"}
{"id": "63c4a09333b087f6bde6d774", "level": "level4", "llm_response": "```yml\nname: Nix\n\non:\n  branches:\n    -", "answer": "```yaml name: Nix\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Nix Flake - Linux\n    permissions:\n      contents: read\n    steps:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install\n          install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Clone project\n        uses: actions/checkout@v3\n      - name: Build\n        # \"nix build\" builds with full optimization and includes a profiling\n        # build, so just the build of xmonad-contrib itself takes 3 minutes.\n        # As a workaround, we invoke cabal manually here.\n        run: nix develop -c cabal v2-build -O0 -j\n```"}
{"id": "63c49cf21899db58864fd39b", "level": "level4", "llm_response": "```yml\nname: Cache libs (dist)\n\non:\n  push:\n", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n      - 'epic/**'\n      - 'release/**'\nname: Cache libs (dist)\njobs:\n  cacheBuildedLibs:\n    name: Builded libs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Cache builded libs\n        uses: ./.github/cache-builded-libs\n```"}
{"id": "63c4a1266fc19abdf9ce0a0e", "level": "level4", "llm_response": "```yml\nname: Debug on Windows\non:\n  branches:\n   ", "answer": "```yaml on: workflow_dispatch\n\nname: Debug on Windows\njobs:\n    debug-windows:\n        runs-on: windows-latest\n        strategy:\n            fail-fast: false\n            matrix:\n                language: [\"cpp\"]\n\n        steps:\n            - name: Setup NuGet.exe for use with actions\n              uses: NuGet/setup-nuget@v1.0.5\n\n            - name: Checkout\n              uses: actions/checkout@v2.3.4\n              with:\n                  submodules: recursive\n\n            - name: Install OpenSSL\n              uses: crazy-max/ghaction-chocolatey@v1.6.0\n              with:\n                  args: install openssl -y\n\n            - name: Add NuGet Remote\n              run: \"nuget.exe sources Add -Name NuGetRemote -Source https://api.nuget.org/v3/index.json\"\n\n            - name: Setup tmate session\n              uses: mxschmitt/action-tmate@v3\n              with:\n                limit-access-to-actor: true\n              continue-on-error: true```"}
{"id": "63c4986cb008460c1df210dd", "level": "level4", "llm_response": "```yml\nname: Large Repo Benchmark\n\non:\n  branches:\n   ", "answer": "```yaml name: Large Repo Benchmark\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [Release]\n    types:\n      - completed\n\njobs:\n  build:\n    name: Run Benchmarks\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-node\n      - uses: ./.github/actions/setup-go\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Build\n        run: cd cli && make turbo\n\n      - name: Download previous benchmark results\n        # continue on error so that we handle the bootstrap case where there is no previous data\n        continue-on-error: true\n        run: mkdir -p raw-data/${{ runner.os }} && curl -f -o raw-data/${{ runner.os }}/benchmark-data.json https://raw.githubusercontent.com/vercel/turborepo/gh-pages/${{ runner.os }}/benchmark-data.json\n\n      - name: Run benchmarks\n        run: cd benchmark && pnpm benchmark\n\n      - name: Save to Tinybird\n        if: github.ref == 'refs/heads/main'\n        run: |\n          curl \\\n            -i \\\n            -F \"ndjson=@./benchmark/tinybird.ndjson\" \\\n            -X POST \\\n            -H 'Authorization: Bearer ${{ secrets.TINYBIRD_TOKEN }}' \\\n            'https://api.us-east.tinybird.co/v0/datasources?format=ndjson&name=turbo_benchmarks&mode=append'\n\n      - name: Store Benchmark Result\n        uses: benchmark-action/github-action-benchmark@v1\n        with:\n          name: \"${{ runner.os }} Benchmark\"\n          # What benchmark tool the output is formatted as\n          tool: \"customSmallerIsBetter\"\n          output-file-path: ./benchmark/benchmarks.json\n          external-data-json-path: ./raw-data/${{ runner.os }}/benchmark-data.json\n          auto-push: false\n          # GitHub API token to make a commit\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          skip-fetch-gh-pages: true\n\n      - name: Deploy\n        if: github.ref == 'refs/heads/main'\n        uses: JamesIves/github-pages-deploy-action@v4.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          folder: raw-data\n          clean: false\n          single-commit: false\n          git-config-email: github-bot@turborepo.org\n          repository-name: vercel/turborepo\n          commit-message: \"Update\"\n```"}
{"id": "63c4a04c1e336480757b949e", "level": "level4", "llm_response": "```yml\nname: Tests: pretest/posttest\non:\n ", "answer": "```yaml name: 'Tests: pretest/posttest'\n\non: [pull_request, push]\n\njobs:\n  tests:\n    uses: ljharb/actions/.github/workflows/pretest.yml@main\n```"}
{"id": "63c49dc61842bc13d778c79d", "level": "level4", "llm_response": "```yml\n---\nname: Node.js Package\n\non:\n  release:\n", "answer": "```yaml # This workflow will run tests using node and then publish a package to GitHub Packages when a release is created\n# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages\n\nname: Node.js Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: 'npm'\n      - run: npm ci\n\n      - name: Determine dist-tag\n        id: dist_tag\n        uses: actions/github-script@v6\n        with:\n          result-encoding: string\n          script: |\n            const semver = require(\"semver\");\n            const version = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version;\n            const parsed = semver.parse(version);\n            return parsed.prerelease.length ? \"--tag next\" : \"\";\n\n      - name: Publish to NPM\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n          TAG: ${{ steps.dist_tag.outputs.result }}\n        run: npm publish $TAG\n```"}
{"id": "63c498f31e3364807578ae91", "level": "level4", "llm_response": "```yml\nname: close stale issues/PRs\non:\n ", "answer": "```yaml name: 'close stale issues/PRs'\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@87c2b794b9b47a9bec68ae03c01aeb572ffebdb1\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label: \"\"\n          close-pr-message: \"\"\n```"}
{"id": "63c49ce96fc19abdf9cc5f23", "level": "level4", "llm_response": "```yml\nname: Builds\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Builds\non:\n  - push\n  - pull_request\n\npermissions:\n  contents: read\n\njobs:\n  doc:\n    name: Documentation (Sphinx)\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build docs\n        run: make doc\n\n      - name: Print warnings\n        run: if [ -s .sphinx/warnings.txt ]; then cat .sphinx/warnings.txt; exit 1; fi\n\n      - name: Upload artifacts\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: documentation\n          path: doc/html\n\n  static:\n    name: Static binaries\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n          - windows-latest\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create build directory\n        run: |\n          mkdir bin\n\n      - name: Build static lxc\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxc\n\n      - name: Build static lxd-migrate\n        if: runner.os == 'Linux'\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxd-migrate\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        continue-on-error: true\n        with:\n          name: ${{ runner.os }}\n          path: bin/\n```"}
{"id": "63c494d87843b61269a03c6b", "level": "level4", "llm_response": "```yml\n---\nname: Check Pull Request\non:\n  pull_request", "answer": "```yaml name: Check Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  check-title:\n    name: Check Title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Semantic pull request\n        uses: amannn/action-semantic-pull-request@v5.0.1\n        with:\n          validateSingleCommit: true\n          ignoreLabels: revert\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4972bb008460c1df19384", "level": "level4", "llm_response": "```yml\n---\nname: Publish MacOS \u2014 x64\n\non:\n ", "answer": "```yaml name: Publish MacOS \u2014 x64\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    runs-on: macos-11\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install Packages\n        run: yarn install\n      - name: Rebuild Native Modules\n        run: npx electron-rebuild\n      - name: Get Urbit Binaries\n        run: ./get-urbit.sh\n      - name: Add MacOS certs\n        run: chmod +x add-osx-cert.sh && ./add-osx-cert.sh\n        env:\n          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}\n          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n      - name: Build & Publish\n        run: |\n          yarn run publish --arch x64\n        env:\n          APPLE_ID: ${{secrets.APPLE_ID}}\n          APPLE_ID_PASSWORD: ${{secrets.APPLE_ID_PASSWORD}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}```"}
{"id": "63c49df8517fc08c1ef0053b", "level": "level4", "llm_response": "```yml\nname: CodeQL\n\non:\n  push:\n    branches", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  schedule:\n    - cron: '0 7 * * 1' # Monday at 7:00 AM\n\npermissions: read-all\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n\n    steps:\n    - name: Harden Runner\n      uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n      with:\n        egress-policy: audit\n\n    - name: Checkout repository\n      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@807578363a7869ca324a79039e6db9c843e0e100\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@807578363a7869ca324a79039e6db9c843e0e100\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@807578363a7869ca324a79039e6db9c843e0e100\n```"}
{"id": "63c499856fc19abdf9cb0415", "level": "level4", "llm_response": "```yml\nname: make all\n\non:\n  push:\n    branches", "answer": "```yaml on: push\nname: make all\njobs:\n  makeall:\n    name: make all\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make all\n        uses: docker://golang:latest\n        with:\n          entrypoint: bash\n          args: -c \"go get honnef.co/go/tools/cmd/staticcheck && go get golang.org/x/lint/golint && git checkout . && make all\"\n```"}
{"id": "63c49ade517fc08c1eeecd16", "level": "level4", "llm_response": "```yml\nname: Test installation and doccano commands\n\non:\n ", "answer": "```yaml name: Test installation and doccano commands\n\non:\n  schedule:\n    - cron: \"15 22 * * *\"\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    steps:\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Enabling JSON1 extension on SQLite\n      if: ${{ startsWith(matrix.os, 'windows') && matrix.python-version == '3.8' }}\n      shell: bash\n      run: |\n        export VERSION=`python -V | cut -f2 -d \" \"`\n        curl -LO https://www.sqlite.org/2022/sqlite-dll-win64-x64-3390300.zip\n        unzip sqlite-dll-win64-x64-3390300.zip\n        mv sqlite3.dll /c/hostedtoolcache/windows/Python/$VERSION/x64/DLLs/\n    - name: Test installation\n      run: pip install doccano\n    - name: Test doccano init command\n      run: doccano init\n    - name: Test doccano createuser command\n      run: doccano createuser --username admin --password pass\n```"}
{"id": "63c49ba0b008460c1df358ce", "level": "level4", "llm_response": "```yaml\nname: Deploy demo to Fly\n\non:\n  event:\n   ", "answer": "```yaml name: Deploy demo to Fly\non:\n  workflow_run:\n    workflows: [Cookie cutter test]\n    branches: [main]\n    types:\n      - completed\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      if: ${{ github.event.workflow_run.conclusion == 'success' }}\n      timeout-minutes: 6\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - name: Install dependencies\n          run: |\n            apk update && apk add py3-pip python3\n            pip3 install cookiecutter\n        - run: bash scripts/deploy-demo-project-to-fly.sh\n```"}
{"id": "63c495c57843b61269a09c8f", "level": "level4", "llm_response": "```yml\n---\nname: CI and CD\non:\n  push:\n", "answer": "```yaml name: CI and CD\n\non:\n  push:\n    branches:\n    - master\n  workflow_dispatch:\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run a one-line script\n      run: echo Hello, world!\n    - name: Start environment\n      run: make start-containers\n    - name: Run tests\n      run: make params=-T tests\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    needs: tests\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run Ansible playbook\n      uses: dawidd6/action-ansible-playbook@v2\n      with:\n        playbook: ./infrastructure/playbooks/deploy.yml\n        directory: ./\n        key: ${{secrets.SSH_KEY}}\n        vault_password: ${{secrets.VAULT_PASSWORD}}\n        options: |\n          --inventory infrastructure/playbooks/hosts\n      env:\n        ANSIBLE_HOST_KEY_CHECKING: False\n```"}
{"id": "63c4966d1e3364807577a9d1", "level": "level4", "llm_response": "```yaml\nname: Compile test\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Compile test\n\non:\n  push:\n    branches:\n      - \"**\"\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  compile:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048 # tag=v3\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm install\n    - run: npm run build```"}
{"id": "63c497691899db58864d95cc", "level": "level4", "llm_response": "```yml\nname: CodeQL\n\non:\n  branches:\n    -", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n    paths-ignore:\n      - '*/spec/fixtures/**'\n      - 'CHANGELOG.md'\n      - 'common/lib/dependabot/version.rb'\n  schedule:\n    - cron: '41 4 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'schedule' || github.repository == 'dependabot/dependabot-core' }}\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go', 'javascript', 'python', 'ruby' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49a5e6fc19abdf9cb5a11", "level": "level4", "llm_response": "```yml\n---\nname: npm-update-pf\non:\n  schedule", "answer": "```yaml name: npm-update-pf\non:\n  schedule:\n    - cron: '0 3 * * 1'\n  # can be run manually on https://github.com/cockpit-project/cockpit/actions\n  workflow_dispatch:\njobs:\n  npm-update:\n    environment: npm-update\n    permissions:\n      pull-requests: write\n      contents: write\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v3\n\n      - name: Run npm-update bot\n        run: |\n          tools/make-bots\n          git config --global user.name \"GitHub Workflow\"\n          git config --global user.email \"cockpituous@cockpit-project.org\"\n          mkdir -p ~/.config/cockpit-dev\n          echo ${{ github.token }} >> ~/.config/cockpit-dev/github-token\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}'\n          bots/npm-update @patternfly >&2\n          ssh-add -D\n          ssh-agent -k\n\n      - name: Force push the change to trigger testing workflows\n        run: |\n          # Don't force-push if no branch was created\n          test \"$(git symbolic-ref HEAD)\" = '${{ github.ref }}' && exit\n\n          sleep 1 # make sure the timestamp changes\n          git commit --amend --no-edit\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.COCKPIT_DEPLOY_KEY }}'\n          git push --force 'git@github.com:${{ github.repository }}' HEAD\n          ssh-add -D\n          ssh-agent -k\n```"}
{"id": "63c49dc8517fc08c1eeff286", "level": "level4", "llm_response": "```yml\nname: Build & Test\n\non:\n  pull_request:\n", "answer": "```yaml name: Build & Test\n\non:\n  push: {}\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build-and-test:\n    name: Build & Test\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ocaml-compiler:\n          - 4.11.0\n          - 4.10.1\n          - 4.09.1\n          - 4.08.1\n        os:\n          - ubuntu-latest\n          - macOS-latest\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      # Cancel queued workflows from earlier commits in this branch\n      - uses: fkirc/skip-duplicate-actions@master\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Retrieve opam cache\n        uses: actions/cache@v3\n        id: cache-opam\n        with:\n          path: ~/.opam\n          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-${{ hashFiles('*.opam') }}\n          restore-keys: |\n            v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-\n\n      - name: Use OCaml ${{ matrix.ocaml-compiler }}\n        uses: ocaml/setup-ocaml@v2\n        with:\n          ocaml-compiler: ${{ matrix.ocaml-compiler }}\n\n      - name: Install dependencies\n        run: opam install --deps-only --with-test .\n\n      - name: Build\n        run: opam exec -- make\n\n      - name: Test\n        run: opam exec -- make all-test\n\n      - name: Check whitespaces\n        run: opam exec -- ./LINT\n```"}
{"id": "63c4a1a433b087f6bde73a98", "level": "level4", "llm_response": "```yml\nname: Build Site\n\non:\n  pull_request:\n   ", "answer": "```yaml name: Build Site\non:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Install deps\n        run: |\n          npm install postcss-cli\n          npm install autoprefixer\n          sudo -E make docs-deps\n      - name: Build pages\n        run: |\n           make docs-build\n           ls -liah public/```"}
{"id": "63c5aec46b748c7b1fadfc79", "level": "level4", "llm_response": "```yml\nHumble Semi-Binary Build - testing\n---\ntrigger:\n", "answer": "```yaml name: Humble Semi-Binary Build - testing\n# description: 'Build & test that compiles the main dependencies from source.'\n\non:\n  workflow_dispatch:\n    branches:\n      - humble\n  pull_request:\n    branches:\n      - humble\n  push:\n    branches:\n      - humble\n  schedule:\n    # Run every morning to detect flakiness and broken dependencies\n    - cron: '33 1 * * *'\n\njobs:\n  semi_binary:\n    uses: ./.github/workflows/reusable-industrial-ci-with-cache.yml\n    with:\n      ros_distro: humble\n      ros_repo: testing\n      upstream_workspace: ros2_control.humble.repos\n      ref_for_scheduled_build: humble\n```"}
{"id": "63c49f6233b087f6bde65d6f", "level": "level4", "llm_response": "```yml\nname: HealthChecks MongoDb CI\n\non:\n  push", "answer": "```yaml name: HealthChecks MongoDb CI\r\n\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n    branches: [ master ]\r\n    paths:\r\n      - src/HealthChecks.MongoDb/**\r\n      - test/HealthChecks.MongoDb.Tests/**\r\n      - .github/workflows/healthchecks_mongodb_ci.yml\r\n      - Directory.Build.props\r\n      - Directory.Build.targets\r\n    tags-ignore:\r\n      - release-*\r\n  pull_request:\r\n    branches: [ master ]\r\n    paths:\r\n    - src/HealthChecks.MongoDb/**\r\n    - test/HealthChecks.MongoDb.Tests/**\r\n    - .github/workflows/healthchecks_mongodb_ci.yml\r\n    - Directory.Build.props\r\n    - Directory.Build.targets\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    services:\r\n      mongo:\r\n        image: mongo\r\n        ports:\r\n          - 27017:27017\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: |\r\n        dotnet restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Check formatting\r\n      run: |\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1) &&\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\r\n    - name: Build\r\n      run: |\r\n        dotnet build --no-restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet build --no-restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Test\r\n      run: dotnet test --no-restore --no-build ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n```"}
{"id": "63c49b6533b087f6bde4bd34", "level": "level4", "llm_response": "```yml\nname: Auto approve\non:\n  pull_request:\n   ", "answer": "```yaml name: Auto approve\n\non: [pull_request_target]\n\njobs:\n  auto-approve:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hmarr/auto-approve-action@v2\n      if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"```"}
{"id": "63c49e9a33b087f6bde60c8f", "level": "level4", "llm_response": "```yml\npackage-macos-anaconda:\n  name: package-m", "answer": "```yaml name: package-macos-anaconda\n\non:\n  release:\n    types: [created]\n\njobs:\n  package:\n\n    runs-on: macos-latest\n\n    steps:\n\n    - name: fetch MacOSX 10.11 SDK\n      run: curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/MacOSX10.11.sdk/MacOSX10.11.sdk.tar.xz | sudo tar xf - -C /opt/\n\n    - name: install conda-build # and anaconda-client\n      run: sudo $CONDA/bin/conda install -y conda-build # anaconda-client\n\n    - name: fetch recipe\n      run: |\n        git clone https://github.com/MRtrix3/conda-build.git\n        mv conda-build/* .\n        { echo \"CONDA_BUILD_SYSROOT:\"; echo \"  - /opt/MacOSX10.11.sdk        # [osx]\"; } > conda_build_config.yaml\n\n    - name: build package\n      run: sudo CONDA=\"$CONDA\" ./run.sh ${GITHUB_REF#refs/*/} ${GITHUB_REPOSITORY%/*} conda-macos\n\n#    - name: upload package\n#      run: $CONDA/bin/anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u MRtrix3 $(sudo $CONDA/bin/conda build conda-build/ --output)\n\n    - name: Upload package to GitHub Release\n      uses: AButler/upload-release-assets@v2.0\n      with:\n        files: '*.tar.bz2'\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n\n```"}
{"id": "63c49a6f6fc19abdf9cb61cd", "level": "level4", "llm_response": "```yml\nname: Prepare Release Add-on\n\non:\n  event:\n", "answer": "```yaml name: Prepare Release Add-on\n\non:\n  workflow_dispatch:\n\njobs:\n  prepare-release:\n    name: Prepare Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Prepare Release and Create Pull Request\n      env:\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n      run: ./gradlew createPullRequestRelease\n```"}
{"id": "63c49ef31842bc13d779415a", "level": "level4", "llm_response": "```yml\nname: Pull request automation\non:\n  pull_request:\n", "answer": "```yaml # This file is maintained in https://github.com/WeblateOrg/meta/\n\nname: Pull request automation\n\non:\n  pull_request_target:\n    types: opened\n\npermissions:\n  contents: read\n\njobs:\n  weblate_automerge:\n    permissions:\n      pull-requests: write # for actions-ecosystem/action-add-labels to add label\n    runs-on: ubuntu-20.04\n    name: Weblate automerge\n    if: ${{ github.actor == 'weblate' || github.actor == 'pre-commit-ci[bot]' }}\n    steps:\n    - uses: actions-ecosystem/action-add-labels@v1.1.3\n      with:\n        labels: automerge\n```"}
{"id": "63c49779cbc73931bb180a0e", "level": "level4", "llm_response": "```yml\nname: Archs\non:\n  push:\n    branches", "answer": "```yaml name: Archs\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    name: Build on ${{ matrix.arch }}\n\n    strategy:\n      matrix:\n        include:\n          - arch: armv7\n            distro: ubuntu20.04\n          - arch: aarch64\n            distro: ubuntu20.04\n          - arch: ppc64le\n            distro: ubuntu20.04\n          - arch: s390x\n            distro: ubuntu20.04\n  \n    steps:\n    - uses: actions/checkout@v2.4.0\n    - uses: uraimo/run-on-arch-action@v2.1.1\n      name: Build\n      id: build\n      with:\n        arch: ${{ matrix.arch }}\n        distro: ${{ matrix.distro }}\n        install: |\n          apt-get update -y\n          apt-get install -y apache2-dev libcjose-dev libssl-dev check pkg-config\n          apt-get install -y libjansson-dev libcurl4-openssl-dev libhiredis-dev libpcre2-dev\n        setup: |\n          mkdir -p \"${PWD}/logs\"\n        dockerRunArgs: |\n          --volume \"${PWD}/logs:/logs\"\n        env: |\n          logfilename: test-suite-${{ matrix.distro }}-${{ matrix.arch }}.log\n        run: |\n          ./autogen.sh\n          ./configure\n          make check\n          cp test-suite.log \"/logs/${logfilename}\"\n          echo \"Copied test-suite.log to /logs/${logfilename}\"\n          \n    - name: Results\n      run: |\n        cat ${PWD}/logs/*.log\n```"}
{"id": "63c4a11c1899db5886517d65", "level": "level4", "llm_response": "```yaml\nname: CompatHelper\non:\n  schedule:\n    -", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49adb1899db58864f007e", "level": "level4", "llm_response": "```yaml\nname: TLS protocol scan\n\non:\n  push:\n    branches", "answer": "```yaml name: \"TLS protocol scan\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n\npermissions: read-all\n\njobs:\n  tls-check:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [linux]\n        arch: [amd64]\n    name: TLS check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Install dependencies\n        run: |\n          cd $GITHUB_WORKSPACE\n          sudo apt-get update\n          sudo apt-get install -y apache2-utils openssl\n          mkdir -p test/data\n          cd test/data\n          ../scripts/gen_certs.sh\n          htpasswd -bBn test test123 > htpasswd\n      - name: Check for TLS settings\n        continue-on-error: true\n        run: |\n          cd $GITHUB_WORKSPACE\n          make OS=$OS ARCH=$ARCH binary\n          bin/zot-$OS-$ARCH serve examples/config-tls.json &\n          sleep 5\n          curl -kv --tls-max 1.0 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.0 detected\"; exit 1; fi\n          curl -kv --tls-max 1.1 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.1 detected\"; exit 1; fi\n          curl -kv --tls-max 1.2 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -ne 0 ]]; then echo \"TLSv1.2 missing\"; exit 1; fi\n        env:\n          OS: ${{ matrix.os }}\n          ARCH: ${{ matrix.arch }}\n```"}
{"id": "63c497711e33648075781160", "level": "level4", "llm_response": "```yml\n---\nname: CI\n\non:\n  push:\n    branches", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n  pull_request:\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n\njobs:\n  publish:\n    name: Publish to MavenLocal\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: publishToMavenLocal\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: app:assembleDebug\n```"}
{"id": "63c4a03a1899db588651233d", "level": "level4", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n         languages: ${{ matrix.language }}\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a19d6fc19abdf9ce3478", "level": "level4", "llm_response": "```yml\nname: depaware\non:\n  push:\n    branches", "answer": "```yaml name: depaware\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n      - 'release-branch/*'\n\nconcurrency:\n  group: ${{ github.workflow }}-$${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: go.mod\n\n    - name: depaware\n      run: go run github.com/tailscale/depaware --check\n        tailscale.com/cmd/tailscaled\n        tailscale.com/cmd/tailscale\n        tailscale.com/cmd/derper\n```"}
{"id": "63c49d2133b087f6bde57611", "level": "level4", "llm_response": "```yml\nRepository Dispatch Triggered:\n  name: Repository Dispatch Triggered", "answer": "```yaml name: Repository Dispatch Triggered\n\non: [repository_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Repository Dispatch Triggered\n        if: github.event.action == 'event-demo'\n        run: |\n          echo \"Workflow triggered successfully by repository dispatch action!\"```"}
{"id": "63c49d231899db58864fe6c8", "level": "level4", "llm_response": "```yaml\n---\nname: docs\non:\n  branch:\n    - develop", "answer": "```yaml name: docs\n\non:\n  push:\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    branches:\n      - develop\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    if: github.repository == 'theforeman/foreman-ansible-modules'\n    steps:\n      - uses: actions/checkout@v3\n      - name: configure git\n        run: |\n          git config user.name \"${GITHUB_ACTOR}\"\n          git config user.email \"${GITHUB_ACTOR}@bots.github.com\"\n          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.8\"\n      - name: Install dependencies\n        run: make doc-setup\n      - name: Build docs\n        run: make doc\n      - name: commit docs\n        run: |\n          git checkout gh-pages\n          rm -rf $(basename ${GITHUB_REF})\n          mv docs/_build/html $(basename ${GITHUB_REF})\n          ln --force --no-dereference --symbolic  $(dirname v*/index.html | sort --version-sort --reverse | head -n1) latest\n          git show origin/develop:docs/_gh_include/header.inc > index.html\n          (echo develop; echo latest; dirname v*/index.html | sort --version-sort --reverse) | xargs -I@@ -n1 echo '<div class=\"col-md-4 center\"><a href=\"@@/\" class=\"btn-doc btn\"><i class=\"fa fa-newspaper-o\"></i><p>@@</p></a></div>' >> index.html\n          git show origin/develop:docs/_gh_include/footer.inc >> index.html\n          git add $(basename ${GITHUB_REF}) latest index.html\n          git commit -m \"update docs for $(basename ${GITHUB_REF})\" || true\n      - name: push docs\n        run: git push origin gh-pages\n```"}
{"id": "63c4a06bcbc73931bb1ba455", "level": "level4", "llm_response": "```yml\n---\nname: Windows GPU CI Pipeline\n\non:\n  push", "answer": "```yaml # Don't edit this file manully.\n# Run generate-skip-doc-change.py to generate it.\n\nname: Windows GPU CI Pipeline\non:\n  pull_request:\n    paths:\n      - docs/**\n      - README.md\n      - CONTRIBUTING.md\n      - BUILD.md\n\njobs:\n  job1:\n    name: cuda build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job2:\n    name: dml build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job3:\n    name: training build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job4:\n    name: kernelDocumentation build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n```"}
{"id": "63c496df1e3364807577d7a8", "level": "level4", "llm_response": "```yml\n---\nname: sast\non:\n  push:\n   ", "answer": "```yaml name: sast\n\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n  pull_request:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      security-events: write\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'javascript' ]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0e1517fc08c1ef127c9", "level": "level4", "llm_response": "```yml\nname: Send publish metrics to BigQuery\n\non:\n ", "answer": "```yaml name: Send publish metrics to bigquery\non:\n  release:\n    types: published\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.0\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_BQ_METRICS_KEY }}\n          export_default_credentials: true\n      - run: 'jq -c ''.release |\n             {\n               package_name: .name | split(\" \")[0],\n               name,\n               tag_name,\n               version: .tag_name | split(\"-v\")[1],\n               html_url,\n               target_commitish,\n               created_at,\n               published_at,\n               draft,\n               prerelease\n             }'' $GITHUB_EVENT_PATH > releases.json'\n      - run: bq load --source_format=NEWLINE_DELIMITED_JSON metrics.releases releases.json\n```"}
{"id": "63c49d796fc19abdf9cc9892", "level": "level4", "llm_response": "```yaml\nname: Deploy App to Staging\non: manual\njobs", "answer": "```yaml name: Deploy App to Staging\non:\n  workflow_dispatch:\n    inputs:\n      # commit hash (for frontend deploy to fleek)\n      commit:\n        description: \"Branch/Commit ref\"\n        default: \"origin/main\"\n        type: string\njobs:\n  deploy-app:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Checkout staging-app\n        run: |\n          git fetch\n          git checkout -b staging-app origin/staging-app\n          git reset --hard ${{ github.event.inputs.commit }}\n          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/gitcoinco/passport.git\n          git push origin staging-app -f\n```"}
{"id": "63c49e4b1e336480757ac9aa", "level": "level4", "llm_response": "```yml\nname: amd64 Windows Java\non:\n  branches:\n", "answer": "```yaml name: amd64 Windows Java\n\non: [push, pull_request]\n\njobs:\n  # Building using the github runner environement directly.\n  visual-studio:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Check cmake\n      run: cmake --version\n    - name: Install SWIG 4.0.2\n      run: |\n        (New-Object System.Net.WebClient).DownloadFile(\"http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip\",\"swigwin-4.0.2.zip\");\n        Expand-Archive .\\swigwin-4.0.2.zip .;\n        echo \"$((Get-Item .).FullName)/swigwin-4.0.2\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n    - name: Check swig\n      run: swig -version\n    - name: Check mvn\n      run: mvn.cmd --version\n    - name: Configure\n      run: cmake -S. -Bbuild -G \"Visual Studio 17 2022\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_JAVA=ON -DSKIP_GPG=ON\n    - name: Build\n      run: cmake --build build --config Release --target ALL_BUILD -- /verbosity:normal /maxcpucount\n    - name: Test\n      run: cmake --build build --config Release --target RUN_TESTS -- /verbosity:normal /maxcpucount\n    - name: Install\n      run: cmake --build build --config Release --target INSTALL -- /verbosity:normal /maxcpucount\n```"}
{"id": "63c497d3cbc73931bb182d46", "level": "level4", "llm_response": "```yml\n---\nname: Build\n\non:\n  push:\n    branches", "answer": "```yaml name: Build\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ruby: [ '2.7.6', '3.0.4', '3.1.2' ] #, 'jruby-head' ]\n    steps:\n      - name: Setup Ruby, JRuby and TruffleRuby\n        uses: ruby/setup-ruby@v1.118.0\n        with:\n          ruby-version: ${{ matrix.ruby }}\n      - uses: actions/checkout@v3   \n      - name: Install dependecies\n        run: bundle install\n      - name: Run Tests\n        run: ./run_tests.sh\n     \n  auto-merge:\n    needs: run-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          gh pr merge --auto --rebase \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}} \n```"}
{"id": "63c49fb91899db588650eeb3", "level": "level4", "llm_response": "```yml\nname: Release Pull Request Automation\n\non:\n  branch:\n", "answer": "```yaml name: Release Pull Request Automation\n\n# Controls when the action will run. Triggers the workflow on create branch or tag\n# events but only acts on branch create.\non:\n    create:\njobs:\n    release-pull-request-automation:\n        if: ${{ github.event.ref_type == 'branch' && contains( github.ref, 'release/' ) }}\n        env:\n            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n        runs-on: ubuntu-latest\n        steps:\n            - uses: act10ns/slack@v1\n              with:\n                  status: starting\n              if: ${{ always() }}\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Create changeset for pull request\n              run: |\n                  git config user.name github-actions\n                  git config user.email github-actions@github.com\n                  git commit -m 'Empty commit for release pull request' --allow-empty\n                  git push\n            - name: Create Release Pull Request\n              uses: woocommerce/automations@v1\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n                  automations: release\n            - uses: act10ns/slack@v1\n              with:\n                  status: ${{ job.status }}\n                  steps: ${{ toJson(steps) }}\n              if: ${{ always() }}\n```"}
{"id": "63c49e83517fc08c1ef03f35", "level": "level4", "llm_response": "```yml\nname: test-flax\n\non:\n  branch:\n   ", "answer": "```yaml name: test-flax\n\non:\n  push:\n    branches:\n      - 'integration'\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=jammy\"\n            \"MACHINARIS_STREAM=test\"\n            \"CHIADOG_BRANCH=dev\"\n            \"FLAX_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n```"}
{"id": "63c49f4a1842bc13d779622d", "level": "level4", "llm_response": "```yml\n---\nname: New Release - Update other projects\n\non:\n", "answer": "```yaml name: New Release - Update other projects\non:\n  repository_dispatch:\n    types: [http4k-release]\njobs:\n  create-upgrade-branches:\n    strategy:\n      matrix:\n        repo:\n          - 'http4k/toolbox'\n          - 'http4k/examples'\n          - 'http4k/http4k-by-example'\n          - 'http4k/http4k-connect'\n          - 'http4k/http4k-heroku-travis-example-app'\n          - 'http4k/http4k-contract-todo-backend'\n          - 'http4k/http4k-bin'\n          - 'http4k/http4k-todo-backend'\n          - 'http4k/http4k-bootstrap'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger ${{ matrix.repo }}\n        uses: peter-evans/repository-dispatch@v1.1.1\n        with:\n          token: ${{ secrets.TOOLBOX_REPO_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: http4k-release\n          client-payload: '{\"version\": \"${{ github.event.client_payload.version }}\"}'\n```"}
{"id": "63c49cbe1899db58864fbd78", "level": "level4", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  # Cancel any in-progress workflows for this workflow/branch combination.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    name: Build without tests\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'Source/ViewControllerPresentationSpy.xcodeproj', scheme: 'ViewControllerPresentationSpy-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }\n          - { project: 'ObjCSample/ObjCSampleViewControllerPresentationSpy.xcodeproj', scheme: 'ObjCSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 8' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  test:\n    name: Build & test\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'SwiftSample/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n          - { project: 'SwiftSamplePackage/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build & test\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  buildCarthage:\n    needs: [ build, test ]\n    name: Build Carthage\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Build\n      run: carthage build --configuration Release --no-skip-current --use-xcframeworks\n\n  podspec:\n    needs: [ build, test ]\n    name: Pod Spec Lint\n    runs-on: macos-latest\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Lint the pod spec\n        run: pod spec lint --quick\n\n  auto-merge:\n    needs: [ buildCarthage, podspec ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          ./merge_dependabot.sh\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}\n```"}
{"id": "63c49eaa517fc08c1ef04e4d", "level": "level4", "llm_response": "```yml\nname: Labeler\non:\n  pull_request:\n   ", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: actions/labeler@v4.0.2\n      if: github.event.pull_request.head.repo.full_name == github.repository\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a51517fc08c1eee9273", "level": "level4", "llm_response": "```yml\nname: Typescript Types\n\non:\n  push:\n   ", "answer": "```yaml name: Typescript Types\non:\n  pull_request:\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint TS-Files\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 14\n\n      - run: npm install\n\n      - name: Lint TS-Files\n        run: npm run lint-ts\n\n  test-ts-types:\n    needs:\n      - lint\n    runs-on: ubuntu-latest\n    name: Test Typescript Types\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 12\n\n      - run: npm install\n\n      - name: Typings\n        run: npm run test-tsd```"}
{"id": "63c49a2633b087f6bde43c7c", "level": "level4", "llm_response": "```yaml\nname: Support requests\non:\n  branches:\n    - main", "answer": "```yaml name: 'Support requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\njobs:\n  support:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'repro-required'\n          issue-comment: >\n            :wave: @{issue-author}, sorry you're having an issue. As the issue template explains, we require that you provide a runnable example that reproduces your issue (please read the [issue template](https://raw.githubusercontent.com/react-native-google-signin/google-signin/master/.github/ISSUE_TEMPLATE/Custom.md)).\n\n            The reason is that maintainers do not have time to try reproduce bugs themselves. Please try to minimize the superfluous code and focus only on reproducing the bug.\n\n            Please create a new issue with this and we'll be happy to review it! If you're hitting a hard wall, you may consider [paid assistance](https://github.com/react-native-google-signin/google-signin/pull/861).\n          close-issue: true\n          lock-issue: false\n```"}
{"id": "63c49abb33b087f6bde478b7", "level": "level4", "llm_response": "```yml\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 43 7 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'```"}
{"id": "63c497bf1899db58864db96b", "level": "level4", "llm_response": "```yml\nname: Verify docs\n\non:\n  schedule:\n    -", "answer": "```yaml name: Verify docs\n\non:\n  schedule:\n    # every day at 9am\n    - cron: '0 9 * * *'\n\njobs:\n  verify:\n    name: Verify docs and spelling\n    runs-on: [ubuntu-latest]\n    steps:\n    - name: Check-out code\n      uses: actions/checkout@v3\n    - name: Set up Go using version from go.mod\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: 'go.mod'\n    - name: Run verify scripts\n      run: make verify\n    - name: Checking for broken Markdown links for main branch\n      uses: gaurav-nelson/github-action-markdown-link-check@v1\n      with:\n        folder-path: './docs'\n        file-path: './README.md, ./CHANGELOG.md, ./CONTRIBUTING.md, ./GOVERNANCE.md, ./MAINTAINERS.md, ./ROADMAP.md, ./SECURITY.md'\n        config-file: 'hack/.md_links_config.json'\n    - name: Markdownlint\n      run: |\n        sudo npm install -g markdownlint-cli@0.31.1\n        make markdownlint \n```"}
{"id": "63c49a471899db58864ec29a", "level": "level4", "llm_response": "```yml\nname: CodeQL Analysis\n\non:\n  push:\n   ", "answer": "```yaml name: CodeQL Analysis\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '0 8 * * *'\n\njobs:\n  analyze:\n    name: CodeQL Analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        id: checkout_repo\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        id: init_codeql\n        uses: github/codeql-action/init@v2\n        with:\n          queries: security-and-quality\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        id: analyze_codeql\n        uses: github/codeql-action/analyze@v2\n\n# Built with \u2764 by [Pipeline Foundation](https://pipeline.foundation)```"}
{"id": "63c496ba33b087f6bde2deab", "level": "level4", "llm_response": "```yml\nname: Release Drafter\non:\n  branch:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    if: github.repository == 'activeloopai/deeplake'\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a586fc19abdf9cb5781", "level": "level4", "llm_response": "```yml\n---\nname: publish-build\non:\n  release:\n   ", "answer": "```yaml name: publish-build\non:\n  release:\n    types: [released]\n\njobs:\n  build-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node and cache\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n      - name: Check release validity\n        run: sh .github/scripts/check-release.sh\n      - name: Install project dependencies\n        run: yarn install\n      - name: Build project\n        run: yarn build\n      - name: Create ZIP folder\n        uses: thedoctor0/zip-release@master\n        with:\n          filename: 'build.zip'\n          directory: 'build'\n      - name: Upload build to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: build/build.zip\n          tag: ${{ github.ref }}\n```"}
{"id": "63c497311899db58864d7f91", "level": "level4", "llm_response": "```yml\n---\nname: CLA\non:\n  branches:\n   ", "answer": "```yaml \nname: CLA\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request'\n        # Alpha Release\n        uses: hanxiao/github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: '.github/signatures/v1/cla.json'\n          path-To-cladocument: 'https://github.com/jina-ai/jinabox.js/blob/master/CLA.md'\n          # branch should not be protected\n          branch: 'cla'\n          whitelist: hanxiao,nan-wang,jina-bot,BingHo1013,alexcg1,imsergiy,YueLiu-jina,JoanFM,lusloher\n          empty-commit-flag: false\n          blockchain-storage-flag: false```"}
{"id": "63c49f771842bc13d77973e6", "level": "level4", "llm_response": "```yml\n---\nname: Pull Request Validation\non:\n  pull_request", "answer": "```yaml name: Pull Request Validation\n\non:\n  pull_request:\n    branches:\n      - trunk\n      - 'release/**'\n      - 'feature/**'\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - reopened\n      - synchronize\n      - edited\n\nenv:\n  LABELS: ${{ join( github.event.pull_request.labels.*.name, ' ' ) }}\n\njobs:\n  check-type-label:\n    name: Check [Type] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Type]' ) == false\n        run: exit 1\n  check-focus-label:\n    name: Check [Focus] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Focus]' ) == false && contains( env.LABELS, 'Infrastructure' ) == false\n        run: exit 1\n  check-milestone:\n    name: Check Milestone\n    runs-on: ubuntu-latest\n    steps:\n      - if: github.event.pull_request.milestone == null && contains( env.LABELS, 'no milestone' ) == false\n        run: exit 1\n```"}
{"id": "63c49eb6cbc73931bb1af2d4", "level": "level4", "llm_response": "```yml\n---\nname: Notify Downstream Projects\n\non:\n  push", "answer": "```yaml name: Notify Downstream Projects\non:\n  push:\n    branches: [ develop ]\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\njobs:\n  notify-downstream:\n    # Only respect triggers from our develop branch, ignore that of forks\n    if: github.repository == 'matrix-org/matrix-js-sdk'\n    continue-on-error: true\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - repo: vector-im/element-web\n            event: element-web-notify\n          - repo: matrix-org/matrix-react-sdk\n            event: upstream-sdk-notify\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify matrix-react-sdk repo that a new SDK build is on develop so it can CI against it\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.ELEMENT_BOT_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: ${{ matrix.event }}\n```"}
{"id": "63c496381e3364807577930d", "level": "level4", "llm_response": "```yml\n---\nname: Wrye Bash CI\n\non:\n ", "answer": "```yaml name: Wrye Bash CI\n\non: push\n\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout commit\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n        architecture: 'x64'\n    - name: Restore dependencies cache\n      uses: actions/cache@v3\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools wheel\n        python -m pip install -r requirements.txt\n    - name: Test Wrye Bash\n      run: |\n        python -m pytest\n    - name: Build Wrye Bash\n      # Note the configs - needed for build.py\n      run: |\n        git config --local user.name \"GitHub Actions\"\n        git config --local user.email \"github-action@users.noreply.github.com\"\n        python scripts/build.py --verbose\n    - name: Copy executable/license files\n      run: |\n        cp \"scripts/build/standalone/dist/Wrye Bash.exe\" Mopy\n        cp LICENSE.md Mopy/LICENSE.md\n#    - name: Create Apps folder # does not work\n#      run: mkdir Mopy/Apps\n    - name: Upload Standalone Build Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: ${{ format('Wrye Bash CI {0}.{1}', github.ref_name, github.sha) }}\n        path: |\n          Mopy/*\n          Mopy/LICENSE.md\n          !Mopy/**.py\n          !Mopy/**.pyw\n          !Mopy/**.pyd\n          !Mopy/**.bat\n          !Mopy/**.template\n          !Mopy/redist\n          !Mopy/__pycache__\n          !Mopy/bash/**.py\n          !Mopy/bash/__pycache__\n          !Mopy/bash/basher\n          !Mopy/bash/bosh\n          !Mopy/bash/brec\n          !Mopy/bash/env\n          !Mopy/bash/game\n          !Mopy/bash/gui\n          !Mopy/bash/patcher\n          !Mopy/bash/tests\n```"}
{"id": "63c49e83517fc08c1ef03f23", "level": "level4", "llm_response": "```yml\nname: release-petroleum\n\non:\n  event:\n", "answer": "```yaml name: release-petroleum\n\non: \n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Release Version' \n\njobs:\n  docker:\n    runs-on: ubuntu-20.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=focal\"\n            \"MACHINARIS_STREAM=latest\"\n            \"PETROLEUM_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n```"}
{"id": "63c49ecacbc73931bb1afb61", "level": "level4", "llm_response": "```yml\nname: Upgrade Python Requirements\non:\n  schedule:\n   ", "answer": "```yaml name: Upgrade Python Requirements\n\non:\n  schedule:\n    # will start the job at 01:30 UTC every Friday\n    - cron: \"30 1 * * 5\"\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: \"Target branch against which to create requirements PR\"\n        required: true\n        default: '$default-branch'\n\njobs:\n  call-upgrade-python-requirements-workflow:\n    uses: openedx/.github/.github/workflows/upgrade-python-requirements.yml@master\n    with:\n      branch: ${{ github.event.inputs.branch || '$default-branch' }}\n      # optional parameters below; fill in if you'd like github or email notifications\n      # user_reviewers: \"\"\n      # team_reviewers: \"\"\n      # email_address: \"\"\n      # send_success_notification: false\n    secrets:\n      requirements_bot_github_token: ${{ secrets.REQUIREMENTS_BOT_GITHUB_TOKEN }}\n      requirements_bot_github_email: ${{ secrets.REQUIREMENTS_BOT_GITHUB_EMAIL }}\n      edx_smtp_username: ${{ secrets.EDX_SMTP_USERNAME }}\n      edx_smtp_password: ${{ secrets.EDX_SMTP_PASSWORD }}\n```"}
{"id": "63c49717517fc08c1eed4a9a", "level": "level4", "llm_response": "```yml\nname: Update Prettier\n\non:\n  push:\n", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\n  workflow_dispatch: {}\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49fa5736e7f0ed8c6f75c", "level": "level4", "llm_response": "```yml\nname: Deploy Documentation\n\non:\n  push:\n    branches", "answer": "```yaml name: Deploy Documentation\n\non:\n  push:\n    branches:\n    - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n\n    - name: vuepress-deploy\n      uses: jenkey2011/vuepress-deploy@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        TARGET_REPO: OT-CONTAINER-KIT/redis-operator\n        TARGET_BRANCH: gh-pages\n        BUILD_SCRIPT: cd docs; yarn && yarn build\n        BUILD_DIR: src/.vuepress/dist/\n \n```"}
{"id": "63c49feb1899db58865101eb", "level": "level4", "llm_response": "```yaml\nname: Release Drafter\non:\n  branch:\n    -", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches: [ main ]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n          # config-name: my-config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c49db51899db5886501d95", "level": "level4", "llm_response": "```yml\nname: spring-reactive-groovy-dsl\n\non", "answer": "```yaml name: spring-reactive-groovy-dsl\n\non:\n  push:\n    paths:\n      - \"groovy-dsl/**\"\n    branches: [ master ]\n  pull_request:\n    paths:\n      - \"groovy-dsl/**\"\n    types:\n      - opened\n      - synchronize\n      - reopened\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n          fetch-depth: 0\n    - name: Set up JDK\n      uses: actions/setup-java@v3\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: 'maven'\n    - name: Start up databases via Docker Compose \n      run: |\n        docker-compose up -d mongodb\n        sleep 5\n        docker ps -a  \n    - name: Build with Maven\n      run: |\n        cd groovy-dsl\n        mvn -B package --file pom.xml\n```"}
{"id": "63c49ac5cbc73931bb195e22", "level": "level4", "llm_response": "```yml\nname: Build and Deploy Documentation\n\non:\n  push:\n", "answer": "```yaml name: Build and Deploy Documentation\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set release env\n        run: echo \"RELEASE_VERSION=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\n      - name: Set up python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Configure the git user\n        run: |\n          git config user.name \"versioning_user\"\n          git config user.email \"connaisseur@securesystems.dev\"\n      - name: Set up Python\n        run: |\n          pip install -r docs/requirements_docs.txt\n      - name: deploy\n        run: |\n          mike deploy --push --update-aliases ${RELEASE_VERSION} latest\n```"}
{"id": "63c49b76cbc73931bb19a77b", "level": "level4", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n\n    services:\n      postgres:\n        image: postgres:14-alpine\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n\n      redis:\n        image: redis:alpine\n        ports: ['6379:6379']\n\n    env:\n      DB_HOST: localhost\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      REDIS_URL: redis://localhost:6379/0\n      RAILS_ENV: test\n      DISABLE_SPRING: true\n      CI: true\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          bundler-cache: true\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3.5.1\n        with:\n          cache: yarn\n\n      - name: Install Yarn packages\n        run: bin/yarn install --frozen-lockfile\n\n      - name: Lint with RuboCop\n        run: bin/rubocop --parallel\n\n      - name: Run ESLint\n        run: bin/yarn lint\n\n      - name: Lint with SlimLint\n        run: bundle exec slim-lint .\n\n      - name: Setup PostgreSQL\n        run: bin/rails db:create\n\n      - name: Compile assets\n        run: bin/rails assets:precompile\n\n      - name: Run Ruby Tests\n        run: bin/rspec\n\n      - name: End-to-end tests\n        uses: cypress-io/github-action@v4\n        with:\n          start: bundle exec rails server\n          wait-on: http://localhost:3000\n          browser: chrome\n          record: true\n        env:\n          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CYPRESS_BASE_URL: http://localhost:3000\n          CYPRESS: true\n        if: env.CYPRESS_RECORD_KEY != null\n\n      - name: Check JS size limit\n        run: yarn size-limit\n\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: Cypress screenshots and videos\n          path: |\n            tmp/cypress_screenshots/\n            tmp/cypress_videos/\n          if-no-files-found: ignore\n\n  deploy:\n    runs-on: ubuntu-20.04\n\n    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Fetch tag annotations\n        # https://github.com/actions/checkout/issues/290\n        run: git fetch --tags --force\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build the production image\n        run: |\n          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})\n          export COMMIT_VERSION=$(git describe --always)\n          echo $GITHUB_SHA\n          echo $COMMIT_TIME\n          echo $COMMIT_VERSION\n          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .\n\n      - name: Push the image tagged as LATEST to the container registry\n        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:latest\n          docker push ghcr.io/${{ github.repository }}:latest\n\n      - name: Push the image tagged with version to the container registry\n        if: startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n          docker push ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n\n      - name: Send webhook to start deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n        if: env.DEPLOY_HOOK != null\n        run: curl -X POST ${{ env.DEPLOY_HOOK }}\n\n      - name: Notify Honeybadger about deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}\n        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null\n        uses: honeybadger-io/github-notify-deploy-action@v1\n        with:\n          api_key: ${{ secrets.HONEYBADGER_API_KEY }}\n```"}
{"id": "63c49eb21842bc13d77927ac", "level": "level4", "llm_response": "```yml\n---\nname: Nightly Vinix Rebuild\non:", "answer": "```yaml name: Nightly Vinix rebuild\n\n#on:\n#  schedule:\n#    - cron: '0 0 * * *'\n\njobs:\n  vinix-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install make curl git mercurial libarchive-tools xorriso -y\n\n      - name: Build distro\n        run: make distro-full\n\n      - name: Build ISO\n        run: make all\n\n      - name: Set TAG_DATE variable\n        run: echo \"TAG_DATE=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n\n      - name: Tag new nightly release\n        run: git tag nightly-$TAG_DATE && git push --tags\n\n      - name: Rename vinix.iso\n        run: mv vinix.iso vinix-nightly-$(date +'%Y%m%d').iso\n\n      - name: Create nightly release\n        uses: softprops/action-gh-release@v1\n        with:\n          name: Nightly build ${{ env.TAG_DATE }}\n          tag_name: nightly-${{ env.TAG_DATE }}\n          body: Image of an up to date Vinix nightly build.\n          files: |\n            vinix-nightly-*.iso\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a052b008460c1df53339", "level": "level4", "llm_response": "```yml\nname: Pull Request\n\non:\n  push:\n    branches", "answer": "```yaml name: Pull Request\non:\n  push:\n    paths:\n      - \"**.go\"\n    tags:\n      - v*\n    branches:\n      - master\n      - development\n  pull_request:\n    branches-ignore:\n      - dependabot/**\n\njobs:\n  checks:\n    name: Pull Request Checks\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, '[ci skip]') == false && contains(github.event.head_commit.message, '[skip ci]') == false\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      # - name: Run tests\n      #   run: make test\n\n      - name: Run GolangCI-Lint\n        uses: golangci/golangci-lint-action@v3.1.0\n        with:\n          version: latest\n          args: --tests=0 --timeout=30m\n\n      - name: Run Semgrep\n        run: |\n          python3 -m pip install semgrep\n          semgrep scan --config auto --dryrun -q --include \"**.go\"\n\n      - name: Cross-platform checks\n        uses: goreleaser/goreleaser-action@v3\n        with: \n          version: latest\n          args: build --skip-validate --rm-dist --snapshot --timeout=30m\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2```"}
{"id": "63c5c55aac4f2678a5bd5362", "level": "level4", "llm_response": "```yml\n---\nname: Code Scanning - Action\non: schedule", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  # push:\n  schedule:\n    - cron: '0 12 * * 0'\n\npermissions:\n  contents: read\n\njobs:\n  CodeQL-Build:\n\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/analyze to upload SARIF results\n    strategy:\n      fail-fast: false\n\n\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below).\n    #- name: Autobuild\n    #  uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    - name: Clean Install\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n      \n    - name: Build packages \n      run: npm run build\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49b791899db58864f3ba0", "level": "level4", "llm_response": "```yml\n---\nname: discussion-questions\non:\n  branch:\n", "answer": "```yaml name: discussion-questions\non:\n  discussion:\n    types: [created, answered]\njobs:\n  new_question:\n    if: github.event.action == 'created' && github.event.discussion.category.is_answerable\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :thinking: *{{ EVENT_PAYLOAD.discussion.user.login }} asked a question*\n\n            **{{ EVENT_PAYLOAD.discussion.title }}**\n            {{ EVENT_PAYLOAD.discussion.body }}\n\n            {{ EVENT_PAYLOAD.discussion.html_url }}\n\n  question_answered:\n    if: github.event.action == 'answered'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :tada: *{{ EVENT_PAYLOAD.answer.user.login }} answered a question*\n\n            **Q**: {{ EVENT_PAYLOAD.discussion.title }}\n            **A**: *{{ EVENT_PAYLOAD.answer.body }}*\n\n            {{ EVENT_PAYLOAD.answer.html_url }}\n```"}
{"id": "63c4992d6fc19abdf9cae027", "level": "level4", "llm_response": "```yml\n---\nname: Issue Labeler\non:\n  event:\n", "answer": "```yaml name: \"Issue Labeler\"\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: github/issue-labeler@v2.5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/issue-labeler.yml\n        #not-before: 2020-01-15T02:54:32Z\n        enable-versioned-regex: 0\n        #versioned-regex: 'issue_labeler_regex_version=(\\d+)'\n        body-missing-regex-label: 'broken-template'\n```"}
{"id": "63c49f746fc19abdf9cd63ff", "level": "level4", "llm_response": "```yml\n---\ntrigger:\n  branches:\n    - main\n  events", "answer": "```yaml ---\nname: s2i-mvn-gradle-pr\non:\n  pull_request:\n    paths:\n      - s2i-mvn-gradle/**\n      - .github/workflows/s2i-mvn-gradle-pr.yaml\njobs:\n  build:\n    env:\n      context: s2i-mvn-gradle\n      image_name: s2i-mvn-gradle\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49ab4517fc08c1eeebb47", "level": "level4", "llm_response": "```yml\nname: Tests\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n        test-type: [e2e, lint]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Run test (${{ matrix.test-type }})\n        run: 'npm run test:${{ matrix.test-type }}'\n        env:\n          CI: true\n```"}
{"id": "63c49db2b008460c1df42b9d", "level": "level4", "llm_response": "```yaml\nname: Upload Snapshot\n\non:\n  branches:\n    - master", "answer": "```yaml name: Upload Snapshot\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n\njobs:\n  verify:\n    name: latest-images\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 8.0.x\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: GPG_PASSPHRASE\n      - name: Assert Snapshot Version\n        run: |\n          ./mvnw clean install -Dmaven.test.skip=true\n          ./mvnw -q \\\n            -Dexec.executable=echo \\\n            -Dexec.args='${project.version}' \\\n            exec:exec | perl -ne 'die unless m/.*-SNAPSHOT/'\n      - name: Publish to Apache Maven Central\n        run: ./mvnw deploy\n        env:\n          OSSRH_USERNAME: ${{ secrets.SNAPSHOT_UPLOAD_USER }}\n          OSSRH_TOKEN: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}```"}
{"id": "63c49b7e33b087f6bde4c721", "level": "level4", "llm_response": "```yaml\nname: CI: Lint\n\non:\n  push:\n   ", "answer": "```yaml name: \"CI: Lint\"\n\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  lint:\n\n    runs-on: ubuntu-latest\n\n    container:\n      image: valalang/lint\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Lint\n      run: io.elementary.vala-lint -d .\n```"}
{"id": "63c49ecc33b087f6bde620ae", "level": "level4", "llm_response": "```yml\nname: Java CI with Maven for PRs\n\non:\n", "answer": "```yaml # This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Java CI with Maven for PRs\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Disabling shallow clone is recommended for improving relevancy of reporting with SonarCloud\n          fetch-depth: 0\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: 8\n      - name: Build with Maven\n        run: mvn --show-version --no-transfer-progress verify --file pom.xml -Pcoverage,cloudbees-oss-release -Dgpg.skip=true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499541842bc13d7770086", "level": "level4", "llm_response": "```yml\nname: Generate Roblox standard library\n\non:\n  push", "answer": "```yaml name: Generate Roblox standard library\r\non: [push, pull_request]\r\njobs:\r\n  generate:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v1\r\n    - name: Generate\r\n      run: cargo run --bin selene --verbose -- generate-roblox-std\r\n    - name: Upload\r\n      uses: actions/upload-artifact@v1\r\n      with:\r\n        name: roblox\r\n        path: roblox.yml```"}
{"id": "63c4a061cbc73931bb1ba06d", "level": "level4", "llm_response": "```yml\n---\nname: check-x-pack-winlogbeat\non:\n", "answer": "```yaml name: check-x-pack-winlogbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-winlogbeat.yml'\n      - 'x-pack/winlogbeat/**'\n      - 'winlogbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/winlogbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      uses: magefile/mage-action@v2\n      with:\n        args: check update\n        workdir: \"${{ env.BEAT_MODULE }}\"\n```"}
{"id": "63c4990ccbc73931bb18b0e2", "level": "level5", "llm_response": "```yml\nname: Test CI\non: pull_request\njobs:\n", "answer": "```yaml name: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n      - name: Install\n        run: |\n          npm install -g yarn\n          yarn\n        env:\n          CI: \"true\"\n      - name: Build\n        run: |\n          yarn build\n        env:\n          CI: \"true\"\n      - name: Check Circular Dependencies\n        run: |\n          yarn circular\n        env:\n          CI: \"true\"\n      - name: Test\n        run: |\n          yarn test\n        env:\n          CI: \"true\"\n      - name: Bench\n        run: |\n          node packages/core/build/examples/bench/queue.js\n        env:\n          CI: \"true\"\n```"}
{"id": "63c4a1971842bc13d77a4d18", "level": "level5", "llm_response": "```yml\nname: Tribble\n\non:\n  branches:\n    -", "answer": "```yaml name: Tribble\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: arctic-hen7/tribble-bot@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a15933b087f6bde71f6b", "level": "level5", "llm_response": "```yml\nname: Create a Release\non:\n  push:\n   ", "answer": "```yaml name: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc*'\n\njobs:\n  release:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get the version\n        id: get_version\n        run: |\n          echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n          echo \"TRIMMED_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n\n      - name: REUSE Compliance Check\n        uses: fsfe/reuse-action@v1\n        with:\n          args: spdx -o zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: upload-results\n        uses: actions/upload-artifact@v3\n        continue-on-error: True\n        with:\n          name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: Create empty release notes body\n        run: |\n          echo \"TODO: add release overview and notes link\" > release-notes.txt\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Zephyr ${{ steps.get_version.outputs.TRIMMED_VERSION }}\n          body_path: release-notes.txt\n          draft: true\n          prerelease: true\n\n      - name: Upload Release Assets\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_content_type: text/plain\n```"}
{"id": "63c49f7a1e336480757b40f4", "level": "level5", "llm_response": "```yml\nname: Lint\non:\n  pull_request:\n   ", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire ethermint repository This workflow is\n# run on every pull request and push to main The `golangci` will pass without\n# running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: Run golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      # Required: setup-go, for all versions v3.0.0+ of golangci-lint\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.3\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.\n          version: v1.46.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        # Check only if there are differences in the source code\n        if: \"env.GIT_DIFF\"\n  markdown-lint:\n    name: Run markdown-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            docs/**/*.md\n            x/**/*.md\n            README.md\n      - uses: nosborn/github-action-markdown-cli@v3.2.0\n        with:\n          files: .\n          config_file: .markdownlint.yml\n          ignore_path: .markdownlintignore\n        # Check only if there are differences in the source code\n        if: env.GIT_DIFF\n```"}
{"id": "63c494e18052faa2781adf47", "level": "level5", "llm_response": "```yaml\n---\nname: Lint I18N\non:\n  push", "answer": "```yaml name: Lint I18N\n\non:\n  push:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.js'\n      - '**.cjs'\n      - '**.ts'\n      - '**/package.json'\n      - 'package-lock.json'\n      - 'web-stories.php'\n      - 'includes/**.php'\n      - '.github/workflows/lint-i18n.yml'\n\npermissions:\n  contents: read\n\n# Cancels all previous workflow runs for pull requests that have not completed.\nconcurrency:\n  # The concurrency group contains the workflow name and the (target) branch name.\n  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Install WP-CLI\n        run: |\n          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n          chmod +x wp-cli.phar\n          mkdir -p bin\n          mv wp-cli.phar bin/wp\n          echo \"${PWD}/bin\" >> $GITHUB_PATH\n\n      - name: WP-CLI Info\n        run: wp cli info\n\n      - name: Install latest version of i18n-command\n        run: wp package install wp-cli/i18n-command:dev-main\n\n      - name: List packages\n        run: wp package list\n\n      - name: Setup Node\n        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516\n        with:\n          node-version-file: '.nvmrc'\n          cache: npm\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@e04e1d97f0c0481c6e1ba40f8a538454fe5d7709\n        with:\n          php-version: '8.0'\n          coverage: none\n          tools: composer\n\n      - name: Install dependencies\n        run: |\n          npm ci\n        env:\n          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true\n\n      - name: Install PHP dependencies\n        uses: ramsey/composer-install@f680dac46551dffb2234a240d65ae806c2999dd6\n        with:\n          composer-options: '--prefer-dist --no-progress --no-interaction'\n\n      - name: Build plugin\n        run: npm run build:js\n\n      - name: Bundle regular version\n        run: npm run workflow:build-plugin\n\n      # Check if as many strings as expected were found.\n      # Fail job if `wp i18n make-pot` returns any warnings.\n      # Some false positive warnings are removed due to a bug in the string extraction.\n      # That's why this step is unfortunately a bit more complex.\n      # See https://github.com/wp-cli/i18n-command/issues/154\n      - name: Generate POT file\n        run: |\n          OUTPUT=$((wp i18n make-pot build/web-stories build/web-stories.pot) 2>&1 >/dev/null)\n\n          HAS_ERROR=false\n\n          EXPECTED_NUMBER_OF_STRINGS=1000\n          NUMBER_OF_FOUND_STRINGS=$(grep -o msgstr build/web-stories.pot | wc -l | xargs)\n\n          if (( \"$NUMBER_OF_FOUND_STRINGS\" < \"$EXPECTED_NUMBER_OF_STRINGS\" )); then\n          HAS_ERROR=true\n            echo \"String extraction found only $NUMBER_OF_FOUND_STRINGS translatable strings. Expected at least $EXPECTED_NUMBER_OF_STRINGS.\"\n          fi\n\n          IFS=$'\\n'\n          declare -a WARNINGS=($OUTPUT)\n          unset IFS\n\n          for WARNING in \"${WARNINGS[@]}\"; do\n            # Filter false positives.\n            if [[ $WARNING == *\"translator comment\"* ]] && [[ $WARNING != *\"%s\"* ]]; then\n              continue\n            fi\n\n            HAS_ERROR=true\n\n          \techo $WARNING\n          done\n\n          if [[ \"$HAS_ERROR\" = true ]]; then\n            exit 1\n          fi\n```"}
{"id": "63c499881e3364807578e735", "level": "level5", "llm_response": "```yml\nname: Deploy to WordPress.org\non:\n  branch:\n", "answer": "```yaml name: Deploy to WordPress.org\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  tag:\n    name: New tag\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: WordPress Plugin Deploy\n        uses: 10up/action-wordpress-plugin-deploy@master\n        env:\n          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}\n          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}\n```"}
{"id": "63c498546fc19abdf9ca87b3", "level": "level5", "llm_response": "```yml\nname: Build And Test, NETCORE\non:\n ", "answer": "```yaml # Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\n# .NET CLI: https://docs.microsoft.com/dotnet/core/tools/\n# Description: The purpose of this workflow is to compile and run unit tests.\n\nname: Build And Test, NETCORE\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build-test-NETCORE:\n\n    runs-on: ${{ matrix.os }}\n\n    env:\n      SOLUTION: ./NETCORE/ApplicationInsights.AspNetCore.sln\n      TEST_RESULTS_DIRECTORY: ${{ github.workspace }}/TestResults\n\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        framework: [net452, net462, net472, net480, net481, netcoreapp3.1, net6.0, net7.0]\n        include: \n          - os: ubuntu-latest\n            args: \"--filter TestCategory!=WindowsOnly\"\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup dotnet\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: |\n            3.1.x\n            6.0.x\n\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '7.0.x'\n        include-prerelease: true\n\n    - name: Restore\n      run: dotnet restore ${{ env.SOLUTION }}\n\n    - name: Build\n      run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore\n\n    - name: Test\n      id: test1\n      continue-on-error: true\n      run: dotnet test ${{ env.SOLUTION }} --framework ${{ matrix.framework }} --configuration Release --no-build --results-directory ${{ env.TEST_RESULTS_DIRECTORY }} --logger:\"console;verbosity=detailed\" --logger:\"trx;logfileprefix=testResults_\" ${{ matrix.args }}\n\n    - name: Retry tests\n      if: steps.test1.outcome=='failure'\n      run: pwsh -f ./.scripts/build_RetryTests.ps1 -TestResultsDirectory ${{ env.TEST_RESULTS_DIRECTORY }} -WorkingDirectory ${{ github.workspace }}\n```"}
{"id": "63c49c5933b087f6bde52309", "level": "level5", "llm_response": "```yml\nname: TagBot\n\non:\n  issues:\n    -", "answer": "```yaml name: TagBot\non:\n issue_comment:\n    types:\n      - created\n workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5ecbc73931bb1a68c1", "level": "level5", "llm_response": "```yaml\nname: Release\non:\n  branch: main\njobs:\n", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - r[0-9]*\n\njobs:\n  release:\n    uses: evanchooly/workflows/.github/workflows/release.yml@master\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n      MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}\n      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b11899db58865154dc", "level": "level5", "llm_response": "```yml\nname: Node-CI\n\non:\n  pull_request:\n", "answer": "```yaml name: Node-CI\n\non:\n  pull_request: ~\n  push:\n    branches: [main, changeset-release/*]\n\njobs:\n  node-tests:\n    runs-on: ubuntu-latest\n    name: 'Test (Node ${{ matrix.node-version }}, React ${{ matrix.react-version }})'\n    strategy:\n      fail-fast: false\n      matrix:\n        # The action will first check the local cache for a semver match.\n        # If unable to find a specific version in the cache,\n        # the action will attempt to download a version of Node.js.\n        # It will pull LTS versions from node-versions releases and on miss\n        # or failure will fall back to the previous behavior of downloading\n        # directly from node dist.\n        # https://github.com/actions/setup-node\n        node-version: ['14', '16']\n        react-version: ['17', '18']\n    timeout-minutes: 15\n\n    steps:\n      - uses: actions/checkout@v3\n        name: Checkout\n\n      - uses: actions/setup-node@v3\n        name: Use Node.js ${{ matrix.node-version }}\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'yarn'\n          check-latest: true\n\n      - uses: actions/cache@v3\n        name: Restore loom cache\n        with:\n          path: |\n            .loom\n            packages/*/build/ts\n            packages/*/build/*.tsbuildinfo\n          key: ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-node${{ matrix.node-version }}-loom-v1-\n\n      - name: \ud83d\udce6 Install dependencies\n        run: yarn --frozen-lockfile\n\n      - name: \ud83d\udd28 Build\n        run: yarn build\n\n      - name: \ud83d\udc85\ud83c\udffc Lint\n        run: |\n          yarn lint\n          yarn ci:lint-docs\n\n      - name: Unit tests\n        run: yarn test \"^(?:(?!(address|react-server)).)*$\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n\n      - name: E2E tests\n        run: yarn test --debug \"(address|react-server)\"\n        env:\n          REACT_VERSION: ${{ matrix.react-version}}\n```"}
{"id": "63c4a04c736e7f0ed8c73b97", "level": "level5", "llm_response": "```yaml\nname: Notify Comments on Issues\non:\n  pull_request:\n", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Notify Comments on Issues\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow on comment events on pending response issues\n  issue_comment:\n    types: [created]\n\n# Limit the GITHUB_TOKEN permissions\npermissions: {}\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"notify\"\n  notify:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    if: ${{ !github.event.issue.pull_request && !contains(fromJSON('[\"palpatim\", \"brennanMKE\", \"lawmicha\", \"harsh62\", \"thisisabhash\", \"ameter\", \"royjit\", \"atierian\", \"ukhan-amazon\", \"ruisebas\", \"phantumcode\"]'), github.event.comment.user.login) }}\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Runs a single command using the runners shell\n      - name: Run webhook curl command\n        env:\n          WEBHOOK_URL: ${{ secrets.SLACK_COMMENT_WEBHOOK_URL }}\n          COMMENT: ${{toJson(github.event.comment.body)}}\n        shell: bash\n        run: echo $COMMENT | sed \"s/\\\\\\n/. /g; s/\\\\\\r//g; s/[^a-zA-Z0-9 &().,:]//g\" | xargs -I {} curl -s POST \"$WEBHOOK_URL\" -H \"Content-Type:application/json\" --data '{\"comment\":\"{}\", \"commentUrl\":\"${{github.event.comment.html_url}}\", \"user\":\"${{github.event.comment.user.login}}\"}'\n```"}
{"id": "63c496df1842bc13d77600b8", "level": "level5", "llm_response": "```yml\nname: Tools\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tools\n\non:\n   push:\n    branches: [ master ]\n   pull_request:\n    branches: [ master ]\n\njobs:\n   build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3.0.2\n      with:\n        dotnet-version: 6.0.x\n        \n    - name: Build FileAnalyzer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileAnalyzer/\n        \n    - name: Build FileExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.FileExtractor/\n        \n    - name: Build JsonSerializer\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.JsonSerializer/\n      \n    - name: Build SystemTester\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.SystemTester/\n      \n    - name: Build TypeTreeExtractor\n      run: dotnet build /p:Configuration=Release\n      working-directory: ./AssetRipper.Tools.TypeTreeExtractor/\n      ```"}
{"id": "63c499c41842bc13d7772cde", "level": "level5", "llm_response": "```yaml\nname: PR Reviewer Checklist\non:\n  event:\n   ", "answer": "```yaml name: PR Reviewer Checklist\n\non: pull_request_review\n\njobs:\n  checklist:\n    runs-on: ubuntu-latest\n    if: github.actor != 'OSBotify'\n    steps:\n      - name: contributorChecklist.js\n        uses: Expensify/App/.github/actions/javascript/contributorChecklist@main\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CHECKLIST: 'reviewer'\n```"}
{"id": "63c499aa6fc19abdf9cb1361", "level": "level5", "llm_response": "```yml\n---\nname: Checks\non:\n  push:\n    branches", "answer": "```yaml name: Checks\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  NODE_VERSION: '16'\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    types: [\n        synchronize, # PR was updated\n        opened, # PR was open\n        reopened, # PR was closed and is now open again\n        ready_for_review, # PR was converted from draft to open\n      ]\n\njobs:\n  checks:\n    name: Checks\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          token: ${{ env.GITHUB_TOKEN }}\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ env.NODE_VERSION }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Install Dependencies\n        run: npm ci --legacy-peer-deps\n\n      - name: Check Docs\n        run: npm run check-docs\n\n      - name: Check Typing\n        run: npm run check-typing\n\n      - name: Check Formatting\n        run: npm run check-formatting\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Check Prepack\n        run: npm run prepack\n```"}
{"id": "63c497c31842bc13d7765b0d", "level": "level5", "llm_response": "```yml\nname: CI Switch/libnx\non:\n  push:\n", "answer": "```yaml name: CI Switch/libnx\n\non:\n  push:\n  pull_request:\n  repository_dispatch:\n    types: [run_build]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container: \n      image: git.libretro.com:5050/libretro-infrastructure/libretro-build-libnx-devkitpro:latest\n      options: --user root\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Compile RA\n      run: |\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) clean\n        make -f Makefile.libnx -j$(getconf _NPROCESSORS_ONLN) HAVE_STATIC_DUMMY=1\n    - name: Get short SHA\n      id: slug\n      run: echo \"::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)\"\n    \n    - uses: actions/upload-artifact@v3\n      with:\n        name: RA-libnx-dummy-${{ steps.slug.outputs.sha8 }}\n        path: |\n          retroarch_switch.nro\n```"}
{"id": "63c4a19633b087f6bde73627", "level": "level5", "llm_response": "```yml\nname: Package Trigger Scheduler\non:\n  - push:\n", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '10 7 * * 2'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-netbootxyz/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-netbootxyz/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for netbootxyz** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-netbootxyz/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c497e61e3364807578414d", "level": "level5", "llm_response": "```yml\n---\nname: Continuous integration\non:\n  push:\n   ", "answer": "```yaml #-----------------------------------------------------------------------------\n#\n#  TSDuck - The MPEG Transport Stream Toolkit\n#  Copyright (c) 2005-2022, Thierry Lelegard\n#  All rights reserved.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are met:\n#\n#  1. Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n#  THE POSSIBILITY OF SUCH DAMAGE.\n#\n#-----------------------------------------------------------------------------\n#\n#  GitHub Actions configuration file : Continuous Integration\n#\n#-----------------------------------------------------------------------------\n\nname: Continuous integration\n\n# Trigger the workflow on push or pull request, for master branch only.\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n\n# Build on Ubuntu, macOS and Windows, using C++11 (C++14 on Windows) and C++20 levels of standards.\njobs:\n  build_unix:\n    strategy:\n      fail-fast: false\n      matrix:\n        # ubuntu-latest is currently ubuntu-20.04, too old for C++20, force ubuntu-22.04.\n        os: [ubuntu-22.04, macos-latest]\n        compiler: [gcc, clang]\n        std: [11, 20]\n        include:\n        - os: ubuntu-22.04\n          compiler: clang\n          llvm: true\n        - os: macos-latest\n          # It has been noted on GitHub macOS runners that the host name can change\n          # between steps or even the middle of a step. This breaks the naming scheme\n          # of the build directory for binaries. As a consequence, we force BINDIR=bin.\n          bindir: bin\n        exclude:\n        - os: macos-latest\n          compiler: gcc\n          # Don't use gcc on macOS.\n    name: Build on ${{ matrix.os }} with ${{ matrix.compiler }}, C++${{ matrix.std }}\n    runs-on: ${{ matrix.os }}\n    env:\n      LLVM: ${{ matrix.llvm }}\n      BINDIR: ${{ matrix.bindir }}\n      CXXFLAGS_STANDARD: -std=c++${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        ${{ matrix.compiler }} --version\n        scripts/java-config.sh\n    - name: Build TSDuck\n      run: make -j5\n    - name: Check built version\n      run: make show-version\n    - name: Run unitary tests\n      run: make test\n    - name: Download test suite\n      run: |\n        mkdir -p ../tsduck-test\n        curl -s -L https://github.com/tsduck/tsduck-test/tarball/master | tar xz --strip 1 -C ../tsduck-test\n    - name: Run test suite\n      run: |\n        make test-suite && status=$? || status=$?\n        cd ../tsduck-test\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_windows:\n    strategy:\n      fail-fast: false\n      matrix:\n        target: [Win64, Win32]\n        configuration: [Release]\n        std: [14, 20]\n        include:\n        - target: Win64\n          suffix: x64\n          testopt: --dev\n        - target: Win32\n          suffix: Win32\n          testopt: --dev32\n        exclude:\n        - target: Win32\n          std: 20\n    name: Build on ${{ matrix.target }} with VC++, C++${{ matrix.std }}\n    runs-on: windows-latest\n    env:\n      STDCPP: stdcpp${{ matrix.std }}\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.ps1 -GitHubActions -NoDoxygen -NoPause\n    - name: Dependencies check\n      run: |\n        Write-Output \"Path=${env:Path}\"\n        python --version\n    - name: Build TSDuck\n      run: |\n        scripts/build.ps1 -${{ matrix.target }} -${{ matrix.configuration }} -Parallel 5 -NoLowPriority -NoPause\n        Get-ChildItem bin/${{ matrix.configuration }}-${{ matrix.suffix }}\n    - name: Check built version\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsversion.exe --version=all\n    - name: Check plugins list\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/tsp.exe --list\n    - name: Run unitary tests\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsduckdll.exe\n    - name: Run unitary tests (static)\n      run: |\n        bin/${{ matrix.configuration }}-${{ matrix.suffix }}/utests-tsducklib.exe\n    - name: Download test suite\n      run: |\n        $ProgressPreference = 'SilentlyContinue'\n        Invoke-WebRequest -UseBasicParsing -Uri https://github.com/tsduck/tsduck-test/archive/master.zip -OutFile test.zip\n        Expand-Archive test.zip -DestinationPath . -Force\n        Move-Item tsduck-test-master ../tsduck-test -Force\n    - name: Run test suite\n      shell: bash\n      run: |\n        cd ../tsduck-test\n        ./run-all-tests.sh ${{ matrix.testopt }} && status=$? || status=$?\n        for f in $(find tmp -name '*.diff'); do\n            echo \"==== $f\";\n            cat \"$f\"\n        done\n        exit $status\n\n  build_doxygen:\n    name: Doxygen documentation\n    # ubuntu-latest is currently ubuntu-20.04, try to grab a more recent version of doxygen.\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@master\n    - name: Install dependencies\n      run: |\n        scripts/install-prerequisites.sh\n        doxygen --version\n    - name: Build TSDuck documentation\n      run: |\n        make doxygen\n```"}
{"id": "63c496ce517fc08c1eed2f51", "level": "level5", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [17.8]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm install\n    - run: npm run build\n    - run: npm run test\n    - name: Codecov\n      uses: codecov/codecov-action@v3.1.0\n```"}
{"id": "63c4967d6fc19abdf9c9c47c", "level": "level5", "llm_response": "```yml\nname: Build and deploy to GitHub Pages\n\non:\n ", "answer": "```yaml name: Build and deploy to GitHub Pages\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v2.3.1\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm ci\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@4.1.0\n        with:\n          branch: gh-pages\n          folder: dist\n```"}
{"id": "63c49df2cbc73931bb1aa4e2", "level": "level5", "llm_response": "```yml\nname: Node Publish Package\n\non:\n  release:\n   ", "answer": "```yaml name: Node Publish Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - uses: actions/setup-node@v2.2.0\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49d2f1842bc13d7788992", "level": "level5", "llm_response": "```yml\nname: Continuous Integration\n\non:\n  push:\n    branches", "answer": "```yaml name: Continuous Integration\non:\n  push:\n    branches: [ main ]\n\njobs:\n  snap:\n    uses: ./.github/workflows/snap.yml\n    with:\n      deploy: true\n      channel: edge\n    secrets: inherit\n\n  matrix:\n    uses: ./.github/workflows/matrix.yml\n\n  fuzzing:\n    permissions:\n      actions: read # to fetch the artifacts (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n      contents: read # to clone the repo (google/oss-fuzz/infra/cifuzz/actions/run_fuzzers)\n\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Build Fuzzers\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'fwupd'\n        fuzz-seconds: 150\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v3\n      if: failure() && steps.build.outcome == 'success'\n      with:\n        name: artifacts\n        path: ./out/artifacts\n\n```"}
{"id": "63c497a01842bc13d7764d6f", "level": "level5", "llm_response": "```yml\nname: Rebuild LLVM 12.0\non:\n", "answer": "```yaml # Copyright 2022 Intel Corporation\n# SPDX-License-Identifier: BSD-3-Clause\n\nname: Rebuild LLVM 12.0\n\non:\n  push:\n    branches:\n      - main\n      - '**rebuild_llvm**'\n    paths:\n      - \"llvm_patches/*12_0*\"\n      - \"alloy.py\"\n      - \".github/workflows/rebuild-llvm12.yml\"\n  workflow_dispatch:\n\njobs:\n  llvm12:\n    uses: ./.github/workflows/reusable.rebuild.yml\n    with:\n      version: '12.0'\n      full_version: '12.0.1'\n      ubuntu: '18.04'\n      vs_generator: 'Visual Studio 16 2019'\n      vs_version_str: 'vs2019'\n```"}
{"id": "63c498e633b087f6bde3bbe1", "level": "level5", "llm_response": "```yml\n---\nname: Backport Assistant Runner\n\non:\n  pull", "answer": "```yaml ---\nname: Backport Assistant Runner\n\non:\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n\njobs:\n  backport:\n    if: github.event.pull_request.merged\n    runs-on: ubuntu-latest\n    container: hashicorpdev/backport-assistant:0.2.3\n    steps:\n      - name: Backport changes to stable-website\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>website)\"\n          BACKPORT_TARGET_TEMPLATE: \"stable-{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n      - name: Backport changes to targeted release branch\n        run: |\n          backport-assistant backport -merge-method=squash -automerge\n        env:\n          BACKPORT_LABEL_REGEXP: \"backport/(?P<target>\\\\d+\\\\.\\\\d+\\\\.[+\\\\w]+)\"\n          BACKPORT_TARGET_TEMPLATE: \"release/{{.target}}\"\n          GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}\n```"}
{"id": "63c4a1a11842bc13d77a50d6", "level": "level5", "llm_response": "```yml\nname: build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: Build\n\n    strategy:\n      matrix:\n        os:\n          - macos-latest\n          - ubuntu-latest\n          - windows-latest\n        browser:\n          - ChromeHeadless\n          - FirefoxHeadless\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      - name: Setup node\n        uses: actions/setup-node@v3\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Build\n        run: npm run build --if-present\n\n      - name: Test\n        run: npm test -- --browsers ${{ matrix.browser }}\n\n      - name: Diff\n        run: git diff --exit-code\n```"}
{"id": "63c4a17bb008460c1df5aa2b", "level": "level5", "llm_response": "```yaml\nname: CloseStaleIssue\non:\n  schedule:\n   ", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path\n\nname: CloseStaleIssue\n\non:\n   schedule: \n       - cron: '1 15 1/2 * *'\n       \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    steps:\n    - name: Close issues of hosts label\n      uses: actions/github-script@0.4.0\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          let response = await github.issues.listForRepo({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            state: 'open'\n          });\n          let data = response['data'];\n          \n          data.forEach(function(issue){\n            var labels = issue['labels'];\n            var is2Deal = true;\n            for(var i=0,l=labels.length;i<l;i++){\n                if(labels[i]['name'] == 'pending' || labels[i]['name'] == 'help wanted' || labels[i]['name'] == 'instruction'){\n                    is2Deal = false;\n                    break;\n                }\n            }\n            if(is2Deal){\n                var updated_at = new Date(issue['updated_at']);\n                var time_now = new Date();\n                var deta = time_now.getTime() - updated_at.getTime();\n                console.log('deta: ' + deta);\n                if(deta < 1000*60*60*24*30){\n                    is2Deal = false;\n                }   \n            }\n            if(is2Deal){\n                var id = issue['number'];\n                github.issues.createComment({\n                    owner: context.repo.owner,\n                    repo: context.repo.repo,\n                    issue_number: id,\n                    body: '\u7531\u4e8e\u957f\u671f\u6ca1\u6709\u72b6\u6001\u66f4\u65b0\uff0c\u8be5\u95ee\u9898\u81ea\u52a8\u5173\u95ed\u3002\u5982\u6709\u9700\u8981\u53ef\u91cd\u65b0\u6253\u5f00\u3002'\n                });\n                github.issues.update({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  issue_number: id,\n                  state: 'closed'\n                });\n            }                \n          });\n\n    \n\n\n```"}
{"id": "63c497ab1899db58864db0f4", "level": "level5", "llm_response": "```yml\n---\nname: release\ndescription: Release workflow\njobs:\n", "answer": "```yaml ---\n# https://github.com/marketplace/actions/actions-tagger\nname: release\n\n\"on\":\n  release:\n    types: [published, edited]\n  workflow_dispatch:\n\njobs:\n  actions-tagger:\n    runs-on: windows-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n```"}
{"id": "63c49b8f517fc08c1eef11c2", "level": "level5", "llm_response": "```yml\nname: Release Drafter\non:\n  push:\n   ", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f1833b087f6bde640c7", "level": "level5", "llm_response": "```yml\nname: Integration tests\non:\n  event:\n    type", "answer": "```yaml name: Integration tests\n\non:\n  workflow_dispatch:\n    inputs:\n      test:\n        description: the integration test to run\n        default: fairscale_benchmarks\n        required: true\n        type: choice\n        options:\n          - fairscale_benchmarks\n      cluster:\n        description: the beaker cluster to run the test on\n        default: ai2/tango-integration-tests\n        required: true\n        type: choice\n        options:\n          - ai2/tango-integration-tests\n          - ai2/allennlp-cirrascale\n  # Uncomment this trigger to test changes on a pull request.\n  # You also have to uncomment the lines below that mention 'for pull request checks'\n  # pull_request:\n  #   branches:\n  #     - '*'\n\njobs:\n  run_test:\n    name: ${{ github.event.inputs.test }}\n    # name: fairscale_benchmarks  # for pull request checks\n    runs-on: [ubuntu-latest]\n    timeout-minutes: 60\n    env:\n      TEST_NAME: ${{ github.event.inputs.test }}\n      # TEST_NAME: fairscale_benchmarks  # for pull request checks\n      BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN }}\n      BEAKER_WORKSPACE: ai2/tango-integration-tests\n      BEAKER_CLUSTER: ${{ github.event.inputs.cluster }}\n      # BEAKER_CLUSTER: ai2/allennlp-cirrascale  # for pull request checks\n      IMAGE_NAME: petew/tango-testing\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Validate inputs\n        run: |\n          # The 'test' input should be a directory in `integration_tests/`\n          test -d \"integration_tests/${TEST_NAME}\"\n\n      - name: Determine current commit SHA (pull request)\n        if: github.event_name == 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=${{ github.event.pull_request.head.sha }}\" >> $GITHUB_ENV\n\n      - name: Determine current commit SHA (push)\n        if: github.event_name != 'pull_request'\n        run: |\n          echo \"COMMIT_SHA=$GITHUB_SHA\" >> $GITHUB_ENV\n\n      - name: Install beaker client\n        shell: bash\n        run: |\n          mkdir -p \"$HOME/bin\"\n\n          # Download and install from latest GitHub release.\n          curl -s https://api.github.com/repos/allenai/beaker/releases/latest \\\n            | grep 'browser_download_url.*linux' \\\n            | cut -d '\"' -f 4 \\\n            | wget -qi - \\\n          && tar -xvzf beaker_linux.tar.gz -C \"$HOME/bin\"\n\n          # Add to path.\n          echo \"$HOME/bin\" >> \"$GITHUB_PATH\"\n\n      - name: Verify beaker install\n        run: |\n          beaker account whoami\n\n      - name: Create beaker experiment config\n        run: |\n          cat >beaker_config.yml << EOL\n          version: v2-alpha\n          description: ${{ env.TEST_NAME }}\n          tasks:\n            - name: test\n              image:\n                beaker: ${{ env.IMAGE_NAME }}\n              command: [\"/entrypoint.sh\", \"integration_tests/${{ env.TEST_NAME }}/run.sh\"]\n              envVars:\n                - name: COMMIT_SHA\n                  value: $COMMIT_SHA\n                - name: WANDB_API_KEY\n                  secret: WANDB_API_KEY\n                - name: FILE_FRIENDLY_LOGGING\n                  value: \"true\"\n                - name: TOKENIZERS_PARALLELISM  # set this to avoid warnings\n                  value: \"true\"\n                - name: PYTHONUNBUFFERED\n                  value: \"true\"\n              result:\n                path: '/results'\n              resources:\n                gpuCount: 4\n              context:\n                cluster: ${{ env.BEAKER_CLUSTER }}\n                priority: normal\n          EOL\n          cat beaker_config.yml\n\n      - name: Submit beaker job\n        run: |\n          TIMESTAMP=$(date +%H%M%S)\n          EXPERIMENT=$(beaker experiment create beaker_config.yml --workspace $BEAKER_WORKSPACE --name \"${TEST_NAME}-${{ github.run_number }}-${TIMESTAMP}\" | awk '{print $2}')\n          if [ -z \"$EXPERIMENT\" ]; then\n            exit 1\n          else\n            echo \"EXPERIMENT=$EXPERIMENT\" >> $GITHUB_ENV\n            echo \"Experiment $EXPERIMENT submitted. See progress at https://beaker.org/ex/$EXPERIMENT\"\n          fi\n\n      - name: Wait for job to finish\n        run: |\n          beaker experiment await $EXPERIMENT test finalized --timeout 60m\n          # Check the job's exit code.\n          test $(beaker experiment get $EXPERIMENT --format=json | jq '.[0].jobs[0].status.exitCode') -eq 0\n\n      - name: Get logs\n        if: always()\n        run: |\n          # EXPERIMENT could be empty if the submission step failed.\n          # We'll exit right away if that's the case.\n          if [ -z \"$EXPERIMENT\" ]; then\n            echo \"No logs to show\"\n            exit 0\n          fi\n\n          # Download logs from beaker.\n          beaker experiment results $EXPERIMENT --prefix out.log --output results\n\n          # If the experiment failed during startup, there might not be any logs.\n          if [ -f results/test/out.log ]; then\n            echo \"\"\n            echo \">>> Logs:\"\n            echo \"\"\n            cat results/test/out.log\n          else\n            echo \"No logs to show\"\n          fi\n\n      - name: Stop job\n        if: cancelled()\n        run: |\n          if [ ! -z \"$EXPERIMENT\" ]; then\n            beaker experiment stop $EXPERIMENT\n          fi\n```"}
{"id": "63c497d86fc19abdf9ca540a", "level": "level5", "llm_response": "```yml\nname: Tools\non:\n  push:\n    branches:\n", "answer": "```yaml name: Tools\n\non:\n push:\n  paths:\n  - '.github/workflows/tools.undatui.yml'\n  - 'Tools/UndatUI/src/**'\n\ndefaults:\n run:\n  shell: bash\n\nenv:\n DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n\n UndatUI:\n  runs-on: windows-2019\n  steps:\n\n  - name: Clone\n    uses: actions/checkout@v3\n\n  - name: Build\n    run:  |\n          :\n          MSBUILD_EXE=\"$(\"/c/Program Files (x86)/Microsoft Visual Studio/Installer/vswhere.exe\" -latest -requires Microsoft.Component.MSBuild -find MSBuild/**/Bin/MSBuild.exe)\"\n          \"$MSBUILD_EXE\" Tools/UndatUI/src/undat.sln -p:Configuration=Release\n```"}
{"id": "63c4a07ab008460c1df54484", "level": "level5", "llm_response": "```yml\nname: Docker Build\n\non:\n  release:\n    published", "answer": "```yaml name: 'Docker Build'\non:\n  release:\n    types: [released]\n\njobs:\n  build:\n    name: Dispatch release event to tobybatch\n    runs-on: ubuntu-latest\n    steps:\n      - name: Emit repository_dispatch\n        uses: mvasigh/dispatch-action@1.1.6\n        with:\n          token: ${{ secrets.DOCKER_ACCESS_TOKEN }}\n          repo: kimai2\n          owner: tobybatch\n          event_type: kimai_release\n```"}
{"id": "63c49a5acbc73931bb1933d0", "level": "level5", "llm_response": "```yaml\nkind: Workflow\nname: Kind Cluster E2E tests\n", "answer": "```yaml name: Kind Cluster E2E tests\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@v1.4.0\n        with:\n          version: v0.14.0\n          kubectl_version: v1.25.0\n          cluster_name: kinder\n      - uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-go@v3 # default version of go is 1.10\n        with:\n          go-version: \"1.19\"\n      - name: Install Carvel Tools\n        run: ./hack/install-deps.sh\n      # Run benchmark with `go test -bench` and stores the output to a file\n      - name: Install kc and run e2e tests on kind\n        run: |\n          set -e -x\n          kubectl version --short\n\n          source ./hack/version-util.sh\n\n          ytt -f config/ -v kapp_controller_version=\"$(get_kappctrl_ver)+develop\" | kbld -f- > kbld.out 2> kbldmeta.out\n          cat kbldmeta.out | tail -n 1 | sed 's/.*final: kapp-controller -> \\(.*\\)$/\\1/p'  | tail -n 1 | xargs kind load docker-image --name kinder\n          kapp deploy -a kc -f kbld.out -c -y\n\n          export KAPPCTRL_E2E_SECRETGEN_CONTROLLER=true\n          source ./hack/secretgen-controller.sh\n          deploy_secretgen-controller\n\n          mkdir tmp\n          KAPPCTRL_E2E_NAMESPACE=kappctrl-test eval './hack/test-e2e.sh'\n```"}
{"id": "63c4989533b087f6bde39d3c", "level": "level5", "llm_response": "```yml\nname: Stats\non:\n  schedule:\n    - cron", "answer": "```yaml on:\n  schedule:\n    # https://crontab.guru/once-a-day\n    - cron: 0 0 * * *\n  workflow_dispatch: {}\n\nname: Stats\njobs:\n  stats:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: gr2m/app-stats-action@v1.x\n        id: stats\n        with:\n          id: ${{ secrets.SETTINGS_APP_ID }}\n          private_key: ${{ secrets.SETTINGS_PRIVATE_KEY }}\n      - run: \"echo installations: '${{ steps.stats.outputs.installations }}'\"\n      - run: \"echo suspended: '${{ steps.stats.outputs.suspended_installations }}'\"\n      - run: \"echo repositories: '${{ steps.stats.outputs.repositories }}'\"\n      - run: \"echo most popular repositories: '${{ steps.stats.outputs.popular_repositories }}'\"\n```"}
{"id": "63c49aefcbc73931bb196efd", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n  schedule:\n    - cron: '41 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          # If you wish to specify custom queries, you can do so here or in a config file.\n          # By default, queries listed here will override any specified in a config file.\n          # Prefix the list here with \"+\" to use these queries and those in the config file.\n          # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49e671842bc13d7790940", "level": "level5", "llm_response": "```yml\n---\nname: Auto-merge Dependabot PRs\n", "answer": "```yaml name: Auto-merge Dependabot PRs\non:\n  schedule:\n    - cron: '0 * * * *'\njobs:\n  auto_merge:\n    name: Auto-merge Dependabot PRs\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: akheron/dependabot-cron-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          auto-merge: 'minor'\n          merge-method: 'rebase'\n```"}
{"id": "63c49e7a517fc08c1ef03b74", "level": "level5", "llm_response": "```yml\n---\nname: Check links\non:\n  branches:\n   ", "answer": "```yaml name: Check links\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron:  '0 12 */7 * *'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: 2.7.2\n    - name: Install Awesome Bot\n      run: gem install awesome_bot\n    - name: Run Awesome Bot\n      run: awesome_bot README.md --request-delay 1 --allow-ssl --allow-timeout -t 5 --allow-dupe --white-list sho.rt,your.site,long.url,awesome.re\n    - uses: actions/upload-artifact@v3\n      if: failure()\n      with:\n        name: ab-results\n        path: ab-results-README.md-filtered.json\n```"}
{"id": "63c49b2eb008460c1df32a6d", "level": "level5", "llm_response": "```yml\nname: License\non:\n  pull_request:\n    branches", "answer": "```yaml # Copyright 2021 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: License\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\npermissions: read-all\njobs:\n  license:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[skip ci]')\"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17\n        id: go\n      - name: license\n        run: |\n          export PATH=${PATH}:`go env GOPATH`/bin\n          make license\n```"}
{"id": "63c49a16cbc73931bb1919aa", "level": "level5", "llm_response": "```yaml\n---\nname: Flatpak dependency updates\non:\n  schedule:\n", "answer": "```yaml name: Flatpak dependency updates\non:\n  schedule: # for scheduling to work this file must be in the default branch\n  - cron: \"0 0 * * *\" # run every day\n  workflow_dispatch: # can be manually dispatched under GitHub's \"Actions\" tab \n\njobs:\n  flatpak-external-data-checker:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n        with:\n          # we can't push changes to a fork via a shallow update, we need to clone the full repo\n          fetch-depth: 0\n          # by default when persisting credentials the local git config will use the workflow provided GITHUB_TOKEN, not our own GITHUB_TOKEN env var for the container\n          # we must not use the provided GITHUB_TOKEN, as it will fail to push to the fork since the provided GITHUB_TOKEN is only for the repository where the workflow is running \n          persist-credentials: false\n\n      - uses: docker://ghcr.io/flathub/flatpak-external-data-checker:latest\n        env:\n          GIT_AUTHOR_NAME: EasyEffects Bot\n          GIT_COMMITTER_NAME: EasyEffects Bot\n          # email sets \"EasyEffects Bot\" user as commit author\n          GIT_AUTHOR_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GIT_COMMITTER_EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          EMAIL: 110548574+easyeffects-bot@users.noreply.github.com\n          GITHUB_TOKEN: ${{ secrets.EASYEFFECTS_BOT }}\n        with:\n          args: --update --always-fork util/flatpak/com.github.wwmm.easyeffects.Devel.json\n```"}
{"id": "63c499411e3364807578cbd2", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ 3.X.X-Branch ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ 3.X.X-Branch ]\n  schedule:\n    - cron: '0 20 * * 6'\n\njobs:\n  CodeQL-Build:\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        # Override language selection by uncommenting this and choosing your languages\n        with:\n          languages: ${{ matrix.language }}\n\n      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below).\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following\n      #    three lines and modify them (or add more) to build your code if your\n      #    project uses a compiled language\n\n      #- run: |\n      #     make bootstrap\n      #     make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c497691e33648075780df0", "level": "level5", "llm_response": "```yml\nname: Publish Project to Gradle Plugin Portal\n\non:\n", "answer": "```yaml name: Publish Project to Gradle Plugin Portal\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'usefulness/easylauncher-gradle-plugin'\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n\n      - uses: gradle/gradle-build-action@v2\n\n      - name: Build app with Gradle\n        run: ./gradlew build\n\n      - name: Publish to Gradle Plugin Portal\n        run: ./gradlew publishPlugins -Pgradle.publish.key=${{ secrets.gradle_publish_key }} -Pgradle.publish.secret=${{ secrets.gradle_publish_secret }}\n\n      - name: Publish to Github Package Registry\n        run: ./gradlew publish --continue || true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499671842bc13d77707f8", "level": "level5", "llm_response": "```yml\n---\nname: Create and publish a Docker image\non:\n", "answer": "```yaml name: Create and publish a Docker image\n\non: [push]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  build-and-push-image:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata (tags, labels) for Docker\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            # set latest tag for default branch\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```"}
{"id": "63c49c8e517fc08c1eef73f9", "level": "level5", "llm_response": "```yml\nname: Brick Build\n\non:\n  push:\n    branches", "answer": "```yaml name: Brick Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"packages/brick_build/**\"\n      - \".github/workflows/brick_build.yaml\"\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    uses: ./.github/workflows/reusable-dart-analyze-format-test.yaml\n    with:\n      package: brick_build\n```"}
{"id": "63c49aa1cbc73931bb194f0a", "level": "level5", "llm_response": "```yml\nname: Sync workflows for GHES\non:\n  push", "answer": "```yaml name: Sync workflows for GHES\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  sync:\n    permissions:\n      contents: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: |\n        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n        git config user.email \"cschleiden@github.com\"\n        git config user.name \"GitHub Actions\"\n    - uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n        cache: 'npm'\n        cache-dependency-path: script/sync-ghes/package-lock.json\n    - name: Check starter workflows for GHES compat\n      run: |\n        npm ci\n        npx ts-node-script ./index.ts\n      working-directory: ./script/sync-ghes\n    - run: |\n        git add -A\n        if [ -z \"$(git status --porcelain)\" ]; then\n          echo \"No changes to commit\"\n        else\n          git commit -m \"Updating GHES workflows\"\n        fi\n    - run: git push\n```"}
{"id": "63c49b936fc19abdf9cbd6f7", "level": "level5", "llm_response": "```yml\nname: Deploy\n\non:\n  releases:\n    types:", "answer": "```yaml ---\nname: Deploy\n\n# yamllint disable-line rule:truthy\non:\n  release:\n    types:\n      - published\n  workflow_run:\n    workflows: [\"CI\"]\n    branches: [main]\n    types:\n      - completed\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/addon-deploy.yaml@main\n    secrets:\n      CAS_API_KEY: ${{ secrets.CAS_API_KEY }}\n      DISPATCH_TOKEN: ${{ secrets.DISPATCH_TOKEN }}\n```"}
{"id": "63c496ed6fc19abdf9c9f2dc", "level": "level5", "llm_response": "```yml\nname: Release Notes\non:\n  branches:\n    -", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: 'Release Notes'\n\non:\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: 'Branch'\n        required: true\n        default: 'main'\n      start-rev:\n        description: 'Start Tag (defaults to merge-base(branch, prev-branch))'\n        required: false\n      end-rev:\n        description: 'End Tag (defaults to HEAD of the target branch)'\n        required: false\n\njobs:\n  release-notes:\n    uses: knative/actions/.github/workflows/release-notes.yaml@main\n    with:\n      branch: ${{ github.event.inputs.branch }}\n      start-rev: ${{ github.event.inputs.start-rev }}\n      end-rev: ${{ github.event.inputs.end-rev }}\n```"}
{"id": "63c49ddd517fc08c1eeffa78", "level": "level5", "llm_response": "```yaml\nname: SVGOptimizer\non: pull_request\njobs", "answer": "```yaml name: SVGOptimizer\non:\n  # Disable the following line if you don't want the Action to run on PRs.\n  pull_request:\n    paths:\n      - '**.svg'\n# Enable the following line if you want the Action to run on regular pushes.\n#  push:\n# Enable the following lines if you want the Action to run on a schedule.\n#  schedule:\n#  - cron:  '0 * * * 1'  # See https://crontab.guru/\n# Enable one of the following lines if you want to manually trigger the Action.\n#  repository_dispatch:\n#  workflow_dispatch:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: ericcornelissen/svgo-action@v1\n        with:\n          test-run: false\n          svgo-version: 2\n          svgo-options: svgo.config.js\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d52517fc08c1eefc15c", "level": "level5", "llm_response": "```yml\n---\ntrigger:\n  name: External Trigger Main\n  event", "answer": "```yaml name: External Trigger Main\n\non:\n  workflow_dispatch:\n\njobs:\n  external-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n\n      - name: External Trigger\n        if: github.ref == 'refs/heads/master'\n        run: |\n          if [ -n \"${{ secrets.PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER }}\" ]; then\n            echo \"**** Github secret PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER is set; skipping trigger. ****\"\n            exit 0\n          fi\n          echo \"**** External trigger running off of master branch. To disable this trigger, set a Github secret named \\\"PAUSE_EXTERNAL_TRIGGER_TAUTULLI_MASTER\\\". ****\"\n          echo \"**** Retrieving external version ****\"\n          EXT_RELEASE=$(curl -u \"${{ secrets.CR_USER }}:${{ secrets.CR_PAT }}\" -sX GET \"https://api.github.com/repos/Tautulli/Tautulli/releases/latest\" | jq -r '. | .tag_name')\n          if [ -z \"${EXT_RELEASE}\" ] || [ \"${EXT_RELEASE}\" == \"null\" ]; then\n            echo \"**** Can't retrieve external version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve external version for tautulli branch master\"\n            GHA_TRIGGER_URL=\"https://github.com/linuxserver/docker-tautulli/actions/runs/${{ github.run_id }}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n**Trigger URL:** '\"${GHA_TRIGGER_URL}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          EXT_RELEASE=$(echo ${EXT_RELEASE} | sed 's/[~,%@+;:/]//g')\n          echo \"**** External version: ${EXT_RELEASE} ****\"\n          echo \"**** Retrieving last pushed version ****\"\n          image=\"linuxserver/tautulli\"\n          tag=\"latest\"\n          token=$(curl -sX GET \\\n            \"https://ghcr.io/token?scope=repository%3Alinuxserver%2Ftautulli%3Apull\" \\\n            | jq -r '.token')\n            multidigest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${tag}\" \\\n              | jq -r 'first(.manifests[].digest)')\n            digest=$(curl -s \\\n              --header \"Accept: application/vnd.docker.distribution.manifest.v2+json\" \\\n              --header \"Authorization: Bearer ${token}\" \\\n              \"https://ghcr.io/v2/${image}/manifests/${multidigest}\" \\\n              | jq -r '.config.digest')\n          image_info=$(curl -sL \\\n            --header \"Authorization: Bearer ${token}\" \\\n            \"https://ghcr.io/v2/${image}/blobs/${digest}\" \\\n            | jq -r '.container_config')\n          IMAGE_RELEASE=$(echo ${image_info} | jq -r '.Labels.build_version' | awk '{print $3}')\n          IMAGE_VERSION=$(echo ${IMAGE_RELEASE} | awk -F'-ls' '{print $1}')\n          if [ -z \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Can't retrieve last pushed version, exiting ****\"\n            FAILURE_REASON=\"Can't retrieve last pushed version for tautulli tag latest\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 16711680,\n              \"description\": \"**Trigger Failed** \\n**Reason:** '\"${FAILURE_REASON}\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n            exit 1\n          fi\n          echo \"**** Last pushed version: ${IMAGE_VERSION} ****\"\n          if [ \"${EXT_RELEASE}\" == \"${IMAGE_VERSION}\" ]; then\n            echo \"**** Version ${EXT_RELEASE} already pushed, exiting ****\"\n            exit 0\n          elif [ $(curl -s https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/lastBuild/api/json | jq -r '.building') == \"true\" ]; then\n            echo \"**** New version ${EXT_RELEASE} found; but there already seems to be an active build on Jenkins; exiting ****\"\n            exit 0\n          else\n            echo \"**** New version ${EXT_RELEASE} found; old version was ${IMAGE_VERSION}. Triggering new build ****\"\n            response=$(curl -iX POST \\\n              https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-tautulli/job/master/buildWithParameters?PACKAGE_CHECK=false \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} | grep -i location | sed \"s|^[L|l]ocation: \\(.*\\)|\\1|\")\n            echo \"**** Jenkins job queue url: ${response%$'\\r'} ****\"\n            echo \"**** Sleeping 10 seconds until job starts ****\"\n            sleep 10\n            buildurl=$(curl -s \"${response%$'\\r'}api/json\" | jq -r '.executable.url')\n            buildurl=\"${buildurl%$'\\r'}\"\n            echo \"**** Jenkins job build url: ${buildurl} ****\"\n            echo \"**** Attempting to change the Jenkins job description ****\"\n            curl -iX POST \\\n              \"${buildurl}submitDescription\" \\\n              --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \\\n              --data-urlencode \"description=GHA external trigger https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\" \\\n              --data-urlencode \"Submit=Submit\"\n            echo \"**** Notifying Discord ****\"\n            TRIGGER_REASON=\"A version change was detected for tautulli tag latest. Old version:${IMAGE_VERSION} New version:${EXT_RELEASE}\"\n            curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n              \"description\": \"**Build Triggered** \\n**Reason:** '\"${TRIGGER_REASON}\"' \\n**Build URL:** '\"${buildurl}display/redirect\"' \\n\"}],\n              \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n          fi\n```"}
{"id": "63c49ee31e336480757b05b6", "level": "level5", "llm_response": "```yml\nname: goreleaser\non:\n  push:\n   ", "answer": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - 'v*'\n\npermissions:\n  contents: write\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Post release\n        run: ls -l ./dist/*```"}
{"id": "63c4a0a1517fc08c1ef11043", "level": "level5", "llm_response": "```yml\nname: Greetings\non:\n  pull_request:\n   ", "answer": "```yaml # YOLOv5 \ud83d\ude80 by Ultralytics, GPL-3.0 license\n\nname: Greetings\n\non:\n  pull_request_target:\n    types: [opened]\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for submitting a YOLOv5 \ud83d\ude80 PR! To allow your work to be integrated as seamlessly as possible, we advise you to:\n\n            - \u2705 Verify your PR is **up-to-date** with `ultralytics/yolov5` `master` branch. If your PR is behind you can update your code by clicking the 'Update branch' button or by running `git pull` and `git merge master` locally.\n            - \u2705 Verify all YOLOv5 Continuous Integration (CI) **checks are passing**.\n            - \u2705 Reduce changes to the absolute **minimum** required for your bug fix or feature addition. _\"It is not daily increase but daily decrease, hack away the unessential. The closer to the source, the less wastage there is.\"_  \u2014 Bruce Lee\n\n          issue-message: |\n            \ud83d\udc4b Hello @${{ github.actor }}, thank you for your interest in YOLOv5 \ud83d\ude80! Please visit our \u2b50\ufe0f [Tutorials](https://github.com/ultralytics/yolov5/wiki#tutorials) to get started, where you can find quickstart guides for simple tasks like [Custom Data Training](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data) all the way to advanced concepts like [Hyperparameter Evolution](https://github.com/ultralytics/yolov5/issues/607).\n\n            If this is a \ud83d\udc1b Bug Report, please provide screenshots and **minimum viable code to reproduce your issue**, otherwise we can not help you.\n\n            If this is a custom training \u2753 Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online [W&B logging](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize) if available.\n\n            For business inquiries or professional support requests please visit https://ultralytics.com or email support@ultralytics.com.\n\n            ## Requirements\n\n            [**Python>=3.7.0**](https://www.python.org/) with all [requirements.txt](https://github.com/ultralytics/yolov5/blob/master/requirements.txt) installed including [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/). To get started:\n            ```bash\n            git clone https://github.com/ultralytics/yolov5  # clone\n            cd yolov5\n            pip install -r requirements.txt  # install\n            ```\n\n            ## Environments\n\n            YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including [CUDA](https://developer.nvidia.com/cuda)/[CUDNN](https://developer.nvidia.com/cudnn), [Python](https://www.python.org/) and [PyTorch](https://pytorch.org/) preinstalled):\n\n            - **Notebooks** with free GPU: <a href=\"https://bit.ly/yolov5-paperspace-notebook\"><img src=\"https://assets.paperspace.io/img/gradient-badge.svg\" alt=\"Run on Gradient\"></a> <a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a> <a href=\"https://www.kaggle.com/ultralytics/yolov5\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a>\n            - **Google Cloud** Deep Learning VM. See [GCP Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/GCP-Quickstart)\n            - **Amazon** Deep Learning AMI. See [AWS Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/AWS-Quickstart)\n            - **Docker Image**. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov5/wiki/Docker-Quickstart) <a href=\"https://hub.docker.com/r/ultralytics/yolov5\"><img src=\"https://img.shields.io/docker/pulls/ultralytics/yolov5?logo=docker\" alt=\"Docker Pulls\"></a>\n\n            ## Status\n\n            <a href=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml\"><img src=\"https://github.com/ultralytics/yolov5/actions/workflows/ci-testing.yml/badge.svg\" alt=\"YOLOv5 CI\"></a>\n\n            If this badge is green, all [YOLOv5 GitHub Actions](https://github.com/ultralytics/yolov5/actions) Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 [training](https://github.com/ultralytics/yolov5/blob/master/train.py), [validation](https://github.com/ultralytics/yolov5/blob/master/val.py), [inference](https://github.com/ultralytics/yolov5/blob/master/detect.py), [export](https://github.com/ultralytics/yolov5/blob/master/export.py) and [benchmarks](https://github.com/ultralytics/yolov5/blob/master/benchmarks.py) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.\n\n```"}
{"id": "63c49dd4517fc08c1eeff6b7", "level": "level5", "llm_response": "```yml\nname: check-permissions\n\non:\n  push:\n   ", "answer": "```yaml name: check-permissions\non: [push, pull_request]\njobs:\n  check-permissions:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Check permissions on swizzin files\n        run: ./.github/scripts/check-permissions.sh\n```"}
{"id": "63c499771899db58864e6cab", "level": "level5", "llm_response": "```yml\n---\nname: Dependabot auto-merge\n\non:\n", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49f061899db588650a81b", "level": "level5", "llm_response": "```yml\nname: Build\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\n\non: [push, pull_request]\n\npermissions: read-all\n\nenv:\n  XCODE_WORKSPACE: \"Rectangle.xcworkspace\"\n  XCODE_SCHEME: \"Rectangle\"\n  CODE_SIGN_IDENTITY: \"-\"\n  BUILD_DIR: \"build\"\n  XCODE_ARCHIVE: \"Rectangle.xcarchive\"\n  APP_NAME: \"Rectangle.app\"\n  EXPORT_OPTIONS_PLIST: \"exportOptions.plist\"\n  DMG_NAME: \"Rectangle\"\n  DMG_FILE_NAME: \"Rectangle.dmg\"\n\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Install Dependencies\n      run: |\n        pod repo update\n        pod install\n    - name: Build\n      run: xcodebuild -workspace \"$XCODE_WORKSPACE\" -scheme \"$XCODE_SCHEME\" archive CODE_SIGN_IDENTITY=\"$CODE_SIGN_IDENTITY\" -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\"\n    - name: Export\n      run: |\n        plutil -convert xml1 - -o \"$EXPORT_OPTIONS_PLIST\" << EOF\n          {\n            \"destination\": \"export\",\n            \"method\": \"mac-application\"\n          }\n        EOF\n\n        xcodebuild -exportArchive -archivePath \"$BUILD_DIR/$XCODE_ARCHIVE\" -exportPath \"$BUILD_DIR\" -exportOptionsPlist \"$EXPORT_OPTIONS_PLIST\"\n    - name: Resign App\n      run: codesign --force --deep -s \"$CODE_SIGN_IDENTITY\" \"$BUILD_DIR/$APP_NAME\"\n    - name: Make DMG\n      run: hdiutil create -srcdir \"$BUILD_DIR\" -volname \"$DMG_NAME\" \"$DMG_FILE_NAME\"\n    - name: Upload\n      uses: actions/upload-artifact@v3\n      with:\n        name: Build\n        path: ${{ env.DMG_FILE_NAME }}\n```"}
{"id": "63c49de733b087f6bde5c4d9", "level": "level5", "llm_response": "```yml\nname: Compile Examples\non:\n  push:\n    branches", "answer": "```yaml name: Compile Examples\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  pull_request:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by changes to external resources (libraries, platforms).\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  build:\n    name: ${{ matrix.board.fqbn }}\n    runs-on: ubuntu-latest\n\n    env:\n      SKETCHES_REPORTS_PATH: sketches-reports\n\n    strategy:\n      fail-fast: false\n\n      matrix:\n        board:\n          - fqbn: arduino:avr:nano\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:mega\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:leonardo\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:megaavr:nona4809\n            platforms: |\n              - name: arduino:megaavr\n          - fqbn: arduino:sam:arduino_due_x_dbg\n            platforms: |\n              - name: arduino:sam\n          - fqbn: arduino:samd:mkrzero\n            platforms: |\n              - name: arduino:samd\n          - fqbn: arduino:mbed_portenta:envie_m4\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_portenta:envie_m7\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_nano:nano33ble\n            platforms: |\n              - name: arduino:mbed_nano\n          - fqbn: arduino:mbed_nano:nanorp2040connect\n            platforms: |\n              - name: arduino:mbed_nano\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Compile examples\n        uses: arduino/compile-sketches@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          fqbn: ${{ matrix.board.fqbn }}\n          platforms: ${{ matrix.board.platforms }}\n          libraries: |\n            # Install the library from the local path.\n            - source-path: ./\n            # Additional library dependencies can be listed here.\n            # See: https://github.com/arduino/compile-sketches#libraries\n          sketch-paths: |\n            - examples\n          enable-deltas-report: true\n          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}\n\n      - name: Save sketches report as workflow artifact\n        uses: actions/upload-artifact@v3\n        with:\n          if-no-files-found: error\n          path: ${{ env.SKETCHES_REPORTS_PATH }}\n          name: ${{ env.SKETCHES_REPORTS_PATH }}\n```"}
{"id": "63c4946f8052faa2781ab2f2", "level": "level5", "llm_response": "```yml\n---\nname: Release\non:\n  push:\n    branches", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        include:\n          - os: ubuntu-latest\n            target: x86_64-unknown-linux-gnu\n            target_alias: linux-x86_64\n            bin_suffix: ''\n            archive_suffix: '.tar.bz2'\n          - os: windows-latest\n            target: x86_64-pc-windows-msvc\n            target_alias: win-x86_64-msvc\n            bin_suffix: '.exe'\n            archive_suffix: '.zip'\n    defaults:\n      run:\n        shell: bash\n    env:\n      ARCHIVE_PATH: encrypted-dns_${{ github.ref_name }}_${{ matrix.target_alias }}${{ matrix.archive_suffix }}\n\n    steps:\n      - uses: actions/checkout@master\n\n      - uses: hecrj/setup-rust-action@master\n        with:\n          rust-version: stable\n          targets: ${{ matrix.target }}\n\n      - name: Check Cargo availability\n        run: cargo --version\n\n      - name: Check Rustup default toolchain\n        run: rustup default | grep stable\n\n      - name: Build\n        run: |\n          echo 'lto = \"fat\"' >> Cargo.toml\n          env RUSTFLAGS=\"-C link-arg=-s\" cargo build --release\n          mkdir encrypted-dns\n          cp target/release/encrypted-dns${{ matrix.bin_suffix }} encrypted-dns/\n          cp README.md example-encrypted-dns.toml encrypted-dns/\n          if [ \"${{ matrix.os }}\" = \"ubuntu-latest\" ]; then\n            tar cjpf ${ARCHIVE_PATH} encrypted-dns\n          elif [ \"${{ matrix.os }}\" = \"windows-latest\" ]; then\n            \"/C/Program Files/7-Zip/7z\" a ${ARCHIVE_PATH} encrypted-dns\n          fi\n\n      - name: Install cargo-deb and build Debian package\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: |\n          cargo install --debug cargo-deb\n          cargo deb --output=encrypted-dns_${{ github.ref_name }}_amd64.deb --no-build\n\n      - uses: actions/upload-artifact@master\n        with:\n          name: encrypted-dns_${{ matrix.target_alias }}\n          path: ${{ env.ARCHIVE_PATH }}\n\n      - uses: actions/upload-artifact@master\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        with:\n          name: encrypted-dns_deb-amd64\n          path: encrypted-dns_${{ github.ref_name }}_amd64.deb\n\n  release:\n    if: startsWith(github.ref, 'refs/tags/')\n    needs:\n      - build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - name: Create release\n        uses: softprops/action-gh-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          name: Release ${{ github.ref_name }}\n          draft: true\n          prerelease: false\n          files: |\n            encrypted-dns_deb-amd64/*.deb\n            encrypted-dns_linux-x86_64/*.tar.bz2\n            encrypted-dns_win-x86_64-msvc/*.zip\n```"}
{"id": "63c494d17843b61269a0399a", "level": "level5", "llm_response": "```yml\nname: Windows\non:\n  push:\n    branches:\n", "answer": "```yaml name: Windows\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: windows-latest\n    strategy:\n      matrix:\n        ruby:\n          - '3.0'\n          - '2.7'\n          - '2.6'\n          - '2.5'\n          - 'head'\n    steps:\n    - uses: actions/checkout@v2.3.4\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1.64.1\n      with:\n        ruby-version: ${{ matrix.ruby }}\n        bundler-cache: true\n    - name: Run test\n      run: |\n        rake test\n    - name: Run packaging\n      run: |\n        rake package\n        gem install --local pkg/gem-compiler-*.gem\n```"}
{"id": "63c4a0ee1899db5886516bef", "level": "level5", "llm_response": "```yml\n---\nname: seqr prod release\non:\n  branch", "answer": "```yaml name: seqr prod release\non:\n  workflow_run:\n    workflows: [\"Unit Tests\"]\n    types:\n      - completed\n    branches:\n      - master\n\npermissions:\n  id-token: write\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n\n      - name: authenticate to google cloud\n        id: \"auth\"\n        uses: google-github-actions/auth@v0\n        with:\n          workload_identity_provider: \"${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}\"\n          service_account: \"${{ secrets.RUN_SA_EMAIL }}\"\n\n      - name: \"setup gcloud sdk\"\n        uses: google-github-actions/setup-gcloud@v0\n\n      - name: Build and push images\n        run: |-\n          gcloud builds submit --quiet --substitutions=\"COMMIT_SHA=${{ github.event.workflow_run.head_sha }},_CUSTOM_BRANCH_TAG=gcloud-prod\" --config .cloudbuild/seqr-docker.cloudbuild.yaml --gcs-log-dir=gs://seqr-github-actions-logs/logs .\n\n  helm_update:\n    runs-on: ubuntu-latest\n    needs: docker\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: broadinstitute/seqr-helm\n          ref: main\n          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token\n          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo\n\n      - name: Update appVersion in seqr Chart file\n        uses: mikefarah/yq@v4.22.1\n        with:\n          cmd: >\n            yq -i '.appVersion = \"${{ github.event.workflow_run.head_sha }}\"' charts/seqr/Chart.yaml\n\n      - name: Commit and Push changes\n        uses: Andro999b/push@v1.3\n        with:\n          repository: broadinstitute/seqr-helm\n          branch: main\n          github_token: ${{ secrets.SEQR_VERSION_UPDATE_TOKEN }}\n          author_email: ${{ github.actor }}@users.noreply.github.com\n          author_name: tgg-automation\n          message: \"Update seqr chart appVersion to ${{ github.event.workflow_run.head_sha }}\"\n```"}
{"id": "63c49fb3cbc73931bb1b59fe", "level": "level5", "llm_response": "```yml\nname: Add issues to React Native Bug Board\n\non:\n", "answer": "```yaml name: Add issues to React Native Bug Board\r\n\r\non:\r\n  issues:\r\n    types:\r\n      - opened\r\n\r\njobs:\r\n  add-to-project:\r\n    name: Add issue to project\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/add-to-project@main\r\n        with:\r\n          project-url: https://github.com/orgs/microsoft/projects/235\r\n          github-token: ${{ secrets.RNBOT_GH_TOKEN }}\r\n```"}
{"id": "63c4a0b71899db5886515740", "level": "level5", "llm_response": "```yml\n---\nname: CI\non:\n  pull_request:\n   ", "answer": "```yaml name: CI\n\non:\n  pull_request:\n    branches: [master]\n  push:\n    branches: [master]\n    tags: '*'\n\nconcurrency: \n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        version:\n          - '1.0'\n          - '1'\n          - 'nightly'\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        arch: [x64]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.version }}\n          arch: ${{ matrix.arch }}\n      - uses: julia-actions/cache@v1\n      - uses: julia-actions/julia-buildpkg@latest\n      - uses: julia-actions/julia-runtest@latest\n      - uses: julia-actions/julia-processcoverage@latest\n      - uses: codecov/codecov-action@v3\n        with:\n          file: lcov.info\n```"}
{"id": "63c495638052faa2781b17aa", "level": "level5", "llm_response": "```yml\nname: Build wheels\n\non:\n  push:\n    branches", "answer": "```yaml name: Build wheels\n\non:\n  # Trigger on pushes to the mainline branches and version tags. This prevents building commits\n  # twice when the pull request source branch is in the same repository.\n  push:\n    branches:\n      - \"master\"\n      - \"next\"\n    tags:\n      - \"v*\"\n\n  pull_request:\n      types: [opened, labeled, reopened, synchronize]\n\n  # Trigger on request.\n  workflow_dispatch:\n\nenv:\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n\njobs:\n  build_wheels:\n    name: Build wheel for ${{ matrix.os }}, Python ${{ matrix.pyver }}\n    runs-on: ${{ matrix.os }}\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, macos-12] #, windows-2019]\n        pyver: [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.10.2\n        env:\n          # Build for cpython >= 3.6.\n          CIBW_PROJECT_REQUIRES_PYTHON: \"==${{ matrix.pyver }}.*\"\n          CIBW_SKIP: \"{pp*,*-musllinux_*}\"\n\n          # Build only on 64-bit architectures.\n          CIBW_ARCHS_MACOS: \"x86_64 arm64\"\n          CIBW_ARCHS_LINUX: auto64\n          CIBW_ARCHS_WINDOWS: auto64\n\n          # Configure environment variables.\n          CIBW_ENVIRONMENT_LINUX: \"CMAKE_PREFIX_PATH=/project/tbb LD_LIBRARY_PATH=/project/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          CIBW_ENVIRONMENT_MACOS: \"CMAKE_PREFIX_PATH=/Users/runner/work/freud/freud/tbb LD_LIBRARY_PATH=/Users/runner/work/freud/freud/tbb/lib/intel64/gcc4.8:$LD_LIBRARY_PATH\"\n          MACOSX_DEPLOYMENT_TARGET: \"10.14\"\n\n          # Set up TBB.\n          CIBW_BEFORE_BUILD_LINUX: \"source .github/workflows/cibuildwheel-before-build.sh {package} linux\"\n          CIBW_BEFORE_BUILD_MACOS: \"source .github/workflows/cibuildwheel-before-build.sh {package} macos\"\n          CIBW_BEFORE_BUILD_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-build.ps1 {package}\"\n\n          # Test the wheels.\n          CIBW_BEFORE_TEST_LINUX: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_MACOS: \"source .github/workflows/cibuildwheel-before-test.sh {package}\"\n          CIBW_BEFORE_TEST_WINDOWS: \"powershell .github/workflows/cibuildwheel-before-test.ps1 {package}\"\n          CIBW_TEST_COMMAND: \"cd {package}/tests && pytest . -v --log-level=DEBUG -n auto\"\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: ./wheelhouse/*.whl\n\n  build_sdist:\n    name: Build source distribution\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          submodules: \"recursive\"\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: '3.9'\n\n      - name: Install build requirements\n        run: python3 -m pip --disable-pip-version-check install scikit-build cmake -r requirements.txt --upgrade --progress-bar=off\n\n      - name: Build sdist\n        run: python setup.py sdist\n\n      - uses: actions/upload-artifact@v3\n        with:\n          name: dist\n          path: dist/*.tar.gz\n\n  upload_pypi:\n    name: Publish [PyPI]\n    needs: [build_wheels, build_sdist]\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.pull_request.labels.*.name, 'build_wheels') || github.event_name != 'pull_request' }}\n\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: dist\n          path: dist\n\n      - name: Check files\n        run: ls -lR dist\n\n      - name: Upload to PyPI\n        # upload to PyPI on every tag starting with 'v'\n        if: startsWith(github.ref, 'refs/tags/v')\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n\n      - name: Upload to TestPyPI\n        # otherwise, upload to TestPyPi when secrets are available\n        if: ${{ !startsWith(github.ref, 'refs/tags/v') && (github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]')) }}\n        uses: pypa/gh-action-pypi-publish@v1.5.1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n          skip_existing: true\n\n      - name: Slack notification\n        if: startsWith(github.ref, 'refs/tags/v') || failure()\n        uses: act10ns/slack@v1.6.0\n        with:\n          status: ${{ job.status }}\n          channel: '#dev-freud'\n```"}
{"id": "63c49d95cbc73931bb1a811c", "level": "level5", "llm_response": "```yml\nname: Build and Publish Documentation\non:\n  push:\n", "answer": "```yaml name: Build and Publish Documentation\n\non:\n  # Trigger the workflow on push or pull request,\n  # but only for the main branch\n  push:\n    branches:\n      - master\n  # Also trigger on page_build, as well as release created events\n  page_build:\n  release:\n    types: # This configuration does not affect the page_build event above\n      - created\n\nenv:\n  DOXYGEN_VERSION: Release_1_9_1\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    steps:\n      # check out the Arduino-SDI-12 repo\n      - uses: actions/checkout@v3\n        with:\n          path: code_docs/Arduino-SDI-12\n\n      - name: Restore or Cache pip\n        uses: actions/cache@v3.0.11\n        id: cache_pip\n        with:\n          path: ~/.cache/pip\n          # if requirements.txt hasn't changed, then it will be a \"cache hit\" and pip will be restored\n          # if requirements.txt HAS changed, it will be a \"cache miss\" and a new cache of pip will be created if the job completes successfully\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Restore or Cache PlatformIO and Libraries\n        uses: actions/cache@v3.0.11\n        id: cache_pio\n        with:\n          path: ~/.platformio\n          # if nothing in the lock files has changed, then it will be a \"cache hit\"\n          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install PlatformIO\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade platformio\n\n      # Install *all* the dependencies!\n      # We're including the dependencies just so the includes can follow in the doxygen pre-processor\n      - name: Install the dependencies at global level\n        run: |\n          echo \"::debug::Installing greygnome/EnableInterrupt\"\n          pio lib -g install greygnome/EnableInterrupt\n\n      - name: Update Libraries from Cache\n        run: pio lib -g update\n\n      - name: Install GraphViz (dot)\n        run: sudo apt-get -y install graphviz\n\n      - name: Restore or Cache Doxygen\n        id: cache_doxygen\n        uses: actions/cache@v3.0.11\n        with:\n          path: doxygen-src\n          key: ${{ runner.os }}-doxygen-${{ env.DOXYGEN_VERSION }}\n\n      - name: Clone and build doxygen\n        if: steps.cache_doxygen.outputs.cache-hit != 'true'\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/build-install-doxygen.sh\n          sh continuous_integration/build-install-doxygen.sh\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install Pygments and other m.css requirements\n        run: pip3 install jinja2 Pygments beautifulsoup4\n\n      # check out my fork of m.css, for processing Doxygen output\n      - name: Checkout m.css\n        uses: actions/checkout@v3\n        with:\n          # Repository name with owner. For example, actions/checkout\n          repository: SRGDamia1/m.css\n          path: code_docs/m.css\n\n      - name: Generate all the documentation\n        env:\n          TRAVIS_BUILD_DIR: ${{ github.workspace }}\n        run: |\n          cd ${{ github.workspace }}/code_docs/Arduino-SDI-12/\n          chmod +x continuous_integration/generate-documentation.sh\n          sh continuous_integration/generate-documentation.sh\n\n      - name: Deploy to github pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ${{ github.workspace }}/code_docs/Arduino-SDI-12Doxygen/m.css\n```"}
{"id": "63c4a121517fc08c1ef14262", "level": "level5", "llm_response": "```yml\nname: Fix PHP code style issues\n\non:\n  push", "answer": "```yaml name: Fix PHP code style issues\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  php-code-styling:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n          token: ${{ secrets.COMMIT_TOKEN }}\n\n      - name: Fix PHP code style issues\n        uses: aglipanci/laravel-pint-action@1.0.0\n\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'PHP CS Fixer'\n```"}
{"id": "63c4a0aa33b087f6bde6e0bc", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  branches:\n    -", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '21 0 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java', 'javascript' ]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'temurin'\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a1a3517fc08c1ef1718f", "level": "level5", "llm_response": "```yml\nname: Stage\non:\n  branches:\n    - main", "answer": "```yaml name: Stage\non:\n  workflow_dispatch:\njobs:\n  stage:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: git config\n        env:\n          GPT_USER: ${{ secrets.GPT_USER }}\n        run: |\n          git config --global user.name $GPT_USER\n          git config --global pull.rebase false\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GPT }}\n      - name: Checkout release branch\n        run: git switch release || git switch -c release\n      - name: Merge main branch to release branch\n        run: git merge -X theirs main\n      - name: Git push\n        run: git push origin release\n```"}
{"id": "63c49d3433b087f6bde57d74", "level": "level5", "llm_response": "```yml\nname: Alpine 3\n\non:\n  branches:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: Tue Feb 4 09:53:28 2020 +0000\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Alpine 3\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**/*.md'\n      - '.github/workflows/*'\n      - '!.github/workflows/alpine_3.yaml'\n      - '**/Dockerfile'\n      - '**/Jenkinsfile'\n      - '**/.envrc*'\n      - .checkov.yaml\n      - .dockerignore\n      - .gcloudignore\n      - .editorconfig\n      - '.gitconfig*'\n      - .gitignore\n      - .grype.yaml\n      - .hound.yml\n      - .terraformignore\n      - Jenkinsfile\n      - .appveyor.yml\n      - .buildkite/pipeline.yml\n      - .circleci/config.yml\n      - .cirrus.yml\n      - .concourse.yml\n      - .drone.yml\n      - .gitlab-ci.yml\n      - .gocd.yml\n      - .scrutinizer.yml\n      - .semaphore/semaphore.yml\n      - .travis.yml\n      - .werckerignore\n      - azure-pipelines.yml\n      - bitbucket-pipelines.yml\n      - buddy.yml\n      - buildspec.yml\n      - cloudbuild.yaml\n      - codefresh.yml\n      - codeship.yml\n      - shippable.yml\n      - wercker.yml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Build\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      container: alpine:3\n      caches: apk pip cpanm\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c49e361842bc13d778f5e6", "level": "level5", "llm_response": "```yml\nname: Build\non:\n  branches:\n    - main", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n    tags:\n      - v*\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n  \n\njobs:\n  build:\n    uses: benjamin-hodgson/BuildScripts/.github/workflows/dotnet.yml@main\n    with:\n      DOCS_FOLDER: Pidgin.Docs\n    secrets:\n      NUGET_KEY: ${{ secrets.NUGET_KEY }}\n```"}
{"id": "63c49e7033b087f6bde5fc3c", "level": "level5", "llm_response": "```yml\n---\nname: Run unit tests\non:\n  push:\n", "answer": "```yaml name: Run unit tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n  # Upload code coverage results when PRs are merged\n  push:\n    branches:\n      - master\n      - develop\n    paths:\n      - src/**\n      - .github/workflows/**\n\nenv:\n  DOTNET_NOLOGO: true\n  DOTNET_CLI_TELEMETRY_OPTOUT: true\n\njobs:\n  test:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v3\n      - name: Setup .NET Core SDKs\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: |\n            3.1.x\n            5.0.x\n            6.0.x\n          source-url: https://nuget.pkg.github.com/graphql-dotnet/index.json\n        env:\n          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}\n      - name: Disable MSVS Nuget Source # see https://github.com/graphql-dotnet/graphql-dotnet/issues/2422\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        run: dotnet nuget disable source 'Microsoft Visual Studio Offline Packages'\n      - name: Install dependencies\n        working-directory: src\n        run: dotnet restore\n      - name: Check formatting\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: |\n          dotnet format --no-restore --verify-no-changes --severity warn || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\n      - name: Build solution [Release]\n        working-directory: src\n        run: dotnet build --no-restore -c Release\n      - name: Build solution [Debug]\n        working-directory: src\n        run: dotnet build --no-restore -c Debug\n      - name: Test solution [Debug] with code coverage\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build -p:CollectCoverage=true -p:DoesNotReturnAttribute=\"DoesNotReturnAttribute\"\n      - name: Test solution [Debug] without code coverage\n        if: ${{ startsWith(matrix.os, 'windows') }}\n        working-directory: src\n        run: dotnet test --no-restore --no-build\n      - name: Upload coverage to codecov\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        uses: codecov/codecov-action@v3\n        with:\n          files: .coverage/GraphQLParser.Tests/coverage.net5.opencover.xml\n\n  buildcheck:\n    needs:\n      - test\n    runs-on: ubuntu-latest\n    if: always()\n    steps:\n      - name: Pass build check\n        if: ${{ needs.test.result == 'success' }}\n        run: exit 0\n      - name: Fail build check\n        if: ${{ needs.test.result != 'success' }}\n        run: exit 1\n```"}
{"id": "63c49fc91899db588650f490", "level": "level5", "llm_response": "```yml\n---\nname: Build & Deploy - BETA linters\n", "answer": "```yaml ---\n#########################\n#########################\n## Deploy Docker Image Flavors ##\n#########################\n#########################\n# Documentation:\n# https://help.github.com/en/articles/workflow-syntax-for-github-actions\n#\n\n#######################################\n# Start the job on all push to main #\n#######################################\nname: \"Build & Deploy - BETA linters\"\non:\n  push:\n    branches:\n      - \"main\"\n    paths:\n      - \".github/workflows/**\"\n      - \"Dockerfile\"\n      - \"**/Dockerfile\"\n      - \"flavors/**\"\n      - \"megalinter/**\"\n      - \"mega-linter-runner/**\"\n      - \"**/linter-versions.json\"\n      - \"TEMPLATES/**\"\n      - \".trivyignore\"\n      - \"**/*.sh\"\n      - \"**/*.py\"\n      - \"**/sh/**\"\n\n###############\n# Set the Job #\n###############\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n\n  prepare:\n    name: Prepare matrix\n    runs-on: ubuntu-latest  \n    steps:\n\n    - name: Build unique image name for beta\n      shell: bash\n      run: echo \"UNIQUE_DOCKER_IMAGE_NAME=$(echo beta_$(date '+%Y%m%d-%H%M'))\" >> $GITHUB_ENV\n\n    - name: Prepare result is ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\n      shell: bash\n      run: echo ${{ env.UNIQUE_DOCKER_IMAGE_NAME }}  \n\n    outputs:\n      unique_docker_image_name: \"${{ env.UNIQUE_DOCKER_IMAGE_NAME }}\"  \n\n  build:\n    needs: prepare\n    # Name the Job\n    name: Deploy Docker Image - Beta - Linters\n    # Set the agent to run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest]\n        # linters-start\n        linter:\n          [\n            \"ansible_ansible_lint\",\n            \"bash_shellcheck\",\n            \"cloudformation_cfn_lint\",\n            \"dockerfile_hadolint\",\n            \"go_revive\",\n            \"groovy_npm_groovy_lint\",\n            \"java_checkstyle\",\n            \"java_pmd\",\n            \"javascript_es\",\n            \"json_eslint_plugin_jsonc\",\n            \"jsx_eslint\",\n            \"kotlin_ktlint\",\n            \"php_psalm\",\n            \"python_bandit\",\n            \"repository_checkov\",\n            \"repository_devskim\",\n            \"repository_dustilock\",\n            \"repository_gitleaks\",\n            \"repository_secretlint\",\n            \"repository_semgrep\",\n            \"repository_syft\",\n            \"repository_trivy\",\n            \"terraform_tflint\",\n            \"terraform_terrascan\",\n            \"terraform_checkov\",\n            \"tsx_eslint\",\n            \"typescript_es\",\n          ]\n# linters-end\n    # Only run this on the main repo\n    if: github.repository == 'oxsecurity/megalinter' && !contains(github.event.head_commit.message, 'skip deploy')\n    ##################\n    # Load all steps #\n    ##################\n    steps:\n      ##########################\n      # Checkout the code base #\n      ##########################\n      - name: Checkout Code\n        uses: actions/checkout@v3\n\n      #####################\n      # Run Deploy script #\n      #####################\n      - name: Deploy Beta image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: beta\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      - name: Deploy ${{ needs.prepare.outputs.unique_docker_image_name }} image to DockerHub\n        env:\n          # Set the Env Vars\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          IMAGE_REPO: oxsecurity/megalinter-only-${{ matrix.linter }}\n          IMAGE_VERSION: \"${{ needs.prepare.outputs.unique_docker_image_name }}\"\n          DOCKERFILE_PATH: linters/${{ matrix.linter }}/Dockerfile\n          REGISTRY: Docker\n          ALWAYS_BUILD: force\n        shell: bash\n        run: .automation/upload-docker.sh\n\n      #####################################\n      # Run Linter test cases #\n      #####################################\n      - name: Run Test Cases\n        shell: bash\n        run: |\n          TEST_KEYWORDS_TO_USE_UPPER=\"${{ matrix.linter }}\"\n          TEST_KEYWORDS_TO_USE=\"${TEST_KEYWORDS_TO_USE_UPPER,,}\"\n          docker run -e TEST_CASE_RUN=true -e OUTPUT_FORMAT=text -e OUTPUT_FOLDER=${GITHUB_SHA} -e OUTPUT_DETAIL=detailed -e GITHUB_SHA=${GITHUB_SHA} -e PAT=\"${{secrets.PAT}}\" -e TEST_KEYWORDS=\"${TEST_KEYWORDS_TO_USE}\" -e MEGALINTER_VOLUME_ROOT=\"${GITHUB_WORKSPACE}\" -v \"/var/run/docker.sock:/var/run/docker.sock:rw\" -v ${GITHUB_WORKSPACE}:/tmp/lint oxsecurity/megalinter-only-${{ matrix.linter }}:beta\n        timeout-minutes: 30\n\n      ##############################################\n      # Check Docker image security with Trivy #\n      ##############################################\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'docker.io/oxsecurity/megalinter-only-${{ matrix.linter }}:beta'\n          format: 'table'\n          exit-code: '1'\n          ignore-unfixed: true\n          security-checks: vuln\n          vuln-type: 'os,library'\n          severity: 'CRITICAL,HIGH'\n          timeout: 10m0s\n```"}
{"id": "63c4996433b087f6bde3f0a1", "level": "level5", "llm_response": "```yml\nname: test\non:\n  push:\n    branches:\n", "answer": "```yaml name: test\n\non: [push]\n\njobs:\n  lint:\n    runs-on: 'ubuntu-latest'\n\n    strategy:\n      matrix:\n        node: [14, 16, 18]\n\n    name: Lint (Node ${{ matrix.node }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run stylelint\n      - run: npm run eslint\n\n  test:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Test (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm test\n        env:\n          CI: true\n\n  build-examples:\n\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        # No point testing on Node 18 as Webpack 4 will always fail with it due\n        # to OpenSSL updates. We'll need to handle this before Node 18 hits LTS.\n        node: [14, 16, 18]\n\n    name: Build examples (Node ${{ matrix.node }}, ${{ matrix.os }})\n\n    needs:\n      - test\n      - lint\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n      - name: Use Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v2.5.1\n        with:\n          node-version: ${{ matrix.node }}\n      - run: npm -g install npm\n        if: matrix.node == 14\n      - run: npm ci\n      - run: npm run build\n        env:\n          CI: true\n```"}
{"id": "63c4982f6fc19abdf9ca7842", "level": "level5", "llm_response": "```yml\nname: Build and publish folly dependency\non: event:", "answer": "```yaml name: Build and publish folly dependency\n\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: \"Build and publish an fbpcf/folly image for a particular version\"\n        default: \"Run\"\n      folly_release:\n        description: \"The folly version to build and publish (e.g. 2021.03.29.00)\"\n        required: true\n        type: string\n      fmt_release:\n        description: \"The fmt version to build and publish (e.g. 7.1.3)\"\n        required: true\n        type: string\n      os:\n        description: \"Which os to use. Currently only supports ubuntu\"\n        required: false\n        type: str\n        default: \"ubuntu\"\n      os_release:\n        description: \"The os version to use (e.g. 20.04 for ubuntu)\"\n        required: false\n        type: str\n        default: \"20.04\"\n\nenv:\n  REGISTRY: ghcr.io\n\njobs:\n  ubuntu:\n    runs-on: [self-hosted, e2e_test_runner]\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v1\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build image\n        run: |\n          docker build \\\n          --build-arg os_release=${{ github.event.inputs.os_release }} \\\n          --build-arg folly_release=${{ github.event.inputs.folly_release }} \\\n          --build-arg fmt_release=${{ github.event.inputs.fmt_release }} \\\n          -t \"fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\" \\\n          -f \"docker/folly/Dockerfile.${{ github.event.inputs.os }}\" .\n\n      - name: Tag image\n        run: |\n          docker tag fbpcf/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }} \\\n          ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly:${{ github.event.inputs.folly_release }}\n\n      - name: Publish image\n        run: |\n          docker push --all-tags ${{ env.REGISTRY }}/${{ github.repository }}/${{ github.event.inputs.os }}-folly\n```"}
{"id": "63c497b6cbc73931bb1820e9", "level": "level5", "llm_response": "```yml\nname: Lib Injection Test\non:\n  pull_request:\n", "answer": "```yaml name: \"Lib Injection Test\"\n\non:\n  pull_request:\n  push:\n    branches: [master]\n  schedule:\n    - cron: '0 4 * * *'\n\njobs:\n  lib-injection-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # 2.3.4\n\n      - name: Log in to the Container registry\n        uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Create k8s Kind Cluster\n        uses: helm/kind-action@d08cf6ff1575077dee99962540d77ce91c62387d # 1.3.0\n        with:\n          config: k8s/kind-config.yaml\n          kubectl_version: v1.22.10\n          node_image: kindest/node:v1.22.9\n\n      - name: Deploy apm test trace agent\n        run: |\n          kubectl apply -f k8s/dd-apm-test-agent-config.yaml\n          kubectl rollout status daemonset/datadog-agent\n          kubectl wait $(kubectl get pods -l app=datadog-agent -o name) --for condition=ready\n          sleep 5\n\n      - name: Npm pack for injection image\n        run: |\n          npm pack\n\n      - uses: ./.github/actions/injection\n        with:\n          init-image-version: ${GITHUB_SHA}\n\n      - name: Build sample app image\n        run: |\n          docker build k8s/sample-app --build-arg npm_pkg=./dd-trace.tgz -t ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n          docker push ghcr.io/datadog/dd-trace-js/sample-app:${GITHUB_SHA}\n\n      - name: Deploy test pod\n        run: |\n          sed -i \"s|LATEST|$GITHUB_SHA|g\" k8s/test-pod.yaml\n          sleep 5\n          n=0\n          until [ \"$n\" -ge 5 ]\n          do\n            kubectl apply -f k8s/test-pod.yaml && sleep 5 && kubectl wait pod/sample-app --for condition=ready && break\n            n=$((n+1))\n            sleep 15\n          done\n          sleep 5\n\n      - name: Test\n        run: |\n          wget http://localhost:18126/test/session/traces || true\n          kubectl logs $(kubectl get pods -l app=datadog-agent -o name)\n\n          TRACES=`cat traces`\n          if [[ ${#TRACES} -lt 3 ]] ; then\n            echo \"No traces reported - ${TRACES}\"\n            exit 1\n          else\n            echo \"Traces reported - ${TRACES}\"\n            exit 0\n          fi\n```"}
{"id": "63c49b7b1842bc13d777d9d4", "level": "level5", "llm_response": "```yml\nname: Automated review labels\non:\n  pull_request:\n", "answer": "```yaml   name: 'Automated review labels'\n\n  on:\n    issue_comment:\n      types: [created]\n    issues:\n      types: [unlabeled]\n    pull_request_target:\n      types: [unlabeled]\n\n  jobs:\n\n    add-review-team-label:\n      name: 'When pinged, label a PR with review team'\n      if: >\n        github.event.issue\n        && github.event.issue.pull_request\n        && !contains(github.event.issue.labels.*.name, 'review-requested')\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-teams\n          id: check_teams\n          uses: actions/github-script@v6\n          with:\n            script: |\n              const teams = [\n                '@conda-forge/staged-recipes',\n                '@conda-forge/help-c-cpp',\n                '@conda-forge/help-cdts',\n                '@conda-forge/help-go',\n                '@conda-forge/help-java',\n                '@conda-forge/help-julia',\n                '@conda-forge/help-nodejs',\n                '@conda-forge/help-perl',\n                '@conda-forge/help-python',\n                '@conda-forge/help-python-c',\n                '@conda-forge/help-r',\n                '@conda-forge/help-ruby'\n              ];\n              let found_label = false;\n              for (const team of teams) {\n                  let text = context.payload.comment.body;\n                  const regex = new RegExp(team + '[^\\-]|' + team + '$');\n                  let result = regex.test(text);\n                  if (result) {\n                      const slug = team.replace(\"@conda-forge/\", \"\");\n                      const label = slug.replace(\"help-\", \"\");\n                      found_label = true;\n                      github.rest.issues.addLabels({\n                          issue_number: context.issue.number,\n                          owner: context.repo.owner,\n                          repo: context.repo.repo,\n                          labels: [label, 'review-requested']\n                      });\n                      // NOTE: GitHub Actions default token lacks permission to\n                      // assign teams for review; external bot required for\n                      // that feature.\n                      //\n                      https://github.com/conda-forge/staged-recipes/issues/18023#issuecomment-1080451231\n                      console.log(`Somebody mentioned ${slug}.`);\n                  }\n              }\n              return found_label;\n        - name: remove-labels\n          if: >\n            (steps.check_teams.outputs.result == 'true')\n            && contains(github.event.issue.labels.*.name, 'Awaiting author contribution')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.removeLabel({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  name: ['Awaiting author contribution']\n              })\n\n    check-remove-review-requested-label:\n      name: 'Check that review-requested label was removed by a team member'\n      if: >\n        github.event.action == 'unlabeled'\n        && github.event.label.name == 'review-requested'\n      runs-on: ubuntu-latest\n      steps:\n        - name: check-team-membership\n          id: check_team_review\n          uses: actions/github-script@v6\n          with:\n            github-token: ${{ secrets.GH_TOKEN }}\n            script: |\n              console.log(`Label was removed by ${context.payload.sender.login}`);\n              let memberships = [];\n              for (const team of ['staged-recipes', 'core']) {\n                  const membership = github.rest.teams.getMembershipForUserInOrg({\n                      org: 'conda-forge',\n                      team_slug: team,\n                      username: context.payload.sender.login,\n                  });\n                  memberships.push(membership.then((result) => {\n                      if (result.status == 200 && result.data.state == 'active') {\n                          console.log('User is authorized');\n                          return true;\n                      } else {\n                          console.log('User is nonactive');\n                          return false;\n                      }\n                  }).catch((error) => {\n                      // Non-membership raises an HttpError\n                      return false;\n                  }));\n              }\n              return Promise.all(memberships).then((values) => {\n                  let is_authorized = false;\n                  for (const m of values) {\n                      is_authorized = is_authorized || m;\n                  }\n                  return is_authorized;\n              });\n        - name: add-labels\n          if: >\n            (steps.check_team_review.outputs.result == 'true')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['Awaiting author contribution']\n              });\n        - name: readd-review-label\n          if: >\n            (steps.check_team_review.outputs.result == 'false')\n          uses: actions/github-script@v6\n          with:\n            script: |\n              github.rest.issues.addLabels({\n                  issue_number: context.issue.number,\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  labels: ['review-requested']\n              });\n              console.log('Non-members of staged recipes cannot remove this label.')\n```"}
{"id": "63c4a1751899db5886519f71", "level": "level5", "llm_response": "```yaml\n---\nname: Auto Author Assign\non:\n  pull_request:\n", "answer": "```yaml name: \"Auto Author Assign\"\n\non:\n  pull_request_target:\n    types: [opened, reopened]\n\npermissions:\n  pull-requests: write\n\njobs:\n  assign-author:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: toshimaru/auto-author-assign@v1.4.0\n```"}
{"id": "63c49a6c1899db58864ed1c5", "level": "level5", "llm_response": "```yml\nname: build-publish-unpacker-image\non:\n ", "answer": "```yaml name: build-publish-unpacker-image\non:\n  workflow_dispatch:\njobs:\n  build-and-publish:\n    runs-on: self-hosted\n    steps:\n      - name: Checkout Epinio\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Login to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push unpacker\n        uses: docker/build-push-action@v3\n        with:\n          push: true\n          context: images/.\n          file: images/unpacker-Dockerfile\n          tags: ghcr.io/epinio/epinio-unpacker:1.0\n          build-args: |\n            VERSION=1.0\n```"}
{"id": "63c49bdc1899db58864f62db", "level": "level5", "llm_response": "```yml\nname: Ruby test and build\n\non:\n  pull_request", "answer": "```yaml # License: LGPL-3.0-or-later\nname: Ruby test and build\non: \n  pull_request:\n    paths-ignore:\n      - \"**.[jt]sx?\"\n      - \"**.md\"\n      - \"**.md\"\n      - \"NOTICE-js\"\n      - \"NOTICE-ruby\"\n      - \"package.json\"\n      - \"yarn.lock\"\n    types: [opened, reopened, synchronize]\njobs:\n  package-download: # this downloads and caches all of the packages. That way if a future job fails, the caching will still occur\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n  main_build:\n    needs: package-download\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n        node: [14.19.1]\n        ruby: [2.7.6]\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup PostgreSQL with PostgreSQL extensions and unprivileged user\n        uses: Daniel-Marynicz/postgresql-action@1.0.0\n        with:\n          postgres_image_tag: 12-alpine\n          postgres_user: houdini_user\n          postgres_password: password\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node }}\n          cache: 'yarn'\n      - run: yarn install --frozen-lockfile\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n      - name: install bess dependencies\n        run: |\n          cd gems/bess\n          bundle install --jobs 3 --retry 3\n      - name: run spec for bess\n        run: |\n          cd gems/bess\n          bundle exec rake spec\n      - run: bin/setup ci\n      - name: Generate JS routes\n        run: bin/rails js:routes:typescript\n      - name: run spec\n        run: bundle exec rake spec\n    \n```"}
{"id": "63c49aca33b087f6bde47f19", "level": "level5", "llm_response": "```yml\n---\nname: Node CI\non:\n  push:\n   ", "answer": "```yaml name: Node CI\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - name: Fetch commit count\n        env:\n          PR_COMMIT_COUNT: ${{ github.event.pull_request.commits }}\n        run: |\n          echo \"FETCH_DEPTH=$(($PR_COMMIT_COUNT + 1))\" >> $GITHUB_ENV\n\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: ${{ env.FETCH_DEPTH }}\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-lint-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Collect changed files\n        run: |\n          mkdir ~/tmp/\n          git diff ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --diff-filter=ACM --name-only --relative '*src/**/*.ts' > ~/tmp/changed_files\n          echo -e \"Changed files: \\n$(cat ~/tmp/changed_files)\"\n\n      - name: Lint\n        run: npx eslint $(cat ~/tmp/changed_files)\n\n      - name: Check types\n        run: npm run checktype\n\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - name: Cache node modules\n        id: cache-dep\n        uses: actions/cache@v3\n        env:\n          cache-name: cache-node-modules\n        with:\n          path: node_modules\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}\n\n      - name: Install dependencies\n        if: steps.cache-dep.outputs.cache-hit != 'true'\n        run: npm ci\n\n      - name: Build release\n        run: npm run release\n\n      - name: Test generated DTS\n        run: npm run test:dts\n\n      - name: Unit Test\n        run: npm run test\n```"}
{"id": "63c4a03933b087f6bde6b332", "level": "level5", "llm_response": "```yml\nname: Go Checks\non:\n  push:\n    branches", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\non: [push, pull_request]\nname: Go Checks\n\njobs:\n  unit:\n    runs-on: ubuntu-latest\n    name: All\n    env:\n      RUNGOGENERATE: false\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - uses: actions/setup-go@v3\n        with:\n          go-version: \"1.19.x\"\n      - name: Run repo-specific setup\n        uses: ./.github/actions/go-check-setup\n        if: hashFiles('./.github/actions/go-check-setup') != ''\n      - name: Read config\n        if: hashFiles('./.github/workflows/go-check-config.json') != ''\n        run: |\n          if jq -re .gogenerate ./.github/workflows/go-check-config.json; then\n            echo \"RUNGOGENERATE=true\" >> $GITHUB_ENV\n          fi\n      - name: Install staticcheck\n        run: go install honnef.co/go/tools/cmd/staticcheck@376210a89477dedbe6fdc4484b233998650d7b3c # 2022.1.3 (v0.3.3)\n      - name: Check that go.mod is tidy\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            go mod tidy\n            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then\n              echo \"go.sum was added by go mod tidy\"\n              exit 1\n            fi\n            git diff --exit-code -- go.sum go.mod\n      - name: gofmt\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        run: |\n          out=$(gofmt -s -l .)\n          if [[ -n \"$out\" ]]; then\n            echo $out | awk '{print \"::error file=\" $0 \",line=0,col=0::File is not gofmt-ed.\"}'\n            exit 1\n          fi\n      - name: go vet\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: go vet ./...\n      - name: staticcheck\n        if: ${{ success() || failure() }} # run this step even if the previous one failed\n        uses: protocol/multiple-go-modules@v1.2\n        with:\n          run: |\n            set -o pipefail\n            staticcheck ./... | sed -e 's@\\(.*\\)\\.go@./\\1.go@g'\n      - name: go generate\n        uses: protocol/multiple-go-modules@v1.2\n        if: (success() || failure()) && env.RUNGOGENERATE == 'true'\n        with:\n          run: |\n            git clean -fd # make sure there aren't untracked files / directories\n            go generate ./...\n            # check if go generate modified or added any files\n            if ! $(git add . && git diff-index HEAD --exit-code --quiet); then\n              echo \"go generated caused changes to the repository:\"\n              git status --short\n              exit 1\n            fi\n```"}
{"id": "63c498d76fc19abdf9cabcf5", "level": "level5", "llm_response": "```yml\nname: build\non:\n  push:\n    branches:\n", "answer": "```yaml name: build\non: [push, pull_request]\n\njobs:\n  build:\n    strategy:\n      matrix:\n        go-version: [~1.16, ^1]\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    runs-on: ${{ matrix.os }}\n    env:\n      GO111MODULE: \"on\"\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3.3.1\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Download Go modules\n        run: go mod download\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test ./...\n```"}
{"id": "63c49c3db008460c1df39721", "level": "level5", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n    branches:\n    - master\n\njobs:\n  Debug-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Debug\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Debug Build and Test\n      working-directory: build/Debug\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Debug ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Debug\n        path: build/Debug/bin/llvm-mctoll\n\n  Release-Build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: prerequisites\n      run: |\n        echo 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main' | sudo tee -a /etc/apt/sources.list\n        sudo apt update\n        sudo apt install -y ninja-build clang\n        # To generate ARM binaries (via cross compilation) for tests\n        sudo apt install -y gcc-multilib\n        sudo apt install -y gcc-multilib-arm-linux-gnueabi\n        sudo update-alternatives --install /usr/bin/cc  cc  /usr/bin/clang 200\n        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 200\n      shell: bash\n    - name: clone\n      run: |\n        # Clone LLVM Monorepo\n        git clone --depth 10000 -b master https://github.com/llvm/llvm-project.git .\n        # Clone llvm-mctoll\n        git clone https://github.com/$GITHUB_REPOSITORY llvm/tools/llvm-mctoll\n        # Set the tip of llvm-mctoll\n        pushd llvm/tools/llvm-mctoll && git checkout master && popd\n        # Set the version of LLVM Monorepo to use for build based on $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt\n        LLVM_MONOREPO_COMMIT=\"$(awk '/commit/ {print $2}' $GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/LLVMVersion.txt)\"\n        echo \"Using LLVM Monorepo commit commit $LLVM_MONOREPO_COMMIT\"\n        git checkout $LLVM_MONOREPO_COMMIT\n        # Create debug build directory\n        mkdir -p build/Release\n    - run: |\n        echo \"::add-matcher::$GITHUB_WORKSPACE/llvm/tools/llvm-mctoll/.github/cpp.json\"\n    - name: Release Build and Test\n      working-directory: build/Release\n      run: cmake -G Ninja -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=Release ../../llvm &&  ninja clang && ninja opt &&  ninja lld && ninja check-mctoll\n      shell: bash\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v1\n      with:\n        name: llvm-mctoll-Release\n        path: build/Release/bin/llvm-mctoll\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level5", "llm_response": "```yml\nname: Require pull request labels\n\non:\n  pull_request", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c4a059cbc73931bb1b9cf8", "level": "level5", "llm_response": "```yml\nname: Go\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: Go\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [1.19]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n\n      - name: Install libolm\n        run: sudo apt-get install libolm-dev libolm3\n\n      - name: Install goimports\n        run: |\n          go install golang.org/x/tools/cmd/goimports@latest\n          export PATH=\"$HOME/go/bin:$PATH\"\n\n      - name: Install pre-commit\n        run: pip install pre-commit\n\n      - name: Lint\n        run: pre-commit run -a\n```"}
{"id": "63c49ad91e33648075796ee0", "level": "level5", "llm_response": "```yml\nname: Draft Release\non:\n  branch: master\n", "answer": "```yaml name: Draft Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5c621ac4f2678a5bd7759", "level": "level5", "llm_response": "```yml\nname: Reusable - Create Java contrib pull request\non", "answer": "```yaml name: Reusable - Create Java contrib pull request\n\non:\n  workflow_call:\n    inputs:\n      version:\n        type: string\n        required: true\n    secrets:\n      BOT_TOKEN:\n        required: true\n  # to help with partial release build failures\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version\"\n        required: true\n\njobs:\n  create-java-contrib-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          repository: opentelemetrybot/opentelemetry-java-contrib\n          # this is the personal access token used for \"git push\" below\n          token: ${{ secrets.BOT_TOKEN }}\n\n      - name: Initialize pull request branch\n        env:\n          VERSION: ${{ inputs.version }}\n        run: |\n          git remote add upstream https://github.com/open-telemetry/opentelemetry-java-contrib.git\n          git fetch upstream\n          git checkout -b update-opentelemetry-sdk-to-${VERSION} upstream/main\n\n      - name: Update version\n        env:\n          VERSION: ${{ inputs.version }}\n        run: ./.github/scripts/update-sdk-version.sh $VERSION\n\n      - name: Use CLA approved github bot\n        run: .github/scripts/use-cla-approved-github-bot.sh\n\n      - name: Create pull request against opentelemetry-java-contrib\n        env:\n          # this is the personal access token used for \"gh pr create\" below\n          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}\n          VERSION: ${{ inputs.version }}\n        run: |\n          message=\"Update the SDK and instrumentation versions to $VERSION\"\n          body=$(cat << EOF\n          Update the SDK and instrumentation versions to \\`$VERSION\\`.\n          \n          Note: you will likely need to re-run the checks on this PR in an hour or so, once the\n          updated dependencies are visible in maven central.\n          EOF\n          )\n\n          # gh pr create doesn't have a way to explicitly specify different head and base\n          # repositories currently, but it will implicitly pick up the head from a different\n          # repository if you set up a tracking branch\n\n          git commit -a -m \"$message\"\n          git push --set-upstream origin HEAD:update-opentelemetry-sdk-to-${VERSION}\n          gh pr create --title \"$message\" \\\n                       --body \"$body\" \\\n                       --repo open-telemetry/opentelemetry-java-contrib \\\n                       --base main\n```"}
{"id": "63c49781517fc08c1eed75fb", "level": "level5", "llm_response": "```yml\nname: Release\non: push:\n  branches:\n   ", "answer": "```yaml \nname: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.14.0\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm run test\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npm run semantic-release\n```"}
{"id": "63c49d1d6fc19abdf9cc7410", "level": "level5", "llm_response": "```yml\n---\nname: pre-commit\non:\n  push:\n   ", "answer": "```yaml # yaml-language-server: $schema=https://json.schemastore.org/github-workflow\n\nname: pre-commit\n\non:\n  push:\n  pull_request:\n\njobs:\n  pre-commit:\n    name: Detecting code style issues\n    runs-on: ubuntu-latest\n    # The Dockerfile for this container can be found at:\n    # https://github.com/Holzhaus/mixxx-ci-docker\n    container: holzhaus/mixxx-ci:20220805\n    steps:\n      - name: \"Check out repository\"\n        uses: actions/checkout@v3\n        with:\n          # Unfortunately we need the whole history and can't use a shallow clone\n          # because the Appstream Metadata hook parses the history to find the\n          # latest changelog modification date. Otherwise, `fetch-depth: 2` would\n          # suffice.\n          fetch-depth: 0\n\n      - name: \"Add GitHub workspace as a safe directory\"\n        # Without this, git commands will fail due to mismatching permissions in\n        # the container. See actions/runner#2033 for details.\n        #\n        # The actions/checkout action should already take care of this thanks to\n        # commit actions/checkout@55fd82fc42c0cdd6f1f480dd23f60636a42f6f5c, but\n        # it seems like that's not working properly.\n        run: |\n          git config --global --add safe.directory \"${GITHUB_WORKSPACE}\"\n          git config --global --list\n\n      - name: \"Detect code style issues (push)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'push'\n        # There are too many files in the repo that have formatting issues. We'll\n        # disable these checks for now when pushing directly (but still run these\n        # on Pull Requests!).\n        env:\n          SKIP: clang-format,eslint,no-commit-to-branch\n\n      - name: \"Detect code style issues (pull_request)\"\n        uses: pre-commit/action@v3.0.0\n        if: github.event_name == 'pull_request'\n        env:\n          SKIP: no-commit-to-branch\n        with:\n          # HEAD is the not yet integrated PR merge commit +refs/pull/xxxx/merge\n          # HEAD^1 is the PR target branch and HEAD^2 is the HEAD of the source branch\n          extra_args: --from-ref HEAD^1 --to-ref HEAD\n\n      - name: \"Generate patch file\"\n        if: failure()\n        run: |\n          git diff-index -p HEAD > \"${PATCH_FILE}\"\n          [ -s \"${PATCH_FILE}\" ] && echo \"UPLOAD_PATCH_FILE=${PATCH_FILE}\" >> \"${GITHUB_ENV}\"\n        env:\n          PATCH_FILE: pre-commit.patch\n\n      - name: \"Upload patch artifact\"\n        if: failure() && env.UPLOAD_PATCH_FILE != null\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ env.UPLOAD_PATCH_FILE }}\n          path: ${{ env.UPLOAD_PATCH_FILE }}\n\n      # AppStream metadata has been generated/updated by a pre-commit hook\n      - name: \"Validate AppStream metadata\"\n        run: appstreamcli validate res/linux/org.mixxx.Mixxx.metainfo.xml\n```"}
{"id": "63c4966e6fc19abdf9c9c155", "level": "level5", "llm_response": "```yml\n---\nname: tfsec release\n\non:\n  push:\n", "answer": "```yaml name: tfsec release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  build:\n    name: Create binary + dockerhub releases\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: go.mod\n          cache: true\n          cache-dependency-path: go.sum\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5.1.0\n        with:\n          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Set up QEMU\n        id: qemu\n        uses: docker/setup-qemu-action@v2\n\n      - name: Login to docker.io registry\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USER }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Release\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```"}
{"id": "63c499d5517fc08c1eee63cc", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml name: 'CodeQL'\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  schedule:\n    - cron: '0 3 * * 1'\n\npermissions:\n  actions: read\n  security-events: write\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: ['javascript']\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0cc1899db5886515e72", "level": "level5", "llm_response": "```yml\n---\nname: Deploy itch.io Packages\non: push\n", "answer": "```yaml name: Deploy itch.io Packages\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Git Tag'\n        required: true\n        default: 'release-xxxxxxxx'\n\njobs:\n  itch:\n    name: Deploy to itch.io\n    runs-on: ubuntu-20.04\n    if: github.repository == 'openra/openra'\n    steps:\n      - name: Download Packages\n        run: |\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64.exe\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}-x64-winportable.zip\" -O \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-${{ github.event.inputs.tag }}.dmg\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Dune-2000-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Red-Alert-x86_64.AppImage\"\n          wget -q \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/OpenRA-Tiberian-Dawn-x86_64.AppImage\"\n          wget -q \"https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tag }}/packaging/.itch.toml\"\n          zip -u \"OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\" .itch.toml\n\n      - name: Publish Windows Installer\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: win\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64.exe\n\n      - name: Publish Windows Itch Bundle\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: itch\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}-x64-win-itch.zip\n\n      - name: Publish macOS Package\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: macos\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-${{ github.event.inputs.tag }}.dmg\n\n      - name: Publish RA AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-ra\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Red-Alert-x86_64.AppImage\n\n      - name: Publish TD AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-cnc\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Tiberian-Dawn-x86_64.AppImage\n\n      - name: Publish D2k AppImage\n        uses: josephbmanley/butler-publish-itchio-action@master\n        env:\n          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n          CHANNEL: linux-d2k\n          ITCH_GAME: openra\n          ITCH_USER: openra\n          VERSION: ${{ github.event.inputs.tag }}\n          PACKAGE: OpenRA-Dune-2000-x86_64.AppImage\n```"}
{"id": "63c49c611e336480757a0842", "level": "level5", "llm_response": "```yml\nname: Build jellyfin-blog\n\non:\n  pull_request", "answer": "```yaml name: '\ud83c\udfd7\ufe0f Build jellyfin-blog'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\non:\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '.github/*.json'\n\njobs:\n  build:\n    uses: ./.github/workflows/_meta.yaml\n    with:\n      publish: false\n```"}
{"id": "63c49edf1842bc13d779394c", "level": "level5", "llm_response": "```yml\n---\nname: RSpec\non:\n  pull_request:\n", "answer": "```yaml name: RSpec\non:\n  pull_request:\n  push:\n    branches: [ main ]\njobs:\n  coverage:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 3.1\n          bundler: 2.3.19\n          bundler-cache: true\n\n      - name: Install Code Climate reporter\n        run: |\n          sudo curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n          sudo chmod +x ./cc-test-reporter\n      - name: Generate Coverage\n        env:\n          CC_TEST_REPORTER_ID: 88e524e8f638efe690def7a6e2c72b1a9db5cdfa74548921b734d609a5858ee5\n        run: |\n          export GIT_BRANCH=${GITHUB_REF#refs/heads/}\n          export GIT_COMMIT_SHA=${GITHUB_SHA}\n          echo $GIT_BRANCH\n          echo $GIT_COMMIT_SHA\n          ./cc-test-reporter before-build\n          COV=true bin/rspec --require spec_helper --tag ~perf\n          ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?\n\n  tests:\n    services:\n      toxiproxy:\n        image: ghcr.io/shopify/toxiproxy\n        ports:\n          - 8474:8474\n          - 21212:21212\n      redis:\n        image: redis:latest\n        ports:\n          - 6379:6379\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ruby: [2.5, 2.6, 2.7, '3.0', 3.1]\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler: 2.3.19\n          bundler-cache: true\n      - run: bin/appraisal install --jobs=$(nproc) --retry=$(nproc)\n      - run: bin/appraisal rspec --require spec_helper --tag ~perf\n```"}
{"id": "63c5c634ac4f2678a5bd7cfa", "level": "level5", "llm_response": "```yml\n---\nname: Issue Subscriber\non:\n  event:\n   ", "answer": "```yaml name: Issue Subscriber\n\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  auto-subscribe:\n    runs-on: ubuntu-latest\n    if: github.repository == 'llvm/llvm-project'\n    steps:\n      - name: Setup Automation Script\n        run: |\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/github-automation.py\n          curl -O -L https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$GITHUB_SHA/llvm/utils/git/requirements.txt\n          chmod a+x github-automation.py\n          pip install -r requirements.txt\n\n      - name: Update watchers\n        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable\n        env:\n          LABEL_NAME: ${{ github.event.label.name }}\n        run: |\n          ./github-automation.py \\\n            --token '${{ secrets.ISSUE_SUBSCRIBER_TOKEN }}' \\\n            issue-subscriber \\\n            --issue-number '${{ github.event.issue.number }}' \\\n            --label-name \"$LABEL_NAME\"\n```"}
{"id": "63c494bb7843b61269a03187", "level": "level5", "llm_response": "```yml\n---\nname: Lint-and-test\non:\n  push", "answer": "```yaml name: lint-and-test\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    tags-ignore:\n      - \"**\"  # Skip re-linting when tags are added\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install poetry\n        poetry install\n\n    - name: Run flake8\n      run: poetry run flake8 .\n\n    - name: Run mypy\n      run: poetry run mypy .\n\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n      fail-fast: false\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools importlib-metadata\n        pip install tox-gh-actions\n\n    - name: Run tests w/tox\n      run: tox\n\n    - name: Cache coverage for ${{ matrix.python-version }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: cov_py${{ matrix.python-version }}\n        path: .coverage\n\n  combine-cov:\n    runs-on: ubuntu-latest\n    needs: test\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Pull coverage workflow artifacts\n      uses: actions/download-artifact@v3\n      with:\n        path: cov_cache/\n\n    - name: Install cov & combine\n      run: |\n        pip install coverage\n        coverage combine ./cov_cache/**/.coverage\n\n    - name: Report coverage\n      run: |\n        echo '**Combined Coverage**' >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage report -m --skip-covered >> $GITHUB_STEP_SUMMARY\n        echo '```' >> $GITHUB_STEP_SUMMARY\n        coverage html\n\n    - name: Publish cov HTML\n      uses: actions/upload-artifact@v3\n      with:\n        path: htmlcov/\n        name: cov_report_html\n```"}
{"id": "63c49df933b087f6bde5cc80", "level": "level5", "llm_response": "```yml\nname: Deploy CI\non:\n  push:\n    branches", "answer": "```yaml name: Deploy CI\n\nenv:\n  NODE_OPTIONS: --max-old-space-size=6144\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: 'Setup Node.js'\n        uses: actions/setup-node@v3\n        with:\n          node-version: 14\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v3\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-\n\n      - name: Pnpm action\n        uses: pnpm/action-setup@v2\n        with:\n          version: latest\n          run_install: true\n\n      - name: Build\n        run: pnpm build:site\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n          cname: watermark.xingkang.wang\n```"}
{"id": "63c4a15b1842bc13d77a36dc", "level": "level5", "llm_response": "```yml\n---\ntrigger:\n  branches:\n    - main\n  tags", "answer": "```yaml \non: push\n\njobs:\n  test-idiorm-with-php5-2:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n\n    env:\n      REGISTRY: ghcr.io\n      IMAGE_NAME: treffynnon/php5.2cli:latest\n\n    name: 'PHP 5.2'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Pull docker image\n        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n\n      - name: Run PHPUnit tests\n        run: docker run -t -v $(realpath ./):/tmp/idiorm --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} /root/phpunit -c /tmp/idiorm/phpunit.xml\n\n  test-idiorm-against-php-matrix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-versions:     ['5.4', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4']\n        phpunit-versions: ['4.8']\n        include:\n          - php-versions: '8.0'\n            phpunit-versions: '8.5.21'\n          - php-versions: '8.2'\n            phpunit-versions: '8.5.21'\n\n    name: PHP ${{ matrix.php-versions }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php-versions }}\n          coverage: xdebug\n          tools: composer, phpunit:${{ matrix.phpunit-versions }}\n\n      - name: Setup problem matchers for PHPUnit\n        run: echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\"\n\n      - name: Add PHP 8 return types\n        if: ${{ matrix.php-versions >= '8.0' }}\n        run: |\n          sed -i 's#setUp()#setUp(): void#' test/*.php\n          sed -i 's#tearDown()#tearDown(): void#' test/*.php\n\n      - name: Run phpunit tests\n        run: composer run-script test -- --colors --coverage-text\n```"}
{"id": "63c49cdc517fc08c1eef9339", "level": "level5", "llm_response": "```yml\nname: Build debug apk\n\non:\n  pull_request:\n", "answer": "```yaml name: Build debug apk\n\non:\n  pull_request:\n    branches:\n      - develop\n    paths-ignore:\n      - '**.md'\n      - '.github/**'\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build_debug_apk:\n    name: Build debug apk\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build\n        uses: gradle/gradle-build-action@v2\n        with:\n          arguments: assembleInternalDebug\n\n      - name: Obtain debug apk\n        if: always()\n        run: cp $(find . -regex '.*outputs/apk/.*internal-debug.apk') pr-ddg-debug.apk\n\n      - name: Upload debug apk\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: pr-ddg-debug\n          path: pr-ddg-debug.apk```"}
{"id": "63c497e4cbc73931bb18352f", "level": "level5", "llm_response": "```yml\nname: binder-badge\non:\n  pull_request:\n   ", "answer": "```yaml name: binder-badge\non:\n  pull_request_target:\n\njobs:\n  badge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: manics/action-binderbadge@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4990d33b087f6bde3ccdf", "level": "level5", "llm_response": "```yml\nname: Test C++\non:\n  branches:\n    -", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Test C++\non:\n  workflow_dispatch:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n    paths:\n    - '.github/workflows/test-lang-c\\+\\+.yml'\n    - 'lang/c\\+\\+/**'\n\ndefaults:\n  run:\n    working-directory: lang/c++\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Dependencies\n        run: sudo apt update && sudo apt-get install -qqy cppcheck libboost-all-dev libsnappy-dev cmake\n\n      - name: Clean\n        run: ./build.sh clean\n\n      - name: Lint\n        run: ./build.sh lint\n\n      - name: Test\n        run: ./build.sh test\n\n      - name: Release build\n        run: |\n          mkdir -p build\n          cd build\n          cmake -G \"Unix Makefiles\" -D CMAKE_BUILD_TYPE=Release ..\n```"}
{"id": "63c49a65517fc08c1eee9b6d", "level": "level5", "llm_response": "```yml\nname: Compress images\n\non:\n  pull_request:\n", "answer": "```yaml name: Compress images\n\non:\n  pull_request:\n    paths:\n      - '**.jpg'\n      - '**.png'\n      - '**.webp'\n\njobs:\n  build:\n    name: calibreapp/image-actions\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Compress Images\n        uses: calibreapp/image-actions@main\n        with:\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e5933b087f6bde5f2bb", "level": "level5", "llm_response": "```yaml\nname: Docker Build TeamCity\non:\n  push:\n   ", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2022-05-26 12:00:50 +0100 (Thu, 26 May 2022)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/Dockerfiles\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Docker Build TeamCity\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - teamcity/Dockerfile\n      - .github/workflows/docker_build_teamcity.yaml\n  workflow_dispatch:\n  #schedule:\n  #  - cron: '0 2 * * *'\n\njobs:\n  docker_build:\n    name: Docker Build\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: |\n      github.repository_owner == 'HariSekhon' &&\n      (\n        github.event_name == 'schedule' ||\n        (\n          github.ref_type == 'branch' &&\n          ( github.ref_name == github.event.repository.default_branch || github.ref_name == 'docker' )\n        )\n      )\n    uses: HariSekhon/GitHub-Actions/.github/workflows/docker_build.yaml@master\n    with:\n      repo_tags: |\n        ghcr.io/harisekhon/teamcity:latest\n        harisekhon/teamcity:alpine\n      context: teamcity\n    secrets:\n      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}\n      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n    permissions:\n      contents: read\n      packages: write\n```"}
{"id": "63c49ec1cbc73931bb1af7f3", "level": "level5", "llm_response": "```yml\nname: Aggregate sources and rebuild\non:\n  schedule:\n", "answer": "```yaml name: Aggregate sources and rebuild\n\non:\n  schedule:\n    # 19:42 UTC every Sunday\n    - cron: \"42 19 * * 0\"\n\n  # push:\n    # branches:\n      # - gh-pages\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\"]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: gh-pages\n          fetch-depth: 1\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install -r scripts/requirements.txt\n\n      - name: Aggregate and build\n        run: |\n          rm -rf src/aggregations\n          python scripts/build.py auto aggregate\n          python scripts/build.py auto\n\n      - name: Commit files\n        run: |\n          git config user.name 'GitHub Action'\n          git config user.email 'actions@github.com'\n          git add -u .\n          git commit -m \"cd: auto build at $(TZ=UTC date +'%F'T'%T'Z)\"\n          git push --force-with-lease\n```"}
{"id": "63c4975e1e33648075780971", "level": "level5", "llm_response": "```yml\nname: Build docker sample-extension-dotnet-minimalapi\n\n", "answer": "```yaml name: Build docker sample-extension-dotnet-minimalapi\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - \"sample-extension-dotnet-minimalapi/**\"\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.0.x'\n    - name: 'Build .NET Project'\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/TodoApi'\n        dotnet publish -c Release\n        popd     \n    - name: Build the Docker image\n      shell: bash\n      run: |\n        pushd './sample-extension-dotnet-minimalapi/'\n        make build-image\n        popd\n    - name: Slack Notify\n      uses: rtCamp/action-slack-notify@v2.2.0\n      if: ${{ failure() }}\n      env:\n        SLACK_MESSAGE: 'Build Failed for ${{ env.SAMPLE_NAME }}'\n        SLACK_WEBHOOK: ${{ secrets.BUILD_FAIL_NOTIFY_SLACK_URL }}    \n```"}
{"id": "63c498d933b087f6bde3b708", "level": "level5", "llm_response": "```yaml\nname: No Response\non:\n  pull_request:\n    types", "answer": "```yaml name: No Response\n\n# **What it does**: Closes issues where the original author doesn't respond to a request for information.\n# **Why we have it**: To remove the need for maintainers to remember to check back on issues periodically to see if contributors have responded.\n# **Who does it impact**: Everyone that works on docs or docs-internal.\n\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ github.token }}\n          daysUntilClose: 14 # Number of days of inactivity before an Issue is closed for lack of response\n          responseRequiredLabel: \"Reporter Feedback\" # Label indicating that a response from the original author is required\n          closeComment: >\n            This issue has been automatically closed because there has been no response\n            to our request for more information. With only the\n            information that is currently in the issue, we don't have enough information\n            to take action. Please reach out if you have or find the answers we need so\n            that we can investigate further. See [this blog post on bug reports and the\n            importance of repro steps](https://www.lee-dohm.com/2015/01/04/writing-good-bug-reports/)\n            for more information about the kind of information that may be helpful.\n```"}
{"id": "63c49d67517fc08c1eefc9e1", "level": "level5", "llm_response": "```yml\nname: Sync Wiki\non: push event\njobs:\n", "answer": "```yaml name: Sync Wiki\n\n# Ignored. To make it work, we would need a secret named GH_PERSONAL_ACCESS_TOKEN with a Github personal access token with \"repo\" authorization.\n# Inspired in: https://github.com/marketplace/actions/publish-to-github-wiki\n\non:\n  push:\n    branches-ignore:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Sync GitHub Wiki from Sources\n    steps:\n      - run: ./scripts/sync-wiki.sh\n        env:\n          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}\n        shell: bash\n        timeout-minutes: 5\n```"}
{"id": "63c49b9c6fc19abdf9cbda1a", "level": "level5", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - run: npm i\n      - run: npm test\n```"}
{"id": "63c4985e1e3364807578700c", "level": "level5", "llm_response": "```yml\nname: Lint Commit Messages\n\non:\n  pull_request", "answer": "```yaml # Run commitlint on the commit messages in a pull request.\n\nname: Lint Commit Messages\n\non:\n  - pull_request\n\njobs:\n  commitlint:\n    uses: openedx/.github/.github/workflows/commitlint.yml@master\n```"}
{"id": "63c49e451e336480757ac7a0", "level": "level5", "llm_response": "```yml\nname: Documentation Generator\non:\n  push:\n    branches", "answer": "```yaml name: Documentation Generator\non:\n  push:\n    branches:\n      - \"*\"\n      - \"!docs\"\n    tags:\n      - \"*\"\njobs:\n  docs:\n    name: Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n\n      - name: Install dependencies\n        run: yarn --immutable\n\n      - name: Checkout docs branch\n        uses: actions/checkout@v3\n        with:\n          ref: \"docs\"\n          path: \"docs\"\n\n      - name: Generate documentation\n        run: yarn docs\n\n      - name: Move generated docs file\n        run: mv docs.json docs/${{ github.ref_name }}.json\n\n      - name: Commit and push\n        run: |\n          cd docs\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Docs build for ${{ github.ref_type }} ${{ github.ref_name }}: ${{ github.sha }}\"\n          git push\n```"}
{"id": "63c49ad8517fc08c1eeeca56", "level": "level5", "llm_response": "```yml\n---\nname: dependabot-auto-merge\non:", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    \n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          \n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          \n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c4a0f16fc19abdf9cdf46c", "level": "level5", "llm_response": "```yml\n---\nname: Check Lint\n\non:\n  pull_request", "answer": "```yaml name: Check Lint\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  check-lint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Install clang-format\n        run: |\n          sudo apt update\n          sudo apt install clang-format-10\n      - uses: actions/checkout@v3\n      - run: ./scripts/check-lint.sh\n        env:\n          CLANG_FORMAT_PATH: \"/usr/bin/clang-format-10\"\n```"}
{"id": "63c49df81842bc13d778dba8", "level": "level5", "llm_response": "```yml\n---\nname: Pull Request Required Labels\n\non:\n  pull", "answer": "```yaml #  https://github.com/mheap/github-action-required-labels\nname: Pull Request Required Labels\non:\n  pull_request:\n    types: [ opened, labeled, unlabeled, synchronize ]\njobs:\n  label:\n    if: github.event.pull_request.state == 'open'\n    runs-on: ubuntu-latest\n    name: Verify Pull Request has labels\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        with:\n          mode: minimum\n          count: 1\n          labels: \"breaking-change, feature, enhancement, bug, dependencies, documentation, housekeeping\"```"}
{"id": "63c49f50736e7f0ed8c6d7ce", "level": "level5", "llm_response": "```yml\nname: Conventional Commits\non:\n  pull_request", "answer": "```yaml name: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - master\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  commitsar:\n    name: Validate Conventional Commits\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v1\n      - name: Run commitsar\n        uses: docker://outillage/commitsar:0.11.2\n```"}
{"id": "63c49feeb008460c1df50a68", "level": "level5", "llm_response": "```yml\nname: Create Releasable Package Drop\n\non:\n", "answer": "```yaml name: Create Releasable Package Drop\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - release-*\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - uses: actions/setup-node@v3\r\n    - name: npm install and test\r\n      run: |\r\n        npm ci\r\n        npm test\r\n    - name: Adding playwright\r\n      run: npm install --no-save --no-package-lock playwright\r\n    - name: Validate the browser can import TypeScript\r\n      run: gulp test-browser-integration\r\n    - name: LKG, clean, and pack\r\n      run: |\r\n        gulp LKG\r\n        gulp clean\r\n        npm pack ./\r\n        mv typescript-*.tgz typescript.tgz\r\n    - name: Upload built tarfile\r\n      uses: actions/upload-artifact@v3\r\n      with:\r\n        name: tgz\r\n        path: typescript.tgz\r\n```"}
{"id": "63c4a1386fc19abdf9ce1169", "level": "level5", "llm_response": "```yml\nname: Codacy Security Scan\non:\n  push:\n", "answer": "```yaml # This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow checks out code, performs a Codacy security scan\n# and integrates the results with the\n# GitHub Advanced Security code scanning feature.  For more information on\n# the Codacy security scan action usage and parameters, see\n# https://github.com/codacy/codacy-analysis-cli-action.\n# For more information on Codacy Analysis CLI in general, see\n# https://github.com/codacy/codacy-analysis-cli.\n\nname: Codacy Security Scan\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '17 14 * * 5'\n\npermissions:\n  contents: read\n\njobs:\n  codacy-security-scan:\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results\n    name: Codacy Security Scan\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository to the GitHub Actions runner\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis\n      - name: Run Codacy Analysis CLI\n        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b\n        with:\n          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository\n          # You can also omit the token and run the tools that support default configurations\n          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}\n          verbose: true\n          output: results.sarif\n          format: sarif\n          # Adjust severity of non-security issues\n          gh-code-scanning-compat: true\n          # Force 0 exit code to allow SARIF file generation\n          # This will handover control about PR rejection to the GitHub side\n          max-allowed-issues: 2147483647\n\n      # Upload the SARIF file generated in the previous step\n      - name: Upload SARIF results file\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: results.sarif\n```"}
{"id": "63c49eca517fc08c1ef05b75", "level": "level5", "llm_response": "```yml\n---\nname: check-only\non:\n  pull_request:\n", "answer": "```yaml name: check-only\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  desktop-win:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore .\\WolvenKit\\WolvenKit.csproj\n    - name: Build\n      run: dotnet build .\\WolvenKit\\WolvenKit.csproj --no-restore\n\n  console-linux:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 6.x\n\n    - name: Restore dependencies\n      run: dotnet restore ./WolvenKit.CLI/WolvenKit.CLI.csproj\n    - name: Build\n      run: dotnet build ./WolvenKit.CLI/WolvenKit.CLI.csproj --no-restore```"}
{"id": "63c497d3cbc73931bb182d2f", "level": "level5", "llm_response": "```yml\nname: Dependency Review\non:\n  branches:\n    -", "answer": "```yaml name: 'Dependency Review'\non: [ pull_request ]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    continue-on-error: false\n    steps:\n      - name: 'Checkout Repository'\n        uses: actions/checkout@v3\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v2\n        with:\n          fail-on-severity: critical\n          # Representation of this list: https://www.eclipse.org/legal/licenses.php#\n          # Expressed with the help of the following IDs: https://spdx.org/licenses/\n          allow-licenses: >-\n            Adobe-Glyph, Apache-1.0, Apache-1.1, Apache-2.0, Artistic-2.0, BSD-2-Clause, BSD-3-Clause,\n            BSD-4-Clause, 0BSD, BSL-1.0, CDDL-1.0, CDDL-1.1, CPL-1.0, CC-BY-3.0, CC-BY-4.0, CC-BY-2.5,\n            CC-BY-SA-3.0, CC-BY-SA-4.0, CC0-1.0, EPL-1.0, EPL-2.0, FTL, GFDL-1.3-only, IPL-1.0, ISC,\n            MIT, MIT-0, MPL-1.1, MPL-2.0, NTP, OpenSSL, PHP-3.01, PostgreSQL, OFL-1.1, Unlicense,\n            Unicode-DFS-2015, Unicode-DFS-2016, Unicode-TOU, UPL-1.0, W3C-20150513, W3C-19980720, W3C,\n            WTFPL, X11, Zlib, ZPL-2.1\n```"}
{"id": "63c4a061cbc73931bb1ba068", "level": "level5", "llm_response": "```yaml\nname: check-x-pack-heartbeat\non:\n  pull_request", "answer": "```yaml name: check-x-pack-heartbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-heartbeat.yml'\n      - 'x-pack/heartbeat/**'\n      - 'heartbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/heartbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      run: |\n        go install github.com/magefile/mage\n        make -C ${{ env.BEAT_MODULE }} check update\n        make check-no-changes\n```"}
{"id": "63c49d6eb008460c1df40ff3", "level": "level5", "llm_response": "```yml\n---\nname: frontend\non:\n  pull_request:\n   ", "answer": "```yaml name: frontend\n\non:\n  pull_request:\n\njobs:\n\n  frontend:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Node\n        uses: actions/setup-node@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n            node-version: '16.x'\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          yarn\n\n      - name: Lint and test Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn run test\n\n      - name: Store test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        uses: actions/upload-artifact@v3\n        with:\n          name: frontend_coverage\n          path: ./test/unit_test_coverage/clover.xml\n\n      - name: Build Javascript\n        if: steps.filter.outputs.frontend == 'true'\n        run: yarn build\n\n  coverage:\n    runs-on: ubuntu-latest\n    needs:\n      - frontend\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            frontend:\n              - '**.js'\n              - '**package.json'\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements/ci.txt\n\n      - name: Retrieve frontend coverage\n        uses: actions/download-artifact@v3\n        if: steps.filter.outputs.frontend == 'true'\n        with:\n          name: frontend_coverage\n          path: frontend_coverage\n\n      - name: Check frontend test coverage\n        if: steps.filter.outputs.frontend == 'true'\n        run: |\n          diff-cover frontend_coverage/clover.xml --compare-branch=origin/main --fail-under=100\n```"}
{"id": "63c49fae33b087f6bde67bc4", "level": "level5", "llm_response": "```yml\n---\nname: CI\non:\n  push:\n    branches", "answer": "```yaml name: CI\non:\n  push:\n    branches:\n      - main\n      - develop\n  pull_request:\n\njobs:\n  verify_module:\n    name: Verify module\n    strategy:\n      matrix:\n        terraform: [1.1.9]\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - run: terraform fmt -recursive -check=true -write=false\n\n  verify_examples:\n    name: Verify examples\n    strategy:\n      fail-fast: false\n      matrix:\n        terraform: [1.0.11, latest]\n        example:\n          [\n            \"runner-default\",\n            \"runner-docker\",\n            \"runner-multi-region\",\n            \"runner-pre-registered\",\n            \"runner-public\",\n          ]\n    defaults:\n      run:\n        working-directory: examples/${{ matrix.example }}\n    runs-on: ubuntu-latest\n    container:\n      image: hashicorp/terraform:${{ matrix.terraform }}\n    steps:\n      - uses: actions/checkout@v3\n      - run: terraform init -get -backend=false -input=false\n      - if: contains(matrix.terraform, '1.0.')\n        run: terraform fmt -recursive -check=true -write=false\n      - run: terraform validate\n\n  docs:\n    # update docs after merge back to develop\n    if: github.event_name != 'pull_request' && contains('refs/heads/develop', github.ref)\n    name: Auto update terraform docs\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: CHeckout branch\n      uses: actions/checkout@v3\n\n    - name: Generate TF docs\n      uses: terraform-docs/gh-actions@v1.0.0\n      with:\n        find-dir: .\n        git-commit-message: \"docs: auto update terraform docs\"\n        git-push: true\n\n  tfsec:\n    name: tfsec PR commenter\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Clone repo\n        uses: actions/checkout@master\n      - name: tfsec\n        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0\n        with:\n          github_token: ${{ github.token }}\n\n  release:\n    if: github.event_name != 'pull_request' && contains('refs/heads/main', github.ref)\n    name: Release\n    needs: [verify_module, verify_examples]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n\n      - name: Get installation token\n        uses: npalm/action-app-token@v1.0.0\n        id: app-token\n        with:\n          appId: ${{ secrets.APP_ID }}\n          appPrivateKeyBase64: ${{ secrets.APP_PRIVATE_KEY_BASE64 }}\n          appInstallationType: repo\n          appInstallationValue: ${{ github.repository }}\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}\n        run: |\n          cp .release/* .\n          yarn \n          yarn release --repositoryUrl https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git\n```"}
{"id": "63c49df8517fc08c1ef0053c", "level": "level5", "llm_response": "```yml\nname: Dependency Review\non:\n  pull_request:\n   ", "answer": "```yaml name: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit\n\n      - name: 'Checkout Repository'\n        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@fd675ced9c17f1393071e1a2e685ab527e585a0c\n```"}
{"id": "63c49e6f1842bc13d7790c57", "level": "level5", "llm_response": "```yml\nname: Auto merge\non:\n  event:\n    name", "answer": "```yaml name: Auto merge\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - 'Tests'\n\njobs:\n  merge-me:\n    name: Auto merge\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Auto merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2\n        with:\n          # Depending on branch protection rules, a  manually populated\n          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to\n          # a protected branch must be used.\n          #\n          # When using a custom token, it is recommended to leave the following\n          # comment for other developers to be aware of the reasoning behind it:\n          #\n          # This must be used as GitHub Actions token does not support pushing\n          # to protected branches.\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PRESET: DEPENDABOT_MINOR\n```"}
{"id": "63c49728b008460c1df19228", "level": "level5", "llm_response": "```yml\nname: JOSS\non:\n  push:\n    branches", "answer": "```yaml name: JOSS\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - \"joss/**\"\n\njobs:\n  joss:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Generate .tex\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml --to=latex --output=paper.tex\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Generate .pdf\n        uses: docker://openjournals/paperdraft:latest\n        with:\n          args: joss/paper.md --defaults=metadata.yaml\n        env:\n          GIT_SHA: $GITHUB_SHA\n          JOURNAL: joss\n\n      - name: Upload the generated files as an artifact\n        uses: actions/upload-artifact@v3\n        with:\n          path: joss\n          name: joss\n\n      - name: Deploy\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: peaceiris/actions-gh-pages@v3.8.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./joss\n          force_orphan: true\n          publish_branch: joss-compiled\n```"}
{"id": "63c4989e6fc19abdf9caa598", "level": "level5", "llm_response": "```yml\nname: Node.js CI\n\non:\n  push:\n   ", "answer": "```yaml name: Node.js CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  nodejs:\n    # Documentation: https://github.com/zakodium/workflows#nodejs-ci\n    uses: zakodium/workflows/.github/workflows/nodejs.yml@nodejs-v1\n    with:\n      node-version-matrix: '[12, 14, 16, 18]'\n```"}
{"id": "63c49ce633b087f6bde55c90", "level": "level5", "llm_response": "```yml\nname: Lint and Test\n\non:\n  push:\n", "answer": "```yaml name: Lint and Test\n\non: [push]\n\njobs:\n  lint_and_test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        persist-credentials: false\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - name: Install dependencies\n      run: make install\n    - name: Lint\n      run: make lint\n    - name: Test\n      run: make test\n```"}
{"id": "63c49c3d1e3364807579f946", "level": "level5", "llm_response": "```yaml\nname: notify-release\non:\n  branches:\n    - main", "answer": "```yaml name: notify-release\r\non:\r\n  workflow_dispatch:\r\n  schedule:\r\n    - cron: '30 8 * * *'\r\njobs:\r\n  setup:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Notify release\r\n        uses: nearform/github-action-notify-release@v1\r\n        with:\r\n          github-token: ${{ secrets.GITHUB_TOKEN }}\r\n```"}
{"id": "63c4a096736e7f0ed8c75ab0", "level": "level5", "llm_response": "```yml\n---\nname: test-get-target-config\non:\n  pull", "answer": "```yaml name: test-get-target-config\n\non:\n  pull_request:\n    branches:\n    - main\n  push:\n    branches:\n    - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: aws/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_assume_role_arn }}\"\n    - run: echo \"${{ steps.target-config.outputs.aws_region }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.s3_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n  test-gcp:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n    - uses: aquaproj/aqua-installer@c553e04154f1f3b7e5eb35da058db3bb782bee8a # tag=v1.1.2\n      with:\n        aqua_version: v1.22.0\n    - uses: ./get-target-config\n      id: target-config\n      env:\n        TFACTION_CONFIG: get-target-config/tests/config-1.yaml\n        TFACTION_TARGET: gcp/foo\n        TFACTION_IA_APPLY: 'false'\n        TFACTION_JOB_TYPE: 'terraform'\n    - run: echo \"${{ steps.target-config.outputs.working_directory }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_plan_file }}\"\n    - run: echo \"${{ steps.target-config.outputs.gcs_bucket_name_tfmigrate_history }}\"\n    - run: echo \"${{ steps.target-config.outputs.template_dir }}\"\n```"}
{"id": "63c4975e6fc19abdf9ca2240", "level": "level5", "llm_response": "```yml\n---\nname: Automatic Rebase\non:\n  event:\n", "answer": "```yaml on:\n  issue_comment:\n    types: [created]\nname: Automatic Rebase\njobs:\n  rebase:\n    name: Rebase\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/rebase')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n        with:\n          fetch-depth: 0\n      - name: Automatic Rebase\n        uses: cirrus-actions/rebase@1.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e301899db5886504fda", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\n#on:\n#  push:\n#    branches: [ master ]\n#  pull_request:\n#    # The branches below must be a subset of the branches above\n#    branches: [ master ]\n#  schedule:\n#    - cron: '30 18 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n      with:\n        submodules: true\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 6.0.100\n\n    - name: Build\n      run: dotnet build\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```"}
{"id": "63c4a09333b087f6bde6d774", "level": "level5", "llm_response": "```yml\nname: Nix\non:\n  push:\n    branches", "answer": "```yaml name: Nix\n\non:\n  push:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: Nix Flake - Linux\n    permissions:\n      contents: read\n    steps:\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install\n          install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - name: Clone project\n        uses: actions/checkout@v3\n      - name: Build\n        # \"nix build\" builds with full optimization and includes a profiling\n        # build, so just the build of xmonad-contrib itself takes 3 minutes.\n        # As a workaround, we invoke cabal manually here.\n        run: nix develop -c cabal v2-build -O0 -j\n```"}
{"id": "63c49cf21899db58864fd39b", "level": "level5", "llm_response": "```yml\n---\nname: Cache libs (dist)\n\non:\n  push", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n      - 'epic/**'\n      - 'release/**'\nname: Cache libs (dist)\njobs:\n  cacheBuildedLibs:\n    name: Builded libs\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Cache builded libs\n        uses: ./.github/cache-builded-libs\n```"}
{"id": "63c4a1266fc19abdf9ce0a0e", "level": "level5", "llm_response": "```yml\n---\nname: Debug on Windows\non:\n  branches:\n", "answer": "```yaml on: workflow_dispatch\n\nname: Debug on Windows\njobs:\n    debug-windows:\n        runs-on: windows-latest\n        strategy:\n            fail-fast: false\n            matrix:\n                language: [\"cpp\"]\n\n        steps:\n            - name: Setup NuGet.exe for use with actions\n              uses: NuGet/setup-nuget@v1.0.5\n\n            - name: Checkout\n              uses: actions/checkout@v2.3.4\n              with:\n                  submodules: recursive\n\n            - name: Install OpenSSL\n              uses: crazy-max/ghaction-chocolatey@v1.6.0\n              with:\n                  args: install openssl -y\n\n            - name: Add NuGet Remote\n              run: \"nuget.exe sources Add -Name NuGetRemote -Source https://api.nuget.org/v3/index.json\"\n\n            - name: Setup tmate session\n              uses: mxschmitt/action-tmate@v3\n              with:\n                limit-access-to-actor: true\n              continue-on-error: true```"}
{"id": "63c4986cb008460c1df210dd", "level": "level5", "llm_response": "```yml\nname: Large Repo Benchmark\n\non:\n  push:\n   ", "answer": "```yaml name: Large Repo Benchmark\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [Release]\n    types:\n      - completed\n\njobs:\n  build:\n    name: Run Benchmarks\n    timeout-minutes: 60\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/actions/setup-node\n      - uses: ./.github/actions/setup-go\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Build\n        run: cd cli && make turbo\n\n      - name: Download previous benchmark results\n        # continue on error so that we handle the bootstrap case where there is no previous data\n        continue-on-error: true\n        run: mkdir -p raw-data/${{ runner.os }} && curl -f -o raw-data/${{ runner.os }}/benchmark-data.json https://raw.githubusercontent.com/vercel/turborepo/gh-pages/${{ runner.os }}/benchmark-data.json\n\n      - name: Run benchmarks\n        run: cd benchmark && pnpm benchmark\n\n      - name: Save to Tinybird\n        if: github.ref == 'refs/heads/main'\n        run: |\n          curl \\\n            -i \\\n            -F \"ndjson=@./benchmark/tinybird.ndjson\" \\\n            -X POST \\\n            -H 'Authorization: Bearer ${{ secrets.TINYBIRD_TOKEN }}' \\\n            'https://api.us-east.tinybird.co/v0/datasources?format=ndjson&name=turbo_benchmarks&mode=append'\n\n      - name: Store Benchmark Result\n        uses: benchmark-action/github-action-benchmark@v1\n        with:\n          name: \"${{ runner.os }} Benchmark\"\n          # What benchmark tool the output is formatted as\n          tool: \"customSmallerIsBetter\"\n          output-file-path: ./benchmark/benchmarks.json\n          external-data-json-path: ./raw-data/${{ runner.os }}/benchmark-data.json\n          auto-push: false\n          # GitHub API token to make a commit\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          skip-fetch-gh-pages: true\n\n      - name: Deploy\n        if: github.ref == 'refs/heads/main'\n        uses: JamesIves/github-pages-deploy-action@v4.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branch: gh-pages\n          folder: raw-data\n          clean: false\n          single-commit: false\n          git-config-email: github-bot@turborepo.org\n          repository-name: vercel/turborepo\n          commit-message: \"Update\"\n```"}
{"id": "63c4a04c1e336480757b949e", "level": "level5", "llm_response": "```yml\n---\nname: Tests: pretest/posttest\non:\n", "answer": "```yaml name: 'Tests: pretest/posttest'\n\non: [pull_request, push]\n\njobs:\n  tests:\n    uses: ljharb/actions/.github/workflows/pretest.yml@main\n```"}
{"id": "63c49dc61842bc13d778c79d", "level": "level5", "llm_response": "```yml\n---\nname: Node.js Package\non:\n  release:\n", "answer": "```yaml # This workflow will run tests using node and then publish a package to GitHub Packages when a release is created\n# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages\n\nname: Node.js Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          cache: 'npm'\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n          registry-url: https://registry.npmjs.org/\n          cache: 'npm'\n      - run: npm ci\n\n      - name: Determine dist-tag\n        id: dist_tag\n        uses: actions/github-script@v6\n        with:\n          result-encoding: string\n          script: |\n            const semver = require(\"semver\");\n            const version = require(`${process.env.GITHUB_WORKSPACE}/package.json`).version;\n            const parsed = semver.parse(version);\n            return parsed.prerelease.length ? \"--tag next\" : \"\";\n\n      - name: Publish to NPM\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.npm_token}}\n          TAG: ${{ steps.dist_tag.outputs.result }}\n        run: npm publish $TAG\n```"}
{"id": "63c498f31e3364807578ae91", "level": "level5", "llm_response": "```yaml\nname: close stale issues/PRs\non:\n  schedule", "answer": "```yaml name: 'close stale issues/PRs'\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@87c2b794b9b47a9bec68ae03c01aeb572ffebdb1\n        with:\n          repo-token: ${{ github.token }}\n          days-before-stale: 21\n          days-before-close: 7\n          only-labels: \"\"\n          operations-per-run: 100\n          remove-stale-when-updated: true\n          debug-only: false\n          ascending: false\n\n          exempt-issue-labels: \"Status: Backlog,Status: In Progress\"\n          stale-issue-label: \"Status: Stale\"\n          stale-issue-message: |-\n            This issue has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-issue-message: false\n          close-issue-label: \"\"\n          close-issue-message: \"\"\n\n          exempt-pr-labels: \"Status: Backlog,Status: In Progress\"\n          stale-pr-label: \"Status: Stale\"\n          stale-pr-message: |-\n            This pull request has gone three weeks without activity. In another week, I will close it.\n\n            But! If you comment or otherwise update it, I will reset the clock, and if you label it `Status: Backlog` or `Status: In Progress`, I will leave it alone ... forever!\n\n            ----\n\n            \"A weed is but an unloved flower.\" \u2015 _Ella Wheeler Wilcox_ \ud83e\udd40\n          skip-stale-pr-message: false\n          close-pr-label: \"\"\n          close-pr-message: \"\"\n```"}
{"id": "63c49ce96fc19abdf9cc5f23", "level": "level5", "llm_response": "```yml\nname: Builds\non:\n  push:\n    branches:\n", "answer": "```yaml name: Builds\non:\n  - push\n  - pull_request\n\npermissions:\n  contents: read\n\njobs:\n  doc:\n    name: Documentation (Sphinx)\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Build docs\n        run: make doc\n\n      - name: Print warnings\n        run: if [ -s .sphinx/warnings.txt ]; then cat .sphinx/warnings.txt; exit 1; fi\n\n      - name: Upload artifacts\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: documentation\n          path: doc/html\n\n  static:\n    name: Static binaries\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n          - windows-latest\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Create build directory\n        run: |\n          mkdir bin\n\n      - name: Build static lxc\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxc\n\n      - name: Build static lxd-migrate\n        if: runner.os == 'Linux'\n        env:\n          CGO_ENABLED: 0\n        run: |\n          go build -o bin ./lxd-migrate\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        continue-on-error: true\n        with:\n          name: ${{ runner.os }}\n          path: bin/\n```"}
{"id": "63c494d87843b61269a03c6b", "level": "level5", "llm_response": "```yml\n---\nname: Check Pull Request\n\non:\n  pull_request", "answer": "```yaml name: Check Pull Request\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  check-title:\n    name: Check Title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Semantic pull request\n        uses: amannn/action-semantic-pull-request@v5.0.1\n        with:\n          validateSingleCommit: true\n          ignoreLabels: revert\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4972bb008460c1df19384", "level": "level5", "llm_response": "```yml\nname: Publish MacOS \u2014 x64\non:\n  branch", "answer": "```yaml name: Publish MacOS \u2014 x64\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    runs-on: macos-11\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Install Packages\n        run: yarn install\n      - name: Rebuild Native Modules\n        run: npx electron-rebuild\n      - name: Get Urbit Binaries\n        run: ./get-urbit.sh\n      - name: Add MacOS certs\n        run: chmod +x add-osx-cert.sh && ./add-osx-cert.sh\n        env:\n          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}\n          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}\n      - name: Build & Publish\n        run: |\n          yarn run publish --arch x64\n        env:\n          APPLE_ID: ${{secrets.APPLE_ID}}\n          APPLE_ID_PASSWORD: ${{secrets.APPLE_ID_PASSWORD}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}```"}
{"id": "63c49df8517fc08c1ef0053b", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  schedule:\n    - cron: '0 7 * * 1' # Monday at 7:00 AM\n\npermissions: read-all\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n\n    steps:\n    - name: Harden Runner\n      uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n      with:\n        egress-policy: audit\n\n    - name: Checkout repository\n      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@807578363a7869ca324a79039e6db9c843e0e100\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@807578363a7869ca324a79039e6db9c843e0e100\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@807578363a7869ca324a79039e6db9c843e0e100\n```"}
{"id": "63c499856fc19abdf9cb0415", "level": "level5", "llm_response": "```yml\nname: make all\n\non:\n  push:\n    branches", "answer": "```yaml on: push\nname: make all\njobs:\n  makeall:\n    name: make all\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: make all\n        uses: docker://golang:latest\n        with:\n          entrypoint: bash\n          args: -c \"go get honnef.co/go/tools/cmd/staticcheck && go get golang.org/x/lint/golint && git checkout . && make all\"\n```"}
{"id": "63c49ade517fc08c1eeecd16", "level": "level5", "llm_response": "```yml\nname: Test installation and doccano commands\n\non:\n ", "answer": "```yaml name: Test installation and doccano commands\n\non:\n  schedule:\n    - cron: \"15 22 * * *\"\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest]\n        python-version: [\"3.8\", \"3.9\", \"3.10\"]\n    steps:\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Enabling JSON1 extension on SQLite\n      if: ${{ startsWith(matrix.os, 'windows') && matrix.python-version == '3.8' }}\n      shell: bash\n      run: |\n        export VERSION=`python -V | cut -f2 -d \" \"`\n        curl -LO https://www.sqlite.org/2022/sqlite-dll-win64-x64-3390300.zip\n        unzip sqlite-dll-win64-x64-3390300.zip\n        mv sqlite3.dll /c/hostedtoolcache/windows/Python/$VERSION/x64/DLLs/\n    - name: Test installation\n      run: pip install doccano\n    - name: Test doccano init command\n      run: doccano init\n    - name: Test doccano createuser command\n      run: doccano createuser --username admin --password pass\n```"}
{"id": "63c49ba0b008460c1df358ce", "level": "level5", "llm_response": "```yml\nname: Deploy demo to Fly\non:\n  event:\n", "answer": "```yaml name: Deploy demo to Fly\non:\n  workflow_run:\n    workflows: [Cookie cutter test]\n    branches: [main]\n    types:\n      - completed\nenv:\n  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}\njobs:\n  deploy:\n      if: ${{ github.event.workflow_run.conclusion == 'success' }}\n      timeout-minutes: 6\n      name: Deploy app\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: superfly/flyctl-actions/setup-flyctl@master\n        - name: Install dependencies\n          run: |\n            apk update && apk add py3-pip python3\n            pip3 install cookiecutter\n        - run: bash scripts/deploy-demo-project-to-fly.sh\n```"}
{"id": "63c495c57843b61269a09c8f", "level": "level5", "llm_response": "```yml\nname: CI and CD\non:\n  push:\n   ", "answer": "```yaml name: CI and CD\n\non:\n  push:\n    branches:\n    - master\n  workflow_dispatch:\n\njobs:\n  tests:\n    name: Tests\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run a one-line script\n      run: echo Hello, world!\n    - name: Start environment\n      run: make start-containers\n    - name: Run tests\n      run: make params=-T tests\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    needs: tests\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run Ansible playbook\n      uses: dawidd6/action-ansible-playbook@v2\n      with:\n        playbook: ./infrastructure/playbooks/deploy.yml\n        directory: ./\n        key: ${{secrets.SSH_KEY}}\n        vault_password: ${{secrets.VAULT_PASSWORD}}\n        options: |\n          --inventory infrastructure/playbooks/hosts\n      env:\n        ANSIBLE_HOST_KEY_CHECKING: False\n```"}
{"id": "63c4966d1e3364807577a9d1", "level": "level5", "llm_response": "```yml\nname: Compile test\non:\n  push:\n    branches", "answer": "```yaml name: Compile test\n\non:\n  push:\n    branches:\n      - \"**\"\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  compile:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [16.x]\n\n    steps:\n    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048 # tag=v3\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm install\n    - run: npm run build```"}
{"id": "63c497691899db58864d95cc", "level": "level5", "llm_response": "```yml\nname: CodeQL\non:\n  push:\n    branches", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n    paths-ignore:\n      - '*/spec/fixtures/**'\n      - 'CHANGELOG.md'\n      - 'common/lib/dependabot/version.rb'\n  schedule:\n    - cron: '41 4 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    if: ${{ github.event_name != 'schedule' || github.repository == 'dependabot/dependabot-core' }}\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go', 'javascript', 'python', 'ruby' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49a5e6fc19abdf9cb5a11", "level": "level5", "llm_response": "```yaml\nname: npm-update-pf\non:\n  schedule:\n   ", "answer": "```yaml name: npm-update-pf\non:\n  schedule:\n    - cron: '0 3 * * 1'\n  # can be run manually on https://github.com/cockpit-project/cockpit/actions\n  workflow_dispatch:\njobs:\n  npm-update:\n    environment: npm-update\n    permissions:\n      pull-requests: write\n      contents: write\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v3\n\n      - name: Run npm-update bot\n        run: |\n          tools/make-bots\n          git config --global user.name \"GitHub Workflow\"\n          git config --global user.email \"cockpituous@cockpit-project.org\"\n          mkdir -p ~/.config/cockpit-dev\n          echo ${{ github.token }} >> ~/.config/cockpit-dev/github-token\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}'\n          bots/npm-update @patternfly >&2\n          ssh-add -D\n          ssh-agent -k\n\n      - name: Force push the change to trigger testing workflows\n        run: |\n          # Don't force-push if no branch was created\n          test \"$(git symbolic-ref HEAD)\" = '${{ github.ref }}' && exit\n\n          sleep 1 # make sure the timestamp changes\n          git commit --amend --no-edit\n          eval $(ssh-agent)\n          ssh-add - <<< '${{ secrets.COCKPIT_DEPLOY_KEY }}'\n          git push --force 'git@github.com:${{ github.repository }}' HEAD\n          ssh-add -D\n          ssh-agent -k\n```"}
{"id": "63c49dc8517fc08c1eeff286", "level": "level5", "llm_response": "```yml\nname: Build & Test\non:\n  pull_request:\n", "answer": "```yaml name: Build & Test\n\non:\n  push: {}\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build-and-test:\n    name: Build & Test\n\n    strategy:\n      fail-fast: true\n      matrix:\n        ocaml-compiler:\n          - 4.11.0\n          - 4.10.1\n          - 4.09.1\n          - 4.08.1\n        os:\n          - ubuntu-latest\n          - macOS-latest\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      # Cancel queued workflows from earlier commits in this branch\n      - uses: fkirc/skip-duplicate-actions@master\n\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Retrieve opam cache\n        uses: actions/cache@v3\n        id: cache-opam\n        with:\n          path: ~/.opam\n          key: v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-${{ hashFiles('*.opam') }}\n          restore-keys: |\n            v1-${{ runner.os }}-opam-${{ matrix.ocaml-compiler }}-\n\n      - name: Use OCaml ${{ matrix.ocaml-compiler }}\n        uses: ocaml/setup-ocaml@v2\n        with:\n          ocaml-compiler: ${{ matrix.ocaml-compiler }}\n\n      - name: Install dependencies\n        run: opam install --deps-only --with-test .\n\n      - name: Build\n        run: opam exec -- make\n\n      - name: Test\n        run: opam exec -- make all-test\n\n      - name: Check whitespaces\n        run: opam exec -- ./LINT\n```"}
{"id": "63c4a1a433b087f6bde73a98", "level": "level5", "llm_response": "```yml\n---\nname: Build Site\non: pull_request:\n ", "answer": "```yaml name: Build Site\non:\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n      - name: Install deps\n        run: |\n          npm install postcss-cli\n          npm install autoprefixer\n          sudo -E make docs-deps\n      - name: Build pages\n        run: |\n           make docs-build\n           ls -liah public/```"}
{"id": "63c5aec46b748c7b1fadfc79", "level": "level5", "llm_response": "```yml\nname: Humble Semi-Binary Build - testing\n\non", "answer": "```yaml name: Humble Semi-Binary Build - testing\n# description: 'Build & test that compiles the main dependencies from source.'\n\non:\n  workflow_dispatch:\n    branches:\n      - humble\n  pull_request:\n    branches:\n      - humble\n  push:\n    branches:\n      - humble\n  schedule:\n    # Run every morning to detect flakiness and broken dependencies\n    - cron: '33 1 * * *'\n\njobs:\n  semi_binary:\n    uses: ./.github/workflows/reusable-industrial-ci-with-cache.yml\n    with:\n      ros_distro: humble\n      ros_repo: testing\n      upstream_workspace: ros2_control.humble.repos\n      ref_for_scheduled_build: humble\n```"}
{"id": "63c49f6233b087f6bde65d6f", "level": "level5", "llm_response": "```yml\nname: HealthChecks MongoDb CI\non:\n  branches", "answer": "```yaml name: HealthChecks MongoDb CI\r\n\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n    branches: [ master ]\r\n    paths:\r\n      - src/HealthChecks.MongoDb/**\r\n      - test/HealthChecks.MongoDb.Tests/**\r\n      - .github/workflows/healthchecks_mongodb_ci.yml\r\n      - Directory.Build.props\r\n      - Directory.Build.targets\r\n    tags-ignore:\r\n      - release-*\r\n  pull_request:\r\n    branches: [ master ]\r\n    paths:\r\n    - src/HealthChecks.MongoDb/**\r\n    - test/HealthChecks.MongoDb.Tests/**\r\n    - .github/workflows/healthchecks_mongodb_ci.yml\r\n    - Directory.Build.props\r\n    - Directory.Build.targets\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    services:\r\n      mongo:\r\n        image: mongo\r\n        ports:\r\n          - 27017:27017\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: |\r\n        dotnet restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Check formatting\r\n      run: |\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1) &&\r\n        dotnet format --no-restore --verify-no-changes --severity warn ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj || (echo \"Run 'dotnet format' to fix issues\" && exit 1)\r\n    - name: Build\r\n      run: |\r\n        dotnet build --no-restore ./src/HealthChecks.MongoDb/HealthChecks.MongoDb.csproj &&\r\n        dotnet build --no-restore ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n    - name: Test\r\n      run: dotnet test --no-restore --no-build ./test/HealthChecks.MongoDb.Tests/HealthChecks.MongoDb.Tests.csproj\r\n```"}
{"id": "63c49b6533b087f6bde4bd34", "level": "level5", "llm_response": "```yaml\n---\nname: Auto approve\non:\n  pull_request:\n   ", "answer": "```yaml name: Auto approve\n\non: [pull_request_target]\n\njobs:\n  auto-approve:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hmarr/auto-approve-action@v2\n      if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"```"}
{"id": "63c49e9a33b087f6bde60c8f", "level": "level5", "llm_response": "```yml\npackage-macos-anaconda:\n  name: package-m", "answer": "```yaml name: package-macos-anaconda\n\non:\n  release:\n    types: [created]\n\njobs:\n  package:\n\n    runs-on: macos-latest\n\n    steps:\n\n    - name: fetch MacOSX 10.11 SDK\n      run: curl -L https://github.com/phracker/MacOSX-SDKs/releases/download/MacOSX10.11.sdk/MacOSX10.11.sdk.tar.xz | sudo tar xf - -C /opt/\n\n    - name: install conda-build # and anaconda-client\n      run: sudo $CONDA/bin/conda install -y conda-build # anaconda-client\n\n    - name: fetch recipe\n      run: |\n        git clone https://github.com/MRtrix3/conda-build.git\n        mv conda-build/* .\n        { echo \"CONDA_BUILD_SYSROOT:\"; echo \"  - /opt/MacOSX10.11.sdk        # [osx]\"; } > conda_build_config.yaml\n\n    - name: build package\n      run: sudo CONDA=\"$CONDA\" ./run.sh ${GITHUB_REF#refs/*/} ${GITHUB_REPOSITORY%/*} conda-macos\n\n#    - name: upload package\n#      run: $CONDA/bin/anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload -u MRtrix3 $(sudo $CONDA/bin/conda build conda-build/ --output)\n\n    - name: Upload package to GitHub Release\n      uses: AButler/upload-release-assets@v2.0\n      with:\n        files: '*.tar.bz2'\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n\n```"}
{"id": "63c49a6f6fc19abdf9cb61cd", "level": "level5", "llm_response": "```yml\n---\nname: Prepare Release Add-on\non: push\n", "answer": "```yaml name: Prepare Release Add-on\n\non:\n  workflow_dispatch:\n\njobs:\n  prepare-release:\n    name: Prepare Release\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Setup Java\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Prepare Release and Create Pull Request\n      env:\n        ZAPBOT_TOKEN: ${{ secrets.ZAPBOT_TOKEN }}\n      run: ./gradlew createPullRequestRelease\n```"}
{"id": "63c49ef31842bc13d779415a", "level": "level5", "llm_response": "```yml\n---\nname: Pull request automation\non: pull_request.event", "answer": "```yaml # This file is maintained in https://github.com/WeblateOrg/meta/\n\nname: Pull request automation\n\non:\n  pull_request_target:\n    types: opened\n\npermissions:\n  contents: read\n\njobs:\n  weblate_automerge:\n    permissions:\n      pull-requests: write # for actions-ecosystem/action-add-labels to add label\n    runs-on: ubuntu-20.04\n    name: Weblate automerge\n    if: ${{ github.actor == 'weblate' || github.actor == 'pre-commit-ci[bot]' }}\n    steps:\n    - uses: actions-ecosystem/action-add-labels@v1.1.3\n      with:\n        labels: automerge\n```"}
{"id": "63c49779cbc73931bb180a0e", "level": "level5", "llm_response": "```yml\nArchs:\n  branches:\n    branches:\n      master:\n", "answer": "```yaml name: Archs\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    name: Build on ${{ matrix.arch }}\n\n    strategy:\n      matrix:\n        include:\n          - arch: armv7\n            distro: ubuntu20.04\n          - arch: aarch64\n            distro: ubuntu20.04\n          - arch: ppc64le\n            distro: ubuntu20.04\n          - arch: s390x\n            distro: ubuntu20.04\n  \n    steps:\n    - uses: actions/checkout@v2.4.0\n    - uses: uraimo/run-on-arch-action@v2.1.1\n      name: Build\n      id: build\n      with:\n        arch: ${{ matrix.arch }}\n        distro: ${{ matrix.distro }}\n        install: |\n          apt-get update -y\n          apt-get install -y apache2-dev libcjose-dev libssl-dev check pkg-config\n          apt-get install -y libjansson-dev libcurl4-openssl-dev libhiredis-dev libpcre2-dev\n        setup: |\n          mkdir -p \"${PWD}/logs\"\n        dockerRunArgs: |\n          --volume \"${PWD}/logs:/logs\"\n        env: |\n          logfilename: test-suite-${{ matrix.distro }}-${{ matrix.arch }}.log\n        run: |\n          ./autogen.sh\n          ./configure\n          make check\n          cp test-suite.log \"/logs/${logfilename}\"\n          echo \"Copied test-suite.log to /logs/${logfilename}\"\n          \n    - name: Results\n      run: |\n        cat ${PWD}/logs/*.log\n```"}
{"id": "63c4a11c1899db5886517d65", "level": "level5", "llm_response": "```yaml\nname: CompatHelper\non:\n  branches:\n    -", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Add the General registry via Git\"\n        run: |\n          import Pkg\n          ENV[\"JULIA_PKG_SERVER\"] = \"\"\n          Pkg.Registry.add(\"General\")\n        shell: julia --color=yes {0}\n      - name: \"Install CompatHelper\"\n        run: |\n          import Pkg\n          name = \"CompatHelper\"\n          uuid = \"aa819f21-2bde-4658-8897-bab36330d9b7\"\n          version = \"3\"\n          Pkg.add(; name, uuid, version)\n        shell: julia --color=yes {0}\n      - name: \"Run CompatHelper\"\n        run: |\n          import CompatHelper\n          CompatHelper.main()\n        shell: julia --color=yes {0}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n          # COMPATHELPER_PRIV: ${{ secrets.COMPATHELPER_PRIV }}\n```"}
{"id": "63c49adb1899db58864f007e", "level": "level5", "llm_response": "```yml\nname: TLS protocol scan\non:\n  push:\n   ", "answer": "```yaml name: \"TLS protocol scan\"\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n\npermissions: read-all\n\njobs:\n  tls-check:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [linux]\n        arch: [amd64]\n    name: TLS check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Install dependencies\n        run: |\n          cd $GITHUB_WORKSPACE\n          sudo apt-get update\n          sudo apt-get install -y apache2-utils openssl\n          mkdir -p test/data\n          cd test/data\n          ../scripts/gen_certs.sh\n          htpasswd -bBn test test123 > htpasswd\n      - name: Check for TLS settings\n        continue-on-error: true\n        run: |\n          cd $GITHUB_WORKSPACE\n          make OS=$OS ARCH=$ARCH binary\n          bin/zot-$OS-$ARCH serve examples/config-tls.json &\n          sleep 5\n          curl -kv --tls-max 1.0 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.0 detected\"; exit 1; fi\n          curl -kv --tls-max 1.1 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -eq 0 ]]; then echo \"TLSv1.1 detected\"; exit 1; fi\n          curl -kv --tls-max 1.2 -0  https://localhost:8080/v2/\n          if [[ \"$?\" -ne 0 ]]; then echo \"TLSv1.2 missing\"; exit 1; fi\n        env:\n          OS: ${{ matrix.os }}\n          ARCH: ${{ matrix.arch }}\n```"}
{"id": "63c497711e33648075781160", "level": "level5", "llm_response": "```yml\nname: CI\n\non:\n  push:\n    branches:\n", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n  pull_request:\n    paths-ignore:\n      - '.idea/**'\n      - '.gitattributes'\n      - '.github/**.json'\n      - '.gitignore'\n      - '.gitmodules'\n      - '**.md'\n      - '**/*.txt'\n      - '**/*.png'\n      - '**/*.jpg'\n      - 'LICENSE'\n      - 'NOTICE'\n\njobs:\n  publish:\n    name: Publish to MavenLocal\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: publishToMavenLocal\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n      - uses: gradle/gradle-build-action@v2\n        with:\n          arguments: app:assembleDebug\n```"}
{"id": "63c4a03a1899db588651233d", "level": "level5", "llm_response": "```yml\n---\nname: CodeQL\non:\n  push:\n   ", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [main]\n  schedule:\n    - cron: '0 19 * * 4'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['javascript']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n         languages: ${{ matrix.language }}\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a19d6fc19abdf9ce3478", "level": "level5", "llm_response": "```yml\nname: depaware\non:\n  push:\n    branches", "answer": "```yaml name: depaware\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - '*'\n      - 'release-branch/*'\n\nconcurrency:\n  group: ${{ github.workflow }}-$${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: go.mod\n\n    - name: depaware\n      run: go run github.com/tailscale/depaware --check\n        tailscale.com/cmd/tailscaled\n        tailscale.com/cmd/tailscale\n        tailscale.com/cmd/derper\n```"}
{"id": "63c49d2133b087f6bde57611", "level": "level5", "llm_response": "```yml\n---\nname: Repository Dispatch Triggered\n\non:\n  event", "answer": "```yaml name: Repository Dispatch Triggered\n\non: [repository_dispatch]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Repository Dispatch Triggered\n        if: github.event.action == 'event-demo'\n        run: |\n          echo \"Workflow triggered successfully by repository dispatch action!\"```"}
{"id": "63c49d231899db58864fe6c8", "level": "level5", "llm_response": "```yml\nname: docs\non:\n  push:\n    branches:\n", "answer": "```yaml name: docs\n\non:\n  push:\n    tags:\n      - v[0-9]+.[0-9]+.[0-9]+\n    branches:\n      - develop\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    if: github.repository == 'theforeman/foreman-ansible-modules'\n    steps:\n      - uses: actions/checkout@v3\n      - name: configure git\n        run: |\n          git config user.name \"${GITHUB_ACTOR}\"\n          git config user.email \"${GITHUB_ACTOR}@bots.github.com\"\n          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.8\"\n      - name: Install dependencies\n        run: make doc-setup\n      - name: Build docs\n        run: make doc\n      - name: commit docs\n        run: |\n          git checkout gh-pages\n          rm -rf $(basename ${GITHUB_REF})\n          mv docs/_build/html $(basename ${GITHUB_REF})\n          ln --force --no-dereference --symbolic  $(dirname v*/index.html | sort --version-sort --reverse | head -n1) latest\n          git show origin/develop:docs/_gh_include/header.inc > index.html\n          (echo develop; echo latest; dirname v*/index.html | sort --version-sort --reverse) | xargs -I@@ -n1 echo '<div class=\"col-md-4 center\"><a href=\"@@/\" class=\"btn-doc btn\"><i class=\"fa fa-newspaper-o\"></i><p>@@</p></a></div>' >> index.html\n          git show origin/develop:docs/_gh_include/footer.inc >> index.html\n          git add $(basename ${GITHUB_REF}) latest index.html\n          git commit -m \"update docs for $(basename ${GITHUB_REF})\" || true\n      - name: push docs\n        run: git push origin gh-pages\n```"}
{"id": "63c4a06bcbc73931bb1ba455", "level": "level5", "llm_response": "```yml\nname: Windows GPU CI Pipeline\non:\n  push:\n", "answer": "```yaml # Don't edit this file manully.\n# Run generate-skip-doc-change.py to generate it.\n\nname: Windows GPU CI Pipeline\non:\n  pull_request:\n    paths:\n      - docs/**\n      - README.md\n      - CONTRIBUTING.md\n      - BUILD.md\n\njobs:\n  job1:\n    name: cuda build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job2:\n    name: dml build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job3:\n    name: training build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n\n  job4:\n    name: kernelDocumentation build_x64_RelWithDebInfo\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo \"No build required, only documentation changed\"'\n```"}
{"id": "63c496df1e3364807577d7a8", "level": "level5", "llm_response": "```yml\nname: sast\non:\n  push:\n    branches", "answer": "```yaml name: sast\n\non:\n  push:\n    branches-ignore:\n      - 'dependabot/**'\n  pull_request:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      security-events: write\n    strategy:\n      fail-fast: true\n      matrix:\n        language: [ 'javascript' ]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      - uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0e1517fc08c1ef127c9", "level": "level5", "llm_response": "```yml\n---\nname: Send publish metrics to BigQuery\n\non:\n", "answer": "```yaml name: Send publish metrics to bigquery\non:\n  release:\n    types: published\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Cloud SDK\n        uses: google-github-actions/setup-gcloud@v0.2.0\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.GCP_BQ_METRICS_KEY }}\n          export_default_credentials: true\n      - run: 'jq -c ''.release |\n             {\n               package_name: .name | split(\" \")[0],\n               name,\n               tag_name,\n               version: .tag_name | split(\"-v\")[1],\n               html_url,\n               target_commitish,\n               created_at,\n               published_at,\n               draft,\n               prerelease\n             }'' $GITHUB_EVENT_PATH > releases.json'\n      - run: bq load --source_format=NEWLINE_DELIMITED_JSON metrics.releases releases.json\n```"}
{"id": "63c49d796fc19abdf9cc9892", "level": "level5", "llm_response": "```yml\nname: Deploy App to Staging\non:\n  branch", "answer": "```yaml name: Deploy App to Staging\non:\n  workflow_dispatch:\n    inputs:\n      # commit hash (for frontend deploy to fleek)\n      commit:\n        description: \"Branch/Commit ref\"\n        default: \"origin/main\"\n        type: string\njobs:\n  deploy-app:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Checkout staging-app\n        run: |\n          git fetch\n          git checkout -b staging-app origin/staging-app\n          git reset --hard ${{ github.event.inputs.commit }}\n          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/gitcoinco/passport.git\n          git push origin staging-app -f\n```"}
{"id": "63c49e4b1e336480757ac9aa", "level": "level5", "llm_response": "```yml\nname: amd64 Windows Java\non:\n  push:\n", "answer": "```yaml name: amd64 Windows Java\n\non: [push, pull_request]\n\njobs:\n  # Building using the github runner environement directly.\n  visual-studio:\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Check cmake\n      run: cmake --version\n    - name: Install SWIG 4.0.2\n      run: |\n        (New-Object System.Net.WebClient).DownloadFile(\"http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip\",\"swigwin-4.0.2.zip\");\n        Expand-Archive .\\swigwin-4.0.2.zip .;\n        echo \"$((Get-Item .).FullName)/swigwin-4.0.2\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append\n    - name: Check swig\n      run: swig -version\n    - name: Check mvn\n      run: mvn.cmd --version\n    - name: Configure\n      run: cmake -S. -Bbuild -G \"Visual Studio 17 2022\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_JAVA=ON -DSKIP_GPG=ON\n    - name: Build\n      run: cmake --build build --config Release --target ALL_BUILD -- /verbosity:normal /maxcpucount\n    - name: Test\n      run: cmake --build build --config Release --target RUN_TESTS -- /verbosity:normal /maxcpucount\n    - name: Install\n      run: cmake --build build --config Release --target INSTALL -- /verbosity:normal /maxcpucount\n```"}
{"id": "63c497d3cbc73931bb182d46", "level": "level5", "llm_response": "```yml\nname: Build\non:\n  push:\n    branches:\n", "answer": "```yaml name: Build\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ruby: [ '2.7.6', '3.0.4', '3.1.2' ] #, 'jruby-head' ]\n    steps:\n      - name: Setup Ruby, JRuby and TruffleRuby\n        uses: ruby/setup-ruby@v1.118.0\n        with:\n          ruby-version: ${{ matrix.ruby }}\n      - uses: actions/checkout@v3   \n      - name: Install dependecies\n        run: bundle install\n      - name: Run Tests\n        run: ./run_tests.sh\n     \n  auto-merge:\n    needs: run-tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          gh pr merge --auto --rebase \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}} \n```"}
{"id": "63c49fb91899db588650eeb3", "level": "level5", "llm_response": "```yml\n---\nname: Release Pull Request Automation\non:\n  branch", "answer": "```yaml name: Release Pull Request Automation\n\n# Controls when the action will run. Triggers the workflow on create branch or tag\n# events but only acts on branch create.\non:\n    create:\njobs:\n    release-pull-request-automation:\n        if: ${{ github.event.ref_type == 'branch' && contains( github.ref, 'release/' ) }}\n        env:\n            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n        runs-on: ubuntu-latest\n        steps:\n            - uses: act10ns/slack@v1\n              with:\n                  status: starting\n              if: ${{ always() }}\n            - name: Checkout code\n              uses: actions/checkout@v3\n            - name: Create changeset for pull request\n              run: |\n                  git config user.name github-actions\n                  git config user.email github-actions@github.com\n                  git commit -m 'Empty commit for release pull request' --allow-empty\n                  git push\n            - name: Create Release Pull Request\n              uses: woocommerce/automations@v1\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n                  automations: release\n            - uses: act10ns/slack@v1\n              with:\n                  status: ${{ job.status }}\n                  steps: ${{ toJson(steps) }}\n              if: ${{ always() }}\n```"}
{"id": "63c49e83517fc08c1ef03f35", "level": "level5", "llm_response": "```yaml\nname: test-flax\non:\n  branch:\n    -", "answer": "```yaml name: test-flax\n\non:\n  push:\n    branches:\n      - 'integration'\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=jammy\"\n            \"MACHINARIS_STREAM=test\"\n            \"CHIADOG_BRANCH=dev\"\n            \"FLAX_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-flax:test\n```"}
{"id": "63c49f4a1842bc13d779622d", "level": "level5", "llm_response": "```yml\nname: New Release - Update other projects\n\non:\n ", "answer": "```yaml name: New Release - Update other projects\non:\n  repository_dispatch:\n    types: [http4k-release]\njobs:\n  create-upgrade-branches:\n    strategy:\n      matrix:\n        repo:\n          - 'http4k/toolbox'\n          - 'http4k/examples'\n          - 'http4k/http4k-by-example'\n          - 'http4k/http4k-connect'\n          - 'http4k/http4k-heroku-travis-example-app'\n          - 'http4k/http4k-contract-todo-backend'\n          - 'http4k/http4k-bin'\n          - 'http4k/http4k-todo-backend'\n          - 'http4k/http4k-bootstrap'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger ${{ matrix.repo }}\n        uses: peter-evans/repository-dispatch@v1.1.1\n        with:\n          token: ${{ secrets.TOOLBOX_REPO_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: http4k-release\n          client-payload: '{\"version\": \"${{ github.event.client_payload.version }}\"}'\n```"}
{"id": "63c49cbe1899db58864fbd78", "level": "level5", "llm_response": "```yml\n---\nname: Build\non:\n  push:\n    branches", "answer": "```yaml name: Build\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\nconcurrency:\n  # Cancel any in-progress workflows for this workflow/branch combination.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    name: Build without tests\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'Source/ViewControllerPresentationSpy.xcodeproj', scheme: 'ViewControllerPresentationSpy-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }\n          - { project: 'ObjCSample/ObjCSampleViewControllerPresentationSpy.xcodeproj', scheme: 'ObjCSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 8' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  test:\n    name: Build & test\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        run-config:\n          - { project: 'SwiftSample/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n          - { project: 'SwiftSamplePackage/SwiftSampleViewControllerPresentationSpy.xcodeproj', scheme: 'SwiftSampleViewControllerPresentationSpy', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPad Air (4th generation)' }\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Show current version of Xcode\n        run: xcodebuild -version\n      - name: Build & test\n        run: xcodebuild build -project '${{ matrix.run-config['project'] }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}\n\n  buildCarthage:\n    needs: [ build, test ]\n    name: Build Carthage\n    runs-on: macos-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Build\n      run: carthage build --configuration Release --no-skip-current --use-xcframeworks\n\n  podspec:\n    needs: [ build, test ]\n    name: Pod Spec Lint\n    runs-on: macos-latest\n    steps:\n      - name: Check out project\n        uses: actions/checkout@v3\n      - name: Lint the pod spec\n        run: pod spec lint --quick\n\n  auto-merge:\n    needs: [ buildCarthage, podspec ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo\n        uses: actions/checkout@v3\n      - name: auto-merge\n        if: |\n          github.actor == 'dependabot[bot]' &&\n          github.event_name == 'pull_request'\n        run: |\n          ./merge_dependabot.sh\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          # this secret needs to be in the settings.secrets.dependabot\n          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}\n```"}
{"id": "63c49eaa517fc08c1ef04e4d", "level": "level5", "llm_response": "```yml\nname: Labeler\non:\n  pull_request:\n   ", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler\n\nname: Labeler\non: [pull_request]\n\njobs:\n  label:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - uses: actions/labeler@v4.0.2\n      if: github.event.pull_request.head.repo.full_name == github.repository\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49a51517fc08c1eee9273", "level": "level5", "llm_response": "```yml\n---\ntrigger:\n  branches:\n    - master\n  events", "answer": "```yaml name: Typescript Types\non:\n  pull_request:\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\n  push:\n    branches:\n      - master\n    paths:\n      - '.github/workflows/tsd.yml'\n      - 'package.json'\n      - 'types/**'\n      - 'test/types/**'\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint TS-Files\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 14\n\n      - run: npm install\n\n      - name: Lint TS-Files\n        run: npm run lint-ts\n\n  test-ts-types:\n    needs:\n      - lint\n    runs-on: ubuntu-latest\n    name: Test Typescript Types\n    steps:\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2\n\n      - name: Setup node\n        uses: actions/setup-node@969bd2663942d722d85b6a8626225850c2f7be4b # v3.5.0\n        with:\n          node-version: 12\n\n      - run: npm install\n\n      - name: Typings\n        run: npm run test-tsd```"}
{"id": "63c49a2633b087f6bde43c7c", "level": "level5", "llm_response": "```yml\nname: Support requests\non:\n  pull_request:\n   ", "answer": "```yaml name: 'Support requests'\n\non:\n  issues:\n    types: [labeled, unlabeled, reopened]\n\njobs:\n  support:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/support-requests@v2\n        with:\n          github-token: ${{ github.token }}\n          support-label: 'repro-required'\n          issue-comment: >\n            :wave: @{issue-author}, sorry you're having an issue. As the issue template explains, we require that you provide a runnable example that reproduces your issue (please read the [issue template](https://raw.githubusercontent.com/react-native-google-signin/google-signin/master/.github/ISSUE_TEMPLATE/Custom.md)).\n\n            The reason is that maintainers do not have time to try reproduce bugs themselves. Please try to minimize the superfluous code and focus only on reproducing the bug.\n\n            Please create a new issue with this and we'll be happy to review it! If you're hitting a hard wall, you may consider [paid assistance](https://github.com/react-native-google-signin/google-signin/pull/861).\n          close-issue: true\n          lock-issue: false\n```"}
{"id": "63c49abb33b087f6bde478b7", "level": "level5", "llm_response": "```yaml\n---\nname: CompatHelper\non:\n  schedule:\n   ", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 43 7 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'```"}
{"id": "63c497bf1899db58864db96b", "level": "level5", "llm_response": "```yaml\n---\nname: Verify docs\non: schedule\njobs:\n ", "answer": "```yaml name: Verify docs\n\non:\n  schedule:\n    # every day at 9am\n    - cron: '0 9 * * *'\n\njobs:\n  verify:\n    name: Verify docs and spelling\n    runs-on: [ubuntu-latest]\n    steps:\n    - name: Check-out code\n      uses: actions/checkout@v3\n    - name: Set up Go using version from go.mod\n      uses: actions/setup-go@v3\n      with:\n        go-version-file: 'go.mod'\n    - name: Run verify scripts\n      run: make verify\n    - name: Checking for broken Markdown links for main branch\n      uses: gaurav-nelson/github-action-markdown-link-check@v1\n      with:\n        folder-path: './docs'\n        file-path: './README.md, ./CHANGELOG.md, ./CONTRIBUTING.md, ./GOVERNANCE.md, ./MAINTAINERS.md, ./ROADMAP.md, ./SECURITY.md'\n        config-file: 'hack/.md_links_config.json'\n    - name: Markdownlint\n      run: |\n        sudo npm install -g markdownlint-cli@0.31.1\n        make markdownlint \n```"}
{"id": "63c49a471899db58864ec29a", "level": "level5", "llm_response": "```yml\n---\nname: CodeQL Analysis\non:\n  branches:\n", "answer": "```yaml name: CodeQL Analysis\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '0 8 * * *'\n\njobs:\n  analyze:\n    name: CodeQL Analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        id: checkout_repo\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        id: init_codeql\n        uses: github/codeql-action/init@v2\n        with:\n          queries: security-and-quality\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        id: analyze_codeql\n        uses: github/codeql-action/analyze@v2\n\n# Built with \u2764 by [Pipeline Foundation](https://pipeline.foundation)```"}
{"id": "63c496ba33b087f6bde2deab", "level": "level5", "llm_response": "```yaml\nname: Release Drafter\n\non:\n  branch:\n    -", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    if: github.repository == 'activeloopai/deeplake'\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a586fc19abdf9cb5781", "level": "level5", "llm_response": "```yml\nname: publish-build\non:\n  release:\n    published", "answer": "```yaml name: publish-build\non:\n  release:\n    types: [released]\n\njobs:\n  build-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup node and cache\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: \"yarn\"\n          cache-dependency-path: yarn.lock\n      - name: Check release validity\n        run: sh .github/scripts/check-release.sh\n      - name: Install project dependencies\n        run: yarn install\n      - name: Build project\n        run: yarn build\n      - name: Create ZIP folder\n        uses: thedoctor0/zip-release@master\n        with:\n          filename: 'build.zip'\n          directory: 'build'\n      - name: Upload build to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: build/build.zip\n          tag: ${{ github.ref }}\n```"}
{"id": "63c497311899db58864d7f91", "level": "level5", "llm_response": "```yml\n---\nname: CLA\non:\n  pull_request:\n", "answer": "```yaml \nname: CLA\n\non:\n  issue_comment:\n    types: [created]\n  pull_request:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request'\n        # Alpha Release\n        uses: hanxiao/github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: '.github/signatures/v1/cla.json'\n          path-To-cladocument: 'https://github.com/jina-ai/jinabox.js/blob/master/CLA.md'\n          # branch should not be protected\n          branch: 'cla'\n          whitelist: hanxiao,nan-wang,jina-bot,BingHo1013,alexcg1,imsergiy,YueLiu-jina,JoanFM,lusloher\n          empty-commit-flag: false\n          blockchain-storage-flag: false```"}
{"id": "63c49f771842bc13d77973e6", "level": "level5", "llm_response": "```yml\n---\ntrigger:\n  branches:\n    - master\n    -", "answer": "```yaml name: Pull Request Validation\n\non:\n  pull_request:\n    branches:\n      - trunk\n      - 'release/**'\n      - 'feature/**'\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - reopened\n      - synchronize\n      - edited\n\nenv:\n  LABELS: ${{ join( github.event.pull_request.labels.*.name, ' ' ) }}\n\njobs:\n  check-type-label:\n    name: Check [Type] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Type]' ) == false\n        run: exit 1\n  check-focus-label:\n    name: Check [Focus] Label\n    runs-on: ubuntu-latest\n    steps:\n      - if: contains( env.LABELS, '[Focus]' ) == false && contains( env.LABELS, 'Infrastructure' ) == false\n        run: exit 1\n  check-milestone:\n    name: Check Milestone\n    runs-on: ubuntu-latest\n    steps:\n      - if: github.event.pull_request.milestone == null && contains( env.LABELS, 'no milestone' ) == false\n        run: exit 1\n```"}
{"id": "63c49eb6cbc73931bb1af2d4", "level": "level5", "llm_response": "```yml\nname: Notify Downstream Projects\n\non:\n  push:\n", "answer": "```yaml name: Notify Downstream Projects\non:\n  push:\n    branches: [ develop ]\nconcurrency: ${{ github.workflow }}-${{ github.ref }}\njobs:\n  notify-downstream:\n    # Only respect triggers from our develop branch, ignore that of forks\n    if: github.repository == 'matrix-org/matrix-js-sdk'\n    continue-on-error: true\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - repo: vector-im/element-web\n            event: element-web-notify\n          - repo: matrix-org/matrix-react-sdk\n            event: upstream-sdk-notify\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify matrix-react-sdk repo that a new SDK build is on develop so it can CI against it\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.ELEMENT_BOT_TOKEN }}\n          repository: ${{ matrix.repo }}\n          event-type: ${{ matrix.event }}\n```"}
{"id": "63c496381e3364807577930d", "level": "level5", "llm_response": "```yml\nname: Wrye Bash CI\non:\n  push", "answer": "```yaml name: Wrye Bash CI\n\non: push\n\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout commit\n      uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.10'\n        architecture: 'x64'\n    - name: Restore dependencies cache\n      uses: actions/cache@v3\n      with:\n        path: ~\\AppData\\Local\\pip\\Cache\n        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n    - name: Install dependencies\n      run: |\n        python -m pip install -U pip setuptools wheel\n        python -m pip install -r requirements.txt\n    - name: Test Wrye Bash\n      run: |\n        python -m pytest\n    - name: Build Wrye Bash\n      # Note the configs - needed for build.py\n      run: |\n        git config --local user.name \"GitHub Actions\"\n        git config --local user.email \"github-action@users.noreply.github.com\"\n        python scripts/build.py --verbose\n    - name: Copy executable/license files\n      run: |\n        cp \"scripts/build/standalone/dist/Wrye Bash.exe\" Mopy\n        cp LICENSE.md Mopy/LICENSE.md\n#    - name: Create Apps folder # does not work\n#      run: mkdir Mopy/Apps\n    - name: Upload Standalone Build Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: ${{ format('Wrye Bash CI {0}.{1}', github.ref_name, github.sha) }}\n        path: |\n          Mopy/*\n          Mopy/LICENSE.md\n          !Mopy/**.py\n          !Mopy/**.pyw\n          !Mopy/**.pyd\n          !Mopy/**.bat\n          !Mopy/**.template\n          !Mopy/redist\n          !Mopy/__pycache__\n          !Mopy/bash/**.py\n          !Mopy/bash/__pycache__\n          !Mopy/bash/basher\n          !Mopy/bash/bosh\n          !Mopy/bash/brec\n          !Mopy/bash/env\n          !Mopy/bash/game\n          !Mopy/bash/gui\n          !Mopy/bash/patcher\n          !Mopy/bash/tests\n```"}
{"id": "63c49e83517fc08c1ef03f23", "level": "level5", "llm_response": "```yml\nname: release-petroleum\non:\n  event:\n", "answer": "```yaml name: release-petroleum\n\non: \n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Release Version' \n\njobs:\n  docker:\n    runs-on: ubuntu-20.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=focal\"\n            \"MACHINARIS_STREAM=latest\"\n            \"PETROLEUM_BRANCH=main\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:latest\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris-petroleum:v${{ github.event.inputs.version }}\n```"}
{"id": "63c49ecacbc73931bb1afb61", "level": "level5", "llm_response": "```yml\nname: Upgrade Python Requirements\non:\n  branches:\n   ", "answer": "```yaml name: Upgrade Python Requirements\n\non:\n  schedule:\n    # will start the job at 01:30 UTC every Friday\n    - cron: \"30 1 * * 5\"\n  workflow_dispatch:\n    inputs:\n      branch:\n        description: \"Target branch against which to create requirements PR\"\n        required: true\n        default: '$default-branch'\n\njobs:\n  call-upgrade-python-requirements-workflow:\n    uses: openedx/.github/.github/workflows/upgrade-python-requirements.yml@master\n    with:\n      branch: ${{ github.event.inputs.branch || '$default-branch' }}\n      # optional parameters below; fill in if you'd like github or email notifications\n      # user_reviewers: \"\"\n      # team_reviewers: \"\"\n      # email_address: \"\"\n      # send_success_notification: false\n    secrets:\n      requirements_bot_github_token: ${{ secrets.REQUIREMENTS_BOT_GITHUB_TOKEN }}\n      requirements_bot_github_email: ${{ secrets.REQUIREMENTS_BOT_GITHUB_EMAIL }}\n      edx_smtp_username: ${{ secrets.EDX_SMTP_USERNAME }}\n      edx_smtp_password: ${{ secrets.EDX_SMTP_PASSWORD }}\n```"}
{"id": "63c49717517fc08c1eed4a9a", "level": "level5", "llm_response": "```yml\nname: Update Prettier\n\non:\n  push:\n", "answer": "```yaml name: Update Prettier\n\"on\":\n  push:\n    branches:\n      - renovate/prettier-*\n  workflow_dispatch: {}\njobs:\n  update_prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          cache: npm\n          node-version: 16\n      - run: npm ci\n      - run: npm run lint:fix\n      - uses: gr2m/create-or-update-pull-request-action@v1.x\n        env:\n          GITHUB_TOKEN: ${{ secrets.OCTOKITBOT_PAT }}\n        with:\n          title: Prettier updated\n          body: An update to prettier required updates to your code.\n          branch: ${{ github.ref }}\n          commit-message: \"style: prettier\"\n```"}
{"id": "63c49fa5736e7f0ed8c6f75c", "level": "level5", "llm_response": "```yml\nname: Deploy Documentation\n\non:\n  push:\n    branches", "answer": "```yaml name: Deploy Documentation\n\non:\n  push:\n    branches:\n    - master\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n\n    - name: vuepress-deploy\n      uses: jenkey2011/vuepress-deploy@master\n      env:\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n        TARGET_REPO: OT-CONTAINER-KIT/redis-operator\n        TARGET_BRANCH: gh-pages\n        BUILD_SCRIPT: cd docs; yarn && yarn build\n        BUILD_DIR: src/.vuepress/dist/\n \n```"}
{"id": "63c49feb1899db58865101eb", "level": "level5", "llm_response": "```yml\nname: Release Drafter\n\non:\n  branch: main", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches: [ main ]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n          # config-name: my-config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c49db51899db5886501d95", "level": "level5", "llm_response": "```yml\n---\nname: spring-reactive-groovy-dsl\n", "answer": "```yaml name: spring-reactive-groovy-dsl\n\non:\n  push:\n    paths:\n      - \"groovy-dsl/**\"\n    branches: [ master ]\n  pull_request:\n    paths:\n      - \"groovy-dsl/**\"\n    types:\n      - opened\n      - synchronize\n      - reopened\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n          fetch-depth: 0\n    - name: Set up JDK\n      uses: actions/setup-java@v3\n      with:\n        java-version: '17'\n        distribution: 'temurin'\n        cache: 'maven'\n    - name: Start up databases via Docker Compose \n      run: |\n        docker-compose up -d mongodb\n        sleep 5\n        docker ps -a  \n    - name: Build with Maven\n      run: |\n        cd groovy-dsl\n        mvn -B package --file pom.xml\n```"}
{"id": "63c49ac5cbc73931bb195e22", "level": "level5", "llm_response": "```yml\nname: Build and Deploy Documentation\n\non:\n  push:\n", "answer": "```yaml name: Build and Deploy Documentation\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set release env\n        run: echo \"RELEASE_VERSION=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\n      - name: Set up python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Configure the git user\n        run: |\n          git config user.name \"versioning_user\"\n          git config user.email \"connaisseur@securesystems.dev\"\n      - name: Set up Python\n        run: |\n          pip install -r docs/requirements_docs.txt\n      - name: deploy\n        run: |\n          mike deploy --push --update-aliases ${RELEASE_VERSION} latest\n```"}
{"id": "63c49b76cbc73931bb19a77b", "level": "level5", "llm_response": "```yml\n---\nname: CI\non:\n  push:\n    branches", "answer": "```yaml name: CI\non: push\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n\n    services:\n      postgres:\n        image: postgres:14-alpine\n        ports: ['5432:5432']\n        env:\n          POSTGRES_PASSWORD: postgres\n\n      redis:\n        image: redis:alpine\n        ports: ['6379:6379']\n\n    env:\n      DB_HOST: localhost\n      DB_USER: postgres\n      DB_PASSWORD: postgres\n      REDIS_URL: redis://localhost:6379/0\n      RAILS_ENV: test\n      DISABLE_SPRING: true\n      CI: true\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          bundler-cache: true\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3.5.1\n        with:\n          cache: yarn\n\n      - name: Install Yarn packages\n        run: bin/yarn install --frozen-lockfile\n\n      - name: Lint with RuboCop\n        run: bin/rubocop --parallel\n\n      - name: Run ESLint\n        run: bin/yarn lint\n\n      - name: Lint with SlimLint\n        run: bundle exec slim-lint .\n\n      - name: Setup PostgreSQL\n        run: bin/rails db:create\n\n      - name: Compile assets\n        run: bin/rails assets:precompile\n\n      - name: Run Ruby Tests\n        run: bin/rspec\n\n      - name: End-to-end tests\n        uses: cypress-io/github-action@v4\n        with:\n          start: bundle exec rails server\n          wait-on: http://localhost:3000\n          browser: chrome\n          record: true\n        env:\n          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CYPRESS_BASE_URL: http://localhost:3000\n          CYPRESS: true\n        if: env.CYPRESS_RECORD_KEY != null\n\n      - name: Check JS size limit\n        run: yarn size-limit\n\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: Cypress screenshots and videos\n          path: |\n            tmp/cypress_screenshots/\n            tmp/cypress_videos/\n          if-no-files-found: ignore\n\n  deploy:\n    runs-on: ubuntu-20.04\n\n    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Fetch tag annotations\n        # https://github.com/actions/checkout/issues/290\n        run: git fetch --tags --force\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build the production image\n        run: |\n          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})\n          export COMMIT_VERSION=$(git describe --always)\n          echo $GITHUB_SHA\n          echo $COMMIT_TIME\n          echo $COMMIT_VERSION\n          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_VERSION -t app .\n\n      - name: Push the image tagged as LATEST to the container registry\n        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:latest\n          docker push ghcr.io/${{ github.repository }}:latest\n\n      - name: Push the image tagged with version to the container registry\n        if: startsWith(github.ref, 'refs/tags')\n        run: |\n          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n          docker push ghcr.io/${{ github.repository }}:${GITHUB_REF##*/}\n\n      - name: Send webhook to start deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n        if: env.DEPLOY_HOOK != null\n        run: curl -X POST ${{ env.DEPLOY_HOOK }}\n\n      - name: Notify Honeybadger about deployment\n        env:\n          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}\n          HONEYBADGER_API_KEY: ${{ secrets.HONEYBADGER_API_KEY }}\n        if: env.DEPLOY_HOOK != null && env.HONEYBADGER_API_KEY != null\n        uses: honeybadger-io/github-notify-deploy-action@v1\n        with:\n          api_key: ${{ secrets.HONEYBADGER_API_KEY }}\n```"}
{"id": "63c49eb21842bc13d77927ac", "level": "level5", "llm_response": "```yml\nname: Nightly Vinix rebuild\non:\n  push", "answer": "```yaml name: Nightly Vinix rebuild\n\n#on:\n#  schedule:\n#    - cron: '0 0 * * *'\n\njobs:\n  vinix-build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install dependencies\n        run: sudo apt-get update && sudo apt-get install make curl git mercurial libarchive-tools xorriso -y\n\n      - name: Build distro\n        run: make distro-full\n\n      - name: Build ISO\n        run: make all\n\n      - name: Set TAG_DATE variable\n        run: echo \"TAG_DATE=$(date +'%Y-%m-%d')\" >> $GITHUB_ENV\n\n      - name: Tag new nightly release\n        run: git tag nightly-$TAG_DATE && git push --tags\n\n      - name: Rename vinix.iso\n        run: mv vinix.iso vinix-nightly-$(date +'%Y%m%d').iso\n\n      - name: Create nightly release\n        uses: softprops/action-gh-release@v1\n        with:\n          name: Nightly build ${{ env.TAG_DATE }}\n          tag_name: nightly-${{ env.TAG_DATE }}\n          body: Image of an up to date Vinix nightly build.\n          files: |\n            vinix-nightly-*.iso\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a052b008460c1df53339", "level": "level5", "llm_response": "```yml\nname: Pull Request\non:\n  push:\n    branches", "answer": "```yaml name: Pull Request\non:\n  push:\n    paths:\n      - \"**.go\"\n    tags:\n      - v*\n    branches:\n      - master\n      - development\n  pull_request:\n    branches-ignore:\n      - dependabot/**\n\njobs:\n  checks:\n    name: Pull Request Checks\n    runs-on: ubuntu-latest\n    if: contains(github.event.head_commit.message, '[ci skip]') == false && contains(github.event.head_commit.message, '[skip ci]') == false\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      # - name: Run tests\n      #   run: make test\n\n      - name: Run GolangCI-Lint\n        uses: golangci/golangci-lint-action@v3.1.0\n        with:\n          version: latest\n          args: --tests=0 --timeout=30m\n\n      - name: Run Semgrep\n        run: |\n          python3 -m pip install semgrep\n          semgrep scan --config auto --dryrun -q --include \"**.go\"\n\n      - name: Cross-platform checks\n        uses: goreleaser/goreleaser-action@v3\n        with: \n          version: latest\n          args: build --skip-validate --rm-dist --snapshot --timeout=30m\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: go\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2```"}
{"id": "63c5c55aac4f2678a5bd5362", "level": "level5", "llm_response": "```yml\n---\nname: Code Scanning - Action\non: schedule", "answer": "```yaml name: \"Code Scanning - Action\"\n\non:\n  # push:\n  schedule:\n    - cron: '0 12 * * 0'\n\npermissions:\n  contents: read\n\njobs:\n  CodeQL-Build:\n\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/analyze to upload SARIF results\n    strategy:\n      fail-fast: false\n\n\n    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below).\n    #- name: Autobuild\n    #  uses: github/codeql-action/autobuild@v1\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    - name: Clean Install\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n      \n    - name: Build packages \n      run: npm run build\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49b791899db58864f3ba0", "level": "level5", "llm_response": "```yml\n---\nname: discussion-questions\non:\n  branches:\n", "answer": "```yaml name: discussion-questions\non:\n  discussion:\n    types: [created, answered]\njobs:\n  new_question:\n    if: github.event.action == 'created' && github.event.discussion.category.is_answerable\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :thinking: *{{ EVENT_PAYLOAD.discussion.user.login }} asked a question*\n\n            **{{ EVENT_PAYLOAD.discussion.title }}**\n            {{ EVENT_PAYLOAD.discussion.body }}\n\n            {{ EVENT_PAYLOAD.discussion.html_url }}\n\n  question_answered:\n    if: github.event.action == 'answered'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Discord notification\n        env:\n          DISCORD_WEBHOOK: ${{ secrets.DISCORD_QA_WEBHOOK }}\n        uses: Ilshidur/action-discord@0.3.2\n        with:\n          args: |\n            :tada: *{{ EVENT_PAYLOAD.answer.user.login }} answered a question*\n\n            **Q**: {{ EVENT_PAYLOAD.discussion.title }}\n            **A**: *{{ EVENT_PAYLOAD.answer.body }}*\n\n            {{ EVENT_PAYLOAD.answer.html_url }}\n```"}
{"id": "63c4992d6fc19abdf9cae027", "level": "level5", "llm_response": "```yml\n---\nname: Issue Labeler\non:\n  event:\n", "answer": "```yaml name: \"Issue Labeler\"\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: github/issue-labeler@v2.5\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/issue-labeler.yml\n        #not-before: 2020-01-15T02:54:32Z\n        enable-versioned-regex: 0\n        #versioned-regex: 'issue_labeler_regex_version=(\\d+)'\n        body-missing-regex-label: 'broken-template'\n```"}
{"id": "63c49f746fc19abdf9cd63ff", "level": "level5", "llm_response": "```yml\n---\nname: s2i-mvn-gradle-pr", "answer": "```yaml ---\nname: s2i-mvn-gradle-pr\non:\n  pull_request:\n    paths:\n      - s2i-mvn-gradle/**\n      - .github/workflows/s2i-mvn-gradle-pr.yaml\njobs:\n  build:\n    env:\n      context: s2i-mvn-gradle\n      image_name: s2i-mvn-gradle\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build image\n        uses: redhat-actions/buildah-build@v2\n        with:\n          context: ${{ env.context }}\n          dockerfiles: |\n            ./${{ env.context }}/Dockerfile\n          image: ${{ env.image_name }}\n          oci: true\n          tags: \"latest\"\n```"}
{"id": "63c49ab4517fc08c1eeebb47", "level": "level5", "llm_response": "```yml\n---\nname: Tests\non:\n  push:\n    branches", "answer": "```yaml name: Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [10.x]\n        test-type: [e2e, lint]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Install dependencies\n        uses: bahmutov/npm-install@v1\n      - name: Run test (${{ matrix.test-type }})\n        run: 'npm run test:${{ matrix.test-type }}'\n        env:\n          CI: true\n```"}
{"id": "63c49db2b008460c1df42b9d", "level": "level5", "llm_response": "```yml\nname: Upload Snapshot\n\non:\n  push:\n    branches", "answer": "```yaml name: Upload Snapshot\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n\njobs:\n  verify:\n    name: latest-images\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 8.0.x\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          gpg-passphrase: GPG_PASSPHRASE\n      - name: Assert Snapshot Version\n        run: |\n          ./mvnw clean install -Dmaven.test.skip=true\n          ./mvnw -q \\\n            -Dexec.executable=echo \\\n            -Dexec.args='${project.version}' \\\n            exec:exec | perl -ne 'die unless m/.*-SNAPSHOT/'\n      - name: Publish to Apache Maven Central\n        run: ./mvnw deploy\n        env:\n          OSSRH_USERNAME: ${{ secrets.SNAPSHOT_UPLOAD_USER }}\n          OSSRH_TOKEN: ${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}```"}
{"id": "63c49b7e33b087f6bde4c721", "level": "level5", "llm_response": "```yaml\nname: CI: Lint\n\non:\n  push:\n   ", "answer": "```yaml name: \"CI: Lint\"\n\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n\njobs:\n  lint:\n\n    runs-on: ubuntu-latest\n\n    container:\n      image: valalang/lint\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Lint\n      run: io.elementary.vala-lint -d .\n```"}
{"id": "63c49ecc33b087f6bde620ae", "level": "level5", "llm_response": "```yml\nname: Java CI with Maven for PRs\n\non:\n", "answer": "```yaml # This workflow will build a Java project with Maven\n# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven\n\nname: Java CI with Maven for PRs\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Disabling shallow clone is recommended for improving relevancy of reporting with SonarCloud\n          fetch-depth: 0\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: 8\n      - name: Build with Maven\n        run: mvn --show-version --no-transfer-progress verify --file pom.xml -Pcoverage,cloudbees-oss-release -Dgpg.skip=true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c499541842bc13d7770086", "level": "level5", "llm_response": "```yml\nname: Generate Roblox Standard Library\n\non:\n  branches", "answer": "```yaml name: Generate Roblox standard library\r\non: [push, pull_request]\r\njobs:\r\n  generate:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v1\r\n    - name: Generate\r\n      run: cargo run --bin selene --verbose -- generate-roblox-std\r\n    - name: Upload\r\n      uses: actions/upload-artifact@v1\r\n      with:\r\n        name: roblox\r\n        path: roblox.yml```"}
{"id": "63c4a061cbc73931bb1ba06d", "level": "level5", "llm_response": "```yml\nname: check-x-pack-winlogbeat\n\non:\n ", "answer": "```yaml name: check-x-pack-winlogbeat\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/check-xpack-winlogbeat.yml'\n      - 'x-pack/winlogbeat/**'\n      - 'winlogbeat/**'\n\nenv:\n  BEAT_MODULE: 'x-pack/winlogbeat'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch Go version from .go-version\n      run: echo \"GO_VERSION=$(cat .go-version)\" >> $GITHUB_ENV\n    - uses: actions/setup-go@v3\n      with:\n        go-version: ${{ env.GO_VERSION }}\n    - name: Run check/update\n      uses: magefile/mage-action@v2\n      with:\n        args: check update\n        workdir: \"${{ env.BEAT_MODULE }}\"\n```"}
