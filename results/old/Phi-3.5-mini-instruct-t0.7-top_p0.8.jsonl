{"id": "63c49d3433b087f6bde57d8e", "level": "level1", "llm_response": " ```yaml\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '.github/workflows/python3.10.yaml'\n    paths:\n      - '**/*.py'\n      - 'pylib/**/*'\n      - 'requirements.txt'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '.github/workflows/python3.10.yaml'\n    paths:\n      - '**/*.py'\n      - 'pylib/**/*'\n      - 'requirements.txt'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Python 3.10\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.10\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          python -m unittest discover\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      DEBUG: ${{ inputs.debug || false }}\n\nworkflow_dispatch:\n  concurrency_group: ${{ github.ref }}-${{ github.workflow }}\n  cooldown_period: 1 minute\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2020-02-04 21:40:04 +0000 (Tue, 04 Feb 2020)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Python 3.10\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      python-version: \"3.10\"\n      caches: apt pip\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496441e33648075779820", "level": "level1", "llm_response": " ```yaml\nname: Delete PR documentation\n\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  delete:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Delete PR documentation\n        run: |\n          # Assuming documentation is in a directory named 'docs' within the repository\n          if [ -d \"docs\" ]; then\n            rm -rf docs\n          fi\n          echo \"PR documentation has been deleted.\"\n```", "answer": "```yaml name: Delete PR documentation\n\non:\n  pull_request:\n    types: [ closed ]\n\n\njobs:\n  delete:\n    uses: huggingface/doc-builder/.github/workflows/delete_doc_comment.yml@main\n    with:\n      pr_number: ${{ github.event.number }}\n      package: optimum\n```"}
{"id": "63c49da61899db58865017a6", "level": "level1", "llm_response": " ```yaml\nname: Dependabot\n\non: [pull_request]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set GITHUB_TOKEN permissions\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::set-output name=permissions::write:contents\"\n\n      # Additional steps for the job can be added here\n```", "answer": "```yaml # Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Dependabot\non: pull_request\n\npermissions:\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.SYNCED_GITHUB_TOKEN_REPO}}\n    steps:\n      - name: approve\n        run: gh pr review --approve \"$PR_URL\"\n      - name: merge\n        run: gh pr merge --auto --squash --delete-branch \"$PR_URL\"\n```"}
{"id": "63c49ed81899db58865094fa", "level": "level1", "llm_response": " ```yaml\nname: Java CI with Maven\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Cache Maven dependencies\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2/repository\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n\n      - name: Build with Maven\n        run: mvn clean install -B\n```", "answer": "```yaml name: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build with Maven\n      run: mvn install\n    - uses: actions/upload-artifact@v3\n      with:\n        name: artifact\n        path: all/target\n```"}
{"id": "63c4a13d1899db588651899b", "level": "level1", "llm_response": " ```yaml\nname: Documentation building\n\non:\n  schedule:\n    - cron: '0 0 * * 2'  # At 12:00 am on Tuesdays\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - '.github'\n    paths-filter:\n      - 'docs.yml'\n      - 'enaml/**'\n      - 'examples/**'\n      - 'docs/**'\n      - 'setup.py'\n      - 'pyproject.toml'\n\njobs:\n  docs:\n    name: Docs building\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build documentation\n        run: |\n          python scripts/build_docs.py\n\n      - name: Upload documentation\n        uses: actions/upload-artifact@v2\n        with:\n          name: documentation\n          path: docs/\n```", "answer": "```yaml name: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths:\n      - .github/workflows/docs.yml\n      - \"enaml/**\"\n      - \"examples/**\"\n      - \"docs/**\"\n      - setup.py\n      - pyproject.toml\n\njobs:\n  docs:\n    name: Docs building\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Get history and tags for SCM versioning to work\n        run: |\n          git fetch --prune --unshallow\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install wheel\n          pip install -r docs/requirements.txt\n      - name: Install project\n        run: |\n          pip install -e .\n      - name: Install graphviz\n        uses: ts-graphviz/setup-graphviz@v1\n      - name: Build documentation\n        run: |\n          mkdir docs_output;\n          sphinx-build docs/source docs_output -W -b html;\n```"}
{"id": "63c49e011842bc13d778df54", "level": "level1", "llm_response": " ```yaml\nname: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '17 5 * * 1-5'\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Manage Issues\n        run: |\n          # Add steps for managing issues here\n          # This could include scripts or commands to update issue statuses, label issues, etc.\n          echo \"Managing issues...\"\n```", "answer": "```yaml name: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"17 5 * * 1-5\" # run at 5:17 on Monday to Friday\n  # We only use the issue manager for auto-closing, so we only need the cron trigger.\n  # issue_comment:\n  #   types:\n  #     - created\n  #     - edited\n  # issues:\n  #   types:\n  #     - labeled\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: tiangolo/issue-manager@0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          config: >\n            {\n                \"$schema\": \"https://raw.githubusercontent.com/tiangolo/issue-manager/master/schema.json\",\n                \"waiting for input\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for input for a month. If anyone finds the time to provide the requested information, please re-open the issue and we will continue handling it.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for fix confirmation\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for a fix confirmation for a month. If anyone still experiences this issue, please re-open the issue with updated information so we can continue working on a fix.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for release\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for resources\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                }\n            }\n```"}
{"id": "63c4990f1899db58864e41ef", "level": "level1", "llm_response": " ```yaml\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, created, edited, updated]\n\njobs:\n  EnforceLabel:\n    runs-on: ubuntu-latest\n    id: enforce-label\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Enforce PR labels\n        run: |\n          # Add your enforcement logic here, e.g., running a script or a set of commands\n          echo \"Enforcing labels for the pull request...\"\n          # Example: Run a script or a command that checks and enforces labels\n          # This is a placeholder for the actual enforcement logic\n          # You may need to install dependencies or use specific tools\n          # For instance, you could use a Node.js script to check labels\n          # npm install some-label-enforcement-package\n          # some-label-enforcement-package run\n```\n\nPlease note that the actual enforcement logic (e.g., a script or command) needs to be implemented based on your specific requirements. The above YAML is a template to set up the workflow and should be extended with the actual enforcement steps.", "answer": "```yaml ---\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, synchronize]\njobs:\n  enforce-label:\n    name: EnforceLabel\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Enforce Label\n        uses: yogevbd/enforce-label-action@8d1e1709b1011e6d90400a0e6cf7c0b77aa5efeb\n        with:\n          BANNED_LABELS: \"hold\"\n          BANNED_LABELS_DESCRIPTION: \"PRs on hold cannot be merged\"\n```"}
{"id": "63c49d1633b087f6bde5714b", "level": "level1", "llm_response": " ```yaml\nname: C++ interop tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      - github-actions\n\njobs:\n  Run:\n    runs-on: ubuntu-latest\n    id: main\n    steps:\n      # Here you would add the steps for your job, such as checking out code, setting up the environment, running tests, etc.\n```", "answer": "```yaml # Github action to test for C++ interoperability\n#\n# Most tests in the test-suite run on the CI when it comes to cross-platform testing.\n# However, the dlang auto-tester uses somewhat old host C/C++ compiler.\n# This is good for testing compatibility with e.g. LTS distributions,\n# but becomes problematic when we want to test more cutting-edge features,\n# such as newer C++ standards (C++17, C++20, etc...).\n#\n# This is the reason why we have this action: we have full control over the toolchain,\n# and it is cross platform. The supported platforms are whatever Github Actions support,\n# which is usually whatever the vendor (Canonical, Apple, Microsoft) supports.\n#\n# Notes:\n# - Some patterns used here have been developed through a lot of trial and error\n#   In particular, the build matrix approach, with two rows, and a large list of\n#   excludes, ended up being the most useful approach.\n# - Additionally, the check for the compiler version will save you a lot of trouble.\n#   Having the wrong path added to the $PATH and ending up with the wrong compiler\n#   being used can make debugging very painful.\n# - Try to use the native Github action syntax (${{ expression }}) when possible,\n#   as they are substituted with their value in the logs, unlike env variable.\n#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`\n#\n# TODO:\n# - Implement Windows + MSVC support\n# - Implement Windows + clang support\n# - Implement Linux + Clang 32 bits support (if possible)\nname: C++ interop tests\n\n# Only triggers on pushes to master & stable, as well as PR to master and stable\n# Sometimes reverts appear in the upstream repository (e.g. when the revert button\n# is clicked by a contributor with commit access), this should be tested as PR).\n#\n# Also note that Github actions does not retrigger on target branch changes,\n# hence the check on push.\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      # Use this branch name in your fork to test changes\n      - github-actions\n\njobs:\n  main:\n    name: Run\n    if: github.repository == 'dlang/dmd'\n\n    strategy:\n      # Since those tests takes very little time, don't use `fail-fast`.\n      # If runtime expand, we might want to comment this out,\n      # as most failing PRs do so because they don't compile / something is broken,\n      # very few PRs actually benefit from this.\n      fail-fast: false\n      matrix:\n        os: [ macOS-11, ubuntu-20.04, windows-2019 ]\n\n        target: [\n          # Versions of clang earlier than 11 are not available on 20.04, but are on macOS-11\n          clang-13.0.0, clang-12.0.0, clang-11.0.0, clang-10.0.0, clang-9.0.0, clang-8.0.0,\n        # For g++, we test the oldest compiler on Ubuntu 20.04, which is GCC-9\n          g++-11, g++-10, g++-9,\n          # Finally, we test MSVC 2013 - 2019\n          msvc-2019, msvc-2017, msvc-2015, msvc-2013\n        ]\n\n        # Exclude target compilers not supported by the host\n        # Note: Pattern matching is not supported so this list is quite long,\n        # and brittle, as changing an msvc entry would break on OSX, for example.\n        exclude:\n          # 20.04 only has g++-9 through to 11, and clang-11.0.0 through to 13.0.0\n          - { os: ubuntu-20.04, target: clang-10.0.0 }\n          - { os: ubuntu-20.04, target: clang-9.0.0 }\n          - { os: ubuntu-20.04, target: clang-8.0.0 }\n          # OSX only supports clang\n          - { os: macOS-11, target: g++-11 }\n          - { os: macOS-11, target: g++-10 }\n          - { os: macOS-11, target: g++-9 }\n          - { os: macOS-11, target: msvc-2019 }\n          - { os: macOS-11, target: msvc-2017 }\n          - { os: macOS-11, target: msvc-2015 }\n          - { os: macOS-11, target: msvc-2013 }\n          # We don't test g++ on Windows as DMD only mangles for MSVC\n          - { os: windows-2019, target: g++-11 }\n          - { os: windows-2019, target: g++-10 }\n          - { os: windows-2019, target: g++-9 }\n\n          # TODO: Implement support for clang and MSVC2017 on Windows\n          # Currently those are still being run by the auto-tester\n          # We can hardly test below 2017 in the CI because there's\n          # no way to install it via command line\n          # (TODO: Test with 2015 as the blog post is slightly ambiguous)\n          # https://devblogs.microsoft.com/cppblog/introducing-the-visual-studio-build-tools/\n          - { os: windows-2019, target: msvc-2017 }\n          - { os: windows-2019, target: msvc-2015 }\n          - { os: windows-2019, target: msvc-2013 }\n          - { os: windows-2019, target: clang-13.0.0 }\n          - { os: windows-2019, target: clang-12.0.0 }\n          - { os: windows-2019, target: clang-11.0.0 }\n          - { os: windows-2019, target: clang-10.0.0 }\n          - { os: windows-2019, target: clang-9.0.0 }\n          - { os: windows-2019, target: clang-8.0.0 }\n\n        # This sets the configuration for each jobs\n        # There's a bit of duplication involved (e.g. breaking down g++-9.3 into 2 strings),\n        # but some items are unique (e.g. clang-9.0.0 and 4.0.1 have differences in their naming).\n        include:\n          # Clang boilerplate\n          - { target: clang-13.0.0, compiler: clang, cxx-version: 13.0.0 }\n          - { target: clang-12.0.0, compiler: clang, cxx-version: 12.0.0 }\n          - { target: clang-11.0.0, compiler: clang, cxx-version: 11.0.0 }\n          - { target: clang-10.0.0, compiler: clang, cxx-version: 10.0.0 }\n          - { target: clang-9.0.0, compiler: clang, cxx-version: 9.0.0 }\n          - { target: clang-8.0.0, compiler: clang, cxx-version: 8.0.0 }\n          # g++ boilerplace\n          - { target: g++-11, compiler: g++, cxx-version: 11.2.0, major: 11 }\n          - { target: g++-10, compiler: g++, cxx-version: 10.3.0, major: 10 }\n          - { target: g++-9, compiler: g++, cxx-version: 9.4.0, major: 9 }\n          # Platform boilerplate\n          - { os: ubuntu-20.04, arch: x86_64-linux-gnu-ubuntu-20.04 }\n          - { os: macOS-11,  arch: x86_64-apple-darwin }\n          # Clang 9.0.0 have a different arch for OSX\n          - { os: macOS-11, target: clang-9.0.0, arch: x86_64-darwin-apple }\n          # Those targets will generate artifacts that can be used by other testers\n          - { storeArtifacts: false }\n          - { os: ubuntu-20.04, target: g++-9,    storeArtifacts: true }\n          - { os: macOS-11,  target: clang-9.0.0, storeArtifacts: true }\n          #- { os: windows-2019, target: msvc-2019,   storeArtifacts: true }\n\n    # We're using the latest available images at the time of this commit.\n    # Using a specific version for reproductibility.\n    # Feel free to update when a new release has matured.\n    runs-on: ${{ matrix.os }}\n    steps:\n\n    ########################################\n    #    Setting up the host D compiler    #\n    ########################################\n    - name: Prepare compiler\n      uses: dlang-community/setup-dlang@v1\n\n    ##############################################\n    # Find out which branch we need to check out #\n    ##############################################\n    - name: Determine base branch\n      id: base_branch\n      shell: bash\n      run: |\n        # For pull requests, base_ref will not be empty\n        if [ ! -z ${{ github.base_ref }} ]; then\n            echo \"branch=${{ github.base_ref }}\" >> $GITHUB_OUTPUT\n        # Otherwise, use whatever ref we have:\n        # For branches this in the format 'refs/heads/<branch_name>',\n        # and for tags it is refs/tags/<tag_name>.\n        else\n            echo \"branch=${{ github.ref }}\" >> $GITHUB_OUTPUT\n        fi\n\n    #########################################\n    # Checking out up DMD, druntime, Phobos #\n    #########################################\n    - name: Checkout DMD\n      uses: actions/checkout@v3\n      with:\n        path: dmd\n        persist-credentials: false\n    - name: Checkout Phobos\n      uses: actions/checkout@v3\n      with:\n        path: phobos\n        repository: dlang/phobos\n        ref: ${{ steps.base_branch.outputs.branch }}\n        persist-credentials: false\n\n\n    ########################################\n    #   Setting up the host C++ compiler   #\n    ########################################\n    - name: '[Posix] Load cached clang'\n      id: cache-clang\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/\n        key: ${{ matrix.cxx-version }}-${{ matrix.arch }}-2022-09-25-2121\n\n    - name: '[Posix] Setting up clang ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows' && steps.cache-clang.outputs.cache-hit != 'true'\n      run: |\n        if [ \"${{ matrix.cxx-version }}\" == \"8.0.0\" -o \"${{ matrix.cxx-version }}\" == \"9.0.0\" ]; then\n          wget --quiet --directory-prefix=${{ github.workspace }} https://releases.llvm.org/${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        else\n          wget --quiet --directory-prefix=${{ github.workspace }} https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        fi\n        tar -x -C ${{ github.workspace }} -f ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        # On OSX, the system header are installed via `xcode-select` and not distributed with clang\n        # Since some part of the testsuite rely on CC being only a binary (not a command),\n        # and config files where only introduced from 6.0.0, use a wrapper script.\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          # Note: heredoc shouldn't be indented\n          cat << 'EOF' > ${TMP_CC}-wrapper\n        #!/bin/bash\n        # Note: We need to use this because github.workspace is not stable\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          # Invoking clang with `clang++` will link the C++ standard library\n          # Make sure we got two separate wrapper for this\n          cat << 'EOF' > ${TMP_CC}++-wrapper\n        #!/bin/bash\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang++ -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          chmod +x ${TMP_CC}-wrapper ${TMP_CC}++-wrapper\n        fi\n\n    - name: '[Posix] Setup environment variables'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          echo \"CC=${TMP_CC}-wrapper\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++-wrapper\" >> $GITHUB_ENV\n          echo \"SDKROOT=$(xcrun --show-sdk-path)\" >> $GITHUB_ENV\n        else\n          echo \"CC=${TMP_CC}\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++\" >> $GITHUB_ENV\n        fi\n\n    # On OSX and Linux, clang is installed by default and in the path,\n    # so make sure ${CC} works\n    - name: '[Posix] Verifying installed clang version'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q 'version ${{ matrix.cxx-version }}'; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.cxx-version }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # G++ is only supported on Linux\n    - name: '[Linux] Setting up g++ ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'g++'\n      run: |\n        # Workaround bug in Github actions\n        curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -\n        # Make sure we have the essentials\n        sudo apt-get update\n        sudo apt-get install build-essential software-properties-common -y\n        # This ppa provides multiple versions of g++\n        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\n        sudo apt-get update\n        sudo apt-get install -y ${{ matrix.target }} ${{ matrix.target }}-multilib\n        echo \"CC=${{ matrix.target }}\" >> $GITHUB_ENV\n        echo \"CXX=${{ matrix.target }}\" >> $GITHUB_ENV\n\n    # Make sure ${CC} works and we don't use the $PATH one\n    - name: '[Linux] Verifying installed g++ version'\n      if: matrix.compiler == 'g++'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q '${{ matrix.target }} (Ubuntu '; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.target }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # Restore or install dmc (and DM make)\n    - name: '[Windows] Restore dmc from cache'\n      id: cache-dmc\n      if: runner.os == 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}\\tools\\\n        key: ${{ matrix.os }}-dmc857\n\n    - name: '[Windows] Install dmc'\n      if: runner.os == 'Windows' && steps.cache-dmc.outputs.cache-hit != 'true'\n      shell: powershell\n      run: |\n        $url = \"http://ftp.digitalmars.com/Digital_Mars_C++/Patch/dm857c.zip\"\n        $sha256hash = \"F51CDFEB45EAF4FFBF7ABF0FE9B3D548B202B4528401005C2C3192B00BC32367\"\n        Write-Host ('Downloading {0} ...' -f $url)\n        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n        $ProgressPreference = 'SilentlyContinue'\n        New-Item -ItemType directory -Path ${{ github.workspace }}\\tools\\\n        Invoke-WebRequest -Uri $url -OutFile '${{ github.workspace }}\\tools\\dmc.zip'\n        if ((Get-FileHash '${{ github.workspace }}\\tools\\dmc.zip' -Algorithm \"SHA256\").Hash -ne $sha256hash) {\n          exit 1\n        }\n        Expand-Archive '${{ github.workspace }}\\tools\\dmc.zip' -DestinationPath ${{ github.workspace }}\\tools\\\n\n    - name: '[Windows] Add VC toolset to PATH'\n      if: runner.os == 'Windows'\n      uses: ilammy/msvc-dev-cmd@v1\n\n    - name: '[Windows] Set environment variables'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        echo \"VISUAL_STUDIO_LIB_NOT_DM=$(which lib.exe)\" >> $GITHUB_ENV\n        echo \"HOST_DMD=${{ env.DC }}\" >> $GITHUB_ENV\n        echo \"${{ github.workspace }}/tools/dm/bin/\" >> $GITHUB_PATH\n\n    ########################################\n    #    Building DMD, druntime, Phobos    #\n    ########################################\n    - name: '[Posix] Build compiler & standard library'\n      if: runner.os != 'Windows'\n      # By default, VMs have 2 processors available, hence the `-j2`:\n      # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources\n      run: |\n        # All hosts are 64 bits but let's be explicit\n        ./dmd/compiler/src/build.d -j2 MODEL=64\n        make -C dmd/druntime -f posix.mak -j2 MODEL=64\n        make -C phobos   -f posix.mak -j2 MODEL=64\n        # Both version can live side by side (they end up in a different directory)\n        # However, since clang does not provide a multilib package, only test 32 bits with g++\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/src/build.d install -j2 MODEL=32\n          make -C dmd/druntime -f posix.mak install -j2 MODEL=32\n          make -C phobos   -f posix.mak install -j2 MODEL=32\n        fi\n\n    - name: '[Windows] Build compiler & standard library'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        dmd -run dmd/compiler/src/build.d -j2 MODEL=64\n        if [ $? -ne 0 ]; then return 1; fi\n        # Note: Only CC for druntime and AR for Phobos are required ATM,\n        # but providing all three to avoid surprise for future contributors\n        # Those should really be in the path, though.\n        cd dmd/druntime\n        make -f win64.mak\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../../phobos/\n        make -f win64.mak CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../\n\n    ########################################\n    #        Running the test suite        #\n    ########################################\n    - name: '[Posix] Run C++ test suite'\n      if: runner.os != 'Windows'\n      env:\n        # Reset LD_LIBRARY_PATH when running the tests, so they use the newly built libphobos2.so.\n        LD_LIBRARY_PATH: ''\n      run: |\n        ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=64\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/test/run.d clean\n          ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=32\n        fi\n\n    - name: '[Windows] Run C++ test suite'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        cd dmd/druntime\n        make -f win64.mak test_stdcpp CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n\n    ########################################\n    #      Run C++ frontend unittests      #\n    ########################################\n    - name: Run C++ frontend unittests\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=64\n\n    - name: Run C++ frontend unittests (32-bit)\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=32\n\n    ########################################\n    #      Store generated artifacts       #\n    ########################################\n    - name: Store artifacts\n      if: ${{ matrix.storeArtifacts }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: dmd-${{ matrix.os }}\n        path: install\n```"}
{"id": "63c49e8033b087f6bde602c0", "level": "level1", "llm_response": " ```yaml\nname: Coding Standards\non:\n  pull_request:\n    branches:\n      - '*.*'\n  push:\n    branches:\n      - '*.*'\n\njobs:\n  coding-standards:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n          extensions: mbstring\n\n      - name: Run PHP Standards\n        run: composer require squizlabs/php_codesniffer && ./vendor/bin/phpcs --standard=PSR2 src/\n\n      - name: Upload Lint Report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lint-report\n          path: lint-report.xml\n```", "answer": "```yaml name: \"Coding Standards\"\n\non:\n  pull_request:\n    branches:\n      - \"*.x\"\n  push:\n    branches:\n      - \"*.x\"\n\njobs:\n  coding-standards:\n    name: \"Coding Standards\"\n    uses: \"doctrine/.github/.github/workflows/coding-standards.yml@2.1.0\"\n    with:\n      php-version: '8.1'\n```"}
{"id": "63c496c333b087f6bde2e28f", "level": "level1", "llm_response": " ```yaml\nname: Missing API docs\non:\n  pull_request:\n    paths-ignore:\n      - marvim/api-doc-update**\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Regenerate API documentation\n        run: |\n          # Add commands to regenerate API documentation\n          echo \"API documentation regeneration steps here\"\n```", "answer": "```yaml name: Missing API docs\non:\n  pull_request:\n    branches-ignore:\n      - 'marvim/api-doc-update**'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    permissions:\n      contents: write\n      pull-requests: write\n    uses: ./.github/workflows/api-docs.yml\n    with:\n      check_only: true\n```"}
{"id": "63c4977c1842bc13d7763db2", "level": "level1", "llm_response": " ```yaml\nname: Push issue to Github Project dashboard\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [opened, edited]\n\njobs:\n  add_to_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Add issue to project dashboard\n        uses: some-action/add-issue-to-project@v1\n        env:\n          PROJECT_DASHBOARD_TOKEN: ${{ secrets.PROJECT_DASHBOARD_TOKEN }}\n          PROJECT_DASHBOARD_URL: ${{ secrets.PROJECT_DASHBOARD_URL }}\n          ISSUE_NUMBER: ${{ github.event.issue.number }}\n\n      - name: Notify team\n        run: echo \"An issue or pull request has been opened or edited. The issue has been added to the project dashboard.\"\n```\n\nNote: The `some-action/add-issue-to-project@v1` is a placeholder for an actual action or script you would use to add the issue to your project dashboard. You would need to replace it with the actual action or script command that performs this task. Additionally, you must set up the `PROJECT_DASHBOARD_TOKEN` and `PROJECT_DASHBOARD_URL` in your repository's secrets for authentication purposes.", "answer": "```yaml name: Push issue to Github Project dashboard\n\non:\n    issues:\n        types:\n        -   opened\n    pull_request_target:\n        types:\n        -   opened\n\njobs:\n    add_to_project:\n        runs-on: ubuntu-latest\n        steps:\n        -   uses: actions/add-to-project@v0.0.3\n            with:\n                project-url: https://github.com/orgs/pyscript/projects/4/\n                github-token: ${{ secrets.PROJECT_TOKEN }}\n```"}
{"id": "63c496981e3364807577ba4f", "level": "level1", "llm_response": " ```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nconcurrency:\n  group: ${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    id: test\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          pytest\n\n  e2e:\n    runs-on: ubuntu-latest\n    needs: test\n    id: e2e\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements-e2e.txt\n      - name: Run end-to-end tests\n        run: |\n          python -m pytest e2e/\n\n  commitlint:\n    runs-on: ubuntu-latest\n    needs:\n      - job: test\n        filters:\n          branches:\n            ignore:\n              - main\n    id: commitlint\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install commitlint\n        run: npm install --global @commitlint/config-conventional\n      - name: Run commitlint\n        run: npx commitlint --config commitlint.config.js\n\n  release:\n    needs:\n      - job: test\n        filters:\n          branches:\n            ignore:\n              - main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements-release.txt\n      - name: Create a release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nconcurrency:\n  group: ${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Test\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macOS-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: snok/install-poetry@v1.3.2\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install Dependencies\n        run: poetry install\n      - name: Test with Pytest\n        run: poetry run pytest --cov-report=xml\n      - uses: codecov/codecov-action@v3.1.1\n\n  e2e:\n    # https://github.com/browniebroke/django-codemod/issues/302\n    name: e2e\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n      - name: Install Dependencies\n        run: |\n          pip install .\n          pip install 'Django>=3.0,<3.1'\n      - name: Run e2e script\n        run: ./tests/test_e2e.sh\n\n  # Make sure commit messages follow the conventional commits convention:\n  # https://www.conventionalcommits.org\n  commitlint:\n    name: Lint Commit Messages\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v5.2.0\n\n  release:\n    runs-on: ubuntu-latest\n    environment: release\n    if: github.ref == 'refs/heads/main'\n    needs:\n      - test\n      - e2e\n      - commitlint\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      # Run semantic release:\n      # - Update CHANGELOG.md\n      # - Update version in code\n      # - Create git tag\n      # - Create GitHub release\n      # - Publish to PyPI\n      - name: Python Semantic Release\n        uses: relekang/python-semantic-release@v7.32.1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          pypi_token: ${{ secrets.PYPI_TOKEN }}\n```"}
{"id": "63c4a1251842bc13d77a219c", "level": "level1", "llm_response": " ```yaml\nname: docs\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n    paths:\n      - 'docs/**'\n      - 'docusaurus.config.js'\n      - 'package.json'\n      - 'Vars.js'\n      - 'sidebars.js'\n      - 'yarn.lock'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Build and Deploy\n        run: |\n          # Add your build and deploy commands here\n          echo \"Building and deploying documentation...\"\n          # Example:\n          # go build -o docs\n          # ./docs\n```", "answer": "```yaml name: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - docs/**\n      - docusaurus.config.js\n      - package.json\n      - Vars.js\n      - sidebars.js\n      - yarn.lock\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Docusaurus\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Build website\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n      - name: Deploy to GitHub Pages\n        if: github.ref == 'refs/heads/main'\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./build```"}
{"id": "63c4a14a1842bc13d77a3048", "level": "level1", "llm_response": " ```yaml\nname: Docker Latest Release\non:\n  push:\n    branches:\n      - master\n\njobs:\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build Docker image\n        run: docker build -t python-app:latest .\n\n      - name: Push Docker image\n        run: |\n          echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n          docker tag python-app:latest python-app:latest-release\n          docker push python-app:latest-release\n```", "answer": "```yaml name: Docker Latest Release\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Check Out Repo\n        uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_HUB_USERNAME }}\n          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@master\n        with:\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: ./\n          file: ./Dockerfile\n          platforms: linux/amd64,linux/arm64,linux/arm/v7\n          push: true\n          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/plex-meta-manager:latest\n\n      - name: Discord Success Notification\n        uses: meisnate12/discord-notifications@master\n        if: success()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Success**\"\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png\n\n      - name: Discord Failure Notification\n        uses: meisnate12/discord-notifications@master\n        if: failure()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Failure**\"\n          color: 0xe30c43\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png```"}
{"id": "63c4a04c1899db5886512a2b", "level": "level1", "llm_response": " ```yaml\nname: Deploy ${{ inputs.gitRef || github.ref_name  }} to ${{ inputs.environment || 'integration' }}\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag, or branch name to deploy'\n        required: true\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to (integration, staging, production)'\n        required: true\n        default: 'integration'\n      type:\n        description: 'Type of input'\n        required: true\n        default: 'string'\n  workflow_run:\n    workflows:\n      - CI\n    branches:\n      - main\n\njobs:\n  build-and-publish-image:\n    runs-on: ubuntu-latest\n    steps:\n    # Steps to build and publish the image go here\n\n  trigger-deploy:\n    needs: build-and-publish-image\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_run' && github.event.workflow_run.name == 'CI' && github.event.workflow_run.head_branch == 'main'\n    steps:\n    - name: Trigger deploy\n      uses: actions/github-script@v3\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          const inputs = {\n            gitRef: context.payload.workflow_run.inputs.gitRef,\n            environment: context.payload.workflow_run.inputs.environment\n          };\n          github.actions.createWorkflowDispatch({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            workflow_id: 'Deploy',\n            ref: context.payload.workflow_run.head_ref,\n            inputs: inputs\n          });\n```", "answer": "```yaml name: Deploy\n\nrun-name: Deploy ${{ inputs.gitRef || github.ref_name  }} to ${{ inputs.environment || 'integration' }}\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag or branch name to deploy'\n        required: true\n        type: string\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: choice\n        options:\n        - integration\n        - staging\n        - production\n        default: 'integration'\n  workflow_run:\n    workflows: [CI]\n    types: [completed]\n    branches: [main]\n\njobs:\n  build-and-publish-image:\n    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'\n    name: Build and publish image\n    uses: alphagov/govuk-infrastructure/.github/workflows/build-and-push-image.yaml@main\n    with:\n      gitRef: ${{ inputs.gitRef || github.ref }}\n    secrets:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GOVUK_ECR_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GOVUK_ECR_SECRET_ACCESS_KEY }}\n  trigger-deploy:\n    name: Trigger deploy to ${{ inputs.environment || 'integration' }}\n    needs: build-and-publish-image\n    uses: alphagov/govuk-infrastructure/.github/workflows/deploy.yaml@main\n    with:\n      imageTag: ${{ needs.build-and-publish-image.outputs.imageTag }}\n      environment: ${{ inputs.environment || 'integration' }}\n    secrets:\n      WEBHOOK_TOKEN: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_TOKEN }}\n      WEBHOOK_URL: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_URL }}\n      GH_TOKEN: ${{ secrets.GOVUK_CI_GITHUB_API_TOKEN }}\n```"}
{"id": "63c49ffc517fc08c1ef0d18c", "level": "level1", "llm_response": " ```yaml\nname: YAML Linter\non:\n  push:\n    paths-ignore:\n      - '**.java'\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  linter:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      - name: YAML Linter\n        uses: some-yaml-linter-action@v1\n        with:\n          # Additional configuration options for the YAML linter\n```\n\nPlease note that you'll need to replace `some-yaml-linter-action@v1` with the actual action or tool you're planning to use for linting YAML files. This example assumes that the action is available and can be invoked in a GitHub Actions workflow.", "answer": "```yaml name: YAML Linter\n\non:\n  push:\n    paths:\n    - '**.yml'\n  pull_request:\n    branches:\n    - master\n\npermissions:\n  contents: read\n\njobs:\n  linter:\n\n    name: YAML Linter\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: YAML Linter\n      uses: ibiqlik/action-yamllint@v3.1.1\n      with:\n        config_file: '.github/configs/yaml-linter.yml'\n```"}
{"id": "63c49a841842bc13d7777897", "level": "level1", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - 'v*'\n    releases:\n      types: [published, prerelease, draft]\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n\n  github:\n    needs: npm\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up GitHub Actions\n        uses: actions/setup-github-auth@v1\n      - name: Publish Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"GitHub Action\"\n          npm version ${{ github.ref }} --preid=release-${{ github.ref }}\n          npm publish\n```", "answer": "```yaml # https://docs.github.com/actions\n\nname: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/.htaccess bin/htaccess.conf\n      - name: Deploy to NPM\n        uses: JS-DevTools/npm-publish@v1.4.3\n        with:\n          token: ${{ secrets.NPM_TOKEN }}\n\n  github:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/h5bp.htaccess bin/htaccess.conf\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: ./dist/h5bp.htaccess\n          asset_name: h5bp.htaccess\n          asset_content_type: application/octet-stream\n```"}
{"id": "63c49c871e336480757a1819", "level": "level1", "llm_response": " ```yaml\nname: Release notifier\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify Release\n        run: echo \"A new release has been published.\"\n        # Additional notification steps can be added here\n```", "answer": "```yaml name: Release notifier\n\non:\n  release:\n    types: [published]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Notify IRC\n        uses: Gottox/irc-message-action@v2\n        with:\n          server: \"irc.libera.chat\"\n          channel: \"#shiori\"\n          nickname: ShioriBot\n          tls: true\n          sasl_password: ${{ secrets.IRC_SHIORIBOT_PWD }}\n          message: \"New release: ${{ github.event.repository.full_name }}@${{ github.event.release.name }}: ${{ github.event.release.html_url }}\"\n```"}
{"id": "63c4a1506fc19abdf9ce1a6b", "level": "level1", "llm_response": " ```yaml\nname: Contribs\n\non:\n  pull_request:\n    types: [opened, reopened]\n\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up C environment\n        uses: actions/setup-c@v1\n\n      - name: Compile C code\n        run: gcc -o my_program main.c\n\n      - name: Run compiled program\n        run: ./my_program\n\n      - name: Commit and push changes\n        if: success()\n        run: |\n          git config --local user.email \"action[bot]\"\n          git config --local user.name \"GitHub Action\"\n          git add .\n          git commit -m \"Contributions made\"\n          git push\n```", "answer": "```yaml name: Contribs\non:\n  pull_request_target:\n    types: [opened, reopened]\n\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    name: Contribs\n    steps:\n      - name: Contribs\n        uses: carlescufi/action-contribs@main\n        with:\n          github-token: ${{ secrets.NCS_GITHUB_TOKEN }}\n          command: 'external'\n          messages: |\n                    Thank you for your contribution!\n                    It seems you are not a member of the nrfconnect GitHub organization. External contributions are handled as follows:\n                    Large contributions, affecting multiple subsystems for example, may be rejected if they are complex, may introduce regressions due to lack of test coverage, or if they are not consistent with the architecture of nRF Connect SDK.\n                    PRs will be run in our continuous integration (CI) test system.\n                    If CI passes, PRs will be tagged for review and merged on successful completion of review. You may be asked to make some modifications to your contribution during review.\n                    If CI fails, PRs may be rejected or may be tagged for review and rework.\n                    PRs that become outdated due to other changes in the repository may be rejected or rework requested.\n                    External contributions will be prioritized for review based on the relevance to current development efforts in nRF Connect SDK.  Bug fix PRs will be prioritized.\n                    You may raise issues or ask for help from our Technical Support team by visiting https://devzone.nordicsemi.com/.\n                    |\n                    The author of this pull request has now been added to the nrfconnect GitHub organization.\n          labels: 'external'\n```"}
{"id": "63c49ff01899db5886510419", "level": "level1", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Update release draft\n        run: |\n          # Commands to update the release draft go here\n          echo \"Updating release draft...\"\n          # Example: git tag -a v1.0.0 -m \"Version 1.0.0\"\n          # Add actual commands to update the release draft\n\n      - name: Commit and push release draft\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add -A\n          git commit -m \"Update release draft for [$GITHUB_REF]\"\n          git push origin HEAD:refs/for/master\n```\n\nThis YAML file defines a GitHub Actions workflow named `Release Drafter` that triggers on pushes to the `master` branch and pull request events (opened, reopened, synchronized). The workflow contains a single job called `update_release_draft` that runs on the latest Ubuntu runner. It includes steps for checking out the repository, setting up Go, updating the release draft, and committing and pushing the updated draft. You'll need to replace the placeholder commands with actual commands to update your release draft according to your project's needs.", "answer": "```yaml name: Release Drafter\n\non:\n    push:\n        # branches to consider in the event; optional, defaults to all\n        branches:\n            - master\n    # pull_request event is required only for autolabeler\n    pull_request:\n        # Only following types are handled by the action, but one can default to all as well\n        types: [opened, reopened, synchronize]\n\njobs:\n    update_release_draft:\n        runs-on: ubuntu-latest\n        steps:\n            # (Optional) GitHub Enterprise requires GHE_HOST variable set\n            #- name: Set GHE_HOST\n            #  run: |\n            #    echo \"GHE_HOST=${GITHUB_SERVER_URL##https:\\/\\/}\" >> $GITHUB_ENV\n\n            # Drafts your next Release notes as Pull Requests are merged into \"master\"\n            - uses: release-drafter/release-drafter@v5\n                # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n                # with:\n                #   config-name: my-config.yml\n                #   disable-autolabeler: true\n              env:\n                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c881e336480757a1881", "level": "level1", "llm_response": " ```yaml\nname: Python testing\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested]\n  schedule:\n    - cron: '03 23 * * 1'\n\njobs:\n  lint:\n    name: Lint package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8\n      - name: Lint with flake8\n        run: |\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n      - name: Upload lint coverage report\n        uses: codecov/codecov-action@v2\n\n  tests:\n    name: Test package\n    needs: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pytest pytest-cov\n      - name: Run tests\n        run: |\n          pytest\n      - name: Upload test coverage report\n        uses: codecov/codecov-action@v2\n```", "answer": "```yaml ---\nname: \"Python testing\"\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n  schedule:\n    - cron: \"23 3 * * 1\"\n\njobs:\n  lint:\n    name: \"Lint package\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - run: |\n          echo \"package=$(ls -F | grep \\/$ | grep -v \"bin\\|examples\\|tests\" | sed -n \"s/\\///g;1p\")\" >> $GITHUB_ENV\n\n      - name: \"Set up Python\"\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-dev.txt\n          if [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Lint with flake8 & pylint\"\n        run: |\n          flake8 ${{ env.package }} tests\n          pylint ${{ env.package }} tests\n\n  tests:\n    name: \"Test package\"\n    needs: lint\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 3\n      matrix:\n        python-version: ['3.9', '3.10']\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-test.txt\n          if [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n          pip install pytest-xdist\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Run tests with pytest\"\n        if: matrix.python-version != '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar\n          ./bin/check_dirty\n\n      - name: \"Install Coveralls\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pip install pytest-xdist coveralls\n\n      - name: \"Run tests with pytest & Calculate coverage\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar --cov --cov-report=\n          ./bin/check_dirty\n\n      - name: \"Send coverage to Coveralls\"\n        if: matrix.python-version == '3.9'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: coveralls --service=github\n```"}
{"id": "63c4a08c33b087f6bde6d427", "level": "level1", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    paths:\n      - '**.swift'\n    pull_request:\n      branches:\n        - main\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Setup Swift\n        uses: actions/setup-swift@v1\n      - name: Run SwiftLint\n        run: swift lint .\n\n  ESLint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n      - name: Install ESLint\n        run: npm install eslint -g\n      - name: Run ESLint\n        run: npx eslint . --ext .swift,.js,.ts\n```", "answer": "```yaml name: Lint\n\non: [push, pull_request]\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: GitHub Action for SwiftLint with --strict\n        uses: norio-nomura/action-swiftlint@3.0.1\n        with:\n          args: --strict\n  ESLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: RUN ESLint\n        uses: 123FLO321/action-eslint-standalone@0.4.0\n        with:\n          args: --ext .js --ext .js.mustache --max-warnings=0\n```"}
{"id": "63c49c0c1899db58864f76fb", "level": "level1", "llm_response": " ```yaml\nname: Mirror main branch to master branch\non:\n  push:\n    branches:\n      - main\n\njobs:\n  mirror_job:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: read\n      security-events: write\n      repo: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Mirror main branch to master\n        run: |\n          git config --global user.name github-actions\n          git config --global user.email ${{ github.actor }}\n          git checkout -b master main\n          git push origin master\n```", "answer": "```yaml # Copyright 2013 The Flutter Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Mirror master to main branches in the gallery repository.\non:\n  push:\n    branches:\n      - 'main'\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  mirror_job:\n    permissions:\n      pull-requests: write\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'flutter/samples' }}\n    name: Mirror main branch to master branch\n    steps:\n      - name: Mirror action step\n        id: mirror\n        uses: google/mirror-branch-action@c6b07e441a7ffc5ae15860c1d0a8107a3a151db8\n        with:\n          github-token: ${{ secrets.FLUTTERMIRRORINGBOT_TOKEN }}\n          source: 'main'\n          dest: 'master'\n```"}
{"id": "63c49df833b087f6bde5cc43", "level": "level1", "llm_response": " ```yaml\nname: Check Arduino\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, locked, unlocked]\n  schedule:\n    - cron: '0 8 * * TU'\n  workflow_dispatch:\n  app_dispatch:\n    types: [workflow_dispatch]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Run linter\n        run: cppcheck --enable=all --std=c++17 .\n      - name: Send lint report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lint-report\n          path: lint-report.txt\n```", "answer": "```yaml name: Check Arduino\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by new rules added to Arduino Lint.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Arduino Lint\n        uses: arduino/arduino-lint-action@v1\n        with:\n          compliance: specification\n          library-manager: update\n          # Always use this setting for official repositories. Remove for 3rd party projects.\n          official: true\n          project-type: library\n```"}
{"id": "63c496fb33b087f6bde2f916", "level": "level1", "llm_response": " ```yaml\nname: automerge\n\non:\n  pull_request:\n    types: [labeled, unlabeled, edited, reopened, synchronize, opened, closed, synchronize, review_requested]\n  check_suite:\n    types: [completed]\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run automerge\n        run: |\n          python automerge.py\n```", "answer": "```yaml name: automerge\non:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - synchronize\n      - opened\n      - edited\n      - ready_for_review\n      - reopened\n      - unlocked\n  pull_request_review:\n    types:\n      - submitted\n  check_suite:\n    types:\n      - completed\n  status: {}\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: \"pascalgn/automerge-action@f81beb99aef41bb55ad072857d43073fba833a98\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49b2fcbc73931bb198927", "level": "level1", "llm_response": " ```yaml\nname: PHP Lint\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    name: Lint\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          extensions: mbstring\n\n      - name: Run PHP Lint\n        run: |\n          composer require squizlabs/php_codesniffer --dev\n          phpcs --standard=PSR2 --extensions=\".php\" .\n```", "answer": "```yaml name: \"PHP Lint\"\n\non:\n  - push\n  - pull_request\n\njobs:\n  tests:\n    name: \"Lint\"\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        php-version:\n          - \"5.3\"\n          - \"8.0\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v3\"\n\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"${{ matrix.php-version }}\"\n\n      - name: \"Lint PHP files\"\n        run: \"find src/ -type f -name '*.php' -print0 | xargs -0 -L1 -P4 -- php -l -f\"\n```"}
{"id": "63c4a17e6fc19abdf9ce2c3f", "level": "level1", "llm_response": " ```yaml\nname: Publish ratarmountcore to PyPI\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install wheel setuptools twine\n\n    - name: Build package\n      run: |\n        python setup.py sdist bdist_wheel\n\n    - name: Publish to PyPI\n      uses: pypa/gh-action-pypi-publish@master\n      with:\n        user: __token__\n        password: ${{ secrets.PYPI_TOKEN }}\n        repository_url: https://upload.pypi.org/legacy/\n        classifiers:\n          - Development Status :: 4 - Beta\n          - Intended Audience :: Developers\n          - License :: OSI Approved :: MIT License\n        include-verbose: true\n```", "answer": "```yaml name: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n    - name: Install Dependencies\n      run: |\n        python3 -m pip install --upgrade pip\n        pip install setuptools wheel twine build\n    - name: Build and Publish\n      working-directory: core\n      env:\n        TWINE_PASSWORD: ${{ secrets.RATARMOUNTCORE_TWINE_PASSWORD }}\n      run: |\n        python3 -m build\n        twine check dist/*\n        twine upload --skip-existing -u __token__ dist/*\n```"}
{"id": "63c4a01b6fc19abdf9cda80e", "level": "level1", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - devel\n      - devel4\n      - devel5\n      - master\n  pull_request:\n    branches:\n      - devel\n      - devel4\n      - devel5\n  schedule:\n    - cron: '0 1 * * wed'\n  workflow_dispatch:\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n      - name: Auto-detect languages\n        uses: github/codeql-action/auto-detect-languages@v1\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"devel\", \"devel4\", \"devel5\", \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"devel\", \"devel4\", \"devel5\" ]\n  schedule:\n    - cron: '20 1 * * 3'\n  workflow_dispatch:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with: { submodules: true }\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0b1cbc73931bb1bc0b8", "level": "level1", "llm_response": " ```yaml\nname: Java CI with Maven\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths-ignore:\n      - '.github'\n      - '.gitignore'\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.ref }}\n          persist-credentials: false\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n          server-id: github-actions\n          server-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Cache Maven packages\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n          restore-keys: |\n            ${{ runner.os }}-maven-\n\n      - name: Build with Maven\n        run: mvn clean install -B\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: 'my-artifact'\n          path: target/my-artifact.jar\n```\n\nPlease note that the primary programming language specified as Digital Command Language (DCL) does not align with the context of Maven and Java CI workflows, which are typically associated with Java projects. The provided YAML file is tailored for a Java project using Maven, and the language specified in the request does not directly impact the workflow configuration.", "answer": "```yaml # Run mvn test to ensure all tests pass\n\nname: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up JDK 1.8\n      uses: actions/setup-java@v3\n      with:\n        java-version: 8\n        distribution: zulu\n    - name: Run unit tests\n      run: mvn test\n```"}
{"id": "63c49b06517fc08c1eeedd30", "level": "level1", "llm_response": " ```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [opened, edited, labeled, unlabeled]\n  pull_request:\n    types: [opened, synchronize, reopened, closed, edited, review_requested, review_requested_type:assume_reviewed, review_requested_type:assigned]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup Groovy\n        uses: groovy/setup-action@v1\n\n      - name: Run Groovy Script\n        run: ./gradlew groovyScript\n        # Replace 'groovyScript' with the actual script or task you want to run\n```\n\nThis YAML defines a GitHub Actions workflow named `CLA Assistant` that triggers on various events related to issues and pull requests in a Groovy-based repository. The workflow includes a single job called `CLAssistant` that runs on the latest Ubuntu runner. It checks out the repository, sets up Groovy, and runs a Groovy script using Gradle. You should replace `./gradlew groovyScript` with the actual command or script you wish to execute.", "answer": "```yaml name: \"CLA Assistant\"\non:\n  # issue_comment triggers this action on each comment on issues and pull requests\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-regex-match@v2\n        id: sign-or-recheck\n        with:\n          text: ${{ github.event.comment.body }}\n          regex: '\\s*(I have read the CLA Document and I hereby sign the CLA)|(recheckcla)\\s*'\n      \n      - name: \"CLA Assistant\"\n        if: ${{ steps.sign-or-recheck.outputs.match != '' || github.event_name == 'pull_request_target' }}\n        # Alpha Release\n        uses: cla-assistant/github-action@v2.1.1-beta\n        env:\n          # Generated and maintained by github\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # JFrog organization secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.CLA_SIGN_TOKEN }}\n        with:\n          path-to-signatures: 'signed_clas.json'\n          path-to-document: 'https://jfrog.com/cla/'\n          remote-organization-name: 'jfrog'\n          remote-repository-name: 'jfrog-signed-clas'\n          # branch should not be protected\n          branch: 'master'\n          allowlist: bot*\n```"}
{"id": "63c49c9233b087f6bde53b34", "level": "level1", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    name: Validate PR title\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install TypeScript\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Install linter\n        run: npm install -g eslint\n\n      - name: Lint PR title\n        run: npx eslint --fix \"**/*.ts\" --ext .tsx\n        env:\n          TSESLINT_CONFIG: './tsconfig.json'\n\n      - name: Check PR title format\n        run: |\n          if ! echo \"${{ github.event.pull_request.title }}\" | grep -qE '^[a-zA-Z0-9-]+$'; then\n            echo \"PR title does not follow the naming convention.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            cleanup\n            docs\n            chore\n          # Configure which scopes are allowed.\n          scopes: |\n            admin\n            store\n            theme\n            server\n          # Configure that a scope must always be provided.\n          requireScope: false\n```"}
{"id": "63c49b9f1e3364807579baef", "level": "level1", "llm_response": " ```yaml\nname: Release Management\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup C++ environment\n        uses: actions/setup-cpp@v1\n\n      - name: Build SU2\n        run: |\n          mkdir -p build && cd build\n          cmake ..\n          make\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: su2-binaries\n          path: build/su2\n\n      - name: Deploy to release\n        if: github.ref == 'refs/heads/develop'\n        run: |\n          echo \"Deploying SU2 binaries to release...\"\n          # Add deployment script here\n```", "answer": "```yaml name: Release Management\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    name: Build SU2\n    strategy:\n      fail-fast: false\n      matrix:\n        os_bin: [macos64, macos64-mpi, linux64, linux64-mpi, win64, win64-mpi]\n        include:\n          - os_bin: win64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_windows'\n          - os_bin: win64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_windows_mpi'\n          - os_bin: macos64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_darwin'\n          - os_bin: macos64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_darwin_mpi'\n          - os_bin: linux64\n            flags: '-Dwith-mpi=disabled -Dstatic-cgns-deps=true --cross-file=/hostfiles/hostfile_linux'\n          - os_bin: linux64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_linux_mpi'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache Object Files\n        uses: actions/cache@v3\n        with:\n          path: ccache\n          key: ${{ matrix.os_bin }}-${{ github.sha }}\n          restore-keys: ${{ matrix.os_bin }}\n      - name: Build\n        uses: docker://ghcr.io/su2code/su2/build-su2-cross:220716-1459\n        with:\n          args: -b ${{ github.sha }} -f \"${{matrix.flags}}\"\n      - name: Create Archive\n        run: |\n          cd install\n          zip -r ../${{matrix.os_bin}}.zip bin/*\n        # Uploads binaries as artifacts (just as a backup)\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{matrix.os_bin}}\n          path: ${{matrix.os_bin}}.zip\n        # Update the release notes of latest draft release\n      - uses: talbring/jenkins-release-drafter@v5.2.0-jenkins-11\n        name: Update Release\n        id: update_release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Upload binaries as assets to draft release\n      - name: Upload Release Asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.uploadurl }}\n          asset_path: ${{matrix.os_bin}}.zip\n          asset_name: SU2-${{ steps.update_release.outputs.tagname }}-${{matrix.os_bin}}.zip\n          asset_content_type: application/zip\n          \n```"}
{"id": "63c49c0e1e3364807579e6b2", "level": "level1", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n          extensions: mbstring\n      \n      - name: Install dependencies\n        run: composer install --prefer-dist --no-progress --no-scripts --no-suggest\n      \n      - name: Run PHP linter\n        run: ./vendor/bin/phpcs --standard=PSR2 src/\n      \n      - name: Upload lint report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lint-report\n          path: lint-report.xml\n```", "answer": "```yaml name: Lint\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.0'\n\n    - name: Run Script\n      run: |\n        composer global require phpstan/phpstan\n        for dir in $(find * -type d -name src -not -path 'appengine/*' -not -path '*/vendor/*' -exec dirname {} \\;);\n        do\n          composer install --working-dir=$dir --ignore-platform-reqs\n          echo \"<?php require_once 'testing/sample_helpers.php';require_once '$dir/vendor/autoload.php';\" > autoload.php\n          ~/.composer/vendor/bin/phpstan analyse $dir/src --autoload-file=autoload.php\n        done\n```"}
{"id": "63c49df7cbc73931bb1aa759", "level": "level1", "llm_response": " ```yaml\nname: Pull Request Labeler\non:\n  schedule:\n    - cron: '*/5 * * * *'\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Label Pull Requests\n        run: |\n          # Example command to label PRs, replace with actual labeling logic\n          echo \"Labeling PRs...\"\n          # Add logic here to label PRs based on criteria\n```\nPlease note that the above YAML file is a template and does not contain the actual logic for labeling pull requests in a C++ repository. You would need to implement the labeling logic according to your requirements, possibly by using GitHub Actions API or other tools.", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  schedule:\n  - cron: \"*/5 * * * *\"\n\njobs:\n  triage:\n    if: github.repository == 'eclipse/omr'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: fjeremic/cron-labeler@0.3.0\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c497e71e33648075784188", "level": "level1", "llm_response": " ```yaml\nname: PR Labeling\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: write\n      security-events: write\n      security-settings: write\n      pull-requests: write\n\n    env:\n      GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n\n    steps:\n      - name: Cancel LGTM\n        run: echo \"LGTM label cancellation logic here\"\n```", "answer": "```yaml name: 'PR Labeling'\n\non:\n  pull_request_target:\n    types: [synchronize]\n\npermissions:\n  pull-requests: write\n\nenv:\n  GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel lgtm\n        run: |\n          gh pr -R ${{ github.repository }} edit ${{ github.event.pull_request.number }} --remove-label \"lgtm\"\n```"}
{"id": "63c49dc9cbc73931bb1a9737", "level": "level1", "llm_response": " ```yaml\nname: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 19 * * *'\n\njobs:\n  forward-algo-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          profile: minimal\n          override: true\n\n      - name: Build and test\n        run: cargo build --verbose && cargo test --verbose\n\n      - name: Upload test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: target/debug/tests\n```", "answer": "```yaml name: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    # The notifications for scheduled workflows are sent to the user who\n    # last modified the cron syntax in the workflow file.\n    # Trigger the workflow at 03:00(CST) every day.\n    - cron:  '00 19 * * *'\n\njobs:\n  forward-algo-test:\n    if: ${{ github.ref == 'refs/heads/main' && github.repository == 'alibaba/GraphScope' }}\n    runs-on: ubuntu-20.04\n    defaults:\n      run:\n        shell: bash --noprofile --norc -eo pipefail {0}\n    container:\n      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.9.0\n      options:\n        --shm-size 4096m\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build GAE and coordinator\n      run: |\n        pushd ${GITHUB_WORKSPACE}\n        make gae ENABLE_JAVA_SDK=OFF BUILD_TEST=OFF NUMPROC=1\n        # also make coordinator and client for python test\n        make coordinator && make client\n        popd\n\n    - name: Run Forward algorithms test\n      env:\n        DEPLOYMENT: 'standalone'\n      run: |\n        cd ${GITHUB_WORKSPACE}/python\n        python3 -m pytest --cov=graphscope --cov-config=.coveragerc --cov-report=xml \\\n          --cov-report=term -s -v -m \"not slow\" graphscope/nx/algorithms/tests/forward\n\n    - name: Upload Coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./python/coverage.xml\n        fail_ci_if_error: true\n```"}
{"id": "63c49e7d1e336480757add5b", "level": "level1", "llm_response": " ```yaml\nname: generate-tag\non: [workflow_dispatch]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Kotlin\n      uses: gradle/kotlin-setup-action@v1\n\n  generate-tag:\n    needs: build\n    runs-on: ubuntu-latest\n    environment:\n      GRADLE_OPTS: \"-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\\\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\\\"\"\n    steps:\n    - name: Generate Tag\n      run: ./gradlew generate-tag --args=\"--stage=${{ github.event.inputs.stage-this }} --scope=${{ github.event.inputs.scope-this }}\"\n    - name: Commit Tag\n      run: |\n        git config --local user.email \"actions@github.com\"\n        git config --local user.name \"GitHub Actions\"\n        git add -A\n        git commit -m \"Generated tag: ${{ github.event.inputs.stage-this }}-${{ github.event.inputs.scope-this }}\"\n        git push\n```", "answer": "```yaml name: generate-tag\n\non:\n  workflow_dispatch:\n    branches: [main]\n    inputs:\n      stage:\n        description: 'Stage'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'alpha'\n          - 'beta'\n          - 'rc'\n          - 'final'\n          - 'auto'\n      scope:\n        description: 'Scope'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'minor'\n          - 'major'\n          - 'auto'\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Gradle build\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace build \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\n  generate-tag:\n    runs-on: ubuntu-latest\n\n    needs:\n      - build\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.TOKEN_GITHUB_ACTION }}\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Generate Tag\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace createSemverTag \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Push\n        run: git push --follow-tags\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n```"}
{"id": "63c49da4517fc08c1eefe37e", "level": "level1", "llm_response": " ```yaml\nname: e2e test all\non: pull_request\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n    env:\n      PRISMA_TELEMETRY_INFORMATION: prisma-client-go e2e-test.yml\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run e2e tests\n        run: go test ./...\n        env:\n          PRISMA_TELEMETRY_INFORMATION: ${{ env.PRISMA_TELEMETRY_INFORMATION }}\n```", "answer": "```yaml name: e2e test all\non: pull_request\nenv:\n  PRISMA_TELEMETRY_INFORMATION: \"prisma-client-go e2e-test.yml\"\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.19'\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/.cache\n          restore-keys: ${{ runner.os }}-go-\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n\n      - name: deps\n        run: go mod download\n\n      - name: generate\n        run: |\n          cd test/e2e/\n          go generate -tags e2e ./...\n        # env:\n        #   DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n\n      - name: test\n        run: |\n          cd test/e2e/\n          go test ./... -run '^TestE2E.*$' -tags e2e -v\n        env:\n          # DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n          PRISMA_CLIENT_GO_LOG: info\n```"}
{"id": "63c49e501842bc13d778ff97", "level": "level1", "llm_response": " ```yaml\nname: Linter\n\non:\n  push:\n    branches: [ main ]\n    tags: [ 'v*' ]\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run Golint\n        run: |\n          go get -u golang.org/x/lint/golint\n          golint ./...\n```", "answer": "```yaml on: [push, pull_request]\nname: Linter\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v3.1.0\n      - name: Run Golint\n        uses: reviewdog/action-golangci-lint@v2\n        with:\n          golangci_lint_flags: \"--tests=false\"\n```"}
{"id": "63c498d31899db58864e2905", "level": "level1", "llm_response": " ```yaml\nname: TOC Generator\non:\n  push:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - '**/ReadMe.md'\n\njobs:\n  generateTOC:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Generate TOC\n        run: |\n          # Here you would add the actual C# script or command to generate the table of contents\n          echo \"Generating TOC for ReadMe.md\"\n          # Example: dotnet tool run MyTOCGenerator --input ReadMe.md --output ReadMe_TOC.md\n          # Replace with actual command to generate TOC\n```", "answer": "```yaml name: TOC Generator\n\non:\n  push:\n    paths:\n      - 'ReadMe.md'\n\njobs:\n  generateTOC:\n    name: TOC Generator\n    runs-on: ubuntu-latest\n    steps:\n      - uses: technote-space/toc-generator@v2.4.0\n        with:\n          TOC_TITLE: \"## Table of Contents\"\n```"}
{"id": "63c498e96fc19abdf9cac426", "level": "level1", "llm_response": " ```yaml\nname: Update Python Dependencies\non: [workflow_dispatch]\njobs:\n  update_python_dependencies:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run Tests\n        run: |\n          python -m unittest discover -s tests\n```", "answer": "```yaml name: Update Python Dependencies\n\non:\n    workflow_dispatch:\n\njobs:\n    update_python_dependencies:\n        uses: SFDO-Tooling/.github/.github/workflows/update_python_dependencies.yml@main\n        with:\n            python-version: 3.8\n```"}
{"id": "63c499601899db58864e6352", "level": "level1", "llm_response": " ```yaml\nname: Issue Closer\non:\n  issues:\n    types: [opened, reopened]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      \n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      \n      - name: Build\n        run: go build -v ./...\n      \n      - name: Test\n        run: go test -v ./...\n      \n      - name: Archive Build Artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: ./build\n      \n      - name: Notify\n        uses: some/notification-action@v1\n        if: success()\n        with:\n          token: ${{ secrets.NOTIFICATION_TOKEN }}\n          recipient: ${{ github.actor }}\n          subject: \"Issue Closed/Reopened: ${{ github.event.issue.number }}\"\n```\n\nThis YAML file defines a GitHub Actions workflow named `Issue Closer` that triggers on the opening or reopening of an issue in a repository with the primary programming language set to Go. The workflow contains a single job called `build` that runs on the latest Ubuntu runner. The job includes steps for checking out the repository, setting up Go, building the code, running tests, archiving build artifacts, and sending a notification upon success. Adjust the notification step with the appropriate notification action and token as needed.", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Issue Closer\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  issues:\n    types: [ opened, reopened ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: Close Issue\n        uses: peter-evans/close-issue@v1.0.1\n        with:\n          comment: |\n           **Use [Discuss Issues](https://discuss.dgraph.io/c/issues/35/clients/46) for reporting issues about this repository.**\n```"}
{"id": "63c496dccbc73931bb17caa5", "level": "level1", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8 pytest black\n      - name: Lint with flake8\n        run: |\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n      - name: Format with black\n        run: |\n          black --check .\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v3\n    - uses: pre-commit/action@v3.0.0\n```"}
{"id": "63c49e4f736e7f0ed8c67231", "level": "level1", "llm_response": " ```yaml\nname: CMake\n\non:\n  push:\n    branches:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup CMake\n        uses: CMake-Action/cmake-action@v1\n        with:\n          cmake-version: '3.18'\n          install: true\n          build: true\n          build-type: ${{ env.BUILD_TYPE }}\n      - name: Build\n        run: make all\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Package\n        run: make package\n```", "answer": "```yaml name: CMake\n\non:\n  push:\n    branches: [ \"*\" ]\n  pull_request:\n    branches: [ \"*\" ]\n  release:\n    type: [created, edited]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macos-latest\n\n    runs-on: ${{matrix.os}}\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Windows: Configure environment\"\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        # Select MinGW toolchain instead of the default MSVC.\n        echo \"CMAKE_GENERATOR=MinGW Makefiles\" >> $GITHUB_ENV\n\n    - name: \"Linux: Install dependency libraries\"\n      if: runner.os == 'Linux'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y --no-install-recommends freeglut3-dev libudev-dev libopenal-dev\n\n    - name: Configure CMake\n      working-directory: ${{github.workspace}}/src\n      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      working-directory: ${{github.workspace}}/src\n      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}\n\n    - name: Test\n      working-directory: ${{github.workspace}}/build\n      run: ctest -C ${{env.BUILD_TYPE}}\n      \n    - uses: actions/upload-artifact@v2\n      with:\n        name: binaries\n        path: ${{github.workspace}}/build/*.xpl\n        if-no-files-found: error\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: binaries\n          path: FlyWithLua/64\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: FlyWithLua_plugin\n          path: |\n            ${{github.workspace}}/FlyWithLua*\n          if-no-files-found: error\n\n      - name: Create plugin archive\n        if: github.event_name == 'release'\n        run: zip -r FlyWithLua_NG_Lin_Mac_Win.zip FlyWithLua/\n\n      - name: Upload binaries to release\n        if: github.event_name == 'release'\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: FlyWithLua_NG_Lin_Mac_Win.zip\n          tag: ${{ github.ref }}\n          overwrite: true\n```"}
{"id": "63c49cd8b008460c1df3d38d", "level": "level1", "llm_response": " ```yaml\nname: GraalVM CE CI\n\non:\n  push:\n    branches:\n      - master\n      - '[1-9][0-9]*.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9][0-9]*.[0-9]+.x'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up JDK\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n        server-id: 'graalvm'\n        server-version: 'latest'\n    - name: Build with Maven\n      run: mvn clean verify\n    - name: Run tests\n      run: mvn test\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v2\n      with:\n        name: compiled-jar\n        path: target/my-app-1.0.jar\n```", "answer": "```yaml # WARNING: Do not edit this file directly. Instead, go to:\n#\n# https://github.com/micronaut-projects/micronaut-project-template/tree/master/.github/workflows\n#\n# and edit them there. Note that it will be sync'ed to all the Micronaut repos\nname: GraalVM CE CI\non:\n  push:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\njobs:\n  build:\n    if: github.repository != 'micronaut-projects/micronaut-project-template'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: ['17']\n        graalvm: ['latest', 'dev']\n    steps:\n       # https://github.com/actions/virtual-environments/issues/709\n      - name: Free disk space\n        run: |\n         sudo rm -rf \"/usr/local/share/boost\"\n         sudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\n         sudo apt-get clean\n         df -h\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n      - name: Setup GraalVM CE\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: ${{ matrix.graalvm }}\n          java-version: ${{ matrix.java }}\n          components: 'native-image'\n      - name: Build with Gradle\n        run: |\n          if ./gradlew tasks --no-daemon --all | grep -w \"testNativeImage\"\n          then\n            ./gradlew check testNativeImage --continue --no-daemon\n          else\n            ./gradlew check --continue --no-daemon\n          fi\n        env:\n           TESTCONTAINERS_RYUK_DISABLED: true\n           GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n           GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}\n           GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}\n           PREDICTIVE_TEST_SELECTION: \"${{ github.event_name == 'pull_request' && 'true' || 'false' }}\"\n      - name: Publish Test Report\n        if: always()\n        uses: mikepenz/action-junit-report@v3.5.2\n        with:\n          check_name: GraalVM CE CI / Test Report (Java ${{ matrix.java }})\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          check_retries: 'true'\n```"}
{"id": "63c49fbe1e336480757b5ce4", "level": "level1", "llm_response": " ```yaml\nname: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    name: Release and changelog\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Generate changelog\n        run: npm run generate-changelog\n\n      - name: Release package\n        run: npm run release-package\n\n      - name: Commit and push changelog\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n          git add CHANGELOG.md\n          git commit -m \"Update changelog for version X.Y.Z\"\n          git push\n```\nPlease note that you will need to define the `generate-changelog` and `release-package` scripts in your `package.json` file for this workflow to function correctly. The scripts should handle the creation of the changelog and the packaging of your TypeScript project, respectively.", "answer": "```yaml name: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    # Basic security: the release job can only be executed from this repo and from the main branch (not a remote thing)\n    if: ${{ github.repository == 'belgattitude/nextjs-monorepo-example' && contains('refs/heads/main',github.ref)}}\n    name: Release and changelog\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # To run comparison we need more than the latest commit.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: \ud83d\udce5 Monorepo install\n        uses: ./.github/actions/yarn-nm-install\n\n      # @link https://github.com/changesets/action\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        uses: changesets/action@v1\n        with:\n          # publish: yarn g:release\n          cwd: ${{ github.workspace }}\n          title: '[Release] Version packages'\n          # Optional, might be used in conjunction with GITHUB_TOKEN to\n          # allow running the workflows on a Version package action.\n          # Be aware of security implications.\n          # setupGitUser: true\n        env:\n          # See https://github.com/changesets/action/issues/147\n          HOME: ${{ github.workspace }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Uncomment and add secrets to allow publishing\n          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49bb533b087f6bde4ddd4", "level": "level1", "llm_response": " ```yaml\nname: Pull Request Labeler\n\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Label Pull Request\n      uses: some/labeling-action@v1\n      with:\n        labels_to_add: 'urgent, needs-review'\n```\n\nPlease note that the `some/labeling-action@v1` is a placeholder for the actual labeling action you intend to use. You'll need to replace it with the actual action's name and version that suits your requirements for labeling pull requests in a TypeScript-based GitHub repository.\n\nAlso, ensure that you have the necessary permissions and any required secrets or configurations set up for the labeling action to function correctly within your GitHub Actions workflow.", "answer": "```yaml name: 'Pull Request Labeler'\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: DataDog/labeler@glob-all\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n```"}
{"id": "63c4972e1899db58864d7e70", "level": "level1", "llm_response": " ```yaml\nname: Dependabot auto-merge\n\non: [pull_request]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install Dependabot\n        uses: actions/install-github-packages@v1\n        with:\n          github-packages: 'dependabot,dependabot-auto-merge'\n\n      - name: Dependabot auto-merge\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          dependabot auto-merge --auto-merge --pr-only\n\n      - name: Set GitHub token permissions\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.setPermissions({\n              token: context.token,\n              scopes: ['pulls', 'contents'],\n              permissions: ['write']\n            })\n```\nPlease note that the permissions part in the original request is not directly translatable into a GitHub Actions workflow YAML file. GitHub Actions permissions are configured through the `actions/github-script` step, but setting permissions like this is not a typical use case and may not be supported as described. The permissions for the token are usually managed through GitHub's repository settings, and not within the workflow file.\n\nThe above workflow will check out the repository, set up Python, install Dependabot and Dependabot auto-merge packages, and run the Dependabot auto-merge command. The permissions script is added to set the token permissions, but this is a placeholder and may not function as intended for permissions management. For actual permissions management, please refer to GitHub's documentation on setting up repository permissions.", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.0\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49da46fc19abdf9cca9c1", "level": "level1", "llm_response": " ```yaml\nname: build\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    shell: bash\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    steps:\n      - name: Run unit tests\n        run: |\n          echo \"Running unit tests on ${{ matrix.os }}\"\n          # Insert Go unit test commands here\n```\nThis YAML file defines a GitHub Actions workflow named `build` that triggers on push and pull request events to specified branches, excluding paths listed in the `paths-ignore` filter. It includes a job named `test` that runs unit tests on different operating systems using the default shell of bash. Replace the echo line with actual Go unit test commands as needed.", "answer": "```yaml # `name` value will appear \"as is\" in the badge.\n# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository\n# yamllint --format github .github/workflows/commit.yaml\n---\nname: \"build\"\n\non:\n  push:  # We run tests on non-tagged pushes to master\n    tags: ''\n    branches: master\n    # ignore docs as they are built with Netlify. Ignore travis-related changes, too.\n    # func-e.wxs is used for the Windows Installer, so tested with msi.yaml\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:  # We also run tests on pull requests targeted at the master branch.\n    branches: master\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.\n  # For example, you can try to build a branch without raising a pull request.\n  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow\n  workflow_dispatch:\n\ndefaults:\n  run:  # use bash for all operating systems unless overridden\n    shell: bash\n\njobs:\n  test:\n    name: \"Run unit tests (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 90  # instead of 360 by default\n    strategy:\n      fail-fast: false  # don't fail fast as sometimes failures are operating system specific\n      matrix:  # use latest available versions and be consistent on all workflows!\n        os: [ubuntu-20.04, macos-12, windows-2022]\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: \"Cache Go\"\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          # go.mod for go release version, go.sum for modules used, and Tools.mk for 'go run' tools\n          key: test-${{ runner.os }}-go-${{ hashFiles('go.mod', 'go.sum', 'Tools.mk') }}\n          restore-keys: test-${{ runner.os }}-go-\n\n      - name: \"Cache Envoy binaries\"\n        uses: actions/cache@v3\n        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall\n          path: ~/.func-e/versions\n          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}\n          restore-keys: test-${{ runner.os }}-envoy-\n\n      - name: \"Verify clean check-in\"\n        run: make check\n\n      - name: \"Run unit tests\"\n        run: make test\n\n      - name: \"Build the `func-e` binary\"\n        run: make build\n\n      - name: \"Run e2e tests using the `func-e` binary\"\n        run: make e2e\n\n      - name: \"Run e2e tests using the `func-e` binary (CentOS)\"\n        if: runner.os == 'Linux'\n        run: docker run --rm -v $HOME/.func-e:$HOME/.func-e -v $PWD:/work ${CENTOS_IMAGE} -o ${E2E_FUNC_E_PATH}/func-e e2e\n        env:  # CENTOS_IMAGE was built by internal-images.yaml; E2E_FUNC_E_PATH was built via `make build`\n          CENTOS_IMAGE: ghcr.io/tetratelabs/func-e-internal:centos-8\n          E2E_FUNC_E_PATH: build/func-e_linux_amd64\n\n      - name: \"Generate coverage report\"  # only once (not per OS)\n        if: runner.os == 'Linux'\n        run: make coverage\n\n      - name: \"Upload coverage report\"  # only on master push and only once (not per OS)\n        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'\n        uses: codecov/codecov-action@v2\n        with:\n          file: ./coverage.txt\n```"}
{"id": "63c4a0b91842bc13d779f860", "level": "level1", "llm_response": " ```yaml\nname: update-flake\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 7 * * TU'\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Update lockfile\n        run: |\n          # Commands to update the lockfile for Scala project\n          echo \"Updating lockfile...\"\n          # Insert Scala-specific commands here\n```", "answer": "```yaml name: update-flake\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '45 7 * * 2' # runs weekly on Tuesday at 07:45\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: tibdex/github-app-token@v1\n        id: generate-token\n        with:\n          app_id: 207529\n          private_key: ${{ secrets.STEWARD_PRIVATE_KEY }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          branch: update/flake-lock-${{ github.run_number }}\n```"}
{"id": "63c4a13633b087f6bde7145d", "level": "level1", "llm_response": " ```yaml\nname: Master - CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Julia ${{ matrix.julia-version }} - ${{ matrix.os }}:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.5, 1.6, 1.7]\n        os: [ubuntu-latest, windows-latest]\n    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Julia environment\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - name: Install dependencies\n        run: julia --project=@. -e 'using Pkg; Pkg.instantiate()'\n\n      - name: Run tests\n        run: julia --project=@. -e 'using Pkg; Pkg.test()'\n```", "answer": "```yaml name: Master - CI\n\non:\n  push:\n    branches:\n      - master\n    schedule:\n      - cron: 0 * * * *\njobs:\n  test:\n    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: ['1', 'nightly']\n        julia-arch: [x64]\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        continue-on-error: true\n        with:\n          version: ${{ matrix.julia-version }}\n          arch: ${{ matrix.julia-arch }}\n      - uses: julia-actions/julia-buildpkg@latest\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-runtest@latest\n        continue-on-error: ${{ matrix.julia-version == 'nightly' }}\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v1\n        with:\n          file: ./lcov.info\n          flags: unittests\n          name: codecov-umbrella\n          fail_ci_if_error: false\n          token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"id": "63c4a057517fc08c1ef0f4c2", "level": "level1", "llm_response": " ```yaml\nname: Autocloser\non:\n  issues:\n    types: [opened, edited, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Autoclose SCSS Files\n        run: |\n          # Commands to automate the closing of SCSS files\n          # This is a placeholder for actual automation steps\n          echo \"Automating SCSS file closure for issue: ${{ github.event.issue.number }}\"\n```", "answer": "```yaml name: Autocloser\non: [issues]\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Issue auto-closer\n      uses: roots/issue-closer-action@v1.1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-close-message: \"@${issue.user.login} this issue was automatically closed because it did not follow the bellow rules:\\n\\n<pre>\\n\\n\\n\\nIMPORTANT: Please use the following link to create a new issue:\\n\\nhttps://www.creative-tim.com/new-issue/argon-dashboard\\n\\n**If your issue was not created using the app above, it will be closed immediately.**\\n\\n\\n\\nLove Creative Tim? Do you need Angular, React, Vuejs or HTML? You can visit:\\n\ud83d\udc49  https://www.creative-tim.com/bundles\\n\ud83d\udc49  https://www.creative-tim.com\\n\\n\\n</pre>\\n\\n\"\n        issue-pattern: (\\#\\#\\# Version([\\S\\s.*]*?)\\#\\#\\# Reproduction link([\\S\\s.*]*?)\\#\\#\\# Operating System([\\S\\s.*]*?)\\#\\#\\# Device([\\S\\s.*]*?)\\#\\#\\# Browser & Version([\\S\\s.*]*?)\\#\\#\\# Steps to reproduce([\\S\\s.*]*?)\\#\\#\\# What is expected([\\S\\s.*]*?)\\#\\#\\# What is actually happening([\\S\\s.*]*?)---([\\S\\s.*]*?)\\#\\#\\# Solution([\\S\\s.*]*?)\\#\\#\\# Additional comments([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)|(\\#\\#\\# What is your enhancement([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)\n```"}
{"id": "63c496fd33b087f6bde2f9ec", "level": "level1", "llm_response": " ```yaml\nname: Label Pull Requests\n\non: [pull_request]\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Label Pull Request\n      run: |\n        # Here you would implement the logic to label the pull request\n        # This is a placeholder for the actual labeling script or command\n        echo \"Labeling pull request ${{ github.event.pull_request.number }}\"\n```", "answer": "```yaml name: Label Pull Requests\n\non:\n- pull_request_target\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Add Labels for PR\n      uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/labeler.yaml\n        sync-labels: true\n\n    - name: Add PR Size Labels for PR\n      uses: codelytv/pr-size-labeler@v1\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        xs_label: 'size/XS'\n        xs_max_size: '20'\n        s_label: 'size/S'\n        s_max_size: '50'\n        m_label: 'size/M'\n        m_max_size: '150'\n        l_label: 'size/L'\n        l_max_size: '300'\n        xl_label: 'size/XL'\n        fail_if_xl: 'false'\n        message_if_xl: >\n          'This PR has too many changes.\n          Please make sure you are NOT addressing multiple issues with one PR.'\n```"}
{"id": "63c49b4e33b087f6bde4b436", "level": "level1", "llm_response": " ```yaml\nname: deploy armeria\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths:\n      - 'build-bin/**'\n      - 'docker/**'\n      - 'armeria/**'\n      - '.github/workflows/deploy-armeria.yaml'\n      - 'parent-pom.xml'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n\n      - name: Deploy to Armeria\n        run: ./deploy-armeria.sh\n```", "answer": "```yaml # yamllint --format github .github/workflows/deploy.yml\n---\nname: deploy armeria\n\non:\n  # We deploy non-tagged pushes to master relevant for this project. We can't opt out of\n  # documentation-only commits because GH actions does not permit paths and paths-ignore.\n  push:\n    tags: ''\n    branches: master\n    paths:\n      - \"build-bin/**\"\n      - \"docker/**\"\n      - \"armeria/**\"\n      - \".github/workflows/deploy-armeria.yaml\"\n      - \"parent-pom.xml\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04  # newest available distribution, aka focal\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 1\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ./m2repository  # Shared with the Docker build context via .dockerignore\n          key: ${{ runner.os }}-armeria-maven-${{ hashFiles('parent-pom.xml', 'armeria/pom.xml') }}\n          restore-keys: ${{ runner.os }}-armeria-maven-\n      # We can't cache Docker without using buildx because GH actions restricts /var/lib/docker\n      # That's ok because DOCKER_PARENT_IMAGE is always ghcr.io and local anyway.\n      - name: Deploy armeria\n        env:\n          # GH_USER=<user that created GH_TOKEN>\n          GH_USER: ${{ secrets.GH_USER }}\n          # GH_TOKEN=<hex token value>\n          #   - pushes Docker images to ghcr.io\n          #   - create via https://github.com/settings/tokens\n          #   - needs repo:status, public_repo, write:packages, delete:packages\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: |\n          build-bin/configure_deploy armeria &&\n          build-bin/deploy armeria\n```"}
{"id": "63c49d9333b087f6bde5a392", "level": "level1", "llm_response": " ```yaml\nname: Dependabot auto-merge\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Makefile\n        uses: actions/setup-make@v1\n\n      - name: Run Dependabot\n        run: make dependabot\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49fce1842bc13d779961e", "level": "level1", "llm_response": " ```yaml\nname: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  GolangCI Lint:\n    runs-on: ubuntu-latest\n    name: GolangCI Lint\n    env:\n      GOLANGCI_LINT_VERSION: v1.34.0\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Run Go linter\n      run: |\n        go install golang.org/x/lint/golint@${{ env.GOLANGCI_LINT_VERSION }}\n        golint ./...\n\n  Run unit tests with the race detector enabled:\n    runs-on: ubuntu-latest\n    name: Run unit tests with the race detector enabled\n    needs: GolangCI Lint\n    env:\n      GOLANGCI_LINT_RUN_RACE: true\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Run tests with race detector\n      run: |\n        go test -race ./...\n```", "answer": "```yaml name: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  lint:\n    name: GolangCI Lint\n    runs-on: ubuntu-latest\n    container: golangci/golangci-lint:v1.50-alpine\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Run linter\n      run: golangci-lint run\n\n  tests:\n    name: Run unit tests with the race detector enabled\n    runs-on: ubuntu-latest\n    container: golang:1.19-alpine\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 1\n\n      - name: Install GCC and C libraries required by the race detector\n        run: apk add --update gcc musl-dev\n\n      - name: Run unit tests\n        run: go test -v -race ./...\n```"}
{"id": "63c4a0e633b087f6bde6f51f", "level": "level1", "llm_response": " ```yaml\nname: Sync master to preview\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Sync master to preview\n      run: |\n        # Commands to sync master branch to preview branch\n        # This is a placeholder, actual sync command will depend on the project's requirements\n        git checkout preview\n        git fetch origin master\n        git reset --hard origin/master\n        git push origin preview\n```", "answer": "```yaml name: Sync master to preview\n\n# When there's a push on master, we want to reflect it on preview too.\non:\n  push:\n    branches:\n      - 'master'\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n\n      - name: Merge master -> preview\n        uses: devmasx/merge-branch@v1.3.0\n        with:\n          type: now\n          head_to_merge: ${{ github.ref }}\n          from_branch: master\n          target_branch: preview\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a05b33b087f6bde6c178", "level": "level1", "llm_response": " ```yaml\nname: Build/release\non:\n  push:\n    tags:\n      - '*'\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install Dependencies\n      run: npm install\n    - name: Run Tests\n      run: npm test\n\n  release:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Build\n      run: npm run build\n    - name: Deploy\n      uses: peaceiris/actions-gh-pages@v3\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./build\n    - name: Release\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        git config --global user.email \"actions@github.com\"\n        git config --global user.name \"GitHub Action\"\n        git tag -a v${{ github.ref }} -m \"Release ${{ github.ref }} on ${{ github.run_id }}\"\n        git push origin v${{ github.ref }}\n        git push --tags\n```", "answer": "```yaml name: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v3\n        - name: Use Node.js 16\n          uses: actions/setup-node@v3\n          with:\n            node-version: 16\n        - run: yarn\n        - run: yarn test --detectOpenHandles --forceExit\n\n  release:\n    needs: test\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Build & Release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          github_token: ${{ secrets.github_token }}\n          release: true\n```"}
{"id": "63c496561899db58864d23d8", "level": "level1", "llm_response": " ```yaml\nname: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/molecule.prometheus.yml'\n      - '.config/molecule/config.yml'\n      - 'molecule/Dockerfile.*'\n      - 'molecule/prometheus/**'\n      - 'roles/prometheus/**'\n      - 'plugins/filter/prometheus_architecture.py'\n      - 'plugins/filter/yaml.py'\n  workflow_dispatch:\n\njobs:\n  prometheus:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        debug-this:\n          - false\n          - true\n\n    env:\n      TMAC_DEBUG: ${{ github.event.inputs.debug-this || 'false' }}\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Setup Jinja\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: pip install jinja2\n\n    - name: Run Molecule\n      run: molecule test --debug ${{ env.TMAC_DEBUG }}\n```", "answer": "```yaml name: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.prometheus.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/prometheus/**\n      - roles/prometheus/**\n      # Plugins\n      - plugins/filter/prometheus_architecture.py\n      - plugins/filter/yaml.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  prometheus:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: prometheus\n```"}
{"id": "63c49d6ecbc73931bb1a706f", "level": "level1", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 24 * * sun'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '24 0 * * 0'\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  analyze:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49752cbc73931bb17fa34", "level": "level1", "llm_response": " ```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version-this:\n        description: 'Version to release'\n        required: false\n      force-this:\n        description: 'Force a release even when there are release-blockers'\n        required: false\n      schedule:\n        - cron: '0 17 15 * *'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Release a new Relay version\n        env:\n          RELEASE_VERSION: ${{ github.event.inputs.version-this || 'latest' }}\n          FORCE_RELEASE: ${{ github.event.inputs.force-this || 'false' }}\n        run: |\n          # Add your release logic here\n          echo \"Releasing version: $RELEASE_VERSION\"\n          if [ \"$FORCE_RELEASE\" == \"true\" ]; then\n            # Force release logic\n          fi\n```", "answer": "```yaml name: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version to release (optional)\n        required: false\n      force:\n        description: Force a release even when there are release-blockers (optional)\n        required: false\n\n  schedule:\n    # We want the release to be at 9-10am Pacific Time\n    # We also want it to be 1 hour before the on-prem release\n    - cron: \"0 17 15 * *\"\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    name: \"Release a new Relay version\"\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GH_RELEASE_PAT }}\n          fetch-depth: 0\n\n      - name: Prepare release\n        uses: getsentry/action-prepare-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}\n        with:\n          version: ${{ github.event.inputs.version }}\n          force: ${{ github.event.inputs.force }}\n          calver: true\n```"}
{"id": "63c49b3c1e33648075799306", "level": "level1", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    id: release\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Release process\n        run: |\n          # Add your release process steps here\n          echo \"Releasing TypeScript project on the main branch\"\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: dist\n          path: ./dist\n\n      - name: Notify users\n        uses: some/notification-action@v1\n        with:\n          token: ${{ secrets.NOTIFICATION_TOKEN }}\n          recipients: user@example.com\n```\nThis YAML file defines a GitHub Actions workflow named `Release` that is triggered on push events to the `main` branch. The workflow contains a single job named `release` that runs on the latest Ubuntu runner. The job includes steps for checking out the repository, setting up Node.js, installing dependencies, building the TypeScript project, a placeholder for the release process, uploading build artifacts, and notifying users. Please replace the placeholder step with your actual release process and adjust the notification action according to your needs.", "answer": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits\n          fetch-depth: 0\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n      - name: Install Dependencies\n        run: npm i\n\n      - name: Create Release Pull Request / NPM Publish\n        uses: changesets/action@v1\n        with:\n          publish: npm run changeset-publish\n          version: npm run changeset-version\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49e5b517fc08c1ef02da4", "level": "level1", "llm_response": " ```yaml\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    branches:\n      - release-notes-preview-is-not-working\n  issues:\n    open:\n      types: [comment]\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          # Add any required dependencies here\n\n      - name: Preview release notes\n        run: |\n          # Add the commands to preview the release notes here\n          echo \"Previewing release notes for pull request: ${{ github.event.number }}\"\n\n      - name: Notify contributors\n        if: success()\n        uses: actions/github-script@v3\n        with:\n          script: |\n            github.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.issue.number,\n              body: 'Release notes preview is ready! Check out the changes.'\n            })\n```", "answer": "```yaml # https://github.com/marketplace/actions/release-notes-preview\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    # This workflow is not working for some reason. It is stuck with this message:\n    #  Release Notes Confirmation Pending \u2014 awaiting release notes review\n    #  Keeping the YAML file to check back again in the future\n    branches: [release-notes-preview-is-not-working] # [develop]\n  issue_comment:\n    types: [edited]\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          git fetch --prune --unshallow --tags\n      - uses: snyk/release-notes-preview@v1.6.2\n        with:\n          releaseBranch: develop\n        env:\n          GITHUB_PR_USERNAME: ${{ github.actor }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a621e33648075793e20", "level": "level1", "llm_response": " ```yaml\nname: macOS\n\non:\n  push:\n    branches:\n      - main\n      - 'issue*'\n      - 'release-*'\n  pull_request:\n    branches:\n      - main\n      - 'issue*'\n      - 'release-*'\n\njobs:\n  test:\n    name: Compile and test planner\n    runs-on: macOS\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          python -m unittest discover -s tests\n```", "answer": "```yaml ---\nname: macOS\n\non:\n  push:\n    branches: [main, issue*, release-*]\n  pull_request:\n    branches: [main, issue*, release-*]\n\njobs:\n  test:\n    name: Compile and test planner\n    timeout-minutes: 60\n    runs-on: ${{ matrix.version.macos }}\n    strategy:\n      matrix:\n        version:\n          - {macos: macos-11, python: '3.8'}\n          - {macos: macos-12, python: '3.10'}\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@master\n\n      - name: Install Python\n        uses: actions/setup-python@master\n        with:\n          python-version: ${{ matrix.version.python }}\n\n      - name: Compile planner\n        run: |\n          export CXXFLAGS=\"-Werror\" # Treat compilation warnings as errors.\n          ./build.py\n          ./build.py --debug\n\n      - name: Install tox\n        run: |\n          pip3 install tox\n\n      - name: Install VAL\n        run: |\n          brew install gnu-sed\n          git clone https://github.com/KCL-Planning/VAL.git\n          cd VAL\n          git checkout a5565396007eee73ac36527fbf904142b3077c74\n          make clean  # Remove old build artifacts and binaries.\n          gsed -i 's/-Werror //g' Makefile  # Ignore warnings.\n          make -j2\n          mv validate ../\n          cd ../\n          rm -rf VAL\n\n      - name: Run driver, translator and search tests\n        run: |\n          export PATH=\"$(pwd):$PATH\" # Add VAL to path.\n          cd misc\n          tox -e driver,translator,search\n\n...\n```"}
{"id": "63c49c571e336480757a03aa", "level": "level1", "llm_response": " ```yaml\nname: Add issues to project\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Add issue to project\n        run: |\n          # Here you would add the logic to integrate the issue with your project.\n          # This is a placeholder for the actual implementation.\n          echo \"Adding issue ${{ github.event.issue.number }} to project\"\n          # Example: git add -A .\n          # git commit -m \"Add issue ${{ github.event.issue.number }} to project\"\n          # git push\n```", "answer": "```yaml name: Add isuses to project\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        with: \n          project-url: https://github.com/orgs/FirelyTeam/projects/6\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}```"}
{"id": "63c499b71842bc13d7772793", "level": "level1", "llm_response": " ```yaml\nname: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  CABAL_ARGS: '--project-file=cabal.project.ci'\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: 'True'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        ghc-version: ['8.10', '9.0', 'latest']\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup GHC\n        uses: actions/setup-ghc@v1\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n      - name: Build with GHC\n        run: cabal build $CABAL_ARGS\n      - name: Test with GHC\n        run: cabal test $CABAL_ARGS\n\n  publish:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Publish to GitHub Pages\n        run: |\n          ghp-cli publish --source .\n          ghp-cli update-site\n\n  release:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Publish to GitHub Releases\n        run: |\n          gh release publish --tag ${{ github.ref }}\n```", "answer": "```yaml name: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    types:\n      - opened\n      - synchronize\n\nenv:\n  CABAL_ARGS: \"--project-file=cabal.project.ci\"\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: true\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  build:\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        ghc-version: [\"9.2\"]\n        include:\n          - experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"8.10\"\n            experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"9.0\"\n            experimental: false\n\n    name: Build on ${{ matrix.os }} with GHC-${{ matrix.ghc-version }}\n    runs-on: ${{ matrix.os }}\n    continue-on-error: ${{ matrix.experimental }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: 'true'\n\n      - name: Setup Haskell\n        uses: ./.github/actions/setup-haskell\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n          cabal-project-freeze-file: cabal.project.ci.freeze\n\n      - name: Setup Node\n        uses: ./.github/actions/setup-node\n\n      - name: Setup BumpVer\n        uses: ./.github/actions/setup-bumpver\n        # depends on requirements-dev.txt\n\n      - name: Setup HTMLProofer\n        if: runner.os != 'Windows'\n        uses: ./.github/actions/setup-htmlproofer\n        # depends on Gemfile\n\n      - name: Setup EPUBCheck\n        uses: ./.github/actions/setup-epubcheck\n        id: setup-epubcheck\n        with:\n          epubcheck-version: \"4.2.6\"\n\n      - name: Cache build\n        uses: actions/cache@v3\n        with:\n          path: _cache\n          key: build-${{ runner.os }}-${{ secrets.BUILD_CACHE_VERSION }}\n\n      - name: Build\n        run: make build\n\n      - name: Test with BumpVer\n        run: bumpver update --dry --no-fetch\n\n      - name: Test with HTML-validate\n        run: make test-html-validate\n\n      - name: Test with HTMLProofer\n        if: runner.os != 'Windows'\n        run: make test-htmlproofer\n\n      - name: Test with EPUBCheck\n        run: make test-epubcheck\n        env:\n          EPUBCHECK: \"java -jar ${{ steps.setup-epubcheck.outputs.epubcheck-jar-path }}\"\n\n      - name: Upload latest artifact\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: Website HEAD ${{ runner.os }} GHC-${{ matrix.ghc-version }}\n          path: _site\n          if-no-files-found: error\n\n  publish:\n    name: Publish to GitHub Pages\n    needs: [build]\n    if: github.event_name == 'push'\n    uses: ./.github/workflows/publish.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n\n  release:\n    name: Publish to GitHub Releases\n    needs: [build]\n    if: startsWith(github.ref, 'refs/tags/v')\n    uses: ./.github/workflows/release.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n```"}
{"id": "63c49a621e33648075793dfd", "level": "level1", "llm_response": " ```yaml\nname: Steam Upload\n\non:\n  push:\n    tags:\n      - '*'\n    releases:\n      types: [published, draft, prereleased]\n  workflow_dispatch:\n\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    env:\n      WORKFLOW_ID: 583765\n      GIT_NIGHTLY_BRANCH: master\n      STEAM_NIGHTLY_BRANCH: nightly\n      STEAM_STABLE_BRANCH: staging\n      STEAM_BETA_BRANCH: beta_staging\n      SEVENZIP_HASH: 5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d\n    inputs:\n      tag-this:\n        description: 'Tag to fetch and upload (default: nightly)'\n        default: 'nightly'\n      win_url_override:\n        description: 'Windows build to use (.zip)'\n        required: false\n      mac_url_override:\n        description: 'Mac build to use (.dmg)'\n        required: false\n      mac_arm_url_override:\n        description: 'Mac arm build to use (.dmg)'\n        required: false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup SevenZip\n        uses: microsoft/setup-sevenzip@v1\n      - name: Upload Steam\n        run: |\n          # Steam upload logic goes here\n          # Use ${{ github.event.release.tag_name }} for the tag\n          # Use ${{ github.event.inputs.tag-this }} for the tag override\n          # Use ${{ github.event.inputs.win_url_override }} for the Windows build\n          # Use ${{ github.event.inputs.mac_url_override }} for the Mac build\n          # Use ${{ github.event.inputs.mac_arm_url_override }} for the Mac arm build\n```\nThis YAML file defines a GitHub Actions workflow named `Steam Upload` that triggers on push events for tags and releases, as well as manual dispatch. It sets up environment variables and includes a job named `upload` with steps to check out the code and placeholder logic for uploading Steam. You would need to replace the `# Steam upload logic goes here` comment with the actual commands to upload the Steam builds using the provided inputs.", "answer": "```yaml name: Steam Upload\n\non:\n  release:\n    types:\n    - published\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Tag to fetch and upload (nightly if none)'\n        required: false\n      win_url_override:\n        description: 'Windows build to use (.zip only)'\n        required: false\n      mac_url_override:\n        description: 'Mac build to use (.dmg only)'\n        required: false\n      mac_arm_url_override:\n        description: 'Mac ARM build to use (.dmg only)'\n        required: false\n  schedule:\n  - cron: 0 0 * * *\n\nenv:\n  WORKFLOW_ID: 583765\n  GIT_NIGHTLY_BRANCH: master\n  STEAM_NIGHTLY_BRANCH: nightly\n  STEAM_STABLE_BRANCH: staging\n  STEAM_BETA_BRANCH: beta_staging\n  SEVENZIP_HASH: 5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d\n\njobs:\n  upload:\n    name: Steam upload\n    runs-on: ubuntu-20.04\n    if: github.repository_owner == 'obsproject'\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        path: source\n\n      # The 7-Zip version available in the default ubuntu repos (p7zip) is wildly out-of-date and does not properly support DMG files.\n    - name: Setup 7-Zip\n      run: |\n        mkdir 7z && cd 7z\n        curl -s https://www.7-zip.org/a/7z2200-linux-x64.tar.xz -o 7z.tar.xz\n        \n        if [[ '${{ env.SEVENZIP_HASH }}' != \"$(sha256sum 7z.tar.xz | cut -d \" \" -f 1)\" ]]; then\n            echo \"7-Zip Download hash does not match!\"\n            exit 1\n        fi\n        \n        tar -xJf 7z.tar.xz\n        echo \"$(pwd)\" >> $GITHUB_PATH\n\n    - name: Get build information\n      id: build-info\n      run: |\n        EVENT='${{ github.event_name }}'\n        if [[ ${EVENT} == 'release' || ( ${EVENT} == 'workflow_dispatch' && -n '${{ github.event.inputs.tag }}') ]]; then\n            if [[ ${EVENT} == \"release\" ]]; then\n                DESC='${{ github.event.release.tag_name }}'\n                if [[ '${{ github.event.release.prerelease }}' == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL='${{ github.event.release.assets_url }}'\n            else\n                RELEASE=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/releases/tags/${{ github.event.inputs.tag }}')\"\n\n                DESC=\"$(jq -r '.tag_name' <<< ${RELEASE})\"\n                if [[ \"$(jq -r '.prerelease' <<< ${RELEASE})\" == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL=\"$(jq -r '.assets_url' <<< ${RELEASE})\"\n            fi\n\n            ASSETS=\"$(curl -s \"${ASSETS_URL}\")\"\n            WIN_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x64.zip\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x86_64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*arm64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            TYPE='release'\n        else\n            BRANCH='${{ env.STEAM_NIGHTLY_BRANCH }}'\n            BUILDS=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/actions/workflows/${{ env.WORKFLOW_ID }}/runs?per_page=1&event=push&status=success&branch=${{ env.GIT_NIGHTLY_BRANCH }}')\"\n            ARTIFACTS_URL=\"$(jq -r '.workflow_runs[].artifacts_url' <<< ${BUILDS})\"\n            DESC=\"g$(jq -r '.workflow_runs[].head_sha' <<< \"${BUILDS}\" | cut -c1-9)\"\n\n            ARTIFACTS=\"$(curl -s ${ARTIFACTS_URL})\"\n            WIN_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*windows-x64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-x86_64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-arm64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            TYPE='nightly'\n        fi\n\n        # Apply overrides from workflow_dispatch\n        if [[ ${EVENT} == 'workflow_dispatch' ]]; then\n            if [[ -n '${{ github.event.inputs.win_url_override }}' ]]; then\n                WIN_ASSET_URL='${{ github.event.inputs.win_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_url_override }}' ]]; then\n                MAC_ASSET_URL='${{ github.event.inputs.mac_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_arm_url_override }}' ]]; then\n                MAC_ARM_ASSET_URL='${{ github.event.inputs.mac_arm_url_override }}'\n            fi\n        fi\n\n        if [[ -z ${WIN_ASSET_URL} || -z ${MAC_ASSET_URL} || -z ${MAC_ARM_ASSET_URL} ]]; then\n            echo \"Missing at least one asset URL!\"\n            exit 1\n        fi\n\n        # set env variables for subsequent steps\n        echo \"type=${TYPE}\" >> $GITHUB_OUTPUT\n        echo \"branch=${BRANCH}\" >> $GITHUB_OUTPUT\n        echo \"desc=${DESC}\" >> $GITHUB_OUTPUT\n        echo \"win_url=${WIN_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_intel_url=${MAC_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_arm_url=${MAC_ARM_ASSET_URL}\" >> $GITHUB_OUTPUT\n\n    - name: Restore build cache\n      id: cache\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/steam/build\n        key: ${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}\n        # Using \"restore-keys\" will restore the most recent cache for the branch, even if the exact cache doesn't exist.\n        # This doesn't set cache-hit to true so it won't skip the upload for nightlies.\n        restore-keys: ${{ steps.build-info.outputs.branch }}\n\n    - name: Determine if Steam upload should run\n      # If the nightly build has already been uploaded and thus a cache exists skip this and the following steps.\n      # Steam does not prevent us from uploading duplicate builds so this would just pollute the dashboard.\n      # This is a bit of a hack and can fail to work if our cache has been evicted or we somehow have no commits for 7 days,\n      # but it's better than nothing!\n      id: should-run\n      run: |\n        if [[ '${{ steps.build-info.outputs.type }}' == 'release' || '${{ steps.cache.outputs.cache-hit }}' != 'true' ]]; then\n            echo \"result=true\" >> $GITHUB_OUTPUT\n        else\n            echo \"result=false\" >> $GITHUB_OUTPUT\n        fi\n\n    - name: Download and prepare builds\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        echo \"::group::Download Windows build\"\n        if [[ '${{ steps.build-info.outputs.win_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        else\n            curl -L '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Download Mac builds\"\n        if [[ '${{ steps.build-info.outputs.mac_intel_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg\n        fi\n\n        if [[ '${{ steps.build-info.outputs.mac_arm_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg\n        fi\n        echo \"::endgroup::\"\n\n        mkdir -p steam && cd steam\n\n        echo \"::group::Extract and prepare Win64\"\n        mkdir steam-windows\n        (\n            cd steam-windows\n            unzip ../../windows.zip\n            # CI builds can be double-zipped\n            if compgen -G \"*.zip\" > /dev/null; then\n                unzip *.zip\n                rm *.zip\n            fi\n            # copy install scripts and create sentinel file\n            cp -r ../../source/CI/steam/scripts_windows scripts\n            touch disable_updater\n        )\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract macOS (x86)\"\n        mkdir -p steam-macos/x86\n        # CI builds are zipped\n        if [[ -f ../mac_x86.dmg.zip ]]; then\n            unzip ../mac_x86.dmg.zip\n            # 7-Zip will have an exit code of 2 due to the \"unsafe\" 'Applications' symlink.\n            # GitHub treats this as a failure so ignore non-zero exit codes here.\n            7zz x *.dmg -otmp_x86 || true\n            rm *.dmg\n        else\n            7zz x ../mac_x86.dmg -otmp_x86 || true\n        fi\n\n        if [ -d tmp_x86/OBS.app ]; then\n            mv tmp_x86/OBS.app steam-macos/x86\n        else\n            mv tmp_x86/*/OBS.app steam-macos/x86\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract and prepare macOS (arm64)\"\n        mkdir -p steam-macos/arm64\n        if [[ -f ../mac_arm64.dmg.zip ]]; then\n            unzip ../mac_arm64.dmg.zip\n            7zz x *.dmg -otmp_arm64 || true\n            rm *.dmg\n        else\n            7zz x ../mac_arm64.dmg -otmp_arm64 || true\n        fi\n\n        if [ -d tmp_arm64/OBS.app ]; then\n            mv tmp_arm64/OBS.app steam-macos/arm64\n        else\n            mv tmp_arm64/*/OBS.app steam-macos/arm64\n        fi\n\n        cp ../source/CI/steam/scripts_macos/launch.sh steam-macos/launch.sh\n        echo \"::endgroup::\"\n\n    - name: Setup steamcmd\n      if: steps.should-run.outputs.result == 'true'\n      uses: CyberAndrii/setup-steamcmd@e19cd1516315ce46dbfffa47193f92fe42d1419e\n\n    - name: Generate Steam auth code\n      if: steps.should-run.outputs.result == 'true'\n      id: steam-totp\n      uses: CyberAndrii/steam-totp@0fc9e59dc5bbf4368d23d5a33956f104248da31a\n      with:\n        shared_secret: ${{ secrets.STEAM_SHARED_SECRET }}\n\n    - name: Upload to Steam\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        cd steam\n        echo \"::group::Prepare Steam build script\"\n        # The description in Steamworks for the build will be \"github_<branch>-<tag/short hash>\", e.g. \"github_nightly-gaa73de952\"\n        sed 's/@@DESC@@/${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}/;s/@@BRANCH@@/${{ steps.build-info.outputs.branch }}/' ../source/CI/steam/obs_build.vdf > build.vdf\n        echo \"Generated file:\"\n        cat build.vdf\n        echo \"::endgroup::\"\n        echo \"::group::Upload to Steam\"\n        steamcmd +login '${{ secrets.STEAM_USER }}' '${{ secrets.STEAM_PASSWORD }}' '${{ steps.steam-totp.outputs.code }}' +run_app_build \"$(pwd)/build.vdf\" +quit\n        echo \"::endgroup::\"\n\n    - name: Upload Steam build logs\n      if: steps.should-run.outputs.result == 'true'\n      uses: actions/upload-artifact@v3\n      with:\n        name: steam-build-logs\n        path: ${{ github.workspace }}/steam/build/*.log\n```"}
{"id": "63c497b0cbc73931bb181e14", "level": "level1", "llm_response": " ```yaml\nname: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Add issue to board\n        uses: some/action-to-add-issue-to-board@v1\n        with:\n          board-name: 'Your Board Name'\n          issue-number: ${{ github.event.issue.number }}\n          board-url: ${{ github.event.issue.html_url }}\n```\n\nPlease note that `some/action-to-add-issue-to-board@v1` is a placeholder for the actual action or script you would use to add the issue to a board. You will need to replace it with the appropriate action or script reference that performs this task. If there's no existing action available, you might need to create a custom GitHub Action or script that does this job.\n\nAlso, remember to replace `'Your Board Name'` with the actual name of the board where you want to track the issue. This workflow will now automatically trigger when a new issue is opened in your TypeScript repository and will add the issue to the specified board.", "answer": "```yaml name: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n        run: |\n          gh api graphql -f query='\n            query {\n              organization(login: \"revoltchat\"){\n                projectNext(number: 3) {\n                  id\n                  fields(first:20) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") |.settings | fromjson.options[] | select(.name==\"Todo\") |.id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          item_id=\"$( gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')\"\n          \n          echo 'ITEM_ID='$item_id >> $GITHUB_ENV\n```"}
{"id": "63c4981c33b087f6bde36b61", "level": "level1", "llm_response": " ```yaml\nname: sync-files\non:\n  schedule:\n    - cron: '0 0 * * *' # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check secrets\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"Checking secrets...\"\n          # Add steps to check secrets here\n\n  sync-files:\n    needs: check-secret\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Sync files\n        run: |\n          echo \"Syncing files...\"\n          # Add shell commands to sync files here\n```", "answer": "```yaml name: sync-files\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    uses: autowarefoundation/autoware-github-actions/.github/workflows/check-secret.yaml@v1\n    secrets:\n      secret: ${{ secrets.APP_ID }}\n\n  sync-files:\n    needs: check-secret\n    if: ${{ needs.check-secret.outputs.set == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.APP_ID }}\n          private_key: ${{ secrets.PRIVATE_KEY }}\n\n      - name: Run sync-files\n        uses: autowarefoundation/autoware-github-actions/sync-files@v1\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          pr-labels: |\n            bot\n            sync-files\n          auto-merge-method: squash\n```"}
{"id": "63c49ee0517fc08c1ef064ca", "level": "level1", "llm_response": " ```yaml\nname: Update Issues\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: write\n      security-events: write\n      issues: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Update issue permissions\n        run: |\n          # Add your script or command to update issue permissions here\n          # Example:\n          # git config --global --add github.token \"your_github_token\"\n          # git config --global --add github.token \"your_github_token\"\n          # This is a placeholder; you will need to replace it with actual commands to update permissions.\n```\n\nPlease note that the actual commands to update issue permissions will depend on the specific tools and scripts you have in place. The example provided is a placeholder and will not execute any real operations. You will need to replace it with the appropriate commands to modify the permissions as required.", "answer": "```yaml # Install this in .github/workflows/ to automate issue maintenance.\nname: Update Issues\n\non:\n  workflow_dispatch:\n    # Allows for manual triggering.\n  schedule:\n    # Run every 30 minutes\n    - cron: '*/30 * * * *'\n\npermissions:\n  issues: write\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          repository: shaka-project/shaka-github-tools\n\n      - name: Update Issues\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          cd update-issues\n          npm ci\n          node main.js\n```"}
{"id": "63c49c411e3364807579faeb", "level": "level1", "llm_response": " ```yaml\nname: PR Labels\n\non:\n  pull_request:\n    types: [opened, labeled, unlabeled, deleted, edited]\n\njobs:\n  workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Jinja Template Processor\n        uses: some-jinja-processor-action@v1\n        with:\n          template-path: 'path/to/templates'\n          output-path: 'path/to/output'\n\n      - name: Label Analysis\n        run: |\n          # Add your label analysis logic here\n          echo \"Analyzing labels...\"\n          # Example: Use jq to parse labels from GitHub Actions payload\n          labels=$(echo \"$GITHUB_EVENT_PATH\" | jq '.pull_request.labels')\n          echo \"Labels: $labels\"\n\n      - name: Notify on Label Changes\n        if: ${{ always() }}\n        run: |\n          # Add your notification logic here\n          echo \"Notifying about label changes...\"\n          # Example: Send a notification using a hypothetical notification action\n          notify-action --message \"Labels changed in PR ${{ github.event.number }}\"\n```\n\nPlease note that the `some-jinja-processor-action@v1` and `notify-action` are placeholders for actual actions you would use in your workflow. You would need to replace these with real actions or scripts that perform the desired Jinja template processing and notification tasks. The `jq` utility is used for parsing JSON data, which is commonly used in GitHub Actions to handle event payloads.", "answer": "```yaml ---\nname: PR Labels\n\n# yamllint disable-line rule:truthy\non:\n  pull_request_target:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/pr-labels.yaml@main\n```"}
{"id": "63c4a19f1842bc13d77a502b", "level": "level1", "llm_response": " ```yaml\nname: CompatHelper\non:\n  schedule:\n    - cron: '0 0 * * *'  # Trigger at 12:00 am every day\n  workflow_dispatch:  # Allow manual triggering\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup Julia\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: '1.x'\n\n      - name: Compatibility Check\n        run: |\n          julia --project=. --eval 'using Pkg; Pkg.instantiate(); Pkg.add(\"CompatChecker\");'\n          # Add your compatibility check logic here\n          echo \"Compatibility check completed\"\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}  # trigger CI\n        run: julia -e 'using CompatHelper; CompatHelper.main(; subdirs = [\"\", \"docs\"])'\n```"}
{"id": "63c49ee2736e7f0ed8c6ab16", "level": "level1", "llm_response": " ```yaml\nname: Check changelog file included\n\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - '**.txt'\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v2\n\n      - name: Check for changelog file\n        run: |\n          if [[ -f perceval/CHANGELOG.md ]]; then\n            echo \"Changelog file found.\"\n          else\n            echo \"Changelog file not found.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: Check changelog file included\n\non:\n  pull_request:\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: bitergia/release-tools-check-changelog@master\n```"}
{"id": "63c49f21b008460c1df4bcb5", "level": "level1", "llm_response": " ```yaml\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        java-version: ['8', '11', '16']\n    defaults:\n      run:\n        shell: bash\n    name: ${{ matrix.os }}-Java-${{ matrix.java-version }} - Maven\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Set up JDK ${{ matrix.java-version }}\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ matrix.java-version }}\n          distribution: 'temurin'\n      - name: Cache Maven packages\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml # Runs optaplanner-persistence-jpa module tests in a PostgreSQL container\n\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  jpa-postgresql-container:\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n        java-version: [ 11 ]\n        maven-version: [ '3.8.6' ]\n      fail-fast: false\n    runs-on: ${{ matrix.os }}\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n    name: ${{ matrix.os }} - Java ${{ matrix.java-version }} - Maven\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: Java and Maven Setup\n        uses: kiegroup/kogito-pipelines/.ci/actions/maven@main\n        with:\n          java-version: ${{ matrix.java-version }}\n          maven-version: ${{ matrix.maven-version }}\n          cache-key-prefix: ${{ runner.os }}-${{ matrix.java-version }}-maven${{ matrix.maven-version }}\n      # Builds the JPA module and runs tests in a PostgreSQL container\n      - name: Build with Maven\n        run: mvn -B clean install -pl :optaplanner-persistence-jpa -am -Ppostgresql\n```"}
{"id": "63c4a18e33b087f6bde73347", "level": "level1", "llm_response": " ```yaml\nname: Test Report\non:\n  workflow_run:\n    workflows:\n      - 'LoRa E2E CI'\n      - 'LoRa Build & Test CI'\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup .NET\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: '5.0.x'\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build with tests\n      run: dotnet build --no-restore\n\n    - name: Run tests\n      run: dotnet test --no-build --verbosity normal\n\n    - name: Generate report\n      run: dotnet report --output ./TestReport\n```", "answer": "```yaml name: 'Test Report'\non:\n  workflow_run:\n    workflows: ['LoRa E2E CI', 'LoRa Build & Test CI']                     # runs after CI workflow\n    types:\n      - completed\njobs:\n  report:\n    permissions:\n      checks: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: dorny/test-reporter@v1\n      with:\n        artifact: /(.*)results/\n        name: '$1Results'\n        path: '**/*.trx'\n        reporter: dotnet-trx\n```"}
{"id": "63c497f91899db58864dce30", "level": "level1", "llm_response": " ```yaml\nname: Integration Test - Expression\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested]\n\njobs:\n  test_expression:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run integration tests\n        run: npm test\n```\nPlease note that this YAML file assumes that your TypeScript project is set up with npm and that you have a `package.json` file with a `test` script defined for running integration tests. You may need to adjust the Node.js version and test command according to your project's specifics.", "answer": "```yaml name: Integration Test - Expression\n\non:\n  push:\n    branches: [main]\n  pull_request:\n\njobs:\n  test_expression:\n    name: ubuntu-latest\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: 16\n          architecture: x64\n      - run: npm ci\n      - run: npm run test-expression\n```"}
{"id": "63c49758517fc08c1eed656f", "level": "level1", "llm_response": " ```yaml\nname: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize]\n\njobs:\n  lint:\n    name: GolangCI-Lint\n    runs-on: ubuntu-latest\n    permissions:\n      actions: none\n      contents: none\n      pull-requests: none\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      - name: Setup Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run GolangCI-Lint\n        run: go install golang.org/x/tools/cmd/golangci-lint@v1.27.0\n        working-directory: ./...\n```", "answer": "```yaml name: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\n# Remove all permissions from GITHUB_TOKEN except metadata.\npermissions: {}\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        working-directory:\n          - \"\"\n          - test\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.49.0\n          working-directory: ${{matrix.working-directory}}\n```"}
{"id": "63c49caa33b087f6bde54454", "level": "level1", "llm_response": " ```yaml\nname: Language Service\n\non:\n  push:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'src/language-service/*'\n      - '.github/*'\n  pull_request:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'src/language-service/*'\n      - '.github/*'\n\njobs:\n  language-service:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Language Service\n        run: npm run build\n        env:\n          TSC_NODE_OPTIONS_ESModuleInterop: true\n```", "answer": "```yaml name: Language Sevice\n\non:\n  push:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n  pull_request:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n\njobs:\n  language-service:\n    name: Language Service\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: \"16\"\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        working-directory: src/language-service\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        working-directory: src/language-service\n        run: npm run lint\n\n      - name: \ud83d\ude80 Build Schema\n        working-directory: src/language-service\n        run: npm run schema\n\n      - name: \ud83d\ude80 Run Compile\n        working-directory: src/language-service\n        run: npm run compile\n\n      - name: \ud83c\udfd7 Create .npmrc\n        if: success() && github.ref == 'refs/heads/master'\n        run:\n          echo \"//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN\" >> ~/.npmrc\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        if: success() && github.ref == 'refs/heads/master'\n        env:\n          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish src/language-service\n\n    # - name: NPM Publish to Registry\n    #   uses: actions/npm@master\n    #   if: success() && github.ref == 'refs/heads/master'\n    #   env:\n    #     NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n    #   with:\n    #     args: publish src/language-service\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level1", "llm_response": " ```yaml\nname: Require pull request labels\n\non:\n  pull_request:\n    types: [opened, labeled, unlabeled, deleted, updated]\n\njobs:\n  require-pr-labels:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Require PR labels\n        run: |\n          # Add your logic here to enforce label requirements\n          echo \"Enforce label requirements for pull requests\"\n\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Require bug labels\n        run: |\n          # Add your logic here to enforce bug label requirements\n          echo \"Enforce bug label requirements for pull requests\"\n```", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c49d8733b087f6bde59ea2", "level": "level1", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up C++\n        uses: actions/setup-cpp@v1\n        with:\n          cpp-version: '17'\n\n      - name: Update release draft\n        run: |\n          # Commands to update release draft for C++ project\n          echo \"Update release draft steps for C++ here\"\n          # Example: git tag -a v1.0.0 -m \"Release version 1.0.0\"\n          # git push origin --tags\n          # Add more steps as needed to update the release draft\n```", "answer": "```yaml name: Release Drafter\n# https://github.com/release-drafter/release-drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n        #   config-name: my-config.yml\n        #   disable-autolabeler: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b433b087f6bde6e4a8", "level": "level1", "llm_response": " ```yaml\nname: Deploy Schema and Guidelines\non:\n  push:\n    branches:\n      - develop\n\nenv:\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up XSLT environment\n        uses: actions/setup-xslt@v1\n\n      - name: Build Schema\n        run: |\n          xsltproc -o ${{env.SCHEMA_DIR}}/schema.xml ${{ github.workspace }}/schema.xsl ${{ github.workspace }}/schema.xml\n\n      - name: Build Guidelines\n        run: |\n          xsltproc -o ${{env.GUIDELINES_DIR}}/guidelines.xml ${{ github.workspace }}/guidelines.xsl ${{ github.workspace }}/guidelines.xml\n\n      - name: Deploy Schema and Guidelines\n        run: |\n          # Replace with actual deployment commands for schema and guidelines\n          echo \"Deploying schema and guidelines...\"\n          # Example: curl -X POST -d @${{env.SCHEMA_DIR}}/schema.xml http://schema-service-endpoint\n          # Example: curl -X POST -d @${{env.GUIDELINES_DIR}}/guidelines.xml http://guidelines-service-endpoint\n```\nPlease note that the deployment commands in the last step are placeholders and should be replaced with actual commands that are appropriate for your deployment process.", "answer": "```yaml # This workflow will perform the following steps for pushes the the develop branch\n# * build the Schema and the Guidelines with Ant\n# * publish the Schema to music-encoding/schema under ./dev\n# * publish the Guidelines to music-encoding/guidelines under ./dev\n\nname: Deploy Schema and Guidelines\n\non:\n  push:\n    branches: [develop]\n\nenv:\n  # schema\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n\n  # guidelines\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n\n  # temporary directories\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    name: Build and deploy Schema and Guidelines\n    runs-on: ubuntu-latest\n\n    steps:\n      ### BUIDLING THE SCHEMA AND THE GUIDELINES ###\n      - name: Checkout main repo\n        uses: actions/checkout@v3\n        with:\n          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n          # recursively checkout submodules.\n          #\n          # When the `ssh-key` input is not provided, SSH URLs beginning with\n          # `git@github.com:` are converted to HTTPS.\n          #\n          # Default: false\n          submodules: recursive\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: \"temurin\"\n          java-version: \"17\"\n\n      - name: Build with Ant\n        # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant\n        run: |\n          ant -noinput -buildfile build.xml init\n          ant -noinput -buildfile build.xml -lib lib/saxon/saxon-he-10.5.jar -Dgithub.sha=${{ github.sha }}\n\n      ### PUBLISHING THE SCHEMA ###\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.SCHEMA_REPO }}\n          # Deploy key as secret for accessing <owner>/<SCHEMA_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.SCHEMA_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.SCHEMA_DIR }}\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r dist/schemata/dev $SCHEMA_DIR/\n\n      - name: Check git status before commit\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of schema build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to SCHEMA\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: git push origin HEAD:$SCHEMA_BRANCH\n\n      ### PUBLISHING THE GUIDELINES ###\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.GUIDELINES_REPO }}\n          # Deploy key as secret for accessing <owner>/<GUIDELINES_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_GUIDELINES }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.GUIDELINES_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.GUIDELINES_DIR }}\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: |\n          rm -rf $GUIDELINES_DIR/dev \n          cp -r dist/guidelines/dev/web $GUIDELINES_DIR/\n          mv $GUIDELINES_DIR/web $GUIDELINES_DIR/dev\n\n      - name: Check git status before commit\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of guidelines build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to GUIDELINES\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: git push origin HEAD:$GUIDELINES_BRANCH\n```"}
{"id": "63c494a48052faa2781ac54c", "level": "level1", "llm_response": " ```yaml\nname: Lock closed issues\n\non:\n  schedule:\n    - cron: '30 5 * * *' # Trigger at 05:30 am every day\n  workflow_dispatch: # Manually triggered by user\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Lock closed issues\n        run: |\n          # TypeScript code to lock closed issues goes here\n          # This is a placeholder for the actual script\n          echo \"Locking closed issues...\"\n          # Example: npm run lock-closed-issues\n```\n\nPlease note that you will need to replace the `echo \"Locking closed issues...\"` line with the actual TypeScript code or script that performs the action of locking closed issues. You may also need to define the `npm run lock-closed-issues` command or equivalent in your repository's `package.json` to execute the desired action.", "answer": "```yaml name: \"Lock closed issues\"\n\non:\n  schedule:\n    - cron: \"30 5 * * *\"\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/lock-threads@v3.0.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-comment: \"This issue has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\"\n          issue-inactive-days: 30\n          process-only: \"issues\"\n# cspell:ignore dessant\n```"}
{"id": "63c49de9736e7f0ed8c64893", "level": "level1", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Check for merge conflicts\n        run: |\n          git diff --name-only --diff-filter=U HEAD main\n          if [ $? -ne 0 ]; then\n            echo \"Merge conflicts detected on the main branch.\"\n            exit 1\n          else\n            echo \"No merge conflicts on the main branch.\"\n          fi\n```", "answer": "```yaml # This workflow checks open PRs for merge conflicts and labels them when conflicts are found\nname: Check for merge conflicts\n\n# Run whenever the \"main\" branch is updated\n# NOTE: This means merge conflicts are only checked for when a PR is merged to main.\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      # See: https://github.com/mschilde/auto-label-merge-conflicts/\n      - name: Auto-label PRs with merge conflicts\n        uses: mschilde/auto-label-merge-conflicts@v2.0\n        # Add \"merge conflict\" label if a merge conflict is detected. Remove it when resolved.\n        # Note, the authentication token is created automatically\n        # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token\n        with:\n          CONFLICT_LABEL_NAME: 'merge conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Ignore errors\n        continue-on-error: true\n```"}
{"id": "63c4a0591842bc13d779d081", "level": "level1", "llm_response": " ```yaml\nname: Issue closer\non:\n  issues:\n    types: [opened]\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Comment on issue\n        uses: actions/github-script@v3\n        with:\n          script: |\n            const issue = context.payload.issue;\n            github.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: issue.number,\n              body: 'Thank you for reporting this issue. We are working on it.'\n            });\n```", "answer": "```yaml name: Issue closer.\n\non:\n  issues:\n    types: opened\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue.\n        uses: desktop-app/action_issue_closer@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e2db008460c1df45cd1", "level": "level1", "llm_response": " ```yaml\nname: Cron Job Failures Check\non:\n  schedule:\n    - cron: '59 23 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  call_cron_failures:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v2\n\n      - name: Run Cron Failure Check\n        run: |\n          # Insert Rust script or command to check for cron failures here\n          echo \"Checking for cron job failures...\"\n          # Example placeholder command\n          rustc --version\n```\n\nPlease note that you'll need to replace the placeholder command with the actual Rust script or command that checks for cron failures. The `rustc --version` command is just an example to demonstrate the syntax.", "answer": "```yaml ---\n\non:\n  # Note: This only applies to the default branch.\n  schedule:\n    # N/B: This should correspond to a period slightly after\n    # the last job finishes running.  See job defs. at:\n    # https://cirrus-ci.com/settings/repository/5138144844840960\n    - cron:  '59 23 * * 1-5'\n  # Debug: Allow triggering job manually in github-actions WebUI\n  workflow_dispatch: {}\n\njobs:\n  # Ref: https://docs.github.com/en/actions/using-workflows/reusing-workflows\n  call_cron_failures:\n    uses: containers/buildah/.github/workflows/check_cirrus_cron.yml@main\n    secrets: inherit\n```"}
{"id": "63c4993a1899db58864e5313", "level": "level1", "llm_response": " ```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '0 3 * * 4'  # Trigger at 03:24 am on Thursdays\n  workflow_dispatch:  # Allow manual triggering\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Package trigger\n        run: |\n          # Commands to trigger the package process\n          echo \"Package triggering logic goes here\"\n          # Example: docker build -t my-image .\n          # Add your Dockerfile commands or other package-related tasks\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '24 3 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-transmission/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for transmission** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-transmission/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c4987033b087f6bde38dfc", "level": "level1", "llm_response": " ```yaml\nname: Release Drafter\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Create release draft\n        run: |\n          python create_release_draft.py\n\n      - name: Upload draft to GitHub release\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create-release-upload.outputs.upload_url }}\n          asset_path: ./path/to/draft.zip\n          asset_name: draft.zip\n          asset_content_type: application/zip\n\n      - name: Create release\n        id: create_release\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: true\n          prerelease: false\n\n      - name: Upload release draft\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./path/to/draft.zip\n          asset_name: draft.zip\n          asset_content_type: application/zip\n```\n\nThis YAML file defines a GitHub Actions workflow named `Release Drafter` that triggers on push events to the `main` branch and manual dispatch. It contains a job named `update_release_draft` with a series of steps to check out the repository, set up Python, install dependencies, create a release draft, upload the draft to GitHub, and create a GitHub release. The workflow assumes the existence of a Python script named `create_release_draft.py` to handle the creation of the release draft. Adjust the paths and script names as necessary for your specific project.", "answer": "```yaml # draft release notes with https://github.com/release-drafter/release-drafter\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e4bb008460c1df468cb", "level": "level1", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [opened, edited, labeled, unlabeled]\n  pull_request:\n    types: [opened, edited, labeled, unlabeled]\n  schedule:\n    - cron: '0 * 5-23 * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Respond to comments\n        run: echo \"No response\" > response.txt\n        if: github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'\n\n      - name: Scheduled action\n        if: github.schedule == '0 * 5-23 * *'\n        run: echo \"No scheduled response\" > response.txt\n```", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # Number of days of inactivity before an Issue is closed for lack of response\n          daysUntilClose: 7\n          # Label requiring a response\n          responseRequiredLabel: 'status: needs more information'\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Since the issue is missing key information and has been inactive for 7 days, it has been automatically closed.\n            If you wish to see the issue reopened, please provide the missing information.\n```"}
{"id": "63c49f741899db588650d292", "level": "level1", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '30 17 * * sun'\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n      - name: Auto-detect repositories\n        uses: github/codeql-action/auto-detect-repos@v1\n      - name: Perform CodeQL analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '30 17 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f7a1e336480757b40f6", "level": "level1", "llm_response": " ```yaml\nname: Protobuf\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - '**.txt'\n    branches:\n      - main\n    paths-ignore:\n      - '**/proto/**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build protobuf files\n        run: go build ./...\n\n  lint:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run linter\n        run: go vet ./...\n        env:\n          GOLINT_FLAGS: \"-l=all\"\n\n  break-check:\n    needs: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run break-check\n        run: go test ./... -coverprofile cover.out\n        env:\n          GOCACHE: \"${{ github.workspace }}\"\n```", "answer": "```yaml name: Protobuf\n# Protobuf runs buf (https://buf.build/) lint and check-breakage\n# This workflow is only run when a .proto file has been changed\non:\n  pull_request:\n    paths:\n      - \"proto/**\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        id: git_diff\n        with:\n          PATTERNS: |\n            **/**.proto\n            **/buf.yaml\n            buf.work.yaml\n            buf.gen.yaml\n      - run: |\n          make proto-gen\n        if: env.GIT_DIFF\n\n  lint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-lint-action@v1\n        with:\n          input: \"proto\"\n\n  break-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-breaking-action@v1\n        with:\n          input: \"proto\"\n          against: \"https://github.com/${{ github.repository }}.git#branch=${{ github.event.pull_request.base.ref }},ref=HEAD~1,subdir=proto\"\n```"}
{"id": "63c49801cbc73931bb1841e8", "level": "level1", "llm_response": " ```yaml\nname: Clean\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    types: [ closed ]\n  repository_dispatch:\n    types: [ clean-triggered ]\n\njobs:\n  delete-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Delete artifacts\n        run: |\n          # Commands to delete artifacts\n          # Example: rm -rf path/to/artifacts\n          echo \"Artifacts cleaned up.\"\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49b84b008460c1df34d2f", "level": "level1", "llm_response": " ```yaml\nname: Generate docs\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Generate documentation\n        run: dotnet docs --output ./docs\n        # Add additional steps as needed for documentation generation\n```", "answer": "```yaml name: 'Generate docs'\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n\n      - name: Restore dependencies\n        run: dotnet restore \n        \n      - name: Build\n        run: dotnet build --no-restore\n\n      - name: Generate docs\n        run: |\n          # Run CLI\n          dotnet run -p src/Microsoft.Sbom.Tool generate -- -h 2> help.txt || true\n          cat <<EOF > docs/sbom-tool-arguments.md\n          # Sbom tool arguments\n          \n          \\`\\`\\`shell\n          dotnet run -p './src/Microsoft.Sbom.Tool' generate -- -h\n          \\`\\`\\`\n\n          \\`\\`\\`\n          $(tail --lines=+4 help.txt)\n          \\`\\`\\`\n          EOF\n\n      - name: Commit\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'Auto update docs/*.md'\n          file_pattern: 'docs/*.md'\n          ```"}
{"id": "63c49cc31e336480757a2f97", "level": "level1", "llm_response": " ```yaml\nname: TagBot\n\non:\n  issues:\n    types: [opened, edited, milestoned, reopened]\n  pull_request:\n    types: [opened, edited, reopened]\n  comments:\n    types: [created]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: '1.x'\n\n      - name: Install dependencies\n        run: julia --project=@. -e 'using Pkg; Pkg.instantiate()'\n\n      - name: Tag release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          julia --project=@. -e '\n            using Pkg\n            Pkg.add(\"GitHubActions\")\n            using GitHubActions\n            tag = \"v$(VERSION)\"\n            commit = \"$GITHUB_SHA\"\n            repo = GitHubActions.repo()\n            push_tag(repo, tag, commit)\n          '\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c4974bcbc73931bb17f7a8", "level": "level1", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Check out code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install flake8 black\n\n    - name: Lint with flake8\n      run: |\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n\n    - name: Format with black\n      run: |\n        black --check .\n\n    - name: Commit and push if linting passes\n      if: success() && github.event_name != 'pull_request'\n      run: |\n        git config --local user.email \"action[bot]@github.com\"\n        git config --local user.name \"GitHub Action\"\n        git add -A\n        git commit -m \"Lint passed, no changes for PR\"\n        git push\n```", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # Please look up the latest version from\n      # https://github.com/amannn/action-semantic-pull-request/releases\n      - uses: amannn/action-semantic-pull-request@v3.4.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d681e336480757a6e6f", "level": "level1", "llm_response": " ```yaml\nname: MSDocs build verifier\n\non: [pull_request]\n\nenv:\n  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Docker\n        uses: docker/setup-buildx-action@v1\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: Dockerfile\n          push: true\n          tags: ${{ github.ref }}\n      - name: Verify MSDocs\n        run: |\n          # Add verification steps for MSDocs here\n          echo \"Verifying MSDocs documentation...\"\n```", "answer": "```yaml name: MSDocs build verifier\non: pull_request\nenv:\n  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  validate:\n    name: MSDocs build verifier\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Validate\n        uses: dotnet/docs-actions/actions/docs-verifier@main\n```"}
{"id": "63c498991842bc13d776b38d", "level": "level1", "llm_response": " ```yaml\nname: Auto Assign\non: [pull_request]\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Assign Reviewer\n        uses: some-action/assign-reviewer@v1\n        with:\n          repository_token: ${{ secrets.GITHUB_TOKEN }}\n          reviewer_role: reviewer\n          reviewers: ${{ github.event.pull_request.assignees }}\n```\n\nNote: The `some-action/assign-reviewer@v1` is a placeholder for the actual action you would use to assign a reviewer. You would need to replace this with the appropriate action or script that fits your requirements. The `repository_token` is set to use the `GITHUB_TOKEN` secret which is automatically provided by GitHub Actions for secure access to the repository.\n\nMake sure to replace the placeholder with actual values or scripts as needed, and adjust the steps according to your specific use case.", "answer": "```yaml name: \"Auto Assign\"\non:\n  - pull_request\n\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: shufo/auto-assign-reviewer-by-files@v1.1.2\n        with:\n          config: \"MAINTAINERS\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49af6cbc73931bb1971dd", "level": "level1", "llm_response": " ```yaml\nname: Releaser\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - '**.md'\n    paths:\n      - 'version.json'\njobs:\n  releaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      - name: Setup Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build and Test\n        run: |\n          go build -v ./...\n          go test -v ./...\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"Releasing version ${{ github.ref_name }}\"\n          # Add commands to publish the release here\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\nname: Releaser\non:\n  push:\n    paths: [ 'version.json' ]\n\njobs:\n  releaser:\n    uses: protocol/.github/.github/workflows/releaser.yml@master\n```"}
{"id": "63c49baab008460c1df35d33", "level": "level1", "llm_response": " ```yaml\nname: Launchpad Mirror\non:\n  push:\n    branches:\n      - master\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: lp-${{ github.ref }}\n      cancel-in-progress: true\n    steps:\n      - name: Synchronizing Launchpad trunk with GitHub master\n        id: mirror\n        # Add necessary steps here, such as checkout, setup, and sync commands\n```\n\nNote: The above YAML is a template and needs to be completed with the actual steps required for the synchronization process. The `steps` section is where you would define actions such as checking out the repository, setting up the environment, and executing the sync commands. The specific commands would depend on the tools and scripts you have available for synchronizing Launchpad with GitHub.", "answer": "```yaml name: Launchpad Mirror\nconcurrency:\n  group: lp-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - master\njobs:\n  mirror:\n    if: github.repository == 'widelands/widelands'\n    name: Synchronizing Launchpad trunk with GitHub master\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setting up bazaar\n      run: |\n        sudo apt-get update\n        sudo apt-get install bzr\n        mkdir ~/.ssh || true\n        echo \"${{ secrets.LP_SSH }}\" > ~/.ssh/id_rsa\n        chmod 400 ~/.ssh/id_rsa\n        echo \"${{ secrets.LP_HOST }}\" > ~/.ssh/known_hosts\n        eval \"$(ssh-agent -s)\"\n        ssh-add ~/.ssh/id_rsa\n        bzr whoami \"The Widelands Bunnybot <bunnybot@widelands.org>\"\n        bzr launchpad-login \"widelandsofficial\"\n    - name: Checkout trunk\n      run: |\n        cd ~\n        bzr branch lp:widelands wl_trunk\n    - name: Checkout master\n      run: |\n        cd ~\n        git clone --depth=1 https://github.com/widelands/widelands.git wl_master\n    - name: Cleaning tree\n      run: |\n        cd ~/wl_trunk\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".bzr\" ]\n          then\n            rm -r \"$file\"\n          fi\n        done\n    - name: Copying files\n      run: |\n        cd ~/wl_master\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".git\" ]\n          then\n            cp -r $file ~/wl_trunk/$file\n          fi\n        done\n        cd ~/wl_trunk\n        mv .gitignore .bzrignore\n    - name: Committing and pushing changes\n      run: |\n        cd ~/wl_trunk\n        commit_message=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/$GITHUB_SHA\" | grep -F \"\\\"message\\\": \")\n        commit_message=${commit_message#*: \\\"}\n        commit_message=${commit_message%\\\",}\n        commit_message=\"$commit_message\\n\\n(by $GITHUB_ACTOR)\\n$GITHUB_SHA\"\n        commit_message=${commit_message//\"\\r\\n\"/\"\\n\"}\n        printf \"$commit_message\" > ~/temp_commit_message\n        bzr remove\n        bzr add\n        bzr commit --strict -F ~/temp_commit_message\n        set +e\n        check_for_remote_changes=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/master\" | grep -m 1 \"\\\"sha\\\": \")\n        set -e\n        check_for_remote_changes=${check_for_remote_changes#*: \\\"}\n        check_for_remote_changes=${check_for_remote_changes%\\\",}\n        if [ \"$check_for_remote_changes\" == \"$GITHUB_SHA\" ]\n        then\n          bzr push :parent\n        else\n          echo \"master was updated from '$GITHUB_SHA' to '$check_for_remote_changes', cancel\"\n          exit 1\n        fi\n```"}
{"id": "63c4978e517fc08c1eed7b18", "level": "level1", "llm_response": " ```yaml\nname: Cancel\n\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\n\njobs:\n  cancel:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: none\n      id: null\n      packages: none\n      security-events: none\n      security-settings: none\n      repo: none\n      contents: none\n      issues: none\n      pull-requests: none\n      secrets: none\n      workloads: none\n    steps:\n      - name: Cancel Previous Runs\n        id: cancel\n        run: echo \"Canceling previous runs\"\n```", "answer": "```yaml name: Cancel\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\npermissions: {} # none\njobs:\n  cancel:\n    permissions:\n      actions: write\n    name: Cancel Previous Runs\n    runs-on: ubuntu-latest\n    timeout-minutes: 3\n    steps:\n      - uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          workflow_id: nodejs.yml\n          access_token: ${{ github.token }}\n```"}
{"id": "63c49ed7b008460c1df49e8e", "level": "level1", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Check for merge conflicts\n        run: |\n          git config --global advice.detachedHead false\n          git status --porcelain\n          if [ $? -ne 0 ]; then\n            echo \"Merge conflicts detected.\"\n            exit 1\n          else\n            echo \"No merge conflicts detected.\"\n          fi\n```", "answer": "```yaml name: 'Check for merge conflicts'\non:\n  push:\n    branches:\n      - master\njobs:\n  triage:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: mschilde/auto-label-merge-conflicts@2e8fcc76c6430272ec8bb64fb74ec1592156aa6a\n        with:\n          CONFLICT_LABEL_NAME: 'Merge Conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          WAIT_MS: 8000\n```"}
{"id": "63c499ce1899db58864e9096", "level": "level1", "llm_response": " ```yaml\nname: Check Enforcer\n\non:\n  workflow_dispatch:\n  check_suite_completed:\n    types: [completed]\n  issues:\n    types: [opened, edited, reopened, closed]\n  pull_request:\n    types: [opened, edited, reopened, synchronize, closed]\n\njobs:\n  event-handler:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: none\n      id: none\n      issues: none\n      pull-requests: none\n      repositories: none\n      security-events: none\n      teams: none\n\n    steps:\n      - name: Check ${{ github.event_name }} ${{ github.event.action }} event\n        # Add steps for handling the event here\n```", "answer": "```yaml # NOTE: currently azure-sdk-actions only hosts check enforcer code.\n# If further functionality is added, this name should be updated to reflect\n# the more generic behavior\nname: Check Enforcer\n\non:\n  check_suite:\n    types: [completed]\n  issue_comment:\n    types: [created]\n\npermissions: {}\n\njobs:\n  event-handler:\n    permissions:\n      statuses: write # to set status (azure/azure-sdk-actions)\n      pull-requests: read # to read pull requests (azure/azure-sdk-actions)\n      checks: read # to read check status (azure/azure-sdk-actions)\n    name: Handle ${{ github.event_name }} ${{ github.event.action }} event\n    runs-on: ubuntu-latest\n    steps:\n      - uses: azure/azure-sdk-actions@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c498b51842bc13d776be8f", "level": "level1", "llm_response": " ```yaml\nname: format-check\n\non:\n  push:\n    branches:\n      - master\n      - release-*\n      - tags:\n          - '*'\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Format check\n      uses: some-formatting-action/action@v1\n      with:\n        # Add any necessary configuration for the formatting action\n        # Example: julia_formatter: true\n```\n\nPlease note that you need to replace `some-formatting-action/action@v1` with the actual action you want to use for formatting checks in Julia. This example assumes a hypothetical action exists for illustrative purposes. You may need to find a Julia-specific linter or formatting tool and use its corresponding GitHub Action.\n\nAlso, ensure that you have the necessary permissions and that the action is publicly accessible on GitHub Marketplace, or hosted on your own private repository.", "answer": "```yaml name: format-check\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'release-'\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - uses: actions/checkout@v1\n      - name: Install JuliaFormatter and format\n        # This will use the latest version by default but you can set the version like so:\n        #\n        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\", version=\"0.13.0\"))'\n        run: |\n          julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\"))'\n          julia  -e 'using JuliaFormatter; format(\".\", verbose=true)'\n      - name: Format check\n        run: |\n          julia -e '\n          out = Cmd(`git diff`) |> read |> String\n          if out == \"\"\n              exit(0)\n          else\n              @error \"Some files have not been formatted !!!\"\n              write(stdout, out)\n              exit(1)\n          end'\n```"}
{"id": "63c49c896fc19abdf9cc3935", "level": "level1", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8 black isort\n\n      - name: Lint with Flake8\n        run: |\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n          if [ $? -ne 0 ]; then\n            echo \"Linting failed!\"\n            exit 1\n          fi\n\n      - name: Format with Black\n        run: |\n          black .\n          if [ $? -ne 0 ]; then\n            echo \"Formatting failed!\"\n            exit 1\n          fi\n\n      - name: Check with isort\n        run: |\n          isort . --check-only\n          if [ $? -ne 0 ]; then\n            echo \"Sorting failed!\"\n            exit 1\n          fi\n```", "answer": "```yaml # https://pre-commit.com\n# This GitHub Action assumes that the repo contains a valid .pre-commit-config.yaml file.\n---\nname: pre-commit\non:\n  pull_request:\n  push:\n    branches: [master]\n\npermissions:\n  contents: read\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n      - run: pip install pre-commit\n      - run: pre-commit --version\n      - run: pre-commit install\n      - run: pre-commit run --all-files\n```"}
{"id": "63c4a192cbc73931bb1c17ce", "level": "level1", "llm_response": " ```yaml\nname: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.php'\n      - '**.md'\n      - '**.js'\n      - '**.css'\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Run Prettier\n        run: npx prettier --write \"**/*.{php,md,js,css}\"\n```", "answer": "```yaml name: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"**.php\"\n      - \"**.md\"\n      - \"**.js\"\n      - \"**.css\"\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: actions/checkout@v3\n        with:\n          repository: ${{ github.event.pull_request.head.repo.full_name }}\n          ref: ${{ github.event.pull_request.head.ref }}\n\n      - name: Checkout Push\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/checkout@v3\n\n      - name: Install prettier and plugin-php\n        run: npm install --global prettier @prettier/plugin-php\n\n      - name: Check formatting with Prettier\n        continue-on-error: true\n        run: composer format:check \n\n      - name: Prettify code\n        run: composer format \n\n      - name: Commit changes\n        uses: EndBug/add-and-commit@v9\n        with:\n          message: \"style: Formatted code with Prettier\"\n          default_author: github_actions\n```"}
{"id": "63c49bf26fc19abdf9cbfd17", "level": "level1", "llm_response": " ```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Compile TypeScript\n        run: npm run build\n\n      - name: Run Tests\n        run: npm test\n\n      - name: Archive Build\n        uses: actions/upload-artifact@v2\n        with:\n          name: dist\n          path: ./dist\n```", "answer": "```yaml name: Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18.1.0'\n      - run: yarn install\n      - run: yarn build\n```"}
{"id": "63c4984f1899db58864df21d", "level": "level1", "llm_response": " ```yaml\nname: Rust\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\nenv:\n  NAME: Rust Test\n  CARGO_TERM_COLOR: always\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          profile: minimal\n          toolchain: stable\n          override: true\n\n      - name: Build\n        run: cargo build --verbose\n\n      - name: Run tests\n        run: cargo test --verbose\n```", "answer": "```yaml name: Rust\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  NAME: \"Rust Test\"\n  CARGO_TERM_COLOR: always\n\njobs:\n  build-nd-test:\n    name: Build & Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup | Rust | Nightly\n        uses: ATiltedTree/setup-rust@v1\n        with:\n          rust-version: nightly\n          components: clippy rustfmt\n\n      - uses: davidB/rust-cargo-make@v1\n        name: Install Cargo Make\n\n      - uses: actions/cache@v3\n        name: Cache Cargo Files\n        with:\n          path: |\n            target/release\n            target/debug\n          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Build\n        run: cargo build --verbose\n      - name: Run tests\n        run: cargo test --verbose\n      - name: Lint\n        run: cargo fmt -- --check\n```"}
{"id": "63c49bb61899db58864f54af", "level": "level1", "llm_response": " ```yaml\nname: Flawfinder\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  flawfinder:\n    runs-on: ubuntu-latest\n    name: Flawfinder Checks\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up C++ environment\n        uses: actions/setup-cpp@v1\n        with:\n          cmake-version: '3.18'\n          toolchain: 'gcc'\n\n      - name: Run Flawfinder\n        run: cmake --build . --target Flawfinder\n```", "answer": "```yaml name: Flawfinder\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  flawfinder:\n    name: Flawfinder Checks\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Scan with Flawfinder\n        uses: david-a-wheeler/flawfinder@8e4a779ad59dbfaee5da586aa9210853b701959c\n        with:\n          arguments: '--sarif ./'\n          output: 'flawfinder_results.sarif'\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{github.workspace}}/flawfinder_results.sarif\n```"}
{"id": "63c499411e3364807578cc03", "level": "level1", "llm_response": " ```yaml\nname: Upload Production Release (1GP)\non:\n  workflow_dispatch: # Triggered by manual initiation\n\njobs:\n  upload-production-release-1gp:\n    runs-on: ubuntu-latest\n    steps:\n    # Here you would define the steps required to upload the production release\n    # For example, steps to checkout code, set up environment, and run deployment scripts\n```", "answer": "```yaml on:\n  workflow_dispatch: \njobs:\n  upload-production-release-1gp:\n    name: \"Upload Production Release (1GP)\"\n    uses: SFDO-Community/standard-workflows/.github/workflows/production-1gp.yml@main\n    secrets:\n      packaging-org-auth-url: '${{ secrets.PACKAGING_ORG_AUTH_URL }}'\n      dev-hub-auth-url: '${{ secrets.DEV_HUB_AUTH_URL }}'\n```"}
{"id": "63c49db4517fc08c1eefe9e6", "level": "level1", "llm_response": " ```yaml\nname: Failure Help Text\non:\n  workflow_run:\n    workflows: [Build CI]\n    types: [completed]\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'failure'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Generate failure help text\n        run: |\n          echo \"Failure help text: Please review the build logs at [URL to build logs]\"\n          echo \"URL to build logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/logs\"\n\n      - name: Upload help text to repository\n        uses: actions/upload-artifact@v2\n        with:\n          name: failure-help-text\n          path: failure_help_text.txt\n```", "answer": "```yaml # SPDX-FileCopyrightText: 2021 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nname: Failure help text\n\non:\n  workflow_run:\n    workflows: [\"Build CI\"]\n    types:\n      - completed\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}\n    steps:\n    - name: Post comment to help\n      uses: adafruit/circuitpython-action-library-ci-failed@v1\n```"}
{"id": "63c49da71899db58865017eb", "level": "level1", "llm_response": " ```yaml\nname: bundlediff-ios\n\non:\n  pull_request:\n    branches:\n      - onekey\n\njobs:\n  build-ios-head:\n    name: Build iOS Head\n    runs-on: macos-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build iOS Head\n        run: npm run build:head\n\n  build-ios-base:\n    name: Build iOS Base\n    needs: build-ios-head\n    runs-on: macos-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build iOS Base\n        run: npm run build:base\n\n  compare:\n    name: Compare Base & Head Bundle Sizes\n    needs: [build-ios-head, build-ios-base]\n    runs-on: macos-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install diff-checker\n        run: npm install diff-checker\n\n      - name: Compare bundle sizes\n        run: diff-checker compare --path-left $(pwd)/ios/build/head/YourApp.app --path-right=$(pwd)/ios/build/base/YourApp.app\n```\n\nPlease replace `YourApp` with the actual name of your app. This YAML file defines a GitHub Actions workflow that will trigger on pull requests targeting the `onekey` branch. It includes three jobs: building the iOS head version, building the iOS base version, and comparing the bundle sizes of both versions. The `compare` job requires both the `build-ios-head` and `build-ios-base` jobs to be completed before it runs. The `diff-checker` tool is used to compare the sizes of the two bundles.", "answer": "```yaml name: bundlediff-ios\n\non:\n  pull_request:\n    branches: [onekey]\n\njobs:\n  # Build current and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-head:\n    name: 'Build ios head'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{github.event.pull_request.head.ref}}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: head-stats\n          path: ./packages/app/stats.json\n\n  # Build base for comparison and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-base:\n    name: 'Build ios base'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.base_ref }}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: base-stats\n          path: ./packages/app/stats.json\n\n  # run the action against the stats.json files\n  compare:\n    name: 'Compare base & head bundle sizes'\n    runs-on: ubuntu-latest\n    needs: [build-ios-base, build-ios-head]\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - uses: github/webpack-bundlesize-compare-action@v1.5.0\n        with:\n          title: 'ios bundle diff'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          current-stats-json-path: ./head-stats/stats.json\n          base-stats-json-path: ./base-stats/stats.json\n```"}
{"id": "63c494a58052faa2781ac58c", "level": "level1", "llm_response": " ```yaml\nname: Semantic PR and Commit Messages\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '^1.16'\n\n      - name: Validate PR Commit Messages\n        uses: semantic-pr/validate-commit-msg@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Format PR Headline\n        run: |\n          sed -i 's/^[^ ]\\+ /[Tt]itle: /' $GITHUB_HEAD_REF\n\n      - name: Format PR Body\n        run: |\n          sed -i 's/^[^ ]\\+ /[Bb]ody: /' $GITHUB_BASE_REF\n\n      - name: Run Go Format\n        run: go fmt ./...\n\n      - name: Run Go Vet\n        run: go vet ./...\n\n      - name: Run Go Tests\n        run: go test ./...\n```", "answer": "```yaml ---\nname: \"Semantic PR and Commit Messages\"\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    uses: influxdata/validate-semantic-github-messages/.github/workflows/semantic.yml@main\n```"}
{"id": "63c49781cbc73931bb180cf0", "level": "level1", "llm_response": " ```yaml\nname: \ud83d\ude4f\ud83c\udffb Lint Test\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '^1.16'\n\n      - name: Run linter\n        run: go run ./... ./cmd/myapp/main.go\n        env:\n          GOPATH: ${{ github.workspace }}\n```\n\nNote: The above YAML file assumes that you have a Go application with a main package and a corresponding main.go file. You may need to adjust the `run` command to fit your specific project structure and linter tool(s) you are using. The `env` section is set up to ensure that the `GOPATH` environment variable is correctly configured for the Go workspace.", "answer": "```yaml name: \ud83d\ude4f\ud83c\udffb Lint Test\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: Lint Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: latest\n          args: --timeout 5m\n          working-directory: .```"}
{"id": "63c49fea1899db588651014e", "level": "level1", "llm_response": " ```yaml\nname: size\n\non: [pull_request]\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Size analysis\n        run: |\n          echo \"Performing size analysis on the TypeScript codebase...\"\n          # Add commands here to analyze the size of the TypeScript project\n          # For example, using tsc-size or similar tools\n          tsc-size --size-only\n```", "answer": "```yaml name: size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49ad26fc19abdf9cb8a3b", "level": "level1", "llm_response": " ```yaml\nname: Configlet\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\njobs:\n  configlet:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      # Add steps here for the job\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```"}
{"id": "63c49b2ecbc73931bb1988db", "level": "level1", "llm_response": " ```yaml\nname: test\n\non:\n  schedule:\n    - cron: '0 7 * * sun'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n  pull_request:\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n\nenv:\n  DENOPS_PATH: './'\n  DENO_DIR: '.'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Checkout code\n        shell: bash --noprofile --norc -eo pipefail\n\n  test:\n    needs: check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Deno\n        uses: denoland/setup-deno@v2\n        with:\n          deno_version: '1.x'\n          deno_install_command: 'bash -c \"deno install --no-check npm\"'\n      - name: Run tests\n        run: |\n          bash --noprofile --norc -eo pipefail\n          # Add your test commands here\n```\nThis YAML file defines a GitHub Actions workflow named `test` that triggers on scheduled time (07:00 am on Sundays), on push events to the `main` branch with specified file paths, and on pull request events with the same file paths. It sets up two jobs, `check` and `test`, and specifies the environment variables. The `test` job uses the Deno setup action to prepare the Deno runtime. Replace the comment `# Add your test commands here` with the actual test commands you want to run.", "answer": "```yaml name: test\n\nenv:\n  DENOPS_PATH: \"./\"\n  DENO_DIR: \".deno\"\n\non:\n  schedule:\n    - cron: \"0 7 * * 0\"\n  push:\n    branches:\n      - main\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n  pull_request:\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n\ndefaults:\n  run:\n    shell: bash --noprofile --norc -eo pipefail {0}\n\njobs:\n  check:\n    strategy:\n      matrix:\n        runner:\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - name: Lint check\n        run: make lint\n      - name: Format check\n        run: make fmt-check\n      - name: Type check\n        run: make type-check\n\n  test:\n    strategy:\n      matrix:\n        runner:\n          - windows-latest\n          - macos-latest\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n        host_version:\n          - vim: \"v8.2.3452\"\n            nvim: \"v0.6.0\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        id: cache\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - uses: thinca/action-setup-vim@v1\n        id: vim\n        with:\n          vim_type: \"Vim\"\n          vim_version: \"${{ matrix.host_version.vim }}\"\n          download: \"never\"\n      - name: Check Vim\n        run: |\n          echo ${DENOPS_TEST_VIM}\n          ${DENOPS_TEST_VIM} --version\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n      - uses: thinca/action-setup-vim@v1\n        id: nvim\n        with:\n          vim_type: \"Neovim\"\n          vim_version: \"${{ matrix.host_version.nvim }}\"\n      - name: Check Neovim\n        run: |\n          echo ${DENOPS_TEST_NVIM}\n          ${DENOPS_TEST_NVIM} --version\n        env:\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n      - name: Test\n        run: make test\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n        timeout-minutes: 5\n```"}
{"id": "63c49dc01899db58865021ca", "level": "level1", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Rust\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n        components: rustc rustfmt clippy\n    - name: Build\n      run: cargo build --verbose\n    - name: Test\n      run: cargo test --verbose\n    - name: Upload Artifacts\n      uses: actions/upload-artifact@v2\n      with:\n        name: rust-binaries\n        path: target/release/my_rust_app\n    - name: Release Notes\n      uses: softprops/action-gh-release@v1\n      with:\n        files: CHANGELOG.md\n        draft: false\n        tags: v${{ github.ref }}\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        rust: [stable]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Setup Rust\n      uses: hecrj/setup-rust-action@v1\n      with:\n        rust-version: ${{ matrix.rust }}\n    - name: Checkout\n      uses: actions/checkout@v1\n    - name: Setup MUSL\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        rustup target add x86_64-unknown-linux-musl\n        sudo apt-get -qq install musl-tools\n    - name: Build for linux\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        make release_lnx\n        cargo install --locked cargo-rpm\n        make release_rpm\n    - name: Build for macOS\n      if: matrix.os == 'macOS-latest'\n      run: make release_mac\n    - name: Build for Windows\n      if: matrix.os == 'windows-latest'\n      run: make release_win\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        body: '[Changelog](https://github.com/dalance/procs/blob/master/CHANGELOG.md)'\n        files: \"*.zip\\n*.rpm\"\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4970b33b087f6bde2fef6", "level": "level1", "llm_response": " ```yaml\nname: Update Flex Archives\non:\n  workflow_dispatch:\n    inputs:\n      message:\n        description: 'A message for the workflow'\n        required: false\njobs:\n  call-flex-update:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Update Flex Archives\n      run: |\n        # Add your PHP commands here to update the Flex archives\n        echo \"Updating Flex Archives...\"\n        # Example: php update-script.php\n      env:\n        # Define any environment variables needed for the PHP script\n        # Example: FLEX_ARCHIVE_PATH=path/to/archive\n```\n\nPlease note that you will need to replace the placeholder PHP command with the actual commands you intend to use for updating the Flex archives. Additionally, you may need to define environment variables that are required by your PHP script.", "answer": "```yaml name: Update Flex Archives\n\non: [workflow_dispatch]\n\njobs:\n    call-flex-update:\n        uses: symfony/recipes/.github/workflows/callable-flex-update-archived.yml@main\n```"}
{"id": "63c49fdb517fc08c1ef0c477", "level": "level1", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - v*\n    releases:\n      types: [published, prereleased, draft]\n\njobs:\n  build:\n    name: Build and sign artifacts\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Build artifacts\n        run: |\n          python setup.py sdist bdist_wheel\n      - name: Sign artifacts\n        uses: sigstore/artifact-signer@v1\n        with:\n          key-file: ${{ secrets.SIGSTORE_KEY }}\n\n  generate-provenance:\n    name: Generate build provenance\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Generate build provenance\n        run: |\n          python generate_provenance.py\n\n  release-pypi:\n    name: Release to PyPI\n    needs: generate-provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Release to PyPI\n        uses: pypa/gh-action-pypi-publish@v1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n\n  release-github:\n    name: Release to GitHub\n    needs: generate-provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Release to GitHub\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  build:\n    name: Build and sign artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n    outputs:\n      hashes: ${{ steps.hash.outputs.hashes }}\n    steps:\n      - uses: actions/checkout@d171c3b028d844f2bf14e9fdec0c58114451e4bf\n\n      - uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a\n\n      - name: deps\n        run: python -m pip install -U build\n\n      - name: build\n        run: python -m build\n\n      - name: sign\n        run: |\n          mkdir -p smoketest-artifacts\n\n          # we smoke-test sigstore by installing each of the distributions\n          # we've built in a fresh environment and using each to sign and\n          # verify for itself, using the ambient OIDC identity\n          for dist in dist/*; do\n            dist_base=\"$(basename \"${dist}\")\"\n\n            python -m venv smoketest-env\n\n            ./smoketest-env/bin/python -m pip install \"${dist}\"\n\n            # NOTE: signing artifacts currently go in a separate directory,\n            # to avoid confusing the package uploader (which otherwise tries\n            # to upload them to PyPI and fails). Future versions of twine\n            # and the gh-action-pypi-publish action should support these artifacts.\n            ./smoketest-env/bin/python -m \\\n              sigstore sign \"${dist}\" \\\n              --output-signature smoketest-artifacts/\"${dist_base}.sig\" \\\n              --output-certificate smoketest-artifacts/\"${dist_base}.crt\"\n\n            ./smoketest-env/bin/python -m \\\n              sigstore verify \"${dist}\" \\\n              --cert \"smoketest-artifacts/${dist_base}.crt\" \\\n              --signature \"smoketest-artifacts/${dist_base}.sig\" \\\n              --cert-oidc-issuer https://token.actions.githubusercontent.com\n\n            rm -rf smoketest-env\n          done\n\n      - name: Generate hashes for provenance\n        shell: bash\n        id: hash\n        run: |\n          # sha256sum generates sha256 hash for all artifacts.\n          # base64 -w0 encodes to base64 and outputs on a single line.\n          # sha256sum artifact1 artifact2 ... | base64 -w0\n          echo \"hashes=$(sha256sum ./dist/* | base64 -w0)\" >> $GITHUB_OUTPUT\n\n      - name: Upload built packages\n        uses: actions/upload-artifact@v3\n        with:\n          name: built-packages\n          path: ./dist/\n          if-no-files-found: warn\n\n      - name: Upload smoketest-artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: smoketest-artifacts\n          path: smoketest-artifacts/\n          if-no-files-found: warn\n\n  generate-provenance:\n    needs: [build]\n    name: Generate build provenance\n    permissions:\n      actions: read   # To read the workflow path.\n      id-token: write # To sign the provenance.\n      contents: write # To add assets to a release.\n    # Currently this action needs to be referred by tag. More details at:\n    # https://github.com/slsa-framework/slsa-github-generator#verification-of-provenance\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1\n    with:\n      attestation-name: provenance-sigstore-${{ github.event.release.tag_name }}.intoto.jsonl\n      base64-subjects: \"${{ needs.build.outputs.hashes }}\"\n      upload-assets: true\n\n  release-pypi:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions: {}\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: publish\n        uses: pypa/gh-action-pypi-publish@717ba43cfbb0387f6ce311b169a825772f54d295\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n          packages_dir: built-packages/\n\n  release-github:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload release assets.\n      contents: write\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: Upload artifacts to github\n        # Confusingly, this action also supports updating releases, not\n        # just creating them. This is what we want here, since we've manually\n        # created the release that triggered the action.\n        uses: softprops/action-gh-release@v1\n        with:\n          # smoketest-artifacts/ contains the signatures and certificates.\n          files: |\n            built-packages/*\n            smoketest-artifacts/*\n```"}
{"id": "63c49e1d517fc08c1ef013af", "level": "level1", "llm_response": " ```yaml\nname: Gather Bazel Execution Logs\n\non:\n  workflow_dispatch:\n\njobs:\n  run-a:\n    runs-on: ubuntu-latest\n    outputs:\n      logs: ${{ steps.save-logs.outputs.log_paths }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run Bazel\n        uses: actions/bazel@v0\n        with:\n          args: --verbose_failures --test_output=errors --output=verbose --action_env=TEST_RUNNER=//deps/rabbit:rabbit_stream_queue_SUITE\n      - name: Save Logs\n        id: save-logs\n        run: |\n          mkdir bazel-logs\n          for log in $(bazel query --output=stream --output_info=summary //deps/rabbit:rabbit_stream_queue_SUITE --tests_output_stream); do\n            echo \"$log\" >> bazel-logs/${log%.*}\n          done\n\n  run-b:\n    needs: run-a\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Process Logs\n        run: |\n          for log_path in $(cat bazel-logs/log_paths.txt); do\n            echo \"Processing log: $log_path\"\n            # Add commands to process the log here\n          done\n\n  parse-logs:\n    needs: run-b\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Parse Logs\n        run: |\n          # Add commands to parse the logs here\n          echo \"Parsed logs successfully\"\n```\n\nThis YAML file defines a GitHub Actions workflow named `Gather Bazel Execution Logs` with three jobs: `run-a`, `run-b`, and `parse-logs`. The workflow is triggered manually by the user. The `run-a` job runs Bazel with the specified target and saves the logs to a directory. The `run-b` job processes the saved logs, and the `parse-logs` job parses the processed logs. The workflow uses the `outputs` feature to pass the paths of the saved logs from `run-a` to `run-b`. Note that you will need to add the actual commands to process and parse the logs in the respective job steps.", "answer": "```yaml name: Gather Bazel Execution Logs\non:\n  workflow_dispatch:\n    inputs:\n      target:\n        description: 'A bazel label representing the test target'\n        required: true\n        default: '//deps/rabbit:rabbit_stream_queue_SUITE'\njobs:\n  run-a:\n    name: Run A\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-A\n        path: /tmp/exec.log\n  run-b:\n    name: Run B\n    needs: run-a\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-B\n        path: /tmp/exec.log\n  parse-logs:\n    name: Parse Logs\n    needs: [run-a, run-b]\n    runs-on: ubuntu-latest\n    steps:\n    - name: CHECKOUT BAZEL\n      uses: actions/checkout@v3\n      with:\n        repository: bazelbuild/bazel\n        path: bazel\n    - name: MOUNT BAZEL CACHE\n      uses: actions/cache@v3.0.11\n      with:\n        path: \"/home/runner/.cache/bazel\"\n        key: bazel\n    - name: BUILD EXECLOG PARSER\n      working-directory: bazel\n      run: |\n        bazelisk build src/tools/execlog:parser\n    - name: FETCH LOGS\n      uses: actions/download-artifact@v3\n    - name: PARSE LOGS\n      run: |\n        bazel/bazel-bin/src/tools/execlog/parser \\\n          --log_path=./execution-log-binary-A/exec.log \\\n          --log_path=./execution-log-binary-B/exec.log \\\n          --output_path=/tmp/execution-log-binary-A.log.txt \\\n          --output_path=/tmp/execution-log-binary-B.log.txt\n    - name: SAVE PARSED LOGS\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: parsed-logs\n        path: /tmp/execution-log-binary-*.log.txt\n```"}
{"id": "63c4979fb008460c1df1c263", "level": "level1", "llm_response": " ```yaml\nname: CMake-Android\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup CMake\n        uses: CMake-Step/cmake@v1\n        with:\n          cmake_version: '3.18.4'\n          cmake_command: 'cmake'\n      - name: Build\n        run: cmake --build . --config ${{ env.BUILD_TYPE }}\n```", "answer": "```yaml name: CMake-Android\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.\n    # You can convert this to a matrix build if you need cross-platform coverage.\n    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - uses: nttld/setup-ndk@v1\n      id: setup-ndk\n      with:\n        ndk-version: r23c\n        add-to-path: false\n    - run: echo ${{env.ANDROID_NDK_HOME}}\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n        \n   # - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n   #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      # Build your program with the given configuration\n      run: mkdir ${{github.workspace}}/build; cd ${{github.workspace}}/build; cmake .. -DCMAKE_TOOLCHAIN_FILE=${{env.ANDROID_NDK_HOME}}/build/cmake/android.toolchain.cmake  -DANDROID_ABI=arm64-v8a  -DANDROID_PLATFORM=android-23;make\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n```"}
{"id": "63c495b88052faa2781b3bd6", "level": "level1", "llm_response": " ```yaml\nname: auto-merge\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Auto Merge\n        uses: actions/github-script@v4\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const github = require('@actions/github');\n            const gh = github.getRepo();\n\n            async function autoMerge() {\n              try {\n                const headBranch = gh.refs.heads.main;\n                const baseBranch = gh.refs.main;\n                await gh.pulls.merge({\n                  owner: context.repo.owner,\n                  repo: context.repo.repo,\n                  pull_number: context.payload.number,\n                  commit_title: 'Auto merge pull request',\n                  commit_message: 'Merged by auto-merge workflow',\n                  base: baseBranch.name,\n                  head: headBranch.name\n                });\n              } catch (error) {\n                console.error('Error merging pull request:', error);\n              }\n            }\n\n            autoMerge();\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.4\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          target: minor\n```"}
{"id": "63c49cdd6fc19abdf9cc5ae4", "level": "level1", "llm_response": " ```yaml\nname: Dependabot - Recreate - remove label\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: read\n      contents: write\n      security-events: write\n      pull-requests: write\n    steps:\n      - name: Remove and Recreate Label\n        run: |\n          # Commands to remove a label and then recreate it\n          git config --global user.name \"Dependabot\"\n          git config --global user.email \"dependabot@github.com\"\n          git fetch --unshallow\n          git checkout main\n          git reset --hard origin/main\n          git checkout -b recreate-label\n          # Add label removal and recreation commands here\n          git add .\n          git commit -m \"Remove and Recreate label\"\n          git push origin recreate-label\n```\nPlease note that you need to replace the placeholder comment `# Add label removal and recreation commands here` with the actual commands to remove and recreate the label in your repository. The permissions have been set to read and write across all scopes as requested.", "answer": "```yaml name: Dependabot - Recreate - remove label.\non:\n  pull_request:\n    types:\n      - synchronize\n\npermissions: read-all\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    # if: ${{ github.event.action == 'synchronize'}}\n    permissions:\n      pull-requests: write\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Remove Labels\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh pr edit --remove-label \"dependabot:recreate\"  ${{ github.event.pull_request.number }}\n```"}
{"id": "63c49d82b008460c1df41798", "level": "level1", "llm_response": " ```yaml\nname: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - '1.x'\n      - '2.x'\n    tags:\n      - '*'\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Sync with Gitee\n        env:\n          GITEE_USERNAME: ${{ secrets.GITEE_USERNAME }}\n          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}\n        run: npm run sync-gitee\n```\n\nNote: Replace `npm run sync-gitee` with the actual command you use to sync your repository to Gitee. Also, make sure to add `GITEE_USERNAME` and `GITEE_TOKEN` to your repository's secrets to authenticate with Gitee.", "answer": "```yaml name: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - 1.x\n      - 2.x\n  create:\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    if: github.repository == 'Happy-Coding-Clans/vue-easytable'\n    steps:\n      - name: mirror\n        continue-on-error: true\n        if: github.event_name == 'push' || (github.event_name == 'create' && github.event.ref_type == 'tag')\n        uses: wearerequired/git-mirror-action@v1\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_SSH_PRIVATE_KEY }}\n        with:\n          source-repo: 'git@github.com:Happy-Coding-Clans/vue-easytable.git'\n          destination-repo: 'git@gitee.com:huangshuwei/vue-easytable.git'\n```"}
{"id": "63c4a14033b087f6bde718a8", "level": "level1", "llm_response": " ```yaml\nname: ROCM Docker Image Build\non:\n  workflow_dispatch:\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rocm-version: [ '1.20', '1.21', '1.22' ]\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Set up C++\n      uses: actions/setup-cpp@v1\n      with:\n        cpp-version: '14'\n\n    - name: Build ROCM Docker image\n      run: |\n        docker build --build-arg ROCM_VERSION=${{ github.event.inputs.rocm_release-this }} -t rocm-image:${{ matrix.rocm-version }} .\n        docker push rocm-image:${{ matrix.rocm-version }}\n\n    - name: Log build\n      run: |\n        echo \"ROCM Docker image built with version: ${{ matrix.rocm-version }}\"\n```", "answer": "```yaml name: ROCM Docker image build\n\non:\n  workflow_dispatch:\n    inputs:\n      rocm_release:\n        description: ROCm release version\n        required: true\n\njobs:\n  release:\n    uses: ROCmSoftwarePlatform/actions/.github/workflows/rocm-release.yml@main\n    with:\n      rocm_release: ${{ github.event.inputs.rocm_release }}\n    secrets:\n      gh_token: ${{ secrets.MIGRAPHX_BOT_TOKEN }}\n```"}
{"id": "63c4974933b087f6bde31709", "level": "level1", "llm_response": " ```yaml\nname: Greetings\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, ready_for_review]\n  issues:\n    types: [opened, closed, reopened]\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Display greeting\n        run: echo \"Hello, this is a greeting triggered by GitHub events!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Hi \ud83d\ude04, thanks for creating your first issue at Amazing CSS-Effects project!\ud83d\ude80\u26a1. Do read and follow the [Code of Conduct](https://github.com/arpit456jain/Amazing-Css-Effects/blob/master/CODE_OF_CONDUCT.md) while contributing.'\n        pr-message: 'Thank you for your pull request and welcome to our community! We will soon be getting back to you. Your patience will be greatly appreciated!Thanks! \ud83e\udd73'\n\n```"}
{"id": "63c49e391899db58865053ba", "level": "level1", "llm_response": " ```yaml\nname: Semgrep\n\non:\n  pull_request:\n  push:\n    branches:\n      - dev\n      - main\n  schedule:\n    - cron: '0 20 * * 1'\n\njobs:\n  Scan:\n    name: Semgrep\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Run Semgrep\n        uses: semgrep/semgrep-action@v1\n        env:\n          SEMGREP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Semgrep\n\non:\n  # Scan changed files in PRs, block on new issues only (existing issues ignored)\n  pull_request:\n\n  push:\n    branches: [\"dev\", \"main\"]\n\n  schedule:\n    - cron: '23 20 * * 1'\n\njobs:\n  semgrep:\n    name: Scan\n    runs-on: ubuntu-latest\n    container:\n      image: returntocorp/semgrep\n    # Skip any PR created by dependabot to avoid permission issues\n    if: (github.actor != 'dependabot[bot]')\n    steps:\n      # Fetch project source\n      - uses: actions/checkout@v3\n\n      - run: semgrep scan --sarif --output=semgrep.sarif\n        env:\n          SEMGREP_RULES: >- # more at semgrep.dev/explore\n            p/security-audit\n            p/secrets\n            p/owasp-top-ten\n\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: semgrep.sarif\n        if: always()```"}
{"id": "63c49b8b6fc19abdf9cbd32f", "level": "level1", "llm_response": " ```yaml\nname: Publish to PyPI\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install twine\n\n      - name: Build package\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: |\n          twine upload --repository pypi dist/*\n```", "answer": "```yaml name: Publish to PyPI\n\non:\n  release:\n    types: [released, prereleased]\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install wheel\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: '__token__'\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"id": "63c49ec7cbc73931bb1afa42", "level": "level1", "llm_response": " ```yaml\nname: Weekly Build\n\non:\n  schedule:\n    - cron: '0 10 * * 0'  # At 10:00 am on Sunday\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run Darglint\n        uses: darglint/darglint@v1\n        with:\n          args: '--verbose'\n\n  build_posix:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Build\n        run: python setup.py build\n```", "answer": "```yaml name: Weekly Build\n\non:\n  schedule:\n    # weekly at 0300 PST/1000 UTC on Sunday\n    - cron: '0 10 * * 0'\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 1\n      matrix:\n        os: [ubuntu-latest]\n        version: [\"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox darglint\n        run: python -m nox -s darglint\n\n  build_posix:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 8\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: get friendly (for nox) python version\n        # not super friendly looking, but easy way to get major.minor version so we can easily exec only the specific\n        # version we are targeting with nox, while still having versions like 3.9.0a4\n        run: |\n          echo \"FRIENDLY_PYTHON_VERSION=$(python -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\")\" >> $GITHUB_ENV\n      - name: ensure openssl installed for macos\n        # openssl missing/being linked incorrectly causes ssh2-python install failures\n        if: matrix.os == 'macos-latest'\n        run: |\n          brew install openssl\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox\n        env:\n          # needed to make the terminal a tty (i think? without this system ssh is super broken)\n          TERM: xterm\n        run: python -m nox -p $FRIENDLY_PYTHON_VERSION -k \"not darglint\"```"}
{"id": "63c498da33b087f6bde3b76e", "level": "level1", "llm_response": " ```yaml\nname: Normalize Composer\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set PHP version to 8.1\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.1'\n      - name: Normalize composer.json\n        run: |\n          composer require vendor/package --no-update\n          # Add additional normalization steps here\n          echo \"Normalized composer.json files\"\n      - name: Output message\n        if: github.event_name != 'workflow_dispatch'\n        run: echo \"The workflow was triggered manually and the message is: ${{ github.event.inputs.message-its }}\"\n```", "answer": "```yaml name: Normalize Composer\n\non:\n  workflow_dispatch:\n    inputs:\n      php:\n        default: \"8.1\"\n        type: string\n        required: false\n      message:\n        default: Normalize composer.json files\n        type: string\n        required: false\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ inputs.php }}\n          extensions: curl, dom, json, libxml, mbstring\n          coverage: none\n\n      - name: Install Composer Normalizer\n        run: |\n          composer global config --no-plugins allow-plugins.ergebnis/composer-normalize true\n          composer global require ergebnis/composer-normalize\n\n      - name: Normalize the root composer.json file\n        run: composer normalize\n\n      - name: Normalize the packages composer.json files\n        run: find src -name \"composer.json\" -print -exec composer normalize {} \\;\n\n      - name: Commit linted files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: ${{ inputs.message }}\n```"}
{"id": "63c498dfcbc73931bb189e97", "level": "level1", "llm_response": " ```yaml\nname: Arma\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Validate SQF code\n        uses: some/sqf-validator@v1\n        with:\n          sqf-file: ${{ github.event.pull_request.head.repo.full_name }}/${{ github.event.pull_request.head.path }}\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Lint SQF code\n        uses: some/sqf-linter@v1\n        with:\n          sqf-file: ${{ github.event.pull_request.head.repo.full_name }}/${{ github.event.pull_request.head.path }}\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build SQF code\n        uses: some/sqf-builder@v1\n        with:\n          sqf-file: ${{ github.event.pull_request.head.repo.full_name }}/${{ github.event.pull_request.head.path }}\n```\n\nNote: The `some/sqf-validator`, `some/sqf-linter`, and `some/sqf-builder` are placeholders for actual SQF-related tools that you would need to use or create. You may need to replace these with the correct actions or scripts that perform validation, linting, and building for SQF code. The `v1` tags are also placeholders for the versions of these tools.", "answer": "```yaml name: Arma\n\non:\n  push:\n    branches:\n    - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Validate SQF\n      run: python3 tools/sqf_validator.py\n    - name: Validate Config\n      run: python3 tools/config_style_checker.py\n    - name: Check Strings\n      run: python3 tools/check_strings.py\n    - name: Check for BOM\n      uses: arma-actions/bom-check@v1\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Lint (sqflint)\n      uses: arma-actions/sqflint@master\n      continue-on-error: true # No failure due to many false-positives\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Build using HEMTT\n      uses: arma-actions/hemtt@master\n      with:\n        command: build --release --ci\n    - name: Upload Artifact\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: CBA_A3-${{ github.sha }}-nobin\n        path: releases/CBA_A3_*.zip\n```"}
{"id": "63c49cf21842bc13d778706c", "level": "level1", "llm_response": " ```yaml\nname: CodeQL Workflow\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v1\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: CodeQL Workflow\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\npermissions:\n  contents: read\n\njobs:\n  codeql:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql/codeql-configuration.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c496d21842bc13d775fae4", "level": "level1", "llm_response": " ```yaml\nname: auto-merge\n\non: [pull_request]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Auto-merge Markdown files\n        run: |\n          # Here you would add steps to auto-merge Markdown files\n          # This is a placeholder for the actual merge logic\n          echo \"Auto-merging Markdown files in the pull request...\"\n          # Implement auto-merge logic here\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.6\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          approve: true\n          target: minor\n```"}
{"id": "63c49cfd1e336480757a4721", "level": "level1", "llm_response": " ```yaml\nname: CI\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '^1.16'\n      - name: Run tests\n        run: go test ./...\n\n  check-vendorsha:\n    needs: run-tests\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Check Vendor SHA\n        run: |\n          if [ -z \"$GITHUB_SHA\" ]; then\n            echo \"Error: GITHUB_SHA is not set.\"\n            exit 1\n          fi\n          if [ \"$GITHUB_SHA\" != \"$(git rev-parse HEAD)\" ]; then\n            echo \"Vendor SHA does not match.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: \"CI\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: sudo service postgresql start\n      - uses: actions/checkout@v3\n      - name: Create PostgreSQL user and tables\n        run: |\n          sudo -u postgres psql -c \"CREATE USER ${USER}\"\n          sudo -u postgres psql -c \"CREATE DATABASE lbitests OWNER ${USER}\"\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#run-tests\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#update-vendorsha -- ./nix/letsblockit.nix --check\n```"}
{"id": "63c49e61736e7f0ed8c679c4", "level": "level1", "llm_response": " ```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '^1.16'\n\n      - name: Build\n        run: |\n          go build -v ./...\n\n      - name: Run goreleaser\n        uses: goreleaser/goreleaser-action@v1\n        with:\n          args: --release --rm-final-layer --tag ${{ github.ref }}\n```", "answer": "```yaml name: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5\n        env:\n          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          PASSPHRASE: ${{ secrets.PASSPHRASE }}\n      - uses: actions/cache@v3.0.11\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3.2.0\n        with:\n          version: latest\n          args: release --rm-dist\n          key: ${{ secrets.YOUR_PRIVATE_KEY }}\n        env:\n          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c4952a7843b61269a05dc3", "level": "level1", "llm_response": " ```yaml\nname: main\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: 'my-artifact'\n          path: './target/*.jar'\n```", "answer": "```yaml name: main\n\non:\n  pull_request:\n  push:\n    branches:\n      # Only build on push for master or dev, otherwise branches pushed for PR\n      # are built twice\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Check changelog\n        if: ${{ github.event_name == 'pull_request' }}\n        run: ci/check-changelog \"origin/$GITHUB_BASE_REF\" \"origin/$GITHUB_HEAD_REF\"\n        shell: bash\n\n      - name: Build Docker image\n        run: ci/build-docker-image\n        shell: bash\n\n      - name: Build\n        shell: bash\n        run: ci/docker-build-game SNAPSHOT=1\n        env:\n          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}\n          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}\n          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}\n\n      - name: Smoke tests\n        uses: GabrielBB/xvfb-action@v1\n        with:\n          run: make smoke-tests SNAPSHOT=1\n\n      - name: Upload\n        # Do not upload for pull requests: `make upload` does not work without the upload secrets\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        run: make upload SNAPSHOT=1\n        env:\n          UPLOAD_USERNAME: ${{ secrets.UPLOAD_USERNAME }}\n          UPLOAD_PRIVATE_KEY: ${{ secrets.UPLOAD_PRIVATE_KEY }}\n          UPLOAD_HOSTNAME: ${{ secrets.UPLOAD_HOSTNAME }}\n```"}
{"id": "63c49e5c1e336480757ad079", "level": "level1", "llm_response": " ```yaml\nname: Lint Commit Message\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      types: [opened, synchronize, reopened, labeled, unlabeled, locked, unlocked]\n  workflow_dispatch:\n\njobs:\n  lint-commit-message:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Lint Commit Message\n        uses: bowdenlab/lint-commit-message@v1\n        with:\n          fail-on-warn: true\n          commit-msg-regex: '.*'\n```", "answer": "```yaml name: lint commit message\non: [ push, pull_request ]\n\njobs:\n  lint-commit-message:\n    runs-on: [self-hosted, linux, X64]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v4\n        with:\n          configFile: ${{ github.workspace }}/hack/commitlint.config.js\n```"}
{"id": "63c49f6233b087f6bde65d6b", "level": "level1", "llm_response": " ```yaml\nname: HealthChecks KAFKA Preview CD\n\non:\n  push:\n    tags:\n      - 'preview-kafka-*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: '5.0.x'\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build\n      run: dotnet build --configuration Release\n\n    - name: Run unit tests\n      run: dotnet test --no-build --verbosity normal\n\n    - name: Publish to NuGet\n      run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}}\n\n    - name: Upload artifacts\n      uses: actions/upload-artifact@v2\n      with:\n        name: binaries\n        path: ./bin/Release/net5.0/publish/\n\n    - name: Run health checks\n      run: ./run-health-checks.sh\n```", "answer": "```yaml name: HealthChecks KAFKA Preview CD\r\n\r\non:\r\n  push:\r\n    tags:\r\n      - preview-kafka-*\r\n\r\njobs:\r\n  build:\r\n    env:\r\n      BUILD_CONFIG: Release\r\n      VERSION_SUFFIX: -rc2.${{ github.run_number }}\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: dotnet restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj\r\n    - name: Build\r\n      run: dotnet build --no-restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj -c $BUILD_CONFIG\r\n    - name: Pack\r\n      run: dotnet pack --no-build ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj --version-suffix $VERSION_SUFFIX -c $BUILD_CONFIG -o ./artifacts\r\n    - name: Publish\r\n      run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.Kafka.*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate\r\n```"}
{"id": "63c49f63b008460c1df4d69b", "level": "level1", "llm_response": " ```yaml\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Generate Changelog\n        run: |\n          echo \"Generating changelog...\"\n          # Insert Python script or command to generate changelog here\n          # Example: python generate_changelog.py\n          echo \"Changelog generated.\"\n```", "answer": "```yaml # Copyright \u00a9 2012-2022 jrnl contributors\n# License: https://www.gnu.org/licenses/gpl-3.0.html\n\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    if: >\n      ! contains(github.event.head_commit.message, '[ci skip]') &&\n      ! (\n        startsWith(github.event.head_commit.message, 'Increment version to v') &&\n        startsWith(github.ref, 'refs/heads/')\n      )\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n\n      - name: Check branch for new commits, and env vars\n        run: |\n          echo \"::group::git fetch origin --tags --force\"\n          git fetch origin --tags --force\n          echo \"::endgroup::\"\n\n          TAG_REGEX='include-all'\n          echo \"::debug::GITHUB_REF: $GITHUB_REF\"\n          BRANCH=\"${GITHUB_REF##*/}\"\n\n          if [[ $GITHUB_REF =~ ^refs/tags/ ]]; then\n            # This is a tag build (i.e. a release)\n            echo '::debug::Release build'\n            if [[ ! $BRANCH =~ ^v[0-9]+(\\.[0-9]+){1,2}(-(alpha|beta)([0-9]+)?)?$ ]]; then\n              echo \"::error::Invalid tag format: ${BRANCH}\"\n              exit 1\n            fi\n\n            RELEASE=1\n            BRANCH=develop\n            git checkout $BRANCH\n\n            # if actual release (not pre), then changelog should exclude prereleases on update\n            prerelease_regex='(alpha|beta)'\n            if [[ ! ${GITHUB_REF##*/} =~ $prerelease_regex ]]; then\n              echo '::debug::Actual release (not a prerelease)'\n              TAG_REGEX=\"$prerelease_regex\"\n              echo \"FULL_RELEASE=true\" >> \"$GITHUB_ENV\"\n            fi\n          fi\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n\n          if [[ \"$(git rev-parse \"origin/$BRANCH\")\" != \"$GITHUB_SHA\" ]]; then\n            # Normal build on a branch (no tag)\n            echo \"::debug::BRANCH: $BRANCH $(git rev-parse origin/$BRANCH)\"\n            echo \"::debug::GITHUB_SHA: $GITHUB_SHA\"\n            echo \"::error::$BRANCH has been updated since build started. Aborting changelog.\"\n            exit 1\n          fi\n\n          SINCE_TAG=$(git tag --sort=-creatordate | grep -Ev \"$TAG_REGEX\" | awk \"NR==$(( 1 + ${RELEASE:-0} ))\")\n\n          echo \"::debug::BRANCH: $BRANCH\"\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n          echo \"::debug::FILENAME: CHANGELOG.md\"\n          echo \"::debug::SINCE_TAG: $SINCE_TAG\"\n\n          {\n          echo \"BRANCH=$BRANCH\"\n          echo \"TAG_REGEX=$TAG_REGEX\"\n          echo \"FILENAME=CHANGELOG.md\"\n          echo \"SINCE_TAG=$SINCE_TAG\"\n          } >> \"$GITHUB_ENV\"\n\n      - name: Prep changelog file (clear out old lines)\n        run: |\n          # delete the top of the changelog up to the correct tag\n          tagline=$(grep -n \"^## \\[${SINCE_TAG}\\]\" \"$FILENAME\" | awk '{print $1}' FS=':' | head -1)\n          echo \"tagline: ${tagline}\"\n\n          if [[ -z $tagline ]]; then\n            echo \"::error::Something is wrong. ${SINCE_TAG} isn't in the changelog.\"\n            exit 1\n          fi\n\n          if [[ $tagline == 1 ]]; then\n            echo \"::error::Something is wrong.\"\n            echo \"::error::The latest release ${SINCE_TAG} is the first line in the changelog,\"\n            echo \"::error::but the h1 '# Changelog' should always be the first line.\"\n            exit 1\n          fi\n\n          sed -i \"1,$(( tagline - 1 ))d\" \"$FILENAME\"\n          # delete generated line (or it will be added multiple times)\n          sed -i '/This Changelog was automatically generated by/d' \"$FILENAME\"\n          # delete trailing empty lines\n          sed -i -e :a -e '/^\\n*$/{$d;N;};/\\n$/ba' \"$FILENAME\"\n\n      - name: Generate changelog\n        uses: heinrichreimer/action-github-changelog-generator@v2.1.1\n        with:\n          # see: https://github.com/heinrichreimer/action-github-changelog-generator\n          repo: jrnl-org/jrnl\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n          base: CHANGELOG.md\n          addSections: '{\"build\":{\"prefix\":\"**Build:**\",\"labels\":[\"build\"]},\"docs\":{\"prefix\":\"**Documentation:**\",\"labels\":[\"documentation\"]},\"packaging\":{\"prefix\":\"**Packaging:**\",\"labels\":[\"packaging\"]}}'\n          issues: true\n          pullRequests: true\n          issuesWoLabels: false\n          unreleased: true\n          compareLink: true\n          includeLabels: bug,enhancement,documentation,build,packaging,deprecated\n          excludeLabels: stale,wontfix\n          excludeTagsRegex: ${{ env.TAG_REGEX }}\n          sinceTag: ${{ env.SINCE_TAG }}\n          maxIssues: 150\n          releaseUrl: https://pypi.org/project/jrnl/%s/\n          releaseBranch: develop\n          verbose: false\n          author: true\n\n      - name: Small fixes\n        run: |\n          # Change unreleased link to correct url\n          sed -i 's!https://pypi.org/project/jrnl/HEAD/!https://github.com/jrnl-org/jrnl/!' \"$FILENAME\"\n\n      - name: Diff and consistency check\n        run: |\n          git diff\n          if [[ $(grep -c '^# Changelog$' \"$FILENAME\") != 1 ]]; then\n            echo '::error::Something is wrong with the changelog.'\n            exit 1\n          fi\n          SOMETHING_CHANGED=false\n          git diff --exit-code || SOMETHING_CHANGED=true\n          echo \"::debug::SOMETHING_CHANGED: $SOMETHING_CHANGED\"\n          echo \"SOMETHING_CHANGED=$SOMETHING_CHANGED\" >> \"$GITHUB_ENV\"\n\n      - name: Commit\n        if: env.SOMETHING_CHANGED == 'true'\n        run: |\n          git config --global user.name \"${{ secrets.JRNL_BOT_NAME }}\"\n          git config --global user.email \"${{ secrets.JRNL_BOT_EMAIL }}\"\n          git add \"$FILENAME\"\n          git commit -m \"Update changelog [ci skip]\"\n          git push origin \"$BRANCH\"\n\n      - name: Merge to Release branch\n        if: env.FULL_RELEASE == 'true'\n        run: |\n          git fetch --unshallow origin\n          git checkout release\n          git merge --ff-only \"$BRANCH\"\n          git push origin release\n\n```"}
{"id": "63c49d091e336480757a4c12", "level": "level1", "llm_response": " ```yaml\nname: Label sponsors\n\non:\n  pull_request:\n    types: [opened, edited]\n  issues:\n    types: [opened]\n\njobs:\n  is-sponsor-label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      \n      - name: Install dependencies\n        run: npm install\n      \n      - name: Label sponsors\n        run: |\n          # Here you would implement the logic to label pull requests as sponsors\n          # This could involve calling an API or using GitHub's actions to label the PR\n          # Example:\n          # npx @actions-github/label-sponsor\n          echo \"Labeling PR as sponsor\"\n```\n\nPlease note that the actual labeling logic will depend on the specific tooling or API you intend to use. The placeholder comment is there to indicate where you would insert the appropriate commands. You might need to install additional action or script if the `@actions-github/label-sponsor` is not available or suitable for your use case.", "answer": "```yaml name: Label sponsors\non:\n  pull_request:\n    types: [opened]\n  issues:\n    types: [opened]\njobs:\n  build:\n    name: is-sponsor-label\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JasonEtco/is-sponsor-label-action@v1.2.0\n        with:\n          label: sponsor\n        env:\n          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}\n```"}
{"id": "63c49ef46fc19abdf9cd2ebc", "level": "level1", "llm_response": " ```yaml\nname: Dummy workflow for conflicts\n\non: [pull_request]\n\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Print job start message\n        run: echo \"Job dummy started\"\n\n      - name: Perform a dummy conflict resolution task\n        run: echo \"Simulating conflict resolution process...\"\n```", "answer": "```yaml name: Dummy workflow for conflicts\non:\n  pull_request_review:\n    types: [submitted]\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"this is a dummy workflow that triggers a workflow_run; it's necessary because otherwise the repo secrets will not be in scope for externally forked pull requests\"\n```"}
{"id": "63c4989c1842bc13d776b509", "level": "level1", "llm_response": " ```yaml\nname: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup HCL\n        uses: actions/setup-hcl@v1\n\n      - name: Publish HCL package\n        run: |\n          hcl package publish -force\n          echo \"Package published to the registry.\"\n```", "answer": "```yaml name: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      # Get PR from merged commit to master\n      - uses: actions-ecosystem/action-get-merged-pull-request@v1\n        id: get-merged-pull-request\n        with:\n          github_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          publish: ${{ !contains(steps.get-merged-pull-request.outputs.labels, 'no-release') }}\n          prerelease: false\n          config-name: auto-release.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n```"}
{"id": "63c496f633b087f6bde2f773", "level": "level1", "llm_response": " ```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Close stale issues\n        uses: actions/github-script@v3\n        with:\n          script: |\n            github.issues.listForRepo({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              states: 'CLOSED',\n              per_page: 100,\n              sort: 'CREATED',\n              direction: 'DESC'\n            }).then(issues => {\n              issues.data.forEach(issue => {\n                if (!issue.pull_request) {\n                  github.issues.update({\n                    ...issue,\n                    state: 'CLOSED'\n                  }).then(updatedIssue => {\n                    console.log(`Issue ${updatedIssue.number} has been closed.`);\n                  });\n                }\n              });\n            });\n```", "answer": "```yaml name: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: 'ubuntu-latest'\n    steps:\n    - uses: 'actions/stale@v6'\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n        stale-issue-message: |-\n          This issue is stale because it has been open for 90 days with no\n          activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-issue-label: 'lifecycle/stale'\n        exempt-issue-labels: 'lifecycle/frozen'\n\n        stale-pr-message: |-\n          This Pull Request is stale because it has been open for 90 days with\n          no activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-pr-label: 'lifecycle/stale'\n        exempt-pr-labels: 'lifecycle/frozen'\n\n        days-before-stale: 90\n        days-before-close: 30\n```"}
{"id": "63c49c16517fc08c1eef4503", "level": "level1", "llm_response": " ```yaml\nname: Comment When Needs More Info Label Added\non:\n  issues:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Add comment to issue\n        uses: peter-evans/create-comment@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          comment: \"Thanks for reporting this! We need more information to resolve this issue. Please provide the following details:\"\n```", "answer": "```yaml name: Comment When Needs More Info Label Added\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'needs more info'\n    steps:\n      - name: Create comment\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: 'create-comment'\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi, ${{ github.event.issue.user.login }}.\n\n            It seems that this issue is a bit vague and lacks some necessary information. \n\n            \u770b\u8d77\u6765\u8fd9\u6761 issue \u63cf\u8ff0\u5f97\u6709\u4e9b\u6a21\u7cca\uff0c\u7f3a\u5c11\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f\u3002\n```"}
{"id": "63c49c921e336480757a1c2c", "level": "level1", "llm_response": " ```yaml\nname: vcf2bcf Testing\n\non:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n      - '.github/workflows/vcf2bcf.yml'\n  pull_request:\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          python -m unittest discover -s tests\n```", "answer": "```yaml name: vcf2bcf Testing\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - bioconvert/vcf2bcf.py\n      - .github/workflows/vcf2bcf.yml\n  pull_request:\n    branches-ignore: []\n    paths:\n      - bioconvert/vcf2bcf.py\n  schedule:\n    - cron: '0 0 * * SUN'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 5\n      matrix:\n        python: [3.7, 3.8, 3.9]\n      fail-fast: false\n\n    steps:\n\n    - name: install graphviz and curl\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y graphviz-dev\n        sudo apt-get install libcurl4-gnutls-dev\n    - name: checkout git repo\n      uses: actions/checkout@v2\n    - name: Set up Python 3.X\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: conda\n      run: |\n        # $CONDA is an environment variable pointing to the root of the miniconda directory\n        echo $CONDA/bin >> $GITHUB_PATH\n    - name: Install dependencies conda\n      run: |\n        conda install -c conda-forge --quiet 'mamba<0.24' python=${{ matrix.python }}\n        mamba install -c conda-forge -c bioconda --quiet -y samtools bedtools bamtools mosdepth pbzip2 pigz dsrc sambamba squizz\n    - name: Install bioconvert with pip\n      run: |\n        pip install -r requirements.txt\n        pip install .[testing]\n    - name: Test with pytest\n      run: |\n        pytest -n 1  --cov-report term --cov=bioconvert.vcf2bcf test/test_vcf2bcf.py\n```"}
{"id": "63c498451842bc13d776928d", "level": "level1", "llm_response": " ```yaml\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_run:\n    workflows: [Continuous Integration]\n    types: [completed]\n\njobs:\n  merge-me:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Merge Dependabot PRs\n        uses: peter-evans/merge-pull-requests@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          prs: '>10'\n          auto: true\n          merge: true\n          commit-message: \"Merge Dependabot PRs\"\n```", "answer": "```yaml # See https://github.com/ridedott/merge-me-action/\n# This workflow automates merges from patches sent by Dependabot, and\n# only by dependabot, once the other CI workflows pass\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - \"Continuous Integration\"\n\njobs:\n  merge-me:\n    name: Auto-merge Dependabot PRs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2.10.31\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          MERGE_METHOD: MERGE\n```"}
{"id": "63c499ba517fc08c1eee58bc", "level": "level1", "llm_response": " ```yaml\nname: Swift\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n      \n    - name: Setup Swift\n      uses: actions/setup-swift@v1\n      \n    - name: Build Swift Package\n      run: swift build\n      \n    - name: Run Tests\n      run: swift test\n      \n    - name: Archive Build\n      uses: actions/upload-artifact@v2\n      with:\n        name: build-artifact\n        path: ./build/Release\n```", "answer": "```yaml name: Swift\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: macOS-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Build\n      run: swift build -v\n```"}
{"id": "63c49dda517fc08c1eeff921", "level": "level1", "llm_response": " ```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: actions/setup-ruby@v1\n        with:\n          ruby-version: '2.7'\n\n      - name: Install dependencies\n        run: bundle install\n\n      - name: Build gem\n        run: bundle exec rake build\n\n      - name: Publish gem\n        env:\n          GEM_NAME: my_gem\n          GEM_VERSION: ${{ github.ref_name }}\n          GEM_USER: ${{ github.actor }}\n          GEM_HOMEPAGE: https://github.com/${{ github.actor }}/my_gem\n        run: bundle exec gem build my_gem.gemspec\n        env:\n          GEM_NAME: my_gem\n          GEM_VERSION: ${{ github.ref_name }}\n\n      - name: Upload gem to RubyGems\n        uses: ruby-actions/gem-upload@v1\n        with:\n          gem_name: ${{ env.GEM_NAME }}\n          gem_version: ${{ env.GEM_VERSION }}\n          user: ${{ env.GEM_USER }}\n          homepage: ${{ env.GEM_HOMEPAGE }}\n```\n\nPlease note that you'll need to replace `my_gem` with the actual gem name and adjust the `ruby-version` if needed. Also, ensure that your `.gemspec` file is correctly configured for gem building. The `gem_upload` step assumes you have configured the necessary credentials for RubyGems.org or another gem hosting service.", "answer": "```yaml name: Ruby Gem\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@master\n    - name: Set up Ruby 2.6\n      uses: actions/setup-ruby@v1\n      with:\n        ruby-version: 2.6.x\n\n    #- name: Publish to GPR\n    #  run: |\n    #    mkdir -p $HOME/.gem\n    #    touch $HOME/.gem/credentials\n    #    chmod 0600 $HOME/.gem/credentials\n    #    printf -- \"---\\n:github: Bearer ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n    #    gem build *.gemspec\n    #    gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n    #  env:\n    #    GEM_HOST_API_KEY: ${{secrets.GITHUB_TOKEN}}\n    #    OWNER: wpscanteam\n\n    - name: Publish to RubyGems\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:rubygems_api_key: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        gem build *.gemspec\n        gem push *.gem\n      env:\n        GEM_HOST_API_KEY: ${{secrets.RUBYGEMS_AUTH_TOKEN}}\n```"}
{"id": "63c4a04933b087f6bde6b99c", "level": "level1", "llm_response": " ```yaml\nname: Magisk\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Setup Shell\n        uses: actions/setup-shell@v1\n        with:\n          shell: bash\n\n      - name: Build Magisk\n        run: |\n          echo \"Building Magisk...\"\n          # Insert Magisk build commands here\n          # Example:\n          # make magisk\n\n      - name: Upload Build Artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: magisk-build-artifact\n          path: ./path/to/build/artifact\n```", "answer": "```yaml name: Magisk\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Copy hosts to magisk dir\n      run: cp releases/hosts dev/magisk/\n    - name: Zip magisk dir\n      run: |\n        cd dev/magisk\n        zip -r bebasid-magisk.zip *\n        ls -l\n    - name: Move bebasid-magisk to releases\n      run: |\n        mv dev/magisk/bebasid-magisk.zip releases/\n        cd releases\n        ls -l\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v10.1\n    - name: Validating hosts changes, run next command if it is true\n      if: contains(steps.changed-files.outputs.modified_files, 'releases/hosts')\n      run: |\n          echo \"hosts file has been modified.\"\n          LAST_COMMIT_MESSAGE=\"$(git log -1 --pretty=\"%s %b\")\"\n          git config --global user.email \"gvoze32@yahoo.com\"\n          git config --global user.name \"zksbot\"\n          cd releases\n          ls -l\n          git add bebasid-magisk.zip\n          git commit -m \"Magisk sync: ${LAST_COMMIT_MESSAGE}\"\n    - name: Push changes\n      uses: ad-m/github-push-action@master\n      with:\n        github_token: ${{ secrets.UPDATE_TOKEN }}\n```"}
{"id": "63c5ae7c6b748c7b1faded89", "level": "level1", "llm_response": " ```yaml\nname: Maven Deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Set up JDK\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Cache Maven\n      uses: actions/cache@v2\n      with:\n        path: ~/.m2\n        key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}\n\n    - name: Build with Maven\n      run: mvn clean install -DskipTests\n\n    - name: Deploy to Maven Repository\n      run: mvn deploy -Dmaven.test.skip=true\n```", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n## For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path\n\nname: Maven Deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      SONATYPE_USER: ${{secrets.BUF_SONATYPE_USER}}\n      SONATYPE_PASSWORD: ${{secrets.BUF_SONATYPE_PASSWORD}}\n      GPG_KEY_NAME: ${{secrets.GPG_KEY_NAME}}\n      GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}\n      MAVEN_OPTS: \"--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED\"\n      REF_NAME: ${{ github.ref_name }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set VERSION variable from tag\n        run: |\n          VERSION=${{ env.REF_NAME }}\n          echo \"VERSION=${VERSION:1}\" >> $GITHUB_ENV\n\n      - name: 'Configure GPG signing'\n        env:\n          GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n        run: |\n          # https://github.com/keybase/keybase-issues/issues/2798\n          export GPG_TTY=$(tty)\n          # Import gpg keys and warm the passphrase to avoid the gpg\n          # passphrase prompt when initating a deploy\n          # `--pinentry-mode=loopback` could be needed to ensure we\n          # suppress the gpg prompt\n          echo $GPG_KEY | base64 --decode > signing-key\n          gpg --passphrase $GPG_PASSPHRASE --batch --import signing-key\n          shred signing-key\n          \n      - name: Configure GIT\n        run: |\n          git config --global user.email \"envoy-bot@users.noreply.github.com\" \n          git config --global user.name \"envoy-bot\"\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          server-id: sonatype-nexus-snapshots\n          server-username: ${ env.SONATYPE_USER }\n          server-password: ${ env.SONATYPE_PASSWORD }\n          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}\n          gpg-passphrase: ${ env.GPG_PASSPHRASE }\n\n      - name: Update version in pom\n        working-directory: ${{ github.workspace }}/java\n        run: mvn -B versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false\n\n      - name: Publish to Maven Packages Apache Maven\n        working-directory: ${{ github.workspace }}/java\n        run: |\n          mvn -B -s settings.xml clean deploy \\\n          -Darguments=\"-s settings.xml\" \\\n          -DreleaseVersion=${{ env.VERSION }} \\\n          -DdevelopmentVersion=${{ env.VERSION }}-SNAPSHOT \\\n          -DscmCommentPrefix=\"java release: \"\n        env:\n          MAVEN_USERNAME: ${{ env.SONATYPE_USER }}\n          MAVEN_CENTRAL_TOKEN: ${{ env.SONATYPE_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```"}
{"id": "63c49a621e33648075793df8", "level": "level1", "llm_response": " ```yaml\nname: Generate Documentation\n\non:\n  push:\n    paths-ignore:\n      - 'cmake/**'\n    branches:\n      - main\n  pull_request:\n    paths-filter:\n      - 'docs/sphinx/**'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install sphinx\n\n      - name: Generate documentation\n        run: sphinx-build -b html ./docs/source ./docs/build\n\n      - name: Upload documentation to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_branch: gh-pages\n          publish_dir: ./docs/build\n```", "answer": "```yaml name: Generate Documentation\n\non:\n  push:\n    paths-ignore:\n      - \"cmake/**\"\n  pull_request:\n    paths:\n      - \"docs/sphinx/**\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Bump Version Number\n        shell: bash\n        if: github.event_name == 'push'\n        run: |\n          VERTEST=\"\\#define\\sLIBOBS_API_\\w+_VER\\s([0-9]{1,2})\"\n          VER=\"\"\n          MAJOR=\"\"\n          while IFS= read -r l\n          do\n              if [[ $l =~ $VERTEST ]]; then\n                  if [[ $VER = '' ]]; then MAJOR=\"${BASH_REMATCH[1]}\"; else VER+=\".\"; fi\n                  VER+=\"${BASH_REMATCH[1]}\"\n              fi\n          done < \"libobs/obs-config.h\"\n\n          SVER=\"version = '([0-9\\.]+)'\"\n          RVER=\"version = '$VER'\"\n          SREL=\"release = '([0-9\\.]+)'\"\n          RREL=\"release = '$VER'\"\n          SCOPY=\"copyright = '([A-Za-z0-9, ]+)'\"\n          RCOPY=\"copyright = '2017-$(date +\"%Y\"), Hugh Bailey'\"\n          sed -i -E -e \"s/${SVER}/${RVER}/g\" -e \"s/${SREL}/${RREL}/g\" -e \"s/${SCOPY}/${RCOPY}/g\" docs/sphinx/conf.py\n      - uses: totaldebug/sphinx-publish-action@1.2.0\n        with:\n          sphinx_src: 'docs/sphinx'\n          build_only: True\n          target_branch: 'master'\n          target_path: '../home/_build'\n          pre_build_commands: 'pip install -Iv sphinx==5.1.1'\n      - uses: actions/upload-artifact@v3\n        with:\n          name: OBS Studio Documentation (HTML)\n          path: |\n            ${{ runner.temp }}/_github_home/_build\n            !${{ runner.temp }}/_github_home/_build/.doctrees\n```"}
{"id": "63c49ee533b087f6bde62bbb", "level": "level1", "llm_response": " ```yaml\nname: Auto-Close Issues\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Auto-Close Issues\n        run: |\n          # Your script to automatically close issues goes here\n          echo \"Auto-closing issues based on certain criteria...\"\n          # Example: git issue-close-command\n          # Replace with actual command or script logic\n```\n\nPlease note that the above YAML file is a template and does not contain the actual logic to close issues. You would need to replace the `echo` and comment line with your actual script or command that interacts with your issue tracking system. If you are using a specific tool or service for managing issues, you might need to include that in the workflow as well.", "answer": "```yaml on:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Automatically close issues that don't follow the issue template\n        uses: lucasbento/auto-close-issues@v1.0.2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-close-message: \"@${issue.user.login}: hello! :wave:\\n\\nThis issue is being automatically closed because it does not follow the issue template.\" # optional property\n          closed-issues-label: \"\ud83d\ude41 Not following issue template\" # optional property```"}
{"id": "63c49ecf1899db5886509168", "level": "level1", "llm_response": " ```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run Tests\n        run: |\n          pytest\n\n      - name: Create Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          ./create_release.sh ${{ github.ref }} ${{ github.event.release.tag_name }}\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT_TOKEN }}\n\n      - name: Setup python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: Setup git config\n        run: |\n          git config --global user.name \"hikari-bot\"\n          git config --global user.email \"90276125+hikari-bot[bot]@users.noreply.github.com\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: false\n\n      - name: Deploy\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n          VERSION: ${{ github.event.release.tag_name }}\n          REF: ${{ github.sha }}\n          GITHUB_REPO_SLUG: ${{ github.repository }}\n          DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}\n          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\n        run: bash scripts/deploy.sh\n\n      - name: Re-enable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        if: always()\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: true\n```"}
{"id": "63c4966d33b087f6bde2bec0", "level": "level1", "llm_response": " ```yaml\nname: Go Workflow\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build\n        run: go build -v ./...\n      - name: Test\n        run: go test -v ./...\n```", "answer": "```yaml name: Go\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    # Run full test once a day\n    - cron: '0 0 * * *'\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-20.04\n    steps:\n      # https://github.com/actions/setup-go\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n        id: go\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          # Required: the version of golangci-lint is required\n          # and must be specified without patch version:\n          # we always use the latest patch version.\n          version: v1.50\n      - name: Install GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          install-only: true\n      - name: Show GoReleaser version\n        run: goreleaser --version\n      - name: Build\n        run: make build\n      - name: Quick Test\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: make test-short\n        if: ${{ github.event_name == 'pull_request' }}\n      - name: All Test\n        env:\n          # Access only to ec2 AMI api in read-only\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}\n          UPDATECLI_GITEA_TOKEN: ${{ secrets.UPDATECLI_GITEA_TOKEN }}\n        run: make test\n        if: ${{ github.event_name == 'schedule' }}\n      # Codecov should only be updated if make test is executed\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        if: ${{ github.event_name == 'schedule' }}\n      # Manage and run your integration tests with efficiency\n      # https://github.com/ovh/venom\n      - name: Install Venom\n        run: |\n          curl -o /usr/local/bin/venom https://github.com/ovh/venom/releases/download/$VENOM_VERSION/venom.linux-amd64 -L\n          sudo chmod +x /usr/local/bin/venom\n          ls -lha /usr/local/bin/venom\n        env:\n          VENOM_VERSION: v1.0.1\n      - name: Show Venom version\n        run: venom version\n      - name: Run End to End tests\n        run: make test-e2e\n        env:\n          IS_TTY: true # https://github.com/ovh/venom#use-venom-in-ci\n          # Access only to ec2 AMI api in read-only\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c6c517fc08c1eef66d4", "level": "level1", "llm_response": " ```yaml\nname: Run Build with Tests on PR\n\non:\n  pull_request:\n    branches:\n      - develop\n      - master\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref }}-run-build-with-tests\n      cancel-in-progress: true\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean verify\n\n      - name: Run Unit Tests\n        run: mvn test\n```", "answer": "```yaml name: Run Build with Tests on PR\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n    branches:\n      - develop\n      - master\n\nconcurrency:\n  group: ${{ github.head_ref }}-run-build-with-tests\n  cancel-in-progress: true\n\njobs:\n  build-and-run-unit-test:\n    name: \"Build & Test\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: '8.0.345'\n          architecture: x64\n          cache: 'gradle'\n\n      - name: Execute Gradle Build\n        run: ./gradlew clean test --console=plain\n\n      - name: Publish Test Report\n        uses: mikepenz/action-junit-report@v3.5.0\n        if: always()\n        with:\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          fail_on_failure: true\n          annotate_only: false\n          check_name: Test Report\n\n      - name: Delete previous comment of Github Actions Bot\n        uses: izhangzhihao/delete-comment@master\n        if: always()\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          delete_user_name: github-actions[bot]\n          issue_number: ${{ github.event.number }}\n\n      - name: Notify current workflow is succeed\n        uses: actions/github-script@v6\n        if: success()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u2705 Build & Test workflow succeed \u2705\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n\n      - name: Notify current workflow is failed\n        uses: actions/github-script@v6\n        if: failure()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u274c Build & Test workflow failed \u274c\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n```"}
{"id": "63c49c791842bc13d7783de7", "level": "level1", "llm_response": " ```yaml\nname: scala-steward\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Set up JDK\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Build with sbt\n      run: sbt clean compile\n\n    - name: Run tests\n      run: sbt test\n\n    - name: Publish artifacts\n      if: github.ref == 'refs/heads/master'\n      uses: actions/upload-artifact@v2\n      with:\n        name: artifacts\n        path: target/scala-2.12/\n```", "answer": "```yaml name: scala-steward\non:\n  push:\n    branches: [ master ]\n  schedule:\n  - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Generate token\n      id: generate_token\n      if: ${{ !github.event.repository.fork }}\n      uses: tibdex/github-app-token@v1\n      with:\n        app_id: 89631\n        private_key: ${{ secrets.SCALIKEJDBC_BOT_KEY }}\n    - name: Launch Scala Steward\n      if: ${{ !github.event.repository.fork }}\n      uses: scala-steward-org/scala-steward-action@v2.26.0\n      with:\n        github-token: ${{ steps.generate_token.outputs.token }}\n        author-email: \"74833019+scalikejdbc-bot[bot]@users.noreply.github.com\"\n        author-name: scalikejdbc-bot[bot]\n```"}
{"id": "63c4a158b008460c1df59cf6", "level": "level1", "llm_response": " ```yaml\nname: Library code size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Install TypeScript\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n          registry-url: 'https://registry.npmjs.org'\n      - name: Install TypeScript Deps\n        run: npm install\n      - name: Size TypeScript Library\n        run: npm run size\n      - name: Upload Size Report\n        uses: actions/upload-artifact@v2\n        with:\n          name: code-size-report\n          path: ./path/to/size-report.json\n```\n\nNote: You will need to have a script in your `package.json` file that generates the size report, something like `size: \"ts-size\"`. The `path` in the `upload-artifact` step should be updated to the actual path where your size report is saved.", "answer": "```yaml name: Library code size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5aead6b748c7b1fadf7b1", "level": "level1", "llm_response": " ```yaml\nname: Build Ubuntu 20.04 ARM64\n\non:\n  pull_request:\n    paths-ignore:\n      - docs/**\n      - samples/**\n      - **.md\n  push:\n    branches:\n      - master\n      - release/oss-v*\n      - tags:\n          - oss-v*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' && contains(github.ref, 'release/oss-v*') || contains(github.ref, 'tags: oss-v*')\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v1\n        with:\n          dotnet-version: '6.0.x'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build with MSBuild\n        run: dotnet build --configuration Release\n\n      - name: Run tests\n        run: dotnet test --logger \"trx;LogFileName=test_results.trx\"\n\n      - name: Publish NuGet packages\n        run: dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_PACKAGE_KEY }}\n\n      - name: Upload test results\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n```", "answer": "```yaml name: Build Ubuntu 20.04 ARM64\non:\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n  push:\n    branches:\n      - master\n      - release/oss-v*\n    tags:\n      - oss-v*\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n\njobs:\n  build:\n    uses: EventStore/EventStore/.github/workflows/build-reusable.yml@d274d7d528800d72cfac3d496dc747fba5208ff3\n    with:\n      os: ubuntu-20.04-arm64\n      arch: arm64```"}
{"id": "63c4a0956fc19abdf9cdd937", "level": "level1", "llm_response": " ```yaml\nname: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n\nenv:\n  GALAXY_TEST_DBURI: 'postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run CWL conformance tests\n        run: |\n          python run_tests.py\n```", "answer": "```yaml name: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\nenv:\n  GALAXY_TEST_DBURI: 'postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    name: Test\n    if: ${{ false }}\n    runs-on: ubuntu-latest\n    continue-on-error: ${{ startsWith(matrix.marker, 'red') }}\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7']\n        marker: ['green', 'red and required', 'red and not required']\n        conformance-version: ['cwl_conformance_v1_0'] #, 'cwl_conformance_v1_1', 'cwl_conformance_v1_2']\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: postgres\n        ports:\n          - 5432:5432\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache galaxy venv\n        uses: actions/cache@v3\n        with:\n          path: 'galaxy root/.venv'\n          key: gxy-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Run tests\n        run: ./run_tests.sh --coverage --skip_flakey_fails -cwl lib/galaxy_test/api/cwl -- -m \"${{ matrix.marker }} and ${{ matrix.conformance-version }}\"\n        working-directory: 'galaxy root'\n      - uses: codecov/codecov-action@v3\n        with:\n          flags: cwl-conformance\n          working-directory: 'galaxy root'\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: CWL conformance test results (${{ matrix.python-version }}, ${{ matrix.marker }}, ${{ matrix.conformance-version }})\n          path: 'galaxy root/run_cwl_tests.html'\n```"}
{"id": "63c4a09a33b087f6bde6da70", "level": "level1", "llm_response": " ```yaml\nname: system build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Nix build\n        uses: nixos/nix-action@v1\n        with:\n          args: 'build'\n```", "answer": "```yaml name: 'system build'\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Shallow clones won't work\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: cachix/cachix-action@v12\n        with:\n          name: kclejeune\n          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}\n          extraPullNames: nix-community\n      - name: Run Flake Checks\n        run: |\n          nix flake check -v --show-trace\n        timeout-minutes: 240\n```"}
{"id": "63c49fec6fc19abdf9cd94ca", "level": "level1", "llm_response": " ```yaml\nname: Commented Pull Request\n\non:\n  issues:\n    types: [opened, edited, milestoned, reopened]\n  pull_request_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    runs-on: ubuntu-latest\n    name: PullRequestHandler\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up PowerShell\n        uses: actions/setup-powershell@v1\n\n      - name: Run PowerShell script\n        run: |\n          # Add your PowerShell script here\n          Write-Host \"Handling pull request based on the comment.\"\n```", "answer": "```yaml on:\n  issue_comment:\n    types: [ created ]\nname: Commented Pull Request\njobs:\n  pullRequestHandler:\n    name: PullRequestHandler\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@main\n    - name: PullRequestHandler\n      uses: ScoopInstaller/GithubActions@main\n      if: startsWith(github.event.comment.body, '/verify')\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5e736e7f0ed8c6105a", "level": "level1", "llm_response": " ```yaml\nname: Checklist\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited, assignee_changed, labeled, unlabeled, locked, unlocked, pulled, pushed, review_requested, mentions, created, deleted]\n    branches:\n      - main\n\njobs:\n  Verify Status:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      - name: Verify Status\n        run: |\n          # Insert PowerShell script commands here to verify the status of the pull request\n          # Example:\n          # $pr = git pull request --get ${{ github.event.pull_request.number }}\n          # if ($pr.state -eq 'opened' -or $pr.state -eq 'reopened') {\n          #   Write-Output \"Pull request is open or reopened.\"\n          # }\n```\nPlease replace the placeholder PowerShell script commands with the actual commands you intend to use for verifying the pull request status.", "answer": "```yaml name: Checklist\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - opened\n      - reopened\n      - ready_for_review\n      - edited\n      - synchronize\npermissions:\n  contents: read\njobs:\n  Test:\n    name: Verify Status\n    runs-on: windows-latest\n    if: |\n      !contains(github.event.pull_request.title, 'WIP') &&\n      !github.event.pull_request.draft\n    defaults:\n      run:\n        shell: pwsh\n    steps:\n      - name: Verify Checklist\n        id: verify_checklist\n        uses: MicrosoftDocs/PowerShell-Docs/.github/actions/verification/checklist/v1@main\n```"}
{"id": "63c49d011e336480757a48d8", "level": "level1", "llm_response": " ```yaml\nname: User-agent updater\n\non:\n  push:\n    paths:\n      - '**.cpp'\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n    inputs:\n      trigger_event:\n        description: 'Trigger the workflow'\n        required: false\n        default: 'POST to /repos/{owner}/{repo}/dispatches'\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Update User-Agent\n        run: |\n          echo \"Updating user_agent...\"\n          # Add the actual command to update the user_agent here\n          # This is just a placeholder for demonstration\n          echo \"New user_agent: $(date)\"\n\n      - name: Notify completion\n        uses: actions/github-script@v4\n        if: always()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const payload = {\n              event: 'workflow_run',\n              headers: {\n                'Accept': 'application/vnd.github.v3+json',\n              },\n              params: {\n                'workflow_id': '${{ github.workflow_id }}',\n                'ref': 'refs/heads/main',\n              },\n            };\n            github.actions.createWorkflowEvent({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              event_type: 'workflow_dispatch',\n              headers: payload.headers,\n              body: payload.body,\n            });\n```\n\nPlease note that you will need to replace the placeholder command for updating the user_agent with the actual command or script that performs this task. The `echo \"New user_agent: $(date)\"` line is just for demonstration purposes and should be replaced with the real user_agent update logic.\n\nAlso, ensure that you have the necessary permissions and that the GitHub App has the correct configuration to send dispatch events to your repository. The `github-token` secret is automatically created by GitHub Actions and is used to authenticate the GitHub API requests.", "answer": "```yaml name: User-agent updater.\n\non:\n  repository_dispatch:\n    types: [\"Restart user_agent_updater workflow.\"]\n  schedule:\n    # At 00:00 on day-of-month 1.\n    - cron: \"0 0 1 * *\"\n  pull_request_target:\n    types: [closed]\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: desktop-app/action_code_updater@master\n        with:\n          type: \"user-agent\"\n```"}
{"id": "63c4967033b087f6bde2c007", "level": "level1", "llm_response": " ```yaml\nname: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron: '0 6 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Emacs Lisp environment\n        run: |\n          # Commands to set up the Emacs Lisp environment\n          # e.g., installing dependencies, setting up environment variables\n      - name: Run Emacs Lisp tests\n        run: |\n          # Commands to run Emacs Lisp tests\n          # e.g., emacs --batch --eval '(load \"test-suite\")'\n```", "answer": "```yaml name: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron:  '0 6 * * *'\n\njobs:\n  build:\n\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        build_opts:\n          # Emacs 26.x\n          - 'emacs-head@26'\n\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n      GPG: '/usr/local/bin/gpg'\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Tap Homebrew Emacs Head\n      run: brew tap daviderestivo/emacs-head\n\n    - name: Install ${{ matrix.build_opts }}\n      run: brew install ${{ matrix.build_opts }}\n\n    - name: Create personal config file from template\n      run: mv personal.el.example personal.el\n\n    - name: Create savehist directory\n      run: mkdir -p ${{ github.workspace }}/savehist\n\n    - name: Create gnupg Emacs directory\n      run: mkdir -p ${{ github.workspace }}/elpa/gnupg\n\n    - name: Init git submodules\n      run: git submodule init && git submodule update && git submodule foreach --recursive git checkout master\n\n    - name: Attempting startup...\n      run: emacs -nw --batch --debug-init --eval='(let\n                                                   ((galactic-emacs-ci t)\n                                                    (debug-on-error (>=  emacs-major-version 26))\n                                                    (initial-buffer-choice \"*scratch*\")\n                                                    (user-emacs-directory default-directory)\n                                                    (user-init-file (expand-file-name \"init.el\")))\n                                                   (setq url-show-status nil)\n                                                   (package-initialize)\n                                                   (load-file user-init-file)\n                                                   (message \"... startup successful!\"))'\n```"}
{"id": "63c4985733b087f6bde383d5", "level": "level1", "llm_response": " ```yaml\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Validate YAML files\n        run: |\n          yamllint --strict-whitespace --warnings=never --allow-simple-null-literals .\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Validate links\n        run: |\n          python -c \"import requests; response = requests.get('http://example.com'); assert response.status_code == 200\"\n\n  Main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Update README\n        run: |\n          python update_readme.py\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Update contributors\n        run: |\n          python update_contributors.py\n```", "answer": "```yaml ---\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Validate YAML files\n        uses: SoftCreatR/validate-yaml-schema@v2.0.0\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6\n\n      - id: file-diff\n        uses: lots0logs/gh-action-get-changed-files@2.1.4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Validate Links\n        run: |\n          FILELIST=\"\"\n\n          for FILENAME in $(jq '.[]' $HOME/files.json); do\n            FILENAME=\"${FILENAME:1}\"\n            FILENAME=\"${FILENAME::-1}\"\n\n            if [ -f \"$FILENAME\" ] && [[ $FILENAME == *\"participants\"* ]] && [ \"${FILENAME: -4}\" == \".yml\" ]; then\n              FILELIST+=\"$FILENAME,\"\n            else\n              echo \"- Skipped $FILENAME\"\n            fi\n          done\n\n          if [ -n \"$FILELIST\" ]; then\n            gem install awesome_bot\n            awesome_bot --files \"$FILELIST\" --allow-dupe --allow-redirect --skip-save-results\n          else\n            echo \"Nothing to do.\"\n          fi\n\n  Main:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: python -m pip install -r requirements.txt\n\n      - name: Update README\n        run: python update_readme.py\n\n      - name: Commit and push on changes\n        run: |-\n          git add .\n          git diff\n          git config --global user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"github-actions[bot]\"\n          git commit -m \"Updated README\" -a || echo \"No changes to commit\"\n          git push\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks, Main]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - uses: BobAnkh/add-contributors@v0.2.2\n        with:\n          REPO_NAME: 'benbarth/hacktoberfest-swag'\n          CONTRIBUTOR: '## Contributors \u2728'\n          ACCESS_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          IGNORED_CONTRIBUTORS: 'Ben Barth,Sascha Greuel,Chandler Weiner'\n```"}
{"id": "63c49f6eb008460c1df4db9b", "level": "level1", "llm_response": " ```yaml\nname: docs\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Deploy to Documentation\n        run: ./deploy-docs.sh\n```", "answer": "```yaml name: docs\non:\n  push:\n    branches:\n      - master\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a10f1e336480757bde95", "level": "level1", "llm_response": " ```yaml\nname: test\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Nim\n      uses: nim-actions/setup-nim@v1\n\n    - name: Run tests\n      run: nim test\n```", "answer": "```yaml name: test\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os:\n          - ubuntu-22.04\n          # - windows-latest\n          # - macOS-latest\n        nim:\n          - '1.6.0'\n          - '1.6.x'\n          - 'stable'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jiro4989/setup-nim-action@v1\n        with:\n          nim-version: ${{ matrix.nim }}\n      - run: nimble install -Y\n      - name: Setup dependencies\n        run: |\n          sudo apt update -y\n          sudo apt install -y libgtk-4-dev\n      - name: Setup config.nims\n        run: |\n          # For referencing latest source code\n          echo 'switch(\"path\", \"$projectDir/..\")' > examples/config.nims\n      - run: nimble examples\n```"}
{"id": "63c49ebb736e7f0ed8c69a9f", "level": "level1", "llm_response": " ```yaml\nname: Build-images\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'images/linkerd-Dockerfile'\n      - '.github/workflows/container-images.yml'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go environment\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n\n      - name: Build Docker image\n        run: |\n          docker build -t my-go-app:latest .\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: Build-images\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'images/linkerd-Dockerfile'\n    - '.github/workflows/container-images.yml' # in case we change the versions below\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.CFCIBOT_DOCKERHUB_USERNAME }}\n          password: ${{ secrets.CFCIBOT_DOCKERHUB_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Build linkerd\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          file: images/linkerd-Dockerfile\n          tags: splatform/epinio-linkerd:2.11.1\n          build-args: |\n            LINKERD_VERSION=stable-2.11.1\n            LINKERD_CHECKSUM=96c08570b6f6ad40ef1e6aa970959c9c5541e36c85477ee9843b85b8fdcc54ea\n            KUBECTL_VERSION=v1.23.0\n            KUBECTL_CHECKSUM=2d0f5ba6faa787878b642c151ccb2c3390ce4c1e6c8e2b59568b3869ba407c4f\n```"}
{"id": "63c495138052faa2781af503", "level": "level1", "llm_response": " ```yaml\nname: Go Workflow\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch:\n\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch: # Enables on-demand/manual triggering\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n      - run: |\n          go get github.com/aws/aws-sdk-go\n          go mod tidy\n          cd tools/provider-schema\n          terraform init -upgrade\n          terraform providers schema -json > schema.json\n          cd ../..\n          git submodule update --remote\n          go generate ./...\n      - uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: |\n            autogenerated maintenance\n          title: autogenerated maintenance\n          delete-branch: true\n          body: |\n            If tests are stuck on https://github.com/peter-evans/create-pull-request/issues/48:\n            [\"Manually close pull requests and immediately reopen them. This will enable `on: pull_request` workflows to run and be added as checks.\"](https://github.com/peter-evans/create-pull-request/blob/master/docs/concepts-guidelines.md#triggering-further-workflow-runs)\n```"}
{"id": "63c49f7d1899db588650d6be", "level": "level1", "llm_response": " ```yaml\nname: size\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install TypeScript\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run size analysis\n        run: npx size-ts-report\n\n      - name: Upload size report\n        uses: actions/upload-artifact@v2\n        with:\n          name: size-report\n          path: './size-report.json'\n```", "answer": "```yaml name: 'size'\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f6a1842bc13d7796f76", "level": "level1", "llm_response": " ```yaml\nname: Invalidations\non: [pull_request]\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  evaluate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      - name: Evaluate Invalidation\n        run: julia --project=@./. --eval 'using Pkg; Pkg.instantiate();'\n```", "answer": "```yaml name: Invalidations\n\non:\n  pull_request:\n\nconcurrency:\n  # Skip intermediate builds: always.\n  # Cancel intermediate builds: always.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  evaluate:\n    # Only run on PRs to the default branch.\n    # In the PR trigger above branches can be specified only explicitly whereas this check should work for master, main, or any other default branch\n    if: github.base_ref == github.event.repository.default_branch\n    runs-on: ubuntu-latest\n    steps:\n    - uses: julia-actions/setup-julia@v1\n      with:\n        version: '1'\n    - uses: actions/checkout@v3\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_pr\n\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.repository.default_branch }}\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_default\n    \n    - name: Report invalidation counts\n      run: |\n        echo \"Invalidations on default branch: ${{ steps.invs_default.outputs.total }} (${{ steps.invs_default.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n        echo \"This branch: ${{ steps.invs_pr.outputs.total }} (${{ steps.invs_pr.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n    - name: Check if the PR does increase number of invalidations\n      if: steps.invs_pr.outputs.total > steps.invs_default.outputs.total\n      run: exit 1\n```"}
{"id": "63c4944f7843b61269a005f4", "level": "level1", "llm_response": " ```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  create-github-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Create GitHub Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./path/to/your/artifact.zip\n          asset_name: artifact.zip\n          asset_content_type: application/zip\n```\nThis YAML file defines a GitHub Actions workflow named `Release GitHub` that triggers on push events to branches matching `release/*`. It includes a job named `create-github-release` with steps to checkout the repository, set up Node.js, install dependencies, create a GitHub release, and upload an asset to the release. The workflow assumes that the TypeScript project is using npm as its package manager. Adjust the `asset_path` to point to the correct location of the artifact you wish to upload.", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e016fc19abdf9ccce72", "level": "level1", "llm_response": " ```yaml\nname: ci\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    repo: <repository_name>\n  pull_request:\n    branches: [ main ]\n\nenv:\n  CI: 'true'\n  PGHOST: 'localhost'\n  PGPORT: '5432'\n  PGUSER: 'postgres'\n  PGPASSWORD: 'postgres'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up PostgreSQL\n        uses: dwmkerr/setup-postgresql@v2\n        with:\n          postgresql-version: '12'\n      - name: Run tests\n        run: |\n          psql -c 'CREATE EXTENSION plpgsql;'\n          # Add additional test commands here\n```\n\nPlease replace `<repository_name>` with the actual name of the GitHub repository. Additionally, you may need to adjust the PostgreSQL version or add more specific test commands according to your project's requirements.", "answer": "```yaml name: ci\n\non: [push, pull_request]\n\nenv:\n  CI: true\n  PGHOST: localhost\n  PGPORT: 5432\n  PGUSER: postgres\n  PGPASSWORD: postgres\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: ${{ matrix.pg }}\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    strategy:\n      matrix:\n        pg: [\"postgres:9.5-alpine\", \"postgres:9.6-alpine\", \"postgres:10-alpine\", \"postgres:11-alpine\", \"postgres:12-alpine\", \"postgres:13-alpine\"]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run tests\n        run: |\n          make run_test\n\n      - name: Run tests no check\n        run: |\n          make run_test_nochecks\n```"}
{"id": "63c49bae6fc19abdf9cbe18c", "level": "level1", "llm_response": " ```yaml\nname: Python tests\n\non:\n  pull_request:\n    paths-ignore:\n      - '.github/workflows/python-tests.yaml'\n      - '**/*.py'\n      - 'requirements.txt'\n      - 'requirements-dev.txt'\n      - 'setup.cfg'\n      - 'Dockerfile'\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests-sqlite:\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    environment:\n      PY_COLORS: '1'\n    steps:\n      # Add steps for testing with SQLite here\n\n  run-tests-postgres:\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    environment:\n      PY_COLORS: '1'\n    steps:\n      # Add steps for testing with Postgres here\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n```", "answer": "```yaml name: Python tests\n\nenv:\n  # enable colored output\n  # https://github.com/pytest-dev/pytest/issues/7443\n  PY_COLORS: 1\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/python-tests.yaml\n      - \"**/*.py\"\n      - requirements.txt\n      - requirements-dev.txt\n      - setup.cfg\n      - Dockerfile\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\n# Limit concurrency by workflow/branch combination.\n#\n# For pull request builds, pushing additional changes to the\n# branch will cancel prior in-progress and pending builds.\n#\n# For builds triggered on a branch push, additional changes\n# will wait for prior builds to complete before starting.\n#\n# https://docs.github.com/en/actions/using-jobs/using-concurrency\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  run-tests-sqlite:\n    name: Test with SQLite\n\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n          - \"--only-services\"\n\n        include:\n          # Run 3.7 tests with lower bound pins\n          - python-version: \"3.7\"\n            lower-bound-requirements: true\n\n          # Include Docker image builds on the service test run, and disallow the test\n          # suite from building images automaticlly in fixtures\n          - pytest-options: \"--only-services\"\n            build-docker-images: true\n\n      fail-fast: false\n\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 45\n\n    steps:\n      - name: Display current test matrix\n        run: echo '${{ toJSON(matrix) }}'\n\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Set up Docker Buildx\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Pin requirements to lower bounds\n        if: ${{ matrix.lower-bound-requirements }}\n        # Creates lower bound files then replaces the input files so we can do a normal install\n        run: |\n          ./scripts/generate-lower-bounds.py requirements.txt > requirements-lower.txt\n          ./scripts/generate-lower-bounds.py requirements-dev.txt > requirements-dev-lower.txt\n          mv requirements-lower.txt requirements.txt\n          mv requirements-dev-lower.txt requirements-dev.txt\n\n      - name: Build test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          # TODO: We do not need the UI in these tests and we may want to add a build-arg to disable building it\n          #       so that CI test runs are faster\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}\n          outputs: type=docker,dest=/tmp/image.tar\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Test Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }} prefect version\n\n      - name: Build Conda flavored test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            BASE_IMAGE=prefect-conda\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}-conda\n          outputs: type=docker,dest=/tmp/image-conda.tar\n          cache-from: type=gha\n          # We do not cache Conda image layers because they very big and slow to upload\n          # cache-to: type=gha,mode=max\n\n      - name: Test Conda flavored Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image-conda.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda prefect version\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda conda --version\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          # If using not using lower bounds, upgrade eagerly to get the latest versions despite caching\n          pip install ${{ ! matrix.lower-bound-requirements && '--upgrade --upgrade-strategy eager' || ''}} -e .[dev]\n\n      - name: Run tests\n        run: |\n          # Parallelize tests by scope to reduce expensive service fixture duplication\n          # Do not allow the test suite to build images, as we want the prebuilt images to be tested\n          # Do not run Kubernetes service tests, we do not have a cluster available\n          pytest tests --numprocesses auto --dist loadscope --disable-docker-image-builds --exclude-service kubernetes --durations=25 ${{ matrix.pytest-options }}\n\n  run-tests-postgres:\n    name: Test with Postgres\n\n    strategy:\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n\n      fail-fast: false\n\n    runs-on: ubuntu-latest\n\n    # TODO: Consider moving this from a service into a normal docker command\n    #       so we can include it in the sqlite python test matrix instead of\n    #       maintaining a separate workflow\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: prefect\n          POSTGRES_PASSWORD: prefect\n          POSTGRES_DB: orion\n          LANG: 'C.UTF-8'\n          LANGUAGE: 'C.UTF-8'\n          LC_ALL: 'C.UTF-8'\n          LC_COLLATE: 'C.UTF-8'\n          LC_CTYPE: 'C.UTF-8'\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    timeout-minutes: 30\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade --upgrade-strategy eager -e .[dev]\n\n      - name: Run tests\n        env:\n          PREFECT_ORION_DATABASE_CONNECTION_URL: \"postgresql+asyncpg://prefect:prefect@localhost/orion\"\n        run: |\n          pytest tests --numprocesses auto --dist loadscope ${{ matrix.pytest-options }}\n```"}
{"id": "63c49f811899db588650d878", "level": "level1", "llm_response": " ```yaml\nname: coverity-scan\n\non:\n  schedule:\n    - cron: '0 0 * * *'  # Runs at 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  coverity-linux:\n    runs-on: ubuntu-latest\n    environment:\n      name: coverity-scan\n      variables:\n        TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n        EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n        SHA1: ${{ github.sha }}\n        FILE: exult-ubuntu-gcc.tgz\n        PROJ: exult/exult\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Coverity Scan\n        uses: coverity/coverity-scan-action@v1\n        with:\n          token: ${{ secrets.COVERITY_SCAN_TOKEN }}\n          email: ${{ secrets.COVERITY_SCAN_EMAIL }}\n          file: ${{ github.sha }}\n          project: exult/exult\n```", "answer": "```yaml name: coverity-scan\n\non:\n  schedule:\n    - cron: \"0 00 * * *\" # Daily at 00:00 UTC\n  workflow_dispatch:\n\nenv:\n  TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n  EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n  SHA1: ${{ github.sha }}\n  FILE: exult-ubuntu-gcc.tgz\n  PROJ: exult/exult\n\njobs:\n  coverity-linux:\n    if: ${{ github.repository_owner == 'exult' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Activity check\n        run: |\n          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')\n          TIMESTAMP=$(date --utc -d \"$DATEUTC\" +%s)\n          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))\n          if [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n          else\n            if [ $DAYS -gt 0 ]; then\n              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV\n            else\n              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n            fi\n          fi\n      - name: Install dependencies\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          sudo apt-fast update\n          sudo apt-fast install -y \\\n          zlib1g-dev libogg-dev libvorbis-dev libasound2-dev libfluidsynth-dev libsdl2-dev libpng-dev libfreetype6-dev libgtk2.0-dev libgtk-3-dev \\\n          libgdk-pixbuf2.0-dev libxml2-dev bison flex timidity libgimp2.0-dev\n      - name: Download Coverity Build Tool\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          wget -q https://scan.coverity.com/download/Linux --post-data \"token=$TOKEN&project=$PROJ\" -O /tmp/cov-analysis-linux64.tar.gz\n          mkdir /tmp/cov-analysis-linux64\n          tar xzf /tmp/cov-analysis-linux64.tar.gz --strip 1 -C /tmp/cov-analysis-linux64\n      - name: Checkout code\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        uses: actions/checkout@master\n      - name: Run autogen\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          chmod a+x ./autogen.sh\n          ./autogen.sh\n      - name: Configure\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          ./configure --with-debug=extreme --enable-exult-studio --enable-exult-studio-support --enable-compiler --enable-gimp-plugin \\\n            --enable-zip-support --enable-shared --enable-midi-sfx --enable-gnome-shp-thumbnailer --enable-data --enable-mods \\\n            --with-usecode-debugger=yes --enable-usecode-container --enable-nonreadied-objects --disable-oggtest --disable-vorbistest\n      - name: Build with cov-build\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          export PATH=/tmp/cov-analysis-linux64/bin:$PATH\n          cov-build --dir cov-int make -j2\n      - name: Submit the result to Coverity Scan\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          tar czvf $FILE cov-int\n          curl \\\n            --form project=$PROJ \\\n            --form token=$TOKEN \\\n            --form email=$EMAIL \\\n            --form file=@$FILE \\\n            --form version=master \\\n            --form description=\"$SHA1\" \\\n            https://scan.coverity.com/builds?project=$PROJ\n```"}
{"id": "63c497456fc19abdf9ca17c3", "level": "level1", "llm_response": " ```yaml\nname: Update Baselines\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Update Baselines\n        run: |\n          # Insert Bicep commands here to update baselines\n          echo \"Updating baselines using Bicep...\"\n          # Example Bicep command to apply changes\n          az deployment group create --resource-group myResourceGroup --template-file baselines.bicep --parameters baselines.parameters.json\n```", "answer": "```yaml name: Update Baselines\n# This action can be run on-demand against a branch.\n# It attempts to update the baseline files, and commits and pushes changes if there are any.\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    name: Update Baselines\n    runs-on: ubuntu-latest\n\n    env:\n      # don't print dotnet logo\n      DOTNET_NOLOGO: true\n\n      # disable telemetry (reduces dotnet tool output in logs)\n      DOTNET_CLI_TELEMETRY_OPTOUT: true\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n      \n      - name: Test\n        continue-on-error: true\n        run: dotnet test --filter \"TestCategory=Baseline\" -- 'TestRunParameters.Parameter(name=\"SetBaseLine\", value=\"true\")'\n      \n      - name: Commit baselines\n        run: |\n          git config --global user.email \"bicep@noreply.github.com\"\n          git config --global user.name \"Bicep Automation\"\n\n          git add .\n\n          if ! git diff-index --quiet HEAD --; then\n            git commit -m \"Update test baselines\"\n            git push\n          fi```"}
{"id": "63c496821e3364807577b179", "level": "level1", "llm_response": " ```yaml\nname: Build documentation\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  build-documentation:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build documentation\n        run: mvn clean install javadoc:javadoc\n\n      - name: Upload documentation\n        uses: actions/upload-artifact@v2\n        with:\n          name: 'documentation'\n          path: 'target/site/apidocs'\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Build documentation\"\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *' # Deploy every day\n\njobs:\n  build-documentation:\n    if: github.repository == 'apache/flink-table-store'\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 1\n      matrix:\n        branch:\n          - master\n          - release-0.2\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ matrix.branch }}\n      - name: Set branch environment variable\n        run: |\n          currentBranch=$(git branch --show-current)\n\n          echo \"flink_table_store_branch=${currentBranch}\" >> ${GITHUB_ENV}\n\n          if [ \"${currentBranch}\" = \"master\" ]; then\n            echo \"flink_table_store_alias=release-0.3\" >> ${GITHUB_ENV}\n          elif [ \"${currentBranch}\" = \"release-0.2\" ]; then\n            echo \"flink_table_store_alias=stable\" >> ${GITHUB_ENV}\n          fi\n      - name: Build documentation\n        run: |\n          docker run  --rm --volume \"$PWD:/root/flink-table-store\" chesnay/flink-ci:java_8_11 bash -c \"cd /root/flink-table-store && ./.github/workflows/docs.sh\"\n      - name: Upload documentation\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_branch }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n      - name: Upload documentation alias\n        if: env.flink_table_store_alias != ''\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_alias }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n```"}
{"id": "63c4985d517fc08c1eedd0a3", "level": "level1", "llm_response": " ```yaml\nname: Arc PR e2e tests\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Run e2e tests\n      run: npm run test:e2e\n    - name: Upload test results\n      uses: actions/upload-artifact@v2\n      with:\n        name: e2e-test-results\n        path: path/to/test/results\n```", "answer": "```yaml name: 'Arc PR e2e tests'\n\ndefaults:\n  run:\n    working-directory: src/neo4j-arc\n\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - run: npm -g install yarn\n      - run: yarn install --frozen-lockfile\n      - run: yarn test\n      - run: yarn build\n```"}
{"id": "63c498e633b087f6bde3bc16", "level": "level1", "llm_response": " ```yaml\nname: Ruby Gem\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.7'\n\n      - name: Install dependencies\n        run: bundle install\n\n      - name: Build gem\n        run: bundle exec rake build\n\n      - name: Publish gem to RubyGems\n        env:\n          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}\n        run: bundle exec rake gem:publish\n```", "answer": "```yaml name: Ruby Gem\n\non:\n  push:\n    branches: [ \"master\" ]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1.117.0\n      with:\n        ruby-version: 3.1.2\n\n    - name: Publish a pre package to GitHub Packages\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:github: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        sed -i -e \"/^\\s*VERSION = .*pre/ s/pre/pre.$(date +%Y%m%d.%H%M).$(git rev-parse --short HEAD)/\" lib/geminabox/version.rb\n        gem build *.gemspec\n        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n      env:\n        GEM_HOST_API_KEY: \"Bearer ${{secrets.GITHUB_TOKEN}}\"\n        OWNER: ${{ github.repository_owner }}\n```"}
{"id": "63c497b033b087f6bde3409c", "level": "level1", "llm_response": " ```yaml\nname: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++ environment\n        uses: actions/setup-cpp@v1\n\n      - name: Build project\n        run: cmake . && make\n\n      - name: Run tests\n        run: make test\n```", "answer": "```yaml name: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container:\n      image: grumpycoders/pcsx-redux-build:latest\n      env:\n        TEST_RESULTS: /tmp/test-results\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          set-safe-directory: true\n      - uses: n1hility/cancel-previous-runs@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - run: |\n          make -j 2 all pcsx-redux-tests\n          make -C src/mips/tests -j 2 PCSX_TESTS=true\n          make -C src/mips/openbios -j 2 clean all\n      - name: Packaging\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          make install install-openbios DESTDIR=AppDir/usr\n          echo '{' > AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"version\": \"'`git rev-parse HEAD | cut -c 1-8`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"changeset\": \"'`git rev-parse HEAD`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"timestamp\": '`date '+%s'`',' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"updateInfo\": [' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    {' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"method\": \"appcenter\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateCatalog\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/public_releases\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateInfoBase\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/releases/\"' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    }' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  ]' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '}' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          appimage-builder --skip-tests\n      - name: Test\n        run: |\n          export GTEST_OUTPUT=xml:${TEST_RESULTS}/\n          mkdir -p $TEST_RESULTS\n          xvfb-run catchsegv ./pcsx-redux-tests\n      - name: Deploy\n        if: github.event_name == 'push'\n        env:\n          APPCENTER_ACCESS_TOKEN: ${{ secrets.LINUX_APPCENTER_ACCESS_TOKEN }}\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          export BUILD=`git rev-parse HEAD | cut -c 1-8`\n          . /usr/local/nvm/nvm.sh\n          zip PCSX-Redux-$BUILD-linux-x86_64.zip *.AppImage\n          appcenter distribute release -b $BUILD -f PCSX-Redux-$BUILD-linux-x86_64.zip -g public -a grumpycoders/pcsx-redux-linux64 --disable-telemetry\n```"}
{"id": "63c49c6d1e336480757a0cf3", "level": "level1", "llm_response": " ```yaml\nname: Verify PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    permissions:\n      checks: 'write'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Verify PR contents\n        run: |\n          # Add your Go verification logic here\n          echo \"Verifying PR contents...\"\n          # Example: Run a Go test or a custom verification script\n          go test ./...\n          # Or run a custom verification script\n          ./verify_pr_contents.sh\n```", "answer": "```yaml name: Verify PR\n\non:\n  pull_request_target:\n    types: [opened, edited, synchronize, reopened]\n\npermissions:\n  checks: write # Allow access to checks to write check runs.\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    name: Verify PR contents\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: kubernetes-sigs/kubebuilder-release-tools@v0.2.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f766fc19abdf9cd6487", "level": "level1", "llm_response": " ```yaml\nname: Version Bump\n\non:\n  workflow_dispatch:\n\njobs:\n  version_bump_and_changie:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Bump version\n      env:\n        VERSION_NUMBER: ${{ github.event.inputs.version_number }}\n      run: |\n        python bump_version.py $VERSION_NUMBER\n\n    - name: Commit version bump\n      run: |\n        git config --local user.email \"action[bot]\"\n        git config --local user.name \"GitHub Action\"\n        git add CHANGELOG.md\n        git commit -m \"Bump version to ${{ env.VERSION_NUMBER }}\"\n        git push\n\n    - name: Notify release\n      uses: actions/github-script@v4\n      if: github.ref == 'refs/heads/main'\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          github.repos.createOrUpdatePrerelease({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            tag_name: `${context.payload.ref.split('/')[1]}-${{ env.VERSION_NUMBER }}`,\n            draft: true\n          })\n```\n\nThis YAML file defines a GitHub Actions workflow named `Version Bump` that is triggered manually via the `workflow_dispatch` event. The workflow includes a job named `version_bump_and_changie` that runs on the latest Ubuntu runner and supports multiple Python versions. The job consists of steps for checking out the code, setting up Python, installing dependencies, bumping the version number using a hypothetical `bump_version.py` script, committing the version bump, and notifying a release on GitHub. The `VERSION_NUMBER` is an input parameter provided by the user when the workflow is triggered.", "answer": "```yaml # **what?**\n# This workflow will take the new version number to bump to. With that\n# it will run versionbump to update the version number everywhere in the\n# code base and then run changie to create the corresponding changelog.\n# A PR will be created with the changes that can be reviewed before committing.\n\n# **why?**\n# This is to aid in releasing dbt and making sure we have updated\n# the version in all places and generated the changelog.\n\n# **when?**\n# This is triggered manually\n\nname: Version Bump\n\non:\n  workflow_dispatch:\n    inputs:\n      version_number:\n       description: 'The version number to bump to (ex. 1.2.0, 1.3.0b1)'\n       required: true\n\njobs:\n  version_bump_and_changie:\n    uses: dbt-labs/actions/.github/workflows/version-bump.yml@main\n    with:\n      version_number: ${{ inputs.version_number }}\n    secrets: inherit  # ok since what we are calling is internally maintained\n```"}
{"id": "63c49f961842bc13d779807d", "level": "level1", "llm_response": " ```yaml\nname: Sync wgcf latest version\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 2 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Sync wgcf latest version\n        run: |\n          # Add commands to sync the latest version of wgcf\n          # Example: git pull origin master\n          echo \"Syncing the latest version of wgcf\"\n          # Add additional shell commands as needed\n```", "answer": "```yaml name: Sync wgcf latest version\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '3 2 * * *'\n\njobs:\n  build:\n    name: Sync wgcf latest version\n    runs-on: ubuntu-latest\n    env:\n      USERNAME: ${{ secrets.GH_USERNAME }}\n      EMAIL: ${{ secrets.GH_EMAIL }}\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - name: Update wgcf to latest version\n        run: |\n          NOW=$(wget -qO- https://raw.githubusercontent.com/${{ env.USERNAME }}/warp/main/menu.sh | grep 'latest=${latest' | cut -d \\' -f2)\n          LATEST=$(wget -qO- \"https://api.github.com/repos/ViRb3/wgcf/releases/latest\" | grep \"tag_name\" | head -n 1 | cut -d : -f2 | sed 's/[ \\\"v,]//g')\n          NOW1=$(echo $NOW | cut -d \\. -f1)\n          NOW2=$(echo $NOW | cut -d \\. -f2)\n          NOW3=$(echo $NOW | cut -d \\. -f3)\n          LATEST1=$(echo $LATEST | cut -d \\. -f1)\n          LATEST2=$(echo $LATEST | cut -d \\. -f2)\n          LATEST3=$(echo $LATEST | cut -d \\. -f3)\n          NOW_VERSION=$(( NOW1*1000000 + NOW2*1000 + NOW3 ))\n          LATEST_VERSION=$(( LATEST1*1000000 + LATEST2*1000 + LATEST3 ))\n          if [ $LATEST_VERSION -gt $NOW_VERSION ]; then\n            PLATFORM=(  \"darwin_amd64\"\n                        \"darwin_arm64\"\n                        \"linux_386\"\n                        \"linux_amd64\"\n                        \"linux_arm64\"\n                        \"linux_386\"\n                        \"linux_s390x\"\n                        \"windows_386.exe\"\n                        \"windows_amd64.exe\"\n                      )\n                    \n            SCRIPTS=( \"docker.sh\"\n                      \"menu.sh\"\n                      \"pc/mac.sh\"\n                    )\n            \n            for i in \"${PLATFORM[@]}\"; do\n              wget -NP ${GITHUB_WORKSPACE}/wgcf/ https://github.com/ViRb3/wgcf/releases/download/v\"$LATEST\"/wgcf_\"$LATEST\"_\"$i\"\n              rm -f ${GITHUB_WORKSPACE}/wgcf/wgcf_\"$NOW\"_\"$i\"\n            done\n            \n            for j in \"${SCRIPTS[@]}\"; do\n              sed -i \"s/$NOW/$LATEST/g\" ${GITHUB_WORKSPACE}/$j\n            done\n            \n            echo \"VERSION=$LATEST\" >> $GITHUB_ENV\n          fi\n          \n      - name: Upload to REPO\n        if: ${{ env.VERSION != '' }}\n        run: |\n          git config --global user.email \"${{ env.EMAIL }}\"\n          git config --global user.name \"${{ env.USERNAME }}\"\n          git add .\n          git commit -m \"Sync WGCF to V${{ env.VERSION }} by Github Actions, $(date \"+%Y/%m/%d %H:%M:%S\")\"\n          git push\n\n```"}
{"id": "63c49947cbc73931bb18c954", "level": "level1", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run linter\n        run: npx eslint .\n\n      - name: Build project\n        run: npx tsc\n\n      - name: Publish artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: ./dist\n\n      - name: Test\n        run: npm test\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    name: Lint and Build\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - run: yarn lint\n      - run: yarn tsc\n      - run: yarn build:only\n```"}
{"id": "63c49d68b008460c1df40d8b", "level": "level1", "llm_response": " ```yaml\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup CentOS Latest\n        uses: actions/setup-centos@v2\n        with:\n          centos-version: latest\n\n      - name: Install C++ Compiler\n        run: sudo yum install -y gcc-c++\n\n      - name: Build C++ Project\n        run: make all\n\n      - name: Run Tests\n        run: make test\n\n      - name: Upload Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: ./test-results\n```", "answer": "```yaml # Copyright 2020-2022 Alibaba Group Holding Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    container:\n      image: centos:latest\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n    steps:\n      - name: Get time\n        run: |\n          date +'%Y-%m' > snapshot.txt\n      - name: Install dependencies for Linux\n        run: |\n          # switch to centos stream\n          dnf -y --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos\n          dnf -y update\n          yum -y install sudo\n\n          # install required dependencies\n          sudo yum -y group install \"Development Tools\"\n          sudo yum -y install boost-devel \\\n                              cmake \\\n                              git \\\n                              brotli-devel \\\n                              bzip2-devel \\\n                              curl \\\n                              lz4-devel \\\n                              m4 \\\n                              make \\\n                              autoconf \\\n                              automake \\\n                              openmpi-devel \\\n                              librdkafka \\\n                              snappy \\\n                              pkgconf \\\n                              zlib-devel \\\n                              libzstd-devel \\\n                              python3-devel \\\n                              python3-pip \\\n                              openssl-devel \\\n                              wget\n\n          # install python packages for codegen\n          sudo pip3 install -U pip\n          sudo pip3 install libclang parsec setuptools wheel twine\n\n      # the checkout action require new version of git\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: |\n          echo \"Installing gflags ...\"\n          cd /tmp\n          curl -L https://github.com/gflags/gflags/archive/v2.2.2.tar.gz --output gflags-v2.2.2.tar.gz\n          tar zxf gflags-v2.2.2.tar.gz\n          cd gflags-2.2.2\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON\n          sudo make install -j`nproc`\n\n          echo \"Installing glog ...\"\n          cd /tmp\n          curl -L https://github.com/google/glog/archive/v0.5.0.tar.gz --output glog-v0.5.0.tar.gz\n          tar zxf glog-v0.5.0.tar.gz\n          cd glog-0.5.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_TESTING=OFF\n          sudo make install -j`nproc`\n\n          echo \"Installing apache-arrow ...\"\n          cd /tmp\n          wget https://github.com/apache/arrow/archive/refs/tags/apache-arrow-8.0.0.tar.gz\n          tar zxf apache-arrow-8.0.0.tar.gz\n          cd arrow-apache-arrow-8.0.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake ../cpp \\\n              -DARROW_COMPUTE=ON \\\n              -DARROW_WITH_UTF8PROC=ON \\\n              -DARROW_CSV=ON \\\n              -DARROW_CUDA=OFF \\\n              -DARROW_DATASET=OFF \\\n              -DARROW_FILESYSTEM=ON \\\n              -DARROW_FLIGHT=OFF \\\n              -DARROW_GANDIVA=OFF \\\n              -DARROW_GANDIVA_JAVA=OFF \\\n              -DARROW_HDFS=OFF \\\n              -DARROW_HIVESERVER2=OFF \\\n              -DARROW_JSON=OFF \\\n              -DARROW_ORC=OFF \\\n              -DARROW_PARQUET=OFF \\\n              -DARROW_PLASMA=OFF \\\n              -DARROW_PLASMA_JAVA_CLIENT=OFF \\\n              -DARROW_PYTHON=OFF \\\n              -DARROW_S3=OFF \\\n              -DARROW_WITH_BZ2=OFF \\\n              -DARROW_WITH_ZLIB=OFF \\\n              -DARROW_WITH_LZ4=OFF \\\n              -DARROW_WITH_SNAPPY=OFF \\\n              -DARROW_WITH_ZSTD=OFF \\\n              -DARROW_WITH_BROTLI=OFF \\\n              -DARROW_IPC=ON \\\n              -DARROW_BUILD_BENCHMARKS=OFF \\\n              -DARROW_BUILD_EXAMPLES=OFF \\\n              -DARROW_BUILD_INTEGRATION=OFF \\\n              -DARROW_BUILD_UTILITIES=OFF \\\n              -DARROW_BUILD_TESTS=OFF \\\n              -DARROW_ENABLE_TIMING_TESTS=OFF \\\n              -DARROW_FUZZING=OFF \\\n              -DARROW_USE_ASAN=OFF \\\n              -DARROW_USE_TSAN=OFF \\\n              -DARROW_USE_UBSAN=OFF \\\n              -DARROW_JEMALLOC=OFF \\\n              -DARROW_BUILD_SHARED=ON \\\n              -DARROW_BUILD_STATIC=OFF\n          sudo make install -j`nproc`\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: |\n          cd /tmp\n          git clone https://github.com/grpc/grpc.git --depth 1 --branch v1.46.x\n          cd grpc/\n          git submodule update --init\n          mkdir cmake-build\n          cd cmake-build/\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n            -DgRPC_INSTALL=ON \\\n            -DgRPC_BUILD_TESTS=OFF \\\n            -DgRPC_BUILD_CSHARP_EXT=OFF \\\n            -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n            -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \\\n            -DgRPC_ZLIB_PROVIDER=package \\\n            -DgRPC_SSL_PROVIDER=package\n          sudo make install -j`nproc`\n\n      - name: Install libgrape-lite\n        run: |\n          # leverage ccache\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n\n          git clone https://github.com/alibaba/libgrape-lite.git --depth=1\n          cd libgrape-lite\n          mkdir build\n          cd build\n          cmake ..\n          make -j`nproc`\n          sudo make install\n\n      - name: Setup tmate session\n        if: false\n        uses: mxschmitt/action-tmate@v2\n\n      - name: CMake\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          mkdir build\n          cd build\n          cmake .. -DCMAKE_BUILD_TYPE=Release \\\n                   -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_VINEYARD_COVERAGE=ON \\\n                   -DBUILD_VINEYARD_PYTHON_BINDINGS=ON \\\n                   -DBUILD_VINEYARD_BASIC=ON \\\n                   -DBUILD_VINEYARD_IO=ON \\\n                   -DBUILD_VINEYARD_IO_KAFKA=ON \\\n                   -DBUILD_VINEYARD_HOSSEINMOEIN_DATAFRAME=ON \\\n                   -DBUILD_VINEYARD_TESTS=ON\n\n      - name: Build\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          pushd build\n          make -j`nproc`\n          make vineyard_tests -j`nproc`\n          make vineyard_client_python -j`nproc`\n          sudo make install\n          popd\n```"}
{"id": "63c49b1b33b087f6bde49f07", "level": "level1", "llm_response": " ```yaml\nname: TagBot\non:\n  schedule:\n    - cron: '0 * * * *' # Runs every hour\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Julia Setup\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: '1.x'\n      - name: Install Dependencies\n        run: |\n          julia --project=@. -e 'using Pkg; Pkg.instantiate()'\n      - name: Tag Commit\n        run: |\n          julia --project=@. -e 'using LibGit2;\n            repo = LibGit2.GitRepo(\"$(github.repository)\")\n            tag = \"v$(Base.time())\"\n            LibGit2.commit!(repo, tag, \"Automatic Tag Commit\")'\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 * * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49bc7cbc73931bb19c883", "level": "level1", "llm_response": " ```yaml\nname: Build Docker Image\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Kotlin\n        uses: gradle/kotlin-setup-action@v1\n\n      - name: Build Docker image\n        run: ./gradlew dockerBuild\n```", "answer": "```yaml name: Build Docker Image\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    if: github.repository == 'hectorqin/reader'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: hectorqin/reader-basic\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        snapshot: true\n        tags: \"test\"\n```"}
{"id": "63c498e31e3364807578a839", "level": "level1", "llm_response": " ```yaml\nname: create-index\non:\n  push:\n    branches:\n      - master\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Create Index File\n        run: echo '<!DOCTYPE html><html><head><title>Index Page</title></head><body><h1>Welcome to the Index Page</h1></body></html>' > index.html\n```", "answer": "```yaml name: create-index\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  update:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        \n      - name: update\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        run: |\n          sed -i '/<!-- marker -->/,$ d' README.md\n        \n          (\n          echo '<!-- marker -->'\n          \n          for directory in cheat-sheet examples; do\n            oldgroup=\n            printf \"\\n## %s Index\\n\\n\" $(echo \"$directory\" | sed -e \"s/\\b\\(.\\)/\\u\\1/g\")\n\n            while IFS=/ read -r dot group file; do\n              name=\"$(basename \"$file\" .md)\"\n\n              if [ \"$oldgroup\" != \"$group\" ]; then\n                echo \"<br/><span class='group'><b>$group</b></span>\"\n                oldgroup=\"$group\"\n              fi\n\n              echo \" | <a class='topic' href='https://lzone.de/$directory/$name'>$name</a>\"\n            done < <(cd $directory/ && find . -name \"*.md\" | sort)\n          done\n          ) >>README.md\n          \n          git config user.email \"noreply@example.com\"\n          git config user.name \"Create Index Workflow\"\n          git commit -m \"Update index.\" README.md || exit 0\n          git push\n```"}
{"id": "63c499146fc19abdf9cad631", "level": "level1", "llm_response": " ```yaml\nname: Publish\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Use Node.js 14\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install TypeScript\n      run: npm install -g typescript\n\n    - name: Compile TypeScript\n      run: tsc\n\n    - name: Run tests\n      run: npm test\n\n    - name: Publish artifacts\n      if: github.ref == 'refs/heads/main'\n      run: |\n        echo \"Publishing artifacts...\"\n        # Add commands to publish artifacts here\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish --access public\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49ebf33b087f6bde61b74", "level": "level1", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [opened, edited, labeled, unlabeled]\n  schedule:\n    - cron: '0/5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n      issues: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Modify GITHUB_TOKEN permissions\n      run: |\n        echo \"::set-output name=github_token_permissions::write\"\n\n    - name: Use modified GITHUB_TOKEN\n      uses: actions/github-script@v6\n      with:\n        script: |\n          github.context.github.token = process.env.GITHUB_TOKEN\n          github.context.github.repo.permissions = {\n            contents: 'read',\n            pullRequests: 'write',\n            issues: 'write'\n          }\n```", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\n# By specifying the access of one of the scopes, all of those that are not\n# specified are set to 'none'.\npermissions:\n  issues: write\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@9bb0a4b5e6a45046f00353d5de7d90fb8bd773bb\n        with:\n          token: ${{ github.token }}\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Without additional information we're not able to resolve this issue,\n            so it will be closed at this time. You're still free to add more info\n            and respond to any questions above, though. We'll reopen the case\n            if you do. Thanks for your contribution!\n          # Number of days of inactivity before an issue is closed for lack of response.\n          daysUntilClose: 21\n          # Label requiring a response.\n          responseRequiredLabel: \"waiting for customer response\"\n```"}
{"id": "63c499806fc19abdf9cb01f0", "level": "level1", "llm_response": " ```yaml\nname: GH Pages\n\non:\n  release:\n    types: [published, draft, prereleased]\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build TypeScript project\n        run: npm run build\n\n      - name: Deploy GH Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dist\n```", "answer": "```yaml name: \"GH Pages\"\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    name: \"Deploy GH Pages\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - uses: bahmutov/npm-install@v1\n        with:\n          useRollingCache: true\n          install-command: yarn --frozen-lockfile\n\n      - name: \"Deploy storybook\"\n        run: yarn storybook:deploy --ci\n        env:\n          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e671842bc13d7790941", "level": "level1", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.8, 3.9, 3.10]\n    name: Python ${{ matrix.python }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python }}\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python: [\"3.6\", \"3.7\", \"3.8\", \"3.9\"]\n\n    name: Python ${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Setup poetry\n        uses: abatilo/actions-poetry@v2.1.6\n        with:\n          poetry-version: 1.1.12\n\n      - name: Configure poetry\n        run: poetry config virtualenvs.in-project true\n\n      - name: Install Python dependencies\n        run: poetry install\n\n      - run: poetry run jupyter nbextension install vega --py --sys-prefix\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - name: Lint TypeScript\n        run: yarn lint\n\n      - name: Build JavaScript\n        run: yarn build\n\n      - name: Run pytest\n        run: poetry run pytest vega\n```"}
{"id": "63c49a8d1e33648075794f60", "level": "level1", "llm_response": " ```yaml\nname: Push Tagged Container\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Cache Go modules\n      uses: actions/cache@v2\n      with:\n        path: |\n          ~/go/pkg/mod\n          ~/go/bin\n        key: ${{ runner.os }}-${{ hashFiles('**/go.mod') }}\n    - name: Run unit tests\n      run: go test ./...\n\n  container-image:\n    needs: unit-test\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Build container image\n      run: docker build -t my-go-app .\n    - name: Push container image to registry\n      uses: docker/login-action@v1\n      with:\n        registry: myregistry.com\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n      env:\n        DOCKER_IMAGE: my-go-app\n    - name: Push image\n      run: docker push my-go-app\n```\nPlease note that you should replace `my-go-app` with the actual name of your Go application and `myregistry.com` with your Docker registry. Also, ensure that `DOCKER_USERNAME` and `DOCKER_PASSWORD` are set in your repository's secrets.", "answer": "```yaml name: Push Tagged Container\non:\n  push:\n    tags:\n    - v*.*.*\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: setup go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.19.x\n\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: unit test\n      run: make test\n\n    - name: test build\n      run: make build\n\n  container-image:\n    runs-on: ubuntu-latest\n    needs: [unit-test]\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: get version tag\n      run: echo TAG_NAME=$(echo ${GITHUB_REF} | rev | cut -d\"/\" -f1 | rev) >> $GITHUB_ENV\n\n    - name: docker login\n      run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n\n    - name: docker build\n      run: make docker-build version=${TAG_NAME}\n\n    - name: docker push\n      run: make docker-push version=${TAG_NAME}\n```"}
{"id": "63c49fca1e336480757b60ef", "level": "level1", "llm_response": " ```yaml\nname: Greetings\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, labeled, unlabeled, assigned]\n  issues:\n    types: [opened, closed, reopened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Print greetings\n        run: echo \"Hello, welcome to the repository!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        pr-message:  'Hello @${{ github.actor }}, thank you for submitting a PR! We will review your changes and respond as soon as possible.'\n        issue-message: |\n          Hello @${{ github.actor }}, thank you for your interest in our work!\n          If this is a bug report, please provide your configuration and any screenshots that would assist troubleshooting, otherwise we can not help you.\n```"}
{"id": "63c497be6fc19abdf9ca490d", "level": "level1", "llm_response": " ```yaml\nname: LibraryBuild\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    paths:\n      - '**.cpp'\n      - '**.h'\n    types: [tagged, committed]\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, cleared]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        arduino-boards-fqbn: [uno:uno, nano:nano, mega:mega]\n    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Setup C++\n        uses: actions/setup-cpp@v1\n      - name: Compile examples\n        run: make examples\n      - name: Test compiling examples\n        run: make test\n```", "answer": "```yaml # LibraryBuild.yml\n# Github workflow script to test compile all examples of an Arduino library repository.\n#\n# Copyright (C) 2020  Armin Joachimsmeyer\n# https://github.com/ArminJo/Github-Actions\n#\n\n# This is the name of the workflow, visible on GitHub UI.\nname: LibraryBuild\non: [push, pull_request] # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request\n\njobs:\n  build:\n    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples\n\n    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.\n\n    env:\n      # Comma separated list without double quotes around the list. \n      REQUIRED_LIBRARIES: OSC,WiFiManager\n\n    strategy:\n      matrix:\n        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`\n        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the \"arduino-builder -dump-prefs\" command\n        #\n        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega\n        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native\"\n        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro\n        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8\n        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80\n        # You may add a suffix behind the fqbn with \"|\" to specify one board for e.g. different compile options like arduino:avr:uno|trace \n        #############################################################################################################\n        arduino-boards-fqbn:\n          - arduino:avr:uno\n          - arduino:avr:leonardo\n          - arduino:samd:nano_33_iot\n          - esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n          - esp32:esp32:featheresp32:FlashFreq=80\n\n        # Specify parameters for each board.\n        # Parameters can be: platform-url, sketches-exclude and examples-build-properties\n        # With sketches-exclude you may exclude specific examples for a board. Use a space separated list.\n        #############################################################################################################\n        include:\n          - arduino-boards-fqbn: arduino:avr:uno\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: arduino:avr:leonardo\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n          \n          - arduino-boards-fqbn: arduino:samd:nano_33_iot\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n            platform-url: https://arduino.esp8266.com/stable/package_esp8266com_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n            \n          - arduino-boards-fqbn: esp32:esp32:featheresp32:FlashFreq=80\n            platform-url: https://dl.espressif.com/dl/package_esp32_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n\n      # Do not cancel all jobs / architectures if one job fails\n      fail-fast: false\n\n    # This is the list of steps this job will run.\n    steps:\n\n      # First of all, we clone the repo using the `checkout` action.\n      - name: Checkout\n        uses: actions/checkout@master\n\n      - name: Compile all examples\n        uses: ArminJo/arduino-test-compile@v3\n        with:\n          arduino-board-fqbn: ${{ matrix.arduino-boards-fqbn }}\n          required-libraries: ${{ env.REQUIRED_LIBRARIES }}\n          platform-url: ${{ matrix.platform-url }}\n          sketches-exclude: ${{ matrix.sketches-exclude }}\n```"}
{"id": "63c498fe1899db58864e3ac1", "level": "level1", "llm_response": " ```yaml\nname: Cut Release\n\non:\n  workflow_dispatch:\n\njobs:\n  cut-release:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: cut-release\n      cancel-in-progress: true\n\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.15'\n\n    - name: Generate Release\n      run: |\n        echo \"Release tag: ${{ github.event.inputs.release_tag-it }}\"\n        echo \"Key ring: ${{ github.event.inputs.key_ring-it }}\"\n        echo \"Key name: ${{ github.event.inputs.key_name-it }}\"\n        # Add the command to generate the release here\n        # For example:\n        # go build -o release-binary ./cmd/release\n        # ./release-binary --release-tag ${{ github.event.inputs.release_tag-it }} --key-ring ${{ github.event.inputs.key_ring-it }} --key-name ${{ github.event.inputs.key_name-it }}\n\n    - name: Sign Release\n      run: |\n        # Add the command to sign the release here\n        # For example:\n        # cosign sign --key-ring ${{ github.event.inputs.key_ring-it }} --key ${{ github.event.inputs.key_name-it }} --release-tag ${{ github.event.inputs.release_tag-it }}\n\n    - name: Upload Release Asset\n      uses: actions/upload-release-asset@v1\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        upload_url: ${{ steps.create-release.outputs.upload_url }}\n        asset_path: ./path/to/release-binary\n        asset_name: release-binary\n        asset_content_type: application/octet-stream\n```\n\nPlease note that you'll need to replace the placeholder commands with the actual commands you use to generate and sign your release. The `path/to/release-binary` should be the path to the binary or file you want to upload as an asset of your release. The `GITHUB_TOKEN` is automatically created by GitHub and can be used to upload assets to a release.", "answer": "```yaml name: Cut Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_tag:\n        required: true\n        type: string\n        description: 'Release tag'\n      key_ring:\n        required: true\n        type: string\n        description: 'Key ring for cosign key'\n      key_name:\n        required: true\n        type: string\n        description: 'Key name for cosign key'\n\nconcurrency: cut-release\n\njobs:\n  cut-release:\n    name: Cut release\n    uses: sigstore/sigstore/.github/workflows/reusable-release.yml@main\n    permissions:\n      id-token: write\n      contents: read\n    with:\n      release_tag: ${{ github.event.inputs.release_tag }}\n      key_ring: ${{ github.event.inputs.key_ring }}\n      key_name: ${{ github.event.inputs.key_name }}\n      workload_identity_provider: 'projects/498091336538/locations/global/workloadIdentityPools/githubactions/providers/sigstore-rekor'\n      service_account: 'github-actions-rekor@projectsigstore.iam.gserviceaccount.com'\n      repo: 'rekor'\n```"}
{"id": "63c49d81736e7f0ed8c61ef8", "level": "level1", "llm_response": " ```yaml\nname: Jenkins Security Scan\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, synchronize, reopened]\n  workflow_dispatch:\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      actions: read\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Jenkins Security Scan\n        uses: some-jenkins-plugin/jenkins-action@v1\n        with:\n          # Additional Jenkins plugin configuration goes here\n          # For example:\n          # jenkins-server: ${{ secrets.JENKINS_SERVER }}\n          # username: ${{ secrets.JENKINS_USERNAME }}\n          # token: ${{ secrets.JENKINS_TOKEN }}\n          # job-name: 'security-scan'\n          # other plugin-specific parameters\n```\n\nPlease note that the above YAML is a template and may require specific plugin configurations for the Jenkins action you are using. You will need to replace the placeholder comments with actual configuration details based on your Jenkins plugin's documentation. Also, ensure that the `GITHUB_TOKEN` permissions are correctly set up in your GitHub repository settings to allow the workflow to run as intended.", "answer": "```yaml name: Jenkins Security Scan\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\npermissions:\n  security-events: write\n  contents: read\n  actions: read\n\njobs:\n  security-scan:\n    uses: jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml@v2\n    with:\n      java-cache: '' # Optionally enable use of a build dependency cache. Specify 'maven' or 'gradle' as appropriate.\n      java-version: 11 # What version of Java to set up for the build.\n```"}
{"id": "63c4a0a9517fc08c1ef113c7", "level": "level1", "llm_response": " ```yaml\nname: Test Lighthouse Check\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Lighthouse\n        run: npx lighthouse https://example.com --output-path ./reports --output-json ./reports/report.json\n        env:\n          LIGHTHOUSE_API_KEY: ${{ secrets.LIGHTHOUSE_API_KEY }}\n\n      - name: Upload Lighthouse report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lighthouse-report\n          path: ./reports/report.json\n\n      - name: Display Lighthouse report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lighthouse-report\n          path: ./reports/report.html\n```\n\nNote: Replace `https://example.com` with the URL of the website you want to audit with Lighthouse. Also, ensure that `LIGHTHOUSE_API_KEY` is set in your repository's secrets for authentication. This workflow checks out the repository, sets up Node.js, installs dependencies, runs Lighthouse, uploads the report as an artifact, and displays the report.", "answer": "```yaml name: Test Lighthouse Check\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: mkdir -p ${{ github.workspace }}/tmp/artifacts\n    - name: Run Lighthouse\n      uses: ./\n      with:\n        awsAccessKeyId: ${{ secrets.LIGHTHOUSE_CHECK_AWS_ACCESS_KEY_ID }}\n        awsBucket: ${{ secrets.LIGHTHOUSE_CHECK_AWS_BUCKET }}\n        awsRegion: ${{ secrets.LIGHTHOUSE_CHECK_AWS_REGION }}\n        awsSecretAccessKey: ${{ secrets.LIGHTHOUSE_CHECK_AWS_SECRET_ACCESS_KEY }}\n        device: all\n        gitAuthor: ${{ github.actor }}\n        gitBranch: ${{ github.ref }}\n        gitHubAccessToken: ${{ secrets.LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN }}\n        maxRetries: 1\n        outputDirectory: ${{ github.workspace }}/tmp/artifacts\n        urls: 'https://www.foo.software,https://www.foo.software/tag/articles/'\n        sha: ${{ github.sha }}\n        slackWebhookUrl: ${{ secrets.LIGHTHOUSE_CHECK_WEBHOOK_URL }}\n    - name: Upload artifacts\n      uses: actions/upload-artifact@master\n      with:\n        name: Lighthouse reports\n        path: ${{ github.workspace }}/tmp/artifacts\n```"}
{"id": "63c4981ab008460c1df1eed2", "level": "level1", "llm_response": " ```yaml\nname: Examples\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  examples:\n    name: Build and run examples\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install starlark\n\n      - name: Build and run examples\n        run: |\n          python examples/build.py\n          python examples/run.py\n```", "answer": "```yaml name: Examples\n\non:\n  pull_request:\n    branches: [ 'main' ]\n\njobs:\n  examples:\n    name: Build and run examples\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./examples/test.sh\n```"}
{"id": "63c49c756fc19abdf9cc3130", "level": "level1", "llm_response": " ```yaml\nname: Add \"approved\" label when approved\n\non: [pull_request]\n\njobs:\n  add_label:\n    runs-on: ubuntu-latest\n    if: github.event.review.state == 'APPROVED'\n    steps:\n      - name: Add \"approved\" label\n        uses: actions/labeler@v2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          labels: approved\n```", "answer": "```yaml on: pull_request_review\nname: Add \"approved\" label when approved\njobs:\n  add_label:\n    name: Add \"approved\" label when approved\n    runs-on: ubuntu-latest\n    steps:\n    - name: Add \"approved\" label when approved\n      uses: pullreminders/label-when-approved-action@master\n      env:\n        APPROVALS: \"1\"\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        ADD_LABEL: \"approved\"\n        REMOVE_LABEL: \"\"\n```"}
{"id": "63c4a0716fc19abdf9cdcba2", "level": "level1", "llm_response": " ```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    name: Linting\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Run linter\n        run: npm run lint\n\n  Building:\n    name: Compile source code\n    runs-on: ubuntu-latest\n    needs: Linting\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Build\n        run: npm run build\n```", "answer": "```yaml name: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    name: Linting\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/eslint.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Run ESLint\n        run: yarn lint --fix=false\n\n  Building:\n    name: Compile source code\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/tsc.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Build Code\n        run: yarn build\n```"}
{"id": "63c49d3433b087f6bde57d8e", "level": "level2", "llm_response": " ```yaml\nname: Python 3.10\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '.github/workflows/python3.10.yaml'\n    paths:\n      - '**/*.py'\n      - 'pylib'\n      - 'requirements.txt'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '.github/workflows/python3.10.yaml'\n    paths:\n      - '**/*.py'\n      - 'pylib'\n      - 'requirements.txt'\n  workflow_dispatch:\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  build:\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    env:\n      DEBUG: ${{ inputs.debug ?? false }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python 3.10\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.10\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          python -m unittest discover\n      - name: Debug\n        if: ${{ env.DEBUG == 'true' }}\n        run: |\n          echo \"Debug mode is ON\"\n          # Add debug related commands here\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2020-02-04 21:40:04 +0000 (Tue, 04 Feb 2020)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Python 3.10\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      python-version: \"3.10\"\n      caches: apt pip\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496441e33648075779820", "level": "level2", "llm_response": " ```yaml\nname: Delete PR documentation\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  delete:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Delete PR documentation\n        run: |\n          # Assuming documentation is in a directory named 'docs'\n          if [ -d \"docs\" ]; then\n            rm -rf docs\n          fi\n```", "answer": "```yaml name: Delete PR documentation\n\non:\n  pull_request:\n    types: [ closed ]\n\n\njobs:\n  delete:\n    uses: huggingface/doc-builder/.github/workflows/delete_doc_comment.yml@main\n    with:\n      pr_number: ${{ github.event.number }}\n      package: optimum\n```"}
{"id": "63c49da61899db58865017a6", "level": "level2", "llm_response": " ```yaml\nname: Dependabot\n\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    steps:\n      - name: approve\n        run: |\n          # Step to approve the pull request\n          echo \"Approving the pull request...\"\n\n      - name: merge\n        run: |\n          # Step to merge the pull request\n          echo \"Merging the pull request...\"\n```", "answer": "```yaml # Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Dependabot\non: pull_request\n\npermissions:\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.SYNCED_GITHUB_TOKEN_REPO}}\n    steps:\n      - name: approve\n        run: gh pr review --approve \"$PR_URL\"\n      - name: merge\n        run: gh pr merge --auto --squash --delete-branch \"$PR_URL\"\n```"}
{"id": "63c49ed81899db58865094fa", "level": "level2", "llm_response": " ```yaml\nname: Java CI with Maven\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      types: [opened, synchronize, reopened, labeled, unlabeled, review_requested]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Archive build artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: target/*.jar\n```", "answer": "```yaml name: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build with Maven\n      run: mvn install\n    - uses: actions/upload-artifact@v3\n      with:\n        name: artifact\n        path: all/target\n```"}
{"id": "63c4a13d1899db588651899b", "level": "level2", "llm_response": " ```yaml\nname: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'  # At 12:00 am on Tuesdays\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - '.github/workflows/docs.yml'\n      - 'enaml/**'\n      - 'examples/**'\n      - 'docs/**'\n      - 'setup.py'\n      - 'pyproject.toml'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        run: echo \"Step placeholder for documentation building\"\n\n      - name: Get history and tags for SCM versioning to work\n        run: echo \"Step placeholder for SCM versioning setup\"\n\n      - name: Set up Python\n        run: echo \"Step placeholder for Python setup\"\n\n      - name: Install dependencies\n        run: echo \"Step placeholder for installing Python dependencies\"\n\n      - name: Install project\n        run: echo \"Step placeholder for installing project dependencies\"\n\n      - name: Install graphviz\n        run: echo \"Step placeholder for installing graphviz\"\n\n      - name: Build documentation\n        run: echo \"Step placeholder for building documentation\"\n```", "answer": "```yaml name: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths:\n      - .github/workflows/docs.yml\n      - \"enaml/**\"\n      - \"examples/**\"\n      - \"docs/**\"\n      - setup.py\n      - pyproject.toml\n\njobs:\n  docs:\n    name: Docs building\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Get history and tags for SCM versioning to work\n        run: |\n          git fetch --prune --unshallow\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install wheel\n          pip install -r docs/requirements.txt\n      - name: Install project\n        run: |\n          pip install -e .\n      - name: Install graphviz\n        uses: ts-graphviz/setup-graphviz@v1\n      - name: Build documentation\n        run: |\n          mkdir docs_output;\n          sphinx-build docs/source docs_output -W -b html;\n```"}
{"id": "63c49e011842bc13d778df54", "level": "level2", "llm_response": " ```yaml\nname: Issue Manager\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '17 5 * * 1-5'\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n```\n\nNote: The step name is left empty as per the user's input. To complete the YAML file, you would need to provide a meaningful step name or description. Here's an example with a placeholder step name:\n\n```yaml\nname: Issue Manager\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '17 5 * * 1-5'\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for new issues\n        run: echo \"This step will handle new issues.\"\n```\n\nRemember to replace `\"Check for new issues\"` with the actual task you want to perform in the step.", "answer": "```yaml name: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"17 5 * * 1-5\" # run at 5:17 on Monday to Friday\n  # We only use the issue manager for auto-closing, so we only need the cron trigger.\n  # issue_comment:\n  #   types:\n  #     - created\n  #     - edited\n  # issues:\n  #   types:\n  #     - labeled\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: tiangolo/issue-manager@0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          config: >\n            {\n                \"$schema\": \"https://raw.githubusercontent.com/tiangolo/issue-manager/master/schema.json\",\n                \"waiting for input\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for input for a month. If anyone finds the time to provide the requested information, please re-open the issue and we will continue handling it.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for fix confirmation\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for a fix confirmation for a month. If anyone still experiences this issue, please re-open the issue with updated information so we can continue working on a fix.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for release\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for resources\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                }\n            }\n```"}
{"id": "63c4990f1899db58864e41ef", "level": "level2", "llm_response": " ```yaml\nname: Enforce PR labels\n\non:\n  pull_request_labels:\n    types: [added, removed, unlabeled]\n  pull_request_created:\n    types: [opened]\n  pull_request_edited:\n    types: [edited]\n  pull_request_head_ref_changed:\n    types: [updated]\n\njobs:\n  EnforceLabel:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Enforce Label\n        run: echo \"Enforce PR labels workflow step\"\n```", "answer": "```yaml ---\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, synchronize]\njobs:\n  enforce-label:\n    name: EnforceLabel\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Enforce Label\n        uses: yogevbd/enforce-label-action@8d1e1709b1011e6d90400a0e6cf7c0b77aa5efeb\n        with:\n          BANNED_LABELS: \"hold\"\n          BANNED_LABELS_DESCRIPTION: \"PRs on hold cannot be merged\"\n```"}
{"id": "63c49d1633b087f6bde5714b", "level": "level2", "llm_response": " ```yaml\nname: C++ interop tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      - github-actions\n\njobs:\n  main:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        cxx-version: [\"14\", \"17\"]\n\n    steps:\n      - name: Prepare compiler\n        run: |\n          # Commands to prepare the compiler\n\n      - name: Determine base branch\n        id: base_branch\n        run: echo \"::set-output name=branch::${GITHUB_REF#refs/*/}\"\n\n      - name: Checkout DMD\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ steps.base_branch.outputs.branch }}\n\n      - name: Checkout Phobos\n        uses: actions/checkout@v2\n        with:\n          repository: ${{ github.repository }}\n          ref: master\n\n      - name: [Posix] Load cached clang\n        uses: actions/cache@v2\n        with:\n          path: clang-cache\n          key: ${{ runner.os }}-clang-${{ hashFiles('**/clang-config.h') }}\n\n      - name: [Posix] Setting up clang ${{ matrix.cxx-version }}\n        run: |\n          # Commands to setup clang with specified version\n\n      - name: [Posix] Setup environment variables\n        run: |\n          # Commands to set environment variables\n\n      - name: [Linux] Setting up g++ ${{ matrix.cxx-version }}\n        if: runner.os == 'Linux'\n        run: |\n          # Commands to setup g++ with specified version\n\n      - name: [Linux] Verifying installed g++ version\n        if: runner.os == 'Linux'\n        run: |\n          # Commands to verify g++ version\n\n      - name: [Windows] Restore dmc from cache\n        if: runner.os == 'Windows'\n        uses: actions/cache@v2\n        with:\n          path: dmc-cache\n          key: ${{ runner.os }}-dmc-${{ hashFiles('**/dmc-config.h') }}\n\n      - name: [Windows] Install dmc\n        if: runner.os == 'Windows'\n        run: |\n          # Commands to install dmc\n\n      - name: [Windows] Add VC toolset to PATH\n        if: runner.os == 'Windows'\n        run: |\n          # Commands to add VC toolset to PATH\n\n      - name: [Windows] Set environment variables\n        if: runner.os == 'Windows'\n        run: |\n          # Commands to set environment variables\n\n      - name: [Posix] Build compiler & standard library\n        run: |\n          # Commands to build compiler and standard library\n\n      - name: [Windows] Build compiler & standard library\n        if: runner.os == 'Windows'\n        run: |\n          # Commands to build compiler and standard library\n\n      - name: [Posix] Run C++ test suite\n        run: |\n          # Commands to run C++ test suite\n\n      - name: [Windows] Run C++ test suite\n        if: runner.os == 'Windows'\n        run: |\n          # Commands to run C++ test suite\n\n      - name: Run C++ frontend unittests\n        run: |\n          # Commands to run C++ frontend unittests\n\n      - name: Run C++ frontend unittests (32-bit)\n        run: |\n          # Commands to run C++ frontend unittests (32-bit)\n\n      - name: Store artifacts\n        run: |\n          # Commands to store artifacts\n```", "answer": "```yaml # Github action to test for C++ interoperability\n#\n# Most tests in the test-suite run on the CI when it comes to cross-platform testing.\n# However, the dlang auto-tester uses somewhat old host C/C++ compiler.\n# This is good for testing compatibility with e.g. LTS distributions,\n# but becomes problematic when we want to test more cutting-edge features,\n# such as newer C++ standards (C++17, C++20, etc...).\n#\n# This is the reason why we have this action: we have full control over the toolchain,\n# and it is cross platform. The supported platforms are whatever Github Actions support,\n# which is usually whatever the vendor (Canonical, Apple, Microsoft) supports.\n#\n# Notes:\n# - Some patterns used here have been developed through a lot of trial and error\n#   In particular, the build matrix approach, with two rows, and a large list of\n#   excludes, ended up being the most useful approach.\n# - Additionally, the check for the compiler version will save you a lot of trouble.\n#   Having the wrong path added to the $PATH and ending up with the wrong compiler\n#   being used can make debugging very painful.\n# - Try to use the native Github action syntax (${{ expression }}) when possible,\n#   as they are substituted with their value in the logs, unlike env variable.\n#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`\n#\n# TODO:\n# - Implement Windows + MSVC support\n# - Implement Windows + clang support\n# - Implement Linux + Clang 32 bits support (if possible)\nname: C++ interop tests\n\n# Only triggers on pushes to master & stable, as well as PR to master and stable\n# Sometimes reverts appear in the upstream repository (e.g. when the revert button\n# is clicked by a contributor with commit access), this should be tested as PR).\n#\n# Also note that Github actions does not retrigger on target branch changes,\n# hence the check on push.\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      # Use this branch name in your fork to test changes\n      - github-actions\n\njobs:\n  main:\n    name: Run\n    if: github.repository == 'dlang/dmd'\n\n    strategy:\n      # Since those tests takes very little time, don't use `fail-fast`.\n      # If runtime expand, we might want to comment this out,\n      # as most failing PRs do so because they don't compile / something is broken,\n      # very few PRs actually benefit from this.\n      fail-fast: false\n      matrix:\n        os: [ macOS-11, ubuntu-20.04, windows-2019 ]\n\n        target: [\n          # Versions of clang earlier than 11 are not available on 20.04, but are on macOS-11\n          clang-13.0.0, clang-12.0.0, clang-11.0.0, clang-10.0.0, clang-9.0.0, clang-8.0.0,\n        # For g++, we test the oldest compiler on Ubuntu 20.04, which is GCC-9\n          g++-11, g++-10, g++-9,\n          # Finally, we test MSVC 2013 - 2019\n          msvc-2019, msvc-2017, msvc-2015, msvc-2013\n        ]\n\n        # Exclude target compilers not supported by the host\n        # Note: Pattern matching is not supported so this list is quite long,\n        # and brittle, as changing an msvc entry would break on OSX, for example.\n        exclude:\n          # 20.04 only has g++-9 through to 11, and clang-11.0.0 through to 13.0.0\n          - { os: ubuntu-20.04, target: clang-10.0.0 }\n          - { os: ubuntu-20.04, target: clang-9.0.0 }\n          - { os: ubuntu-20.04, target: clang-8.0.0 }\n          # OSX only supports clang\n          - { os: macOS-11, target: g++-11 }\n          - { os: macOS-11, target: g++-10 }\n          - { os: macOS-11, target: g++-9 }\n          - { os: macOS-11, target: msvc-2019 }\n          - { os: macOS-11, target: msvc-2017 }\n          - { os: macOS-11, target: msvc-2015 }\n          - { os: macOS-11, target: msvc-2013 }\n          # We don't test g++ on Windows as DMD only mangles for MSVC\n          - { os: windows-2019, target: g++-11 }\n          - { os: windows-2019, target: g++-10 }\n          - { os: windows-2019, target: g++-9 }\n\n          # TODO: Implement support for clang and MSVC2017 on Windows\n          # Currently those are still being run by the auto-tester\n          # We can hardly test below 2017 in the CI because there's\n          # no way to install it via command line\n          # (TODO: Test with 2015 as the blog post is slightly ambiguous)\n          # https://devblogs.microsoft.com/cppblog/introducing-the-visual-studio-build-tools/\n          - { os: windows-2019, target: msvc-2017 }\n          - { os: windows-2019, target: msvc-2015 }\n          - { os: windows-2019, target: msvc-2013 }\n          - { os: windows-2019, target: clang-13.0.0 }\n          - { os: windows-2019, target: clang-12.0.0 }\n          - { os: windows-2019, target: clang-11.0.0 }\n          - { os: windows-2019, target: clang-10.0.0 }\n          - { os: windows-2019, target: clang-9.0.0 }\n          - { os: windows-2019, target: clang-8.0.0 }\n\n        # This sets the configuration for each jobs\n        # There's a bit of duplication involved (e.g. breaking down g++-9.3 into 2 strings),\n        # but some items are unique (e.g. clang-9.0.0 and 4.0.1 have differences in their naming).\n        include:\n          # Clang boilerplate\n          - { target: clang-13.0.0, compiler: clang, cxx-version: 13.0.0 }\n          - { target: clang-12.0.0, compiler: clang, cxx-version: 12.0.0 }\n          - { target: clang-11.0.0, compiler: clang, cxx-version: 11.0.0 }\n          - { target: clang-10.0.0, compiler: clang, cxx-version: 10.0.0 }\n          - { target: clang-9.0.0, compiler: clang, cxx-version: 9.0.0 }\n          - { target: clang-8.0.0, compiler: clang, cxx-version: 8.0.0 }\n          # g++ boilerplace\n          - { target: g++-11, compiler: g++, cxx-version: 11.2.0, major: 11 }\n          - { target: g++-10, compiler: g++, cxx-version: 10.3.0, major: 10 }\n          - { target: g++-9, compiler: g++, cxx-version: 9.4.0, major: 9 }\n          # Platform boilerplate\n          - { os: ubuntu-20.04, arch: x86_64-linux-gnu-ubuntu-20.04 }\n          - { os: macOS-11,  arch: x86_64-apple-darwin }\n          # Clang 9.0.0 have a different arch for OSX\n          - { os: macOS-11, target: clang-9.0.0, arch: x86_64-darwin-apple }\n          # Those targets will generate artifacts that can be used by other testers\n          - { storeArtifacts: false }\n          - { os: ubuntu-20.04, target: g++-9,    storeArtifacts: true }\n          - { os: macOS-11,  target: clang-9.0.0, storeArtifacts: true }\n          #- { os: windows-2019, target: msvc-2019,   storeArtifacts: true }\n\n    # We're using the latest available images at the time of this commit.\n    # Using a specific version for reproductibility.\n    # Feel free to update when a new release has matured.\n    runs-on: ${{ matrix.os }}\n    steps:\n\n    ########################################\n    #    Setting up the host D compiler    #\n    ########################################\n    - name: Prepare compiler\n      uses: dlang-community/setup-dlang@v1\n\n    ##############################################\n    # Find out which branch we need to check out #\n    ##############################################\n    - name: Determine base branch\n      id: base_branch\n      shell: bash\n      run: |\n        # For pull requests, base_ref will not be empty\n        if [ ! -z ${{ github.base_ref }} ]; then\n            echo \"branch=${{ github.base_ref }}\" >> $GITHUB_OUTPUT\n        # Otherwise, use whatever ref we have:\n        # For branches this in the format 'refs/heads/<branch_name>',\n        # and for tags it is refs/tags/<tag_name>.\n        else\n            echo \"branch=${{ github.ref }}\" >> $GITHUB_OUTPUT\n        fi\n\n    #########################################\n    # Checking out up DMD, druntime, Phobos #\n    #########################################\n    - name: Checkout DMD\n      uses: actions/checkout@v3\n      with:\n        path: dmd\n        persist-credentials: false\n    - name: Checkout Phobos\n      uses: actions/checkout@v3\n      with:\n        path: phobos\n        repository: dlang/phobos\n        ref: ${{ steps.base_branch.outputs.branch }}\n        persist-credentials: false\n\n\n    ########################################\n    #   Setting up the host C++ compiler   #\n    ########################################\n    - name: '[Posix] Load cached clang'\n      id: cache-clang\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/\n        key: ${{ matrix.cxx-version }}-${{ matrix.arch }}-2022-09-25-2121\n\n    - name: '[Posix] Setting up clang ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows' && steps.cache-clang.outputs.cache-hit != 'true'\n      run: |\n        if [ \"${{ matrix.cxx-version }}\" == \"8.0.0\" -o \"${{ matrix.cxx-version }}\" == \"9.0.0\" ]; then\n          wget --quiet --directory-prefix=${{ github.workspace }} https://releases.llvm.org/${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        else\n          wget --quiet --directory-prefix=${{ github.workspace }} https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        fi\n        tar -x -C ${{ github.workspace }} -f ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        # On OSX, the system header are installed via `xcode-select` and not distributed with clang\n        # Since some part of the testsuite rely on CC being only a binary (not a command),\n        # and config files where only introduced from 6.0.0, use a wrapper script.\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          # Note: heredoc shouldn't be indented\n          cat << 'EOF' > ${TMP_CC}-wrapper\n        #!/bin/bash\n        # Note: We need to use this because github.workspace is not stable\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          # Invoking clang with `clang++` will link the C++ standard library\n          # Make sure we got two separate wrapper for this\n          cat << 'EOF' > ${TMP_CC}++-wrapper\n        #!/bin/bash\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang++ -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          chmod +x ${TMP_CC}-wrapper ${TMP_CC}++-wrapper\n        fi\n\n    - name: '[Posix] Setup environment variables'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          echo \"CC=${TMP_CC}-wrapper\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++-wrapper\" >> $GITHUB_ENV\n          echo \"SDKROOT=$(xcrun --show-sdk-path)\" >> $GITHUB_ENV\n        else\n          echo \"CC=${TMP_CC}\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++\" >> $GITHUB_ENV\n        fi\n\n    # On OSX and Linux, clang is installed by default and in the path,\n    # so make sure ${CC} works\n    - name: '[Posix] Verifying installed clang version'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q 'version ${{ matrix.cxx-version }}'; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.cxx-version }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # G++ is only supported on Linux\n    - name: '[Linux] Setting up g++ ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'g++'\n      run: |\n        # Workaround bug in Github actions\n        curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -\n        # Make sure we have the essentials\n        sudo apt-get update\n        sudo apt-get install build-essential software-properties-common -y\n        # This ppa provides multiple versions of g++\n        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\n        sudo apt-get update\n        sudo apt-get install -y ${{ matrix.target }} ${{ matrix.target }}-multilib\n        echo \"CC=${{ matrix.target }}\" >> $GITHUB_ENV\n        echo \"CXX=${{ matrix.target }}\" >> $GITHUB_ENV\n\n    # Make sure ${CC} works and we don't use the $PATH one\n    - name: '[Linux] Verifying installed g++ version'\n      if: matrix.compiler == 'g++'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q '${{ matrix.target }} (Ubuntu '; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.target }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # Restore or install dmc (and DM make)\n    - name: '[Windows] Restore dmc from cache'\n      id: cache-dmc\n      if: runner.os == 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}\\tools\\\n        key: ${{ matrix.os }}-dmc857\n\n    - name: '[Windows] Install dmc'\n      if: runner.os == 'Windows' && steps.cache-dmc.outputs.cache-hit != 'true'\n      shell: powershell\n      run: |\n        $url = \"http://ftp.digitalmars.com/Digital_Mars_C++/Patch/dm857c.zip\"\n        $sha256hash = \"F51CDFEB45EAF4FFBF7ABF0FE9B3D548B202B4528401005C2C3192B00BC32367\"\n        Write-Host ('Downloading {0} ...' -f $url)\n        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n        $ProgressPreference = 'SilentlyContinue'\n        New-Item -ItemType directory -Path ${{ github.workspace }}\\tools\\\n        Invoke-WebRequest -Uri $url -OutFile '${{ github.workspace }}\\tools\\dmc.zip'\n        if ((Get-FileHash '${{ github.workspace }}\\tools\\dmc.zip' -Algorithm \"SHA256\").Hash -ne $sha256hash) {\n          exit 1\n        }\n        Expand-Archive '${{ github.workspace }}\\tools\\dmc.zip' -DestinationPath ${{ github.workspace }}\\tools\\\n\n    - name: '[Windows] Add VC toolset to PATH'\n      if: runner.os == 'Windows'\n      uses: ilammy/msvc-dev-cmd@v1\n\n    - name: '[Windows] Set environment variables'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        echo \"VISUAL_STUDIO_LIB_NOT_DM=$(which lib.exe)\" >> $GITHUB_ENV\n        echo \"HOST_DMD=${{ env.DC }}\" >> $GITHUB_ENV\n        echo \"${{ github.workspace }}/tools/dm/bin/\" >> $GITHUB_PATH\n\n    ########################################\n    #    Building DMD, druntime, Phobos    #\n    ########################################\n    - name: '[Posix] Build compiler & standard library'\n      if: runner.os != 'Windows'\n      # By default, VMs have 2 processors available, hence the `-j2`:\n      # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources\n      run: |\n        # All hosts are 64 bits but let's be explicit\n        ./dmd/compiler/src/build.d -j2 MODEL=64\n        make -C dmd/druntime -f posix.mak -j2 MODEL=64\n        make -C phobos   -f posix.mak -j2 MODEL=64\n        # Both version can live side by side (they end up in a different directory)\n        # However, since clang does not provide a multilib package, only test 32 bits with g++\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/src/build.d install -j2 MODEL=32\n          make -C dmd/druntime -f posix.mak install -j2 MODEL=32\n          make -C phobos   -f posix.mak install -j2 MODEL=32\n        fi\n\n    - name: '[Windows] Build compiler & standard library'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        dmd -run dmd/compiler/src/build.d -j2 MODEL=64\n        if [ $? -ne 0 ]; then return 1; fi\n        # Note: Only CC for druntime and AR for Phobos are required ATM,\n        # but providing all three to avoid surprise for future contributors\n        # Those should really be in the path, though.\n        cd dmd/druntime\n        make -f win64.mak\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../../phobos/\n        make -f win64.mak CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../\n\n    ########################################\n    #        Running the test suite        #\n    ########################################\n    - name: '[Posix] Run C++ test suite'\n      if: runner.os != 'Windows'\n      env:\n        # Reset LD_LIBRARY_PATH when running the tests, so they use the newly built libphobos2.so.\n        LD_LIBRARY_PATH: ''\n      run: |\n        ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=64\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/test/run.d clean\n          ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=32\n        fi\n\n    - name: '[Windows] Run C++ test suite'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        cd dmd/druntime\n        make -f win64.mak test_stdcpp CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n\n    ########################################\n    #      Run C++ frontend unittests      #\n    ########################################\n    - name: Run C++ frontend unittests\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=64\n\n    - name: Run C++ frontend unittests (32-bit)\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=32\n\n    ########################################\n    #      Store generated artifacts       #\n    ########################################\n    - name: Store artifacts\n      if: ${{ matrix.storeArtifacts }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: dmd-${{ matrix.os }}\n        path: install\n```"}
{"id": "63c49e8033b087f6bde602c0", "level": "level2", "llm_response": " ```yaml\nname: Coding Standards\n\non:\n  pull_request:\n    branches:\n      - '*.*'\n  push:\n    branches:\n      - '*.*'\n\njobs:\n  coding-standards:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n          extensions: mbstring\n\n      - name: Run PHP Code Standards\n        run: ./vendor/bin/phpcs --standard=PSR2 src/\n\n      - name: Upload PHP Code Standards Report\n        uses: actions/upload-artifact@v2\n        with:\n          name: php-code-standards-report\n          path: phpcs.xml\n```", "answer": "```yaml name: \"Coding Standards\"\n\non:\n  pull_request:\n    branches:\n      - \"*.x\"\n  push:\n    branches:\n      - \"*.x\"\n\njobs:\n  coding-standards:\n    name: \"Coding Standards\"\n    uses: \"doctrine/.github/.github/workflows/coding-standards.yml@2.1.0\"\n    with:\n      php-version: '8.1'\n```"}
{"id": "63c496c333b087f6bde2e28f", "level": "level2", "llm_response": " ```yaml\nname: Missing API docs\n\non:\n  pull_request:\n    paths-ignore:\n      - '^marvim/api-doc-update\\*$'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Regenerate API documentation\n        run: |\n          # Insert the command to regenerate API docs here\n          echo \"Regenerating API documentation for the specified paths...\"\n          # Example: nvim --api-doc-regen src/nvim/api/*.vim\n```\nPlease note that you will need to replace the `echo` command with the actual command or script that regenerates your API documentation for Vim Script files. The `nvim --api-doc-regen` line is just a placeholder example.", "answer": "```yaml name: Missing API docs\non:\n  pull_request:\n    branches-ignore:\n      - 'marvim/api-doc-update**'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    permissions:\n      contents: write\n      pull-requests: write\n    uses: ./.github/workflows/api-docs.yml\n    with:\n      check_only: true\n```"}
{"id": "63c4977c1842bc13d7763db2", "level": "level2", "llm_response": " ```yaml\nname: Push issue to Github Project dashboard\non:\n  issues:\n    opened:\n      types: [opened]\n  pull_request:\n    created:\n      types: [created]\n\njobs:\n  add_to_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Project Dashboard\n        run: |\n          # Commands to update the project dashboard with the new issue or pull request\n          echo \"Updating project dashboard with issue/pull request ${{ github.event.issue.number }} or ${{ github.event.pull_request.number }}\"\n          # Example: Push changes to a project dashboard (replace with actual command)\n          # git push <dashboard-repo-url> <branch-name>\n```\n\nNote: Replace the placeholder comment with actual commands or scripts required to update the project dashboard with the new issue or pull request information. The `git push` command is just an example and should be adjusted according to your specific dashboard setup.", "answer": "```yaml name: Push issue to Github Project dashboard\n\non:\n    issues:\n        types:\n        -   opened\n    pull_request_target:\n        types:\n        -   opened\n\njobs:\n    add_to_project:\n        runs-on: ubuntu-latest\n        steps:\n        -   uses: actions/add-to-project@v0.0.3\n            with:\n                project-url: https://github.com/orgs/pyscript/projects/4/\n                github-token: ${{ secrets.PROJECT_TOKEN }}\n```"}
{"id": "63c496981e3364807577ba4f", "level": "level2", "llm_response": " ```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    id: test\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: Install Dependencies\n      - name: Test with Pytest\n      - name: ''\n\n  e2e:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    id: e2e\n    steps:\n      - name: Set up Python\n      - name: Install Dependencies\n      - name: Run e2e script\n\n  commitlint:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    id: commitlint\n    steps:\n      - name: ''\n      - name: ''\n\n  release:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    id: release\n    steps:\n      - name: ''\n      - name: Python Semantic Release\n```\n\nPlease note that I've left the step names empty (``) as the user did not provide specific details for each step. You'll need to fill in the appropriate commands or scripts for each step according to your project's requirements.", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nconcurrency:\n  group: ${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Test\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macOS-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: snok/install-poetry@v1.3.2\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install Dependencies\n        run: poetry install\n      - name: Test with Pytest\n        run: poetry run pytest --cov-report=xml\n      - uses: codecov/codecov-action@v3.1.1\n\n  e2e:\n    # https://github.com/browniebroke/django-codemod/issues/302\n    name: e2e\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n      - name: Install Dependencies\n        run: |\n          pip install .\n          pip install 'Django>=3.0,<3.1'\n      - name: Run e2e script\n        run: ./tests/test_e2e.sh\n\n  # Make sure commit messages follow the conventional commits convention:\n  # https://www.conventionalcommits.org\n  commitlint:\n    name: Lint Commit Messages\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v5.2.0\n\n  release:\n    runs-on: ubuntu-latest\n    environment: release\n    if: github.ref == 'refs/heads/main'\n    needs:\n      - test\n      - e2e\n      - commitlint\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      # Run semantic release:\n      # - Update CHANGELOG.md\n      # - Update version in code\n      # - Create git tag\n      # - Create GitHub release\n      # - Publish to PyPI\n      - name: Python Semantic Release\n        uses: relekang/python-semantic-release@v7.32.1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          pypi_token: ${{ secrets.PYPI_TOKEN }}\n```"}
{"id": "63c4a1251842bc13d77a219c", "level": "level2", "llm_response": " ```yaml\nname: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - 'docs/**'\n      - 'docusaurus.config.js'\n      - 'package.json'\n      - 'Vars.js'\n      - 'sidebars.js'\n      - 'yarn.lock'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Docusaurus\n        uses: crazy-max/godoc-action@v1\n        with:\n          godoc_path: 'docs'\n\n      - name: Build website\n        run: |\n          npm install\n          npm run build\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs/_build/html\n```", "answer": "```yaml name: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - docs/**\n      - docusaurus.config.js\n      - package.json\n      - Vars.js\n      - sidebars.js\n      - yarn.lock\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Docusaurus\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Build website\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n      - name: Deploy to GitHub Pages\n        if: github.ref == 'refs/heads/main'\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./build```"}
{"id": "63c4a14a1842bc13d77a3048", "level": "level2", "llm_response": " ```yaml\nname: Docker Latest Release\non:\n  push:\n    branches:\n      - master\n\njobs:\n  docker-latest:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Check Out Repo\n        uses: actions/checkout@v2\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Build and push\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: ./Dockerfile\n          push: true\n          tags: user/repo:latest\n\n      - name: Discord Success Notification\n        uses: peter-evans/discord-notify@v3\n        with:\n          token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}\n          message: \"Docker image for ${{ github.ref }} pushed successfully\"\n\n      - name: Discord Failure Notification\n        uses: peter-evans/discord-notify@v3\n        with:\n          token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}\n          message: \"Failed to push Docker image for ${{ github.ref }}\"\n```\n\nMake sure to replace `user/repo` with your actual Docker Hub username and repository name. Also, ensure that you have the necessary secrets (`DOCKER_USERNAME`, `DOCKER_PASSWORD`, and `DISCORD_WEBHOOK_TOKEN`) set up in your GitHub repository's settings.", "answer": "```yaml name: Docker Latest Release\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Check Out Repo\n        uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_HUB_USERNAME }}\n          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@master\n        with:\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: ./\n          file: ./Dockerfile\n          platforms: linux/amd64,linux/arm64,linux/arm/v7\n          push: true\n          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/plex-meta-manager:latest\n\n      - name: Discord Success Notification\n        uses: meisnate12/discord-notifications@master\n        if: success()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Success**\"\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png\n\n      - name: Discord Failure Notification\n        uses: meisnate12/discord-notifications@master\n        if: failure()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Failure**\"\n          color: 0xe30c43\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png```"}
{"id": "63c4a04c1899db5886512a2b", "level": "level2", "llm_response": " ```yaml\nname: Deploy ${{ inputs.gitRef || github.ref_name  }} to ${{ inputs.environment || 'integration' }}\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag, or branch name to deploy'\n        required: true\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to (integration, staging, production)'\n        required: true\n        default: 'integration'\n      type:\n        description: 'Type of trigger (manual or CI completion)'\n        required: true\n        default: 'manual'\n  workflow_dispatch:\n    branches:\n      ignore:\n        - main\n  workflow_run:\n    workflows:\n      - CI\n    branches:\n      only:\n        - main\n\njobs:\n  build-and-publish-image:\n    runs-on: ubuntu-latest\n    steps:\n    # Steps to build and publish the image\n\n  trigger-deploy:\n    needs: build-and-publish-image\n    runs-on: ubuntu-latest\n    if: github.event_name == 'workflow_run'\n    steps:\n    - name: Trigger deploy\n      uses: actions/github-script@v3\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          const inputs = context.payload.inputs;\n          const gitRef = inputs.gitRef || github.ref_name;\n          const environment = inputs.environment || 'integration';\n          github.actions.createRef({\n            ref: gitRef,\n            base: environment\n          });\n```\n\nPlease note that the above YAML is a template and does not contain the actual steps to build and publish the image (`build-and-publish-image` job). You will need to fill in the steps according to your specific build and deployment process. Additionally, the `trigger-deploy` job uses GitHub Actions script to create a new reference, which is a placeholder for your actual deployment logic.", "answer": "```yaml name: Deploy\n\nrun-name: Deploy ${{ inputs.gitRef || github.ref_name  }} to ${{ inputs.environment || 'integration' }}\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag or branch name to deploy'\n        required: true\n        type: string\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: choice\n        options:\n        - integration\n        - staging\n        - production\n        default: 'integration'\n  workflow_run:\n    workflows: [CI]\n    types: [completed]\n    branches: [main]\n\njobs:\n  build-and-publish-image:\n    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'\n    name: Build and publish image\n    uses: alphagov/govuk-infrastructure/.github/workflows/build-and-push-image.yaml@main\n    with:\n      gitRef: ${{ inputs.gitRef || github.ref }}\n    secrets:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GOVUK_ECR_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GOVUK_ECR_SECRET_ACCESS_KEY }}\n  trigger-deploy:\n    name: Trigger deploy to ${{ inputs.environment || 'integration' }}\n    needs: build-and-publish-image\n    uses: alphagov/govuk-infrastructure/.github/workflows/deploy.yaml@main\n    with:\n      imageTag: ${{ needs.build-and-publish-image.outputs.imageTag }}\n      environment: ${{ inputs.environment || 'integration' }}\n    secrets:\n      WEBHOOK_TOKEN: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_TOKEN }}\n      WEBHOOK_URL: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_URL }}\n      GH_TOKEN: ${{ secrets.GOVUK_CI_GITHUB_API_TOKEN }}\n```"}
{"id": "63c49ffc517fc08c1ef0d18c", "level": "level2", "llm_response": " ```yaml\nname: YAML Linter\n\non:\n  push:\n    paths-ignore:\n      - '**.java'\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  linter:\n    permissions:\n      contents: read\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: YAML Linter\n        run: |\n          # Add commands for YAML linting here\n          echo \"Running YAML linter on the repository\"\n```", "answer": "```yaml name: YAML Linter\n\non:\n  push:\n    paths:\n    - '**.yml'\n  pull_request:\n    branches:\n    - master\n\npermissions:\n  contents: read\n\njobs:\n  linter:\n\n    name: YAML Linter\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: YAML Linter\n      uses: ibiqlik/action-yamllint@v3.1.1\n      with:\n        config_file: '.github/configs/yaml-linter.yml'\n```"}
{"id": "63c49a841842bc13d7777897", "level": "level2", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '^v*'\n  release:\n    types: [published]\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Deploy to NPM\n        run: npm publish\n\n  github:\n    needs: npm\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: path/to/your/asset\n          asset_name: your-asset-name\n          asset_content_type: your/content-type\n```\n\nPlease note that you'll need to replace `path/to/your/asset` and `your-asset-name` with the actual path and name of the asset you want to upload. Also, ensure that your `.npmrc` file is configured correctly for publishing to NPM.\n\nThis YAML defines a GitHub Actions workflow that triggers on push events to tags that match the pattern `v*` or `^v*`, and on release events published. It includes two jobs: `npm` and `github`. The `npm` job installs dependencies and publishes to NPM, while the `github` job creates a release and uploads an asset to it. The `github.ref` and `GITHUB_TOKEN` are automatically provided by GitHub Actions.", "answer": "```yaml # https://docs.github.com/actions\n\nname: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/.htaccess bin/htaccess.conf\n      - name: Deploy to NPM\n        uses: JS-DevTools/npm-publish@v1.4.3\n        with:\n          token: ${{ secrets.NPM_TOKEN }}\n\n  github:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/h5bp.htaccess bin/htaccess.conf\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: ./dist/h5bp.htaccess\n          asset_name: h5bp.htaccess\n          asset_content_type: application/octet-stream\n```"}
{"id": "63c49c871e336480757a1819", "level": "level2", "llm_response": " ```yaml\nname: Release notifier\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify IRC\n        uses: some-irc-notification-action/notify@v1\n        with:\n          channel: \"#your-irc-channel\"\n          message: \"New release ${{ github.event.release.tag_name }} on ${{ github.repository }} by ${{ github.actor }}\"\n```\n\nPlease note that `some-irc-notification-action/notify@v1` is a placeholder for the actual action you would use to notify an IRC channel. You will need to replace it with the appropriate action or script that performs the notification. You might also need to configure additional context or parameters based on your specific requirements.", "answer": "```yaml name: Release notifier\n\non:\n  release:\n    types: [published]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Notify IRC\n        uses: Gottox/irc-message-action@v2\n        with:\n          server: \"irc.libera.chat\"\n          channel: \"#shiori\"\n          nickname: ShioriBot\n          tls: true\n          sasl_password: ${{ secrets.IRC_SHIORIBOT_PWD }}\n          message: \"New release: ${{ github.event.repository.full_name }}@${{ github.event.release.name }}: ${{ github.event.release.html_url }}\"\n```"}
{"id": "63c4a1506fc19abdf9ce1a6b", "level": "level2", "llm_response": " ```yaml\nname: Contribs\non:\n  pull_request:\n    types: [opened, reopened]\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Contribs\n        run: echo \"This job runs when a pull request is created or reopened.\"\n```", "answer": "```yaml name: Contribs\non:\n  pull_request_target:\n    types: [opened, reopened]\n\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    name: Contribs\n    steps:\n      - name: Contribs\n        uses: carlescufi/action-contribs@main\n        with:\n          github-token: ${{ secrets.NCS_GITHUB_TOKEN }}\n          command: 'external'\n          messages: |\n                    Thank you for your contribution!\n                    It seems you are not a member of the nrfconnect GitHub organization. External contributions are handled as follows:\n                    Large contributions, affecting multiple subsystems for example, may be rejected if they are complex, may introduce regressions due to lack of test coverage, or if they are not consistent with the architecture of nRF Connect SDK.\n                    PRs will be run in our continuous integration (CI) test system.\n                    If CI passes, PRs will be tagged for review and merged on successful completion of review. You may be asked to make some modifications to your contribution during review.\n                    If CI fails, PRs may be rejected or may be tagged for review and rework.\n                    PRs that become outdated due to other changes in the repository may be rejected or rework requested.\n                    External contributions will be prioritized for review based on the relevance to current development efforts in nRF Connect SDK.  Bug fix PRs will be prioritized.\n                    You may raise issues or ask for help from our Technical Support team by visiting https://devzone.nordicsemi.com/.\n                    |\n                    The author of this pull request has now been added to the nrfconnect GitHub organization.\n          labels: 'external'\n```"}
{"id": "63c49ff01899db5886510419", "level": "level2", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        run: |\n          # Insert the commands to update the release draft here\n          echo \"Updating release draft...\"\n          # Example command (replace with actual release draft update logic)\n          go run update_release_draft.go\n```\n\nPlease note that you will need to replace the `echo \"Updating release draft...\"` and `go run update_release_draft.go` with the actual commands that perform the update of the release draft in your Go application. The `update_release_draft.go` file should contain the Go code that handles the release draft update logic.", "answer": "```yaml name: Release Drafter\n\non:\n    push:\n        # branches to consider in the event; optional, defaults to all\n        branches:\n            - master\n    # pull_request event is required only for autolabeler\n    pull_request:\n        # Only following types are handled by the action, but one can default to all as well\n        types: [opened, reopened, synchronize]\n\njobs:\n    update_release_draft:\n        runs-on: ubuntu-latest\n        steps:\n            # (Optional) GitHub Enterprise requires GHE_HOST variable set\n            #- name: Set GHE_HOST\n            #  run: |\n            #    echo \"GHE_HOST=${GITHUB_SERVER_URL##https:\\/\\/}\" >> $GITHUB_ENV\n\n            # Drafts your next Release notes as Pull Requests are merged into \"master\"\n            - uses: release-drafter/release-drafter@v5\n                # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n                # with:\n                #   config-name: my-config.yml\n                #   disable-autolabeler: true\n              env:\n                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c881e336480757a1881", "level": "level2", "llm_response": " ```yaml\nname: Python testing\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n\njobs:\n  lint:\n    name: Lint package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n      - name: Cache pip\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Lint with flake8 & pylint\n        run: |\n          flake8 .\n          pylint ./\n\n  tests:\n    name: Test package\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.8', '3.9', '3.10']\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Cache pip\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Run tests with pytest\n        run: |\n          pytest\n      - name: Install Coveralls\n        run: |\n          pip install coveralls\n      - name: Run tests with pytest & Calculate coverage\n        run: |\n          pytest --cov=./\n      - name: Send coverage to Coveralls\n        run: coveralls\n```\n\nPlease note that the `.` in the `Lint with flake8 & pylint` step is a placeholder for an actual command or script you would use to lint your code. You should replace it with the actual command(s) you intend to use for linting. Additionally, the `python-version` matrix in the `tests` job is set to use multiple versions of Python, but you can adjust this as needed for your workflow.", "answer": "```yaml ---\nname: \"Python testing\"\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n  schedule:\n    - cron: \"23 3 * * 1\"\n\njobs:\n  lint:\n    name: \"Lint package\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - run: |\n          echo \"package=$(ls -F | grep \\/$ | grep -v \"bin\\|examples\\|tests\" | sed -n \"s/\\///g;1p\")\" >> $GITHUB_ENV\n\n      - name: \"Set up Python\"\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-dev.txt\n          if [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Lint with flake8 & pylint\"\n        run: |\n          flake8 ${{ env.package }} tests\n          pylint ${{ env.package }} tests\n\n  tests:\n    name: \"Test package\"\n    needs: lint\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 3\n      matrix:\n        python-version: ['3.9', '3.10']\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-test.txt\n          if [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n          pip install pytest-xdist\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Run tests with pytest\"\n        if: matrix.python-version != '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar\n          ./bin/check_dirty\n\n      - name: \"Install Coveralls\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pip install pytest-xdist coveralls\n\n      - name: \"Run tests with pytest & Calculate coverage\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar --cov --cov-report=\n          ./bin/check_dirty\n\n      - name: \"Send coverage to Coveralls\"\n        if: matrix.python-version == '3.9'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: coveralls --service=github\n```"}
{"id": "63c4a08c33b087f6bde6d427", "level": "level2", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    paths:\n      - '**.swift'\n    pull_request:\n      branches:\n        - main\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run SwiftLint\n        uses: wulianlu/swiftlint@v1.0.0\n        with:\n          args: --strict\n\n  ESLint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run ESLint\n        uses: eslint/eslint-action@v7\n        with:\n          config: './eslintrc.json'\n```", "answer": "```yaml name: Lint\n\non: [push, pull_request]\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: GitHub Action for SwiftLint with --strict\n        uses: norio-nomura/action-swiftlint@3.0.1\n        with:\n          args: --strict\n  ESLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: RUN ESLint\n        uses: 123FLO321/action-eslint-standalone@0.4.0\n        with:\n          args: --ext .js --ext .js.mustache --max-warnings=0\n```"}
{"id": "63c49c0c1899db58864f76fb", "level": "level2", "llm_response": " ```yaml\nname: Mirror main branch to master branch\non:\n  push:\n    branches:\n      - main\n\njobs:\n  mirror_job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Mirror action step\n        id: mirror\n        run: |\n          # Add commands to mirror the main branch to master here\n          echo \"Mirroring main branch to master...\"\n          # Example command (replace with actual Dart commands)\n          dart run mirror_main_to_master.dart\n\n      # Set the GITHUB_TOKEN permission for all jobs\n    permissions:\n      actions:\n        id: GITHUB_TOKEN\n        scopes: ['read:actions', 'read:security']\n```", "answer": "```yaml # Copyright 2013 The Flutter Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Mirror master to main branches in the gallery repository.\non:\n  push:\n    branches:\n      - 'main'\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  mirror_job:\n    permissions:\n      pull-requests: write\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'flutter/samples' }}\n    name: Mirror main branch to master branch\n    steps:\n      - name: Mirror action step\n        id: mirror\n        uses: google/mirror-branch-action@c6b07e441a7ffc5ae15860c1d0a8107a3a151db8\n        with:\n          github-token: ${{ secrets.FLUTTERMIRRORINGBOT_TOKEN }}\n          source: 'main'\n          dest: 'master'\n```"}
{"id": "63c49df833b087f6bde5cc43", "level": "level2", "llm_response": " ```yaml\nname: Check Arduino\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested, review_requested, commented, closed]\n  schedule:\n    - cron: '0 8 * * TU'\n  workflow_dispatch:\n  app_dispatch:\n    types: [workflow_dispatch]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Arduino Lint\n        run: |\n          # Commands to run Arduino Lint tool\n          echo \"Running Arduino Lint...\"\n          # Example command (replace with actual linting command)\n          arduino-lint --project-path .\n```", "answer": "```yaml name: Check Arduino\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by new rules added to Arduino Lint.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Arduino Lint\n        uses: arduino/arduino-lint-action@v1\n        with:\n          compliance: specification\n          library-manager: update\n          # Always use this setting for official repositories. Remove for 3rd party projects.\n          official: true\n          project-type: library\n```"}
{"id": "63c496fb33b087f6bde2f916", "level": "level2", "llm_response": " ```yaml\nname: automerge\n\non:\n  pull_request:\n    types: [labeled, unlabeled, edited, reopened, locked, review_requested, synchronize, checked]\n  workflow_dispatch:\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        run: |\n          # Add your automerge logic here\n          echo \"Auto-merge logic for Python pull requests\"\n```", "answer": "```yaml name: automerge\non:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - synchronize\n      - opened\n      - edited\n      - ready_for_review\n      - reopened\n      - unlocked\n  pull_request_review:\n    types:\n      - submitted\n  check_suite:\n    types:\n      - completed\n  status: {}\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: \"pascalgn/automerge-action@f81beb99aef41bb55ad072857d43073fba833a98\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49b2fcbc73931bb198927", "level": "level2", "llm_response": " ```yaml\nname: PHP Lint\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths:\n      - '**.php'\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install PHP\n        run: sudo apt-get install php\n\n      - name: Lint PHP files\n        run: php -l .\n```", "answer": "```yaml name: \"PHP Lint\"\n\non:\n  - push\n  - pull_request\n\njobs:\n  tests:\n    name: \"Lint\"\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        php-version:\n          - \"5.3\"\n          - \"8.0\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v3\"\n\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"${{ matrix.php-version }}\"\n\n      - name: \"Lint PHP files\"\n        run: \"find src/ -type f -name '*.php' -print0 | xargs -0 -L1 -P4 -- php -l -f\"\n```"}
{"id": "63c4a17e6fc19abdf9ce2c3f", "level": "level2", "llm_response": " ```yaml\nname: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build and Publish\n        env:\n          TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}\n        run: |\n          python setup.py sdist bdist_wheel\n          twine upload dist/*\n```", "answer": "```yaml name: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n    - name: Install Dependencies\n      run: |\n        python3 -m pip install --upgrade pip\n        pip install setuptools wheel twine build\n    - name: Build and Publish\n      working-directory: core\n      env:\n        TWINE_PASSWORD: ${{ secrets.RATARMOUNTCORE_TWINE_PASSWORD }}\n      run: |\n        python3 -m build\n        twine check dist/*\n        twine upload --skip-existing -u __token__ dist/*\n```"}
{"id": "63c4a01b6fc19abdf9cda80e", "level": "level2", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - devel\n      - devel4\n      - devel5\n      - master\n  pull_request:\n    branches:\n      - devel\n      - devel4\n      - devel5\n  schedule:\n    - cron: '01 20 * * wed'\n  workflow_dispatch:\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n\n      - name: Autobuild\n        run: |\n          make autobuild\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"devel\", \"devel4\", \"devel5\", \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"devel\", \"devel4\", \"devel5\" ]\n  schedule:\n    - cron: '20 1 * * 3'\n  workflow_dispatch:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with: { submodules: true }\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0b1cbc73931bb1bc0b8", "level": "level2", "llm_response": " ```yaml\nname: Java CI with Maven\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    repositories: [ '<your-repo-name>' ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '1.8'\n          distribution: 'adopt'\n\n      - name: Run unit tests\n        run: mvn test\n```\n\nPlease note that the original request mentions Digital Command Language (DCL), which is not typically used for GitHub Actions workflows. The above YAML is written for a Java project using Maven, assuming that's the intent. If you meant to use a different language or toolset, please provide the correct context.", "answer": "```yaml # Run mvn test to ensure all tests pass\n\nname: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up JDK 1.8\n      uses: actions/setup-java@v3\n      with:\n        java-version: 8\n        distribution: zulu\n    - name: Run unit tests\n      run: mvn test\n```"}
{"id": "63c49b06517fc08c1eeedd30", "level": "level2", "llm_response": " ```yaml\nname: CLA Assistant\non:\n  issues:\n    types: [opened, edited, labeled, unlabeled]\n  pull_requests:\n    types: [opened, synchronize, rebase, merged]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: sign-or-recheck\n        id: sign-or-recheck\n        # Here you would define the steps for the sign-or-recheck step\n        # This could include actions like checking for code style, running tests, etc.\n\n      - name: CLA Assistant\n        run: echo \"This step represents the main logic of the CLA Assistant workflow.\"\n        # Here you would define the steps for the CLA Assistant step\n        # This could include actions like linting, formatting, deploying, etc.\n```\n\nPlease note that the above YAML file is a template and does not contain the actual commands or scripts that would be run in the `sign-or-recheck` and `CLA Assistant` steps. You would need to fill in the details based on the specific tasks you want to perform in each step.", "answer": "```yaml name: \"CLA Assistant\"\non:\n  # issue_comment triggers this action on each comment on issues and pull requests\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-regex-match@v2\n        id: sign-or-recheck\n        with:\n          text: ${{ github.event.comment.body }}\n          regex: '\\s*(I have read the CLA Document and I hereby sign the CLA)|(recheckcla)\\s*'\n      \n      - name: \"CLA Assistant\"\n        if: ${{ steps.sign-or-recheck.outputs.match != '' || github.event_name == 'pull_request_target' }}\n        # Alpha Release\n        uses: cla-assistant/github-action@v2.1.1-beta\n        env:\n          # Generated and maintained by github\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # JFrog organization secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.CLA_SIGN_TOKEN }}\n        with:\n          path-to-signatures: 'signed_clas.json'\n          path-to-document: 'https://jfrog.com/cla/'\n          remote-organization-name: 'jfrog'\n          remote-repository-name: 'jfrog-signed-clas'\n          # branch should not be protected\n          branch: 'master'\n          allowlist: bot*\n```"}
{"id": "63c49c9233b087f6bde53b34", "level": "level2", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  validate_pr_title:\n    runs-on: ubuntu-latest\n    name: Validate PR title\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Lint TypeScript PR title\n        uses: typeorm-action/lint@v1\n        env:\n          TYPEORM_ENTITIES: \"src/**/*.entity.ts\"\n          TYPEORM_DATABASE: \"postgres\"\n          TYPEORM_HOST: \"localhost\"\n          TYPEORM_USERNAME: \"${{ secrets.TYPEORM_USERNAME }}\"\n          TYPEORM_PASSWORD: \"${{ secrets.TYPEORM_PASSWORD }}\"\n          TYPEORM_PORT: \"5432\"\n          TYPEORM_DATABASE_URL: \"postgres://${{ secrets.TYPEORM_USERNAME }}:${{ secrets.TYPEORM_PASSWORD }}@${{ steps.checkout.outputs.host }}:${{ steps.checkout.outputs.port }}/${{ github.ref_name }}\"\n          TYPEORM_LOGGING: \"false\"\n        with:\n          title: \"${{ github.event.pull_request.title }}\"\n```\n\nPlease note that the `lint TypeScript PR title` step is a placeholder and assumes the existence of a custom action or script named `typeorm-action/lint` that can lint the pull request title. In reality, you would need to define a custom action or script that performs the desired linting operation for the TypeScript PR title. The environment variables and inputs used in this example are for illustrative purposes and should be adjusted to match your actual TypeORM configuration and secrets.", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            cleanup\n            docs\n            chore\n          # Configure which scopes are allowed.\n          scopes: |\n            admin\n            store\n            theme\n            server\n          # Configure that a scope must always be provided.\n          requireScope: false\n```"}
{"id": "63c49b9f1e3364807579baef", "level": "level2", "llm_response": " ```yaml\nname: Release Management\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache Object Files\n        id: cache_object_files\n        uses: actions/cache@v2\n        with:\n          path: |\n            path/to/object_files\n            path/to/dependencies\n          key: ${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/CMakeLists.txt.in') }}\n\n      - name: Build\n        run: cmake --build . --config Release\n\n      - name: Create Archive\n        run: zip -r release.zip path/to/build/directory\n\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v2\n        with:\n          name: release-binaries\n          path: release.zip\n\n      - name: Update Release\n        id: update_release\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.upload_url }}\n          asset_path: release.zip\n          asset_name: release.zip\n          asset_content_type: application/zip\n```\nThis YAML file defines a GitHub Actions workflow named `Release Management` that triggers on push events to the `develop` branch. It contains a single job called `build_and_upload` with six steps: caching object files, building the project, creating an archive of the build, uploading binaries as an artifact, updating a GitHub release, and uploading the release asset. The workflow uses the `actions/cache` and `actions/upload-release-asset` actions, and it utilizes GitHub secrets and outputs for authentication and file handling.", "answer": "```yaml name: Release Management\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    name: Build SU2\n    strategy:\n      fail-fast: false\n      matrix:\n        os_bin: [macos64, macos64-mpi, linux64, linux64-mpi, win64, win64-mpi]\n        include:\n          - os_bin: win64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_windows'\n          - os_bin: win64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_windows_mpi'\n          - os_bin: macos64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_darwin'\n          - os_bin: macos64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_darwin_mpi'\n          - os_bin: linux64\n            flags: '-Dwith-mpi=disabled -Dstatic-cgns-deps=true --cross-file=/hostfiles/hostfile_linux'\n          - os_bin: linux64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_linux_mpi'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache Object Files\n        uses: actions/cache@v3\n        with:\n          path: ccache\n          key: ${{ matrix.os_bin }}-${{ github.sha }}\n          restore-keys: ${{ matrix.os_bin }}\n      - name: Build\n        uses: docker://ghcr.io/su2code/su2/build-su2-cross:220716-1459\n        with:\n          args: -b ${{ github.sha }} -f \"${{matrix.flags}}\"\n      - name: Create Archive\n        run: |\n          cd install\n          zip -r ../${{matrix.os_bin}}.zip bin/*\n        # Uploads binaries as artifacts (just as a backup)\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{matrix.os_bin}}\n          path: ${{matrix.os_bin}}.zip\n        # Update the release notes of latest draft release\n      - uses: talbring/jenkins-release-drafter@v5.2.0-jenkins-11\n        name: Update Release\n        id: update_release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Upload binaries as assets to draft release\n      - name: Upload Release Asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.uploadurl }}\n          asset_path: ${{matrix.os_bin}}.zip\n          asset_name: SU2-${{ steps.update_release.outputs.tagname }}-${{matrix.os_bin}}.zip\n          asset_content_type: application/zip\n          \n```"}
{"id": "63c49c0e1e3364807579e6b2", "level": "level2", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install PHP\n        run: sudo apt-get update && sudo apt-get install php\n\n      - name: Run Script\n        run: php lint-script.php\n```", "answer": "```yaml name: Lint\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.0'\n\n    - name: Run Script\n      run: |\n        composer global require phpstan/phpstan\n        for dir in $(find * -type d -name src -not -path 'appengine/*' -not -path '*/vendor/*' -exec dirname {} \\;);\n        do\n          composer install --working-dir=$dir --ignore-platform-reqs\n          echo \"<?php require_once 'testing/sample_helpers.php';require_once '$dir/vendor/autoload.php';\" > autoload.php\n          ~/.composer/vendor/bin/phpstan analyse $dir/src --autoload-file=autoload.php\n        done\n```"}
{"id": "63c49df7cbc73931bb1aa759", "level": "level2", "llm_response": " ```yaml\nname: Pull Request Labeler\non:\n  schedule:\n    - cron: '*/5 * * * *'\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n```\n\nPlease provide the specific step name or action to complete the YAML file. The placeholder `''` needs to be replaced with the actual name of the step, such as `checkout`, `set-up-python`, `run-tests`, etc., depending on the intended workflow.", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  schedule:\n  - cron: \"*/5 * * * *\"\n\njobs:\n  triage:\n    if: github.repository == 'eclipse/omr'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: fjeremic/cron-labeler@0.3.0\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c497e71e33648075784188", "level": "level2", "llm_response": " ```yaml\nname: PR Labeling\n\non:\n  pull_request:\n    types: [opened, edited, reopened, ready_for_review]\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel lgtm\n        env:\n          GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n        run: |\n          # Step to cancel LGTM on the pull request\n          echo \"Canceling LGTM for PR: ${{ github.event.number }}\"\n          # Add the actual command to cancel LGTM here\n```", "answer": "```yaml name: 'PR Labeling'\n\non:\n  pull_request_target:\n    types: [synchronize]\n\npermissions:\n  pull-requests: write\n\nenv:\n  GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel lgtm\n        run: |\n          gh pr -R ${{ github.repository }} edit ${{ github.event.pull_request.number }} --remove-label \"lgtm\"\n```"}
{"id": "63c49dc9cbc73931bb1a9737", "level": "level2", "llm_response": " ```yaml\nname: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 19 * * *'\n\njobs:\n  forward-algo-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build GAE and coordinator\n        run: |\n          # Commands to build GAE and coordinator\n\n      - name: Run Forward algorithms test\n        run: |\n          # Commands to run the forward algorithms test\n\n      - name: Upload Coverage\n        run: |\n          # Commands to upload coverage reports\n```\nNote: The actual commands for building GAE and coordinator, running the forward algorithms test, and uploading coverage reports need to be filled in according to the specific requirements of the project. The placeholder comments should be replaced with the appropriate shell commands or scripts.", "answer": "```yaml name: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    # The notifications for scheduled workflows are sent to the user who\n    # last modified the cron syntax in the workflow file.\n    # Trigger the workflow at 03:00(CST) every day.\n    - cron:  '00 19 * * *'\n\njobs:\n  forward-algo-test:\n    if: ${{ github.ref == 'refs/heads/main' && github.repository == 'alibaba/GraphScope' }}\n    runs-on: ubuntu-20.04\n    defaults:\n      run:\n        shell: bash --noprofile --norc -eo pipefail {0}\n    container:\n      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.9.0\n      options:\n        --shm-size 4096m\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build GAE and coordinator\n      run: |\n        pushd ${GITHUB_WORKSPACE}\n        make gae ENABLE_JAVA_SDK=OFF BUILD_TEST=OFF NUMPROC=1\n        # also make coordinator and client for python test\n        make coordinator && make client\n        popd\n\n    - name: Run Forward algorithms test\n      env:\n        DEPLOYMENT: 'standalone'\n      run: |\n        cd ${GITHUB_WORKSPACE}/python\n        python3 -m pytest --cov=graphscope --cov-config=.coveragerc --cov-report=xml \\\n          --cov-report=term -s -v -m \"not slow\" graphscope/nx/algorithms/tests/forward\n\n    - name: Upload Coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./python/coverage.xml\n        fail_ci_if_error: true\n```"}
{"id": "63c49e7d1e336480757add5b", "level": "level2", "llm_response": " ```yaml\nname: generate-tag\non:\n  workflow_dispatch:\n    inputs:\n      stage-this:\n        description: 'Select the stage of the release'\n        required: true\n        default: 'auto'\n        type: choice\n        options: ['alpha', 'beta', 'rc', 'final', 'auto']\n      scope-this:\n        description: 'Select the scope of the release'\n        required: true\n        default: 'auto'\n        type: choice\n        options: ['minor', 'major', 'auto']\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n      - name: Gradle build\n        run: ./gradlew build\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\n  generate-tag:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n      - name: Generate Tag\n        run: ./gradlew generate-tag --stage ${{ github.event.inputs.stage-this }} --scope ${{ github.event.inputs.scope-this }}\n      - name: Push\n        uses: JamesIves/github-push-action@v7.4.2\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n          force: true\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n```", "answer": "```yaml name: generate-tag\n\non:\n  workflow_dispatch:\n    branches: [main]\n    inputs:\n      stage:\n        description: 'Stage'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'alpha'\n          - 'beta'\n          - 'rc'\n          - 'final'\n          - 'auto'\n      scope:\n        description: 'Scope'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'minor'\n          - 'major'\n          - 'auto'\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Gradle build\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace build \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\n  generate-tag:\n    runs-on: ubuntu-latest\n\n    needs:\n      - build\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.TOKEN_GITHUB_ACTION }}\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Generate Tag\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace createSemverTag \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Push\n        run: git push --follow-tags\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n```"}
{"id": "63c49da4517fc08c1eefe37e", "level": "level2", "llm_response": " ```yaml\nname: e2e test all\n\non: [pull_request]\n\nenv:\n  PRISMA_TELEMETRY_INFORMATION: prisma-client-go e2e-test.yml\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: deps\n        run: |\n          # Commands to install dependencies\n      - name: generate\n        run: |\n          # Commands to generate necessary files\n      - name: test\n        run: |\n          # Commands to run e2e tests\n```\n\nPlease replace the placeholder names (e.g., `''`) with the actual commands or actions you want to execute in each step.", "answer": "```yaml name: e2e test all\non: pull_request\nenv:\n  PRISMA_TELEMETRY_INFORMATION: \"prisma-client-go e2e-test.yml\"\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.19'\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/.cache\n          restore-keys: ${{ runner.os }}-go-\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n\n      - name: deps\n        run: go mod download\n\n      - name: generate\n        run: |\n          cd test/e2e/\n          go generate -tags e2e ./...\n        # env:\n        #   DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n\n      - name: test\n        run: |\n          cd test/e2e/\n          go test ./... -run '^TestE2E.*$' -tags e2e -v\n        env:\n          # DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n          PRISMA_CLIENT_GO_LOG: info\n```"}
{"id": "63c49e501842bc13d778ff97", "level": "level2", "llm_response": " ```yaml\nname: Linter\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths: ['**.go']\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Run Golint\n        run: |\n          go get -u golang.org/x/lint/golint\n          golint ./...\n```", "answer": "```yaml on: [push, pull_request]\nname: Linter\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v3.1.0\n      - name: Run Golint\n        uses: reviewdog/action-golangci-lint@v2\n        with:\n          golangci_lint_flags: \"--tests=false\"\n```"}
{"id": "63c498d31899db58864e2905", "level": "level2", "llm_response": " ```yaml\nname: TOC Generator\non:\n  push:\n    paths:\n      - 'README.md'\njobs:\n  generateTOC:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate Table of Contents\n        run: |\n          # Command to generate TOC for README.md\n          echo \"Generating Table of Contents for README.md\"\n          # Example command (replace with actual TOC generation command for C#)\n          dotnet tool run toc-generator --input README.md --output README.md.toc\n```\n\nPlease note that the actual command to generate the Table of Contents (TOC) will depend on the tool or script you are using. The placeholder `dotnet tool run toc-generator` is a generic example and should be replaced with the correct command for your specific setup.", "answer": "```yaml name: TOC Generator\n\non:\n  push:\n    paths:\n      - 'ReadMe.md'\n\njobs:\n  generateTOC:\n    name: TOC Generator\n    runs-on: ubuntu-latest\n    steps:\n      - uses: technote-space/toc-generator@v2.4.0\n        with:\n          TOC_TITLE: \"## Table of Contents\"\n```"}
{"id": "63c498e96fc19abdf9cac426", "level": "level2", "llm_response": " ```yaml\nname: Update Python Dependencies\non:\n  workflow_dispatch:\n\njobs:\n  update_python_dependencies:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.8'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Test with pytest\n      run: |\n        pytest\n```", "answer": "```yaml name: Update Python Dependencies\n\non:\n    workflow_dispatch:\n\njobs:\n    update_python_dependencies:\n        uses: SFDO-Tooling/.github/.github/workflows/update_python_dependencies.yml@main\n        with:\n            python-version: 3.8\n```"}
{"id": "63c499601899db58864e6352", "level": "level2", "llm_response": " ```yaml\nname: Issue Closer\non:\n  issues:\n    types: [opened, reopened]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        run: |\n          git config --local user.email \"action[bot]\"\n          git config --local user.name \"GitHub Action\"\n          git checkout main\n          git pull origin main\n          git checkout issue-closer-branch\n          git checkout -b issue-closer-branch\n          git add .\n          git commit -m \"Closing the issue\"\n          git push origin issue-closer-branch\n          git checkout main\n          git merge issue-closer-branch\n          git push origin main\n          # Here you can add a step to notify the issue being closed\n          echo \"Issue has been closed.\"\n```", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Issue Closer\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  issues:\n    types: [ opened, reopened ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: Close Issue\n        uses: peter-evans/close-issue@v1.0.1\n        with:\n          comment: |\n           **Use [Discuss Issues](https://discuss.dgraph.io/c/issues/35/clients/46) for reporting issues about this repository.**\n```"}
{"id": "63c496dccbc73931bb17caa5", "level": "level2", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8 black isort\n\n      - name: Lint with flake8\n        run: |\n          # Stop the workflow if it fails.\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n          # Exit with a non-zero status if there are issues.\n          exit ${{ steps.flake8.outcome.status }}\n\n      - name: Format with Black\n        run: |\n          black --check .\n\n      - name: Format with isort\n        run: |\n          isort . --check-only\n\n      - name: Finalize\n        run: echo \"Pre-commit checks passed!\"\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v3\n    - uses: pre-commit/action@v3.0.0\n```"}
{"id": "63c49e4f736e7f0ed8c67231", "level": "level2", "llm_response": " ```yaml\nname: CMake\n\non:\n  push:\n    branches:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    runs-on: windows-latest\n    steps:\n      - name: ''\n      - name: Windows: Configure environment\n      - name: Linux: Install dependency libraries\n      - name: Configure CMake\n      - name: Build\n      - name: Test\n      - name: ''\n\n  package:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Create plugin archive\n      - name: Upload binaries to release\n```\n\nPlease note that the placeholders (empty strings) in the `name` fields for each step need to be replaced with the actual commands or scripts you want to execute for each step. For example, you might use `echo \"Configuring environment\"` for the first step in the `build` job or `echo \"Creating plugin archive\"` for the first step in the `package` job.\n\nAlso, the `*` in the `branches` sections is a wildcard that matches any branch name. If you want to trigger the workflow only for specific branches, you should specify those branch names instead.", "answer": "```yaml name: CMake\n\non:\n  push:\n    branches: [ \"*\" ]\n  pull_request:\n    branches: [ \"*\" ]\n  release:\n    type: [created, edited]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macos-latest\n\n    runs-on: ${{matrix.os}}\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Windows: Configure environment\"\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        # Select MinGW toolchain instead of the default MSVC.\n        echo \"CMAKE_GENERATOR=MinGW Makefiles\" >> $GITHUB_ENV\n\n    - name: \"Linux: Install dependency libraries\"\n      if: runner.os == 'Linux'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y --no-install-recommends freeglut3-dev libudev-dev libopenal-dev\n\n    - name: Configure CMake\n      working-directory: ${{github.workspace}}/src\n      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      working-directory: ${{github.workspace}}/src\n      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}\n\n    - name: Test\n      working-directory: ${{github.workspace}}/build\n      run: ctest -C ${{env.BUILD_TYPE}}\n      \n    - uses: actions/upload-artifact@v2\n      with:\n        name: binaries\n        path: ${{github.workspace}}/build/*.xpl\n        if-no-files-found: error\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: binaries\n          path: FlyWithLua/64\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: FlyWithLua_plugin\n          path: |\n            ${{github.workspace}}/FlyWithLua*\n          if-no-files-found: error\n\n      - name: Create plugin archive\n        if: github.event_name == 'release'\n        run: zip -r FlyWithLua_NG_Lin_Mac_Win.zip FlyWithLua/\n\n      - name: Upload binaries to release\n        if: github.event_name == 'release'\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: FlyWithLua_NG_Lin_Mac_Win.zip\n          tag: ${{ github.ref }}\n          overwrite: true\n```"}
{"id": "63c49cd8b008460c1df3d38d", "level": "level2", "llm_response": " ```yaml\nname: GraalVM CE CI\n\non:\n  push:\n    branches:\n      - master\n      - '[1-9][0-9]*.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9][0-9]*.[0-9]+.x'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Free disk space\n        run: |\n          df -h | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{print $4 \" \" $5}' | xargs -I {} sh -c 'if [ `echo {} | cut -d\" \" -f1` -lt 1000 ]; then exit 1; fi'\n\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup GraalVM CE\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: latest\n\n      - name: Build with Gradle\n        run: ./gradlew build\n\n      - name: Publish Test Report\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-reports\n          path: ./build/reports\n```\nPlease note that the placeholder steps ``, `Setup GraalVM CE`, `Build with Gradle`, and `Publish Test Report` are not defined with actual commands. You will need to replace these placeholders with the appropriate commands for your specific workflow. For example, `Setup GraalVM CE` might involve downloading and setting up the GraalVM SDK, and `Publish Test Report` might involve uploading a generated report to an artifact repository or a different service.", "answer": "```yaml # WARNING: Do not edit this file directly. Instead, go to:\n#\n# https://github.com/micronaut-projects/micronaut-project-template/tree/master/.github/workflows\n#\n# and edit them there. Note that it will be sync'ed to all the Micronaut repos\nname: GraalVM CE CI\non:\n  push:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\njobs:\n  build:\n    if: github.repository != 'micronaut-projects/micronaut-project-template'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: ['17']\n        graalvm: ['latest', 'dev']\n    steps:\n       # https://github.com/actions/virtual-environments/issues/709\n      - name: Free disk space\n        run: |\n         sudo rm -rf \"/usr/local/share/boost\"\n         sudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\n         sudo apt-get clean\n         df -h\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n      - name: Setup GraalVM CE\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: ${{ matrix.graalvm }}\n          java-version: ${{ matrix.java }}\n          components: 'native-image'\n      - name: Build with Gradle\n        run: |\n          if ./gradlew tasks --no-daemon --all | grep -w \"testNativeImage\"\n          then\n            ./gradlew check testNativeImage --continue --no-daemon\n          else\n            ./gradlew check --continue --no-daemon\n          fi\n        env:\n           TESTCONTAINERS_RYUK_DISABLED: true\n           GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n           GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}\n           GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}\n           PREDICTIVE_TEST_SELECTION: \"${{ github.event_name == 'pull_request' && 'true' || 'false' }}\"\n      - name: Publish Test Report\n        if: always()\n        uses: mikepenz/action-junit-report@v3.5.2\n        with:\n          check_name: GraalVM CE CI / Test Report (Java ${{ matrix.java }})\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          check_retries: 'true'\n```"}
{"id": "63c49fbe1e336480757b5ce4", "level": "level2", "llm_response": " ```yaml\nname: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16.x'\n\n      - name: \ud83d\udce5 Monorepo install\n        run: npm install\n\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        run: |\n          # Commands to create a release pull request or publish to npm\n          # This is a placeholder for actual commands\n          echo \"Creating release PR or publishing to npm\"\n```", "answer": "```yaml name: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    # Basic security: the release job can only be executed from this repo and from the main branch (not a remote thing)\n    if: ${{ github.repository == 'belgattitude/nextjs-monorepo-example' && contains('refs/heads/main',github.ref)}}\n    name: Release and changelog\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # To run comparison we need more than the latest commit.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: \ud83d\udce5 Monorepo install\n        uses: ./.github/actions/yarn-nm-install\n\n      # @link https://github.com/changesets/action\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        uses: changesets/action@v1\n        with:\n          # publish: yarn g:release\n          cwd: ${{ github.workspace }}\n          title: '[Release] Version packages'\n          # Optional, might be used in conjunction with GITHUB_TOKEN to\n          # allow running the workflows on a Version package action.\n          # Be aware of security implications.\n          # setupGitUser: true\n        env:\n          # See https://github.com/changesets/action/issues/147\n          HOME: ${{ github.workspace }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Uncomment and add secrets to allow publishing\n          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49bb533b087f6bde4ddd4", "level": "level2", "llm_response": " ```yaml\nname: Pull Request Labeler\n\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Label Pull Request\n        run: |\n          # Here you would implement the logic to label the pull request\n          # This is a placeholder for the actual TypeScript code or script\n          echo \"Labeling pull request...\"\n```\n\nPlease note that the `Label Pull Request` step is a placeholder. You would need to replace it with actual TypeScript code or a script that interacts with GitHub's API to label the pull request. You may also need to set up a GitHub Action secrets to authenticate with the GitHub API.", "answer": "```yaml name: 'Pull Request Labeler'\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: DataDog/labeler@glob-all\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n```"}
{"id": "63c4972e1899db58864d7e70", "level": "level2", "llm_response": " ```yaml\nname: Dependabot auto-merge\non:\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, locked, unlocked]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        # Add steps for metadata here\n\n      - name: Enable auto-merge for Dependabot PRs\n        # Add steps for enabling auto-merge here\n```\nPlease note that the above YAML file is a template and does not contain specific commands or scripts for the `metadata` and `Enable auto-merge for Dependabot PRs` steps. You will need to fill in the appropriate commands or scripts for those steps based on your specific requirements.", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.0\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49da46fc19abdf9cca9c1", "level": "level2", "llm_response": " ```yaml\nname: build\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Cache Go\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/go/src\n            ~/go/bin\n          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}\n      - name: Cache Envoy binaries\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.envoy\n            ~/.envoy/bin\n          key: ${{ runner.os }}-${{ hashFiles('**/envoy.yaml') }}\n      - name: Verify clean check-in\n        run: |\n          git diff --quiet\n          if [ $? -ne 0 ]; then exit 1; fi\n      - name: Run unit tests\n        run: go test ./... -v\n      - name: Build the func-e binary\n        run: go build -o func-e ./...\n      - name: Run e2e tests using the func-e binary\n        run: ./func-e --e2e\n      - name: Run e2e tests using the func-e binary (CentOS)\n        run: ./func-e --e2e --os=centos\n      - name: Generate coverage report\n        run: go tool cover -html=./coverage.out -o coverage.html\n      - name: Upload coverage report\n        uses: actions/upload-artifact@v2\n        with:\n          name: coverage-report\n          path: coverage.html\n```", "answer": "```yaml # `name` value will appear \"as is\" in the badge.\n# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository\n# yamllint --format github .github/workflows/commit.yaml\n---\nname: \"build\"\n\non:\n  push:  # We run tests on non-tagged pushes to master\n    tags: ''\n    branches: master\n    # ignore docs as they are built with Netlify. Ignore travis-related changes, too.\n    # func-e.wxs is used for the Windows Installer, so tested with msi.yaml\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:  # We also run tests on pull requests targeted at the master branch.\n    branches: master\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.\n  # For example, you can try to build a branch without raising a pull request.\n  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow\n  workflow_dispatch:\n\ndefaults:\n  run:  # use bash for all operating systems unless overridden\n    shell: bash\n\njobs:\n  test:\n    name: \"Run unit tests (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 90  # instead of 360 by default\n    strategy:\n      fail-fast: false  # don't fail fast as sometimes failures are operating system specific\n      matrix:  # use latest available versions and be consistent on all workflows!\n        os: [ubuntu-20.04, macos-12, windows-2022]\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: \"Cache Go\"\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          # go.mod for go release version, go.sum for modules used, and Tools.mk for 'go run' tools\n          key: test-${{ runner.os }}-go-${{ hashFiles('go.mod', 'go.sum', 'Tools.mk') }}\n          restore-keys: test-${{ runner.os }}-go-\n\n      - name: \"Cache Envoy binaries\"\n        uses: actions/cache@v3\n        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall\n          path: ~/.func-e/versions\n          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}\n          restore-keys: test-${{ runner.os }}-envoy-\n\n      - name: \"Verify clean check-in\"\n        run: make check\n\n      - name: \"Run unit tests\"\n        run: make test\n\n      - name: \"Build the `func-e` binary\"\n        run: make build\n\n      - name: \"Run e2e tests using the `func-e` binary\"\n        run: make e2e\n\n      - name: \"Run e2e tests using the `func-e` binary (CentOS)\"\n        if: runner.os == 'Linux'\n        run: docker run --rm -v $HOME/.func-e:$HOME/.func-e -v $PWD:/work ${CENTOS_IMAGE} -o ${E2E_FUNC_E_PATH}/func-e e2e\n        env:  # CENTOS_IMAGE was built by internal-images.yaml; E2E_FUNC_E_PATH was built via `make build`\n          CENTOS_IMAGE: ghcr.io/tetratelabs/func-e-internal:centos-8\n          E2E_FUNC_E_PATH: build/func-e_linux_amd64\n\n      - name: \"Generate coverage report\"  # only once (not per OS)\n        if: runner.os == 'Linux'\n        run: make coverage\n\n      - name: \"Upload coverage report\"  # only on master push and only once (not per OS)\n        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'\n        uses: codecov/codecov-action@v2\n        with:\n          file: ./coverage.txt\n```"}
{"id": "63c4a0b91842bc13d779f860", "level": "level2", "llm_response": " ```yaml\nname: update-flake\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 7 * * 2'\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install Nix\n        run: |\n          curl -L https://nixos.org/nix/install | bash -s -- --no-warn-untested\n\n      - name: generate-token\n        run: |\n          echo \"Generating token...\"\n          # Add logic here to generate a token\n\n      - name: Update flake.lock\n        run: |\n          # Add logic here to update flake.lock\n```", "answer": "```yaml name: update-flake\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '45 7 * * 2' # runs weekly on Tuesday at 07:45\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: tibdex/github-app-token@v1\n        id: generate-token\n        with:\n          app_id: 207529\n          private_key: ${{ secrets.STEWARD_PRIVATE_KEY }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          branch: update/flake-lock-${{ github.run_number }}\n```"}
{"id": "63c4a13633b087f6bde7145d", "level": "level2", "llm_response": " ```yaml\nname: Master - CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Julia ${{ matrix.julia-version }} - ${{ matrix.os }}:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.5, 1.6, 1.7]\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - name: Install dependencies\n        run: julia --project=@. -e 'using Pkg; Pkg.instantiate()'\n\n      - name: Run tests\n        run: julia --project=@. -e 'using Pkg; Pkg.test()'\n\n      - name: Generate coverage report\n        run: julia --project=@. -e 'using Pkg; Pkg.test(flags=[\"cov\"], coverage=true)'\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v1\n\n      - name: Commit coverage report\n        uses: Endbear/commit-action@v4\n        with:\n          message: 'Update coverage report'\n          commit_message: 'Update coverage report'\n          branch: master\n```\nNote: The placeholder ` ` (space) in the step names has been replaced with actual step names. Additionally, the coverage report generation and uploading steps have been added as per standard CI practices. Adjust the specific Julia commands and coverage settings as needed for your project.", "answer": "```yaml name: Master - CI\n\non:\n  push:\n    branches:\n      - master\n    schedule:\n      - cron: 0 * * * *\njobs:\n  test:\n    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: ['1', 'nightly']\n        julia-arch: [x64]\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        continue-on-error: true\n        with:\n          version: ${{ matrix.julia-version }}\n          arch: ${{ matrix.julia-arch }}\n      - uses: julia-actions/julia-buildpkg@latest\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-runtest@latest\n        continue-on-error: ${{ matrix.julia-version == 'nightly' }}\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v1\n        with:\n          file: ./lcov.info\n          flags: unittests\n          name: codecov-umbrella\n          fail_ci_if_error: false\n          token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"id": "63c4a057517fc08c1ef0f4c2", "level": "level2", "llm_response": " ```yaml\nname: Autocloser\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Issue auto-closer\n        run: |\n          # Commands to automatically close the issue or perform related tasks\n          echo \"Issue auto-closing logic goes here\"\n```", "answer": "```yaml name: Autocloser\non: [issues]\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Issue auto-closer\n      uses: roots/issue-closer-action@v1.1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-close-message: \"@${issue.user.login} this issue was automatically closed because it did not follow the bellow rules:\\n\\n<pre>\\n\\n\\n\\nIMPORTANT: Please use the following link to create a new issue:\\n\\nhttps://www.creative-tim.com/new-issue/argon-dashboard\\n\\n**If your issue was not created using the app above, it will be closed immediately.**\\n\\n\\n\\nLove Creative Tim? Do you need Angular, React, Vuejs or HTML? You can visit:\\n\ud83d\udc49  https://www.creative-tim.com/bundles\\n\ud83d\udc49  https://www.creative-tim.com\\n\\n\\n</pre>\\n\\n\"\n        issue-pattern: (\\#\\#\\# Version([\\S\\s.*]*?)\\#\\#\\# Reproduction link([\\S\\s.*]*?)\\#\\#\\# Operating System([\\S\\s.*]*?)\\#\\#\\# Device([\\S\\s.*]*?)\\#\\#\\# Browser & Version([\\S\\s.*]*?)\\#\\#\\# Steps to reproduce([\\S\\s.*]*?)\\#\\#\\# What is expected([\\S\\s.*]*?)\\#\\#\\# What is actually happening([\\S\\s.*]*?)---([\\S\\s.*]*?)\\#\\#\\# Solution([\\S\\s.*]*?)\\#\\#\\# Additional comments([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)|(\\#\\#\\# What is your enhancement([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)\n```"}
{"id": "63c496fd33b087f6bde2f9ec", "level": "level2", "llm_response": " ```yaml\nname: Label Pull Requests\n\non: [pull_request]\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Add Labels for PR\n        run: |\n          # Commands to add labels to the pull request\n          echo \"Adding labels to PR\"\n\n      - name: Add PR Size Labels for PR\n        run: |\n          # Commands to add size labels to the pull request\n          echo \"Adding size labels to PR\"\n```", "answer": "```yaml name: Label Pull Requests\n\non:\n- pull_request_target\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Add Labels for PR\n      uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/labeler.yaml\n        sync-labels: true\n\n    - name: Add PR Size Labels for PR\n      uses: codelytv/pr-size-labeler@v1\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        xs_label: 'size/XS'\n        xs_max_size: '20'\n        s_label: 'size/S'\n        s_max_size: '50'\n        m_label: 'size/M'\n        m_max_size: '150'\n        l_label: 'size/L'\n        l_max_size: '300'\n        xl_label: 'size/XL'\n        fail_if_xl: 'false'\n        message_if_xl: >\n          'This PR has too many changes.\n          Please make sure you are NOT addressing multiple issues with one PR.'\n```"}
{"id": "63c49b4e33b087f6bde4b436", "level": "level2", "llm_response": " ```yaml\nname: deploy armeria\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths:\n      - 'build-bin/**'\n      - 'docker/**'\n      - 'armeria/**'\n      - '.github/workflows/deploy-armeria.yaml'\n      - 'parent-pom.xml'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}\n\n      - name: Deploy armeria\n        run: ./deploy-armeria.sh\n```", "answer": "```yaml # yamllint --format github .github/workflows/deploy.yml\n---\nname: deploy armeria\n\non:\n  # We deploy non-tagged pushes to master relevant for this project. We can't opt out of\n  # documentation-only commits because GH actions does not permit paths and paths-ignore.\n  push:\n    tags: ''\n    branches: master\n    paths:\n      - \"build-bin/**\"\n      - \"docker/**\"\n      - \"armeria/**\"\n      - \".github/workflows/deploy-armeria.yaml\"\n      - \"parent-pom.xml\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04  # newest available distribution, aka focal\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 1\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ./m2repository  # Shared with the Docker build context via .dockerignore\n          key: ${{ runner.os }}-armeria-maven-${{ hashFiles('parent-pom.xml', 'armeria/pom.xml') }}\n          restore-keys: ${{ runner.os }}-armeria-maven-\n      # We can't cache Docker without using buildx because GH actions restricts /var/lib/docker\n      # That's ok because DOCKER_PARENT_IMAGE is always ghcr.io and local anyway.\n      - name: Deploy armeria\n        env:\n          # GH_USER=<user that created GH_TOKEN>\n          GH_USER: ${{ secrets.GH_USER }}\n          # GH_TOKEN=<hex token value>\n          #   - pushes Docker images to ghcr.io\n          #   - create via https://github.com/settings/tokens\n          #   - needs repo:status, public_repo, write:packages, delete:packages\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: |\n          build-bin/configure_deploy armeria &&\n          build-bin/deploy armeria\n```"}
{"id": "63c49d9333b087f6bde5a392", "level": "level2", "llm_response": " ```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n    branches: [main]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        # Step content would be defined here, typically involving metadata retrieval or setup\n\n      - name: Enable auto-merge for Dependabot PRs\n        # Step content would be defined here, typically involving enabling auto-merge settings\n```\n\nPlease note that the `steps` section is left incomplete as the specific actions within those steps depend on the tasks you want to perform. You would need to add the appropriate `run` or `uses` keywords followed by the relevant actions or jobs to complete the steps.", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49fce1842bc13d779961e", "level": "level2", "llm_response": " ```yaml\nname: PR\n\non:\n  pull_request:\n    types: [opened, reopened, edited]\n\njobs:\n  GolangCI Lint:\n    runs-on: ubuntu-latest\n    job_id: lint\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run linter\n        run: go vet ./...\n\n  Run unit tests with the race detector enabled:\n    runs-on: ubuntu-latest\n    job_id: tests\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install GCC and C libraries required by the race detector\n        run: sudo apt-get update && sudo apt-get install -y gcc libc6-dev\n\n      - name: Run unit tests\n        run: go test -race ./...\n```", "answer": "```yaml name: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  lint:\n    name: GolangCI Lint\n    runs-on: ubuntu-latest\n    container: golangci/golangci-lint:v1.50-alpine\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Run linter\n      run: golangci-lint run\n\n  tests:\n    name: Run unit tests with the race detector enabled\n    runs-on: ubuntu-latest\n    container: golang:1.19-alpine\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 1\n\n      - name: Install GCC and C libraries required by the race detector\n        run: apk add --update gcc musl-dev\n\n      - name: Run unit tests\n        run: go test -v -race ./...\n```"}
{"id": "63c4a0e633b087f6bde6f51f", "level": "level2", "llm_response": " ```yaml\nname: Sync master to preview\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Merge master -> preview\n        run: |\n          git checkout preview\n          git merge master --no-ff -m \"Merging master into preview branch\"\n```", "answer": "```yaml name: Sync master to preview\n\n# When there's a push on master, we want to reflect it on preview too.\non:\n  push:\n    branches:\n      - 'master'\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n\n      - name: Merge master -> preview\n        uses: devmasx/merge-branch@v1.3.0\n        with:\n          type: now\n          head_to_merge: ${{ github.ref }}\n          from_branch: master\n          target_branch: preview\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a05b33b087f6bde6c178", "level": "level2", "llm_response": " ```yaml\nname: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Use Node.js 16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n\n  release:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v2\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Build & Release Electron app\n        run: |\n          npm run build\n          npm run electron-release\n```", "answer": "```yaml name: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v3\n        - name: Use Node.js 16\n          uses: actions/setup-node@v3\n          with:\n            node-version: 16\n        - run: yarn\n        - run: yarn test --detectOpenHandles --forceExit\n\n  release:\n    needs: test\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Build & Release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          github_token: ${{ secrets.github_token }}\n          release: true\n```"}
{"id": "63c496561899db58864d23d8", "level": "level2", "llm_response": " ```yaml\nname: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/molecule.prometheus.yml'\n      - '.config/molecule/config.yml'\n      - 'molecule/Dockerfile.*'\n      - 'molecule/prometheus/**'\n      - 'roles/prometheus/**'\n      - 'plugins/filter/prometheus_architecture.py'\n      - 'plugins/filter/yaml.py'\n  workflow_dispatch:\n\njobs:\n  prometheus:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        debug-this:\n          - false\n          - true\n    env:\n      DEBUG_THIS: ${{ matrix.debug-this }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install molecule\n    - name: Run Molecule\n      env:\n        MOLD_DEBUG: ${{ env.DEBUG_THIS == 'true' }}\n      run: |\n        molecule exec --runner tmate -- --state-file /tmp/molecule.state.yml --config /tmp/molecule.yml\n```", "answer": "```yaml name: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.prometheus.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/prometheus/**\n      - roles/prometheus/**\n      # Plugins\n      - plugins/filter/prometheus_architecture.py\n      - plugins/filter/yaml.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  prometheus:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: prometheus\n```"}
{"id": "63c49d6ecbc73931bb1a706f", "level": "level2", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '24 0 * * sun'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v1\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '24 0 * * 0'\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  analyze:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49752cbc73931bb17fa34", "level": "level2", "llm_response": " ```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to release'\n        required: false\n      force:\n        description: 'Force a release even when there are release-blockers'\n        required: false\n  schedule:\n    - cron: '0 17 15 * *'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        # Additional steps for the first step would go here\n\n      - name: Prepare release\n        # Additional steps for preparing the release would go here\n```\n\nPlease note that the placeholder `''` in the first step should be replaced with the actual steps required for that part of the workflow. The same applies to the `Prepare release` step, where you would add the necessary commands to prepare the release.", "answer": "```yaml name: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version to release (optional)\n        required: false\n      force:\n        description: Force a release even when there are release-blockers (optional)\n        required: false\n\n  schedule:\n    # We want the release to be at 9-10am Pacific Time\n    # We also want it to be 1 hour before the on-prem release\n    - cron: \"0 17 15 * *\"\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    name: \"Release a new Relay version\"\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GH_RELEASE_PAT }}\n          fetch-depth: 0\n\n      - name: Prepare release\n        uses: getsentry/action-prepare-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}\n        with:\n          version: ${{ github.event.inputs.version }}\n          force: ${{ github.event.inputs.force }}\n          calver: true\n```"}
{"id": "63c49b3c1e33648075799306", "level": "level2", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16.x'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Create Release Pull Request / NPM Publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish\n          # Additional commands to create a release pull request can be added here\n          # This might involve using GitHub API or a tool like `gh` CLI\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits\n          fetch-depth: 0\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n      - name: Install Dependencies\n        run: npm i\n\n      - name: Create Release Pull Request / NPM Publish\n        uses: changesets/action@v1\n        with:\n          publish: npm run changeset-publish\n          version: npm run changeset-version\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49e5b517fc08c1ef02da4", "level": "level2", "llm_response": " ```yaml\nname: Release-Notes-Preview\non:\n  pull_request:\n    branches:\n      - release-notes-preview-is-not-working\n  issues:\n    events:\n      - edited\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Generate Preview\n        run: python generate_preview.py\n```", "answer": "```yaml # https://github.com/marketplace/actions/release-notes-preview\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    # This workflow is not working for some reason. It is stuck with this message:\n    #  Release Notes Confirmation Pending \u2014 awaiting release notes review\n    #  Keeping the YAML file to check back again in the future\n    branches: [release-notes-preview-is-not-working] # [develop]\n  issue_comment:\n    types: [edited]\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          git fetch --prune --unshallow --tags\n      - uses: snyk/release-notes-preview@v1.6.2\n        with:\n          releaseBranch: develop\n        env:\n          GITHUB_PR_USERNAME: ${{ github.actor }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a621e33648075793e20", "level": "level2", "llm_response": " ```yaml\nname: macOS\n\non:\n  push:\n    branches:\n      - main\n      - 'issue*'\n      - 'release-*'\n  pull_request:\n    branches:\n      - main\n      - 'issue*'\n      - 'release-*'\n\njobs:\n  Compile and test planner:\n    runs-on: macOS-latest\n    steps:\n      - name: Clone repository\n        run: git clone https://github.com/your-username/your-repository.git\n\n      - name: Install Python\n        run: sudo apt-get install python3\n\n      - name: Compile planner\n        run: python3 compile_planner.py\n\n      - name: Install tox\n        run: pip install tox\n\n      - name: Install VAL\n        run: pip install val\n\n      - name: Run driver, translator and search tests\n        run: tox\n```\n\nPlease replace `https://github.com/your-username/your-repository.git` with the actual URL of your GitHub repository.", "answer": "```yaml ---\nname: macOS\n\non:\n  push:\n    branches: [main, issue*, release-*]\n  pull_request:\n    branches: [main, issue*, release-*]\n\njobs:\n  test:\n    name: Compile and test planner\n    timeout-minutes: 60\n    runs-on: ${{ matrix.version.macos }}\n    strategy:\n      matrix:\n        version:\n          - {macos: macos-11, python: '3.8'}\n          - {macos: macos-12, python: '3.10'}\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@master\n\n      - name: Install Python\n        uses: actions/setup-python@master\n        with:\n          python-version: ${{ matrix.version.python }}\n\n      - name: Compile planner\n        run: |\n          export CXXFLAGS=\"-Werror\" # Treat compilation warnings as errors.\n          ./build.py\n          ./build.py --debug\n\n      - name: Install tox\n        run: |\n          pip3 install tox\n\n      - name: Install VAL\n        run: |\n          brew install gnu-sed\n          git clone https://github.com/KCL-Planning/VAL.git\n          cd VAL\n          git checkout a5565396007eee73ac36527fbf904142b3077c74\n          make clean  # Remove old build artifacts and binaries.\n          gsed -i 's/-Werror //g' Makefile  # Ignore warnings.\n          make -j2\n          mv validate ../\n          cd ../\n          rm -rf VAL\n\n      - name: Run driver, translator and search tests\n        run: |\n          export PATH=\"$(pwd):$PATH\" # Add VAL to path.\n          cd misc\n          tox -e driver,translator,search\n\n...\n```"}
{"id": "63c49c571e336480757a03aa", "level": "level2", "llm_response": " ```yaml\nname: Add issues to project\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add issue to project\n        run: |\n          # Add your C# script or command to handle the issue here\n          echo \"Issue ${{ github.event.issue.number }} has been added to the project.\"\n```\n\nIn this YAML file, I've created a GitHub Actions workflow named `Add issues to project` that triggers on the event of an issue being opened in the repository. It contains a single job called `add-to-project` that runs on the latest Ubuntu runner. The job includes one step named `Add issue to project`, where you would implement the logic to add the issue to your project, such as updating a project file or sending a notification. The `echo` command is just a placeholder and should be replaced with the actual C# script or command that performs the desired action.", "answer": "```yaml name: Add isuses to project\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        with: \n          project-url: https://github.com/orgs/FirelyTeam/projects/6\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}```"}
{"id": "63c499b71842bc13d7772793", "level": "level2", "llm_response": " ```yaml\nname: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  CABAL_ARGS: --project-file=cabal.project.ci\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: True\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        ghc-version: ['8.10', '9.0.1']\n    name: Build on ${{ matrix.os }} with GHC-${{ matrix.ghc-version }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Haskell\n        uses: haskell/actions/setup-ghc@v1\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n      - name: Setup Node\n        run: npm install\n      - name: Setup BumpVer\n        run: npx bump-version@latest\n      - name: Setup HTMLProofer\n        uses: html-proofer/actions/html-proofer@v2\n      - id: setup-epubcheck\n        name: Setup EPUBCheck\n        run: npm install epubcheck\n      - name: Cache build\n        uses: actions/cache@v2\n        with:\n          path: ~/.cabal/packages\n          key: ${{ runner.os }}-${{ hashFiles('**/cabal.project.cabal') }}\n      - name: Build\n        run: cabal build\n      - name: Test with BumpVer\n        run: cabal test --with-bumpver\n      - name: Test with HTML-validate\n        run: cabal test --with-html-validate\n      - name: Test with HTMLProofer\n        run: cabal test --with-html-proofer\n      - name: Test with EPUBCheck\n        run: cabal test --with-epubcheck\n      - name: Upload latest artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: dist\n          path: dist\n\n  publish:\n    runs-on: ubuntu-latest\n    needs: build\n    name: Publish to GitHub Pages\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Node\n        run: npm install\n      - name: Publish to GitHub Pages\n        uses: actions/gh-pages@v2\n        with:\n          publish_dir: dist\n\n  release:\n    runs-on: ubuntu-latest\n    needs: build\n    name: Publish to GitHub Releases\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Node\n        run: npm install\n      - name: Publish to GitHub Releases\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n      - name: Upload release assets\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create-release.outputs.upload_url }}\n          asset_path: dist/your-artifact.zip\n          asset_name: your-artifact.zip\n          asset_content_type: application/zip\n```", "answer": "```yaml name: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    types:\n      - opened\n      - synchronize\n\nenv:\n  CABAL_ARGS: \"--project-file=cabal.project.ci\"\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: true\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  build:\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        ghc-version: [\"9.2\"]\n        include:\n          - experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"8.10\"\n            experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"9.0\"\n            experimental: false\n\n    name: Build on ${{ matrix.os }} with GHC-${{ matrix.ghc-version }}\n    runs-on: ${{ matrix.os }}\n    continue-on-error: ${{ matrix.experimental }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: 'true'\n\n      - name: Setup Haskell\n        uses: ./.github/actions/setup-haskell\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n          cabal-project-freeze-file: cabal.project.ci.freeze\n\n      - name: Setup Node\n        uses: ./.github/actions/setup-node\n\n      - name: Setup BumpVer\n        uses: ./.github/actions/setup-bumpver\n        # depends on requirements-dev.txt\n\n      - name: Setup HTMLProofer\n        if: runner.os != 'Windows'\n        uses: ./.github/actions/setup-htmlproofer\n        # depends on Gemfile\n\n      - name: Setup EPUBCheck\n        uses: ./.github/actions/setup-epubcheck\n        id: setup-epubcheck\n        with:\n          epubcheck-version: \"4.2.6\"\n\n      - name: Cache build\n        uses: actions/cache@v3\n        with:\n          path: _cache\n          key: build-${{ runner.os }}-${{ secrets.BUILD_CACHE_VERSION }}\n\n      - name: Build\n        run: make build\n\n      - name: Test with BumpVer\n        run: bumpver update --dry --no-fetch\n\n      - name: Test with HTML-validate\n        run: make test-html-validate\n\n      - name: Test with HTMLProofer\n        if: runner.os != 'Windows'\n        run: make test-htmlproofer\n\n      - name: Test with EPUBCheck\n        run: make test-epubcheck\n        env:\n          EPUBCHECK: \"java -jar ${{ steps.setup-epubcheck.outputs.epubcheck-jar-path }}\"\n\n      - name: Upload latest artifact\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: Website HEAD ${{ runner.os }} GHC-${{ matrix.ghc-version }}\n          path: _site\n          if-no-files-found: error\n\n  publish:\n    name: Publish to GitHub Pages\n    needs: [build]\n    if: github.event_name == 'push'\n    uses: ./.github/workflows/publish.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n\n  release:\n    name: Publish to GitHub Releases\n    needs: [build]\n    if: startsWith(github.ref, 'refs/tags/v')\n    uses: ./.github/workflows/release.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n```"}
{"id": "63c49a621e33648075793dfd", "level": "level2", "llm_response": " ```yaml\nname: Steam Upload\n\non:\n  push:\n    tags:\n      - '*'\n    releases:\n      types: [published, prereleased, draft]\n  workflow_dispatch:\n\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    env:\n      WORKFLOW_ID: '583765'\n      GIT_NIGHTLY_BRANCH: 'master'\n      STEAM_NIGHTLY_BRANCH: 'nightly'\n      STEAM_STABLE_BRANCH: 'staging'\n      STEAM_BETA_BRANCH: 'beta_staging'\n      SEVENZIP_HASH: '5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d'\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup 7-Zip\n        uses: unsdc/setup-7zip@v1\n\n      - name: Get build information\n        id: build-info\n        uses: ./.github/actions/build-info\n\n      - name: Restore build cache\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/.cache/7zip\n            ~/.cache/bazel\n            ${{ github.workspace }}/.cache/bazel\n          key: ${{ runner.os }}-build-${{ steps.build-info.outputs.branch }}-${{ github.sha }}\n\n      - name: Determine if Steam upload should run\n        if: github.event_name != 'pull_request' && github.ref != 'refs/heads/master'\n\n      - name: Download and prepare builds\n        run: |\n          ./download-builds.sh ${{ inputs.tag-this }} ${{ inputs.win_url_override }} ${{ inputs.mac_url_override }} ${{ inputs.mac_arm_url_override }}\n\n      - name: Setup steamcmd\n        uses: SteamAPI/steamcmd@v1\n\n      - name: Generate Steam auth code\n        run: |\n          ./generate-steam-auth-code.sh ${{ github.workspace }}\n\n      - name: Upload to Steam\n        run: |\n          ./upload-to-steam.sh ${{ github.workspace }}\n\n      - name: Upload Steam build logs\n        run: |\n          ./upload-build-logs.sh ${{ github.workspace }}\n```\nNote: The above YAML assumes that the scripts `download-builds.sh`, `generate-steam-auth-code.sh`, `upload-to-steam.sh`, and `upload-build-logs.sh` are present in the repository and are responsible for handling the respective tasks as described. The `setup-7zip` and `build-info` actions are placeholders and would need to be custom actions or scripts you define according to your needs.", "answer": "```yaml name: Steam Upload\n\non:\n  release:\n    types:\n    - published\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Tag to fetch and upload (nightly if none)'\n        required: false\n      win_url_override:\n        description: 'Windows build to use (.zip only)'\n        required: false\n      mac_url_override:\n        description: 'Mac build to use (.dmg only)'\n        required: false\n      mac_arm_url_override:\n        description: 'Mac ARM build to use (.dmg only)'\n        required: false\n  schedule:\n  - cron: 0 0 * * *\n\nenv:\n  WORKFLOW_ID: 583765\n  GIT_NIGHTLY_BRANCH: master\n  STEAM_NIGHTLY_BRANCH: nightly\n  STEAM_STABLE_BRANCH: staging\n  STEAM_BETA_BRANCH: beta_staging\n  SEVENZIP_HASH: 5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d\n\njobs:\n  upload:\n    name: Steam upload\n    runs-on: ubuntu-20.04\n    if: github.repository_owner == 'obsproject'\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        path: source\n\n      # The 7-Zip version available in the default ubuntu repos (p7zip) is wildly out-of-date and does not properly support DMG files.\n    - name: Setup 7-Zip\n      run: |\n        mkdir 7z && cd 7z\n        curl -s https://www.7-zip.org/a/7z2200-linux-x64.tar.xz -o 7z.tar.xz\n        \n        if [[ '${{ env.SEVENZIP_HASH }}' != \"$(sha256sum 7z.tar.xz | cut -d \" \" -f 1)\" ]]; then\n            echo \"7-Zip Download hash does not match!\"\n            exit 1\n        fi\n        \n        tar -xJf 7z.tar.xz\n        echo \"$(pwd)\" >> $GITHUB_PATH\n\n    - name: Get build information\n      id: build-info\n      run: |\n        EVENT='${{ github.event_name }}'\n        if [[ ${EVENT} == 'release' || ( ${EVENT} == 'workflow_dispatch' && -n '${{ github.event.inputs.tag }}') ]]; then\n            if [[ ${EVENT} == \"release\" ]]; then\n                DESC='${{ github.event.release.tag_name }}'\n                if [[ '${{ github.event.release.prerelease }}' == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL='${{ github.event.release.assets_url }}'\n            else\n                RELEASE=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/releases/tags/${{ github.event.inputs.tag }}')\"\n\n                DESC=\"$(jq -r '.tag_name' <<< ${RELEASE})\"\n                if [[ \"$(jq -r '.prerelease' <<< ${RELEASE})\" == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL=\"$(jq -r '.assets_url' <<< ${RELEASE})\"\n            fi\n\n            ASSETS=\"$(curl -s \"${ASSETS_URL}\")\"\n            WIN_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x64.zip\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x86_64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*arm64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            TYPE='release'\n        else\n            BRANCH='${{ env.STEAM_NIGHTLY_BRANCH }}'\n            BUILDS=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/actions/workflows/${{ env.WORKFLOW_ID }}/runs?per_page=1&event=push&status=success&branch=${{ env.GIT_NIGHTLY_BRANCH }}')\"\n            ARTIFACTS_URL=\"$(jq -r '.workflow_runs[].artifacts_url' <<< ${BUILDS})\"\n            DESC=\"g$(jq -r '.workflow_runs[].head_sha' <<< \"${BUILDS}\" | cut -c1-9)\"\n\n            ARTIFACTS=\"$(curl -s ${ARTIFACTS_URL})\"\n            WIN_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*windows-x64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-x86_64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-arm64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            TYPE='nightly'\n        fi\n\n        # Apply overrides from workflow_dispatch\n        if [[ ${EVENT} == 'workflow_dispatch' ]]; then\n            if [[ -n '${{ github.event.inputs.win_url_override }}' ]]; then\n                WIN_ASSET_URL='${{ github.event.inputs.win_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_url_override }}' ]]; then\n                MAC_ASSET_URL='${{ github.event.inputs.mac_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_arm_url_override }}' ]]; then\n                MAC_ARM_ASSET_URL='${{ github.event.inputs.mac_arm_url_override }}'\n            fi\n        fi\n\n        if [[ -z ${WIN_ASSET_URL} || -z ${MAC_ASSET_URL} || -z ${MAC_ARM_ASSET_URL} ]]; then\n            echo \"Missing at least one asset URL!\"\n            exit 1\n        fi\n\n        # set env variables for subsequent steps\n        echo \"type=${TYPE}\" >> $GITHUB_OUTPUT\n        echo \"branch=${BRANCH}\" >> $GITHUB_OUTPUT\n        echo \"desc=${DESC}\" >> $GITHUB_OUTPUT\n        echo \"win_url=${WIN_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_intel_url=${MAC_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_arm_url=${MAC_ARM_ASSET_URL}\" >> $GITHUB_OUTPUT\n\n    - name: Restore build cache\n      id: cache\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/steam/build\n        key: ${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}\n        # Using \"restore-keys\" will restore the most recent cache for the branch, even if the exact cache doesn't exist.\n        # This doesn't set cache-hit to true so it won't skip the upload for nightlies.\n        restore-keys: ${{ steps.build-info.outputs.branch }}\n\n    - name: Determine if Steam upload should run\n      # If the nightly build has already been uploaded and thus a cache exists skip this and the following steps.\n      # Steam does not prevent us from uploading duplicate builds so this would just pollute the dashboard.\n      # This is a bit of a hack and can fail to work if our cache has been evicted or we somehow have no commits for 7 days,\n      # but it's better than nothing!\n      id: should-run\n      run: |\n        if [[ '${{ steps.build-info.outputs.type }}' == 'release' || '${{ steps.cache.outputs.cache-hit }}' != 'true' ]]; then\n            echo \"result=true\" >> $GITHUB_OUTPUT\n        else\n            echo \"result=false\" >> $GITHUB_OUTPUT\n        fi\n\n    - name: Download and prepare builds\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        echo \"::group::Download Windows build\"\n        if [[ '${{ steps.build-info.outputs.win_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        else\n            curl -L '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Download Mac builds\"\n        if [[ '${{ steps.build-info.outputs.mac_intel_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg\n        fi\n\n        if [[ '${{ steps.build-info.outputs.mac_arm_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg\n        fi\n        echo \"::endgroup::\"\n\n        mkdir -p steam && cd steam\n\n        echo \"::group::Extract and prepare Win64\"\n        mkdir steam-windows\n        (\n            cd steam-windows\n            unzip ../../windows.zip\n            # CI builds can be double-zipped\n            if compgen -G \"*.zip\" > /dev/null; then\n                unzip *.zip\n                rm *.zip\n            fi\n            # copy install scripts and create sentinel file\n            cp -r ../../source/CI/steam/scripts_windows scripts\n            touch disable_updater\n        )\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract macOS (x86)\"\n        mkdir -p steam-macos/x86\n        # CI builds are zipped\n        if [[ -f ../mac_x86.dmg.zip ]]; then\n            unzip ../mac_x86.dmg.zip\n            # 7-Zip will have an exit code of 2 due to the \"unsafe\" 'Applications' symlink.\n            # GitHub treats this as a failure so ignore non-zero exit codes here.\n            7zz x *.dmg -otmp_x86 || true\n            rm *.dmg\n        else\n            7zz x ../mac_x86.dmg -otmp_x86 || true\n        fi\n\n        if [ -d tmp_x86/OBS.app ]; then\n            mv tmp_x86/OBS.app steam-macos/x86\n        else\n            mv tmp_x86/*/OBS.app steam-macos/x86\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract and prepare macOS (arm64)\"\n        mkdir -p steam-macos/arm64\n        if [[ -f ../mac_arm64.dmg.zip ]]; then\n            unzip ../mac_arm64.dmg.zip\n            7zz x *.dmg -otmp_arm64 || true\n            rm *.dmg\n        else\n            7zz x ../mac_arm64.dmg -otmp_arm64 || true\n        fi\n\n        if [ -d tmp_arm64/OBS.app ]; then\n            mv tmp_arm64/OBS.app steam-macos/arm64\n        else\n            mv tmp_arm64/*/OBS.app steam-macos/arm64\n        fi\n\n        cp ../source/CI/steam/scripts_macos/launch.sh steam-macos/launch.sh\n        echo \"::endgroup::\"\n\n    - name: Setup steamcmd\n      if: steps.should-run.outputs.result == 'true'\n      uses: CyberAndrii/setup-steamcmd@e19cd1516315ce46dbfffa47193f92fe42d1419e\n\n    - name: Generate Steam auth code\n      if: steps.should-run.outputs.result == 'true'\n      id: steam-totp\n      uses: CyberAndrii/steam-totp@0fc9e59dc5bbf4368d23d5a33956f104248da31a\n      with:\n        shared_secret: ${{ secrets.STEAM_SHARED_SECRET }}\n\n    - name: Upload to Steam\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        cd steam\n        echo \"::group::Prepare Steam build script\"\n        # The description in Steamworks for the build will be \"github_<branch>-<tag/short hash>\", e.g. \"github_nightly-gaa73de952\"\n        sed 's/@@DESC@@/${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}/;s/@@BRANCH@@/${{ steps.build-info.outputs.branch }}/' ../source/CI/steam/obs_build.vdf > build.vdf\n        echo \"Generated file:\"\n        cat build.vdf\n        echo \"::endgroup::\"\n        echo \"::group::Upload to Steam\"\n        steamcmd +login '${{ secrets.STEAM_USER }}' '${{ secrets.STEAM_PASSWORD }}' '${{ steps.steam-totp.outputs.code }}' +run_app_build \"$(pwd)/build.vdf\" +quit\n        echo \"::endgroup::\"\n\n    - name: Upload Steam build logs\n      if: steps.should-run.outputs.result == 'true'\n      uses: actions/upload-artifact@v3\n      with:\n        name: steam-build-logs\n        path: ${{ github.workspace }}/steam/build/*.log\n```"}
{"id": "63c497b0cbc73931bb181e14", "level": "level2", "llm_response": " ```yaml\nname: Add Issue to Board\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        run: echo \"Fetching project data for the newly opened issue...\"\n\n      - name: Add issue to project\n        run: echo \"Adding issue to the project board...\"\n```", "answer": "```yaml name: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n        run: |\n          gh api graphql -f query='\n            query {\n              organization(login: \"revoltchat\"){\n                projectNext(number: 3) {\n                  id\n                  fields(first:20) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") |.settings | fromjson.options[] | select(.name==\"Todo\") |.id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          item_id=\"$( gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')\"\n          \n          echo 'ITEM_ID='$item_id >> $GITHUB_ENV\n```"}
{"id": "63c4981c33b087f6bde36b61", "level": "level2", "llm_response": " ```yaml\nname: sync-files\non:\n  schedule:\n    - cron: '0 0 * * *'  # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    runs-on: ubuntu-latest\n    steps:\n      # Define steps for check-secret job\n\n  sync-files:\n    runs-on: ubuntu-latest\n    steps:\n      - id: generate-token\n        name: Generate token\n        run: |\n          # Commands to generate a token\n\n      - id: run-sync-files\n        name: Run sync-files\n        run: |\n          # Commands to sync files\n```", "answer": "```yaml name: sync-files\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    uses: autowarefoundation/autoware-github-actions/.github/workflows/check-secret.yaml@v1\n    secrets:\n      secret: ${{ secrets.APP_ID }}\n\n  sync-files:\n    needs: check-secret\n    if: ${{ needs.check-secret.outputs.set == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.APP_ID }}\n          private_key: ${{ secrets.PRIVATE_KEY }}\n\n      - name: Run sync-files\n        uses: autowarefoundation/autoware-github-actions/sync-files@v1\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          pr-labels: |\n            bot\n            sync-files\n          auto-merge-method: squash\n```"}
{"id": "63c49ee0517fc08c1ef064ca", "level": "level2", "llm_response": " ```yaml\nname: Update Issues\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Update Issues\n        run: |\n          # Your script to update issues goes here\n          # Ensure that the script has write access to issues using GITHUB_TOKEN\n          echo \"Updating issues with GITHUB_TOKEN permissions...\"\n```\n\nNote: The actual script for updating issues is not included in this YAML file. You will need to implement the logic within the `Update Issues` step, ensuring that the script uses the `GITHUB_TOKEN` with the appropriate permissions. Additionally, the permissions for the `GITHUB_TOKEN` are not directly configurable in the YAML file; they must be set up in the GitHub repository's settings under \"Secrets\" and \"Actions\" for the workflow. The `GITHUB_TOKEN` should have the necessary scopes for the actions it needs to perform.", "answer": "```yaml # Install this in .github/workflows/ to automate issue maintenance.\nname: Update Issues\n\non:\n  workflow_dispatch:\n    # Allows for manual triggering.\n  schedule:\n    # Run every 30 minutes\n    - cron: '*/30 * * * *'\n\npermissions:\n  issues: write\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          repository: shaka-project/shaka-github-tools\n\n      - name: Update Issues\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          cd update-issues\n          npm ci\n          node main.js\n```"}
{"id": "63c49c411e3364807579faeb", "level": "level2", "llm_response": " ```yaml\nname: PR Labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, deleted, updated]\n\njobs:\n  workflows:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n      \n    - name: Jinja Template Processing\n      run: |\n        # Add your Jinja template processing logic here\n        # Example: echo \"Processing Jinja templates...\"\n      env:\n        # Define any environment variables needed for Jinja processing\n        # Example: JINJA_ENVIRONMENT_VARIABLE=value\n\n    # Additional steps can be added here as needed\n```", "answer": "```yaml ---\nname: PR Labels\n\n# yamllint disable-line rule:truthy\non:\n  pull_request_target:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/pr-labels.yaml@main\n```"}
{"id": "63c4a19f1842bc13d77a502b", "level": "level2", "llm_response": " ```yaml\nname: CompatHelper\non:\n  schedule:\n    - cron: '0 0 * * *' # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install CompatHelper\n        run: Pkg.add(\"CompatHelper\")\n\n      - name: Run CompatHelper Main Function\n        run: CompatHelper.main()\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}  # trigger CI\n        run: julia -e 'using CompatHelper; CompatHelper.main(; subdirs = [\"\", \"docs\"])'\n```"}
{"id": "63c49ee2736e7f0ed8c6ab16", "level": "level2", "llm_response": " ```yaml\nname: Check changelog file included\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Changelog\n        run: |\n          # Add the command to check for the changelog file here\n          # Example:\n          # if [ -f \"perceval/CHANGELOG.md\" ]; then echo \"Changelog file found.\"; else echo \"Changelog file not found.\"; fi\n```\n\nIn this YAML file, replace the `# Add the command to check for the changelog file here` comment with the actual command or script you want to run to check for the presence of the changelog file. The example provided is a simple shell command that checks for the existence of a file named `CHANGELOG.md` in the `perceval` directory. Adjust the command according to your specific requirements.", "answer": "```yaml name: Check changelog file included\n\non:\n  pull_request:\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: bitergia/release-tools-check-changelog@master\n```"}
{"id": "63c49f21b008460c1df4bcb5", "level": "level2", "llm_response": " ```yaml\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n      paths-ignore:\n        - 'LICENSE*'\n        - '.gitignore'\n        - '**.md'\n        - '**.adoc'\n        - '*.txt'\n        - '.ci/**'\n  pull_request:\n    branches:\n      - main\n      paths-ignore:\n        - 'LICENSE*'\n        - '.gitignore'\n        - '**.md'\n        - '**.adoc'\n        - '*.txt'\n        - '.ci/**'\n\njobs:\n  jpa-postgresql-container:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        java-version: ['11', '17']\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v2\n\n      - name: Java and Maven Setup\n        run: |\n          # Commands to set up Java and Maven environment\n\n      - name: Build with Maven\n        run: mvn clean package\n```", "answer": "```yaml # Runs optaplanner-persistence-jpa module tests in a PostgreSQL container\n\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  jpa-postgresql-container:\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n        java-version: [ 11 ]\n        maven-version: [ '3.8.6' ]\n      fail-fast: false\n    runs-on: ${{ matrix.os }}\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n    name: ${{ matrix.os }} - Java ${{ matrix.java-version }} - Maven\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: Java and Maven Setup\n        uses: kiegroup/kogito-pipelines/.ci/actions/maven@main\n        with:\n          java-version: ${{ matrix.java-version }}\n          maven-version: ${{ matrix.maven-version }}\n          cache-key-prefix: ${{ runner.os }}-${{ matrix.java-version }}-maven${{ matrix.maven-version }}\n      # Builds the JPA module and runs tests in a PostgreSQL container\n      - name: Build with Maven\n        run: mvn -B clean install -pl :optaplanner-persistence-jpa -am -Ppostgresql\n```"}
{"id": "63c4a18e33b087f6bde73347", "level": "level2", "llm_response": " ```yaml\nname: Test Report\non:\n  workflow_run:\n    workflows: ['LoRa E2E CI', 'LoRa Build & Test CI']\n    types: [ completed ]\n\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate Test Report\n        run: |\n          echo \"Generating Test Report for C# project...\"\n          # Add actual commands to generate the report here\n```\nPlease replace the `echo \"Generating Test Report for C# project...\"` line with the actual commands or scripts required to generate your C# test report.", "answer": "```yaml name: 'Test Report'\non:\n  workflow_run:\n    workflows: ['LoRa E2E CI', 'LoRa Build & Test CI']                     # runs after CI workflow\n    types:\n      - completed\njobs:\n  report:\n    permissions:\n      checks: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: dorny/test-reporter@v1\n      with:\n        artifact: /(.*)results/\n        name: '$1Results'\n        path: '**/*.trx'\n        reporter: dotnet-trx\n```"}
{"id": "63c497f91899db58864dce30", "level": "level2", "llm_response": " ```yaml\nname: Integration Test - Expression\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test_expression:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n```\nPlease note that the placeholders ``, ``, and `Test expression logic` should be replaced with actual commands or scripts relevant to your TypeScript project. The `npm test` command assumes you have a script defined in your `package.json` for running tests.", "answer": "```yaml name: Integration Test - Expression\n\non:\n  push:\n    branches: [main]\n  pull_request:\n\njobs:\n  test_expression:\n    name: ubuntu-latest\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: 16\n          architecture: x64\n      - run: npm ci\n      - run: npm run test-expression\n```"}
{"id": "63c49758517fc08c1eed656f", "level": "level2", "llm_response": " ```yaml\nname: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: none\n      id-token: none\n      packages: none\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run linter\n        run: go install golang.org/x/tools/cmd/golangci-lint@latest\n\n      - name: Lint code\n        run: golangci-lint run ./...\n```", "answer": "```yaml name: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\n# Remove all permissions from GITHUB_TOKEN except metadata.\npermissions: {}\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        working-directory:\n          - \"\"\n          - test\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.49.0\n          working-directory: ${{matrix.working-directory}}\n```"}
{"id": "63c49caa33b087f6bde54454", "level": "level2", "llm_response": " ```yaml\nname: Language Service\n\non:\n  push:\n    paths:\n      - 'src/language-service/*'\n      - '.github/*'\n  pull_request:\n    paths:\n      - 'src/language-service/*'\n      - '.github/*'\n\njobs:\n  language-service:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v2\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        run: npm run lint\n\n      - name: \ud83d\ude80 Build Schema\n        run: npm run build:schema\n\n      - name: \ud83d\ude80 Run Compile\n        run: npm run compile\n\n      - name: \ud83c\udfd7 Create .npmrc\n        run: |\n          echo \"registry=https://registry.npmjs.org/\" > .npmrc\n          echo \"//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}\" >> .npmrc\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```", "answer": "```yaml name: Language Sevice\n\non:\n  push:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n  pull_request:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n\njobs:\n  language-service:\n    name: Language Service\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: \"16\"\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        working-directory: src/language-service\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        working-directory: src/language-service\n        run: npm run lint\n\n      - name: \ud83d\ude80 Build Schema\n        working-directory: src/language-service\n        run: npm run schema\n\n      - name: \ud83d\ude80 Run Compile\n        working-directory: src/language-service\n        run: npm run compile\n\n      - name: \ud83c\udfd7 Create .npmrc\n        if: success() && github.ref == 'refs/heads/master'\n        run:\n          echo \"//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN\" >> ~/.npmrc\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        if: success() && github.ref == 'refs/heads/master'\n        env:\n          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish src/language-service\n\n    # - name: NPM Publish to Registry\n    #   uses: actions/npm@master\n    #   if: success() && github.ref == 'refs/heads/master'\n    #   env:\n    #     NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n    #   with:\n    #     args: publish src/language-service\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level2", "llm_response": " ```yaml\nname: Require pull request labels\n\non:\n  pull_request:\n    types: [opened, labeled, unlabeled, deleted, updated]\n\njobs:\n  require-pr-labels:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: 'read'\n      contents: 'read'\n      pull-requests: 'write'\n\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: 'read'\n      contents: 'read'\n      pull-requests: 'write'\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Require specific labels\n        run: |\n          if [ \"${{ github.event.label.name }}\" != \"bug\" ]; then\n            echo \"Bug label is missing. Please add 'bug' label to this pull request.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c49d8733b087f6bde59ea2", "level": "level2", "llm_response": " ```yaml\nname: Release Drafter\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        run: echo \"Update release draft steps here\"\n```\n\nIn this YAML configuration, I've set up a GitHub Actions workflow named `Release Drafter` that triggers on push events to the master branch and pull request events that are opened, reopened, or synchronized. The job `update_release_draft` is defined to run on the latest Ubuntu runner and includes a single step named `Update Release Draft`, where you would insert the actual commands to update the release draft.", "answer": "```yaml name: Release Drafter\n# https://github.com/release-drafter/release-drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n        #   config-name: my-config.yml\n        #   disable-autolabeler: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b433b087f6bde6e4a8", "level": "level2", "llm_response": " ```yaml\nname: Deploy Schema and Guidelines\non:\n  push:\n    branches:\n      - develop\n\nenv:\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout main repo\n        uses: actions/checkout@v2\n\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Ant\n        run: ant\n\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v2\n        with:\n          repository: ${{ env.SCHEMA_REPO }}\n          path: ${{ env.SCHEMA_DIR }}\n          ref: ${{ env.SCHEMA_BRANCH }}\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r schema-dir/* ${{ env.SCHEMA_DIR }}\n\n      - name: Check git status before commit\n        run: git status\n\n      - name: Configure git\n        run: git config --global user.email \"action@github.com\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Commit files\n        run: git add . && git commit -m \"Update schema files\"\n\n      - name: Push changes to SCHEMA\n        run: git push origin ${{ env.SCHEMA_BRANCH }}\n\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v2\n        with:\n          repository: ${{ env.GUIDELINES_REPO }}\n          path: ${{ env.GUIDELINES_DIR }}\n          ref: ${{ env.GUIDELINES_BRANCH }}\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: cp -r guidelines-dir/* ${{ env.GUIDELINES_DIR }}\n\n      - name: Check git status before commit\n        run: git status\n\n      - name: Configure git\n        run: git config --global user.email \"action@github.com\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Commit files\n        run: git add . && git commit -m \"Update guidelines files\"\n\n      - name: Push changes to GUIDELINES\n        run: git push origin ${{ env.GUIDELINES_BRANCH }}\n```", "answer": "```yaml # This workflow will perform the following steps for pushes the the develop branch\n# * build the Schema and the Guidelines with Ant\n# * publish the Schema to music-encoding/schema under ./dev\n# * publish the Guidelines to music-encoding/guidelines under ./dev\n\nname: Deploy Schema and Guidelines\n\non:\n  push:\n    branches: [develop]\n\nenv:\n  # schema\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n\n  # guidelines\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n\n  # temporary directories\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    name: Build and deploy Schema and Guidelines\n    runs-on: ubuntu-latest\n\n    steps:\n      ### BUIDLING THE SCHEMA AND THE GUIDELINES ###\n      - name: Checkout main repo\n        uses: actions/checkout@v3\n        with:\n          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n          # recursively checkout submodules.\n          #\n          # When the `ssh-key` input is not provided, SSH URLs beginning with\n          # `git@github.com:` are converted to HTTPS.\n          #\n          # Default: false\n          submodules: recursive\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: \"temurin\"\n          java-version: \"17\"\n\n      - name: Build with Ant\n        # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant\n        run: |\n          ant -noinput -buildfile build.xml init\n          ant -noinput -buildfile build.xml -lib lib/saxon/saxon-he-10.5.jar -Dgithub.sha=${{ github.sha }}\n\n      ### PUBLISHING THE SCHEMA ###\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.SCHEMA_REPO }}\n          # Deploy key as secret for accessing <owner>/<SCHEMA_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.SCHEMA_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.SCHEMA_DIR }}\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r dist/schemata/dev $SCHEMA_DIR/\n\n      - name: Check git status before commit\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of schema build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to SCHEMA\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: git push origin HEAD:$SCHEMA_BRANCH\n\n      ### PUBLISHING THE GUIDELINES ###\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.GUIDELINES_REPO }}\n          # Deploy key as secret for accessing <owner>/<GUIDELINES_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_GUIDELINES }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.GUIDELINES_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.GUIDELINES_DIR }}\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: |\n          rm -rf $GUIDELINES_DIR/dev \n          cp -r dist/guidelines/dev/web $GUIDELINES_DIR/\n          mv $GUIDELINES_DIR/web $GUIDELINES_DIR/dev\n\n      - name: Check git status before commit\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of guidelines build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to GUIDELINES\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: git push origin HEAD:$GUIDELINES_BRANCH\n```"}
{"id": "63c494a48052faa2781ac54c", "level": "level2", "llm_response": " ```yaml\nname: Lock closed issues\non:\n  schedule:\n    - cron: '30 5 * * *'  # Trigger at 05:30 am every day\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Lock closed issues\n        # Add the actual step commands here, e.g., checkout, setup Node.js, etc.\n        # This is a placeholder for the step's actions.\n```\n\nPlease note that you'll need to replace the placeholder comment with the actual commands required to lock closed issues in your TypeScript project. This might involve checking out the code, setting up Node.js, running scripts, etc.", "answer": "```yaml name: \"Lock closed issues\"\n\non:\n  schedule:\n    - cron: \"30 5 * * *\"\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/lock-threads@v3.0.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-comment: \"This issue has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\"\n          issue-inactive-days: 30\n          process-only: \"issues\"\n# cspell:ignore dessant\n```"}
{"id": "63c49de9736e7f0ed8c64893", "level": "level2", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-label PRs with merge conflicts\n        uses: actions/labeler@v3\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          configuration: |\n            - label: \"merge-conflict\"\n              conditions:\n                - file-contains: \"Merge Conflict\"\n```", "answer": "```yaml # This workflow checks open PRs for merge conflicts and labels them when conflicts are found\nname: Check for merge conflicts\n\n# Run whenever the \"main\" branch is updated\n# NOTE: This means merge conflicts are only checked for when a PR is merged to main.\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      # See: https://github.com/mschilde/auto-label-merge-conflicts/\n      - name: Auto-label PRs with merge conflicts\n        uses: mschilde/auto-label-merge-conflicts@v2.0\n        # Add \"merge conflict\" label if a merge conflict is detected. Remove it when resolved.\n        # Note, the authentication token is created automatically\n        # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token\n        with:\n          CONFLICT_LABEL_NAME: 'merge conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Ignore errors\n        continue-on-error: true\n```"}
{"id": "63c4a0591842bc13d779d081", "level": "level2", "llm_response": " ```yaml\nname: Issue closer\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue\n        run: |\n          echo \"Processing issue: ${{ github.event.issue.number }}\"\n          # Additional steps to process the issue can be added here\n```", "answer": "```yaml name: Issue closer.\n\non:\n  issues:\n    types: opened\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue.\n        uses: desktop-app/action_issue_closer@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e2db008460c1df45cd1", "level": "level2", "llm_response": " ```yaml\nname: Rust Cron Failures Check\non:\n  schedule:\n    - cron: '0 23 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  call_cron_failures:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          components: rustc rustfmt clippy\n\n      - name: Run Cron Failures Check\n        run: cargo run --manifest-path=Cargo.toml -- --check-cron-failures\n```", "answer": "```yaml ---\n\non:\n  # Note: This only applies to the default branch.\n  schedule:\n    # N/B: This should correspond to a period slightly after\n    # the last job finishes running.  See job defs. at:\n    # https://cirrus-ci.com/settings/repository/5138144844840960\n    - cron:  '59 23 * * 1-5'\n  # Debug: Allow triggering job manually in github-actions WebUI\n  workflow_dispatch: {}\n\njobs:\n  # Ref: https://docs.github.com/en/actions/using-workflows/reusing-workflows\n  call_cron_failures:\n    uses: containers/buildah/.github/workflows/check_cirrus_cron.yml@main\n    secrets: inherit\n```"}
{"id": "63c4993a1899db58864e5313", "level": "level2", "llm_response": " ```yaml\nname: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron: '0 3 * * 4' # Trigger at 03:24 am on Thursdays\n  workflow_dispatch: # Allows manual triggering\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Package Trigger Scheduler\n        run: |\n          # Your package triggering logic goes here\n          echo \"Package Trigger Scheduler step executed\"\n```\nThis YAML defines a GitHub Actions workflow named `Package Trigger Scheduler` that triggers on a scheduled time (03:24 am on Thursdays) and can also be manually triggered. The workflow consists of a single job with two placeholder steps, where the first step checks out the code and the second step is where you would implement your package triggering logic.", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '24 3 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-transmission/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for transmission** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-transmission/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c4987033b087f6bde38dfc", "level": "level2", "llm_response": " ```yaml\nname: Release Drafter\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        run: echo \"Update release draft logic here\"\n```\n\nIn this YAML configuration for a GitHub Actions workflow, I've set up a workflow named `Release Drafter` that triggers on pushes to the `main` branch and manual dispatch. It contains a single job with the id `update_release_draft`, which runs on the latest Ubuntu runner. The step within the job is named `Update Release Draft`, where you would insert the actual command or script to update the release draft.", "answer": "```yaml # draft release notes with https://github.com/release-drafter/release-drafter\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e4bb008460c1df468cb", "level": "level2", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [created, edited]\n  pull_request:\n    types: [opened, edited]\n  schedule:\n    - cron: '0 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for No Response\n        run: echo \"No response action triggered\"\n```", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # Number of days of inactivity before an Issue is closed for lack of response\n          daysUntilClose: 7\n          # Label requiring a response\n          responseRequiredLabel: 'status: needs more information'\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Since the issue is missing key information and has been inactive for 7 days, it has been automatically closed.\n            If you wish to see the issue reopened, please provide the missing information.\n```"}
{"id": "63c49f741899db588650d292", "level": "level2", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '30 17 * * 0'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n\n      - name: Autobuild\n        run: |\n          dotnet build\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '30 17 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f7a1e336480757b40f6", "level": "level2", "llm_response": " ```yaml\nname: Protobuf\n\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'proto/**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build protobuf files\n        run: protoc --go_out=plugins=grpc:. proto/**/*.proto\n      - name: Git Diff\n        uses: actions/github-script@v5\n        with:\n          script: |\n            const { context } = github;\n            const diff = context.repo.getCommitDiff();\n            console.log(diff);\n      - name: Lint\n        run: go vet ./...\n\n  lint:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Lint code\n        run: go vet ./...\n      - name: Format code\n        run: go fmt ./...\n\n  break-check:\n    needs: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Break check\n        run: go test -count=5 ./...\n```", "answer": "```yaml name: Protobuf\n# Protobuf runs buf (https://buf.build/) lint and check-breakage\n# This workflow is only run when a .proto file has been changed\non:\n  pull_request:\n    paths:\n      - \"proto/**\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        id: git_diff\n        with:\n          PATTERNS: |\n            **/**.proto\n            **/buf.yaml\n            buf.work.yaml\n            buf.gen.yaml\n      - run: |\n          make proto-gen\n        if: env.GIT_DIFF\n\n  lint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-lint-action@v1\n        with:\n          input: \"proto\"\n\n  break-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-breaking-action@v1\n        with:\n          input: \"proto\"\n          against: \"https://github.com/${{ github.repository }}.git#branch=${{ github.event.pull_request.base.ref }},ref=HEAD~1,subdir=proto\"\n```"}
{"id": "63c49801cbc73931bb1841e8", "level": "level2", "llm_response": " ```yaml\nname: Clean\n\non: [push, pull_request, schedule]\n\njobs:\n  delete-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Commands to delete artifacts specific to Scala projects\n          # Example: rm -rf target/scala-*/\n          echo \"Artifacts cleaned up.\"\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49b84b008460c1df34d2f", "level": "level2", "llm_response": " ```yaml\nname: Generate docs\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Setup .NET\n        run: dotnet tool install --global dotnet-docs\n      - name: Restore dependencies\n        run: dotnet restore\n      - name: Build\n        run: dotnet build\n      - name: Generate docs\n        run: dotnet docs\n      - name: Commit\n        run: |\n          git config --global user.name 'GitHub-Actions'\n          git config --global user.email '<EMAIL>'\n          git add docs/\n          git commit -m \"Update documentation\"\n          git push\n```", "answer": "```yaml name: 'Generate docs'\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n\n      - name: Restore dependencies\n        run: dotnet restore \n        \n      - name: Build\n        run: dotnet build --no-restore\n\n      - name: Generate docs\n        run: |\n          # Run CLI\n          dotnet run -p src/Microsoft.Sbom.Tool generate -- -h 2> help.txt || true\n          cat <<EOF > docs/sbom-tool-arguments.md\n          # Sbom tool arguments\n          \n          \\`\\`\\`shell\n          dotnet run -p './src/Microsoft.Sbom.Tool' generate -- -h\n          \\`\\`\\`\n\n          \\`\\`\\`\n          $(tail --lines=+4 help.txt)\n          \\`\\`\\`\n          EOF\n\n      - name: Commit\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'Auto update docs/*.md'\n          file_pattern: 'docs/*.md'\n          ```"}
{"id": "63c49cc31e336480757a2f97", "level": "level2", "llm_response": " ```yaml\nname: TagBot\n\non:\n  issues:\n    types: [opened, edited, labeled, unlabeled]\n  pull_request:\n    types: [opened, edited, labeled, unlabeled]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: TagBot\n        run: |\n          # Insert the Julia code or command here to tag the issue or pull request\n          # Example: julia -e 'using GitHub; tag_issue(event.issue)'\n          echo \"This is a placeholder for the Julia tagging script.\"\n```\n\nPlease note that you will need to replace the `echo \"This is a placeholder for the Julia tagging script.\"` line with the actual Julia code or command that performs the tagging action. The `GitHubActions` API or a similar tool may be required to interact with GitHub's API for tagging issues or pull requests.", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c4974bcbc73931bb17f7a8", "level": "level2", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Lint Python Code\n        run: |\n          # Install linter (e.g., flake8)\n          pip install flake8\n          # Run linter on the pull request's Python files\n          flake8 $(git diff --name-only ${{ github.event.pull_request.head.sha }}:$(git diff --name-only ${{ github.event.pull_request.head.sha }}) | grep '\\.py$')\n```\nThis YAML defines a GitHub Actions workflow named `Lint PR` that triggers on pull request events. The workflow runs on the latest Ubuntu runner and includes a job named `main`. The job has a single step named `Lint Python Code`, which installs `flake8` and runs it on the Python files changed in the pull request. You can customize the linter and its configuration as needed.", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # Please look up the latest version from\n      # https://github.com/amannn/action-semantic-pull-request/releases\n      - uses: amannn/action-semantic-pull-request@v3.4.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d681e336480757a6e6f", "level": "level2", "llm_response": " ```yaml\nname: MSDocs build verifier\non: pull_request\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@v2\n\n      - name: Validate\n        run: |\n          # Add validation logic here\n          echo \"Validating the pull request ${{ github.event.pull_request.number }}\"\n```", "answer": "```yaml name: MSDocs build verifier\non: pull_request\nenv:\n  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  validate:\n    name: MSDocs build verifier\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Validate\n        uses: dotnet/docs-actions/actions/docs-verifier@main\n```"}
{"id": "63c498991842bc13d776b38d", "level": "level2", "llm_response": " ```yaml\nname: Auto Assign\non: [pull_request]\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Assign Reviewer\n        run: |\n          # Command to automatically assign a reviewer goes here\n          echo \"Assigning reviewer for PR ${{ github.event.number }}\"\n          # Example placeholder command\n          echo \"Reviewer assigned: user@example.com\"\n```\n\nPlease note that the `run` command in the step is a placeholder. You would need to replace it with the actual command or script that interacts with your review assignment system or tooling. This could involve calling an API, using a script, or other automation techniques to assign a reviewer to the pull request.", "answer": "```yaml name: \"Auto Assign\"\non:\n  - pull_request\n\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: shufo/auto-assign-reviewer-by-files@v1.1.2\n        with:\n          config: \"MAINTAINERS\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49af6cbc73931bb1971dd", "level": "level2", "llm_response": " ```yaml\nname: Releaser\non:\n  push:\n    paths-ignore:\n      - '.github/**'\n      - '**.md'\n    paths:\n      - 'version.json'\njobs:\n  releaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build and release\n        run: |\n          go build -o myapp ./...\n          # Add commands to create a release, e.g., using GitHub CLI or another tool\n          gh release create --repo owner/repo --tag v1.0.0 --description \"Release version 1.0.0\"\n```\n\nPlease note that you will need to replace `owner/repo` with the actual owner and repository name and adjust the build and release commands according to your specific needs. The `gh release create` command is just an example using GitHub CLI. You may need to install it or use another tool to create releases.", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\nname: Releaser\non:\n  push:\n    paths: [ 'version.json' ]\n\njobs:\n  releaser:\n    uses: protocol/.github/.github/workflows/releaser.yml@master\n```"}
{"id": "63c49baab008460c1df35d33", "level": "level2", "llm_response": " ```yaml\nname: Launchpad Mirror\non:\n  push:\n    branches:\n      - master\nconcurrency:\n  group: lp-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setting up bazaar\n        run: |\n          # Commands to set up bazaar environment\n\n      - name: Checkout trunk\n        uses: actions/checkout@v2\n        with:\n          ref: trunk\n\n      - name: Checkout master\n        uses: actions/checkout@v2\n        with:\n          ref: master\n\n      - name: Cleaning tree\n        run: |\n          # Commands to clean the working tree\n\n      - name: Copying files\n        run: |\n          # Commands to copy files from trunk to master\n\n      - name: Committing and pushing changes\n        run: |\n          # Commands to commit and push changes to GitHub\n```", "answer": "```yaml name: Launchpad Mirror\nconcurrency:\n  group: lp-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - master\njobs:\n  mirror:\n    if: github.repository == 'widelands/widelands'\n    name: Synchronizing Launchpad trunk with GitHub master\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setting up bazaar\n      run: |\n        sudo apt-get update\n        sudo apt-get install bzr\n        mkdir ~/.ssh || true\n        echo \"${{ secrets.LP_SSH }}\" > ~/.ssh/id_rsa\n        chmod 400 ~/.ssh/id_rsa\n        echo \"${{ secrets.LP_HOST }}\" > ~/.ssh/known_hosts\n        eval \"$(ssh-agent -s)\"\n        ssh-add ~/.ssh/id_rsa\n        bzr whoami \"The Widelands Bunnybot <bunnybot@widelands.org>\"\n        bzr launchpad-login \"widelandsofficial\"\n    - name: Checkout trunk\n      run: |\n        cd ~\n        bzr branch lp:widelands wl_trunk\n    - name: Checkout master\n      run: |\n        cd ~\n        git clone --depth=1 https://github.com/widelands/widelands.git wl_master\n    - name: Cleaning tree\n      run: |\n        cd ~/wl_trunk\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".bzr\" ]\n          then\n            rm -r \"$file\"\n          fi\n        done\n    - name: Copying files\n      run: |\n        cd ~/wl_master\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".git\" ]\n          then\n            cp -r $file ~/wl_trunk/$file\n          fi\n        done\n        cd ~/wl_trunk\n        mv .gitignore .bzrignore\n    - name: Committing and pushing changes\n      run: |\n        cd ~/wl_trunk\n        commit_message=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/$GITHUB_SHA\" | grep -F \"\\\"message\\\": \")\n        commit_message=${commit_message#*: \\\"}\n        commit_message=${commit_message%\\\",}\n        commit_message=\"$commit_message\\n\\n(by $GITHUB_ACTOR)\\n$GITHUB_SHA\"\n        commit_message=${commit_message//\"\\r\\n\"/\"\\n\"}\n        printf \"$commit_message\" > ~/temp_commit_message\n        bzr remove\n        bzr add\n        bzr commit --strict -F ~/temp_commit_message\n        set +e\n        check_for_remote_changes=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/master\" | grep -m 1 \"\\\"sha\\\": \")\n        set -e\n        check_for_remote_changes=${check_for_remote_changes#*: \\\"}\n        check_for_remote_changes=${check_for_remote_changes%\\\",}\n        if [ \"$check_for_remote_changes\" == \"$GITHUB_SHA\" ]\n        then\n          bzr push :parent\n        else\n          echo \"master was updated from '$GITHUB_SHA' to '$check_for_remote_changes', cancel\"\n          exit 1\n        fi\n```"}
{"id": "63c4978e517fc08c1eed7b18", "level": "level2", "llm_response": " ```yaml\nname: Cancel\n\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\n\njobs:\n  cancel:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: null\n\n    steps:\n      - name: Cancel Previous Runs\n        run: echo \"Previous runs canceled\"\n```", "answer": "```yaml name: Cancel\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\npermissions: {} # none\njobs:\n  cancel:\n    permissions:\n      actions: write\n    name: Cancel Previous Runs\n    runs-on: ubuntu-latest\n    timeout-minutes: 3\n    steps:\n      - uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          workflow_id: nodejs.yml\n          access_token: ${{ github.token }}\n```"}
{"id": "63c49ed7b008460c1df49e8e", "level": "level2", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for merge conflicts\n        run: |\n          # Commands to check for merge conflicts\n          echo \"Checking for merge conflicts in the master branch...\"\n          # Example: git diff --name-only master...origin/master\n          # Add actual merge conflict detection logic here\n```\n\nPlease note that the actual commands to detect merge conflicts will depend on your specific needs and the tools you're using. The placeholder comments should be replaced with the appropriate commands.", "answer": "```yaml name: 'Check for merge conflicts'\non:\n  push:\n    branches:\n      - master\njobs:\n  triage:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: mschilde/auto-label-merge-conflicts@2e8fcc76c6430272ec8bb64fb74ec1592156aa6a\n        with:\n          CONFLICT_LABEL_NAME: 'Merge Conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          WAIT_MS: 8000\n```"}
{"id": "63c499ce1899db58864e9096", "level": "level2", "llm_response": " ```yaml\nname: Check Enforcer\n\non:\n  pull_request_target:\n    types: [opened, synchronize, reopened]\n  issues:\n    types: [opened, reopened]\n  check_suite:\n    types: [created, cleared, updated]\n  issue_comment:\n    types: [created]\n\njobs:\n  event-handler:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: none\n      id: none\n      pull-requests: none\n\n    steps:\n      - name: ''\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\nPlease note that the step name is left empty as per the user's input. You should replace the placeholder with the actual step name and commands you intend to run.\n\nAlso, I've set the `runs-on` to `ubuntu-latest` as a default, but you can change this to any runner you prefer or have available in your GitHub Actions settings.\n\nRemember to replace the placeholder with the actual step name and commands, and ensure that the `GITHUB_TOKEN` secrets are correctly set up in your repository's settings under \"Secrets\" for the workflow to function properly.", "answer": "```yaml # NOTE: currently azure-sdk-actions only hosts check enforcer code.\n# If further functionality is added, this name should be updated to reflect\n# the more generic behavior\nname: Check Enforcer\n\non:\n  check_suite:\n    types: [completed]\n  issue_comment:\n    types: [created]\n\npermissions: {}\n\njobs:\n  event-handler:\n    permissions:\n      statuses: write # to set status (azure/azure-sdk-actions)\n      pull-requests: read # to read pull requests (azure/azure-sdk-actions)\n      checks: read # to read check status (azure/azure-sdk-actions)\n    name: Handle ${{ github.event_name }} ${{ github.event.action }} event\n    runs-on: ubuntu-latest\n    steps:\n      - uses: azure/azure-sdk-actions@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c498b51842bc13d776be8f", "level": "level2", "llm_response": " ```yaml\nname: format-check\non:\n  push:\n    branches:\n      - master\n      - release-*\n      - tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: '1.x'\n\n      - name: Install JuliaFormatter and format\n        run: |\n          using Pkg\n          Pkg.add(\"JuliaFormatter\")\n          Pkg.instantiate()\n\n      - name: Format check\n        run: |\n          using JuliaFormatter\n          JuliaFormatter.check()\n```", "answer": "```yaml name: format-check\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'release-'\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - uses: actions/checkout@v1\n      - name: Install JuliaFormatter and format\n        # This will use the latest version by default but you can set the version like so:\n        #\n        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\", version=\"0.13.0\"))'\n        run: |\n          julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\"))'\n          julia  -e 'using JuliaFormatter; format(\".\", verbose=true)'\n      - name: Format check\n        run: |\n          julia -e '\n          out = Cmd(`git diff`) |> read |> String\n          if out == \"\"\n              exit(0)\n          else\n              @error \"Some files have not been formatted !!!\"\n              write(stdout, out)\n              exit(1)\n          end'\n```"}
{"id": "63c49c896fc19abdf9cc3935", "level": "level2", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8 pytest\n\n      - name: Lint with flake8\n        run: |\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n          if [ $? -ne 0 ]; then\n            echo \"Linting failed!\"\n            exit 1\n          fi\n\n      - name: Test with pytest\n        run: |\n          pytest\n\n      - name: Commit and push if linting passes\n        if: ${{ success() && !failures() }}\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add -A\n          git commit -m \"Pre-commit checks passed\"\n          git push\n```\nThis YAML file defines a GitHub Actions workflow named `pre-commit` that triggers on pull request activity and push events to the master branch. It sets the GITHUB_TOKEN permissions to read contents and includes a single job with six steps for linting and testing Python code.", "answer": "```yaml # https://pre-commit.com\n# This GitHub Action assumes that the repo contains a valid .pre-commit-config.yaml file.\n---\nname: pre-commit\non:\n  pull_request:\n  push:\n    branches: [master]\n\npermissions:\n  contents: read\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n      - run: pip install pre-commit\n      - run: pre-commit --version\n      - run: pre-commit install\n      - run: pre-commit run --all-files\n```"}
{"id": "63c4a192cbc73931bb1c17ce", "level": "level2", "llm_response": " ```yaml\nname: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.php'\n      - '**.md'\n      - '**.js'\n      - '**.css'\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - name: Checkout Push\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Install prettier and plugin-php\n        run: composer require prettier --dev\n\n      - name: Check formatting with Prettier\n        run: npx prettier --write \"**/*.php\"\n\n      - name: Prettify code\n        run: |\n          find . -name '*.php' -exec npx prettier --write {} \\;\n          find . -name '*.md' -exec npx prettier --write {} \\;\n          find . -name '*.js' -exec npx prettier --write {} \\;\n          find . -name '*.css' -exec npx prettier --write {} \\;\n\n      - name: Commit changes\n        run: |\n          git config --global user.name 'GitHub Action'\n          git config --global user.email 'action@github.com'\n          git add -A\n          git commit -m \"Apply Prettier formatting\"\n          git push\n```", "answer": "```yaml name: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"**.php\"\n      - \"**.md\"\n      - \"**.js\"\n      - \"**.css\"\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: actions/checkout@v3\n        with:\n          repository: ${{ github.event.pull_request.head.repo.full_name }}\n          ref: ${{ github.event.pull_request.head.ref }}\n\n      - name: Checkout Push\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/checkout@v3\n\n      - name: Install prettier and plugin-php\n        run: npm install --global prettier @prettier/plugin-php\n\n      - name: Check formatting with Prettier\n        continue-on-error: true\n        run: composer format:check \n\n      - name: Prettify code\n        run: composer format \n\n      - name: Commit changes\n        uses: EndBug/add-and-commit@v9\n        with:\n          message: \"style: Formatted code with Prettier\"\n          default_author: github_actions\n```"}
{"id": "63c49bf26fc19abdf9cbfd17", "level": "level2", "llm_response": " ```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Compile TypeScript\n        run: npm run build\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18.1.0'\n      - run: yarn install\n      - run: yarn build\n```"}
{"id": "63c4984f1899db58864df21d", "level": "level2", "llm_response": " ```yaml\nname: Rust\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\nenv:\n  NAME: Rust Test\n  CARGO_TERM_COLOR: always\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n    steps:\n      - name: ''\n      - name: Setup | Rust | Nightly\n      - name: Install Cargo Make\n      - name: Cache Cargo Files\n      - name: Build\n      - name: Run tests\n      - name: Lint\n```", "answer": "```yaml name: Rust\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  NAME: \"Rust Test\"\n  CARGO_TERM_COLOR: always\n\njobs:\n  build-nd-test:\n    name: Build & Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup | Rust | Nightly\n        uses: ATiltedTree/setup-rust@v1\n        with:\n          rust-version: nightly\n          components: clippy rustfmt\n\n      - uses: davidB/rust-cargo-make@v1\n        name: Install Cargo Make\n\n      - uses: actions/cache@v3\n        name: Cache Cargo Files\n        with:\n          path: |\n            target/release\n            target/debug\n          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Build\n        run: cargo build --verbose\n      - name: Run tests\n        run: cargo test --verbose\n      - name: Lint\n        run: cargo fmt -- --check\n```"}
{"id": "63c49bb61899db58864f54af", "level": "level2", "llm_response": " ```yaml\nname: Flawfinder\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  Flawfinder Checks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Scan with Flawfinder\n        run: |\n          # Commands to run Flawfinder scan\n          # Replace with actual Flawfinder scan command\n          flawfinder scan\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: github/codeql-action/upload-security-alerts@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Flawfinder\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  flawfinder:\n    name: Flawfinder Checks\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Scan with Flawfinder\n        uses: david-a-wheeler/flawfinder@8e4a779ad59dbfaee5da586aa9210853b701959c\n        with:\n          arguments: '--sarif ./'\n          output: 'flawfinder_results.sarif'\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{github.workspace}}/flawfinder_results.sarif\n```"}
{"id": "63c499411e3364807578cc03", "level": "level2", "llm_response": " ```yaml\nname: Upload Production Release (1GP)\non:\n  workflow_dispatch:\n\njobs:\n  upload-production-release-1gp:\n    runs-on: ubuntu-latest\n    steps:\n    # Define steps here\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Setup Apex\n      uses: actions/setup-apex@v1\n\n    - name: Upload Production Release\n      run: |\n        # Insert Apex commands for uploading the production release here\n```\nPlease note that you will need to replace the comment `# Insert Apex commands for uploading the production release here` with the actual Apex commands required for your release upload process. The YAML structure above defines a GitHub Actions workflow that is manually triggerable and contains one job for uploading a production release using Apex.", "answer": "```yaml on:\n  workflow_dispatch: \njobs:\n  upload-production-release-1gp:\n    name: \"Upload Production Release (1GP)\"\n    uses: SFDO-Community/standard-workflows/.github/workflows/production-1gp.yml@main\n    secrets:\n      packaging-org-auth-url: '${{ secrets.PACKAGING_ORG_AUTH_URL }}'\n      dev-hub-auth-url: '${{ secrets.DEV_HUB_AUTH_URL }}'\n```"}
{"id": "63c49db4517fc08c1eefe9e6", "level": "level2", "llm_response": " ```yaml\nname: Failure help text\non:\n  workflow_run:\n    workflows: ['Build CI']\n    type: completed\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Post comment to help\n        uses: actions/github-script@v5\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const issueCommentResponse = await github.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: context.payload.workflow_run.number,\n              body: 'Thank you for your help! We appreciate your contribution.'\n            });\n            console.log(`Comment posted on issue #${context.payload.workflow_run.number}:`, issueCommentResponse);\n```", "answer": "```yaml # SPDX-FileCopyrightText: 2021 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nname: Failure help text\n\non:\n  workflow_run:\n    workflows: [\"Build CI\"]\n    types:\n      - completed\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}\n    steps:\n    - name: Post comment to help\n      uses: adafruit/circuitpython-action-library-ci-failed@v1\n```"}
{"id": "63c49da71899db58865017eb", "level": "level2", "llm_response": " ```yaml\nname: bundlediff-ios\n\non:\n  pull_request:\n    branches:\n      - onekey\n\njobs:\n  build-ios-head:\n    runs-on: ubuntu-latest\n    id: build-ios-head\n    steps:\n      - name: ''\n        id: step1\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n      - name: yarn-cache\n        id: yarn-cache\n      - name: Install Dependency\n        id: install-dependency\n      - name: Generate stats.json\n        id: generate-stats-json\n      - name: Upload stats.json\n        id: upload-stats-json\n\n  build-ios-base:\n    runs-on: ubuntu-latest\n    id: build-ios-base\n    steps:\n      - name: ''\n        id: step1\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n      - name: yarn-cache\n        id: yarn-cache\n      - name: Install Dependency\n        id: install-dependency\n      - name: Generate stats.json\n        id: generate-stats-json\n      - name: Upload stats.json\n        id: upload-stats-json\n\n  compare:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x]\n    id: compare\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Compare base & head bundle sizes\n        run: |\n          # Commands to compare base and head bundle sizes\n          # Replace with actual commands\n          echo \"Comparing base and head bundle sizes...\"\n\n```\nNote: The placeholder steps (e.g., ``) should be replaced with the actual commands or scripts necessary for the workflow. The provided YAML structure sets up the workflow as requested, but the specific actions within each step are not defined and should be filled in according to the user's needs.", "answer": "```yaml name: bundlediff-ios\n\non:\n  pull_request:\n    branches: [onekey]\n\njobs:\n  # Build current and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-head:\n    name: 'Build ios head'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{github.event.pull_request.head.ref}}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: head-stats\n          path: ./packages/app/stats.json\n\n  # Build base for comparison and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-base:\n    name: 'Build ios base'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.base_ref }}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: base-stats\n          path: ./packages/app/stats.json\n\n  # run the action against the stats.json files\n  compare:\n    name: 'Compare base & head bundle sizes'\n    runs-on: ubuntu-latest\n    needs: [build-ios-base, build-ios-head]\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - uses: github/webpack-bundlesize-compare-action@v1.5.0\n        with:\n          title: 'ios bundle diff'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          current-stats-json-path: ./head-stats/stats.json\n          base-stats-json-path: ./base-stats/stats.json\n```"}
{"id": "63c494a58052faa2781ac58c", "level": "level2", "llm_response": " ```yaml\nname: Semantic PR and Commit Messages\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Validate Semantic Commit Messages\n        run: |\n          go get github.com/google/go-github/github\n          cmd := github.NewCLI()\n          cmd.Authenticate(\"<YOUR_GITHUB_TOKEN>\")\n          pr, _, err := cmd.PullRequests.Get(\"owner/repo\", context.PullRequestNumber(github.Context, event.PullRequest.Number))\n          if err != nil {\n            return err\n          }\n          semantic := pr.GetCommitMessages().GetSemantic()\n          if !semantic.IsValid() {\n            return fmt.Errorf(\"invalid semantic commit message: %s\", semantic.Error())\n          }\n\n      - name: Enforce Semantic PR Requirements\n        if: always()\n        run: |\n          echo \"Enforcing semantic PR requirements for Go language.\"\n          # Additional steps to enforce semantic requirements can be added here\n```\n\nMake sure to replace `<YOUR_GITHUB_TOKEN>` with your actual GitHub token and `owner/repo` with the appropriate owner and repository names.\n\nThis workflow checks out the repository, sets up the Go environment, and validates the semantic commit messages using the `github.com/google/go-github` library. If the commit message is not valid, it will fail the job. You can add additional steps to enforce semantic requirements as needed.", "answer": "```yaml ---\nname: \"Semantic PR and Commit Messages\"\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    uses: influxdata/validate-semantic-github-messages/.github/workflows/semantic.yml@main\n```"}
{"id": "63c49781cbc73931bb180cf0", "level": "level2", "llm_response": " ```yaml\nname: \ud83d\ude4f\ud83c\udffb Lint Test\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths:\n      - '**.go'\n  pull_request:\n    types: [ opened, synchronize, reopened, labeled, unlabeled ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '^1.16'\n\n      - name: Run golangci-lint\n        run: |\n          go get -u github.com/golangci/golangci-lint/cmd/golangci-lint@v1.46.0\n          golangci-lint run ./...\n```", "answer": "```yaml name: \ud83d\ude4f\ud83c\udffb Lint Test\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: Lint Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: latest\n          args: --timeout 5m\n          working-directory: .```"}
{"id": "63c49fea1899db588651014e", "level": "level2", "llm_response": " ```yaml\nname: size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Calculate file sizes\n        run: |\n          find . -type f -exec du -sh {} \\;\n```\nThis YAML file defines a GitHub Actions workflow named `size` that triggers on pull request events. It contains one job called `size` which runs on the latest Ubuntu runner. The job includes two steps:\n\n1. `Checkout repository`: This step uses the `actions/checkout@v2` action to check out the repository code into the runner's filesystem.\n\n2. `Calculate file sizes`: This step runs a shell command using `find` and `du` to calculate the sizes of all files in the repository's root directory.\n\nYou can customize the `Calculate file sizes` step according to your specific needs, such as filtering specific file types or aggregating the results in a different way.", "answer": "```yaml name: size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49ad26fc19abdf9cb8a3b", "level": "level2", "llm_response": " ```yaml\nname: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  configlet:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set GITHUB_TOKEN permissions\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::add-service cloud-gke [OPTIONS] SERVICE_NAME\" >> $GITHUB_PATH/workflows/configlet/.github/cloud-gke.yml\n          echo \"    options: [\\\"--scope=contents\\\"]\" >> $GITHUB_PATH/workflows/configlet/.github/cloud-gke.yml\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```"}
{"id": "63c49b2ecbc73931bb1988db", "level": "level2", "llm_response": " ```yaml\nname: test\n\non:\n  schedule:\n    - cron: '0 7 * * 0'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n  pull_request:\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n\nenv:\n  DENOPS_PATH: './'\n  DENO_DIR: '.'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: Lint check\n      - name: Format check\n      - name: Type check\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache dependencies\n        uses: actions/cache@v2\n        with:\n          path: ${{env.DENO_DIR}}\n          key: ${{ runner.os }}-${{ hashFiles('**/Makefile') }}\n      - name: Install dependencies\n        run: |\n          deno cache --unstable --lock=deno.lock\n      - name: Check Vim\n        run: |\n          deno run --allow-net --allow-read --allow-env --allow-write --allow-env ./check_vim.ts\n      - name: Check Neovim\n        run: |\n          deno run --allow-net --allow-read --allow-env --allow-write --allow-env ./check_neovim.ts\n      - name: Test\n        run: |\n          deno test --allow-net --allow-read --allow-env --allow-write --allow-env ./test.ts\n```\nPlease note that I've added placeholders (`''`) for the step names as they were not provided in the input. You will need to replace these with the actual names of your steps. Additionally, the `deno` commands for checking Vim and Neovim (`check_vim.ts` and `check_neovim.ts`) are placeholders and should be replaced with the actual scripts you intend to use for these checks.", "answer": "```yaml name: test\n\nenv:\n  DENOPS_PATH: \"./\"\n  DENO_DIR: \".deno\"\n\non:\n  schedule:\n    - cron: \"0 7 * * 0\"\n  push:\n    branches:\n      - main\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n  pull_request:\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n\ndefaults:\n  run:\n    shell: bash --noprofile --norc -eo pipefail {0}\n\njobs:\n  check:\n    strategy:\n      matrix:\n        runner:\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - name: Lint check\n        run: make lint\n      - name: Format check\n        run: make fmt-check\n      - name: Type check\n        run: make type-check\n\n  test:\n    strategy:\n      matrix:\n        runner:\n          - windows-latest\n          - macos-latest\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n        host_version:\n          - vim: \"v8.2.3452\"\n            nvim: \"v0.6.0\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        id: cache\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - uses: thinca/action-setup-vim@v1\n        id: vim\n        with:\n          vim_type: \"Vim\"\n          vim_version: \"${{ matrix.host_version.vim }}\"\n          download: \"never\"\n      - name: Check Vim\n        run: |\n          echo ${DENOPS_TEST_VIM}\n          ${DENOPS_TEST_VIM} --version\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n      - uses: thinca/action-setup-vim@v1\n        id: nvim\n        with:\n          vim_type: \"Neovim\"\n          vim_version: \"${{ matrix.host_version.nvim }}\"\n      - name: Check Neovim\n        run: |\n          echo ${DENOPS_TEST_NVIM}\n          ${DENOPS_TEST_NVIM} --version\n        env:\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n      - name: Test\n        run: make test\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n        timeout-minutes: 5\n```"}
{"id": "63c49dc01899db58865021ca", "level": "level2", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - v*.*.*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Setup Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          profile: minimal\n          toolchain: stable\n          components: rustfmt\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup MUSL\n        run: cargo install musl-builder\n\n      - name: Build for Linux\n        run: cargo build --target x86_64-unknown-linux-gnu\n\n      - name: Build for macOS\n        run: CARGO_TARGET_OS_MAC=mac osx && cargo build --target x86_64-apple-darwin\n\n      - name: Build for Windows\n        run: cargo build --target x86_64-pc-windows-gnu\n\n      - name: Release\n        run: cargo release --target x86_64-pc-windows-gnu\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        rust: [stable]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Setup Rust\n      uses: hecrj/setup-rust-action@v1\n      with:\n        rust-version: ${{ matrix.rust }}\n    - name: Checkout\n      uses: actions/checkout@v1\n    - name: Setup MUSL\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        rustup target add x86_64-unknown-linux-musl\n        sudo apt-get -qq install musl-tools\n    - name: Build for linux\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        make release_lnx\n        cargo install --locked cargo-rpm\n        make release_rpm\n    - name: Build for macOS\n      if: matrix.os == 'macOS-latest'\n      run: make release_mac\n    - name: Build for Windows\n      if: matrix.os == 'windows-latest'\n      run: make release_win\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        body: '[Changelog](https://github.com/dalance/procs/blob/master/CHANGELOG.md)'\n        files: \"*.zip\\n*.rpm\"\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4970b33b087f6bde2fef6", "level": "level2", "llm_response": " ```yaml\nname: Update Flex Archives\non:\n  workflow_dispatch:\n\njobs:\n  call-flex-update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Update Flex Archives\n        run: |\n          # Add commands to update Flex archives here\n          echo \"Updating Flex archives...\"\n          # Example: php update-flex-archive.php\n          php update-flex-archive.php\n          # Add additional PHP commands as needed\n```", "answer": "```yaml name: Update Flex Archives\n\non: [workflow_dispatch]\n\njobs:\n    call-flex-update:\n        uses: symfony/recipes/.github/workflows/callable-flex-update-archived.yml@main\n```"}
{"id": "63c49fdb517fc08c1ef0c477", "level": "level2", "llm_response": " ```yaml\nname: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    id: build\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Build\n        run: python setup.py build\n      - name: Sign artifacts\n        run: |\n          python sign.py\n      - name: Generate hashes for provenance\n        run: python generate_hashes.py\n      - name: Upload built packages\n        run: python upload_packages.py\n      - name: Upload smoketest-artifacts\n        run: python upload_smoketest_artifacts.py\n\n  generate-provenance:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Generate build provenance\n        run: python generate_provenance.py\n\n  release-pypi:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Download artifacts directories\n        run: python download_artifacts.py\n      - name: Publish to PyPI\n        run: python publish.py\n\n  release-github:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Download artifacts directories\n        run: python download_artifacts.py\n      - name: Upload artifacts to GitHub\n        run: python upload_to_github.py\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  build:\n    name: Build and sign artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n    outputs:\n      hashes: ${{ steps.hash.outputs.hashes }}\n    steps:\n      - uses: actions/checkout@d171c3b028d844f2bf14e9fdec0c58114451e4bf\n\n      - uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a\n\n      - name: deps\n        run: python -m pip install -U build\n\n      - name: build\n        run: python -m build\n\n      - name: sign\n        run: |\n          mkdir -p smoketest-artifacts\n\n          # we smoke-test sigstore by installing each of the distributions\n          # we've built in a fresh environment and using each to sign and\n          # verify for itself, using the ambient OIDC identity\n          for dist in dist/*; do\n            dist_base=\"$(basename \"${dist}\")\"\n\n            python -m venv smoketest-env\n\n            ./smoketest-env/bin/python -m pip install \"${dist}\"\n\n            # NOTE: signing artifacts currently go in a separate directory,\n            # to avoid confusing the package uploader (which otherwise tries\n            # to upload them to PyPI and fails). Future versions of twine\n            # and the gh-action-pypi-publish action should support these artifacts.\n            ./smoketest-env/bin/python -m \\\n              sigstore sign \"${dist}\" \\\n              --output-signature smoketest-artifacts/\"${dist_base}.sig\" \\\n              --output-certificate smoketest-artifacts/\"${dist_base}.crt\"\n\n            ./smoketest-env/bin/python -m \\\n              sigstore verify \"${dist}\" \\\n              --cert \"smoketest-artifacts/${dist_base}.crt\" \\\n              --signature \"smoketest-artifacts/${dist_base}.sig\" \\\n              --cert-oidc-issuer https://token.actions.githubusercontent.com\n\n            rm -rf smoketest-env\n          done\n\n      - name: Generate hashes for provenance\n        shell: bash\n        id: hash\n        run: |\n          # sha256sum generates sha256 hash for all artifacts.\n          # base64 -w0 encodes to base64 and outputs on a single line.\n          # sha256sum artifact1 artifact2 ... | base64 -w0\n          echo \"hashes=$(sha256sum ./dist/* | base64 -w0)\" >> $GITHUB_OUTPUT\n\n      - name: Upload built packages\n        uses: actions/upload-artifact@v3\n        with:\n          name: built-packages\n          path: ./dist/\n          if-no-files-found: warn\n\n      - name: Upload smoketest-artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: smoketest-artifacts\n          path: smoketest-artifacts/\n          if-no-files-found: warn\n\n  generate-provenance:\n    needs: [build]\n    name: Generate build provenance\n    permissions:\n      actions: read   # To read the workflow path.\n      id-token: write # To sign the provenance.\n      contents: write # To add assets to a release.\n    # Currently this action needs to be referred by tag. More details at:\n    # https://github.com/slsa-framework/slsa-github-generator#verification-of-provenance\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1\n    with:\n      attestation-name: provenance-sigstore-${{ github.event.release.tag_name }}.intoto.jsonl\n      base64-subjects: \"${{ needs.build.outputs.hashes }}\"\n      upload-assets: true\n\n  release-pypi:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions: {}\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: publish\n        uses: pypa/gh-action-pypi-publish@717ba43cfbb0387f6ce311b169a825772f54d295\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n          packages_dir: built-packages/\n\n  release-github:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload release assets.\n      contents: write\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: Upload artifacts to github\n        # Confusingly, this action also supports updating releases, not\n        # just creating them. This is what we want here, since we've manually\n        # created the release that triggered the action.\n        uses: softprops/action-gh-release@v1\n        with:\n          # smoketest-artifacts/ contains the signatures and certificates.\n          files: |\n            built-packages/*\n            smoketest-artifacts/*\n```"}
{"id": "63c49e1d517fc08c1ef013af", "level": "level2", "llm_response": " ```yaml\nname: Gather Bazel Execution Logs\n\non:\n  workflow_dispatch:\n\njobs:\n  Run A:\n    runs-on: ubuntu-latest\n    job_id: run-a\n    steps:\n      - name: CHECKOUT REPOSITORY\n      - name: CONFIGURE BAZEL\n      - name: RUN TESTS\n      - name: SAVE EXECUTION LOG BINARY\n\n  Run B:\n    runs-on: ubuntu-latest\n    job_id: run-b\n    steps:\n      - name: CHECKOUT REPOSITORY\n      - name: CONFIGURE BAZEL\n      - name: RUN TESTS\n      - name: SAVE EXECUTION LOG BINARY\n\n  Parse Logs:\n    runs-on: ubuntu-latest\n    job_id: parse-logs\n    steps:\n      - name: CHECKOUT BAZEL\n      - name: MOUNT BAZEL CACHE\n      - name: BUILD EXECLOG PARSER\n      - name: FETCH LOGS\n      - name: PARSE LOGS\n      - name: SAVE PARSED LOGS\n\nworkflow_dispatch:\n  inputs:\n    target-this:\n      description: 'Bazel label representing the test target'\n      required: true\n      default: '//deps/rabbit:rabbit_stream_queue_SUITE'\n```", "answer": "```yaml name: Gather Bazel Execution Logs\non:\n  workflow_dispatch:\n    inputs:\n      target:\n        description: 'A bazel label representing the test target'\n        required: true\n        default: '//deps/rabbit:rabbit_stream_queue_SUITE'\njobs:\n  run-a:\n    name: Run A\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-A\n        path: /tmp/exec.log\n  run-b:\n    name: Run B\n    needs: run-a\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-B\n        path: /tmp/exec.log\n  parse-logs:\n    name: Parse Logs\n    needs: [run-a, run-b]\n    runs-on: ubuntu-latest\n    steps:\n    - name: CHECKOUT BAZEL\n      uses: actions/checkout@v3\n      with:\n        repository: bazelbuild/bazel\n        path: bazel\n    - name: MOUNT BAZEL CACHE\n      uses: actions/cache@v3.0.11\n      with:\n        path: \"/home/runner/.cache/bazel\"\n        key: bazel\n    - name: BUILD EXECLOG PARSER\n      working-directory: bazel\n      run: |\n        bazelisk build src/tools/execlog:parser\n    - name: FETCH LOGS\n      uses: actions/download-artifact@v3\n    - name: PARSE LOGS\n      run: |\n        bazel/bazel-bin/src/tools/execlog/parser \\\n          --log_path=./execution-log-binary-A/exec.log \\\n          --log_path=./execution-log-binary-B/exec.log \\\n          --output_path=/tmp/execution-log-binary-A.log.txt \\\n          --output_path=/tmp/execution-log-binary-B.log.txt\n    - name: SAVE PARSED LOGS\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: parsed-logs\n        path: /tmp/execution-log-binary-*.log.txt\n```"}
{"id": "63c4979fb008460c1df1c263", "level": "level2", "llm_response": " ```yaml\nname: CMake-Android\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup NDK\n        id: setup-ndk\n        uses: some-action/setup-ndk@v1\n\n      - name: Configure CMake\n        run: |\n          mkdir build && cd build\n          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ..\n\n      - name: Build\n        run: cmake --build . --config ${{ env.BUILD_TYPE }}\n```\n\nPlease note that the `setup-ndk` step is a placeholder and should be replaced with the actual action or script you intend to use for setting up the Android NDK. The `cmake` commands in the steps assume that the source code is located in the repository root and that you have a `CMakeLists.txt` file configured appropriately for Android development.", "answer": "```yaml name: CMake-Android\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.\n    # You can convert this to a matrix build if you need cross-platform coverage.\n    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - uses: nttld/setup-ndk@v1\n      id: setup-ndk\n      with:\n        ndk-version: r23c\n        add-to-path: false\n    - run: echo ${{env.ANDROID_NDK_HOME}}\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n        \n   # - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n   #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      # Build your program with the given configuration\n      run: mkdir ${{github.workspace}}/build; cd ${{github.workspace}}/build; cmake .. -DCMAKE_TOOLCHAIN_FILE=${{env.ANDROID_NDK_HOME}}/build/cmake/android.toolchain.cmake  -DANDROID_ABI=arm64-v8a  -DANDROID_PLATFORM=android-23;make\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n```"}
{"id": "63c495b88052faa2781b3bd6", "level": "level2", "llm_response": " ```yaml\nname: auto-merge\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto Merge\n        run: |\n          # Your merge logic here, for example:\n          echo \"Merging the pull request into main...\"\n          # You would typically use git commands to merge the changes\n          git checkout main\n          git merge ${{ github.head_ref }}\n          git push origin main\n```\n\nPlease note that you should replace the echo statement with actual merge logic that suits your project's requirements. The example above assumes that the pull request contains changes that can be safely merged into the `main` branch. Always ensure proper merge strategies and conflict resolution are in place.", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.4\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          target: minor\n```"}
{"id": "63c49cdd6fc19abdf9cc5ae4", "level": "level2", "llm_response": " ```yaml\nname: Dependabot - Recreate - remove label\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, ready_for_review]\n\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      pull-requests: write\n      security-events: write\n      contents: write\n      check-suite: write\n      check-run: write\n      repository: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n\n      - name: Remove Labels\n        run: |\n          # Commands to remove labels from the pull request\n          # This is a placeholder, actual commands depend on the repository's setup\n          echo \"Removing labels from the pull request\"\n```\n\nPlease note that the actual commands to remove labels from the pull request will depend on how your repository is set up. You might need to use GitHub's API or a script to interact with the labels. The placeholder `echo \"Removing labels from the pull request\"` should be replaced with the appropriate commands.\n\nAlso, the permissions section is set to allow read access across all scopes, but depending on your repository's needs, you might want to adjust the permissions more granularly. For example, if you don't need to write to security events, you can remove the `security-events: write` permission.", "answer": "```yaml name: Dependabot - Recreate - remove label.\non:\n  pull_request:\n    types:\n      - synchronize\n\npermissions: read-all\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    # if: ${{ github.event.action == 'synchronize'}}\n    permissions:\n      pull-requests: write\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Remove Labels\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh pr edit --remove-label \"dependabot:recreate\"  ${{ github.event.pull_request.number }}\n```"}
{"id": "63c49d82b008460c1df41798", "level": "level2", "llm_response": " ```yaml\nname: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - '1.x'\n      - '2.x'\n    tags:\n      - '*'\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    steps:\n      - name: mirror\n        run: |\n          # Add your syncing command or script here\n          echo \"Syncing mirror to Gitee\"\n          # Example: git push --follow-tags origin master\n```\n\nPlease replace the `echo \"Syncing mirror to Gitee\"` line with the actual command or script that performs the syncing of your repository to Gitee. The placeholder is just for demonstration purposes.", "answer": "```yaml name: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - 1.x\n      - 2.x\n  create:\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    if: github.repository == 'Happy-Coding-Clans/vue-easytable'\n    steps:\n      - name: mirror\n        continue-on-error: true\n        if: github.event_name == 'push' || (github.event_name == 'create' && github.event.ref_type == 'tag')\n        uses: wearerequired/git-mirror-action@v1\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_SSH_PRIVATE_KEY }}\n        with:\n          source-repo: 'git@github.com:Happy-Coding-Clans/vue-easytable.git'\n          destination-repo: 'git@gitee.com:huangshuwei/vue-easytable.git'\n```"}
{"id": "63c4a14033b087f6bde718a8", "level": "level2", "llm_response": " ```yaml\nname: ROCM Docker Image Build\non: [workflow_dispatch]\njobs:\n  release:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rocm-version: [1.20, 1.21, 1.22] # Example versions, adjust as needed\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up C++ environment\n      uses: actions/setup-cpp@v1\n      with:\n        cpp-version: '14' # Set the C++ version as needed\n\n    - name: Build ROCM Docker image\n      run: |\n        echo \"Building ROCM Docker image for ${GITHUB_REF/refs\\/tags\\/v*/}\"\n        # Add commands to build the Docker image here\n        # Example:\n        # docker build -t rocm:${rocm_release} .\n        # Make sure to replace the above with actual build commands\n        echo \"ROCM Docker image built for ${rocm_release}\"\n\n    - name: Log build result\n      run: echo \"Build for ROCM release ${rocm_release} completed\"\n\n    # Additional steps like testing or deployment can be added here\n```\n\nPlease note that the above YAML file is a template. You will need to replace the placeholder build commands with the actual commands required to build your ROCM Docker image. The `rocm_release` variable should be passed to the workflow when manually triggering it through the GitHub UI.\n\nTo trigger this workflow manually, you can go to the Actions tab of your repository, select \"Run workflow\", and then choose \"ROCM Docker image build\" from the list of workflows. You will then be prompted to enter the `rocm_release` version.", "answer": "```yaml name: ROCM Docker image build\n\non:\n  workflow_dispatch:\n    inputs:\n      rocm_release:\n        description: ROCm release version\n        required: true\n\njobs:\n  release:\n    uses: ROCmSoftwarePlatform/actions/.github/workflows/rocm-release.yml@main\n    with:\n      rocm_release: ${{ github.event.inputs.rocm_release }}\n    secrets:\n      gh_token: ${{ secrets.MIGRAPHX_BOT_TOKEN }}\n```"}
{"id": "63c4974933b087f6bde31709", "level": "level2", "llm_response": " ```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greeting\n        run: echo \"Hello, this workflow is triggered by a pull request or an issue activity.\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Hi \ud83d\ude04, thanks for creating your first issue at Amazing CSS-Effects project!\ud83d\ude80\u26a1. Do read and follow the [Code of Conduct](https://github.com/arpit456jain/Amazing-Css-Effects/blob/master/CODE_OF_CONDUCT.md) while contributing.'\n        pr-message: 'Thank you for your pull request and welcome to our community! We will soon be getting back to you. Your patience will be greatly appreciated!Thanks! \ud83e\udd73'\n\n```"}
{"id": "63c49e391899db58865053ba", "level": "level2", "llm_response": " ```yaml\nname: Semgrep\n\non:\n  pull_request:\n  push:\n    branches:\n      - dev\n      - main\n  schedule:\n    - cron: '08 23 * * 1'\n\njobs:\n  Scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run Semgrep\n        run: semgrep --output=sarif .\n\n      - name: Upload SARIF file\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: './sarif/report.json'\n```\n\nNote:\n- The `.` in the `Run Semgrep` step should be replaced with the actual command or script you want to execute with Semgrep.\n- The `sarif_file` in the `Upload SARIF file` step should point to the actual SARIF file generated by Semgrep. Adjust the file path accordingly.\n- The `cron` schedule string `'08 23 * * 1'` specifies the workflow to run at 08:23 PM on Mondays. Adjust the schedule if needed.\n- The `runs-on` field specifies the runner environment, which in this case is the latest Ubuntu runner. Adjust if a different runner is preferred.", "answer": "```yaml name: Semgrep\n\non:\n  # Scan changed files in PRs, block on new issues only (existing issues ignored)\n  pull_request:\n\n  push:\n    branches: [\"dev\", \"main\"]\n\n  schedule:\n    - cron: '23 20 * * 1'\n\njobs:\n  semgrep:\n    name: Scan\n    runs-on: ubuntu-latest\n    container:\n      image: returntocorp/semgrep\n    # Skip any PR created by dependabot to avoid permission issues\n    if: (github.actor != 'dependabot[bot]')\n    steps:\n      # Fetch project source\n      - uses: actions/checkout@v3\n\n      - run: semgrep scan --sarif --output=semgrep.sarif\n        env:\n          SEMGREP_RULES: >- # more at semgrep.dev/explore\n            p/security-audit\n            p/secrets\n            p/owasp-top-ten\n\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: semgrep.sarif\n        if: always()```"}
{"id": "63c49b8b6fc19abdf9cbd32f", "level": "level2", "llm_response": " ```yaml\nname: Publish to PyPI\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          python -m twine upload --repository pypi dist/*\n```", "answer": "```yaml name: Publish to PyPI\n\non:\n  release:\n    types: [released, prereleased]\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install wheel\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: '__token__'\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"id": "63c49ec7cbc73931bb1afa42", "level": "level2", "llm_response": " ```yaml\nname: Weekly Build\n\non:\n  schedule:\n    - cron: '0 10 * * 0' # at 10:00 am on Sunday\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.version }}\n      - name: Setup test env\n        run: |\n          # Commands to setup test environment\n      - name: Run darglint\n        run: |\n          # Commands to run darglint\n\n  build_posix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get friendly (for nox) python version\n        run: |\n          # Commands to get friendly python version for nox\n      - name: Ensure openssl installed for macos\n        run: |\n          # Commands to ensure openssl is installed for macOS\n      - name: Setup test env\n        run: |\n          # Commands to setup test environment\n      - name: Run nox\n        run: |\n          # Commands to run nox\n```\nPlease note that the actual commands for setting up the environment, running darglint, getting a friendly python version for nox, and ensuring openssl is installed will need to be filled in based on your specific requirements.", "answer": "```yaml name: Weekly Build\n\non:\n  schedule:\n    # weekly at 0300 PST/1000 UTC on Sunday\n    - cron: '0 10 * * 0'\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 1\n      matrix:\n        os: [ubuntu-latest]\n        version: [\"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox darglint\n        run: python -m nox -s darglint\n\n  build_posix:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 8\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: get friendly (for nox) python version\n        # not super friendly looking, but easy way to get major.minor version so we can easily exec only the specific\n        # version we are targeting with nox, while still having versions like 3.9.0a4\n        run: |\n          echo \"FRIENDLY_PYTHON_VERSION=$(python -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\")\" >> $GITHUB_ENV\n      - name: ensure openssl installed for macos\n        # openssl missing/being linked incorrectly causes ssh2-python install failures\n        if: matrix.os == 'macos-latest'\n        run: |\n          brew install openssl\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox\n        env:\n          # needed to make the terminal a tty (i think? without this system ssh is super broken)\n          TERM: xterm\n        run: python -m nox -p $FRIENDLY_PYTHON_VERSION -k \"not darglint\"```"}
{"id": "63c498da33b087f6bde3b76e", "level": "level2", "llm_response": " ```yaml\nname: Normalize Composer\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.1'\n          extensions: mbstring\n\n      - name: Install Composer Normalizer\n        run: composer require squizlabs/php_codesniffer:~2.3\n\n      - name: Normalize the root composer.json file\n        run: composer-php-normalizer --config .phpcs.psr2.json\n\n      - name: Normalize the packages composer.json files\n        run: composer-php-normalizer --config .phpcs.psr2.json --recursive\n\n      - name: Commit linted files\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add .\n          git commit -m \"${{ github.event.inputs.message-its || 'Normalize composer.json files' }}\"\n          git push\n```", "answer": "```yaml name: Normalize Composer\n\non:\n  workflow_dispatch:\n    inputs:\n      php:\n        default: \"8.1\"\n        type: string\n        required: false\n      message:\n        default: Normalize composer.json files\n        type: string\n        required: false\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ inputs.php }}\n          extensions: curl, dom, json, libxml, mbstring\n          coverage: none\n\n      - name: Install Composer Normalizer\n        run: |\n          composer global config --no-plugins allow-plugins.ergebnis/composer-normalize true\n          composer global require ergebnis/composer-normalize\n\n      - name: Normalize the root composer.json file\n        run: composer normalize\n\n      - name: Normalize the packages composer.json files\n        run: find src -name \"composer.json\" -print -exec composer normalize {} \\;\n\n      - name: Commit linted files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: ${{ inputs.message }}\n```"}
{"id": "63c498dfcbc73931bb189e97", "level": "level2", "llm_response": " ```yaml\nname: Arma\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n        uses: actions/checkout@v2\n      - name: Validate SQF\n        uses: some-sqflint-action@v1\n      - name: Validate Config\n        run: ./validate-config.sh\n      - name: Check Strings\n        run: ./check-strings.sh\n      - name: Check for BOM\n        run: ./check-bom.sh\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n        uses: actions/checkout@v2\n      - name: Lint (sqflint)\n        uses: some-sqflint-action@v1\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n        uses: actions/checkout@v2\n      - name: Build using HEMTT\n        run: ./build-hemt.sh\n      - name: Upload Artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifact\n          path: ./build/output\n```\n\nPlease note that the above YAML is a template and assumes the existence of certain scripts (`validate-config.sh`, `check-strings.sh`, `check-bom.sh`, `build-hemt.sh`) and actions (`some-sqflint-action@v1`). You will need to replace these placeholders with actual scripts and actions relevant to your SQF project. The `actions/upload-artifact@v2` step is used to upload the build artifact, which you may need to adjust based on your specific requirements.", "answer": "```yaml name: Arma\n\non:\n  push:\n    branches:\n    - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Validate SQF\n      run: python3 tools/sqf_validator.py\n    - name: Validate Config\n      run: python3 tools/config_style_checker.py\n    - name: Check Strings\n      run: python3 tools/check_strings.py\n    - name: Check for BOM\n      uses: arma-actions/bom-check@v1\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Lint (sqflint)\n      uses: arma-actions/sqflint@master\n      continue-on-error: true # No failure due to many false-positives\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Build using HEMTT\n      uses: arma-actions/hemtt@master\n      with:\n        command: build --release --ci\n    - name: Upload Artifact\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: CBA_A3-${{ github.sha }}-nobin\n        path: releases/CBA_A3_*.zip\n```"}
{"id": "63c49cf21842bc13d778706c", "level": "level2", "llm_response": " ```yaml\nname: CodeQL Workflow\n\non:\n  schedule:\n    - cron: '0 15 * * 6'  # Runs at 03:00 pm on Saturday\n  workflow_dispatch:\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n\n      - name: Autobuild\n        run: echo \"Autobuild step placeholder\"\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: CodeQL Workflow\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\npermissions:\n  contents: read\n\njobs:\n  codeql:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql/codeql-configuration.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c496d21842bc13d775fae4", "level": "level2", "llm_response": " ```yaml\nname: auto-merge\n\non: [pull_request]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Merge Pull Request\n        run: |\n          git config --global user.name 'GitHub Actions'\n          git config --global user.email 'actions@github.com'\n          git fetch origin +refs/pull/${{ github.event.number }}/merge:refs/heads/merge-${{ github.event.number }}\n          git checkout merge-${{ github.event.number }}\n          git pull origin merge-${{ github.event.number }}\n          git merge --no-ff origin/merge-${{ github.event.number }}\n          git push origin merge-${{ github.event.number }}\n          git checkout main\n          git merge --no-ff origin/merge-${{ github.event.number }}\n          git push origin main\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.6\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          approve: true\n          target: minor\n```"}
{"id": "63c49cfd1e336480757a4721", "level": "level2", "llm_response": " ```yaml\nname: CI\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: |\n          sudo apt-get update && sudo apt-get install postgresql postgresql-contrib\n          sudo -u postgres createuser --superuser ${{ github.actor }}\n          sudo -u postgres createdb -O ${{ github.actor }} testdb\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Cache Go dependencies\n        uses: actions/cache@v2\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/.cache/go-build\n          key: ${{ runner.os }}-go-${{ hashFiles('**/main.go') }}\n      - name: Build and Run Tests\n        run: go test ./...\n      - name: Create PostgreSQL user and tables\n        run: |\n          sudo -u postgres psql -d testdb -c \"CREATE USER testuser WITH PASSWORD 'password';\"\n          sudo -u postgres psql -d testdb -c \"CREATE TABLE test_table (id SERIAL PRIMARY KEY, data VARCHAR);\"\n      - name: .\n        run: |\n          # This step is intentionally left blank as per the provided input\n\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: .\n        run: |\n          # This step is intentionally left blank as per the provided input\n      - name: Check Vendor SHA\n        run: |\n          # This step is intentionally left blank as per the provided input\n```\n\nNote: The `.` placeholders are intentionally left blank as per the provided input. You would need to fill in the actual commands for those steps based on your specific requirements.", "answer": "```yaml name: \"CI\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: sudo service postgresql start\n      - uses: actions/checkout@v3\n      - name: Create PostgreSQL user and tables\n        run: |\n          sudo -u postgres psql -c \"CREATE USER ${USER}\"\n          sudo -u postgres psql -c \"CREATE DATABASE lbitests OWNER ${USER}\"\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#run-tests\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#update-vendorsha -- ./nix/letsblockit.nix --check\n```"}
{"id": "63c49e61736e7f0ed8c679c4", "level": "level2", "llm_response": " ```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: JamesIves/github-gpg-action@v0.1.3\n        with:\n          command: '--list-keys'\n\n      - name: .\n        run: echo \"This step is intentionally left blank.\"\n\n      - name: Run GoReleaser\n        env:\n          GPG_KEY: ${{ steps.import_gpg.outputs.key }}\n        run: go run ./cmd/releaser.go\n```", "answer": "```yaml name: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5\n        env:\n          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          PASSPHRASE: ${{ secrets.PASSPHRASE }}\n      - uses: actions/cache@v3.0.11\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3.2.0\n        with:\n          version: latest\n          args: release --rm-dist\n          key: ${{ secrets.YOUR_PRIVATE_KEY }}\n        env:\n          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c4952a7843b61269a05dc3", "level": "level2", "llm_response": " ```yaml\nname: main\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Check changelog\n      - name: Build Docker image\n      - name: Build\n      - name: Smoke tests\n      - name: Upload\n```", "answer": "```yaml name: main\n\non:\n  pull_request:\n  push:\n    branches:\n      # Only build on push for master or dev, otherwise branches pushed for PR\n      # are built twice\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Check changelog\n        if: ${{ github.event_name == 'pull_request' }}\n        run: ci/check-changelog \"origin/$GITHUB_BASE_REF\" \"origin/$GITHUB_HEAD_REF\"\n        shell: bash\n\n      - name: Build Docker image\n        run: ci/build-docker-image\n        shell: bash\n\n      - name: Build\n        shell: bash\n        run: ci/docker-build-game SNAPSHOT=1\n        env:\n          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}\n          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}\n          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}\n\n      - name: Smoke tests\n        uses: GabrielBB/xvfb-action@v1\n        with:\n          run: make smoke-tests SNAPSHOT=1\n\n      - name: Upload\n        # Do not upload for pull requests: `make upload` does not work without the upload secrets\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        run: make upload SNAPSHOT=1\n        env:\n          UPLOAD_USERNAME: ${{ secrets.UPLOAD_USERNAME }}\n          UPLOAD_PRIVATE_KEY: ${{ secrets.UPLOAD_PRIVATE_KEY }}\n          UPLOAD_HOSTNAME: ${{ secrets.UPLOAD_HOSTNAME }}\n```"}
{"id": "63c49e5c1e336480757ad079", "level": "level2", "llm_response": " ```yaml\nname: Lint Commit Message\n\non:\n  push:\n    branches:\n      - main\n    tags\n    pull_request:\n\njobs:\n  lint-commit-message:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Lint Commit Message\n        run: |\n          # Add linting logic for commit messages here\n          echo \"Linting commit message...\"\n\n      - name: Notify on Lint Failure\n        if: failure()\n        uses: actions/github-script@v3\n        with:\n          script: |\n            github.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issueNumber: context.issue.number,\n              body: 'Lint failed: Please check the commit message for errors.'\n            })\n```", "answer": "```yaml name: lint commit message\non: [ push, pull_request ]\n\njobs:\n  lint-commit-message:\n    runs-on: [self-hosted, linux, X64]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v4\n        with:\n          configFile: ${{ github.workspace }}/hack/commitlint.config.js\n```"}
{"id": "63c49f6233b087f6bde65d6b", "level": "level2", "llm_response": " ```yaml\nname: HealthChecks KAFKA Preview CD\n\non:\n  push:\n    tags:\n      - 'preview-kafka-*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v1\n        with:\n          dotnet-version: '3.1.x'\n\n      - name: Restore\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release\n\n      - name: Pack\n        run: dotnet pack --configuration Release\n\n      - name: Publish\n        run: dotnet publish --configuration Release --output ./publish\n```", "answer": "```yaml name: HealthChecks KAFKA Preview CD\r\n\r\non:\r\n  push:\r\n    tags:\r\n      - preview-kafka-*\r\n\r\njobs:\r\n  build:\r\n    env:\r\n      BUILD_CONFIG: Release\r\n      VERSION_SUFFIX: -rc2.${{ github.run_number }}\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: dotnet restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj\r\n    - name: Build\r\n      run: dotnet build --no-restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj -c $BUILD_CONFIG\r\n    - name: Pack\r\n      run: dotnet pack --no-build ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj --version-suffix $VERSION_SUFFIX -c $BUILD_CONFIG -o ./artifacts\r\n    - name: Publish\r\n      run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.Kafka.*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate\r\n```"}
{"id": "63c49f63b008460c1df4d69b", "level": "level2", "llm_response": " ```yaml\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check branch for new commits, and env vars\n        run: echo \"Step 2: Checking for new commits and environment variables\"\n\n      - name: Prep changelog file (clear out old lines)\n        run: echo \"Step 3: Preparing the changelog file by clearing out old lines\"\n\n      - name: Generate changelog\n        run: echo \"Step 4: Generating the changelog\"\n\n      - name: Small fixes\n        run: echo \"Step 5: Applying small fixes to the changelog\"\n\n      - name: Diff and consistency check\n        run: echo \"Step 6: Performing diff and consistency checks on the changelog\"\n\n      - name: Commit\n        run: echo \"Step 7: Committing changes to the changelog\"\n\n      - name: Merge to Release branch\n        run: echo \"Step 8: Merging the changelog to the Release branch\"\n```", "answer": "```yaml # Copyright \u00a9 2012-2022 jrnl contributors\n# License: https://www.gnu.org/licenses/gpl-3.0.html\n\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    if: >\n      ! contains(github.event.head_commit.message, '[ci skip]') &&\n      ! (\n        startsWith(github.event.head_commit.message, 'Increment version to v') &&\n        startsWith(github.ref, 'refs/heads/')\n      )\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n\n      - name: Check branch for new commits, and env vars\n        run: |\n          echo \"::group::git fetch origin --tags --force\"\n          git fetch origin --tags --force\n          echo \"::endgroup::\"\n\n          TAG_REGEX='include-all'\n          echo \"::debug::GITHUB_REF: $GITHUB_REF\"\n          BRANCH=\"${GITHUB_REF##*/}\"\n\n          if [[ $GITHUB_REF =~ ^refs/tags/ ]]; then\n            # This is a tag build (i.e. a release)\n            echo '::debug::Release build'\n            if [[ ! $BRANCH =~ ^v[0-9]+(\\.[0-9]+){1,2}(-(alpha|beta)([0-9]+)?)?$ ]]; then\n              echo \"::error::Invalid tag format: ${BRANCH}\"\n              exit 1\n            fi\n\n            RELEASE=1\n            BRANCH=develop\n            git checkout $BRANCH\n\n            # if actual release (not pre), then changelog should exclude prereleases on update\n            prerelease_regex='(alpha|beta)'\n            if [[ ! ${GITHUB_REF##*/} =~ $prerelease_regex ]]; then\n              echo '::debug::Actual release (not a prerelease)'\n              TAG_REGEX=\"$prerelease_regex\"\n              echo \"FULL_RELEASE=true\" >> \"$GITHUB_ENV\"\n            fi\n          fi\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n\n          if [[ \"$(git rev-parse \"origin/$BRANCH\")\" != \"$GITHUB_SHA\" ]]; then\n            # Normal build on a branch (no tag)\n            echo \"::debug::BRANCH: $BRANCH $(git rev-parse origin/$BRANCH)\"\n            echo \"::debug::GITHUB_SHA: $GITHUB_SHA\"\n            echo \"::error::$BRANCH has been updated since build started. Aborting changelog.\"\n            exit 1\n          fi\n\n          SINCE_TAG=$(git tag --sort=-creatordate | grep -Ev \"$TAG_REGEX\" | awk \"NR==$(( 1 + ${RELEASE:-0} ))\")\n\n          echo \"::debug::BRANCH: $BRANCH\"\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n          echo \"::debug::FILENAME: CHANGELOG.md\"\n          echo \"::debug::SINCE_TAG: $SINCE_TAG\"\n\n          {\n          echo \"BRANCH=$BRANCH\"\n          echo \"TAG_REGEX=$TAG_REGEX\"\n          echo \"FILENAME=CHANGELOG.md\"\n          echo \"SINCE_TAG=$SINCE_TAG\"\n          } >> \"$GITHUB_ENV\"\n\n      - name: Prep changelog file (clear out old lines)\n        run: |\n          # delete the top of the changelog up to the correct tag\n          tagline=$(grep -n \"^## \\[${SINCE_TAG}\\]\" \"$FILENAME\" | awk '{print $1}' FS=':' | head -1)\n          echo \"tagline: ${tagline}\"\n\n          if [[ -z $tagline ]]; then\n            echo \"::error::Something is wrong. ${SINCE_TAG} isn't in the changelog.\"\n            exit 1\n          fi\n\n          if [[ $tagline == 1 ]]; then\n            echo \"::error::Something is wrong.\"\n            echo \"::error::The latest release ${SINCE_TAG} is the first line in the changelog,\"\n            echo \"::error::but the h1 '# Changelog' should always be the first line.\"\n            exit 1\n          fi\n\n          sed -i \"1,$(( tagline - 1 ))d\" \"$FILENAME\"\n          # delete generated line (or it will be added multiple times)\n          sed -i '/This Changelog was automatically generated by/d' \"$FILENAME\"\n          # delete trailing empty lines\n          sed -i -e :a -e '/^\\n*$/{$d;N;};/\\n$/ba' \"$FILENAME\"\n\n      - name: Generate changelog\n        uses: heinrichreimer/action-github-changelog-generator@v2.1.1\n        with:\n          # see: https://github.com/heinrichreimer/action-github-changelog-generator\n          repo: jrnl-org/jrnl\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n          base: CHANGELOG.md\n          addSections: '{\"build\":{\"prefix\":\"**Build:**\",\"labels\":[\"build\"]},\"docs\":{\"prefix\":\"**Documentation:**\",\"labels\":[\"documentation\"]},\"packaging\":{\"prefix\":\"**Packaging:**\",\"labels\":[\"packaging\"]}}'\n          issues: true\n          pullRequests: true\n          issuesWoLabels: false\n          unreleased: true\n          compareLink: true\n          includeLabels: bug,enhancement,documentation,build,packaging,deprecated\n          excludeLabels: stale,wontfix\n          excludeTagsRegex: ${{ env.TAG_REGEX }}\n          sinceTag: ${{ env.SINCE_TAG }}\n          maxIssues: 150\n          releaseUrl: https://pypi.org/project/jrnl/%s/\n          releaseBranch: develop\n          verbose: false\n          author: true\n\n      - name: Small fixes\n        run: |\n          # Change unreleased link to correct url\n          sed -i 's!https://pypi.org/project/jrnl/HEAD/!https://github.com/jrnl-org/jrnl/!' \"$FILENAME\"\n\n      - name: Diff and consistency check\n        run: |\n          git diff\n          if [[ $(grep -c '^# Changelog$' \"$FILENAME\") != 1 ]]; then\n            echo '::error::Something is wrong with the changelog.'\n            exit 1\n          fi\n          SOMETHING_CHANGED=false\n          git diff --exit-code || SOMETHING_CHANGED=true\n          echo \"::debug::SOMETHING_CHANGED: $SOMETHING_CHANGED\"\n          echo \"SOMETHING_CHANGED=$SOMETHING_CHANGED\" >> \"$GITHUB_ENV\"\n\n      - name: Commit\n        if: env.SOMETHING_CHANGED == 'true'\n        run: |\n          git config --global user.name \"${{ secrets.JRNL_BOT_NAME }}\"\n          git config --global user.email \"${{ secrets.JRNL_BOT_EMAIL }}\"\n          git add \"$FILENAME\"\n          git commit -m \"Update changelog [ci skip]\"\n          git push origin \"$BRANCH\"\n\n      - name: Merge to Release branch\n        if: env.FULL_RELEASE == 'true'\n        run: |\n          git fetch --unshallow origin\n          git checkout release\n          git merge --ff-only \"$BRANCH\"\n          git push origin release\n\n```"}
{"id": "63c49d091e336480757a4c12", "level": "level2", "llm_response": " ```yaml\nname: Label sponsors\n\non:\n  pull_request:\n  issues:\n\njobs:\n  is-sponsor-label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Label Sponsors\n        run: |\n          # Here you would add the actual command or script to label pull requests as sponsored\n          echo \"Labeling pull requests as sponsored...\"\n          # Example: git_label_sponsor \"PR-${{ github.event.number }}\"\n```\n\nPlease note that the `git_label_sponsor` command is a placeholder. You will need to replace it with the actual command or script that interacts with GitHub's API or your repository's labeling feature to label pull requests as sponsored.", "answer": "```yaml name: Label sponsors\non:\n  pull_request:\n    types: [opened]\n  issues:\n    types: [opened]\njobs:\n  build:\n    name: is-sponsor-label\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JasonEtco/is-sponsor-label-action@v1.2.0\n        with:\n          label: sponsor\n        env:\n          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}\n```"}
{"id": "63c49ef46fc19abdf9cd2ebc", "level": "level2", "llm_response": " ```yaml\nname: Dummy workflow for conflicts\non: [pull_request]\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dummy Step\n        run: echo \"This is a placeholder step for conflict resolution\"\n```", "answer": "```yaml name: Dummy workflow for conflicts\non:\n  pull_request_review:\n    types: [submitted]\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"this is a dummy workflow that triggers a workflow_run; it's necessary because otherwise the repo secrets will not be in scope for externally forked pull requests\"\n```"}
{"id": "63c4989c1842bc13d776b509", "level": "level2", "llm_response": " ```yaml\nname: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: get-merged-pull-request\n        id: get-merged-pull-request\n        # Step details would go here, such as checkout, dependencies, etc.\n\n      - name: final-step\n        id: final-step\n        # Final step details would go here, such as publishing artifacts, notifying users, etc.\n```\n\nNote: The above YAML file is a template and contains placeholders (`# Step details would go here`) where you would specify the actual commands or scripts for each step. You would need to fill in those details based on the specific actions you want to perform for the `get-merged-pull-request` and `final-step` within the context of your HCL-based project.", "answer": "```yaml name: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      # Get PR from merged commit to master\n      - uses: actions-ecosystem/action-get-merged-pull-request@v1\n        id: get-merged-pull-request\n        with:\n          github_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          publish: ${{ !contains(steps.get-merged-pull-request.outputs.labels, 'no-release') }}\n          prerelease: false\n          config-name: auto-release.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n```"}
{"id": "63c496f633b087f6bde2f773", "level": "level2", "llm_response": " ```yaml\nname: Close stale\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Stale Issues\n        run: |\n          # Command to close stale issues goes here\n          echo \"Closing stale issues...\"\n```\n\nPlease note that you will need to replace the `echo \"Closing stale issues...\"` line with the actual command or script that will close the stale issues in your Go project. This could involve invoking a Go script or calling an external service or API.", "answer": "```yaml name: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: 'ubuntu-latest'\n    steps:\n    - uses: 'actions/stale@v6'\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n        stale-issue-message: |-\n          This issue is stale because it has been open for 90 days with no\n          activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-issue-label: 'lifecycle/stale'\n        exempt-issue-labels: 'lifecycle/frozen'\n\n        stale-pr-message: |-\n          This Pull Request is stale because it has been open for 90 days with\n          no activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-pr-label: 'lifecycle/stale'\n        exempt-pr-labels: 'lifecycle/frozen'\n\n        days-before-stale: 90\n        days-before-close: 30\n```"}
{"id": "63c49c16517fc08c1eef4503", "level": "level2", "llm_response": " ```yaml\nname: Comment When Needs More Info Label Added\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const label = context.payload.issue.labels.find(l => l.name === 'Needs More Info');\n            if (label) {\n              await github.issues.createComment({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                issue_number: context.issue.number,\n                body: 'Thank you for adding the \"Needs More Info\" label. We will review your request shortly.'\n              });\n            }\n```", "answer": "```yaml name: Comment When Needs More Info Label Added\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'needs more info'\n    steps:\n      - name: Create comment\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: 'create-comment'\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi, ${{ github.event.issue.user.login }}.\n\n            It seems that this issue is a bit vague and lacks some necessary information. \n\n            \u770b\u8d77\u6765\u8fd9\u6761 issue \u63cf\u8ff0\u5f97\u6709\u4e9b\u6a21\u7cca\uff0c\u7f3a\u5c11\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f\u3002\n```"}
{"id": "63c49c921e336480757a1c2c", "level": "level2", "llm_response": " ```yaml\nname: vcf2bcf Testing\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n      - '.github/workflows/vcf2bcf.yml'\n  pull_request:\n    branches:\n      - '*'\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    steps:\n      - name: install graphviz and curl\n        run: sudo apt-get install -y graphviz curl\n      - name: checkout git repo\n        uses: actions/checkout@v2\n      - name: Set up Python 3.X\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.X'\n      - name: conda\n        uses: conda-incubator/setup-miniconda@v2\n        with:\n          channels: conda-forge\n          path: ${{ github.workspace }}\n      - name: Install dependencies conda\n        run: conda install -c conda-forge pytest\n      - name: Install bioconvert with pip\n        run: pip install bioconvert\n      - name: Test with pytest\n        run: pytest\n```", "answer": "```yaml name: vcf2bcf Testing\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - bioconvert/vcf2bcf.py\n      - .github/workflows/vcf2bcf.yml\n  pull_request:\n    branches-ignore: []\n    paths:\n      - bioconvert/vcf2bcf.py\n  schedule:\n    - cron: '0 0 * * SUN'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 5\n      matrix:\n        python: [3.7, 3.8, 3.9]\n      fail-fast: false\n\n    steps:\n\n    - name: install graphviz and curl\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y graphviz-dev\n        sudo apt-get install libcurl4-gnutls-dev\n    - name: checkout git repo\n      uses: actions/checkout@v2\n    - name: Set up Python 3.X\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: conda\n      run: |\n        # $CONDA is an environment variable pointing to the root of the miniconda directory\n        echo $CONDA/bin >> $GITHUB_PATH\n    - name: Install dependencies conda\n      run: |\n        conda install -c conda-forge --quiet 'mamba<0.24' python=${{ matrix.python }}\n        mamba install -c conda-forge -c bioconda --quiet -y samtools bedtools bamtools mosdepth pbzip2 pigz dsrc sambamba squizz\n    - name: Install bioconvert with pip\n      run: |\n        pip install -r requirements.txt\n        pip install .[testing]\n    - name: Test with pytest\n      run: |\n        pytest -n 1  --cov-report term --cov=bioconvert.vcf2bcf test/test_vcf2bcf.py\n```"}
{"id": "63c498451842bc13d776928d", "level": "level2", "llm_response": " ```yaml\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_dispatch:\n  workflow_run:\n    workflows: [\"Continuous Integration\"]\n    types: [completed]\n\njobs:\n  merge-me:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        if: github.event.workflow_run.conclusion == 'success'\n        run: |\n          echo \"Auto-merging Dependabot PRs...\"\n          # Add your auto-merge script or commands here\n          # Example: git merge --no-ff ${{ github.event.pull_request.merge_commit_sha }}\n```", "answer": "```yaml # See https://github.com/ridedott/merge-me-action/\n# This workflow automates merges from patches sent by Dependabot, and\n# only by dependabot, once the other CI workflows pass\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - \"Continuous Integration\"\n\njobs:\n  merge-me:\n    name: Auto-merge Dependabot PRs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2.10.31\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          MERGE_METHOD: MERGE\n```"}
{"id": "63c499ba517fc08c1eee58bc", "level": "level2", "llm_response": " ```yaml\nname: Swift\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    paths:\n      - '**.swift'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup Swift\n        uses: actions/setup-swift@v1\n\n      - name: Build\n        run: swift build\n```", "answer": "```yaml name: Swift\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: macOS-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Build\n      run: swift build -v\n```"}
{"id": "63c49dda517fc08c1eeff921", "level": "level2", "llm_response": " ```yaml\nname: Ruby Gem\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6\n\n      - name: Publish to RubyGems\n        env:\n          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}\n        run: |\n          gem build gem.gemspec\n          gem push *.gem\n```", "answer": "```yaml name: Ruby Gem\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@master\n    - name: Set up Ruby 2.6\n      uses: actions/setup-ruby@v1\n      with:\n        ruby-version: 2.6.x\n\n    #- name: Publish to GPR\n    #  run: |\n    #    mkdir -p $HOME/.gem\n    #    touch $HOME/.gem/credentials\n    #    chmod 0600 $HOME/.gem/credentials\n    #    printf -- \"---\\n:github: Bearer ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n    #    gem build *.gemspec\n    #    gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n    #  env:\n    #    GEM_HOST_API_KEY: ${{secrets.GITHUB_TOKEN}}\n    #    OWNER: wpscanteam\n\n    - name: Publish to RubyGems\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:rubygems_api_key: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        gem build *.gemspec\n        gem push *.gem\n      env:\n        GEM_HOST_API_KEY: ${{secrets.RUBYGEMS_AUTH_TOKEN}}\n```"}
{"id": "63c4a04933b087f6bde6b99c", "level": "level2", "llm_response": " ```yaml\nname: Magisk\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Copy hosts to magisk dir\n        run: |\n          # Shell commands to copy hosts to magisk directory\n\n      - name: Zip magisk dir\n        run: |\n          # Shell commands to zip the magisk directory\n\n      - name: Move bebasid-magisk to releases\n        run: |\n          # Shell commands to move bebasid-magisk to releases directory\n\n      - name: Get changed files\n        id: changed-files\n        run: |\n          git diff --name-only ${{ github.ref }} | grep '.hosts$'\n          echo \"::set-output name=files::$(git diff --name-only ${{ github.ref }} | grep '.hosts$')\"\n\n      - name: Validating hosts changes, run next command if it is true\n        run: |\n          # Shell commands to validate hosts changes\n          if [ \"$(cat outputs.changed-files.files)\" ]; then\n            echo \"Valid hosts changes, proceeding with push\"\n          else\n            echo \"Invalid hosts changes, stopping workflow\"\n            exit 1\n          fi\n\n      - name: Push changes\n        run: |\n          git push\n```\n\nPlease note that the placeholder `''` in the first step should be replaced with the actual shell commands required for the initial setup or preparation step of the job. The rest of the steps are placeholders for the corresponding shell commands that you would need to execute. The `if` condition in the 6th step is a basic example, and you may need to adjust it according to your validation logic.", "answer": "```yaml name: Magisk\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Copy hosts to magisk dir\n      run: cp releases/hosts dev/magisk/\n    - name: Zip magisk dir\n      run: |\n        cd dev/magisk\n        zip -r bebasid-magisk.zip *\n        ls -l\n    - name: Move bebasid-magisk to releases\n      run: |\n        mv dev/magisk/bebasid-magisk.zip releases/\n        cd releases\n        ls -l\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v10.1\n    - name: Validating hosts changes, run next command if it is true\n      if: contains(steps.changed-files.outputs.modified_files, 'releases/hosts')\n      run: |\n          echo \"hosts file has been modified.\"\n          LAST_COMMIT_MESSAGE=\"$(git log -1 --pretty=\"%s %b\")\"\n          git config --global user.email \"gvoze32@yahoo.com\"\n          git config --global user.name \"zksbot\"\n          cd releases\n          ls -l\n          git add bebasid-magisk.zip\n          git commit -m \"Magisk sync: ${LAST_COMMIT_MESSAGE}\"\n    - name: Push changes\n      uses: ad-m/github-push-action@master\n      with:\n        github_token: ${{ secrets.UPDATE_TOKEN }}\n```"}
{"id": "63c5ae7c6b748c7b1faded89", "level": "level2", "llm_response": " ```yaml\nname: Maven Deploy\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set VERSION variable from tag\n        run: echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV\n\n      - name: Configure GPG signing\n        uses: crazy-max/ghaction-gpg-sign@v4\n        with:\n          key-id: ${{ secrets.GPG_KEY_ID }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Configure GIT\n        uses: JamesIves/github-action-setup-git@v15\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n\n      - name: Update version in pom\n        run: sed -i \"s/<version>.*<\\/version>/<version>${VERSION}</version>/g\" pom.xml\n\n      - name: Publish to Maven Packages Apache Maven\n        uses: actions/java@v2\n        with:\n          java-version: '11'\n          server-id: maven-server\n          pom-file: pom.xml\n          credentials: ${{ secrets.MAVEN_CREDENTIALS }}\n          goals: 'clean package -DskipTests=true'\n```\n\nNote: The placeholder `sed` command in the `Update version in pom` step assumes that the version is specified in the `pom.xml` file in a specific format. You may need to adjust the `sed` command according to the actual structure of your `pom.xml` file. Additionally, you'll need to set up the `GPG_KEY_ID`, `GPG_PASSPHRASE`, and `MAVEN_CREDENTIALS` secrets in your GitHub repository settings to use GPG signing and Maven credentials.", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n## For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path\n\nname: Maven Deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      SONATYPE_USER: ${{secrets.BUF_SONATYPE_USER}}\n      SONATYPE_PASSWORD: ${{secrets.BUF_SONATYPE_PASSWORD}}\n      GPG_KEY_NAME: ${{secrets.GPG_KEY_NAME}}\n      GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}\n      MAVEN_OPTS: \"--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED\"\n      REF_NAME: ${{ github.ref_name }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set VERSION variable from tag\n        run: |\n          VERSION=${{ env.REF_NAME }}\n          echo \"VERSION=${VERSION:1}\" >> $GITHUB_ENV\n\n      - name: 'Configure GPG signing'\n        env:\n          GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n        run: |\n          # https://github.com/keybase/keybase-issues/issues/2798\n          export GPG_TTY=$(tty)\n          # Import gpg keys and warm the passphrase to avoid the gpg\n          # passphrase prompt when initating a deploy\n          # `--pinentry-mode=loopback` could be needed to ensure we\n          # suppress the gpg prompt\n          echo $GPG_KEY | base64 --decode > signing-key\n          gpg --passphrase $GPG_PASSPHRASE --batch --import signing-key\n          shred signing-key\n          \n      - name: Configure GIT\n        run: |\n          git config --global user.email \"envoy-bot@users.noreply.github.com\" \n          git config --global user.name \"envoy-bot\"\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          server-id: sonatype-nexus-snapshots\n          server-username: ${ env.SONATYPE_USER }\n          server-password: ${ env.SONATYPE_PASSWORD }\n          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}\n          gpg-passphrase: ${ env.GPG_PASSPHRASE }\n\n      - name: Update version in pom\n        working-directory: ${{ github.workspace }}/java\n        run: mvn -B versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false\n\n      - name: Publish to Maven Packages Apache Maven\n        working-directory: ${{ github.workspace }}/java\n        run: |\n          mvn -B -s settings.xml clean deploy \\\n          -Darguments=\"-s settings.xml\" \\\n          -DreleaseVersion=${{ env.VERSION }} \\\n          -DdevelopmentVersion=${{ env.VERSION }}-SNAPSHOT \\\n          -DscmCommentPrefix=\"java release: \"\n        env:\n          MAVEN_USERNAME: ${{ env.SONATYPE_USER }}\n          MAVEN_CENTRAL_TOKEN: ${{ env.SONATYPE_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```"}
{"id": "63c49a621e33648075793df8", "level": "level2", "llm_response": " ```yaml\nname: Generate Documentation\non:\n  push:\n    paths-ignore:\n      - 'cmake/**'\n  pull_request:\n    paths-filter:\n      - 'docs/sphinx/**'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      \n      - name: Bump Version Number\n        run: |\n          # Commands to bump version number\n          echo \"Version bumped\"\n      \n      - name: Build Documentation\n        run: |\n          # Commands to build documentation\n          echo \"Building documentation\"\n      \n      - name: Deploy Documentation\n        run: |\n          # Commands to deploy documentation\n          echo \"Deploying documentation\"\n```", "answer": "```yaml name: Generate Documentation\n\non:\n  push:\n    paths-ignore:\n      - \"cmake/**\"\n  pull_request:\n    paths:\n      - \"docs/sphinx/**\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Bump Version Number\n        shell: bash\n        if: github.event_name == 'push'\n        run: |\n          VERTEST=\"\\#define\\sLIBOBS_API_\\w+_VER\\s([0-9]{1,2})\"\n          VER=\"\"\n          MAJOR=\"\"\n          while IFS= read -r l\n          do\n              if [[ $l =~ $VERTEST ]]; then\n                  if [[ $VER = '' ]]; then MAJOR=\"${BASH_REMATCH[1]}\"; else VER+=\".\"; fi\n                  VER+=\"${BASH_REMATCH[1]}\"\n              fi\n          done < \"libobs/obs-config.h\"\n\n          SVER=\"version = '([0-9\\.]+)'\"\n          RVER=\"version = '$VER'\"\n          SREL=\"release = '([0-9\\.]+)'\"\n          RREL=\"release = '$VER'\"\n          SCOPY=\"copyright = '([A-Za-z0-9, ]+)'\"\n          RCOPY=\"copyright = '2017-$(date +\"%Y\"), Hugh Bailey'\"\n          sed -i -E -e \"s/${SVER}/${RVER}/g\" -e \"s/${SREL}/${RREL}/g\" -e \"s/${SCOPY}/${RCOPY}/g\" docs/sphinx/conf.py\n      - uses: totaldebug/sphinx-publish-action@1.2.0\n        with:\n          sphinx_src: 'docs/sphinx'\n          build_only: True\n          target_branch: 'master'\n          target_path: '../home/_build'\n          pre_build_commands: 'pip install -Iv sphinx==5.1.1'\n      - uses: actions/upload-artifact@v3\n        with:\n          name: OBS Studio Documentation (HTML)\n          path: |\n            ${{ runner.temp }}/_github_home/_build\n            !${{ runner.temp }}/_github_home/_build/.doctrees\n```"}
{"id": "63c49ee533b087f6bde62bbb", "level": "level2", "llm_response": " ```yaml\nname: Auto Close Issues on Edit\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Automatically close issues that don't follow the issue template\n        run: |\n          # Here you would add the script or command to check the issue template and close the issue\n          # This is a placeholder for the actual implementation\n          echo \"Checking and closing issues that don't follow the issue template\"\n```", "answer": "```yaml on:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Automatically close issues that don't follow the issue template\n        uses: lucasbento/auto-close-issues@v1.0.2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-close-message: \"@${issue.user.login}: hello! :wave:\\n\\nThis issue is being automatically closed because it does not follow the issue template.\" # optional property\n          closed-issues-label: \"\ud83d\ude41 Not following issue template\" # optional property```"}
{"id": "63c49ecf1899db5886509168", "level": "level2", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - 'rc*'\n      - 'pre*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Setup python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Setup git config\n        run: |\n          git config --global user.email \"your-email@example.com\"\n          git config --global user.name \"Your Name\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        run: |\n          git update-ref refs/heads/include_administrators refs/heads/include_administrators^{}\n          git push origin include_administrators\n\n      - name: Deploy\n        run: |\n          # Add deployment scripts here\n\n      - name: Re-enable \"include administrators\" branch protection\n        run: |\n          git update-ref -m \"Re-enable branch protection\" refs/heads/include_administrators refs/heads/include_administrators^{}\n          git push origin include_administrators\n```\nPlease note that you need to replace `your-email@example.com` and `Your Name` with your actual email and name. Also, you need to add your deployment scripts in the `Deploy` step. The `include_administrators` branch name is used as an example and should be replaced with the actual branch name you want to temporarily disable branch protection for.", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT_TOKEN }}\n\n      - name: Setup python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: Setup git config\n        run: |\n          git config --global user.name \"hikari-bot\"\n          git config --global user.email \"90276125+hikari-bot[bot]@users.noreply.github.com\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: false\n\n      - name: Deploy\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n          VERSION: ${{ github.event.release.tag_name }}\n          REF: ${{ github.sha }}\n          GITHUB_REPO_SLUG: ${{ github.repository }}\n          DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}\n          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\n        run: bash scripts/deploy.sh\n\n      - name: Re-enable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        if: always()\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: true\n```"}
{"id": "63c4966d33b087f6bde2bec0", "level": "level2", "llm_response": " ```yaml\nname: Go\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v2\n        with:\n          path: module\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v2\n\n      - name: Install GoReleaser\n        run: curl -sfL https://install.goreleaser.com/github.yml.sh | bash\n\n      - name: Show GoReleaser version\n        run: go run ./cmd/goreleaser/version.go\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Quick Test\n        run: go test -v ./... ./integration_test\n\n      - name: All Test\n        run: go test -v ./... ./integration_test\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v1\n\n      - name: Install Venom\n        run: go get github.com/go-playground/validator/v10\n\n      - name: Show Venom version\n        run: go run ./cmd/venom/version.go\n\n      - name: Run End to End tests\n        run: go test -v ./... ./integration_test\n```", "answer": "```yaml name: Go\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    # Run full test once a day\n    - cron: '0 0 * * *'\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-20.04\n    steps:\n      # https://github.com/actions/setup-go\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n        id: go\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          # Required: the version of golangci-lint is required\n          # and must be specified without patch version:\n          # we always use the latest patch version.\n          version: v1.50\n      - name: Install GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          install-only: true\n      - name: Show GoReleaser version\n        run: goreleaser --version\n      - name: Build\n        run: make build\n      - name: Quick Test\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: make test-short\n        if: ${{ github.event_name == 'pull_request' }}\n      - name: All Test\n        env:\n          # Access only to ec2 AMI api in read-only\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}\n          UPDATECLI_GITEA_TOKEN: ${{ secrets.UPDATECLI_GITEA_TOKEN }}\n        run: make test\n        if: ${{ github.event_name == 'schedule' }}\n      # Codecov should only be updated if make test is executed\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        if: ${{ github.event_name == 'schedule' }}\n      # Manage and run your integration tests with efficiency\n      # https://github.com/ovh/venom\n      - name: Install Venom\n        run: |\n          curl -o /usr/local/bin/venom https://github.com/ovh/venom/releases/download/$VENOM_VERSION/venom.linux-amd64 -L\n          sudo chmod +x /usr/local/bin/venom\n          ls -lha /usr/local/bin/venom\n        env:\n          VENOM_VERSION: v1.0.1\n      - name: Show Venom version\n        run: venom version\n      - name: Run End to End tests\n        run: make test-e2e\n        env:\n          IS_TTY: true # https://github.com/ovh/venom#use-venom-in-ci\n          # Access only to ec2 AMI api in read-only\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c6c517fc08c1eef66d4", "level": "level2", "llm_response": " ```yaml\nname: Run Build with Tests on PR\n\non:\n  pull_request:\n    branches:\n      - develop\n      - master\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref }}-run-build-with-tests\n      cancel-in-progress: true\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n\n      - name: Execute Gradle Build\n        run: ./gradlew build test\n\n      - name: Publish Test Report\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-reports\n          path: ./build/reports\n\n      - name: Delete previous comment of Github Actions Bot\n        run: |\n          curl -X DELETE -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\"\n          https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.number }}\n\n      - name: Notify current workflow is succeed\n        if: success()\n        uses: actions/github-script@v5\n        with:\n          script: |\n            github.actions.createWorkflowDispatch({\n              workflow_id: '${{ github.workflow }}',\n              owner: context.repo.owner.login,\n              repo: context.repo.repo,\n              event_type: 'workflow_dispatch',\n              ref: context.ref\n            })\n\n      - name: Notify current workflow is failed\n        if: failure()\n        uses: actions/github-script@v5\n        with:\n          script: |\n            github.actions.createWorkflowDispatch({\n              workflow_id: '${{ github.workflow }}',\n              owner: context.repo.owner.login,\n              repo: context.repo.repo,\n              event_type: 'workflow_dispatch',\n              ref: context.ref\n            })\n```", "answer": "```yaml name: Run Build with Tests on PR\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n    branches:\n      - develop\n      - master\n\nconcurrency:\n  group: ${{ github.head_ref }}-run-build-with-tests\n  cancel-in-progress: true\n\njobs:\n  build-and-run-unit-test:\n    name: \"Build & Test\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: '8.0.345'\n          architecture: x64\n          cache: 'gradle'\n\n      - name: Execute Gradle Build\n        run: ./gradlew clean test --console=plain\n\n      - name: Publish Test Report\n        uses: mikepenz/action-junit-report@v3.5.0\n        if: always()\n        with:\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          fail_on_failure: true\n          annotate_only: false\n          check_name: Test Report\n\n      - name: Delete previous comment of Github Actions Bot\n        uses: izhangzhihao/delete-comment@master\n        if: always()\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          delete_user_name: github-actions[bot]\n          issue_number: ${{ github.event.number }}\n\n      - name: Notify current workflow is succeed\n        uses: actions/github-script@v6\n        if: success()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u2705 Build & Test workflow succeed \u2705\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n\n      - name: Notify current workflow is failed\n        uses: actions/github-script@v6\n        if: failure()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u274c Build & Test workflow failed \u274c\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n```"}
{"id": "63c49c791842bc13d7783de7", "level": "level2", "llm_response": " ```yaml\nname: scala-steward\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Generate token\n        id: generate_token\n        # Add steps to generate token here\n\n      - name: Launch Scala Steward\n        run: |\n          # Add steps to launch Scala Steward here\n```\nNote: You will need to fill in the specific commands or scripts for generating the token and launching Scala Steward in the respective step sections. The `id` field in the `Generate token` step is optional and can be omitted if not needed.", "answer": "```yaml name: scala-steward\non:\n  push:\n    branches: [ master ]\n  schedule:\n  - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Generate token\n      id: generate_token\n      if: ${{ !github.event.repository.fork }}\n      uses: tibdex/github-app-token@v1\n      with:\n        app_id: 89631\n        private_key: ${{ secrets.SCALIKEJDBC_BOT_KEY }}\n    - name: Launch Scala Steward\n      if: ${{ !github.event.repository.fork }}\n      uses: scala-steward-org/scala-steward-action@v2.26.0\n      with:\n        github-token: ${{ steps.generate_token.outputs.token }}\n        author-email: \"74833019+scalikejdbc-bot[bot]@users.noreply.github.com\"\n        author-name: scalikejdbc-bot[bot]\n```"}
{"id": "63c4a158b008460c1df59cf6", "level": "level2", "llm_response": " ```yaml\nname: Library code size\n\non: [pull_request]\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Calculate library code size\n        run: tsc --size | tee library-code-size.log\n```\n\nIn this YAML configuration:\n\n- The workflow is named `Library code size`.\n- It is triggered by `pull_request` events.\n- There is one job named `size`.\n- The job runs on the latest Ubuntu runner.\n- The first step is named `Checkout code` and uses the `actions/checkout@v2` action to checkout the repository code.\n- The second step is named `Calculate library code size` and runs a TypeScript command `tsc --size` to calculate the size of the library code, outputting the result to `library-code-size.log`.\n\nPlease note that the `tsc --size` command is hypothetical and may not exist in the TypeScript compiler. You would need to replace it with an actual command or script that calculates the code size for your TypeScript library.", "answer": "```yaml name: Library code size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5aead6b748c7b1fadf7b1", "level": "level2", "llm_response": " ```yaml\nname: Build Ubuntu 20.04 ARM64\n\non:\n  push:\n    branches:\n      - master\n      - release/oss-v*\n      - tags:\n          - oss-v*\n    paths-ignore:\n      - docs/**\n      - samples/**\n      - **.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' && contains(github.ref, 'release/oss-v*') || contains(github.ref, 'oss-v*')\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v1\n        with:\n          dotnet-version: '5.0.x'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release\n\n      - name: Run tests\n        run: dotnet test --configuration Release --no-build\n\n      - name: Publish to NuGet\n        if: success()\n        run: dotnet pack --configuration Release --output nupkgs\n        continue-on-error: true\n\n      - name: Upload NuGet package\n        uses: actions/upload-artifact@v2\n        with:\n          name: nupkgs\n          path: nupkgs\n```", "answer": "```yaml name: Build Ubuntu 20.04 ARM64\non:\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n  push:\n    branches:\n      - master\n      - release/oss-v*\n    tags:\n      - oss-v*\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n\njobs:\n  build:\n    uses: EventStore/EventStore/.github/workflows/build-reusable.yml@d274d7d528800d72cfac3d496dc747fba5208ff3\n    with:\n      os: ubuntu-20.04-arm64\n      arch: arm64```"}
{"id": "63c4a0956fc19abdf9cdd937", "level": "level2", "llm_response": " ```yaml\nname: CWL conformance\non:\n  push:\n    paths-ignore:\n      - '**/client/**'\n      - '**/doc/**'\n  pull_request:\n    paths-ignore:\n      - '**/client/**'\n      - '**/doc/**'\njobs:\n  Test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n    env:\n      GALAXY_TEST_DBURI: postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8\n    steps:\n      - name: ''\n      - name: ''\n      - name: Get full Python version\n        id: full-python-version\n      - name: Cache pip dir\n      - name: Cache galaxy venv\n      - name: Run tests\n      - name: ''\n      - name: ''\n```\nPlease note that the placeholder names (empty strings) in the step names should be replaced with actual step names relevant to the tasks being performed. The above YAML is a structured template and requires completion with specific details for each step.", "answer": "```yaml name: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\nenv:\n  GALAXY_TEST_DBURI: 'postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    name: Test\n    if: ${{ false }}\n    runs-on: ubuntu-latest\n    continue-on-error: ${{ startsWith(matrix.marker, 'red') }}\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7']\n        marker: ['green', 'red and required', 'red and not required']\n        conformance-version: ['cwl_conformance_v1_0'] #, 'cwl_conformance_v1_1', 'cwl_conformance_v1_2']\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: postgres\n        ports:\n          - 5432:5432\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache galaxy venv\n        uses: actions/cache@v3\n        with:\n          path: 'galaxy root/.venv'\n          key: gxy-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Run tests\n        run: ./run_tests.sh --coverage --skip_flakey_fails -cwl lib/galaxy_test/api/cwl -- -m \"${{ matrix.marker }} and ${{ matrix.conformance-version }}\"\n        working-directory: 'galaxy root'\n      - uses: codecov/codecov-action@v3\n        with:\n          flags: cwl-conformance\n          working-directory: 'galaxy root'\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: CWL conformance test results (${{ matrix.python-version }}, ${{ matrix.marker }}, ${{ matrix.conformance-version }})\n          path: 'galaxy root/run_cwl_tests.html'\n```"}
{"id": "63c4a09a33b087f6bde6da70", "level": "level2", "llm_response": " ```yaml\nname: system build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Nix\n        uses: nixos/nix-actions@v1\n\n      - name: Install dependencies\n        run: nix-build -A main.nix\n\n      - name: Run tests\n        run: flake8 .\n\n      - name: Run Flake Checks\n        run: nix-flake check\n```", "answer": "```yaml name: 'system build'\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Shallow clones won't work\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: cachix/cachix-action@v12\n        with:\n          name: kclejeune\n          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}\n          extraPullNames: nix-community\n      - name: Run Flake Checks\n        run: |\n          nix flake check -v --show-trace\n        timeout-minutes: 240\n```"}
{"id": "63c49fec6fc19abdf9cd94ca", "level": "level2", "llm_response": " ```yaml\nname: Commented Pull Request\n\non:\n  issues:\n    types: [commented]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: PowerShell Pull Request Handler\n        run: |\n          # Your PowerShell script to handle the pull request goes here\n          # Example:\n          # Write-Host \"Handling pull request with comment\"\n          # Invoke-YourPowerShellScript -Parameter ${{ github.event.comment.body }}\n```\n\nPlease replace `Invoke-YourPowerShellScript` and the parameter with the actual PowerShell script and parameters you intend to use for handling the pull request based on the comment event. The above YAML file sets up a GitHub Actions workflow that triggers on comment events on issues and pull request reviews, with a job named `pullRequestHandler` that contains two placeholder steps. The first step is for checking out the repository, and the second step is where you would include your PowerShell script execution logic.", "answer": "```yaml on:\n  issue_comment:\n    types: [ created ]\nname: Commented Pull Request\njobs:\n  pullRequestHandler:\n    name: PullRequestHandler\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@main\n    - name: PullRequestHandler\n      uses: ScoopInstaller/GithubActions@main\n      if: startsWith(github.event.comment.body, '/verify')\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5e736e7f0ed8c6105a", "level": "level2", "llm_response": " ```yaml\nname: Checklist\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited, assignee_changed, labeled, unlabeled, locked, unlocked, milestoned, removed, transferred, scheduled, cleared]\n    branches:\n      - main\n\njobs:\n  Test:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Verify Checklist\n        id: verify_checklist\n        run: |\n          echo \"Verifying checklist for pull request...\"\n          # Add PowerShell commands to verify checklist here\n```", "answer": "```yaml name: Checklist\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - opened\n      - reopened\n      - ready_for_review\n      - edited\n      - synchronize\npermissions:\n  contents: read\njobs:\n  Test:\n    name: Verify Status\n    runs-on: windows-latest\n    if: |\n      !contains(github.event.pull_request.title, 'WIP') &&\n      !github.event.pull_request.draft\n    defaults:\n      run:\n        shell: pwsh\n    steps:\n      - name: Verify Checklist\n        id: verify_checklist\n        uses: MicrosoftDocs/PowerShell-Docs/.github/actions/verification/checklist/v1@main\n```"}
{"id": "63c49d011e336480757a48d8", "level": "level2", "llm_response": " ```yaml\nname: User-agent updater\n\non:\n  push:\n    paths:\n      - '**.cpp'\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n    events:\n      - 'workflow_dispatch'\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update User Agent\n        run: |\n          # Commands to update the user agent\n          echo \"Updating user agent...\"\n          # Example command, replace with actual user agent update logic\n          curl -s \"https://api.user-agent.com/v4/random\" | jq -r .userAgent\n```\n\nPlease note that the actual commands to update the user agent should be replaced in the `run` section. The example above uses a curl command to fetch a random user agent from a hypothetical API and prints it using `jq`. You will need to replace the URL with a real user agent API service or implement your own logic to update the user agent.", "answer": "```yaml name: User-agent updater.\n\non:\n  repository_dispatch:\n    types: [\"Restart user_agent_updater workflow.\"]\n  schedule:\n    # At 00:00 on day-of-month 1.\n    - cron: \"0 0 1 * *\"\n  pull_request_target:\n    types: [closed]\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: desktop-app/action_code_updater@master\n        with:\n          type: \"user-agent\"\n```"}
{"id": "63c4967033b087f6bde2c007", "level": "level2", "llm_response": " ```yaml\nname: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron: '0 6 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Tap Homebrew Emacs Head\n      - name: Install ${{ matrix.build_opts }}\n      - name: Create personal config file from template\n      - name: Create savehist directory\n      - name: Create gnupg Emacs directory\n      - name: Init git submodules\n      - name: Attempting startup...\n```", "answer": "```yaml name: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron:  '0 6 * * *'\n\njobs:\n  build:\n\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        build_opts:\n          # Emacs 26.x\n          - 'emacs-head@26'\n\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n      GPG: '/usr/local/bin/gpg'\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Tap Homebrew Emacs Head\n      run: brew tap daviderestivo/emacs-head\n\n    - name: Install ${{ matrix.build_opts }}\n      run: brew install ${{ matrix.build_opts }}\n\n    - name: Create personal config file from template\n      run: mv personal.el.example personal.el\n\n    - name: Create savehist directory\n      run: mkdir -p ${{ github.workspace }}/savehist\n\n    - name: Create gnupg Emacs directory\n      run: mkdir -p ${{ github.workspace }}/elpa/gnupg\n\n    - name: Init git submodules\n      run: git submodule init && git submodule update && git submodule foreach --recursive git checkout master\n\n    - name: Attempting startup...\n      run: emacs -nw --batch --debug-init --eval='(let\n                                                   ((galactic-emacs-ci t)\n                                                    (debug-on-error (>=  emacs-major-version 26))\n                                                    (initial-buffer-choice \"*scratch*\")\n                                                    (user-emacs-directory default-directory)\n                                                    (user-init-file (expand-file-name \"init.el\")))\n                                                   (setq url-show-status nil)\n                                                   (package-initialize)\n                                                   (load-file user-init-file)\n                                                   (message \"... startup successful!\"))'\n```"}
{"id": "63c4985733b087f6bde383d5", "level": "level2", "llm_response": " ```yaml\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v2\n      - name: Validate YAML files\n        run: yamllint ${{ github.workspace }}\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v2\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.6'\n      - name: file-diff\n        run: diff -r .\n      - name: Validate Links\n        run: |\n          # Assuming there's a script or command to validate links\n          ./validate_links.sh\n\n  Main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Update README\n        run: python update_readme.py\n      - name: Commit and push on changes\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add README.md\n          git commit -m \"Update README\" -a || echo \"No changes to commit\"\n          git push\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v2\n      - name:\n          # Assuming there's a script or command to update contributors\n          ./update_contributors.sh\n```", "answer": "```yaml ---\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Validate YAML files\n        uses: SoftCreatR/validate-yaml-schema@v2.0.0\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6\n\n      - id: file-diff\n        uses: lots0logs/gh-action-get-changed-files@2.1.4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Validate Links\n        run: |\n          FILELIST=\"\"\n\n          for FILENAME in $(jq '.[]' $HOME/files.json); do\n            FILENAME=\"${FILENAME:1}\"\n            FILENAME=\"${FILENAME::-1}\"\n\n            if [ -f \"$FILENAME\" ] && [[ $FILENAME == *\"participants\"* ]] && [ \"${FILENAME: -4}\" == \".yml\" ]; then\n              FILELIST+=\"$FILENAME,\"\n            else\n              echo \"- Skipped $FILENAME\"\n            fi\n          done\n\n          if [ -n \"$FILELIST\" ]; then\n            gem install awesome_bot\n            awesome_bot --files \"$FILELIST\" --allow-dupe --allow-redirect --skip-save-results\n          else\n            echo \"Nothing to do.\"\n          fi\n\n  Main:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: python -m pip install -r requirements.txt\n\n      - name: Update README\n        run: python update_readme.py\n\n      - name: Commit and push on changes\n        run: |-\n          git add .\n          git diff\n          git config --global user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"github-actions[bot]\"\n          git commit -m \"Updated README\" -a || echo \"No changes to commit\"\n          git push\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks, Main]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - uses: BobAnkh/add-contributors@v0.2.2\n        with:\n          REPO_NAME: 'benbarth/hacktoberfest-swag'\n          CONTRIBUTOR: '## Contributors \u2728'\n          ACCESS_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          IGNORED_CONTRIBUTORS: 'Ben Barth,Sascha Greuel,Chandler Weiner'\n```"}
{"id": "63c49f6eb008460c1df4db9b", "level": "level2", "llm_response": " ```yaml\nname: docs\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n\n      - name: Deploy to Documentation\n        run: ./deploy-docs.sh\n```\n\nPlease note that I've added placeholder names for the steps, such as `.`, `.`, ``, and ``. You'll need to replace these with the actual commands or scripts that are relevant to your documentation deployment process. The `deploy-docs.sh` script is also a placeholder; you should replace it with the actual script or command you use to deploy your Java documentation.", "answer": "```yaml name: docs\non:\n  push:\n    branches:\n      - master\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a10f1e336480757bde95", "level": "level2", "llm_response": " ```yaml\nname: test\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: Setup dependencies\n        run: |\n          # Commands to setup dependencies\n      - name: Setup config.nims\n        run: |\n          # Commands to setup config.nims\n      - name: ''\n```\n\nPlease note that the placeholder names for the steps (e.g., `''`) should be replaced with the actual commands or scripts that you want to run in each step of your Nim build process. The above YAML structure defines a GitHub Actions workflow named `test` that triggers on push and pull request events to the `main` branch, ignoring paths that match the specified patterns. It includes a single job with six placeholder steps.", "answer": "```yaml name: test\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os:\n          - ubuntu-22.04\n          # - windows-latest\n          # - macOS-latest\n        nim:\n          - '1.6.0'\n          - '1.6.x'\n          - 'stable'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jiro4989/setup-nim-action@v1\n        with:\n          nim-version: ${{ matrix.nim }}\n      - run: nimble install -Y\n      - name: Setup dependencies\n        run: |\n          sudo apt update -y\n          sudo apt install -y libgtk-4-dev\n      - name: Setup config.nims\n        run: |\n          # For referencing latest source code\n          echo 'switch(\"path\", \"$projectDir/..\")' > examples/config.nims\n      - run: nimble examples\n```"}
{"id": "63c49ebb736e7f0ed8c69a9f", "level": "level2", "llm_response": " ```yaml\nname: Build-images\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'images/linkerd-Dockerfile'\n      - '.github/workflows/container-images.yml'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          registry: docker.io\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Build linkerd\n        id: docker_build\n        run: |\n          docker build -t myusername/linkerd:latest .\n          echo \"::set-output name=IMAGE::myusername/linkerd:latest\"\n```\nPlease note that you should replace `myusername` with your actual Docker Hub username. Also, ensure that `DOCKER_USERNAME` and `DOCKER_PASSWORD` are set in your repository's secrets for authentication purposes.", "answer": "```yaml name: Build-images\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'images/linkerd-Dockerfile'\n    - '.github/workflows/container-images.yml' # in case we change the versions below\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.CFCIBOT_DOCKERHUB_USERNAME }}\n          password: ${{ secrets.CFCIBOT_DOCKERHUB_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Build linkerd\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          file: images/linkerd-Dockerfile\n          tags: splatform/epinio-linkerd:2.11.1\n          build-args: |\n            LINKERD_VERSION=stable-2.11.1\n            LINKERD_CHECKSUM=96c08570b6f6ad40ef1e6aa970959c9c5541e36c85477ee9843b85b8fdcc54ea\n            KUBECTL_VERSION=v1.23.0\n            KUBECTL_CHECKSUM=2d0f5ba6faa787878b642c151ccb2c3390ce4c1e6c8e2b59568b3869ba407c4f\n```"}
{"id": "63c495138052faa2781af503", "level": "level2", "llm_response": " ```yaml\nname: Go Workflow\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch:\n\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Initialize\n        run: echo \"Initializing...\"\n\n      - name: Build\n        run: go build -v ./...\n\n      - name: Test\n        run: go test ./...\n\n      - name: Deploy\n        run: echo \"Deploying...\"\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch: # Enables on-demand/manual triggering\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n      - run: |\n          go get github.com/aws/aws-sdk-go\n          go mod tidy\n          cd tools/provider-schema\n          terraform init -upgrade\n          terraform providers schema -json > schema.json\n          cd ../..\n          git submodule update --remote\n          go generate ./...\n      - uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: |\n            autogenerated maintenance\n          title: autogenerated maintenance\n          delete-branch: true\n          body: |\n            If tests are stuck on https://github.com/peter-evans/create-pull-request/issues/48:\n            [\"Manually close pull requests and immediately reopen them. This will enable `on: pull_request` workflows to run and be added as checks.\"](https://github.com/peter-evans/create-pull-request/blob/master/docs/concepts-guidelines.md#triggering-further-workflow-runs)\n```"}
{"id": "63c49f7d1899db588650d6be", "level": "level2", "llm_response": " ```yaml\nname: size\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: TypeScript Size\n        run: |\n          npm install -g eslint\n          npx eslint --ext .ts,.tsx . --fix\n          npm run size\n```\n\nIn this YAML configuration for a GitHub Actions workflow:\n\n- The workflow is named `size`.\n- It's triggered by a `pull_request` event specifically targeting the `master` branch.\n- The workflow consists of one job called `size`.\n- The job runs on the latest Ubuntu runner.\n- It includes two steps:\n  - The first step is named `Checkout` and uses the `actions/checkout@v2` action to check out the repository's source code.\n  - The second step is named `TypeScript Size`, which:\n    - Installs the `eslint` package globally.\n    - Runs `eslint` on TypeScript files with the `--ext .ts,.tsx` flag to lint `.ts` and `.tsx` files and `--fix` to automatically fix certain issues.\n    - Executes a custom npm script named `size` that should be defined in your `package.json` to calculate the file size or other relevant metrics.\n\nPlease ensure that the `size` script is defined in your `package.json` and that it performs the desired calculations or metrics you wish to obtain.", "answer": "```yaml name: 'size'\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f6a1842bc13d7796f76", "level": "level2", "llm_response": " ```yaml\nname: Invalidations\non: [pull_request]\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  evaluate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        # Step details go here\n      - name: ''\n        # Step details go here\n      - name: ''\n        # Step details go here\n      - name: invs_pr\n        id: invs_pr\n        # Step details go here\n      - name: ''\n        # Step details go here\n      - name: invs_default\n        id: invs_default\n        # Step details go here\n      - name: Report invalidation counts\n        # Step details go here\n      - name: Check if the PR does increase number of invalidations\n        # Step details go here\n```\n\nNote: The actual commands or actions for each step should be filled in where indicated by `# Step details go here`. The placeholders ``, ``, `invs_pr`, `invs_default`, and `Report invalidation counts` should be replaced with the specific commands or actions relevant to the workflow's purpose.", "answer": "```yaml name: Invalidations\n\non:\n  pull_request:\n\nconcurrency:\n  # Skip intermediate builds: always.\n  # Cancel intermediate builds: always.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  evaluate:\n    # Only run on PRs to the default branch.\n    # In the PR trigger above branches can be specified only explicitly whereas this check should work for master, main, or any other default branch\n    if: github.base_ref == github.event.repository.default_branch\n    runs-on: ubuntu-latest\n    steps:\n    - uses: julia-actions/setup-julia@v1\n      with:\n        version: '1'\n    - uses: actions/checkout@v3\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_pr\n\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.repository.default_branch }}\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_default\n    \n    - name: Report invalidation counts\n      run: |\n        echo \"Invalidations on default branch: ${{ steps.invs_default.outputs.total }} (${{ steps.invs_default.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n        echo \"This branch: ${{ steps.invs_pr.outputs.total }} (${{ steps.invs_pr.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n    - name: Check if the PR does increase number of invalidations\n      if: steps.invs_pr.outputs.total > steps.invs_default.outputs.total\n      run: exit 1\n```"}
{"id": "63c4944f7843b61269a005f4", "level": "level2", "llm_response": " ```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  create-github-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Create GitHub Release and Git tag\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e016fc19abdf9ccce72", "level": "level2", "llm_response": " ```yaml\nname: ci\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    repo: <repository_owner>/<repository_name>\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    environment:\n      name: ci\n      variables:\n        CI: 'true'\n        PGHOST: localhost\n        PGPORT: 5432\n        PGUSER: postgres\n        PGPASSWORD: postgres\n\n    steps:\n      - name: Setup pg\n        uses: actions/setup-postgresql@v2\n        with:\n          postgresql-version: '13'\n          service: postgres\n\n      - name: Install pg\n        run: |\n          sudo apt-get update && sudo apt-get install -y postgresql-client\n\n      - name: Run tests\n        run: |\n          psql -h \"$PGHOST\" -p \"$PGPORT\" -U \"$PGUSER\" \"$PGDATABASE\" -c \"SELECT * FROM my_table;\"\n\n      - name: Run tests no check\n        run: |\n          psql -h \"$PGHOST\" -p \"$PGPORT\" -U \"$PGUSER\" \"$PGDATABASE\" -c \"SELECT * FROM my_table;\" --no-checks\n```\n\nPlease note that you need to replace `<repository_owner>` and `<repository_name>` with the actual owner and name of your GitHub repository. Also, ensure that your repository has the necessary PostgreSQL setup and that the `my_table` is a valid table within your database. The steps provided for `Run tests` and `Run tests no check` are placeholders and should be replaced with actual test commands relevant to your PLpgSQL code.", "answer": "```yaml name: ci\n\non: [push, pull_request]\n\nenv:\n  CI: true\n  PGHOST: localhost\n  PGPORT: 5432\n  PGUSER: postgres\n  PGPASSWORD: postgres\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: ${{ matrix.pg }}\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    strategy:\n      matrix:\n        pg: [\"postgres:9.5-alpine\", \"postgres:9.6-alpine\", \"postgres:10-alpine\", \"postgres:11-alpine\", \"postgres:12-alpine\", \"postgres:13-alpine\"]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run tests\n        run: |\n          make run_test\n\n      - name: Run tests no check\n        run: |\n          make run_test_nochecks\n```"}
{"id": "63c49bae6fc19abdf9cbe18c", "level": "level2", "llm_response": " ```yaml\nname: Python tests\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/python-tests.yaml'\n      - '**/*.py'\n      - 'requirements.txt'\n      - 'requirements-dev.txt'\n      - 'setup.cfg'\n      - 'Dockerfile'\n  push:\n    branches:\n      - main\n\njobs:\n  test-with-sqlite:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    env:\n      PY_COLORS: 1\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n    steps:\n      - name: Display current test matrix\n        run: echo \"Test matrix displayed\"\n      - name: Set up Docker Buildx\n        run: echo \"Setting up Docker Buildx\"\n      - name: Set up Python ${{ matrix.python-version }}\n        run: echo \"Setting up Python version ${{ matrix.python-version }}\"\n      - name: Pin requirements to lower bounds\n        run: echo \"Pinning requirements to lower bounds\"\n      - name: Build test image\n        run: echo \"Building test image\"\n      - name: Test Docker image\n        run: echo \"Testing Docker image\"\n      - name: Build Conda flavored test image\n        run: echo \"Building Conda flavored test image\"\n      - name: Test Conda flavored Docker image\n        run: echo \"Testing Conda flavored Docker image\"\n      - name: Install packages\n        run: echo \"Installing packages\"\n      - name: Run tests\n        run: echo \"Running tests\"\n\n  test-with-postgres:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    env:\n      PY_COLORS: 1\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n      cancel-in-progress: true\n    steps:\n      - name: Set up Python ${{ matrix.python-version }}\n        run: echo \"Setting up Python version ${{ matrix.python-version }}\"\n      - name: Install packages\n        run: echo \"Installing packages\"\n      - name: Run tests\n        run: echo \"Running tests\"\n```", "answer": "```yaml name: Python tests\n\nenv:\n  # enable colored output\n  # https://github.com/pytest-dev/pytest/issues/7443\n  PY_COLORS: 1\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/python-tests.yaml\n      - \"**/*.py\"\n      - requirements.txt\n      - requirements-dev.txt\n      - setup.cfg\n      - Dockerfile\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\n# Limit concurrency by workflow/branch combination.\n#\n# For pull request builds, pushing additional changes to the\n# branch will cancel prior in-progress and pending builds.\n#\n# For builds triggered on a branch push, additional changes\n# will wait for prior builds to complete before starting.\n#\n# https://docs.github.com/en/actions/using-jobs/using-concurrency\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  run-tests-sqlite:\n    name: Test with SQLite\n\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n          - \"--only-services\"\n\n        include:\n          # Run 3.7 tests with lower bound pins\n          - python-version: \"3.7\"\n            lower-bound-requirements: true\n\n          # Include Docker image builds on the service test run, and disallow the test\n          # suite from building images automaticlly in fixtures\n          - pytest-options: \"--only-services\"\n            build-docker-images: true\n\n      fail-fast: false\n\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 45\n\n    steps:\n      - name: Display current test matrix\n        run: echo '${{ toJSON(matrix) }}'\n\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Set up Docker Buildx\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Pin requirements to lower bounds\n        if: ${{ matrix.lower-bound-requirements }}\n        # Creates lower bound files then replaces the input files so we can do a normal install\n        run: |\n          ./scripts/generate-lower-bounds.py requirements.txt > requirements-lower.txt\n          ./scripts/generate-lower-bounds.py requirements-dev.txt > requirements-dev-lower.txt\n          mv requirements-lower.txt requirements.txt\n          mv requirements-dev-lower.txt requirements-dev.txt\n\n      - name: Build test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          # TODO: We do not need the UI in these tests and we may want to add a build-arg to disable building it\n          #       so that CI test runs are faster\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}\n          outputs: type=docker,dest=/tmp/image.tar\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Test Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }} prefect version\n\n      - name: Build Conda flavored test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            BASE_IMAGE=prefect-conda\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}-conda\n          outputs: type=docker,dest=/tmp/image-conda.tar\n          cache-from: type=gha\n          # We do not cache Conda image layers because they very big and slow to upload\n          # cache-to: type=gha,mode=max\n\n      - name: Test Conda flavored Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image-conda.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda prefect version\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda conda --version\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          # If using not using lower bounds, upgrade eagerly to get the latest versions despite caching\n          pip install ${{ ! matrix.lower-bound-requirements && '--upgrade --upgrade-strategy eager' || ''}} -e .[dev]\n\n      - name: Run tests\n        run: |\n          # Parallelize tests by scope to reduce expensive service fixture duplication\n          # Do not allow the test suite to build images, as we want the prebuilt images to be tested\n          # Do not run Kubernetes service tests, we do not have a cluster available\n          pytest tests --numprocesses auto --dist loadscope --disable-docker-image-builds --exclude-service kubernetes --durations=25 ${{ matrix.pytest-options }}\n\n  run-tests-postgres:\n    name: Test with Postgres\n\n    strategy:\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n\n      fail-fast: false\n\n    runs-on: ubuntu-latest\n\n    # TODO: Consider moving this from a service into a normal docker command\n    #       so we can include it in the sqlite python test matrix instead of\n    #       maintaining a separate workflow\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: prefect\n          POSTGRES_PASSWORD: prefect\n          POSTGRES_DB: orion\n          LANG: 'C.UTF-8'\n          LANGUAGE: 'C.UTF-8'\n          LC_ALL: 'C.UTF-8'\n          LC_COLLATE: 'C.UTF-8'\n          LC_CTYPE: 'C.UTF-8'\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    timeout-minutes: 30\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade --upgrade-strategy eager -e .[dev]\n\n      - name: Run tests\n        env:\n          PREFECT_ORION_DATABASE_CONNECTION_URL: \"postgresql+asyncpg://prefect:prefect@localhost/orion\"\n        run: |\n          pytest tests --numprocesses auto --dist loadscope ${{ matrix.pytest-options }}\n```"}
{"id": "63c49f811899db588650d878", "level": "level2", "llm_response": " ```yaml\nname: coverity-scan\non:\n  schedule:\n    - cron: '0 0 * * *' # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  coverity-linux:\n    runs-on: ubuntu-latest\n    env:\n      TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n      EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n      SHA1: ${{ github.sha }}\n      FILE: exult-ubuntu-gcc.tgz\n      PROJ: exult/exult\n\n    steps:\n      - name: Activity check\n        run: echo \"Checking for activity...\"\n\n      - name: Install dependencies\n        run: echo \"Installing dependencies...\"\n\n      - name: Download Coverity Build Tool\n        run: echo \"Downloading Coverity Build Tool...\"\n\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run autogen\n        run: echo \"Running autogen...\"\n\n      - name: Configure\n        run: echo \"Configuring...\"\n\n      - name: Build with cov-build\n        run: echo \"Building with cov-build...\"\n\n      - name: Submit the result to Coverity Scan\n        run: echo \"Submitting the result to Coverity Scan...\"\n```", "answer": "```yaml name: coverity-scan\n\non:\n  schedule:\n    - cron: \"0 00 * * *\" # Daily at 00:00 UTC\n  workflow_dispatch:\n\nenv:\n  TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n  EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n  SHA1: ${{ github.sha }}\n  FILE: exult-ubuntu-gcc.tgz\n  PROJ: exult/exult\n\njobs:\n  coverity-linux:\n    if: ${{ github.repository_owner == 'exult' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Activity check\n        run: |\n          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')\n          TIMESTAMP=$(date --utc -d \"$DATEUTC\" +%s)\n          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))\n          if [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n          else\n            if [ $DAYS -gt 0 ]; then\n              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV\n            else\n              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n            fi\n          fi\n      - name: Install dependencies\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          sudo apt-fast update\n          sudo apt-fast install -y \\\n          zlib1g-dev libogg-dev libvorbis-dev libasound2-dev libfluidsynth-dev libsdl2-dev libpng-dev libfreetype6-dev libgtk2.0-dev libgtk-3-dev \\\n          libgdk-pixbuf2.0-dev libxml2-dev bison flex timidity libgimp2.0-dev\n      - name: Download Coverity Build Tool\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          wget -q https://scan.coverity.com/download/Linux --post-data \"token=$TOKEN&project=$PROJ\" -O /tmp/cov-analysis-linux64.tar.gz\n          mkdir /tmp/cov-analysis-linux64\n          tar xzf /tmp/cov-analysis-linux64.tar.gz --strip 1 -C /tmp/cov-analysis-linux64\n      - name: Checkout code\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        uses: actions/checkout@master\n      - name: Run autogen\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          chmod a+x ./autogen.sh\n          ./autogen.sh\n      - name: Configure\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          ./configure --with-debug=extreme --enable-exult-studio --enable-exult-studio-support --enable-compiler --enable-gimp-plugin \\\n            --enable-zip-support --enable-shared --enable-midi-sfx --enable-gnome-shp-thumbnailer --enable-data --enable-mods \\\n            --with-usecode-debugger=yes --enable-usecode-container --enable-nonreadied-objects --disable-oggtest --disable-vorbistest\n      - name: Build with cov-build\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          export PATH=/tmp/cov-analysis-linux64/bin:$PATH\n          cov-build --dir cov-int make -j2\n      - name: Submit the result to Coverity Scan\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          tar czvf $FILE cov-int\n          curl \\\n            --form project=$PROJ \\\n            --form token=$TOKEN \\\n            --form email=$EMAIL \\\n            --form file=@$FILE \\\n            --form version=master \\\n            --form description=\"$SHA1\" \\\n            https://scan.coverity.com/builds?project=$PROJ\n```"}
{"id": "63c497456fc19abdf9ca17c3", "level": "level2", "llm_response": " ```yaml\nname: Update Baselines\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: ''\n        run: |\n          echo \"Step placeholder for the initial setup or placeholder action\"\n\n      - name: Setup .NET Core\n        run: |\n          echo \"Step to set up .NET Core environment\"\n          # Add commands to install or configure .NET Core here\n\n      - name: Test\n        run: |\n          echo \"Step to execute tests\"\n          # Add commands to run tests here\n\n      - name: Commit baselines\n        run: |\n          echo \"Step to commit updated baselines\"\n          # Add commands to commit changes here\n```\n\nPlease note that I have left the step names as placeholders (e.g., ``) since the specific actions for each step were not provided. You will need to replace these placeholders with the actual commands or scripts that should be executed in each step.\n\nIf you need to add any specific commands or dependencies, you can do so within the `run` block for each step. For example, to install .NET Core, you might include:\n\n```yaml\n- name: Setup .NET Core\n  run: |\n    sudo apt-get update && sudo apt-get install -y dotnet-sdk-6.0\n```\n\nAnd for testing, you might include:\n\n```yaml\n- name: Test\n  run: dotnet test --logger \"console;verbosity=detailed\"\n```\n\nFor committing changes, you might use git commands:\n\n```yaml\n- name: Commit baselines\n  run: |\n    git add .\n    git commit -m \"Update baselines\"\n    git push\n```\n\nRemember to adjust the commands to match your repository's setup and the actual tasks you need to perform.", "answer": "```yaml name: Update Baselines\n# This action can be run on-demand against a branch.\n# It attempts to update the baseline files, and commits and pushes changes if there are any.\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    name: Update Baselines\n    runs-on: ubuntu-latest\n\n    env:\n      # don't print dotnet logo\n      DOTNET_NOLOGO: true\n\n      # disable telemetry (reduces dotnet tool output in logs)\n      DOTNET_CLI_TELEMETRY_OPTOUT: true\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n      \n      - name: Test\n        continue-on-error: true\n        run: dotnet test --filter \"TestCategory=Baseline\" -- 'TestRunParameters.Parameter(name=\"SetBaseLine\", value=\"true\")'\n      \n      - name: Commit baselines\n        run: |\n          git config --global user.email \"bicep@noreply.github.com\"\n          git config --global user.name \"Bicep Automation\"\n\n          git add .\n\n          if ! git diff-index --quiet HEAD --; then\n            git commit -m \"Update test baselines\"\n            git push\n          fi```"}
{"id": "63c496821e3364807577b179", "level": "level2", "llm_response": " ```yaml\nname: Build documentation\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  build-documentation:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Set branch environment variable\n      - name: Build documentation\n      - name: Upload documentation\n      - name: Upload documentation alias\n```\n\nPlease note that the step names are left empty (''), which is not valid YAML. You should provide the actual commands or scripts for each step. Here is the corrected version with placeholder names for the steps:\n\n```yaml\nname: Build documentation\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *'\njobs:\n  build-documentation:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set branch environment variable\n        run: echo \"Set branch environment variable\"\n      - name: Build documentation\n        run: echo \"Build documentation\"\n      - name: Upload documentation\n        run: echo \"Upload documentation\"\n      - name: Upload documentation alias\n        run: echo \"Upload documentation alias\"\n```\n\nRemember to replace the `echo` commands with the actual commands required to set environment variables, build documentation, and upload it to a repository or another service.", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Build documentation\"\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *' # Deploy every day\n\njobs:\n  build-documentation:\n    if: github.repository == 'apache/flink-table-store'\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 1\n      matrix:\n        branch:\n          - master\n          - release-0.2\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ matrix.branch }}\n      - name: Set branch environment variable\n        run: |\n          currentBranch=$(git branch --show-current)\n\n          echo \"flink_table_store_branch=${currentBranch}\" >> ${GITHUB_ENV}\n\n          if [ \"${currentBranch}\" = \"master\" ]; then\n            echo \"flink_table_store_alias=release-0.3\" >> ${GITHUB_ENV}\n          elif [ \"${currentBranch}\" = \"release-0.2\" ]; then\n            echo \"flink_table_store_alias=stable\" >> ${GITHUB_ENV}\n          fi\n      - name: Build documentation\n        run: |\n          docker run  --rm --volume \"$PWD:/root/flink-table-store\" chesnay/flink-ci:java_8_11 bash -c \"cd /root/flink-table-store && ./.github/workflows/docs.sh\"\n      - name: Upload documentation\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_branch }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n      - name: Upload documentation alias\n        if: env.flink_table_store_alias != ''\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_alias }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n```"}
{"id": "63c4985d517fc08c1eedd0a3", "level": "level2", "llm_response": " ```yaml\nname: Arc PR e2e tests\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          path: src/neo4j-arc\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n      - name: E2E tests\n        run: npm run e2e\n\n      - name: Generate coverage report\n        run: npm run coverage\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v2\n        with:\n          file: coverage/lcov.info\n```", "answer": "```yaml name: 'Arc PR e2e tests'\n\ndefaults:\n  run:\n    working-directory: src/neo4j-arc\n\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - run: npm -g install yarn\n      - run: yarn install --frozen-lockfile\n      - run: yarn test\n      - run: yarn build\n```"}
{"id": "63c498e633b087f6bde3bc16", "level": "level2", "llm_response": " ```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Build + Publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Set up Ruby 3.1'\n        uses: actions/setup-ruby@v2\n        with:\n          ruby-version: '3.1'\n\n      - name: 'Publish a pre-release package to GitHub Packages'\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const { context, github } = require('actions-toolkit');\n            const { githubRelease } = require('@actions/github-release');\n\n            github.context.release_tag = 'pre';\n            const release = await githubRelease.create({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              tag_name: 'pre',\n              name: 'Pre-release',\n              body: 'This is a pre-release package.',\n              prerelease: true\n            });\n\n            await githubRelease.createWithUploads({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              tag_name: release.tag_name,\n              releases_url: release.releases_url,\n              media_type: 'application/zip',\n              name: 'Pre-release Package',\n              asset: '/path/to/your-gem.gem'\n            });\n```\nPlease note that you need to replace `'/path/to/your-gem.gem'` with the actual path to your gem file that you want to publish. Also, ensure that you have the necessary permissions to publish to GitHub Packages and that your repository has the GitHub Actions integration set up for publishing releases.", "answer": "```yaml name: Ruby Gem\n\non:\n  push:\n    branches: [ \"master\" ]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1.117.0\n      with:\n        ruby-version: 3.1.2\n\n    - name: Publish a pre package to GitHub Packages\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:github: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        sed -i -e \"/^\\s*VERSION = .*pre/ s/pre/pre.$(date +%Y%m%d.%H%M).$(git rev-parse --short HEAD)/\" lib/geminabox/version.rb\n        gem build *.gemspec\n        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n      env:\n        GEM_HOST_API_KEY: \"Bearer ${{secrets.GITHUB_TOKEN}}\"\n        OWNER: ${{ github.repository_owner }}\n```"}
{"id": "63c497b033b087f6bde3409c", "level": "level2", "llm_response": " ```yaml\nname: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup C++\n        uses: actions/setup-cpp@v1\n\n      - name: Compile\n        run: c++ -std=c++17 my_program.cpp -o my_program\n\n      - name: Packaging\n        run: cpack -G TGZ -C Release\n\n      - name: Test\n        run: ctest -C Release\n\n      - name: Deploy\n        if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n        env:\n          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}\n        run: ./deploy.sh\n```", "answer": "```yaml name: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container:\n      image: grumpycoders/pcsx-redux-build:latest\n      env:\n        TEST_RESULTS: /tmp/test-results\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          set-safe-directory: true\n      - uses: n1hility/cancel-previous-runs@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - run: |\n          make -j 2 all pcsx-redux-tests\n          make -C src/mips/tests -j 2 PCSX_TESTS=true\n          make -C src/mips/openbios -j 2 clean all\n      - name: Packaging\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          make install install-openbios DESTDIR=AppDir/usr\n          echo '{' > AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"version\": \"'`git rev-parse HEAD | cut -c 1-8`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"changeset\": \"'`git rev-parse HEAD`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"timestamp\": '`date '+%s'`',' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"updateInfo\": [' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    {' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"method\": \"appcenter\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateCatalog\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/public_releases\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateInfoBase\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/releases/\"' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    }' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  ]' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '}' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          appimage-builder --skip-tests\n      - name: Test\n        run: |\n          export GTEST_OUTPUT=xml:${TEST_RESULTS}/\n          mkdir -p $TEST_RESULTS\n          xvfb-run catchsegv ./pcsx-redux-tests\n      - name: Deploy\n        if: github.event_name == 'push'\n        env:\n          APPCENTER_ACCESS_TOKEN: ${{ secrets.LINUX_APPCENTER_ACCESS_TOKEN }}\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          export BUILD=`git rev-parse HEAD | cut -c 1-8`\n          . /usr/local/nvm/nvm.sh\n          zip PCSX-Redux-$BUILD-linux-x86_64.zip *.AppImage\n          appcenter distribute release -b $BUILD -f PCSX-Redux-$BUILD-linux-x86_64.zip -g public -a grumpycoders/pcsx-redux-linux64 --disable-telemetry\n```"}
{"id": "63c49c6d1e336480757a0cf3", "level": "level2", "llm_response": " ```yaml\nname: Verify PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    permissions:\n      checks: write\n\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: actions/verify-pull-request@v1\n```", "answer": "```yaml name: Verify PR\n\non:\n  pull_request_target:\n    types: [opened, edited, synchronize, reopened]\n\npermissions:\n  checks: write # Allow access to checks to write check runs.\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    name: Verify PR contents\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: kubernetes-sigs/kubebuilder-release-tools@v0.2.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f766fc19abdf9cd6487", "level": "level2", "llm_response": " ```yaml\nname: Version Bump\n\non:\n  workflow_dispatch:\n\njobs:\n  version_bump_and_changie:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Bump version\n      uses: actions/github-script@v4\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          const version = context.payload.inputs.version_number;\n          github.rest.createRef({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            ref: 'refs/heads/main',\n            tag_name: `v${version}`,\n            force: true\n          });\n\n    - name: Commit version bump\n      run: |\n        git config --global user.name 'GitHub Action'\n        git config --global user.email '<EMAIL>'\n        git add .\n        git commit -m \"Bump version to ${version_number}\"\n        git push\n```", "answer": "```yaml # **what?**\n# This workflow will take the new version number to bump to. With that\n# it will run versionbump to update the version number everywhere in the\n# code base and then run changie to create the corresponding changelog.\n# A PR will be created with the changes that can be reviewed before committing.\n\n# **why?**\n# This is to aid in releasing dbt and making sure we have updated\n# the version in all places and generated the changelog.\n\n# **when?**\n# This is triggered manually\n\nname: Version Bump\n\non:\n  workflow_dispatch:\n    inputs:\n      version_number:\n       description: 'The version number to bump to (ex. 1.2.0, 1.3.0b1)'\n       required: true\n\njobs:\n  version_bump_and_changie:\n    uses: dbt-labs/actions/.github/workflows/version-bump.yml@main\n    with:\n      version_number: ${{ inputs.version_number }}\n    secrets: inherit  # ok since what we are calling is internally maintained\n```"}
{"id": "63c49f961842bc13d779807d", "level": "level2", "llm_response": " ```yaml\nname: Sync wgcf latest version\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 2 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Update wgcf to latest version\n        run: |\n          # Commands to update wgcf to the latest version\n\n      - name: Upload to REPO\n        run: |\n          # Commands to upload the updated wgcf to the repository\n```\nNote: Replace the placeholder comments with the actual shell commands needed to update `wgcf` and upload it to the repository. The `Checkout` step is necessary to check out the repository code before proceeding with the update and upload steps.", "answer": "```yaml name: Sync wgcf latest version\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '3 2 * * *'\n\njobs:\n  build:\n    name: Sync wgcf latest version\n    runs-on: ubuntu-latest\n    env:\n      USERNAME: ${{ secrets.GH_USERNAME }}\n      EMAIL: ${{ secrets.GH_EMAIL }}\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - name: Update wgcf to latest version\n        run: |\n          NOW=$(wget -qO- https://raw.githubusercontent.com/${{ env.USERNAME }}/warp/main/menu.sh | grep 'latest=${latest' | cut -d \\' -f2)\n          LATEST=$(wget -qO- \"https://api.github.com/repos/ViRb3/wgcf/releases/latest\" | grep \"tag_name\" | head -n 1 | cut -d : -f2 | sed 's/[ \\\"v,]//g')\n          NOW1=$(echo $NOW | cut -d \\. -f1)\n          NOW2=$(echo $NOW | cut -d \\. -f2)\n          NOW3=$(echo $NOW | cut -d \\. -f3)\n          LATEST1=$(echo $LATEST | cut -d \\. -f1)\n          LATEST2=$(echo $LATEST | cut -d \\. -f2)\n          LATEST3=$(echo $LATEST | cut -d \\. -f3)\n          NOW_VERSION=$(( NOW1*1000000 + NOW2*1000 + NOW3 ))\n          LATEST_VERSION=$(( LATEST1*1000000 + LATEST2*1000 + LATEST3 ))\n          if [ $LATEST_VERSION -gt $NOW_VERSION ]; then\n            PLATFORM=(  \"darwin_amd64\"\n                        \"darwin_arm64\"\n                        \"linux_386\"\n                        \"linux_amd64\"\n                        \"linux_arm64\"\n                        \"linux_386\"\n                        \"linux_s390x\"\n                        \"windows_386.exe\"\n                        \"windows_amd64.exe\"\n                      )\n                    \n            SCRIPTS=( \"docker.sh\"\n                      \"menu.sh\"\n                      \"pc/mac.sh\"\n                    )\n            \n            for i in \"${PLATFORM[@]}\"; do\n              wget -NP ${GITHUB_WORKSPACE}/wgcf/ https://github.com/ViRb3/wgcf/releases/download/v\"$LATEST\"/wgcf_\"$LATEST\"_\"$i\"\n              rm -f ${GITHUB_WORKSPACE}/wgcf/wgcf_\"$NOW\"_\"$i\"\n            done\n            \n            for j in \"${SCRIPTS[@]}\"; do\n              sed -i \"s/$NOW/$LATEST/g\" ${GITHUB_WORKSPACE}/$j\n            done\n            \n            echo \"VERSION=$LATEST\" >> $GITHUB_ENV\n          fi\n          \n      - name: Upload to REPO\n        if: ${{ env.VERSION != '' }}\n        run: |\n          git config --global user.email \"${{ env.EMAIL }}\"\n          git config --global user.name \"${{ env.USERNAME }}\"\n          git add .\n          git commit -m \"Sync WGCF to V${{ env.VERSION }} by Github Actions, $(date \"+%Y/%m/%d %H:%M:%S\")\"\n          git push\n\n```"}
{"id": "63c49947cbc73931bb18c954", "level": "level2", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Install Node dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n      - name: Publish\n        run: npm publish\n```\n\nNote: The `.` placeholders in the steps should be replaced with the actual commands you want to execute. For example, if you want to run a linting script, you might replace the first `.` with `npm run lint`.\n\nAlso, please ensure that you have the necessary permissions to publish packages to your package registry, and that your workflow file is properly configured with secrets or environment variables as required for authentication.", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    name: Lint and Build\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - run: yarn lint\n      - run: yarn tsc\n      - run: yarn build:only\n```"}
{"id": "63c49d68b008460c1df40d8b", "level": "level2", "llm_response": " ```yaml\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - v*\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Get time\n        run: echo \"Workflow started at $(date)\"\n\n      - name: Install dependencies for Linux\n        run: sudo yum install -y gcc-c++ make openssl-devel\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: sudo yum install -y gflags glog apache-arrow\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: sudo yum install -y grpc-cpp grpc++\n\n      - name: Install libgrape-lite\n        run: sudo yum install -y libgrape-lite\n\n      - name: Setup tmate session\n        run: tmate --session\n\n      - name: CMake\n        run: cmake .\n\n      - name: Build\n        run: make all\n```", "answer": "```yaml # Copyright 2020-2022 Alibaba Group Holding Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    container:\n      image: centos:latest\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n    steps:\n      - name: Get time\n        run: |\n          date +'%Y-%m' > snapshot.txt\n      - name: Install dependencies for Linux\n        run: |\n          # switch to centos stream\n          dnf -y --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos\n          dnf -y update\n          yum -y install sudo\n\n          # install required dependencies\n          sudo yum -y group install \"Development Tools\"\n          sudo yum -y install boost-devel \\\n                              cmake \\\n                              git \\\n                              brotli-devel \\\n                              bzip2-devel \\\n                              curl \\\n                              lz4-devel \\\n                              m4 \\\n                              make \\\n                              autoconf \\\n                              automake \\\n                              openmpi-devel \\\n                              librdkafka \\\n                              snappy \\\n                              pkgconf \\\n                              zlib-devel \\\n                              libzstd-devel \\\n                              python3-devel \\\n                              python3-pip \\\n                              openssl-devel \\\n                              wget\n\n          # install python packages for codegen\n          sudo pip3 install -U pip\n          sudo pip3 install libclang parsec setuptools wheel twine\n\n      # the checkout action require new version of git\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: |\n          echo \"Installing gflags ...\"\n          cd /tmp\n          curl -L https://github.com/gflags/gflags/archive/v2.2.2.tar.gz --output gflags-v2.2.2.tar.gz\n          tar zxf gflags-v2.2.2.tar.gz\n          cd gflags-2.2.2\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON\n          sudo make install -j`nproc`\n\n          echo \"Installing glog ...\"\n          cd /tmp\n          curl -L https://github.com/google/glog/archive/v0.5.0.tar.gz --output glog-v0.5.0.tar.gz\n          tar zxf glog-v0.5.0.tar.gz\n          cd glog-0.5.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_TESTING=OFF\n          sudo make install -j`nproc`\n\n          echo \"Installing apache-arrow ...\"\n          cd /tmp\n          wget https://github.com/apache/arrow/archive/refs/tags/apache-arrow-8.0.0.tar.gz\n          tar zxf apache-arrow-8.0.0.tar.gz\n          cd arrow-apache-arrow-8.0.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake ../cpp \\\n              -DARROW_COMPUTE=ON \\\n              -DARROW_WITH_UTF8PROC=ON \\\n              -DARROW_CSV=ON \\\n              -DARROW_CUDA=OFF \\\n              -DARROW_DATASET=OFF \\\n              -DARROW_FILESYSTEM=ON \\\n              -DARROW_FLIGHT=OFF \\\n              -DARROW_GANDIVA=OFF \\\n              -DARROW_GANDIVA_JAVA=OFF \\\n              -DARROW_HDFS=OFF \\\n              -DARROW_HIVESERVER2=OFF \\\n              -DARROW_JSON=OFF \\\n              -DARROW_ORC=OFF \\\n              -DARROW_PARQUET=OFF \\\n              -DARROW_PLASMA=OFF \\\n              -DARROW_PLASMA_JAVA_CLIENT=OFF \\\n              -DARROW_PYTHON=OFF \\\n              -DARROW_S3=OFF \\\n              -DARROW_WITH_BZ2=OFF \\\n              -DARROW_WITH_ZLIB=OFF \\\n              -DARROW_WITH_LZ4=OFF \\\n              -DARROW_WITH_SNAPPY=OFF \\\n              -DARROW_WITH_ZSTD=OFF \\\n              -DARROW_WITH_BROTLI=OFF \\\n              -DARROW_IPC=ON \\\n              -DARROW_BUILD_BENCHMARKS=OFF \\\n              -DARROW_BUILD_EXAMPLES=OFF \\\n              -DARROW_BUILD_INTEGRATION=OFF \\\n              -DARROW_BUILD_UTILITIES=OFF \\\n              -DARROW_BUILD_TESTS=OFF \\\n              -DARROW_ENABLE_TIMING_TESTS=OFF \\\n              -DARROW_FUZZING=OFF \\\n              -DARROW_USE_ASAN=OFF \\\n              -DARROW_USE_TSAN=OFF \\\n              -DARROW_USE_UBSAN=OFF \\\n              -DARROW_JEMALLOC=OFF \\\n              -DARROW_BUILD_SHARED=ON \\\n              -DARROW_BUILD_STATIC=OFF\n          sudo make install -j`nproc`\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: |\n          cd /tmp\n          git clone https://github.com/grpc/grpc.git --depth 1 --branch v1.46.x\n          cd grpc/\n          git submodule update --init\n          mkdir cmake-build\n          cd cmake-build/\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n            -DgRPC_INSTALL=ON \\\n            -DgRPC_BUILD_TESTS=OFF \\\n            -DgRPC_BUILD_CSHARP_EXT=OFF \\\n            -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n            -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \\\n            -DgRPC_ZLIB_PROVIDER=package \\\n            -DgRPC_SSL_PROVIDER=package\n          sudo make install -j`nproc`\n\n      - name: Install libgrape-lite\n        run: |\n          # leverage ccache\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n\n          git clone https://github.com/alibaba/libgrape-lite.git --depth=1\n          cd libgrape-lite\n          mkdir build\n          cd build\n          cmake ..\n          make -j`nproc`\n          sudo make install\n\n      - name: Setup tmate session\n        if: false\n        uses: mxschmitt/action-tmate@v2\n\n      - name: CMake\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          mkdir build\n          cd build\n          cmake .. -DCMAKE_BUILD_TYPE=Release \\\n                   -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_VINEYARD_COVERAGE=ON \\\n                   -DBUILD_VINEYARD_PYTHON_BINDINGS=ON \\\n                   -DBUILD_VINEYARD_BASIC=ON \\\n                   -DBUILD_VINEYARD_IO=ON \\\n                   -DBUILD_VINEYARD_IO_KAFKA=ON \\\n                   -DBUILD_VINEYARD_HOSSEINMOEIN_DATAFRAME=ON \\\n                   -DBUILD_VINEYARD_TESTS=ON\n\n      - name: Build\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          pushd build\n          make -j`nproc`\n          make vineyard_tests -j`nproc`\n          make vineyard_client_python -j`nproc`\n          sudo make install\n          popd\n```"}
{"id": "63c49b1b33b087f6bde49f07", "level": "level2", "llm_response": " ```yaml\nname: TagBot\non:\n  schedule:\n    - cron: '0 * * * *'  # Runs every hour\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: TagBot Step\n        run: echo \"This is the TagBot step executing every hour.\"\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 * * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49bc7cbc73931bb19c883", "level": "level2", "llm_response": " ```yaml\nname: Build Docker Image\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Build Docker Image\n        run: docker build -t my-kotlin-app .\n\n      - name: Publish to Registry\n        uses: docker/build-push-action@v2\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n          registry: docker.io\n          repository: my-kotlin-app\n          tags: latest\n```\n\nPlease note that in the `Publish to Registry` step, you need to set up your Docker Hub credentials (`DOCKER_USERNAME` and `DOCKER_PASSWORD`) in the GitHub repository secrets for authentication. The `repository` parameter should match the name of your Docker image, and the `tags` parameter should specify the tag you want to assign to your Docker image.", "answer": "```yaml name: Build Docker Image\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    if: github.repository == 'hectorqin/reader'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: hectorqin/reader-basic\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        snapshot: true\n        tags: \"test\"\n```"}
{"id": "63c498e31e3364807578a839", "level": "level2", "llm_response": " ```yaml\nname: create-index\non:\n  push:\n    branches:\n      - master\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Update\n        run: echo \"Update steps for HTML repository\"\n```", "answer": "```yaml name: create-index\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  update:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        \n      - name: update\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        run: |\n          sed -i '/<!-- marker -->/,$ d' README.md\n        \n          (\n          echo '<!-- marker -->'\n          \n          for directory in cheat-sheet examples; do\n            oldgroup=\n            printf \"\\n## %s Index\\n\\n\" $(echo \"$directory\" | sed -e \"s/\\b\\(.\\)/\\u\\1/g\")\n\n            while IFS=/ read -r dot group file; do\n              name=\"$(basename \"$file\" .md)\"\n\n              if [ \"$oldgroup\" != \"$group\" ]; then\n                echo \"<br/><span class='group'><b>$group</b></span>\"\n                oldgroup=\"$group\"\n              fi\n\n              echo \" | <a class='topic' href='https://lzone.de/$directory/$name'>$name</a>\"\n            done < <(cd $directory/ && find . -name \"*.md\" | sort)\n          done\n          ) >>README.md\n          \n          git config user.email \"noreply@example.com\"\n          git config user.name \"Create Index Workflow\"\n          git commit -m \"Update index.\" README.md || exit 0\n          git push\n```"}
{"id": "63c499146fc19abdf9cad631", "level": "level2", "llm_response": " ```yaml\nname: Publish\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build TypeScript project\n        run: npm run build\n\n      - name: Run tests\n        run: npm test\n\n      - name: Publish to npm\n        if: github.event.release.prerelease == false\n        run: |\n          npm publish --access public\n          echo \"Deployed to npm\"\n```\n\nNote: Replace `npm run build` and `npm test` with the actual commands you use for building and testing your TypeScript project. Also, ensure that your `.npmrc` file is configured correctly to allow publishing to npm. The `if` condition checks if it's a final release before publishing. Adjust the condition according to your needs.", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish --access public\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49ebf33b087f6bde61b74", "level": "level2", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [opened, edited, commented]\n  schedule:\n    - cron: '0 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      issues: write\n\n    steps:\n      - name: ''\n```\nPlease note that the step name is left empty (`''`). You should replace the empty string with the actual step name and action you want to execute. For example:\n\n```yaml\n      - name: Checkout repository\n        uses: actions/checkout@v2\n```\n\nThis will define the step to checkout the repository code. Make sure to fill in the appropriate actions and steps for your workflow.", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\n# By specifying the access of one of the scopes, all of those that are not\n# specified are set to 'none'.\npermissions:\n  issues: write\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@9bb0a4b5e6a45046f00353d5de7d90fb8bd773bb\n        with:\n          token: ${{ github.token }}\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Without additional information we're not able to resolve this issue,\n            so it will be closed at this time. You're still free to add more info\n            and respond to any questions above, though. We'll reopen the case\n            if you do. Thanks for your contribution!\n          # Number of days of inactivity before an issue is closed for lack of response.\n          daysUntilClose: 21\n          # Label requiring a response.\n          responseRequiredLabel: \"waiting for customer response\"\n```"}
{"id": "63c499806fc19abdf9cb01f0", "level": "level2", "llm_response": " ```yaml\nname: GH Pages\n\non:\n  release:\n    types: [published, prereleased, draft]\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: TypeScript\n        run: npm install\n\n      - name: Build Storybook\n        run: npx storybook build --out-dir public\n\n      - name: Deploy Storybook\n        run: |\n          git config --global user.email \"deploy@example.com\"\n          git config --global user.name \"Deploy Bot\"\n          git add public\n          git commit -m \"Deploy Storybook\"\n          git push\n```\n\nPlease note that I've added placeholders for the steps where you would include specific commands for building and deploying your TypeScript project's Storybook. You would need to replace these placeholders with the actual commands you use in your project.", "answer": "```yaml name: \"GH Pages\"\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    name: \"Deploy GH Pages\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - uses: bahmutov/npm-install@v1\n        with:\n          useRollingCache: true\n          install-command: yarn --frozen-lockfile\n\n      - name: \"Deploy storybook\"\n        run: yarn storybook:deploy --ci\n        env:\n          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e671842bc13d7790941", "level": "level2", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.8, 3.9, 3.10]\n    name: Python ${{ matrix.python }}\n    steps:\n      - name: ''\n      - name: Set up Python ${{ matrix.python }}\n      - name: Setup poetry\n      - name: Configure poetry\n      - name: Install Python dependencies\n      - name: ''\n      - name: Setup Node\n      - name: Install Node dependencies\n      - name: Lint TypeScript\n      - name: Build JavaScript\n      - name: Run pytest\n```\n\nNote: The first step name is left empty as per the user's input. You can replace the empty string with the actual name of the step if needed.\n\nAlso, I've added the `strategy` section to define the matrix for different Python versions. You can adjust the list of Python versions as per your requirements.", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python: [\"3.6\", \"3.7\", \"3.8\", \"3.9\"]\n\n    name: Python ${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Setup poetry\n        uses: abatilo/actions-poetry@v2.1.6\n        with:\n          poetry-version: 1.1.12\n\n      - name: Configure poetry\n        run: poetry config virtualenvs.in-project true\n\n      - name: Install Python dependencies\n        run: poetry install\n\n      - run: poetry run jupyter nbextension install vega --py --sys-prefix\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - name: Lint TypeScript\n        run: yarn lint\n\n      - name: Build JavaScript\n        run: yarn build\n\n      - name: Run pytest\n        run: poetry run pytest vega\n```"}
{"id": "63c49a8d1e33648075794f60", "level": "level2", "llm_response": " ```yaml\nname: Push Tagged Container\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: setup go\n        run: |\n          sudo apt-get update && sudo apt-get install -y golang\n      - name: checkout\n        uses: actions/checkout@v2\n      - name: unit test\n        run: go test ./...\n      - name: test build\n        run: go build -v ./...\n\n  container-image:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v2\n      - name: get version tag\n        run: echo \"VERSION=$(git describe --tags --abbrev=0)\" >> $GITHUB_ENV\n      - name: docker login\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n      - name: docker build\n        run: docker build -t myapp:${{ env.VERSION }} .\n      - name: docker push\n        run: docker push myapp:${{ env.VERSION }}\n```\nPlease replace `myapp` with your actual application name. Also, ensure that `DOCKER_USERNAME` and `DOCKER_PASSWORD` are set in your repository's secrets for the `docker login` step to work.", "answer": "```yaml name: Push Tagged Container\non:\n  push:\n    tags:\n    - v*.*.*\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: setup go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.19.x\n\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: unit test\n      run: make test\n\n    - name: test build\n      run: make build\n\n  container-image:\n    runs-on: ubuntu-latest\n    needs: [unit-test]\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: get version tag\n      run: echo TAG_NAME=$(echo ${GITHUB_REF} | rev | cut -d\"/\" -f1 | rev) >> $GITHUB_ENV\n\n    - name: docker login\n      run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n\n    - name: docker build\n      run: make docker-build version=${TAG_NAME}\n\n    - name: docker push\n      run: make docker-push version=${TAG_NAME}\n```"}
{"id": "63c49fca1e336480757b60ef", "level": "level2", "llm_response": " ```yaml\nname: Greetings\non:\n  pull_request:\n  issues:\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greeting\n        run: echo \"Hello, this workflow is triggered by a pull request or an issue.\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        pr-message:  'Hello @${{ github.actor }}, thank you for submitting a PR! We will review your changes and respond as soon as possible.'\n        issue-message: |\n          Hello @${{ github.actor }}, thank you for your interest in our work!\n          If this is a bug report, please provide your configuration and any screenshots that would assist troubleshooting, otherwise we can not help you.\n```"}
{"id": "63c497be6fc19abdf9ca490d", "level": "level2", "llm_response": " ```yaml\nname: LibraryBuild\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    repo:\n      push:\n        paths:\n          - '**.cpp'\n          - '**.h'\n          - 'examples/**'\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested, review_requested, commented, closed]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        arduino-boards-fqbn: [uno, nano, mega]\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Compile all examples\n      run: |\n        for board in ${{ matrix.arduino-boards-fqbn }}; do\n          echo \"Compiling examples for $board...\"\n          # Commands to compile examples for the specific Arduino board\n          # This is a placeholder and should be replaced with actual compilation commands\n        done\n```\nThis YAML file defines a GitHub Actions workflow named `LibraryBuild` that triggers on push events to the main branch or tagged commits, as well as pull request events. The workflow includes a job named `build` with two steps: `Checkout` and `Compile all examples`. The `Compile all examples` step is currently a placeholder and should be replaced with actual commands to compile the examples for the specified Arduino boards. The `arduino-boards-fqbn` matrix allows for testing examples on different Arduino boards.", "answer": "```yaml # LibraryBuild.yml\n# Github workflow script to test compile all examples of an Arduino library repository.\n#\n# Copyright (C) 2020  Armin Joachimsmeyer\n# https://github.com/ArminJo/Github-Actions\n#\n\n# This is the name of the workflow, visible on GitHub UI.\nname: LibraryBuild\non: [push, pull_request] # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request\n\njobs:\n  build:\n    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples\n\n    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.\n\n    env:\n      # Comma separated list without double quotes around the list. \n      REQUIRED_LIBRARIES: OSC,WiFiManager\n\n    strategy:\n      matrix:\n        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`\n        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the \"arduino-builder -dump-prefs\" command\n        #\n        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega\n        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native\"\n        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro\n        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8\n        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80\n        # You may add a suffix behind the fqbn with \"|\" to specify one board for e.g. different compile options like arduino:avr:uno|trace \n        #############################################################################################################\n        arduino-boards-fqbn:\n          - arduino:avr:uno\n          - arduino:avr:leonardo\n          - arduino:samd:nano_33_iot\n          - esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n          - esp32:esp32:featheresp32:FlashFreq=80\n\n        # Specify parameters for each board.\n        # Parameters can be: platform-url, sketches-exclude and examples-build-properties\n        # With sketches-exclude you may exclude specific examples for a board. Use a space separated list.\n        #############################################################################################################\n        include:\n          - arduino-boards-fqbn: arduino:avr:uno\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: arduino:avr:leonardo\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n          \n          - arduino-boards-fqbn: arduino:samd:nano_33_iot\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n            platform-url: https://arduino.esp8266.com/stable/package_esp8266com_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n            \n          - arduino-boards-fqbn: esp32:esp32:featheresp32:FlashFreq=80\n            platform-url: https://dl.espressif.com/dl/package_esp32_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n\n      # Do not cancel all jobs / architectures if one job fails\n      fail-fast: false\n\n    # This is the list of steps this job will run.\n    steps:\n\n      # First of all, we clone the repo using the `checkout` action.\n      - name: Checkout\n        uses: actions/checkout@master\n\n      - name: Compile all examples\n        uses: ArminJo/arduino-test-compile@v3\n        with:\n          arduino-board-fqbn: ${{ matrix.arduino-boards-fqbn }}\n          required-libraries: ${{ env.REQUIRED_LIBRARIES }}\n          platform-url: ${{ matrix.platform-url }}\n          sketches-exclude: ${{ matrix.sketches-exclude }}\n```"}
{"id": "63c498fe1899db58864e3ac1", "level": "level2", "llm_response": " ```yaml\nname: Cut Release\non:\n  workflow_dispatch:\n\njobs:\n  cut-release:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: cut-release\n      strategy:\n        matrix:\n          os: [ubuntu-latest]\n\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.15'\n\n    - name: Build and Release\n      run: |\n        # Your Go release build and release commands here\n        # Make sure to use the inputs: release_tag, key_ring, key_name\n        echo \"Release tag: ${{ github.event.inputs.release_tag }}\"\n        echo \"Key ring: ${{ github.event.inputs.key_ring }}\"\n        echo \"Key name: ${{ github.event.inputs.key_name }}\"\n\n    - name: Sign Release\n      uses: sigstore/sigstore@v0.2.0\n      with:\n        keyring: ${{ github.event.inputs.key_ring }}\n        key_name: ${{ github.event.inputs.key_name }}\n        release_tag: ${{ github.event.inputs.release_tag }}\n```", "answer": "```yaml name: Cut Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_tag:\n        required: true\n        type: string\n        description: 'Release tag'\n      key_ring:\n        required: true\n        type: string\n        description: 'Key ring for cosign key'\n      key_name:\n        required: true\n        type: string\n        description: 'Key name for cosign key'\n\nconcurrency: cut-release\n\njobs:\n  cut-release:\n    name: Cut release\n    uses: sigstore/sigstore/.github/workflows/reusable-release.yml@main\n    permissions:\n      id-token: write\n      contents: read\n    with:\n      release_tag: ${{ github.event.inputs.release_tag }}\n      key_ring: ${{ github.event.inputs.key_ring }}\n      key_name: ${{ github.event.inputs.key_name }}\n      workload_identity_provider: 'projects/498091336538/locations/global/workloadIdentityPools/githubactions/providers/sigstore-rekor'\n      service_account: 'github-actions-rekor@projectsigstore.iam.gserviceaccount.com'\n      repo: 'rekor'\n```"}
{"id": "63c49d81736e7f0ed8c61ef8", "level": "level2", "llm_response": " ```yaml\nname: Jenkins Security Scan\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, synchronize, reopened]\n  workflow_dispatch:\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set GITHUB_TOKEN Permissions\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::add-service-azure-role [role=contributor,scope=security-events]\" >> $GITHUB_TOKEN\n          echo \"::add-service-azure-role [role=reader,scope=contents]\" >> $GITHUB_TOKEN\n          echo \"::add-service-azure-role [role=reader,scope=actions]\" >> $GITHUB_TOKEN\n\n      # Additional steps for security scanning would go here\n```", "answer": "```yaml name: Jenkins Security Scan\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\npermissions:\n  security-events: write\n  contents: read\n  actions: read\n\njobs:\n  security-scan:\n    uses: jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml@v2\n    with:\n      java-cache: '' # Optionally enable use of a build dependency cache. Specify 'maven' or 'gradle' as appropriate.\n      java-version: 11 # What version of Java to set up for the build.\n```"}
{"id": "63c4a0a9517fc08c1ef113c7", "level": "level2", "llm_response": " ```yaml\nname: Test Lighthouse Check\n\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Lighthouse\n        run: npx lighthouse $(github.event.pull_request.number) --output html --output-path ./reports\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: lighthouse-reports\n          path: ./reports\n```\n\nPlease note that the placeholders ``, ``, and `Run Lighthouse` were not replaced with specific names as they were not provided in the input. The steps have been filled with generic names and functionality. You should replace the placeholders with the actual names and commands you want to execute in each step.", "answer": "```yaml name: Test Lighthouse Check\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: mkdir -p ${{ github.workspace }}/tmp/artifacts\n    - name: Run Lighthouse\n      uses: ./\n      with:\n        awsAccessKeyId: ${{ secrets.LIGHTHOUSE_CHECK_AWS_ACCESS_KEY_ID }}\n        awsBucket: ${{ secrets.LIGHTHOUSE_CHECK_AWS_BUCKET }}\n        awsRegion: ${{ secrets.LIGHTHOUSE_CHECK_AWS_REGION }}\n        awsSecretAccessKey: ${{ secrets.LIGHTHOUSE_CHECK_AWS_SECRET_ACCESS_KEY }}\n        device: all\n        gitAuthor: ${{ github.actor }}\n        gitBranch: ${{ github.ref }}\n        gitHubAccessToken: ${{ secrets.LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN }}\n        maxRetries: 1\n        outputDirectory: ${{ github.workspace }}/tmp/artifacts\n        urls: 'https://www.foo.software,https://www.foo.software/tag/articles/'\n        sha: ${{ github.sha }}\n        slackWebhookUrl: ${{ secrets.LIGHTHOUSE_CHECK_WEBHOOK_URL }}\n    - name: Upload artifacts\n      uses: actions/upload-artifact@master\n      with:\n        name: Lighthouse reports\n        path: ${{ github.workspace }}/tmp/artifacts\n```"}
{"id": "63c4981ab008460c1df1eed2", "level": "level2", "llm_response": " ```yaml\nname: Examples\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  examples:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Starlark\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Build and run examples\n        run: |\n          echo \"Building and running examples using Starlark...\"\n          # Insert the actual build and run commands for Starlark here\n\n      - name: Test examples\n        run: |\n          echo \"Testing examples...\"\n          # Insert the actual test commands for Starlark here\n```", "answer": "```yaml name: Examples\n\non:\n  pull_request:\n    branches: [ 'main' ]\n\njobs:\n  examples:\n    name: Build and run examples\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./examples/test.sh\n```"}
{"id": "63c49c756fc19abdf9cc3130", "level": "level2", "llm_response": " ```yaml\nname: Add \"approved\" label when approved\n\non: [pull_request]\n\njobs:\n  add_label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add \"approved\" label when approved\n        uses: actions/labeler@v3\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          labels: 'approved'\n          conditions:\n            - label: 'approved'\n```", "answer": "```yaml on: pull_request_review\nname: Add \"approved\" label when approved\njobs:\n  add_label:\n    name: Add \"approved\" label when approved\n    runs-on: ubuntu-latest\n    steps:\n    - name: Add \"approved\" label when approved\n      uses: pullreminders/label-when-approved-action@master\n      env:\n        APPROVALS: \"1\"\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        ADD_LABEL: \"approved\"\n        REMOVE_LABEL: \"\"\n```"}
{"id": "63c4a0716fc19abdf9cdcba2", "level": "level2", "llm_response": " ```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    runs-on: ubuntu-latest\n    id: Linting\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v2\n      - name: Add problem matcher\n        uses: actions/problem-matcher@v1\n      - name: Use Node.js v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install Dependencies\n        run: npm install\n      - name: Run ESLint\n        run: npm run lint\n\n  Building:\n    runs-on: ubuntu-latest\n    needs: Linting\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v2\n      - name: Add problem matcher\n        uses: actions/problem-matcher@v1\n      - name: Use Node.js v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install Dependencies\n        run: npm install\n      - name: Build Code\n        run: npm run build\n```", "answer": "```yaml name: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    name: Linting\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/eslint.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Run ESLint\n        run: yarn lint --fix=false\n\n  Building:\n    name: Compile source code\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/tsc.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Build Code\n        run: yarn build\n```"}
{"id": "63c49d3433b087f6bde57d8e", "level": "level3", "llm_response": " ```yaml\nname: Python 3.10\non:\n  push:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**.md'\n    paths:\n      - '**/*.py'\n      - 'pylib/**/*'\n      - 'requirements.txt'\n      - '.github/workflows/python3.10.yaml'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths-ignore:\n      - '**.md'\n    paths:\n      - '**/*.py'\n      - 'pylib/**/*'\n      - 'requirements.txt'\n      - '.github/workflows/python3.10.yaml'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    if: github.event_name == 'push' || github.event_name == 'pull_request'\n    strategy:\n      concurrency:\n        group: ${{ github.ref }}-${{ github.workflow }}\n        concurrency_group: ${{ github.ref }}-${{ github.workflow }}\n        matrix:\n          debug: ${{ github.event.inputs.debug || false }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Python 3.10\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.10\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Run Python 3.10 build\n        run: |\n          python setup.py build\n      - name: Run Python 3.10 tests\n        run: |\n          python -m unittest discover -s tests\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: python-artifacts\n          path: dist/\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2020-02-04 21:40:04 +0000 (Tue, 04 Feb 2020)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Python 3.10\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      python-version: \"3.10\"\n      caches: apt pip\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496441e33648075779820", "level": "level3", "llm_response": " ```yaml\nname: Delete PR documentation\n\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  delete:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Delete PR documentation\n        uses: huggingface/doc-builder/.github/workflows/delete_doc_comment.yml\n        with:\n          pr_number: ${{ github.event.number }}\n```", "answer": "```yaml name: Delete PR documentation\n\non:\n  pull_request:\n    types: [ closed ]\n\n\njobs:\n  delete:\n    uses: huggingface/doc-builder/.github/workflows/delete_doc_comment.yml@main\n    with:\n      pr_number: ${{ github.event.number }}\n      package: optimum\n```"}
{"id": "63c49da61899db58865017a6", "level": "level3", "llm_response": " ```yaml\nname: Dependabot\n\non: pull_request\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: approve\n        run: |\n          # Step to approve the pull request\n          echo \"Approving the pull request: ${{ github.event.pull_request.html_url }}\"\n          # Add logic for approval here\n\n      - name: merge\n        run: |\n          # Step to merge the pull request\n          echo \"Merging the pull request: ${{ github.event.pull_request.html_url }}\"\n          # Add logic for merging here\n\n    permissions:\n      contents: write\n\n    secrets:\n      SYNCED_GITHUB_TOKEN: ${{ secrets.SYNCED_GITHUB_TOKEN_REPO }}\n```", "answer": "```yaml # Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Dependabot\non: pull_request\n\npermissions:\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.SYNCED_GITHUB_TOKEN_REPO}}\n    steps:\n      - name: approve\n        run: gh pr review --approve \"$PR_URL\"\n      - name: merge\n        run: gh pr merge --auto --squash --delete-branch \"$PR_URL\"\n```"}
{"id": "63c49ed81899db58865094fa", "level": "level3", "llm_response": " ```yaml\nname: Java CI with Maven\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths:\n      - '**.java'\n    pull_request:\n      branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n          server-id: github\n\n      - name: Build with Maven\n        run: mvn install\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: 'my-artifact'\n          path: './target/*.jar'\n```", "answer": "```yaml name: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build with Maven\n      run: mvn install\n    - uses: actions/upload-artifact@v3\n      with:\n        name: artifact\n        path: all/target\n```"}
{"id": "63c4a13d1899db588651899b", "level": "level3", "llm_response": " ```yaml\nname: Documentation building\n\non:\n  schedule:\n    - cron: '0 0 * * 2' # At 12:00 am on Tuesdays\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths:\n      - '.github/workflows/docs.yml'\n      - 'enaml/**'\n      - 'examples/**'\n      - 'docs/**'\n      - 'setup.py'\n      - 'pyproject.toml'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Get history and tags for SCM versioning to work\n        run: |\n          # Commands to retrieve history and tags\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n\n      - name: Install dependencies\n        run: |\n          # Commands to install Python dependencies\n\n      - name: Install project\n        run: |\n          # Commands to install project dependencies\n\n      - name: Install graphviz\n        uses: ts-graphviz/setup-graphviz@v1\n\n      - name: Build documentation\n        run: |\n          # Commands to build documentation\n```", "answer": "```yaml name: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths:\n      - .github/workflows/docs.yml\n      - \"enaml/**\"\n      - \"examples/**\"\n      - \"docs/**\"\n      - setup.py\n      - pyproject.toml\n\njobs:\n  docs:\n    name: Docs building\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Get history and tags for SCM versioning to work\n        run: |\n          git fetch --prune --unshallow\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install wheel\n          pip install -r docs/requirements.txt\n      - name: Install project\n        run: |\n          pip install -e .\n      - name: Install graphviz\n        uses: ts-graphviz/setup-graphviz@v1\n      - name: Build documentation\n        run: |\n          mkdir docs_output;\n          sphinx-build docs/source docs_output -W -b html;\n```"}
{"id": "63c49e011842bc13d778df54", "level": "level3", "llm_response": " ```yaml\nname: Issue Manager\n\non:\n  schedule:\n    - cron: '17 5 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install tiangolo/issue-manager\n        run: npm install tiangolo/issue-manager@0.4.0\n      - name: Manage Issues\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: npx tiangolo/issue-manager\n```", "answer": "```yaml name: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"17 5 * * 1-5\" # run at 5:17 on Monday to Friday\n  # We only use the issue manager for auto-closing, so we only need the cron trigger.\n  # issue_comment:\n  #   types:\n  #     - created\n  #     - edited\n  # issues:\n  #   types:\n  #     - labeled\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: tiangolo/issue-manager@0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          config: >\n            {\n                \"$schema\": \"https://raw.githubusercontent.com/tiangolo/issue-manager/master/schema.json\",\n                \"waiting for input\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for input for a month. If anyone finds the time to provide the requested information, please re-open the issue and we will continue handling it.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for fix confirmation\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for a fix confirmation for a month. If anyone still experiences this issue, please re-open the issue with updated information so we can continue working on a fix.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for release\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for resources\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                }\n            }\n```"}
{"id": "63c4990f1899db58864e41ef", "level": "level3", "llm_response": " ```yaml\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, created, edited, updated]\n\njobs:\n  EnforceLabel:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Enforce Label\n        uses: 8d1e1709b1011e6d90400a0e6cf7c0b77aa5efeb/enforce-label-action@v1\n```", "answer": "```yaml ---\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, synchronize]\njobs:\n  enforce-label:\n    name: EnforceLabel\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Enforce Label\n        uses: yogevbd/enforce-label-action@8d1e1709b1011e6d90400a0e6cf7c0b77aa5efeb\n        with:\n          BANNED_LABELS: \"hold\"\n          BANNED_LABELS_DESCRIPTION: \"PRs on hold cannot be merged\"\n```"}
{"id": "63c49d1633b087f6bde5714b", "level": "level3", "llm_response": " ```yaml\nname: C++ interop tests\n\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      - github-actions\n\njobs:\n  Run:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        cxx-version: ['14', '17']\n        arch: ['x86', 'x64']\n        os: ['ubuntu-latest', 'windows-latest']\n        target: ['x86', 'x64']\n        compiler: ['clang', 'gcc']\n\n    steps:\n      - name: Prepare compiler\n        run: echo \"Prepare compiler step\"\n\n      - name: Determine base branch\n        id: base_branch\n        run: echo \"Determine base branch step\"\n\n      - name: Checkout DMD\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ steps.base_branch.outputs.branch }}\n\n      - name: Checkout Phobos\n        uses: actions/checkout@v3\n        with:\n          repository: dlang.org/phobos\n          ref: master\n\n      - name: [Posix] Load cached clang\n        uses: actions/cache@v3\n        with:\n          path: clang-cache\n          key: ${{ runner.os }}-${{ matrix.cxx-version }}-${{ steps.base_branch.outputs.branch }}-clang\n\n      - name: [Posix] Setting up clang ${{ matrix.cxx-version }}\n        run: echo \"Setting up clang ${{ matrix.cxx-version }} step\"\n\n      - name: [Posix] Setup environment variables\n        run: echo \"Setup environment variables step\"\n\n      - name: [Linux] Setting up g++ ${{ matrix.cxx-version }}\n        if: runner.os == 'Linux'\n        run: echo \"Setting up g++ ${{ matrix.cxx-version }} step\"\n\n      - name: [Linux] Verifying installed g++ version\n        if: runner.os == 'Linux'\n        run: echo \"Verifying installed g++ version step\"\n\n      - name: [Windows] Restore dmc from cache\n        if: runner.os == 'Windows'\n        uses: ilammy/msvc-dev-cmd@v1\n        with:\n          cache-key: ${{ runner.os }}-dmc-${{ steps.base_branch.outputs.branch }}\n\n      - name: [Windows] Install dmc\n        if: runner.os == 'Windows'\n        run: echo \"Install dmc step\"\n\n      - name: [Windows] Add VC toolset to PATH\n        if: runner.os == 'Windows'\n        run: echo \"Add VC toolset to PATH step\"\n\n      - name: [Windows] Set environment variables\n        if: runner.os == 'Windows'\n        run: echo \"Set environment variables step\"\n\n      - name: [Posix] Build compiler & standard library\n        run: echo \"Build compiler & standard library step\"\n\n      - name: [Windows] Build compiler & standard library\n        if: runner.os == 'Windows'\n        run: echo \"Build compiler & standard library step\"\n\n      - name: [Posix] Run C++ test suite\n        run: echo \"Run C++ test suite step\"\n\n      - name: [Windows] Run C++ test suite\n        if: runner.os == 'Windows'\n        run: echo \"Run C++ test suite step\"\n\n      - name: Run C++ frontend unittests\n        run: echo \"Run C++ frontend unittests step\"\n\n      - name: Run C++ frontend unittests (32-bit)\n        run: echo \"Run C++ frontend unittests (32-bit) step\"\n\n      - name: Store artifacts\n        run: echo \"Store artifacts step\"\n```", "answer": "```yaml # Github action to test for C++ interoperability\n#\n# Most tests in the test-suite run on the CI when it comes to cross-platform testing.\n# However, the dlang auto-tester uses somewhat old host C/C++ compiler.\n# This is good for testing compatibility with e.g. LTS distributions,\n# but becomes problematic when we want to test more cutting-edge features,\n# such as newer C++ standards (C++17, C++20, etc...).\n#\n# This is the reason why we have this action: we have full control over the toolchain,\n# and it is cross platform. The supported platforms are whatever Github Actions support,\n# which is usually whatever the vendor (Canonical, Apple, Microsoft) supports.\n#\n# Notes:\n# - Some patterns used here have been developed through a lot of trial and error\n#   In particular, the build matrix approach, with two rows, and a large list of\n#   excludes, ended up being the most useful approach.\n# - Additionally, the check for the compiler version will save you a lot of trouble.\n#   Having the wrong path added to the $PATH and ending up with the wrong compiler\n#   being used can make debugging very painful.\n# - Try to use the native Github action syntax (${{ expression }}) when possible,\n#   as they are substituted with their value in the logs, unlike env variable.\n#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`\n#\n# TODO:\n# - Implement Windows + MSVC support\n# - Implement Windows + clang support\n# - Implement Linux + Clang 32 bits support (if possible)\nname: C++ interop tests\n\n# Only triggers on pushes to master & stable, as well as PR to master and stable\n# Sometimes reverts appear in the upstream repository (e.g. when the revert button\n# is clicked by a contributor with commit access), this should be tested as PR).\n#\n# Also note that Github actions does not retrigger on target branch changes,\n# hence the check on push.\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      # Use this branch name in your fork to test changes\n      - github-actions\n\njobs:\n  main:\n    name: Run\n    if: github.repository == 'dlang/dmd'\n\n    strategy:\n      # Since those tests takes very little time, don't use `fail-fast`.\n      # If runtime expand, we might want to comment this out,\n      # as most failing PRs do so because they don't compile / something is broken,\n      # very few PRs actually benefit from this.\n      fail-fast: false\n      matrix:\n        os: [ macOS-11, ubuntu-20.04, windows-2019 ]\n\n        target: [\n          # Versions of clang earlier than 11 are not available on 20.04, but are on macOS-11\n          clang-13.0.0, clang-12.0.0, clang-11.0.0, clang-10.0.0, clang-9.0.0, clang-8.0.0,\n        # For g++, we test the oldest compiler on Ubuntu 20.04, which is GCC-9\n          g++-11, g++-10, g++-9,\n          # Finally, we test MSVC 2013 - 2019\n          msvc-2019, msvc-2017, msvc-2015, msvc-2013\n        ]\n\n        # Exclude target compilers not supported by the host\n        # Note: Pattern matching is not supported so this list is quite long,\n        # and brittle, as changing an msvc entry would break on OSX, for example.\n        exclude:\n          # 20.04 only has g++-9 through to 11, and clang-11.0.0 through to 13.0.0\n          - { os: ubuntu-20.04, target: clang-10.0.0 }\n          - { os: ubuntu-20.04, target: clang-9.0.0 }\n          - { os: ubuntu-20.04, target: clang-8.0.0 }\n          # OSX only supports clang\n          - { os: macOS-11, target: g++-11 }\n          - { os: macOS-11, target: g++-10 }\n          - { os: macOS-11, target: g++-9 }\n          - { os: macOS-11, target: msvc-2019 }\n          - { os: macOS-11, target: msvc-2017 }\n          - { os: macOS-11, target: msvc-2015 }\n          - { os: macOS-11, target: msvc-2013 }\n          # We don't test g++ on Windows as DMD only mangles for MSVC\n          - { os: windows-2019, target: g++-11 }\n          - { os: windows-2019, target: g++-10 }\n          - { os: windows-2019, target: g++-9 }\n\n          # TODO: Implement support for clang and MSVC2017 on Windows\n          # Currently those are still being run by the auto-tester\n          # We can hardly test below 2017 in the CI because there's\n          # no way to install it via command line\n          # (TODO: Test with 2015 as the blog post is slightly ambiguous)\n          # https://devblogs.microsoft.com/cppblog/introducing-the-visual-studio-build-tools/\n          - { os: windows-2019, target: msvc-2017 }\n          - { os: windows-2019, target: msvc-2015 }\n          - { os: windows-2019, target: msvc-2013 }\n          - { os: windows-2019, target: clang-13.0.0 }\n          - { os: windows-2019, target: clang-12.0.0 }\n          - { os: windows-2019, target: clang-11.0.0 }\n          - { os: windows-2019, target: clang-10.0.0 }\n          - { os: windows-2019, target: clang-9.0.0 }\n          - { os: windows-2019, target: clang-8.0.0 }\n\n        # This sets the configuration for each jobs\n        # There's a bit of duplication involved (e.g. breaking down g++-9.3 into 2 strings),\n        # but some items are unique (e.g. clang-9.0.0 and 4.0.1 have differences in their naming).\n        include:\n          # Clang boilerplate\n          - { target: clang-13.0.0, compiler: clang, cxx-version: 13.0.0 }\n          - { target: clang-12.0.0, compiler: clang, cxx-version: 12.0.0 }\n          - { target: clang-11.0.0, compiler: clang, cxx-version: 11.0.0 }\n          - { target: clang-10.0.0, compiler: clang, cxx-version: 10.0.0 }\n          - { target: clang-9.0.0, compiler: clang, cxx-version: 9.0.0 }\n          - { target: clang-8.0.0, compiler: clang, cxx-version: 8.0.0 }\n          # g++ boilerplace\n          - { target: g++-11, compiler: g++, cxx-version: 11.2.0, major: 11 }\n          - { target: g++-10, compiler: g++, cxx-version: 10.3.0, major: 10 }\n          - { target: g++-9, compiler: g++, cxx-version: 9.4.0, major: 9 }\n          # Platform boilerplate\n          - { os: ubuntu-20.04, arch: x86_64-linux-gnu-ubuntu-20.04 }\n          - { os: macOS-11,  arch: x86_64-apple-darwin }\n          # Clang 9.0.0 have a different arch for OSX\n          - { os: macOS-11, target: clang-9.0.0, arch: x86_64-darwin-apple }\n          # Those targets will generate artifacts that can be used by other testers\n          - { storeArtifacts: false }\n          - { os: ubuntu-20.04, target: g++-9,    storeArtifacts: true }\n          - { os: macOS-11,  target: clang-9.0.0, storeArtifacts: true }\n          #- { os: windows-2019, target: msvc-2019,   storeArtifacts: true }\n\n    # We're using the latest available images at the time of this commit.\n    # Using a specific version for reproductibility.\n    # Feel free to update when a new release has matured.\n    runs-on: ${{ matrix.os }}\n    steps:\n\n    ########################################\n    #    Setting up the host D compiler    #\n    ########################################\n    - name: Prepare compiler\n      uses: dlang-community/setup-dlang@v1\n\n    ##############################################\n    # Find out which branch we need to check out #\n    ##############################################\n    - name: Determine base branch\n      id: base_branch\n      shell: bash\n      run: |\n        # For pull requests, base_ref will not be empty\n        if [ ! -z ${{ github.base_ref }} ]; then\n            echo \"branch=${{ github.base_ref }}\" >> $GITHUB_OUTPUT\n        # Otherwise, use whatever ref we have:\n        # For branches this in the format 'refs/heads/<branch_name>',\n        # and for tags it is refs/tags/<tag_name>.\n        else\n            echo \"branch=${{ github.ref }}\" >> $GITHUB_OUTPUT\n        fi\n\n    #########################################\n    # Checking out up DMD, druntime, Phobos #\n    #########################################\n    - name: Checkout DMD\n      uses: actions/checkout@v3\n      with:\n        path: dmd\n        persist-credentials: false\n    - name: Checkout Phobos\n      uses: actions/checkout@v3\n      with:\n        path: phobos\n        repository: dlang/phobos\n        ref: ${{ steps.base_branch.outputs.branch }}\n        persist-credentials: false\n\n\n    ########################################\n    #   Setting up the host C++ compiler   #\n    ########################################\n    - name: '[Posix] Load cached clang'\n      id: cache-clang\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/\n        key: ${{ matrix.cxx-version }}-${{ matrix.arch }}-2022-09-25-2121\n\n    - name: '[Posix] Setting up clang ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows' && steps.cache-clang.outputs.cache-hit != 'true'\n      run: |\n        if [ \"${{ matrix.cxx-version }}\" == \"8.0.0\" -o \"${{ matrix.cxx-version }}\" == \"9.0.0\" ]; then\n          wget --quiet --directory-prefix=${{ github.workspace }} https://releases.llvm.org/${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        else\n          wget --quiet --directory-prefix=${{ github.workspace }} https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        fi\n        tar -x -C ${{ github.workspace }} -f ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        # On OSX, the system header are installed via `xcode-select` and not distributed with clang\n        # Since some part of the testsuite rely on CC being only a binary (not a command),\n        # and config files where only introduced from 6.0.0, use a wrapper script.\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          # Note: heredoc shouldn't be indented\n          cat << 'EOF' > ${TMP_CC}-wrapper\n        #!/bin/bash\n        # Note: We need to use this because github.workspace is not stable\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          # Invoking clang with `clang++` will link the C++ standard library\n          # Make sure we got two separate wrapper for this\n          cat << 'EOF' > ${TMP_CC}++-wrapper\n        #!/bin/bash\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang++ -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          chmod +x ${TMP_CC}-wrapper ${TMP_CC}++-wrapper\n        fi\n\n    - name: '[Posix] Setup environment variables'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          echo \"CC=${TMP_CC}-wrapper\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++-wrapper\" >> $GITHUB_ENV\n          echo \"SDKROOT=$(xcrun --show-sdk-path)\" >> $GITHUB_ENV\n        else\n          echo \"CC=${TMP_CC}\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++\" >> $GITHUB_ENV\n        fi\n\n    # On OSX and Linux, clang is installed by default and in the path,\n    # so make sure ${CC} works\n    - name: '[Posix] Verifying installed clang version'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q 'version ${{ matrix.cxx-version }}'; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.cxx-version }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # G++ is only supported on Linux\n    - name: '[Linux] Setting up g++ ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'g++'\n      run: |\n        # Workaround bug in Github actions\n        curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -\n        # Make sure we have the essentials\n        sudo apt-get update\n        sudo apt-get install build-essential software-properties-common -y\n        # This ppa provides multiple versions of g++\n        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\n        sudo apt-get update\n        sudo apt-get install -y ${{ matrix.target }} ${{ matrix.target }}-multilib\n        echo \"CC=${{ matrix.target }}\" >> $GITHUB_ENV\n        echo \"CXX=${{ matrix.target }}\" >> $GITHUB_ENV\n\n    # Make sure ${CC} works and we don't use the $PATH one\n    - name: '[Linux] Verifying installed g++ version'\n      if: matrix.compiler == 'g++'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q '${{ matrix.target }} (Ubuntu '; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.target }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # Restore or install dmc (and DM make)\n    - name: '[Windows] Restore dmc from cache'\n      id: cache-dmc\n      if: runner.os == 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}\\tools\\\n        key: ${{ matrix.os }}-dmc857\n\n    - name: '[Windows] Install dmc'\n      if: runner.os == 'Windows' && steps.cache-dmc.outputs.cache-hit != 'true'\n      shell: powershell\n      run: |\n        $url = \"http://ftp.digitalmars.com/Digital_Mars_C++/Patch/dm857c.zip\"\n        $sha256hash = \"F51CDFEB45EAF4FFBF7ABF0FE9B3D548B202B4528401005C2C3192B00BC32367\"\n        Write-Host ('Downloading {0} ...' -f $url)\n        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n        $ProgressPreference = 'SilentlyContinue'\n        New-Item -ItemType directory -Path ${{ github.workspace }}\\tools\\\n        Invoke-WebRequest -Uri $url -OutFile '${{ github.workspace }}\\tools\\dmc.zip'\n        if ((Get-FileHash '${{ github.workspace }}\\tools\\dmc.zip' -Algorithm \"SHA256\").Hash -ne $sha256hash) {\n          exit 1\n        }\n        Expand-Archive '${{ github.workspace }}\\tools\\dmc.zip' -DestinationPath ${{ github.workspace }}\\tools\\\n\n    - name: '[Windows] Add VC toolset to PATH'\n      if: runner.os == 'Windows'\n      uses: ilammy/msvc-dev-cmd@v1\n\n    - name: '[Windows] Set environment variables'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        echo \"VISUAL_STUDIO_LIB_NOT_DM=$(which lib.exe)\" >> $GITHUB_ENV\n        echo \"HOST_DMD=${{ env.DC }}\" >> $GITHUB_ENV\n        echo \"${{ github.workspace }}/tools/dm/bin/\" >> $GITHUB_PATH\n\n    ########################################\n    #    Building DMD, druntime, Phobos    #\n    ########################################\n    - name: '[Posix] Build compiler & standard library'\n      if: runner.os != 'Windows'\n      # By default, VMs have 2 processors available, hence the `-j2`:\n      # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources\n      run: |\n        # All hosts are 64 bits but let's be explicit\n        ./dmd/compiler/src/build.d -j2 MODEL=64\n        make -C dmd/druntime -f posix.mak -j2 MODEL=64\n        make -C phobos   -f posix.mak -j2 MODEL=64\n        # Both version can live side by side (they end up in a different directory)\n        # However, since clang does not provide a multilib package, only test 32 bits with g++\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/src/build.d install -j2 MODEL=32\n          make -C dmd/druntime -f posix.mak install -j2 MODEL=32\n          make -C phobos   -f posix.mak install -j2 MODEL=32\n        fi\n\n    - name: '[Windows] Build compiler & standard library'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        dmd -run dmd/compiler/src/build.d -j2 MODEL=64\n        if [ $? -ne 0 ]; then return 1; fi\n        # Note: Only CC for druntime and AR for Phobos are required ATM,\n        # but providing all three to avoid surprise for future contributors\n        # Those should really be in the path, though.\n        cd dmd/druntime\n        make -f win64.mak\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../../phobos/\n        make -f win64.mak CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../\n\n    ########################################\n    #        Running the test suite        #\n    ########################################\n    - name: '[Posix] Run C++ test suite'\n      if: runner.os != 'Windows'\n      env:\n        # Reset LD_LIBRARY_PATH when running the tests, so they use the newly built libphobos2.so.\n        LD_LIBRARY_PATH: ''\n      run: |\n        ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=64\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/test/run.d clean\n          ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=32\n        fi\n\n    - name: '[Windows] Run C++ test suite'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        cd dmd/druntime\n        make -f win64.mak test_stdcpp CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n\n    ########################################\n    #      Run C++ frontend unittests      #\n    ########################################\n    - name: Run C++ frontend unittests\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=64\n\n    - name: Run C++ frontend unittests (32-bit)\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=32\n\n    ########################################\n    #      Store generated artifacts       #\n    ########################################\n    - name: Store artifacts\n      if: ${{ matrix.storeArtifacts }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: dmd-${{ matrix.os }}\n        path: install\n```"}
{"id": "63c49e8033b087f6bde602c0", "level": "level3", "llm_response": " ```yaml\nname: Coding Standards\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n    branches:\n      - '*.*'\n  push:\n    branches:\n      - '*.*'\njobs:\n  coding-standards:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Enforce Coding Standards\n        uses: actions/coding-standard@v1\n        with:\n          language: php\n          rule-sets: 'https://github.com/actions/coding-standard/rule-sets/php'\n```", "answer": "```yaml name: \"Coding Standards\"\n\non:\n  pull_request:\n    branches:\n      - \"*.x\"\n  push:\n    branches:\n      - \"*.x\"\n\njobs:\n  coding-standards:\n    name: \"Coding Standards\"\n    uses: \"doctrine/.github/.github/workflows/coding-standards.yml@2.1.0\"\n    with:\n      php-version: '8.1'\n```"}
{"id": "63c496c333b087f6bde2e28f", "level": "level3", "llm_response": " ```yaml\nname: Missing API docs\n\non:\n  pull_request:\n    paths-ignore:\n      - '**/marvim/api-doc-update**'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Generate API Documentation\n        run: |\n          # Insert the command or script to regenerate API documentation here\n          # Example: vim --cmd 'Ack-grep -l --ignore-case --match=\"function\" .' --rcfile=.ackrc\n          echo \"API documentation regeneration step\"\n```", "answer": "```yaml name: Missing API docs\non:\n  pull_request:\n    branches-ignore:\n      - 'marvim/api-doc-update**'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    permissions:\n      contents: write\n      pull-requests: write\n    uses: ./.github/workflows/api-docs.yml\n    with:\n      check_only: true\n```"}
{"id": "63c4977c1842bc13d7763db2", "level": "level3", "llm_response": " ```yaml\nname: Push issue to Github Project dashboard\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [opened, edited]\n\njobs:\n  add_to_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add issue to project dashboard\n        uses: actions/add-to-project@v0.0.3\n        env:\n          PROJECT_TOKEN: ${{ secrets.PROJECT_TOKEN }}\n```", "answer": "```yaml name: Push issue to Github Project dashboard\n\non:\n    issues:\n        types:\n        -   opened\n    pull_request_target:\n        types:\n        -   opened\n\njobs:\n    add_to_project:\n        runs-on: ubuntu-latest\n        steps:\n        -   uses: actions/add-to-project@v0.0.3\n            with:\n                project-url: https://github.com/orgs/pyscript/projects/4/\n                github-token: ${{ secrets.PROJECT_TOKEN }}\n```"}
{"id": "63c496981e3364807577ba4f", "level": "level3", "llm_response": " ```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install Dependencies\n        run: |\n          pip install poetry\n          poetry install\n      - name: Test with Pytest\n        run: poetry run pytest\n      - name: Code Coverage\n        uses: codecov/codecov-action@v3.1.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Commit Lint Messages\n        uses: wagoid/commitlint-github-action@v5.2.0\n        with:\n          config-file: './commitlint.config.yaml'\n      - name: Release\n        uses: relekang/python-semantic-release@v7.32.1\n        with:\n          token: ${{ secrets.PYPI_TOKEN }}\n\n  e2e:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install Dependencies\n        run: |\n          pip install poetry\n          poetry install\n      - name: Run e2e script\n        run: poetry run ./run_e2e.sh\n\n  lint_commit_messages:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref || github.run_id }}\n      cancel-in-progress: true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Lint Commit Messages\n        uses: wagoid/commitlint-github-action@v5.2.0\n        with:\n          config-file: './commitlint.config.yaml'\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nconcurrency:\n  group: ${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Test\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macOS-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: snok/install-poetry@v1.3.2\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install Dependencies\n        run: poetry install\n      - name: Test with Pytest\n        run: poetry run pytest --cov-report=xml\n      - uses: codecov/codecov-action@v3.1.1\n\n  e2e:\n    # https://github.com/browniebroke/django-codemod/issues/302\n    name: e2e\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n      - name: Install Dependencies\n        run: |\n          pip install .\n          pip install 'Django>=3.0,<3.1'\n      - name: Run e2e script\n        run: ./tests/test_e2e.sh\n\n  # Make sure commit messages follow the conventional commits convention:\n  # https://www.conventionalcommits.org\n  commitlint:\n    name: Lint Commit Messages\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v5.2.0\n\n  release:\n    runs-on: ubuntu-latest\n    environment: release\n    if: github.ref == 'refs/heads/main'\n    needs:\n      - test\n      - e2e\n      - commitlint\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      # Run semantic release:\n      # - Update CHANGELOG.md\n      # - Update version in code\n      # - Create git tag\n      # - Create GitHub release\n      # - Publish to PyPI\n      - name: Python Semantic Release\n        uses: relekang/python-semantic-release@v7.32.1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          pypi_token: ${{ secrets.PYPI_TOKEN }}\n```"}
{"id": "63c4a1251842bc13d77a219c", "level": "level3", "llm_response": " ```yaml\nname: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - 'docs/**'\n      - 'docusaurus.config.js'\n      - 'package.json'\n      - 'Vars.js'\n      - 'sidebars.js'\n      - 'yarn.lock'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Docusaurus\n        uses: peaceiris/actions-setup-node@v3\n        with:\n          node-version: '14'\n\n      - name: Build website\n        run: |\n          npm install\n          npm run build\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          publish-dir: ./docs/_build\n```", "answer": "```yaml name: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - docs/**\n      - docusaurus.config.js\n      - package.json\n      - Vars.js\n      - sidebars.js\n      - yarn.lock\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Docusaurus\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Build website\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n      - name: Deploy to GitHub Pages\n        if: github.ref == 'refs/heads/main'\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./build```"}
{"id": "63c4a14a1842bc13d77a3048", "level": "level3", "llm_response": " ```yaml\nname: Docker Latest Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Out Repo\n        uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_HUB_USERNAME }}\n          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@master\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/my-python-app:latest\n\n      - name: Discord Success Notification\n        uses: meisnate12/discord-notifications@master\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          message: \"Docker image for ${{ github.run_id }} has been successfully built and pushed.\"\n\n      - name: Discord Failure Notification\n        uses: meisnate12/discord-notifications@master\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          message: \"Failed to build and push Docker image for ${{ github.run_id }}.\"\n```\nNote: Replace `my-python-app` with the actual name of your Docker image. Also, make sure to set the appropriate secrets in your GitHub repository settings for Docker Hub credentials, Discord webhook ID, and Discord webhook token.", "answer": "```yaml name: Docker Latest Release\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Check Out Repo\n        uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_HUB_USERNAME }}\n          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@master\n        with:\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: ./\n          file: ./Dockerfile\n          platforms: linux/amd64,linux/arm64,linux/arm/v7\n          push: true\n          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/plex-meta-manager:latest\n\n      - name: Discord Success Notification\n        uses: meisnate12/discord-notifications@master\n        if: success()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Success**\"\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png\n\n      - name: Discord Failure Notification\n        uses: meisnate12/discord-notifications@master\n        if: failure()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Failure**\"\n          color: 0xe30c43\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png```"}
{"id": "63c4a04c1899db5886512a2b", "level": "level3", "llm_response": " ```yaml\nname: Deploy\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag, or branch name to deploy'\n        required: true\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to (integration, staging, production)'\n        required: true\n        default: 'integration'\n      type:\n        description: 'Type of input (string or choice)'\n        default: 'string'\n  workflow_run:\n    workflows:\n      - CI\n    branches:\n      - main\n\njobs:\n  build-and-publish-image:\n    uses: ./.github/workflows/build-and-push-image.yaml\n    id: build-and-publish-image\n    outputs:\n      imageTag: ${{ steps.set-image-tag.outputs.imageTag }}\n\n  trigger-deploy:\n    needs: build-and-publish-image\n    runs-on: ubuntu-latest\n    if: ${{ github.ref == 'refs/heads/main' }}\n    steps:\n      - uses: ./.github/workflows/deploy.yaml\n        with:\n          gitRef: ${{ inputs.gitRef }}\n          environment: ${{ inputs.environment }}\n```", "answer": "```yaml name: Deploy\n\nrun-name: Deploy ${{ inputs.gitRef || github.ref_name  }} to ${{ inputs.environment || 'integration' }}\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag or branch name to deploy'\n        required: true\n        type: string\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: choice\n        options:\n        - integration\n        - staging\n        - production\n        default: 'integration'\n  workflow_run:\n    workflows: [CI]\n    types: [completed]\n    branches: [main]\n\njobs:\n  build-and-publish-image:\n    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'\n    name: Build and publish image\n    uses: alphagov/govuk-infrastructure/.github/workflows/build-and-push-image.yaml@main\n    with:\n      gitRef: ${{ inputs.gitRef || github.ref }}\n    secrets:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GOVUK_ECR_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GOVUK_ECR_SECRET_ACCESS_KEY }}\n  trigger-deploy:\n    name: Trigger deploy to ${{ inputs.environment || 'integration' }}\n    needs: build-and-publish-image\n    uses: alphagov/govuk-infrastructure/.github/workflows/deploy.yaml@main\n    with:\n      imageTag: ${{ needs.build-and-publish-image.outputs.imageTag }}\n      environment: ${{ inputs.environment || 'integration' }}\n    secrets:\n      WEBHOOK_TOKEN: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_TOKEN }}\n      WEBHOOK_URL: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_URL }}\n      GH_TOKEN: ${{ secrets.GOVUK_CI_GITHUB_API_TOKEN }}\n```"}
{"id": "63c49ffc517fc08c1ef0d18c", "level": "level3", "llm_response": " ```yaml\nname: YAML Linter\n\non:\n  push:\n    paths-ignore:\n      - '**.java'\n    paths:\n      - '**.yml'\n  pull_request:\n    branches:\n      - master\n\njobs:\n  linter:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: YAML Linter\n        uses: ibiqlik/action-yamllint@v3.1.1\n```", "answer": "```yaml name: YAML Linter\n\non:\n  push:\n    paths:\n    - '**.yml'\n  pull_request:\n    branches:\n    - master\n\npermissions:\n  contents: read\n\njobs:\n  linter:\n\n    name: YAML Linter\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: YAML Linter\n      uses: ibiqlik/action-yamllint@v3.1.1\n      with:\n        config_file: '.github/configs/yaml-linter.yml'\n```"}
{"id": "63c49a841842bc13d7777897", "level": "level3", "llm_response": " ```yaml\nname: Release\n\non:\n  release:\n    types: [published, draft, prereleased]\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Install Dependencies\n        run: npm install\n      - name: Deploy to NPM\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish\n\n  github:\n    runs-on: ubuntu-latest\n    needs: npm\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: path/to/your/asset\n          asset_name: your-asset-name\n```\n\nPlease note that you need to replace `path/to/your/asset` and `your-asset-name` with the actual path and name of the asset you want to upload. Also, ensure that the `NPM_TOKEN` and `GITHUB_TOKEN` secrets are configured in your GitHub repository settings for authentication.", "answer": "```yaml # https://docs.github.com/actions\n\nname: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/.htaccess bin/htaccess.conf\n      - name: Deploy to NPM\n        uses: JS-DevTools/npm-publish@v1.4.3\n        with:\n          token: ${{ secrets.NPM_TOKEN }}\n\n  github:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/h5bp.htaccess bin/htaccess.conf\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: ./dist/h5bp.htaccess\n          asset_name: h5bp.htaccess\n          asset_content_type: application/octet-stream\n```"}
{"id": "63c49c871e336480757a1819", "level": "level3", "llm_response": " ```yaml\nname: Release notifier\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify IRC\n        uses: v2/irc-message-action@main\n        env:\n          IRC_SHIORIBOT_PWD: ${{ secrets.IRC_SHIORIBOT_PWD }}\n          REPO_NAME: ${{ github.event.repository.full_name }}\n          RELEASE_NAME: ${{ github.event.release.name }}\n          RELEASE_URL: ${{ github.event.release.html_url }}\n```", "answer": "```yaml name: Release notifier\n\non:\n  release:\n    types: [published]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Notify IRC\n        uses: Gottox/irc-message-action@v2\n        with:\n          server: \"irc.libera.chat\"\n          channel: \"#shiori\"\n          nickname: ShioriBot\n          tls: true\n          sasl_password: ${{ secrets.IRC_SHIORIBOT_PWD }}\n          message: \"New release: ${{ github.event.repository.full_name }}@${{ github.event.release.name }}: ${{ github.event.release.html_url }}\"\n```"}
{"id": "63c4a1506fc19abdf9ce1a6b", "level": "level3", "llm_response": " ```yaml\nname: Contribs\non:\n  pull_request:\n    types: [opened, reopened]\njobs:\n  contribs:\n    name: Contribs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Contribs\n        uses: main:carlescufi/action-contribs\n        with:\n          ncs_github_token: ${{ secrets.NCS_GITHUB_TOKEN }}\n```", "answer": "```yaml name: Contribs\non:\n  pull_request_target:\n    types: [opened, reopened]\n\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    name: Contribs\n    steps:\n      - name: Contribs\n        uses: carlescufi/action-contribs@main\n        with:\n          github-token: ${{ secrets.NCS_GITHUB_TOKEN }}\n          command: 'external'\n          messages: |\n                    Thank you for your contribution!\n                    It seems you are not a member of the nrfconnect GitHub organization. External contributions are handled as follows:\n                    Large contributions, affecting multiple subsystems for example, may be rejected if they are complex, may introduce regressions due to lack of test coverage, or if they are not consistent with the architecture of nRF Connect SDK.\n                    PRs will be run in our continuous integration (CI) test system.\n                    If CI passes, PRs will be tagged for review and merged on successful completion of review. You may be asked to make some modifications to your contribution during review.\n                    If CI fails, PRs may be rejected or may be tagged for review and rework.\n                    PRs that become outdated due to other changes in the repository may be rejected or rework requested.\n                    External contributions will be prioritized for review based on the relevance to current development efforts in nRF Connect SDK.  Bug fix PRs will be prioritized.\n                    You may raise issues or ask for help from our Technical Support team by visiting https://devzone.nordicsemi.com/.\n                    |\n                    The author of this pull request has now been added to the nrfconnect GitHub organization.\n          labels: 'external'\n```"}
{"id": "63c49ff01899db5886510419", "level": "level3", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Update release draft\n        uses: v5/release-drafter/release-drafter@main\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release Drafter\n\non:\n    push:\n        # branches to consider in the event; optional, defaults to all\n        branches:\n            - master\n    # pull_request event is required only for autolabeler\n    pull_request:\n        # Only following types are handled by the action, but one can default to all as well\n        types: [opened, reopened, synchronize]\n\njobs:\n    update_release_draft:\n        runs-on: ubuntu-latest\n        steps:\n            # (Optional) GitHub Enterprise requires GHE_HOST variable set\n            #- name: Set GHE_HOST\n            #  run: |\n            #    echo \"GHE_HOST=${GITHUB_SERVER_URL##https:\\/\\/}\" >> $GITHUB_ENV\n\n            # Drafts your next Release notes as Pull Requests are merged into \"master\"\n            - uses: release-drafter/release-drafter@v5\n                # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n                # with:\n                #   config-name: my-config.yml\n                #   disable-autolabeler: true\n              env:\n                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c881e336480757a1881", "level": "level3", "llm_response": " ```yaml\nname: Python testing\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    name: Lint package\n    job_id: lint\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v3\n      - name: Cache pip\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Lint with flake8 & pylint\n        run: |\n          pip install flake8 pylint\n          flake8 .\n          pylint ./\n\n  tests:\n    runs-on: ubuntu-latest\n    name: Test package\n    job_id: tests\n    needs: lint\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Cache pip\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Run tests with pytest\n        run: pytest\n      - name: Install Coveralls\n        run: pip install coveralls\n      - name: Run tests with pytest & Calculate coverage\n        run: |\n          pytest --cov=./\n          coveralls\n      - name: Send coverage to Coveralls\n        uses: coverallsapp/github-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\nworkflow_dispatch:\n  schedule:\n    - cron: '0 3 * * 1'\n```\nNote: The above YAML assumes that the user wants to use pytest for running tests and coveralls for coverage reporting. The `matrix.python-version` should be defined in the `.yml` file or passed as an environment variable to specify different Python versions for testing. The `schedule` section is added to run the workflow at 03:23 am on Monday, but it's not a recommended practice to use cron schedules for GitHub Actions as they are not precise. It's better to use the `workflow_dispatch` event for manual triggering.", "answer": "```yaml ---\nname: \"Python testing\"\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n  schedule:\n    - cron: \"23 3 * * 1\"\n\njobs:\n  lint:\n    name: \"Lint package\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - run: |\n          echo \"package=$(ls -F | grep \\/$ | grep -v \"bin\\|examples\\|tests\" | sed -n \"s/\\///g;1p\")\" >> $GITHUB_ENV\n\n      - name: \"Set up Python\"\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-dev.txt\n          if [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Lint with flake8 & pylint\"\n        run: |\n          flake8 ${{ env.package }} tests\n          pylint ${{ env.package }} tests\n\n  tests:\n    name: \"Test package\"\n    needs: lint\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 3\n      matrix:\n        python-version: ['3.9', '3.10']\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-test.txt\n          if [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n          pip install pytest-xdist\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Run tests with pytest\"\n        if: matrix.python-version != '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar\n          ./bin/check_dirty\n\n      - name: \"Install Coveralls\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pip install pytest-xdist coveralls\n\n      - name: \"Run tests with pytest & Calculate coverage\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar --cov --cov-report=\n          ./bin/check_dirty\n\n      - name: \"Send coverage to Coveralls\"\n        if: matrix.python-version == '3.9'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: coveralls --service=github\n```"}
{"id": "63c4a08c33b087f6bde6d427", "level": "level3", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    repo: 'OrganizationName/RepositoryName'\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested]\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Run SwiftLint\n        uses: norio-nomura/action-swiftlint@v3.0.1\n        with:\n          args: --strict\n\n  ESLint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Run ESLint\n        uses: 123FLO321/action-eslint-standalone@v0.4.0\n        with:\n          args: '--config .eslintrc.js'\n```\n\nPlease replace `OrganizationName/RepositoryName` with the actual organization and repository name where the workflow is being created. The `--config .eslintrc.js` argument assumes that the ESLint configuration is located in a file named `.eslintrc.js` at the root of the repository. Adjust the configuration file name if it's different.", "answer": "```yaml name: Lint\n\non: [push, pull_request]\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: GitHub Action for SwiftLint with --strict\n        uses: norio-nomura/action-swiftlint@3.0.1\n        with:\n          args: --strict\n  ESLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: RUN ESLint\n        uses: 123FLO321/action-eslint-standalone@0.4.0\n        with:\n          args: --ext .js --ext .js.mustache --max-warnings=0\n```"}
{"id": "63c49c0c1899db58864f76fb", "level": "level3", "llm_response": " ```yaml\nname: Mirror main branch to master branch\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  mirror_job:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n      packages-workspace: read\n      pull-requests: write\n\n    steps:\n      - name: Mirror action step\n        id: mirror\n        uses: c6b07e441a7ffc5ae15860c1d0a8107a3a151db8/google/mirror-branch-action@v1\n        with:\n          token: ${{ secrets.FLUTTERMIRRORINGBOT_TOKEN }}\n```", "answer": "```yaml # Copyright 2013 The Flutter Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Mirror master to main branches in the gallery repository.\non:\n  push:\n    branches:\n      - 'main'\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  mirror_job:\n    permissions:\n      pull-requests: write\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'flutter/samples' }}\n    name: Mirror main branch to master branch\n    steps:\n      - name: Mirror action step\n        id: mirror\n        uses: google/mirror-branch-action@c6b07e441a7ffc5ae15860c1d0a8107a3a151db8\n        with:\n          github-token: ${{ secrets.FLUTTERMIRRORINGBOT_TOKEN }}\n          source: 'main'\n          dest: 'master'\n```"}
{"id": "63c49df833b087f6bde5cc43", "level": "level3", "llm_response": " ```yaml\nname: Check Arduino\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, locked, unlocked, commented, closed]\n  schedule:\n    - cron: '0 8 * * TU'\n  workflow_dispatch:\n  webhooks:\n    types: [workflow_dispatch]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Arduino Lint\n        uses: arduino/arduino-lint-action@v1\n```", "answer": "```yaml name: Check Arduino\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by new rules added to Arduino Lint.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Arduino Lint\n        uses: arduino/arduino-lint-action@v1\n        with:\n          compliance: specification\n          library-manager: update\n          # Always use this setting for official repositories. Remove for 3rd party projects.\n          official: true\n          project-type: library\n```"}
{"id": "63c496fb33b087f6bde2f916", "level": "level3", "llm_response": " ```yaml\nname: automerge\n\non:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - edited\n      - created\n      - synchronize\n      - ready_for_review\n      - reopened\n      - locked\n      - review_requested\n      - check_suite\n      - check_suite_status\n\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: f81beb99aef41bb55ad072857d43073fba833a98/automerge-action\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: automerge\non:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - synchronize\n      - opened\n      - edited\n      - ready_for_review\n      - reopened\n      - unlocked\n  pull_request_review:\n    types:\n      - submitted\n  check_suite:\n    types:\n      - completed\n  status: {}\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: \"pascalgn/automerge-action@f81beb99aef41bb55ad072857d43073fba833a98\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49b2fcbc73931bb198927", "level": "level3", "llm_response": " ```yaml\nname: PHP Lint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      types: [opened, synchronize, reopened, labeled, unlabeled, locked, unlocked]\n  workflow_dispatch:\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-version: [7.4, 8.0]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.ref }}\n\n      - name: Install PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php-version }}\n          extensions: mbstring\n\n      - name: Lint PHP files\n        run: |\n          composer install --no-progress --prefer-dist\n          vendor/bin/phpcs --standard=PSR2 src/\n          vendor/bin/phpcs --standard=PSR1 src/\n```", "answer": "```yaml name: \"PHP Lint\"\n\non:\n  - push\n  - pull_request\n\njobs:\n  tests:\n    name: \"Lint\"\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        php-version:\n          - \"5.3\"\n          - \"8.0\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v3\"\n\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"${{ matrix.php-version }}\"\n\n      - name: \"Lint PHP files\"\n        run: \"find src/ -type f -name '*.php' -print0 | xargs -0 -L1 -P4 -- php -l -f\"\n```"}
{"id": "63c4a17e6fc19abdf9ce2c3f", "level": "level3", "llm_response": " ```yaml\nname: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.x'\n\n      - name: Install Dependencies\n        run: |\n          pip install -r requirements.txt\n\n      - name: Build and Publish\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.RATARMOUNTCORE_TWINE_PASSWORD }}\n        run: |\n          python setup.py sdist bdist_wheel\n          twine upload dist/*\n```", "answer": "```yaml name: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n    - name: Install Dependencies\n      run: |\n        python3 -m pip install --upgrade pip\n        pip install setuptools wheel twine build\n    - name: Build and Publish\n      working-directory: core\n      env:\n        TWINE_PASSWORD: ${{ secrets.RATARMOUNTCORE_TWINE_PASSWORD }}\n      run: |\n        python3 -m build\n        twine check dist/*\n        twine upload --skip-existing -u __token__ dist/*\n```"}
{"id": "63c4a01b6fc19abdf9cda80e", "level": "level3", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - devel\n      - devel4\n      - devel5\n      - master\n  pull_request:\n    branches:\n      - devel\n      - devel4\n      - devel5\n  schedule:\n    - cron: '0 1 * * wed'\n  workflow_dispatch:\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [cpp]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"devel\", \"devel4\", \"devel5\", \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"devel\", \"devel4\", \"devel5\" ]\n  schedule:\n    - cron: '20 1 * * 3'\n  workflow_dispatch:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with: { submodules: true }\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0b1cbc73931bb1bc0b8", "level": "level3", "llm_response": " ```yaml\nname: Java CI with Maven\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v3\n        with:\n          java-version: '1.8'\n          distribution: 'adopt'\n          cache: maven\n\n      - name: Run unit tests\n        run: ./mvnw test\n```\nPlease note that the `.` in the first step is a placeholder and should be replaced with the actual command you intend to use. For example, if you want to build the project, the step could be:\n\n```yaml\n      - name: Build with Maven\n        run: ./mvnw clean install\n```\n\nMake sure to adjust the steps according to your project's specific needs.", "answer": "```yaml # Run mvn test to ensure all tests pass\n\nname: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up JDK 1.8\n      uses: actions/setup-java@v3\n      with:\n        java-version: 8\n        distribution: zulu\n    - name: Run unit tests\n      run: mvn test\n```"}
{"id": "63c49b06517fc08c1eeedd30", "level": "level3", "llm_response": " ```yaml\nname: CLA Assistant\non:\n  issues:\n    types: [opened, edited, milestoned, reopened, labeled, unlabeled, locked, unlocked]\n  pull_request:\n    types: [opened, synchronize, reopened, edited, labeled, unlabeled, ready_for_review]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: sign-or-recheck\n        uses: actions-ecosystem/action-regex-match@v2\n        with:\n          regex: '^CLASSISTANT'\n          secrets:\n            - GITHUB_TOKEN\n            - CLA_SIGN_TOKEN\n      - name: CLA Assistant\n        uses: cla-assistant/github-action@v2.1.1-beta\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          cla_sign_token: ${{ secrets.CLA_SIGN_TOKEN }}\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  # issue_comment triggers this action on each comment on issues and pull requests\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-regex-match@v2\n        id: sign-or-recheck\n        with:\n          text: ${{ github.event.comment.body }}\n          regex: '\\s*(I have read the CLA Document and I hereby sign the CLA)|(recheckcla)\\s*'\n      \n      - name: \"CLA Assistant\"\n        if: ${{ steps.sign-or-recheck.outputs.match != '' || github.event_name == 'pull_request_target' }}\n        # Alpha Release\n        uses: cla-assistant/github-action@v2.1.1-beta\n        env:\n          # Generated and maintained by github\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # JFrog organization secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.CLA_SIGN_TOKEN }}\n        with:\n          path-to-signatures: 'signed_clas.json'\n          path-to-document: 'https://jfrog.com/cla/'\n          remote-organization-name: 'jfrog'\n          remote-repository-name: 'jfrog-signed-clas'\n          # branch should not be protected\n          branch: 'master'\n          allowlist: bot*\n```"}
{"id": "63c49c9233b087f6bde53b34", "level": "level3", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rewritten, labeled, unlabeled, assigned, locked, unlocked]\n\njobs:\n  validate_pr_title:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install TypeScript\n        run: npm install -g typescript\n\n      - name: Install linters\n        run: npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n      - name: Run linter on PR title\n        run: npx eslint --ext .tsx,.ts --fix .github/workflows/lint-pr.eslintrc.json\n\n      - name: Validate PR title\n        run: |\n          if [[ -z \"${{ github.event.pull_request.title }}\" ]]; then\n            echo \"PR title is empty\"\n            exit 1\n          fi\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\nIn this YAML file, we define a GitHub Actions workflow named `Lint PR` that triggers on pull request events. The workflow has a single job called `validate_pr_title`, which runs on the latest Ubuntu runner. The job includes steps to checkout the repository, set up Node.js, install TypeScript and linters, run a linter on the PR title, and validate that the PR title is not empty. The `GITHUB_TOKEN` secret is used to authenticate with GitHub API calls.", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            cleanup\n            docs\n            chore\n          # Configure which scopes are allowed.\n          scopes: |\n            admin\n            store\n            theme\n            server\n          # Configure that a scope must always be provided.\n          requireScope: false\n```"}
{"id": "63c49b9f1e3364807579baef", "level": "level3", "llm_response": " ```yaml\nname: Release Management\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache Object Files\n        uses: actions/cache@v3\n        with:\n          path: |\n            path/to/object/files\n            path/to/dependency/cache\n          key: ${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}\n\n      - name: Build\n        run: |\n          docker pull ghcr.io/su2code/su2/build-su2-cross:220716-1459\n          docker run --rm -v ${{ github.workspace }}:/workspace ghcr.io/su2code/su2/build-su2-cross:220716-1459 /workspace/build_su2.sh\n\n      - name: Create Archive\n        run: |\n          tar -czvf build_su2.tar.gz path/to/build/output\n\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v3\n        with:\n          name: build_su2\n          path: build_su2.tar.gz\n\n      - name: Update Release\n        id: update_release\n        uses: talbring/jenkins-release-drafter@v5.2.0-jenkins-11\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          release_name: ${{ steps.update_release.outputs.tagname }}\n          prerelease: false\n          draft: true\n          description: 'Automatic release created by GitHub Actions'\n\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.uploadurl }}\n          asset_path: build_su2.tar.gz\n          asset_name: build_su2.tar.gz\n          asset_content_type: application/gzip\n```\nThis YAML file defines a GitHub Actions workflow named `Release Management` that is triggered on push events to the `develop` branch. It includes a job named `build_and_upload` with six steps, including caching object files, building the project, creating an archive, uploading binaries, updating a GitHub release, and uploading the release asset. The workflow uses specific GitHub Actions and Docker images for building and archiving the project, and it utilizes GitHub secrets for authentication.", "answer": "```yaml name: Release Management\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    name: Build SU2\n    strategy:\n      fail-fast: false\n      matrix:\n        os_bin: [macos64, macos64-mpi, linux64, linux64-mpi, win64, win64-mpi]\n        include:\n          - os_bin: win64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_windows'\n          - os_bin: win64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_windows_mpi'\n          - os_bin: macos64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_darwin'\n          - os_bin: macos64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_darwin_mpi'\n          - os_bin: linux64\n            flags: '-Dwith-mpi=disabled -Dstatic-cgns-deps=true --cross-file=/hostfiles/hostfile_linux'\n          - os_bin: linux64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_linux_mpi'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache Object Files\n        uses: actions/cache@v3\n        with:\n          path: ccache\n          key: ${{ matrix.os_bin }}-${{ github.sha }}\n          restore-keys: ${{ matrix.os_bin }}\n      - name: Build\n        uses: docker://ghcr.io/su2code/su2/build-su2-cross:220716-1459\n        with:\n          args: -b ${{ github.sha }} -f \"${{matrix.flags}}\"\n      - name: Create Archive\n        run: |\n          cd install\n          zip -r ../${{matrix.os_bin}}.zip bin/*\n        # Uploads binaries as artifacts (just as a backup)\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{matrix.os_bin}}\n          path: ${{matrix.os_bin}}.zip\n        # Update the release notes of latest draft release\n      - uses: talbring/jenkins-release-drafter@v5.2.0-jenkins-11\n        name: Update Release\n        id: update_release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Upload binaries as assets to draft release\n      - name: Upload Release Asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.uploadurl }}\n          asset_path: ${{matrix.os_bin}}.zip\n          asset_name: SU2-${{ steps.update_release.outputs.tagname }}-${{matrix.os_bin}}.zip\n          asset_content_type: application/zip\n          \n```"}
{"id": "63c49c0e1e3364807579e6b2", "level": "level3", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n          extensions: mbstring\n\n      - name: Run Script\n        run: ./path/to/your/script.php\n```\n\nPlease note that you should replace `./path/to/your/script.php` with the actual path to the PHP script you want to run. Additionally, you can adjust the `php-version` and `extensions` parameters according to your project's requirements.", "answer": "```yaml name: Lint\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.0'\n\n    - name: Run Script\n      run: |\n        composer global require phpstan/phpstan\n        for dir in $(find * -type d -name src -not -path 'appengine/*' -not -path '*/vendor/*' -exec dirname {} \\;);\n        do\n          composer install --working-dir=$dir --ignore-platform-reqs\n          echo \"<?php require_once 'testing/sample_helpers.php';require_once '$dir/vendor/autoload.php';\" > autoload.php\n          ~/.composer/vendor/bin/phpstan analyse $dir/src --autoload-file=autoload.php\n        done\n```"}
{"id": "63c49df7cbc73931bb1aa759", "level": "level3", "llm_response": " ```yaml\nname: Pull Request Labeler\non:\n  schedule:\n    - cron: '*/5 * * * *'\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Label Pull Requests\n        uses: fjeremic/cron-labeler@0.3.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  schedule:\n  - cron: \"*/5 * * * *\"\n\njobs:\n  triage:\n    if: github.repository == 'eclipse/omr'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: fjeremic/cron-labeler@0.3.0\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c497e71e33648075784188", "level": "level3", "llm_response": " ```yaml\nname: PR Labeling\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, ready_for_review]\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n    - name: Cancel lgtm\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        # Example command to cancel LGTM using the provided variables\n        # Replace with actual command to interact with the repository\n        echo \"Canceling LGTM for PR number ${{ github.event.pull_request.number }}\"\n        # Here you would include the logic to interact with the repository using the variables\n```\n\nPlease note that the actual command to cancel LGTM (or perform any other action) is not provided and should be replaced with the appropriate logic using the `GITHUB_TOKEN` and other variables. The `secrets.GITHUB_TOKEN` is used here instead of `secrets.CLUSTERPEDIA_BOT_TOKEN` as it is the default token provided by GitHub for automation workflows. If you need to use a specific bot token, you should add it to the repository secrets and reference it as `secrets.CLUSTERPEDIA_BOT_TOKEN`.", "answer": "```yaml name: 'PR Labeling'\n\non:\n  pull_request_target:\n    types: [synchronize]\n\npermissions:\n  pull-requests: write\n\nenv:\n  GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel lgtm\n        run: |\n          gh pr -R ${{ github.repository }} edit ${{ github.event.pull_request.number }} --remove-label \"lgtm\"\n```"}
{"id": "63c49dc9cbc73931bb1a9737", "level": "level3", "llm_response": " ```yaml\nname: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 19 * * *'\n\njobs:\n  forward-algo-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Build GAE and coordinator\n        run: |\n          # Commands to build GAE and coordinator\n\n      - name: Run Forward algorithms test\n        run: |\n          # Commands to run the forward algorithms test\n\n      - name: Upload Coverage\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: ./coverage/lcov.info\n```", "answer": "```yaml name: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    # The notifications for scheduled workflows are sent to the user who\n    # last modified the cron syntax in the workflow file.\n    # Trigger the workflow at 03:00(CST) every day.\n    - cron:  '00 19 * * *'\n\njobs:\n  forward-algo-test:\n    if: ${{ github.ref == 'refs/heads/main' && github.repository == 'alibaba/GraphScope' }}\n    runs-on: ubuntu-20.04\n    defaults:\n      run:\n        shell: bash --noprofile --norc -eo pipefail {0}\n    container:\n      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.9.0\n      options:\n        --shm-size 4096m\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build GAE and coordinator\n      run: |\n        pushd ${GITHUB_WORKSPACE}\n        make gae ENABLE_JAVA_SDK=OFF BUILD_TEST=OFF NUMPROC=1\n        # also make coordinator and client for python test\n        make coordinator && make client\n        popd\n\n    - name: Run Forward algorithms test\n      env:\n        DEPLOYMENT: 'standalone'\n      run: |\n        cd ${GITHUB_WORKSPACE}/python\n        python3 -m pytest --cov=graphscope --cov-config=.coveragerc --cov-report=xml \\\n          --cov-report=term -s -v -m \"not slow\" graphscope/nx/algorithms/tests/forward\n\n    - name: Upload Coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./python/coverage.xml\n        fail_ci_if_error: true\n```"}
{"id": "63c49e7d1e336480757add5b", "level": "level3", "llm_response": " ```yaml\nname: generate-tag\n\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          java-version: '17'\n          server-id: github-actions\n      - name: Gradle build\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          args: clean build\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\n  generate-tag:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          java-version: '17'\n          server-id: github-actions\n      - name: Generate Tag\n        run: ./gradlew generate-tag --args=\"--stage=${{ github.event.inputs.stage }} --scope=${{ github.event.inputs.scope }}\"\n      - name: Push\n        run: ./gradlew push --args=\"--stage=${{ github.event.inputs.stage }} --scope=${{ github.event.inputs.scope }}\"\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\nenv:\n  TOKEN_GITHUB_ACTION: ${{ secrets.TOKEN_GITHUB_ACTION }}\n```\nNote: The `generate-tag` job assumes there is a Gradle task named `generate-tag` that accepts arguments for stage and scope. Adjust the Gradle task name and arguments as necessary for your project. The `env` section is used to define the `TOKEN_GITHUB_ACTION` secret which should be set in your repository's settings.", "answer": "```yaml name: generate-tag\n\non:\n  workflow_dispatch:\n    branches: [main]\n    inputs:\n      stage:\n        description: 'Stage'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'alpha'\n          - 'beta'\n          - 'rc'\n          - 'final'\n          - 'auto'\n      scope:\n        description: 'Scope'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'minor'\n          - 'major'\n          - 'auto'\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Gradle build\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace build \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\n  generate-tag:\n    runs-on: ubuntu-latest\n\n    needs:\n      - build\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.TOKEN_GITHUB_ACTION }}\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Generate Tag\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace createSemverTag \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Push\n        run: git push --follow-tags\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n```"}
{"id": "63c49da4517fc08c1eefe37e", "level": "level3", "llm_response": " ```yaml\nname: e2e test all\n\non: pull_request\n\njobs:\n  e2e:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.16'\n\n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/go/src\n          key: ${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}\n\n      - name: Generate\n        run: go generate ./...\n\n      - name: Deps\n        run: go mod vendor\n\n      - name: Test\n        run: go test ./...\n```", "answer": "```yaml name: e2e test all\non: pull_request\nenv:\n  PRISMA_TELEMETRY_INFORMATION: \"prisma-client-go e2e-test.yml\"\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.19'\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/.cache\n          restore-keys: ${{ runner.os }}-go-\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n\n      - name: deps\n        run: go mod download\n\n      - name: generate\n        run: |\n          cd test/e2e/\n          go generate -tags e2e ./...\n        # env:\n        #   DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n\n      - name: test\n        run: |\n          cd test/e2e/\n          go test ./... -run '^TestE2E.*$' -tags e2e -v\n        env:\n          # DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n          PRISMA_CLIENT_GO_LOG: info\n```"}
{"id": "63c49e501842bc13d778ff97", "level": "level3", "llm_response": " ```yaml\nname: Linter\n\non:\n  push:\n    branches: [ main ]\n    tags: [ 'v*' ]\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v3.1.0\n\n      - name: Run Golint\n        uses: reviewdog/action-golangci-lint@v2\n        with:\n          version-file: '.version'\n```", "answer": "```yaml on: [push, pull_request]\nname: Linter\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v3.1.0\n      - name: Run Golint\n        uses: reviewdog/action-golangci-lint@v2\n        with:\n          golangci_lint_flags: \"--tests=false\"\n```"}
{"id": "63c498d31899db58864e2905", "level": "level3", "llm_response": " ```yaml\nname: TOC Generator\non:\n  push:\n    paths:\n      - '**/ReadMe.md'\n\njobs:\n  generateTOC:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2.4.0\n\n      - name: Install TOC Generator\n        run: dotnet tool install -g technote-space/toc-generator\n\n      - name: Generate Table of Contents\n        run: technote-space/toc-generator --input ${{ github.workspace }}/ReadMe.md --output ${{ github.workspace }}/README.md\n```", "answer": "```yaml name: TOC Generator\n\non:\n  push:\n    paths:\n      - 'ReadMe.md'\n\njobs:\n  generateTOC:\n    name: TOC Generator\n    runs-on: ubuntu-latest\n    steps:\n      - uses: technote-space/toc-generator@v2.4.0\n        with:\n          TOC_TITLE: \"## Table of Contents\"\n```"}
{"id": "63c498e96fc19abdf9cac426", "level": "level3", "llm_response": " ```yaml\nname: Update Python Dependencies\non:\n  workflow_dispatch:\n\njobs:\n  update_python_dependencies:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      \n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      \n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      \n      - name: Run tests\n        run: |\n          python -m unittest discover\n```\n\nThis YAML file defines a GitHub Actions workflow named `Update Python Dependencies` that is triggered manually by the user. It includes a single job called `update_python_dependencies` which runs on the latest Ubuntu runner. The job includes steps to checkout the repository, set up Python, install dependencies from a `requirements.txt` file, and run Python unit tests.\n\nPlease note that the provided reusable workflow snippet `SFDO-Tooling/.github/.github/workflows/update_python_dependencies.yml` is not used in this YAML file. Instead, the workflow is defined from scratch, as the provided snippet does not contain YAML content. If you have a specific YAML file you want to include, please provide the content so it can be incorporated into the workflow definition.", "answer": "```yaml name: Update Python Dependencies\n\non:\n    workflow_dispatch:\n\njobs:\n    update_python_dependencies:\n        uses: SFDO-Tooling/.github/.github/workflows/update_python_dependencies.yml@main\n        with:\n            python-version: 3.8\n```"}
{"id": "63c499601899db58864e6352", "level": "level3", "llm_response": " ```yaml\nname: Issue Closer\non:\n  issues:\n    types: [opened, reopened]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        uses: peter-evans/close-issue@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          state: closed\n```", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Issue Closer\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  issues:\n    types: [ opened, reopened ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: Close Issue\n        uses: peter-evans/close-issue@v1.0.1\n        with:\n          comment: |\n           **Use [Discuss Issues](https://discuss.dgraph.io/c/issues/35/clients/46) for reporting issues about this repository.**\n```"}
{"id": "63c496dccbc73931bb17caa5", "level": "level3", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n\n      - name: Run pre-commit hooks\n        uses: pre-commit/action@v3.0.0\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v3\n    - uses: pre-commit/action@v3.0.0\n```"}
{"id": "63c49e4f736e7f0ed8c67231", "level": "level3", "llm_response": " ```yaml\nname: CMake\n\non:\n  push:\n    branches:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Windows: Configure environment\n        run: |\n          echo \"Setting up Windows environment...\"\n\n      - name: Linux: Install dependency libraries\n        run: |\n          echo \"Installing dependency libraries on Linux...\"\n\n      - name: Configure CMake\n        run: |\n          echo \"Configuring CMake...\"\n\n      - name: Build\n        run: |\n          echo \"Building the project...\"\n\n      - name: Test\n        run: |\n          echo \"Running tests...\"\n\n      - name: Archive\n        run: |\n          echo \"Archiving the build artifacts...\"\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Create plugin archive\n        run: |\n          echo \"Creating plugin archive...\"\n\n      - name: Upload binaries to release\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          filename: 'path/to/artifacts'\n          tag_name: ${{ github.ref }}\n          draft: true\n          prerelease: false\n```\nNote: Replace `'path/to/artifacts'` with the actual path to the build artifacts you want to upload. Also, ensure that the `env.BUILD_TYPE` and other variables are used according to your specific needs.", "answer": "```yaml name: CMake\n\non:\n  push:\n    branches: [ \"*\" ]\n  pull_request:\n    branches: [ \"*\" ]\n  release:\n    type: [created, edited]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macos-latest\n\n    runs-on: ${{matrix.os}}\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Windows: Configure environment\"\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        # Select MinGW toolchain instead of the default MSVC.\n        echo \"CMAKE_GENERATOR=MinGW Makefiles\" >> $GITHUB_ENV\n\n    - name: \"Linux: Install dependency libraries\"\n      if: runner.os == 'Linux'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y --no-install-recommends freeglut3-dev libudev-dev libopenal-dev\n\n    - name: Configure CMake\n      working-directory: ${{github.workspace}}/src\n      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      working-directory: ${{github.workspace}}/src\n      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}\n\n    - name: Test\n      working-directory: ${{github.workspace}}/build\n      run: ctest -C ${{env.BUILD_TYPE}}\n      \n    - uses: actions/upload-artifact@v2\n      with:\n        name: binaries\n        path: ${{github.workspace}}/build/*.xpl\n        if-no-files-found: error\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: binaries\n          path: FlyWithLua/64\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: FlyWithLua_plugin\n          path: |\n            ${{github.workspace}}/FlyWithLua*\n          if-no-files-found: error\n\n      - name: Create plugin archive\n        if: github.event_name == 'release'\n        run: zip -r FlyWithLua_NG_Lin_Mac_Win.zip FlyWithLua/\n\n      - name: Upload binaries to release\n        if: github.event_name == 'release'\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: FlyWithLua_NG_Lin_Mac_Win.zip\n          tag: ${{ github.ref }}\n          overwrite: true\n```"}
{"id": "63c49cd8b008460c1df3d38d", "level": "level3", "llm_response": " ```yaml\nname: GraalVM CE CI\n\non:\n  push:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        graalvm: ['11.0.1', '12.0.0-dev']\n        java: ['11', '15']\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Free disk space\n      run: |\n        # Add commands to check disk space\n\n    - name: Setup JDK\n      uses: actions/setup-java@v1\n      with:\n        java-version: ${{ matrix.java }}\n\n    - name: Cache Gradle\n      uses: actions/cache@v3\n      with:\n        path: ~/.gradle/caches\n        key: ${{ runner.os }}-${{ hashFiles('**/build.gradle') }}\n\n    - name: Setup GraalVM CE\n      uses: graalvm/setup-graalvm@v1\n      with:\n        version: ${{ matrix.graalvm }}\n\n    - name: Build with Gradle\n      run: ./gradlew build\n      env:\n        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}\n        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}\n\n    - name: Publish Test Report\n      uses: mikepenz/action-junit-report@v3.5.2\n      with:\n        fail-on-error: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}\n```\nPlease note that you should replace the placeholder comments with actual commands or scripts as needed for the `Free disk space` step and adjust the Gradle commands if necessary for your project's specific setup. Also, ensure that the secrets are correctly set up in your GitHub repository's settings.", "answer": "```yaml # WARNING: Do not edit this file directly. Instead, go to:\n#\n# https://github.com/micronaut-projects/micronaut-project-template/tree/master/.github/workflows\n#\n# and edit them there. Note that it will be sync'ed to all the Micronaut repos\nname: GraalVM CE CI\non:\n  push:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\njobs:\n  build:\n    if: github.repository != 'micronaut-projects/micronaut-project-template'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: ['17']\n        graalvm: ['latest', 'dev']\n    steps:\n       # https://github.com/actions/virtual-environments/issues/709\n      - name: Free disk space\n        run: |\n         sudo rm -rf \"/usr/local/share/boost\"\n         sudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\n         sudo apt-get clean\n         df -h\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n      - name: Setup GraalVM CE\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: ${{ matrix.graalvm }}\n          java-version: ${{ matrix.java }}\n          components: 'native-image'\n      - name: Build with Gradle\n        run: |\n          if ./gradlew tasks --no-daemon --all | grep -w \"testNativeImage\"\n          then\n            ./gradlew check testNativeImage --continue --no-daemon\n          else\n            ./gradlew check --continue --no-daemon\n          fi\n        env:\n           TESTCONTAINERS_RYUK_DISABLED: true\n           GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n           GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}\n           GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}\n           PREDICTIVE_TEST_SELECTION: \"${{ github.event_name == 'pull_request' && 'true' || 'false' }}\"\n      - name: Publish Test Report\n        if: always()\n        uses: mikepenz/action-junit-report@v3.5.2\n        with:\n          check_name: GraalVM CE CI / Test Report (Java ${{ matrix.java }})\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          check_retries: 'true'\n```"}
{"id": "63c49fbe1e336480757b5ce4", "level": "level3", "llm_response": " ```yaml\nname: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n\n      - name: \ud83d\udce5 Monorepo install\n        run: yarn-nm-install\n\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        uses: changesets/action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    # Basic security: the release job can only be executed from this repo and from the main branch (not a remote thing)\n    if: ${{ github.repository == 'belgattitude/nextjs-monorepo-example' && contains('refs/heads/main',github.ref)}}\n    name: Release and changelog\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # To run comparison we need more than the latest commit.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: \ud83d\udce5 Monorepo install\n        uses: ./.github/actions/yarn-nm-install\n\n      # @link https://github.com/changesets/action\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        uses: changesets/action@v1\n        with:\n          # publish: yarn g:release\n          cwd: ${{ github.workspace }}\n          title: '[Release] Version packages'\n          # Optional, might be used in conjunction with GITHUB_TOKEN to\n          # allow running the workflows on a Version package action.\n          # Be aware of security implications.\n          # setupGitUser: true\n        env:\n          # See https://github.com/changesets/action/issues/147\n          HOME: ${{ github.workspace }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Uncomment and add secrets to allow publishing\n          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49bb533b087f6bde4ddd4", "level": "level3", "llm_response": " ```yaml\nname: Pull Request Labeler\non: pull_request\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Label Pull Request\n        uses: DataDog/labeler@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```\nPlease note that you should replace `Label Pull Request` with the actual step name you intend to use for labeling the pull request. The `glob-all` version of the `DataDog/labeler` action is referenced here, and it uses the `GITHUB_TOKEN` secret to authenticate with GitHub.", "answer": "```yaml name: 'Pull Request Labeler'\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: DataDog/labeler@glob-all\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n```"}
{"id": "63c4972e1899db58864d7e70", "level": "level3", "llm_response": " ```yaml\nname: Dependabot auto-merge\n\non: [pull_request]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    steps:\n      - name: Dependabot metadata\n        uses: dependabot/fetch-metadata@v1.1.0\n        id: metadata\n\n      - name: Enable auto-merge for Dependabot PRs\n        run: |\n          echo \"Setting auto-merge for Dependabot PRs\"\n          # Additional commands to enable auto-merge for Dependabot PRs\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.0\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49da46fc19abdf9cca9c1", "level": "level3", "llm_response": " ```yaml\nname: build\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Cache Go\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/go/src\n            $GOPATH\n          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}\n      - name: Cache Envoy binaries\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/envoy/bin\n            ~/envoy/config\n          key: ${{ runner.os }}-${{ hashFiles('**/envoy.yaml') }}\n      - name: Verify clean check-in\n        run: |\n          # Add commands to verify a clean check-in\n      - name: Run unit tests\n        run: go test ./...\n      - name: Build the func-e binary\n        run: go build -o func-e\n      - name: Run e2e tests using the func-e binary\n        run: ./func-e\n      - name: Run e2e tests using the func-e binary (CentOS)\n        run: ./func-e --target centos\n      - name: Generate coverage report\n        run: go tool cover -html=coverage.out -o coverage.html\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v2\n        with:\n          file: coverage.out\n          fail_ci_if_error: true\n```", "answer": "```yaml # `name` value will appear \"as is\" in the badge.\n# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository\n# yamllint --format github .github/workflows/commit.yaml\n---\nname: \"build\"\n\non:\n  push:  # We run tests on non-tagged pushes to master\n    tags: ''\n    branches: master\n    # ignore docs as they are built with Netlify. Ignore travis-related changes, too.\n    # func-e.wxs is used for the Windows Installer, so tested with msi.yaml\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:  # We also run tests on pull requests targeted at the master branch.\n    branches: master\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.\n  # For example, you can try to build a branch without raising a pull request.\n  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow\n  workflow_dispatch:\n\ndefaults:\n  run:  # use bash for all operating systems unless overridden\n    shell: bash\n\njobs:\n  test:\n    name: \"Run unit tests (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 90  # instead of 360 by default\n    strategy:\n      fail-fast: false  # don't fail fast as sometimes failures are operating system specific\n      matrix:  # use latest available versions and be consistent on all workflows!\n        os: [ubuntu-20.04, macos-12, windows-2022]\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: \"Cache Go\"\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          # go.mod for go release version, go.sum for modules used, and Tools.mk for 'go run' tools\n          key: test-${{ runner.os }}-go-${{ hashFiles('go.mod', 'go.sum', 'Tools.mk') }}\n          restore-keys: test-${{ runner.os }}-go-\n\n      - name: \"Cache Envoy binaries\"\n        uses: actions/cache@v3\n        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall\n          path: ~/.func-e/versions\n          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}\n          restore-keys: test-${{ runner.os }}-envoy-\n\n      - name: \"Verify clean check-in\"\n        run: make check\n\n      - name: \"Run unit tests\"\n        run: make test\n\n      - name: \"Build the `func-e` binary\"\n        run: make build\n\n      - name: \"Run e2e tests using the `func-e` binary\"\n        run: make e2e\n\n      - name: \"Run e2e tests using the `func-e` binary (CentOS)\"\n        if: runner.os == 'Linux'\n        run: docker run --rm -v $HOME/.func-e:$HOME/.func-e -v $PWD:/work ${CENTOS_IMAGE} -o ${E2E_FUNC_E_PATH}/func-e e2e\n        env:  # CENTOS_IMAGE was built by internal-images.yaml; E2E_FUNC_E_PATH was built via `make build`\n          CENTOS_IMAGE: ghcr.io/tetratelabs/func-e-internal:centos-8\n          E2E_FUNC_E_PATH: build/func-e_linux_amd64\n\n      - name: \"Generate coverage report\"  # only once (not per OS)\n        if: runner.os == 'Linux'\n        run: make coverage\n\n      - name: \"Upload coverage report\"  # only on master push and only once (not per OS)\n        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'\n        uses: codecov/codecov-action@v2\n        with:\n          file: ./coverage.txt\n```"}
{"id": "63c4a0b91842bc13d779f860", "level": "level3", "llm_response": " ```yaml\nname: update-flake\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 7 * * 2'\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n\n      - name: Generate token\n        id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          private_key: ${{ secrets.STEWARD_PRIVATE_KEY }}\n```", "answer": "```yaml name: update-flake\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '45 7 * * 2' # runs weekly on Tuesday at 07:45\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: tibdex/github-app-token@v1\n        id: generate-token\n        with:\n          app_id: 207529\n          private_key: ${{ secrets.STEWARD_PRIVATE_KEY }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          branch: update/flake-lock-${{ github.run_number }}\n```"}
{"id": "63c4a13633b087f6bde7145d", "level": "level3", "llm_response": " ```yaml\nname: Master - CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1.x, 1.6, 1.5]\n        os: [ubuntu-latest, windows-latest]\n    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Julia environment\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n          arch: ${{ matrix.julia-arch }}\n\n      - name: Build Julia package\n        uses: julia-actions/julia-buildpkg@latest\n\n      - name: Run Julia tests\n        uses: julia-actions/julia-runtest@latest\n\n      - name: Generate code coverage report\n        uses: julia-actions/julia-processcoverage@v1\n\n      - name: Upload code coverage report\n        uses: codecov/codecov-action@v1\n        with:\n          name: ${{ github.repository }}\n          file: ./target/coverage/lcov.info\n          fail_ci_if_error: true\n          flags: json\n          token: ${{ secrets.CODECOV_TOKEN }}\n```", "answer": "```yaml name: Master - CI\n\non:\n  push:\n    branches:\n      - master\n    schedule:\n      - cron: 0 * * * *\njobs:\n  test:\n    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: ['1', 'nightly']\n        julia-arch: [x64]\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        continue-on-error: true\n        with:\n          version: ${{ matrix.julia-version }}\n          arch: ${{ matrix.julia-arch }}\n      - uses: julia-actions/julia-buildpkg@latest\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-runtest@latest\n        continue-on-error: ${{ matrix.julia-version == 'nightly' }}\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v1\n        with:\n          file: ./lcov.info\n          flags: unittests\n          name: codecov-umbrella\n          fail_ci_if_error: false\n          token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"id": "63c4a057517fc08c1ef0f4c2", "level": "level3", "llm_response": " ```yaml\nname: Autocloser\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Issue auto-closer\n        uses: roots/issue-closer-action@v1.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Autocloser\non: [issues]\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Issue auto-closer\n      uses: roots/issue-closer-action@v1.1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-close-message: \"@${issue.user.login} this issue was automatically closed because it did not follow the bellow rules:\\n\\n<pre>\\n\\n\\n\\nIMPORTANT: Please use the following link to create a new issue:\\n\\nhttps://www.creative-tim.com/new-issue/argon-dashboard\\n\\n**If your issue was not created using the app above, it will be closed immediately.**\\n\\n\\n\\nLove Creative Tim? Do you need Angular, React, Vuejs or HTML? You can visit:\\n\ud83d\udc49  https://www.creative-tim.com/bundles\\n\ud83d\udc49  https://www.creative-tim.com\\n\\n\\n</pre>\\n\\n\"\n        issue-pattern: (\\#\\#\\# Version([\\S\\s.*]*?)\\#\\#\\# Reproduction link([\\S\\s.*]*?)\\#\\#\\# Operating System([\\S\\s.*]*?)\\#\\#\\# Device([\\S\\s.*]*?)\\#\\#\\# Browser & Version([\\S\\s.*]*?)\\#\\#\\# Steps to reproduce([\\S\\s.*]*?)\\#\\#\\# What is expected([\\S\\s.*]*?)\\#\\#\\# What is actually happening([\\S\\s.*]*?)---([\\S\\s.*]*?)\\#\\#\\# Solution([\\S\\s.*]*?)\\#\\#\\# Additional comments([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)|(\\#\\#\\# What is your enhancement([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)\n```"}
{"id": "63c496fd33b087f6bde2f9ec", "level": "level3", "llm_response": " ```yaml\nname: Label Pull Requests\non: pull_request\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add Labels for PR\n        uses: actions/labeler@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          label-pattern: \"[label-pattern]\" # Replace with actual label pattern\n\n      - name: Add PR Size Labels for PR\n        uses: codelytv/pr-size-labeler@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          label-pattern: \"[size-label-pattern]\" # Replace with actual size label pattern\n```\n\nPlease replace `[label-pattern]` and `[size-label-pattern]` with the actual label patterns you intend to use for labeling pull requests. The `secrets.GITHUB_TOKEN` is used for authentication with GitHub's API.", "answer": "```yaml name: Label Pull Requests\n\non:\n- pull_request_target\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Add Labels for PR\n      uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/labeler.yaml\n        sync-labels: true\n\n    - name: Add PR Size Labels for PR\n      uses: codelytv/pr-size-labeler@v1\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        xs_label: 'size/XS'\n        xs_max_size: '20'\n        s_label: 'size/S'\n        s_max_size: '50'\n        m_label: 'size/M'\n        m_max_size: '150'\n        l_label: 'size/L'\n        l_max_size: '300'\n        xl_label: 'size/XL'\n        fail_if_xl: 'false'\n        message_if_xl: >\n          'This PR has too many changes.\n          Please make sure you are NOT addressing multiple issues with one PR.'\n```"}
{"id": "63c49b4e33b087f6bde4b436", "level": "level3", "llm_response": " ```yaml\nname: deploy armeria\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths:\n      - 'build-bin/**'\n      - 'docker/**'\n      - 'armeria/**'\n      - '.github/workflows/deploy-armeria.yaml'\n      - 'parent-pom.xml'\n\njobs:\n  deploy:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n\n      - name: Deploy armeria\n        run: |\n          mvn deploy -DskipTests\n          echo \"Armeria deployed successfully!\"\n        env:\n          GH_USER: ${{ secrets.GH_USER }}\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n```", "answer": "```yaml # yamllint --format github .github/workflows/deploy.yml\n---\nname: deploy armeria\n\non:\n  # We deploy non-tagged pushes to master relevant for this project. We can't opt out of\n  # documentation-only commits because GH actions does not permit paths and paths-ignore.\n  push:\n    tags: ''\n    branches: master\n    paths:\n      - \"build-bin/**\"\n      - \"docker/**\"\n      - \"armeria/**\"\n      - \".github/workflows/deploy-armeria.yaml\"\n      - \"parent-pom.xml\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04  # newest available distribution, aka focal\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 1\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ./m2repository  # Shared with the Docker build context via .dockerignore\n          key: ${{ runner.os }}-armeria-maven-${{ hashFiles('parent-pom.xml', 'armeria/pom.xml') }}\n          restore-keys: ${{ runner.os }}-armeria-maven-\n      # We can't cache Docker without using buildx because GH actions restricts /var/lib/docker\n      # That's ok because DOCKER_PARENT_IMAGE is always ghcr.io and local anyway.\n      - name: Deploy armeria\n        env:\n          # GH_USER=<user that created GH_TOKEN>\n          GH_USER: ${{ secrets.GH_USER }}\n          # GH_TOKEN=<hex token value>\n          #   - pushes Docker images to ghcr.io\n          #   - create via https://github.com/settings/tokens\n          #   - needs repo:status, public_repo, write:packages, delete:packages\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: |\n          build-bin/configure_deploy armeria &&\n          build-bin/deploy armeria\n```"}
{"id": "63c49d9333b087f6bde5a392", "level": "level3", "llm_response": " ```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Enable auto-merge for Dependabot PRs\n        run: |\n          echo \"Enabling auto-merge for Dependabot PRs\"\n          # Additional commands to enable auto-merge can be added here\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49fce1842bc13d779961e", "level": "level3", "llm_response": " ```yaml\nname: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  lint:\n    name: GolangCI Lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Run linter\n        run: go vet ./...\n\n  tests:\n    name: Run unit tests with the race detector enabled\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install GCC and C libraries required by the race detector\n        run: sudo apt-get update && sudo apt-get install -y gcc libc6-dev\n      - name: Run unit tests\n        run: go test -race ./...\n```", "answer": "```yaml name: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  lint:\n    name: GolangCI Lint\n    runs-on: ubuntu-latest\n    container: golangci/golangci-lint:v1.50-alpine\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Run linter\n      run: golangci-lint run\n\n  tests:\n    name: Run unit tests with the race detector enabled\n    runs-on: ubuntu-latest\n    container: golang:1.19-alpine\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 1\n\n      - name: Install GCC and C libraries required by the race detector\n        run: apk add --update gcc musl-dev\n\n      - name: Run unit tests\n        run: go test -v -race ./...\n```"}
{"id": "63c4a0e633b087f6bde6f51f", "level": "level3", "llm_response": " ```yaml\nname: Sync master to preview\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1.3.0\n        with:\n          ref: ${{ github.ref }}\n\n      - name: Merge master -> preview\n        uses: devmasx/merge-branch@v1.3.0\n        with:\n          source-branch: master\n          target-branch: preview\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Sync master to preview\n\n# When there's a push on master, we want to reflect it on preview too.\non:\n  push:\n    branches:\n      - 'master'\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n\n      - name: Merge master -> preview\n        uses: devmasx/merge-branch@v1.3.0\n        with:\n          type: now\n          head_to_merge: ${{ github.ref }}\n          from_branch: master\n          target_branch: preview\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a05b33b087f6bde6c178", "level": "level3", "llm_response": " ```yaml\nname: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Use Node.js 16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n\n  release:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Git repository\n        uses: actions/checkout@v3\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: npm\n      - name: Build & Release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish: true\n```\nPlease note that the specific commands for `npm install` and `npm test` in the `test` job, as well as the exact configuration for the `action-electron-builder` step, should be adjusted according to your project's needs. The `GITHUB_TOKEN` secret is automatically available in the context of GitHub Actions for authenticating API requests.", "answer": "```yaml name: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v3\n        - name: Use Node.js 16\n          uses: actions/setup-node@v3\n          with:\n            node-version: 16\n        - run: yarn\n        - run: yarn test --detectOpenHandles --forceExit\n\n  release:\n    needs: test\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Build & Release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          github_token: ${{ secrets.github_token }}\n          release: true\n```"}
{"id": "63c496561899db58864d23d8", "level": "level3", "llm_response": " ```yaml\nname: Molecule - Prometheus\non:\n  pull_request:\n    paths:\n      - '.github/workflows/molecule.prometheus.yml'\n      - '.config/molecule/config.yml'\n      - 'molecule/Dockerfile.*'\n      - 'molecule/prometheus/**'\n      - 'roles/prometheus/**'\n      - 'plugins/filter/prometheus_architecture.py'\n      - 'plugins/filter/yaml.py'\n  workflow_dispatch:\n\njobs:\n  prometheus:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        debug: ['false', 'true']\n    inputs:\n      debug-this:\n        description: 'Run with tmate debugging'\n        required: false\n        value: 'false'\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install molecule\n          pip install tmate\n      - name: Run Molecule\n        env:\n          MOLD_CONFIG: ${{ inputs.debug-this == 'true' ? './molecule/config.yml' : 'default-config.yml' }}\n        run: |\n          molecule test --debug=${{ inputs.debug-this }}\n```", "answer": "```yaml name: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.prometheus.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/prometheus/**\n      - roles/prometheus/**\n      # Plugins\n      - plugins/filter/prometheus_architecture.py\n      - plugins/filter/yaml.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  prometheus:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: prometheus\n```"}
{"id": "63c49d6ecbc73931bb1a706f", "level": "level3", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 24 * * sun'\n\njobs:\n  analyze:\n    permissions:\n      contents: 'read'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [go]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '24 0 * * 0'\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  analyze:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49752cbc73931bb17fa34", "level": "level3", "llm_response": " ```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Version to release'\n        required: false\n      force:\n        description: 'Force a release even when there are release-blockers'\n        required: false\n  schedule:\n    - cron: '0 17 15 * *'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Prepare release\n        uses: getsentry/action-prepare-release@v1\n        env:\n          GH_RELEASE_PAT: ${{ secrets.GH_RELEASE_PAT }}\n        with:\n          version: ${{ github.event.inputs.version || 'latest' }}\n          force: ${{ github.event.inputs.force || 'false' }}\n```", "answer": "```yaml name: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version to release (optional)\n        required: false\n      force:\n        description: Force a release even when there are release-blockers (optional)\n        required: false\n\n  schedule:\n    # We want the release to be at 9-10am Pacific Time\n    # We also want it to be 1 hour before the on-prem release\n    - cron: \"0 17 15 * *\"\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    name: \"Release a new Relay version\"\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GH_RELEASE_PAT }}\n          fetch-depth: 0\n\n      - name: Prepare release\n        uses: getsentry/action-prepare-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}\n        with:\n          version: ${{ github.event.inputs.version }}\n          force: ${{ github.event.inputs.force }}\n          calver: true\n```"}
{"id": "63c49b3c1e33648075799306", "level": "level3", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Create Release Pull Request / NPM Publish\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          # Commands to create a release pull request or publish to NPM\n          # This is a placeholder and should be replaced with actual commands\n          echo \"Creating release pull request or publishing to NPM\"\n```\nNote: The last step is a placeholder where you should insert the actual commands to create a release pull request or publish to NPM. The `env` section is used to pass secrets like `GITHUB_TOKEN` and `NPM_TOKEN` to the step.", "answer": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits\n          fetch-depth: 0\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n      - name: Install Dependencies\n        run: npm i\n\n      - name: Create Release Pull Request / NPM Publish\n        uses: changesets/action@v1\n        with:\n          publish: npm run changeset-publish\n          version: npm run changeset-version\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49e5b517fc08c1ef02da4", "level": "level3", "llm_response": " ```yaml\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    branches:\n      - release-notes-preview-is-not-working\n  issue_comment:\n    created:\n      - '*'\n    types:\n      - edited\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Snyk Release Notes Preview\n        uses: snyk/release-notes-preview@v1.6.2\n        env:\n          SNYK_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # https://github.com/marketplace/actions/release-notes-preview\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    # This workflow is not working for some reason. It is stuck with this message:\n    #  Release Notes Confirmation Pending \u2014 awaiting release notes review\n    #  Keeping the YAML file to check back again in the future\n    branches: [release-notes-preview-is-not-working] # [develop]\n  issue_comment:\n    types: [edited]\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          git fetch --prune --unshallow --tags\n      - uses: snyk/release-notes-preview@v1.6.2\n        with:\n          releaseBranch: develop\n        env:\n          GITHUB_PR_USERNAME: ${{ github.actor }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a621e33648075793e20", "level": "level3", "llm_response": " ```yaml\nname: macOS\non:\n  push:\n    branches:\n      - main\n      - 'issue*'\n      - 'release-*'\n  pull_request:\n    branches:\n      - main\n      - 'issue*'\n      - 'release-*'\n\njobs:\n  Compile and test planner:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    name: Compile and test planner\n    steps:\n      - name: Clone repository\n        run: git clone https://github.com/your-username/your-repo.git\n      - name: Install Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Compile planner\n        run: python compile_planner.py\n      - name: Install tox\n        run: pip install tox\n      - name: Install VAL\n        run: pip install your-val-package\n      - name: Run driver, translator and search tests\n        run: tox\n```\n\nPlease replace `https://github.com/your-username/your-repo.git` with the actual URL of your GitHub repository, and `your-val-package` with the actual package name you wish to install. The `compile_planner.py` script should be the Python script you use to compile your planner.", "answer": "```yaml ---\nname: macOS\n\non:\n  push:\n    branches: [main, issue*, release-*]\n  pull_request:\n    branches: [main, issue*, release-*]\n\njobs:\n  test:\n    name: Compile and test planner\n    timeout-minutes: 60\n    runs-on: ${{ matrix.version.macos }}\n    strategy:\n      matrix:\n        version:\n          - {macos: macos-11, python: '3.8'}\n          - {macos: macos-12, python: '3.10'}\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@master\n\n      - name: Install Python\n        uses: actions/setup-python@master\n        with:\n          python-version: ${{ matrix.version.python }}\n\n      - name: Compile planner\n        run: |\n          export CXXFLAGS=\"-Werror\" # Treat compilation warnings as errors.\n          ./build.py\n          ./build.py --debug\n\n      - name: Install tox\n        run: |\n          pip3 install tox\n\n      - name: Install VAL\n        run: |\n          brew install gnu-sed\n          git clone https://github.com/KCL-Planning/VAL.git\n          cd VAL\n          git checkout a5565396007eee73ac36527fbf904142b3077c74\n          make clean  # Remove old build artifacts and binaries.\n          gsed -i 's/-Werror //g' Makefile  # Ignore warnings.\n          make -j2\n          mv validate ../\n          cd ../\n          rm -rf VAL\n\n      - name: Run driver, translator and search tests\n        run: |\n          export PATH=\"$(pwd):$PATH\" # Add VAL to path.\n          cd misc\n          tox -e driver,translator,search\n\n...\n```"}
{"id": "63c49c571e336480757a03aa", "level": "level3", "llm_response": " ```yaml\nname: Add issues to project\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add issue to project\n        uses: main/actions/add-to-project@v1\n        env:\n          ADD_TO_PROJECT_PAT: ${{ secrets.ADD_TO_PROJECT_PAT }}\n```", "answer": "```yaml name: Add isuses to project\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        with: \n          project-url: https://github.com/orgs/FirelyTeam/projects/6\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}```"}
{"id": "63c499b71842bc13d7772793", "level": "level3", "llm_response": " ```yaml\nname: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        ghc-version: ['8.10', '9.0.1']\n    defaults:\n      run:\n        shell: pwsh\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Haskell\n        uses: ./.github/actions/setup-haskell\n      - name: Setup Node\n        uses: ./.github/actions/setup-node\n      - name: Setup BumpVer\n        uses: ./.github/actions/setup-bumpver\n      - name: Setup HTMLProofer\n        uses: ./.github/actions/setup-htmlproofer\n      - name: Setup EPUBCheck\n        id: setup-epubcheck\n        uses: ./.github/actions/setup-epubcheck\n        with:\n          epubcheck-jar-path: ${{ steps.setup-epubcheck.outputs.epubcheck-jar-path }}\n      - name: Cache build\n        uses: actions/cache@v3\n        with:\n          path: |\n            .stack-work\n            node_modules\n          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}-${{ matrix.ghc-version }}-${{ hashFiles('**/stack.yaml') }}\n      - name: Build\n        run: stack build\n      - name: Test with BumpVer\n        run: stack test --test-arguments=--test-with-bumpver\n      - name: Test with HTML-validate\n        run: stack test --test-arguments=--test-with-html-validate\n      - name: Test with HTMLProofer\n        run: stack test --test-arguments=--test-with-htmlproofer\n      - name: Test with EPUBCheck\n        run: stack test --test-arguments=--test-with-epubcheck\n      - name: Upload latest artifact\n        uses: actions/upload-artifact@v2\n        with:\n          name: artifact\n          path: dist/\n\n  publish:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download latest artifact\n        uses: actions/download-artifact@v2\n        with:\n          name: artifact\n      - name: Publish to GitHub Pages\n        uses: ./.github/workflows/publish.yml\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n\n  release:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download latest artifact\n        uses: actions/download-artifact@v2\n        with:\n          name: artifact\n      - name: Publish to GitHub Releases\n        uses: ./.github/workflows/release.yml\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n```", "answer": "```yaml name: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    types:\n      - opened\n      - synchronize\n\nenv:\n  CABAL_ARGS: \"--project-file=cabal.project.ci\"\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: true\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  build:\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        ghc-version: [\"9.2\"]\n        include:\n          - experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"8.10\"\n            experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"9.0\"\n            experimental: false\n\n    name: Build on ${{ matrix.os }} with GHC-${{ matrix.ghc-version }}\n    runs-on: ${{ matrix.os }}\n    continue-on-error: ${{ matrix.experimental }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: 'true'\n\n      - name: Setup Haskell\n        uses: ./.github/actions/setup-haskell\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n          cabal-project-freeze-file: cabal.project.ci.freeze\n\n      - name: Setup Node\n        uses: ./.github/actions/setup-node\n\n      - name: Setup BumpVer\n        uses: ./.github/actions/setup-bumpver\n        # depends on requirements-dev.txt\n\n      - name: Setup HTMLProofer\n        if: runner.os != 'Windows'\n        uses: ./.github/actions/setup-htmlproofer\n        # depends on Gemfile\n\n      - name: Setup EPUBCheck\n        uses: ./.github/actions/setup-epubcheck\n        id: setup-epubcheck\n        with:\n          epubcheck-version: \"4.2.6\"\n\n      - name: Cache build\n        uses: actions/cache@v3\n        with:\n          path: _cache\n          key: build-${{ runner.os }}-${{ secrets.BUILD_CACHE_VERSION }}\n\n      - name: Build\n        run: make build\n\n      - name: Test with BumpVer\n        run: bumpver update --dry --no-fetch\n\n      - name: Test with HTML-validate\n        run: make test-html-validate\n\n      - name: Test with HTMLProofer\n        if: runner.os != 'Windows'\n        run: make test-htmlproofer\n\n      - name: Test with EPUBCheck\n        run: make test-epubcheck\n        env:\n          EPUBCHECK: \"java -jar ${{ steps.setup-epubcheck.outputs.epubcheck-jar-path }}\"\n\n      - name: Upload latest artifact\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: Website HEAD ${{ runner.os }} GHC-${{ matrix.ghc-version }}\n          path: _site\n          if-no-files-found: error\n\n  publish:\n    name: Publish to GitHub Pages\n    needs: [build]\n    if: github.event_name == 'push'\n    uses: ./.github/workflows/publish.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n\n  release:\n    name: Publish to GitHub Releases\n    needs: [build]\n    if: startsWith(github.ref, 'refs/tags/v')\n    uses: ./.github/workflows/release.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n```"}
{"id": "63c49a621e33648075793dfd", "level": "level3", "llm_response": " ```yaml\nname: Steam Upload\non:\n  release:\n    types: [published, prerelease, draft]\n  workflow_dispatch:\n\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    env:\n      STEAM_SHARED_SECRET: ${{ secrets.STEAM_SHARED_SECRET }}\n      STEAM_USER: ${{ secrets.STEAM_USER }}\n      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}\n\n    inputs:\n      tag-this:\n        description: 'Tag to fetch and upload (default: nightly)'\n        default: 'nightly'\n      win_url_override:\n        description: 'Windows build URL (default: .zip only)'\n        default: ''\n      mac_url_override:\n        description: 'Mac build URL (default: .dmg only)'\n        default: ''\n      mac_arm_url_override:\n        description: 'Mac arm build URL (default: .dmg only)'\n        default: ''\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup 7-Zip\n        uses: actions/setup-7zip@v3\n\n      - name: Get build information\n        id: build-info\n        run: |\n          # Command to fetch build information\n          echo \"::set-output name=branch::$(echo $GITHUB_REF | cut -d '/' -f3)\"\n          echo \"::set-output name=desc::$(echo $GITHUB_REF | cut -d '/' -f4)\"\n          echo \"::set-output name=type::$(echo $GITHUB_REF | cut -d '/' -f5)\"\n          echo \"::set-output name=win_url::$(echo $GITHUB_REF | cut -d '/' -f6)\"\n          echo \"::set-output name=mac_intel_url::$(echo $GITHUB_REF | cut -d '/' -f7)\"\n          echo \"::set-output name=mac_arm_url::$(echo $GITHUB_REF | cut -d '/' -f8)\"\n\n      - name: Restore build cache\n        if: steps.build-info.outputs.cache-hit == 'true'\n        uses: actions/cache@v3\n        with:\n          path: |\n            build_artifacts\n            cache\n          key: ${{ runner.os }}-build-${{ github.sha }}\n\n      - name: Determine if Steam upload should run\n        if: github.event_name != 'pull_request' && github.event_name != 'pull_request_review'\n        run: |\n          # Logic to determine if Steam upload should run\n\n      - name: Download and prepare builds\n        if: steps.should-run.outputs.should-run == 'true'\n        run: |\n          # Download and prepare builds based on inputs\n\n      - name: Setup steamcmd\n        uses: CyberAndrii/setup-steamcmd@v3\n\n      - name: Generate Steam auth code\n        uses: CyberAndrii/steam-totp@v3\n        id: steam-totp\n        with:\n          secret: ${{ secrets.STEAM_SHARED_SECRET }}\n\n      - name: Upload to Steam\n        run: |\n          # Command to upload builds to Steam\n\n      - name: Upload Steam build logs\n        run: |\n          # Command to upload build logs\n\nworkflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *'\n```\nThis YAML file defines a GitHub Actions workflow named `Steam Upload` for a C programming language repository. It triggers on release events and manual dispatch. The workflow includes a job with steps for checking out the code, setting up 7-Zip, getting build information, restoring build cache, determining if Steam upload should run, downloading and preparing builds, setting up steamcmd, generating Steam auth code, uploading to Steam, and uploading build logs. The workflow also includes inputs for tag-this, win_url_override, mac_url_override, and mac_arm_url_override. The schedule step sets the workflow to run at 12:00 am.", "answer": "```yaml name: Steam Upload\n\non:\n  release:\n    types:\n    - published\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Tag to fetch and upload (nightly if none)'\n        required: false\n      win_url_override:\n        description: 'Windows build to use (.zip only)'\n        required: false\n      mac_url_override:\n        description: 'Mac build to use (.dmg only)'\n        required: false\n      mac_arm_url_override:\n        description: 'Mac ARM build to use (.dmg only)'\n        required: false\n  schedule:\n  - cron: 0 0 * * *\n\nenv:\n  WORKFLOW_ID: 583765\n  GIT_NIGHTLY_BRANCH: master\n  STEAM_NIGHTLY_BRANCH: nightly\n  STEAM_STABLE_BRANCH: staging\n  STEAM_BETA_BRANCH: beta_staging\n  SEVENZIP_HASH: 5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d\n\njobs:\n  upload:\n    name: Steam upload\n    runs-on: ubuntu-20.04\n    if: github.repository_owner == 'obsproject'\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        path: source\n\n      # The 7-Zip version available in the default ubuntu repos (p7zip) is wildly out-of-date and does not properly support DMG files.\n    - name: Setup 7-Zip\n      run: |\n        mkdir 7z && cd 7z\n        curl -s https://www.7-zip.org/a/7z2200-linux-x64.tar.xz -o 7z.tar.xz\n        \n        if [[ '${{ env.SEVENZIP_HASH }}' != \"$(sha256sum 7z.tar.xz | cut -d \" \" -f 1)\" ]]; then\n            echo \"7-Zip Download hash does not match!\"\n            exit 1\n        fi\n        \n        tar -xJf 7z.tar.xz\n        echo \"$(pwd)\" >> $GITHUB_PATH\n\n    - name: Get build information\n      id: build-info\n      run: |\n        EVENT='${{ github.event_name }}'\n        if [[ ${EVENT} == 'release' || ( ${EVENT} == 'workflow_dispatch' && -n '${{ github.event.inputs.tag }}') ]]; then\n            if [[ ${EVENT} == \"release\" ]]; then\n                DESC='${{ github.event.release.tag_name }}'\n                if [[ '${{ github.event.release.prerelease }}' == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL='${{ github.event.release.assets_url }}'\n            else\n                RELEASE=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/releases/tags/${{ github.event.inputs.tag }}')\"\n\n                DESC=\"$(jq -r '.tag_name' <<< ${RELEASE})\"\n                if [[ \"$(jq -r '.prerelease' <<< ${RELEASE})\" == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL=\"$(jq -r '.assets_url' <<< ${RELEASE})\"\n            fi\n\n            ASSETS=\"$(curl -s \"${ASSETS_URL}\")\"\n            WIN_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x64.zip\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x86_64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*arm64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            TYPE='release'\n        else\n            BRANCH='${{ env.STEAM_NIGHTLY_BRANCH }}'\n            BUILDS=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/actions/workflows/${{ env.WORKFLOW_ID }}/runs?per_page=1&event=push&status=success&branch=${{ env.GIT_NIGHTLY_BRANCH }}')\"\n            ARTIFACTS_URL=\"$(jq -r '.workflow_runs[].artifacts_url' <<< ${BUILDS})\"\n            DESC=\"g$(jq -r '.workflow_runs[].head_sha' <<< \"${BUILDS}\" | cut -c1-9)\"\n\n            ARTIFACTS=\"$(curl -s ${ARTIFACTS_URL})\"\n            WIN_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*windows-x64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-x86_64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-arm64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            TYPE='nightly'\n        fi\n\n        # Apply overrides from workflow_dispatch\n        if [[ ${EVENT} == 'workflow_dispatch' ]]; then\n            if [[ -n '${{ github.event.inputs.win_url_override }}' ]]; then\n                WIN_ASSET_URL='${{ github.event.inputs.win_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_url_override }}' ]]; then\n                MAC_ASSET_URL='${{ github.event.inputs.mac_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_arm_url_override }}' ]]; then\n                MAC_ARM_ASSET_URL='${{ github.event.inputs.mac_arm_url_override }}'\n            fi\n        fi\n\n        if [[ -z ${WIN_ASSET_URL} || -z ${MAC_ASSET_URL} || -z ${MAC_ARM_ASSET_URL} ]]; then\n            echo \"Missing at least one asset URL!\"\n            exit 1\n        fi\n\n        # set env variables for subsequent steps\n        echo \"type=${TYPE}\" >> $GITHUB_OUTPUT\n        echo \"branch=${BRANCH}\" >> $GITHUB_OUTPUT\n        echo \"desc=${DESC}\" >> $GITHUB_OUTPUT\n        echo \"win_url=${WIN_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_intel_url=${MAC_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_arm_url=${MAC_ARM_ASSET_URL}\" >> $GITHUB_OUTPUT\n\n    - name: Restore build cache\n      id: cache\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/steam/build\n        key: ${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}\n        # Using \"restore-keys\" will restore the most recent cache for the branch, even if the exact cache doesn't exist.\n        # This doesn't set cache-hit to true so it won't skip the upload for nightlies.\n        restore-keys: ${{ steps.build-info.outputs.branch }}\n\n    - name: Determine if Steam upload should run\n      # If the nightly build has already been uploaded and thus a cache exists skip this and the following steps.\n      # Steam does not prevent us from uploading duplicate builds so this would just pollute the dashboard.\n      # This is a bit of a hack and can fail to work if our cache has been evicted or we somehow have no commits for 7 days,\n      # but it's better than nothing!\n      id: should-run\n      run: |\n        if [[ '${{ steps.build-info.outputs.type }}' == 'release' || '${{ steps.cache.outputs.cache-hit }}' != 'true' ]]; then\n            echo \"result=true\" >> $GITHUB_OUTPUT\n        else\n            echo \"result=false\" >> $GITHUB_OUTPUT\n        fi\n\n    - name: Download and prepare builds\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        echo \"::group::Download Windows build\"\n        if [[ '${{ steps.build-info.outputs.win_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        else\n            curl -L '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Download Mac builds\"\n        if [[ '${{ steps.build-info.outputs.mac_intel_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg\n        fi\n\n        if [[ '${{ steps.build-info.outputs.mac_arm_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg\n        fi\n        echo \"::endgroup::\"\n\n        mkdir -p steam && cd steam\n\n        echo \"::group::Extract and prepare Win64\"\n        mkdir steam-windows\n        (\n            cd steam-windows\n            unzip ../../windows.zip\n            # CI builds can be double-zipped\n            if compgen -G \"*.zip\" > /dev/null; then\n                unzip *.zip\n                rm *.zip\n            fi\n            # copy install scripts and create sentinel file\n            cp -r ../../source/CI/steam/scripts_windows scripts\n            touch disable_updater\n        )\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract macOS (x86)\"\n        mkdir -p steam-macos/x86\n        # CI builds are zipped\n        if [[ -f ../mac_x86.dmg.zip ]]; then\n            unzip ../mac_x86.dmg.zip\n            # 7-Zip will have an exit code of 2 due to the \"unsafe\" 'Applications' symlink.\n            # GitHub treats this as a failure so ignore non-zero exit codes here.\n            7zz x *.dmg -otmp_x86 || true\n            rm *.dmg\n        else\n            7zz x ../mac_x86.dmg -otmp_x86 || true\n        fi\n\n        if [ -d tmp_x86/OBS.app ]; then\n            mv tmp_x86/OBS.app steam-macos/x86\n        else\n            mv tmp_x86/*/OBS.app steam-macos/x86\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract and prepare macOS (arm64)\"\n        mkdir -p steam-macos/arm64\n        if [[ -f ../mac_arm64.dmg.zip ]]; then\n            unzip ../mac_arm64.dmg.zip\n            7zz x *.dmg -otmp_arm64 || true\n            rm *.dmg\n        else\n            7zz x ../mac_arm64.dmg -otmp_arm64 || true\n        fi\n\n        if [ -d tmp_arm64/OBS.app ]; then\n            mv tmp_arm64/OBS.app steam-macos/arm64\n        else\n            mv tmp_arm64/*/OBS.app steam-macos/arm64\n        fi\n\n        cp ../source/CI/steam/scripts_macos/launch.sh steam-macos/launch.sh\n        echo \"::endgroup::\"\n\n    - name: Setup steamcmd\n      if: steps.should-run.outputs.result == 'true'\n      uses: CyberAndrii/setup-steamcmd@e19cd1516315ce46dbfffa47193f92fe42d1419e\n\n    - name: Generate Steam auth code\n      if: steps.should-run.outputs.result == 'true'\n      id: steam-totp\n      uses: CyberAndrii/steam-totp@0fc9e59dc5bbf4368d23d5a33956f104248da31a\n      with:\n        shared_secret: ${{ secrets.STEAM_SHARED_SECRET }}\n\n    - name: Upload to Steam\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        cd steam\n        echo \"::group::Prepare Steam build script\"\n        # The description in Steamworks for the build will be \"github_<branch>-<tag/short hash>\", e.g. \"github_nightly-gaa73de952\"\n        sed 's/@@DESC@@/${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}/;s/@@BRANCH@@/${{ steps.build-info.outputs.branch }}/' ../source/CI/steam/obs_build.vdf > build.vdf\n        echo \"Generated file:\"\n        cat build.vdf\n        echo \"::endgroup::\"\n        echo \"::group::Upload to Steam\"\n        steamcmd +login '${{ secrets.STEAM_USER }}' '${{ secrets.STEAM_PASSWORD }}' '${{ steps.steam-totp.outputs.code }}' +run_app_build \"$(pwd)/build.vdf\" +quit\n        echo \"::endgroup::\"\n\n    - name: Upload Steam build logs\n      if: steps.should-run.outputs.result == 'true'\n      uses: actions/upload-artifact@v3\n      with:\n        name: steam-build-logs\n        path: ${{ github.workspace }}/steam/build/*.log\n```"}
{"id": "63c497b0cbc73931bb181e14", "level": "level3", "llm_response": " ```yaml\nname: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        run: |\n          echo \"Fetching project data for the opened issue...\"\n          # Add logic here to retrieve necessary data, possibly using secrets.PAT\n\n      - name: Add issue to project\n        run: |\n          echo \"Adding issue to project board...\"\n          # Add logic here to add the issue to the project board, using github.event.issue.node_id\n          # You might need to use GitHub Actions secrets or API calls to interact with the project board\n```\n\nPlease note that the actual logic to fetch project data and add the issue to the project board will depend on the specifics of your project and how you interact with GitHub's API or any other tools you're using. You may need to include additional steps or actions to handle authentication, API requests, and error handling.", "answer": "```yaml name: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n        run: |\n          gh api graphql -f query='\n            query {\n              organization(login: \"revoltchat\"){\n                projectNext(number: 3) {\n                  id\n                  fields(first:20) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") |.settings | fromjson.options[] | select(.name==\"Todo\") |.id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          item_id=\"$( gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')\"\n          \n          echo 'ITEM_ID='$item_id >> $GITHUB_ENV\n```"}
{"id": "63c4981c33b087f6bde36b61", "level": "level3", "llm_response": " ```yaml\nname: sync-files\n\non:\n  schedule:\n    - cron: '0 0 * * *'  # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    uses: autowarefoundation/autoware-github-actions/.github/workflows/check-secret.yaml\n\n  sync-files:\n    needs: check-secret\n    runs-on: ubuntu-latest\n    steps:\n      - id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          app-id: ${{ secrets.APP_ID }}\n          private-key: ${{ secrets.PRIVATE_KEY }}\n        env:\n          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}\n\n      - name: Run sync-files\n        uses: autowarefoundation/autoware-github-actions/sync-files@v1\n        with:\n          token: ${{ env.GITHUB_TOKEN }}\n```", "answer": "```yaml name: sync-files\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    uses: autowarefoundation/autoware-github-actions/.github/workflows/check-secret.yaml@v1\n    secrets:\n      secret: ${{ secrets.APP_ID }}\n\n  sync-files:\n    needs: check-secret\n    if: ${{ needs.check-secret.outputs.set == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.APP_ID }}\n          private_key: ${{ secrets.PRIVATE_KEY }}\n\n      - name: Run sync-files\n        uses: autowarefoundation/autoware-github-actions/sync-files@v1\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          pr-labels: |\n            bot\n            sync-files\n          auto-merge-method: squash\n```"}
{"id": "63c49ee0517fc08c1ef064ca", "level": "level3", "llm_response": " ```yaml\nname: Update Issues\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: write\n      packages: write\n      security-events: write\n      security-advisories: write\n      secrets: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Update Issues\n        # Additional steps for updating issues can be added here\n        # Example: Using actions/create-issue@v1 to create an issue\n```", "answer": "```yaml # Install this in .github/workflows/ to automate issue maintenance.\nname: Update Issues\n\non:\n  workflow_dispatch:\n    # Allows for manual triggering.\n  schedule:\n    # Run every 30 minutes\n    - cron: '*/30 * * * *'\n\npermissions:\n  issues: write\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          repository: shaka-project/shaka-github-tools\n\n      - name: Update Issues\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          cd update-issues\n          npm ci\n          node main.js\n```"}
{"id": "63c49c411e3364807579faeb", "level": "level3", "llm_response": " ```yaml\nname: PR Labels\non:\n  pull_request:\n    types: [labeled, unlabeled, deleted, updated]\njobs:\n  workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n      - name: Label Pr Check\n        uses: some/label-checking-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          labelsToCheck: ${{ github.event.label.name }}\n      # Additional steps can be added here\n```\n\nPlease note that the `some/label-checking-action@v1` is a placeholder for an actual action or script that you would use to check labels on pull requests. You will need to replace this with the actual action or script that fits your requirements. The `GITHUB_TOKEN` is automatically created by GitHub Actions and provides access to the GitHub API.\n\nThis YAML file defines a GitHub Actions workflow named `PR Labels` that triggers on various pull request events. It includes a single job named `workflows` that runs on the latest Ubuntu runner. The job includes steps for checking out the repository and a placeholder for label checking. You may need to customize the steps according to your specific needs.", "answer": "```yaml ---\nname: PR Labels\n\n# yamllint disable-line rule:truthy\non:\n  pull_request_target:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/pr-labels.yaml@main\n```"}
{"id": "63c4a19f1842bc13d77a502b", "level": "level3", "llm_response": " ```yaml\nname: CompatHelper\n\non:\n  schedule:\n    - cron: '0 0 * * *' # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Install CompatHelper\n        run: Pkg.add(\"CompatHelper\")\n\n      - name: Run CompatHelper\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}\n        run: CompatHelper.main()\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}  # trigger CI\n        run: julia -e 'using CompatHelper; CompatHelper.main(; subdirs = [\"\", \"docs\"])'\n```"}
{"id": "63c49ee2736e7f0ed8c6ab16", "level": "level3", "llm_response": " ```yaml\nname: Check changelog file included\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Changelog\n        uses: masterversion/release-tools-check-changelog@v1\n```", "answer": "```yaml name: Check changelog file included\n\non:\n  pull_request:\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: bitergia/release-tools-check-changelog@master\n```"}
{"id": "63c49f21b008460c1df4bcb5", "level": "level3", "llm_response": " ```yaml\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n      paths-ignore:\n        - LICENSE*\n        - .gitignore\n        - **.md\n        - **.adoc\n        - *.txt\n        - .ci/**\n  pull_request:\n    branches:\n      - main\n      paths-ignore:\n        - LICENSE*\n        - .gitignore\n        - **.md\n        - **.adoc\n        - *.txt\n        - .ci/**\n\njobs:\n  jpa-postgresql-container:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        java-version: ['11', '17']\n        maven-version: ['3.6.3', '3.8.4']\n    defaults:\n      run:\n        shell: bash\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n\n      - name: Java and Maven Setup\n        uses: kiegroup/kogito-pipelines/.ci/actions/maven\n        with:\n          maven-version: ${{ matrix.maven-version }}\n\n      - name: Build with Maven\n        run: mvn clean install\n```", "answer": "```yaml # Runs optaplanner-persistence-jpa module tests in a PostgreSQL container\n\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  jpa-postgresql-container:\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n        java-version: [ 11 ]\n        maven-version: [ '3.8.6' ]\n      fail-fast: false\n    runs-on: ${{ matrix.os }}\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n    name: ${{ matrix.os }} - Java ${{ matrix.java-version }} - Maven\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: Java and Maven Setup\n        uses: kiegroup/kogito-pipelines/.ci/actions/maven@main\n        with:\n          java-version: ${{ matrix.java-version }}\n          maven-version: ${{ matrix.maven-version }}\n          cache-key-prefix: ${{ runner.os }}-${{ matrix.java-version }}-maven${{ matrix.maven-version }}\n      # Builds the JPA module and runs tests in a PostgreSQL container\n      - name: Build with Maven\n        run: mvn -B clean install -pl :optaplanner-persistence-jpa -am -Ppostgresql\n```"}
{"id": "63c4a18e33b087f6bde73347", "level": "level3", "llm_response": " ```yaml\nname: Test Report\non:\n  workflow_run:\n    workflows:\n      - 'LoRa E2E CI'\n      - 'LoRa Build & Test CI'\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Test Report\n        uses: dorny/test-reporter@v1\n```", "answer": "```yaml name: 'Test Report'\non:\n  workflow_run:\n    workflows: ['LoRa E2E CI', 'LoRa Build & Test CI']                     # runs after CI workflow\n    types:\n      - completed\njobs:\n  report:\n    permissions:\n      checks: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: dorny/test-reporter@v1\n      with:\n        artifact: /(.*)results/\n        name: '$1Results'\n        path: '**/*.trx'\n        reporter: dotnet-trx\n```"}
{"id": "63c497f91899db58864dce30", "level": "level3", "llm_response": " ```yaml\nname: Integration Test - Expression\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested]\n\njobs:\n  test_expression:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: '16'\n\n      - name: Setup TypeScript\n        run: npm install -g typescript\n\n      - name: Run TypeScript tests\n        run: tsc && npm test\n```", "answer": "```yaml name: Integration Test - Expression\n\non:\n  push:\n    branches: [main]\n  pull_request:\n\njobs:\n  test_expression:\n    name: ubuntu-latest\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: 16\n          architecture: x64\n      - run: npm ci\n      - run: npm run test-expression\n```"}
{"id": "63c49758517fc08c1eed656f", "level": "level3", "llm_response": " ```yaml\nname: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, labeled, unlabeled, locked, unlocked]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: null\n      contents: read\n      security-events: write\n      pull-requests: write\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up Go\n      uses: actions/setup-go@v3\n      with:\n        go-version: '1.16'\n\n    - name: Lint Go code\n      id: golangci\n      uses: golangci/golangci-lint-action@v3.2.0\n      with:\n        version-osx: 'stable'\n        version-linux: 'stable'\n        version-windows: 'stable'\n        version-darwin: 'stable'\n        version-freebsd: 'stable'\n        version-linux: 'stable'\n        version-windows: 'stable'\n        version-osx: 'stable'\n        version-darwin: 'stable'\n        version-freebsd: 'stable'\n        version-linux: 'stable'\n        version-windows: 'stable'\n        install-dir: '.'\n        output-dir: './lints'\n        fail-on-error: true\n\n    - name: Upload lint results\n      uses: actions/upload-artifact@v2\n      if: always()\n      with:\n        name: lints\n        path: './lints/*'\n```", "answer": "```yaml name: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\n# Remove all permissions from GITHUB_TOKEN except metadata.\npermissions: {}\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        working-directory:\n          - \"\"\n          - test\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.49.0\n          working-directory: ${{matrix.working-directory}}\n```"}
{"id": "63c49caa33b087f6bde54454", "level": "level3", "llm_response": " ```yaml\nname: Language Service\n\non:\n  push:\n    paths:\n      - 'src/language-service/**'\n      - '.github/**'\n  pull_request:\n    paths:\n      - 'src/language-service/**'\n      - '.github/**'\n\njobs:\n  language-service:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: '14'\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        run: npx eslint .\n\n      - name: \ud83d\ude80 Build Schema\n        run: npx json-schema-generator --input src/language-service --output schema.json\n\n      - name: \ud83d\ude80 Run Compile\n        run: tsc\n\n      - name: \ud83c\udfd7 Create .npmrc\n        run: echo \"registry=https://registry.npmjs.org/\" > .npmrc\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish\n```", "answer": "```yaml name: Language Sevice\n\non:\n  push:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n  pull_request:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n\njobs:\n  language-service:\n    name: Language Service\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: \"16\"\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        working-directory: src/language-service\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        working-directory: src/language-service\n        run: npm run lint\n\n      - name: \ud83d\ude80 Build Schema\n        working-directory: src/language-service\n        run: npm run schema\n\n      - name: \ud83d\ude80 Run Compile\n        working-directory: src/language-service\n        run: npm run compile\n\n      - name: \ud83c\udfd7 Create .npmrc\n        if: success() && github.ref == 'refs/heads/master'\n        run:\n          echo \"//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN\" >> ~/.npmrc\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        if: success() && github.ref == 'refs/heads/master'\n        env:\n          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish src/language-service\n\n    # - name: NPM Publish to Registry\n    #   uses: actions/npm@master\n    #   if: success() && github.ref == 'refs/heads/master'\n    #   env:\n    #     NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n    #   with:\n    #     args: publish src/language-service\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level3", "llm_response": " ```yaml\nname: Require pull request labels\n\non:\n  pull_request:\n    types: [opened, labeled, unlabeled, deleted, updated]\n\njobs:\n  require-pr-labels:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      pull-requests: write\n\n  require-bug-labels:\n    needs: require-pr-labels\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      pull-requests: write\n    steps:\n      - name: Enforce Labels\n        uses: v2/github-action-required-labels@main\n        with:\n          required_labels: 'bug,enhancement'\n```", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c49d8733b087f6bde59ea2", "level": "level3", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        uses: v5/release-drafter/release-drafter@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```\nPlease replace `Update Release Draft` with the actual step name you intend to use. The `uses` field should point to the GitHub Action you want to execute, and the `with` field contains the necessary context or parameters for that action. In this case, `GITHUB_TOKEN` is used as a secret for authentication.", "answer": "```yaml name: Release Drafter\n# https://github.com/release-drafter/release-drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n        #   config-name: my-config.yml\n        #   disable-autolabeler: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b433b087f6bde6e4a8", "level": "level3", "llm_response": " ```yaml\nname: Deploy Schema and Guidelines\non:\n  push:\n    branches:\n      - develop\njobs:\n  build:\n    name: Build and deploy Schema and Guidelines\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout main repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n          server-id: 'github'\n          server-username: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}\n          server-password: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}\n\n      - name: Build with Ant\n        run: ant\n\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v3\n        with:\n          repository: ${{ github.repository_owner }}/${{ github.repository }}-schema\n          path: ${{ env.SCHEMA_DIR }}\n          ref: ${{ env.SCHEMA_BRANCH }}\n          fetch-depth: 0\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r ./build/classes/${{ env.SCHEMA_DIR }} .\n\n      - name: Check git status before commit\n        run: git status\n\n      - name: Configure git\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"GitHub Action\"\n\n      - name: Commit files\n        run: |\n          git add .\n          git commit -m \"Deploy schema and guidelines\"\n\n      - name: Push changes to SCHEMA\n        run: |\n          git push origin ${{ env.SCHEMA_BRANCH }}\n\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v3\n        with:\n          repository: ${{ github.repository_owner }}/${{ github.repository }}-guidelines\n          path: ${{ env.GUIDELINES_DIR }}\n          ref: ${{ env.GUIDELINES_BRANCH }}\n          fetch-depth: 0\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: cp -r ./build/classes/${{ env.GUIDELINES_DIR }} .\n\n      - name: Check git status before commit\n        run: git status\n\n      - name: Configure git\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"GitHub Action\"\n\n      - name: Commit files\n        run: |\n          git add .\n          git commit -m \"Deploy guidelines\"\n\n      - name: Push changes to GUIDELINES\n        run: |\n          git push origin ${{ env.GUIDELINES_BRANCH }}\n```", "answer": "```yaml # This workflow will perform the following steps for pushes the the develop branch\n# * build the Schema and the Guidelines with Ant\n# * publish the Schema to music-encoding/schema under ./dev\n# * publish the Guidelines to music-encoding/guidelines under ./dev\n\nname: Deploy Schema and Guidelines\n\non:\n  push:\n    branches: [develop]\n\nenv:\n  # schema\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n\n  # guidelines\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n\n  # temporary directories\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    name: Build and deploy Schema and Guidelines\n    runs-on: ubuntu-latest\n\n    steps:\n      ### BUIDLING THE SCHEMA AND THE GUIDELINES ###\n      - name: Checkout main repo\n        uses: actions/checkout@v3\n        with:\n          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n          # recursively checkout submodules.\n          #\n          # When the `ssh-key` input is not provided, SSH URLs beginning with\n          # `git@github.com:` are converted to HTTPS.\n          #\n          # Default: false\n          submodules: recursive\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: \"temurin\"\n          java-version: \"17\"\n\n      - name: Build with Ant\n        # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant\n        run: |\n          ant -noinput -buildfile build.xml init\n          ant -noinput -buildfile build.xml -lib lib/saxon/saxon-he-10.5.jar -Dgithub.sha=${{ github.sha }}\n\n      ### PUBLISHING THE SCHEMA ###\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.SCHEMA_REPO }}\n          # Deploy key as secret for accessing <owner>/<SCHEMA_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.SCHEMA_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.SCHEMA_DIR }}\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r dist/schemata/dev $SCHEMA_DIR/\n\n      - name: Check git status before commit\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of schema build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to SCHEMA\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: git push origin HEAD:$SCHEMA_BRANCH\n\n      ### PUBLISHING THE GUIDELINES ###\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.GUIDELINES_REPO }}\n          # Deploy key as secret for accessing <owner>/<GUIDELINES_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_GUIDELINES }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.GUIDELINES_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.GUIDELINES_DIR }}\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: |\n          rm -rf $GUIDELINES_DIR/dev \n          cp -r dist/guidelines/dev/web $GUIDELINES_DIR/\n          mv $GUIDELINES_DIR/web $GUIDELINES_DIR/dev\n\n      - name: Check git status before commit\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of guidelines build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to GUIDELINES\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: git push origin HEAD:$GUIDELINES_BRANCH\n```"}
{"id": "63c494a48052faa2781ac54c", "level": "level3", "llm_response": " ```yaml\nname: Lock closed issues\non:\n  schedule:\n    - cron: '30 5 * * *'  # Trigger at 05:30 am\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Lock closed issues\n        uses: dessant/lock-threads@v3.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Lock closed issues\"\n\non:\n  schedule:\n    - cron: \"30 5 * * *\"\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/lock-threads@v3.0.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-comment: \"This issue has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\"\n          issue-inactive-days: 30\n          process-only: \"issues\"\n# cspell:ignore dessant\n```"}
{"id": "63c49de9736e7f0ed8c64893", "level": "level3", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-label PRs with merge conflicts\n        uses: mschilde/auto-label-merge-conflicts@v2.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # This workflow checks open PRs for merge conflicts and labels them when conflicts are found\nname: Check for merge conflicts\n\n# Run whenever the \"main\" branch is updated\n# NOTE: This means merge conflicts are only checked for when a PR is merged to main.\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      # See: https://github.com/mschilde/auto-label-merge-conflicts/\n      - name: Auto-label PRs with merge conflicts\n        uses: mschilde/auto-label-merge-conflicts@v2.0\n        # Add \"merge conflict\" label if a merge conflict is detected. Remove it when resolved.\n        # Note, the authentication token is created automatically\n        # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token\n        with:\n          CONFLICT_LABEL_NAME: 'merge conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Ignore errors\n        continue-on-error: true\n```"}
{"id": "63c4a0591842bc13d779d081", "level": "level3", "llm_response": " ```yaml\nname: Issue closer\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue\n        uses: desktop-app/action_issue_closer@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Issue closer.\n\non:\n  issues:\n    types: opened\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue.\n        uses: desktop-app/action_issue_closer@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e2db008460c1df45cd1", "level": "level3", "llm_response": " ```yaml\nname: Rust Cron Job Workflow\non:\n  schedule:\n    - cron: '0 23 * * 1-5' # Trigger at 11:59 pm on Monday through Friday\n  workflow_dispatch: # Allow manual triggering\n\njobs:\n  call_cron_failures:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use reusable workflow\n        uses: 'containers/buildah/.github/workflows/check_cirrus_cron.yml'\n```", "answer": "```yaml ---\n\non:\n  # Note: This only applies to the default branch.\n  schedule:\n    # N/B: This should correspond to a period slightly after\n    # the last job finishes running.  See job defs. at:\n    # https://cirrus-ci.com/settings/repository/5138144844840960\n    - cron:  '59 23 * * 1-5'\n  # Debug: Allow triggering job manually in github-actions WebUI\n  workflow_dispatch: {}\n\njobs:\n  # Ref: https://docs.github.com/en/actions/using-workflows/reusing-workflows\n  call_cron_failures:\n    uses: containers/buildah/.github/workflows/check_cirrus_cron.yml@main\n    secrets: inherit\n```"}
{"id": "63c4993a1899db58864e5313", "level": "level3", "llm_response": " ```yaml\nname: Package Trigger Scheduler\non:\n  schedule:\n    - cron: '03 24 * * thu'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2.3.3\n      - name: Package Trigger Scheduler\n        run: |\n          # Your package triggering logic here\n          # Use secrets.CR_PAT and secrets.DISCORD_WEBHOOK as needed\n          echo \"Triggering package creation...\"\n          # Example command using secrets\n          echo \"Using CR_PAT: ${{ secrets.CR_PAT }}\"\n          echo \"Using DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}\"\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '24 3 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-transmission/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for transmission** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-transmission/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c4987033b087f6bde38dfc", "level": "level3", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Update Release Draft\n        uses: v5/release-drafter/release-drafter@main\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # draft release notes with https://github.com/release-drafter/release-drafter\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e4bb008460c1df468cb", "level": "level3", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [opened, edited, labeled, unlabeled]\n  pull_request:\n    types: [opened, edited, labeled, unlabeled]\n  schedule:\n    - cron: '0 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        uses: lee-dohm/no-response@v0.5.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```\nNote: The placeholder `''` for the step name should be replaced with an actual step name that describes the action to be taken. For example, you might use `send-no-response-message` or something similar.", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # Number of days of inactivity before an Issue is closed for lack of response\n          daysUntilClose: 7\n          # Label requiring a response\n          responseRequiredLabel: 'status: needs more information'\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Since the issue is missing key information and has been inactive for 7 days, it has been automatically closed.\n            If you wish to see the issue reopened, please provide the missing information.\n```"}
{"id": "63c49f741899db588650d292", "level": "level3", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '30 17 * * sun'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        language: [C#]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '30 17 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f7a1e336480757b40f6", "level": "level3", "llm_response": " ```yaml\nname: Protobuf\n\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'proto/**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.18'\n      - name: Build protobuf\n        run: go build ./...\n\n  lint:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Get git diff\n        uses: technote-space/get-diff-action@v6.1.1\n        with:\n          branch: ${{ github.event.pull_request.base.ref }}\n      - name: Lint protobuf\n        uses: bufbuild/buf-lint-action@v1\n        with:\n          buf-config-file: .buf.yml\n\n  break-check:\n    needs: lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Break check\n        uses: bufbuild/buf-breaking-action@v1\n        with:\n          buf-config-file: .buf.yml\n```\nThis YAML file defines a GitHub Actions workflow named `Protobuf` that is triggered by a pull request event where the path matches the `proto/**` pattern. It includes three jobs: `build`, `lint`, and `break-check`, each with their respective steps using specified actions and configurations. The `needs` keyword ensures that each job runs after the previous one completes. The `github.repository` and `github.event.pull_request.base.ref` variables are implicitly used in the workflow.", "answer": "```yaml name: Protobuf\n# Protobuf runs buf (https://buf.build/) lint and check-breakage\n# This workflow is only run when a .proto file has been changed\non:\n  pull_request:\n    paths:\n      - \"proto/**\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        id: git_diff\n        with:\n          PATTERNS: |\n            **/**.proto\n            **/buf.yaml\n            buf.work.yaml\n            buf.gen.yaml\n      - run: |\n          make proto-gen\n        if: env.GIT_DIFF\n\n  lint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-lint-action@v1\n        with:\n          input: \"proto\"\n\n  break-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-breaking-action@v1\n        with:\n          input: \"proto\"\n          against: \"https://github.com/${{ github.repository }}.git#branch=${{ github.event.pull_request.base.ref }},ref=HEAD~1,subdir=proto\"\n```"}
{"id": "63c49801cbc73931bb1841e8", "level": "level3", "llm_response": " ```yaml\nname: Clean\n\non:\n  push:\n    branches: [ main ]\n    tags: [ 'v*' ]\n  pull_request:\n    types: [ opened, edited, reopened, ready_for_review ]\n  workflow_dispatch:\n\njobs:\n  delete-artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Delete artifacts\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITHUB_API_URL: ${{ github.event.repository.url }}\n        run: |\n          # Add commands to delete artifacts here\n          echo \"Artifacts cleaned up.\"\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49b84b008460c1df34d2f", "level": "level3", "llm_response": " ```yaml\nname: Generate docs\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '5.0.x'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release\n\n      - name: Generate docs\n        run: dotnet docs --output docs\n\n      - name: Commit docs\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'Update documentation'\n          commit_author: 'Your Name <your-email@example.com>'\n          files: 'docs/**/*'\n```", "answer": "```yaml name: 'Generate docs'\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n\n      - name: Restore dependencies\n        run: dotnet restore \n        \n      - name: Build\n        run: dotnet build --no-restore\n\n      - name: Generate docs\n        run: |\n          # Run CLI\n          dotnet run -p src/Microsoft.Sbom.Tool generate -- -h 2> help.txt || true\n          cat <<EOF > docs/sbom-tool-arguments.md\n          # Sbom tool arguments\n          \n          \\`\\`\\`shell\n          dotnet run -p './src/Microsoft.Sbom.Tool' generate -- -h\n          \\`\\`\\`\n\n          \\`\\`\\`\n          $(tail --lines=+4 help.txt)\n          \\`\\`\\`\n          EOF\n\n      - name: Commit\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'Auto update docs/*.md'\n          file_pattern: 'docs/*.md'\n          ```"}
{"id": "63c49cc31e336480757a2f97", "level": "level3", "llm_response": " ```yaml\nname: TagBot\n\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened, synchronize, reopened]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: TagBot\n        uses: v1/JuliaRegistries/TagBot@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          documenter-key: ${{ secrets.DOCUMENTER_KEY }}\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c4974bcbc73931bb17f7a8", "level": "level3", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Lint Pull Request\n        uses: amannn/action-semantic-pull-request@v3.4.2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # Please look up the latest version from\n      # https://github.com/amannn/action-semantic-pull-request/releases\n      - uses: amannn/action-semantic-pull-request@v3.4.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d681e336480757a6e6f", "level": "level3", "llm_response": " ```yaml\nname: MSDocs build verifier\non: pull_request\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n        with:\n          fetch-depth: 0\n\n      - name: Validate\n        uses: dotnet/docs-actions/actions/docs-verifier@main\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: MSDocs build verifier\non: pull_request\nenv:\n  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  validate:\n    name: MSDocs build verifier\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Validate\n        uses: dotnet/docs-actions/actions/docs-verifier@main\n```"}
{"id": "63c498991842bc13d776b38d", "level": "level3", "llm_response": " ```yaml\nname: Auto Assign\non: [pull_request]\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Assign Reviewer\n        uses: shufo/auto-assign-reviewer-by-files@v1.1.2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: \"Auto Assign\"\non:\n  - pull_request\n\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: shufo/auto-assign-reviewer-by-files@v1.1.2\n        with:\n          config: \"MAINTAINERS\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49af6cbc73931bb1971dd", "level": "level3", "llm_response": " ```yaml\nname: Releaser\non:\n  push:\n    paths-ignore:\n      - '**/.gitignore'\n      - '**/.github/workflows'\n    paths:\n      - '**/version.json'\n\njobs:\n  releaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n\n      - name: Build and test\n        run: |\n          go mod tidy\n          go test ./...\n\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git checkout -b release-${GITHUB_REF/refs\\/heads\\//}\n          git add -A\n          git commit -m \"Release ${GITHUB_REF/refs\\/heads\\//}\"\n          git push --set-upstream origin release-${GITHUB_REF/refs\\/heads\\//}\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\nname: Releaser\non:\n  push:\n    paths: [ 'version.json' ]\n\njobs:\n  releaser:\n    uses: protocol/.github/.github/workflows/releaser.yml@master\n```"}
{"id": "63c49baab008460c1df35d33", "level": "level3", "llm_response": " ```yaml\nname: Launchpad Mirror\non:\n  push:\n    branches:\n      - master\nconcurrency:\n  group: lp-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setting up bazaar\n        run: |\n          sudo apt-get update && sudo apt-get install bazaar\n      - name: Checkout trunk\n        uses: actions/checkout@v2\n        with:\n          ref: trunk\n      - name: Checkout master\n        uses: actions/checkout@v2\n        with:\n          ref: master\n      - name: Cleaning tree\n        run: bazaar clean\n      - name: Copying files\n        run: |\n          cp -R trunk/* master/\n      - name: Committing and pushing changes\n        run: |\n          bazaar commit -m \"Mirror master to trunk\"\n          bazaar push -s origin trunk\n        env:\n          LP_SSH: ${{ secrets.LP_SSH }}\n          LP_HOST: ${{ secrets.LP_HOST }}\n```", "answer": "```yaml name: Launchpad Mirror\nconcurrency:\n  group: lp-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - master\njobs:\n  mirror:\n    if: github.repository == 'widelands/widelands'\n    name: Synchronizing Launchpad trunk with GitHub master\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setting up bazaar\n      run: |\n        sudo apt-get update\n        sudo apt-get install bzr\n        mkdir ~/.ssh || true\n        echo \"${{ secrets.LP_SSH }}\" > ~/.ssh/id_rsa\n        chmod 400 ~/.ssh/id_rsa\n        echo \"${{ secrets.LP_HOST }}\" > ~/.ssh/known_hosts\n        eval \"$(ssh-agent -s)\"\n        ssh-add ~/.ssh/id_rsa\n        bzr whoami \"The Widelands Bunnybot <bunnybot@widelands.org>\"\n        bzr launchpad-login \"widelandsofficial\"\n    - name: Checkout trunk\n      run: |\n        cd ~\n        bzr branch lp:widelands wl_trunk\n    - name: Checkout master\n      run: |\n        cd ~\n        git clone --depth=1 https://github.com/widelands/widelands.git wl_master\n    - name: Cleaning tree\n      run: |\n        cd ~/wl_trunk\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".bzr\" ]\n          then\n            rm -r \"$file\"\n          fi\n        done\n    - name: Copying files\n      run: |\n        cd ~/wl_master\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".git\" ]\n          then\n            cp -r $file ~/wl_trunk/$file\n          fi\n        done\n        cd ~/wl_trunk\n        mv .gitignore .bzrignore\n    - name: Committing and pushing changes\n      run: |\n        cd ~/wl_trunk\n        commit_message=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/$GITHUB_SHA\" | grep -F \"\\\"message\\\": \")\n        commit_message=${commit_message#*: \\\"}\n        commit_message=${commit_message%\\\",}\n        commit_message=\"$commit_message\\n\\n(by $GITHUB_ACTOR)\\n$GITHUB_SHA\"\n        commit_message=${commit_message//\"\\r\\n\"/\"\\n\"}\n        printf \"$commit_message\" > ~/temp_commit_message\n        bzr remove\n        bzr add\n        bzr commit --strict -F ~/temp_commit_message\n        set +e\n        check_for_remote_changes=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/master\" | grep -m 1 \"\\\"sha\\\": \")\n        set -e\n        check_for_remote_changes=${check_for_remote_changes#*: \\\"}\n        check_for_remote_changes=${check_for_remote_changes%\\\",}\n        if [ \"$check_for_remote_changes\" == \"$GITHUB_SHA\" ]\n        then\n          bzr push :parent\n        else\n          echo \"master was updated from '$GITHUB_SHA' to '$check_for_remote_changes', cancel\"\n          exit 1\n        fi\n```"}
{"id": "63c4978e517fc08c1eed7b18", "level": "level3", "llm_response": " ```yaml\nname: Cancel\n\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\n\njobs:\n  cancel:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: null\n      contents: null\n      pull-requests: null\n      repo: null\n\n    steps:\n      - name: Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          token: ${{ github.token }}\n```", "answer": "```yaml name: Cancel\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\npermissions: {} # none\njobs:\n  cancel:\n    permissions:\n      actions: write\n    name: Cancel Previous Runs\n    runs-on: ubuntu-latest\n    timeout-minutes: 3\n    steps:\n      - uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          workflow_id: nodejs.yml\n          access_token: ${{ github.token }}\n```"}
{"id": "63c49ed7b008460c1df49e8e", "level": "level3", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for merge conflicts\n        uses: mschilde/auto-label-merge-conflicts@2e8fcc76c6430272ec8bb64fb74ec1592156aa6a\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: 'Check for merge conflicts'\non:\n  push:\n    branches:\n      - master\njobs:\n  triage:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: mschilde/auto-label-merge-conflicts@2e8fcc76c6430272ec8bb64fb74ec1592156aa6a\n        with:\n          CONFLICT_LABEL_NAME: 'Merge Conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          WAIT_MS: 8000\n```"}
{"id": "63c499ce1899db58864e9096", "level": "level3", "llm_response": " ```yaml\nname: Check Enforcer\non:\n  workflow_dispatch:\n  pull_request_target:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested]\n  issues:\n    types: [labeled, unlabeled, opened, closed]\n  check_suite:\n    types: [completed]\n  issue_comment:\n    types: [created]\n\njobs:\n  event-handler:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: none\n      contents: none\n      pull-requests: none\n      issues: none\n\n    steps:\n      - name: ''\n        run: |\n          echo \"Handle ${{ github.event_name }} ${{ github.event.action }} event\"\n          # Here you can add the logic for handling the event\n          # You might use secrets.GITHUB_TOKEN for authentication if needed\n          # Example: using azure/azure-sdk-actions or any other action\n```\n\nPlease note that the step name and the logic inside the `run` command are placeholders. You should replace them with the actual commands and actions you want to perform based on the event. Also, remember to replace the `echo` command with the actual code that should run for each event. The permissions section disables all permissions for the GITHUB_TOKEN across all scopes as requested.", "answer": "```yaml # NOTE: currently azure-sdk-actions only hosts check enforcer code.\n# If further functionality is added, this name should be updated to reflect\n# the more generic behavior\nname: Check Enforcer\n\non:\n  check_suite:\n    types: [completed]\n  issue_comment:\n    types: [created]\n\npermissions: {}\n\njobs:\n  event-handler:\n    permissions:\n      statuses: write # to set status (azure/azure-sdk-actions)\n      pull-requests: read # to read pull requests (azure/azure-sdk-actions)\n      checks: read # to read check status (azure/azure-sdk-actions)\n    name: Handle ${{ github.event_name }} ${{ github.event.action }} event\n    runs-on: ubuntu-latest\n    steps:\n      - uses: azure/azure-sdk-actions@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c498b51842bc13d776be8f", "level": "level3", "llm_response": " ```yaml\nname: format-check\n\non:\n  push:\n    branches:\n      - master\n      - release-*\n      - tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        julia-version: ['1.x', '1.6']\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n\n      - name: Set up Julia environment\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - name: Install JuliaFormatter and format\n        run: |\n          using Pkg\n          Pkg.add(\"JuliaFormatter\")\n          Pkg.add(\"Formatting\")\n\n      - name: Format check\n        run: |\n          using JuliaFormatter\n          format_check()\n```", "answer": "```yaml name: format-check\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'release-'\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - uses: actions/checkout@v1\n      - name: Install JuliaFormatter and format\n        # This will use the latest version by default but you can set the version like so:\n        #\n        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\", version=\"0.13.0\"))'\n        run: |\n          julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\"))'\n          julia  -e 'using JuliaFormatter; format(\".\", verbose=true)'\n      - name: Format check\n        run: |\n          julia -e '\n          out = Cmd(`git diff`) |> read |> String\n          if out == \"\"\n              exit(0)\n          else\n              @error \"Some files have not been formatted !!!\"\n              write(stdout, out)\n              exit(1)\n          end'\n```"}
{"id": "63c49c896fc19abdf9cc3935", "level": "level3", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n\n      - name: Run linter\n        run: flake8 .\n\n      - name: Run tests\n        run: pytest\n\n      - name: Commit and push\n        run: |\n          git config --global user.email \"action@github.com\"\n          git config --global user.name \"GitHub Action\"\n          git add -A\n          git commit -m \"pre-commit changes\"\n          git push\n```", "answer": "```yaml # https://pre-commit.com\n# This GitHub Action assumes that the repo contains a valid .pre-commit-config.yaml file.\n---\nname: pre-commit\non:\n  pull_request:\n  push:\n    branches: [master]\n\npermissions:\n  contents: read\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n      - run: pip install pre-commit\n      - run: pre-commit --version\n      - run: pre-commit install\n      - run: pre-commit run --all-files\n```"}
{"id": "63c4a192cbc73931bb1c17ce", "level": "level3", "llm_response": " ```yaml\nname: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.php'\n      - '**.md'\n      - '**.js'\n      - '**.css'\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.ref }}\n\n      - name: Checkout Push\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Install prettier and plugin-php\n        run: |\n          npm install -g prettier\n          npm install -g plugin-php\n\n      - name: Check formatting with Prettier\n        run: |\n          prettier --write \"**/*.php\"\n          prettier --write \"**/*.md\"\n          prettier --write \"**/*.js\"\n          prettier --write \"**/*.css\"\n\n      - name: Prettify code\n        run: |\n          find . -name '*.php' -exec prettier --write {} \\;\n          find . -name '*.md' -exec prettier --write {} \\;\n          find . -name '*.js' -exec prettier --write {} \\;\n          find . -name '*.css' -exec prettier --write {} \\;\n\n      - name: Commit changes\n        run: |\n          git config --global user.name 'GitHub Actions'\n          git config --global user.email 'actions@github.com'\n          git add -A\n          git commit -m \"Prettified code with Prettier\"\n          git push\n```\nNote: The `EndBug/add-and-commit` action is not used in this example as it is not a widely recognized GitHub Action. The steps provided use basic Git commands to commit changes after formatting. If you wish to use an action like `EndBug/add-and-commit`, you would need to replace the commit step with the corresponding action.", "answer": "```yaml name: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"**.php\"\n      - \"**.md\"\n      - \"**.js\"\n      - \"**.css\"\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: actions/checkout@v3\n        with:\n          repository: ${{ github.event.pull_request.head.repo.full_name }}\n          ref: ${{ github.event.pull_request.head.ref }}\n\n      - name: Checkout Push\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/checkout@v3\n\n      - name: Install prettier and plugin-php\n        run: npm install --global prettier @prettier/plugin-php\n\n      - name: Check formatting with Prettier\n        continue-on-error: true\n        run: composer format:check \n\n      - name: Prettify code\n        run: composer format \n\n      - name: Commit changes\n        uses: EndBug/add-and-commit@v9\n        with:\n          message: \"style: Formatted code with Prettier\"\n          default_author: github_actions\n```"}
{"id": "63c49bf26fc19abdf9cbfd17", "level": "level3", "llm_response": " ```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run build\n        run: npm run build\n```", "answer": "```yaml name: Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18.1.0'\n      - run: yarn install\n      - run: yarn build\n```"}
{"id": "63c4984f1899db58864df21d", "level": "level3", "llm_response": " ```yaml\nname: Rust\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Build & Test:\n    runs-on: ${{ runner.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Rust\n        uses: ATiltedTree/setup-rust@v1\n\n      - name: Install Cargo Make\n        uses: davidB/rust-cargo-make@v1\n\n      - name: Cache Cargo Files\n        uses: actions/cache@v3\n        with:\n          path: ~/.cargo/registry\n          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Build\n        run: cargo build --verbose\n\n      - name: Run tests\n        run: cargo test --verbose\n\n      - name: Lint\n        run: cargo clippy --verbose\n```", "answer": "```yaml name: Rust\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  NAME: \"Rust Test\"\n  CARGO_TERM_COLOR: always\n\njobs:\n  build-nd-test:\n    name: Build & Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup | Rust | Nightly\n        uses: ATiltedTree/setup-rust@v1\n        with:\n          rust-version: nightly\n          components: clippy rustfmt\n\n      - uses: davidB/rust-cargo-make@v1\n        name: Install Cargo Make\n\n      - uses: actions/cache@v3\n        name: Cache Cargo Files\n        with:\n          path: |\n            target/release\n            target/debug\n          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Build\n        run: cargo build --verbose\n      - name: Run tests\n        run: cargo test --verbose\n      - name: Lint\n        run: cargo fmt -- --check\n```"}
{"id": "63c49bb61899db58864f54af", "level": "level3", "llm_response": " ```yaml\nname: Flawfinder\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  Flawfinder Checks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: main\n\n      - name: Scan with Flawfinder\n        uses: david-a-wheeler/flawfinder@8e4a779ad59dbfaee5da586aa9210853b701959c\n        with:\n          config-file: './flawfinder.conf'\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          SARIF_FILE: './Flawfinder-analysis-*.sarif'\n```", "answer": "```yaml name: Flawfinder\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  flawfinder:\n    name: Flawfinder Checks\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Scan with Flawfinder\n        uses: david-a-wheeler/flawfinder@8e4a779ad59dbfaee5da586aa9210853b701959c\n        with:\n          arguments: '--sarif ./'\n          output: 'flawfinder_results.sarif'\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{github.workspace}}/flawfinder_results.sarif\n```"}
{"id": "63c499411e3364807578cc03", "level": "level3", "llm_response": " ```yaml\nname: Apex Production Release Workflow\non:\n  workflow_dispatch:\n\njobs:\n  upload-production-release-1gp:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Apex\n        uses: sfdx/actions/setup-apex@v1\n      - name: Upload Production Release\n        run: sfdx force:source:push --targetusername ${{ secrets.SFDC_ORG_URL }}\n    env:\n      SFDC_ORG_URL: ${{ secrets.SFDC_ORG_URL }}\n```\n\nPlease note that the reusable workflows mentioned in the input are not directly used in the YAML above. Instead, I've provided a basic structure for a GitHub Actions workflow that can be triggered manually and includes steps for setting up the Apex environment and uploading a production release. You may need to adjust the steps according to your specific requirements and ensure that the necessary secrets and dependencies are properly configured in your GitHub repository settings.", "answer": "```yaml on:\n  workflow_dispatch: \njobs:\n  upload-production-release-1gp:\n    name: \"Upload Production Release (1GP)\"\n    uses: SFDO-Community/standard-workflows/.github/workflows/production-1gp.yml@main\n    secrets:\n      packaging-org-auth-url: '${{ secrets.PACKAGING_ORG_AUTH_URL }}'\n      dev-hub-auth-url: '${{ secrets.DEV_HUB_AUTH_URL }}'\n```"}
{"id": "63c49db4517fc08c1eefe9e6", "level": "level3", "llm_response": " ```yaml\nname: Failure Help Text\n\non:\n  workflow_run:\n    workflows: ['Build CI']\n    types: [ completed ]\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Post comment to help\n        uses: adafruit/circuitpython-action-library-ci-failed@v1\n        with:\n          message: \"Here's some helpful information to troubleshoot your build failure.\"\n```", "answer": "```yaml # SPDX-FileCopyrightText: 2021 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nname: Failure help text\n\non:\n  workflow_run:\n    workflows: [\"Build CI\"]\n    types:\n      - completed\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}\n    steps:\n    - name: Post comment to help\n      uses: adafruit/circuitpython-action-library-ci-failed@v1\n```"}
{"id": "63c49da71899db58865017eb", "level": "level3", "llm_response": " ```yaml\nname: bundlediff-ios\non:\n  pull_request:\n    branches:\n      - onekey\njobs:\n  build-ios-head:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"::set-output name=dir::$(pwd)/yarn-cache\"\n      - name: Set up Yarn cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ github.sha }}\n      - name: Install Dependency\n        run: yarn install\n      - name: Generate stats.json\n        run: yarn generate-stats\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: stats.json\n          path: stats.json\n\n  build-ios-base:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"::set-output name=dir::$(pwd)/yarn-cache\"\n      - name: Set up Yarn cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ github.sha }}\n      - name: Install Dependency\n        run: yarn install\n      - name: Generate stats.json\n        run: yarn generate-stats\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: stats.json\n          path: stats.json\n\n  compare:\n    needs: [build-ios-head, build-ios-base]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download artifacts\n        uses: actions/download-artifact@v1.5.0\n        with:\n          name: stats.json\n          path: stats.json\n      - name: Compare bundle sizes\n        uses: github/webpack-bundlesize-compare-action@v1.5.0\n        with:\n          base-branch: ${{ github.base_ref }}\n          head-branch: ${{ github.event.pull_request.head.ref }}\n```", "answer": "```yaml name: bundlediff-ios\n\non:\n  pull_request:\n    branches: [onekey]\n\njobs:\n  # Build current and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-head:\n    name: 'Build ios head'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{github.event.pull_request.head.ref}}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: head-stats\n          path: ./packages/app/stats.json\n\n  # Build base for comparison and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-base:\n    name: 'Build ios base'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.base_ref }}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: base-stats\n          path: ./packages/app/stats.json\n\n  # run the action against the stats.json files\n  compare:\n    name: 'Compare base & head bundle sizes'\n    runs-on: ubuntu-latest\n    needs: [build-ios-base, build-ios-head]\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - uses: github/webpack-bundlesize-compare-action@v1.5.0\n        with:\n          title: 'ios bundle diff'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          current-stats-json-path: ./head-stats/stats.json\n          base-stats-json-path: ./base-stats/stats.json\n```"}
{"id": "63c494a58052faa2781ac58c", "level": "level3", "llm_response": " ```yaml\nname: Semantic PR and Commit Messages\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    runs-on: ubuntu-latest\n    uses: influxdata/validate-semantic-github-messages/.github/workflows/semantic.yml\n    with:\n      repository_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml ---\nname: \"Semantic PR and Commit Messages\"\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    uses: influxdata/validate-semantic-github-messages/.github/workflows/semantic.yml@main\n```"}
{"id": "63c49781cbc73931bb180cf0", "level": "level3", "llm_response": " ```yaml\nname: \ud83d\ude4f\ud83c\udffb Lint Test\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      types: [opened, edited, reopened, labeled, unlabeled, synchronize, assigned]\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.18'\n\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: latest\n```", "answer": "```yaml name: \ud83d\ude4f\ud83c\udffb Lint Test\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: Lint Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: latest\n          args: --timeout 5m\n          working-directory: .```"}
{"id": "63c49fea1899db588651014e", "level": "level3", "llm_response": " ```yaml\nname: size\n\non: pull_request\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1\n\n      - name: Check size limit\n        uses: andresz1/size-limit-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49ad26fc19abdf9cb8a3b", "level": "level3", "llm_response": " ```yaml\nname: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  configlet:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    # Additional steps for the job can be added here\n```\n\nThis YAML file defines a GitHub Actions workflow named `Configlet` that is triggered by pull requests, pushes to the `main` branch, and manual dispatch. It grants read access to the `GITHUB_TOKEN` in the `contents` scope for all jobs within the workflow. The job named `configlet` is set to run on the latest Ubuntu runner. Additional steps for the job can be added as needed.", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```"}
{"id": "63c49b2ecbc73931bb1988db", "level": "level3", "llm_response": " ```yaml\nname: test\n\non:\n  schedule:\n    - cron: '0 7 * * 0'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n  pull_request:\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: v3/actions/checkout@v3\n      - name: Setup Node\n        uses: denoland/setup-deno@v1\n      - name: Type check\n        run: |\n          npm install -g @types/node\n          npx tsc --strict\n\n  test:\n    needs: check\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x]\n        deno-version: [v1.x]\n    steps:\n      - name: Checkout\n        uses: v3/actions/checkout@v3\n      - name: Setup Deno\n        uses: denoland/setup-deno@v1\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ runner.temp }}\n          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}\n      - name: Install Vim\n        uses: thinca/action-setup-vim@v1\n        with:\n          executable-path: ${{ steps.vim.outputs.executable-path }}\n      - name: Check Vim\n        run: |\n          nvim -c \":set syntax=json\"\n          nvim -c \":echo @%:s/\\..*$//\"\n      - name: Check Neovim\n        uses: thinca/action-setup-nvim@v1\n        with:\n          executable-path: ${{ steps.nvim.outputs.executable-path }}\n      - name: Test\n        run: |\n          npx deno test\n```\nPlease note that this YAML file is a template and might need adjustments to fit the specific requirements of your project. The `steps` for each job should contain the actual commands you want to run for linting, formatting, and testing your TypeScript code. The `cache` step is used to cache dependencies for faster subsequent runs. The `Install Vim` and `Check Vim` steps are placeholders for setting up and checking Vim, and you may need to replace them with actual steps that fit your needs. Similarly, the `Check Neovim` step is a placeholder for setting up and checking Neovim. The `Test` step assumes you are using Deno for testing; adjust accordingly if you are using a different testing framework.", "answer": "```yaml name: test\n\nenv:\n  DENOPS_PATH: \"./\"\n  DENO_DIR: \".deno\"\n\non:\n  schedule:\n    - cron: \"0 7 * * 0\"\n  push:\n    branches:\n      - main\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n  pull_request:\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n\ndefaults:\n  run:\n    shell: bash --noprofile --norc -eo pipefail {0}\n\njobs:\n  check:\n    strategy:\n      matrix:\n        runner:\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - name: Lint check\n        run: make lint\n      - name: Format check\n        run: make fmt-check\n      - name: Type check\n        run: make type-check\n\n  test:\n    strategy:\n      matrix:\n        runner:\n          - windows-latest\n          - macos-latest\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n        host_version:\n          - vim: \"v8.2.3452\"\n            nvim: \"v0.6.0\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        id: cache\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - uses: thinca/action-setup-vim@v1\n        id: vim\n        with:\n          vim_type: \"Vim\"\n          vim_version: \"${{ matrix.host_version.vim }}\"\n          download: \"never\"\n      - name: Check Vim\n        run: |\n          echo ${DENOPS_TEST_VIM}\n          ${DENOPS_TEST_VIM} --version\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n      - uses: thinca/action-setup-vim@v1\n        id: nvim\n        with:\n          vim_type: \"Neovim\"\n          vim_version: \"${{ matrix.host_version.nvim }}\"\n      - name: Check Neovim\n        run: |\n          echo ${DENOPS_TEST_NVIM}\n          ${DENOPS_TEST_NVIM} --version\n        env:\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n      - name: Test\n        run: make test\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n        timeout-minutes: 5\n```"}
{"id": "63c49dc01899db58865021ca", "level": "level3", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rust: [stable, beta, nightly]\n\n    steps:\n    - name: Setup Rust\n      uses: v1/setup-rust-action@v1\n      with:\n        rust-version: ${{ matrix.rust }}\n\n    - name: Checkout\n      uses: actions/checkout@v1\n\n    - name: Setup MUSL\n      run: cargo build --release --target x86_64-unknown-linux-musl\n\n    - name: Build for Linux\n      run: cargo build --release --target x86_64-unknown-linux-gnu\n\n    - name: Build for macOS\n      run: xcodebuild -sdk iphonesimulator -configuration Release\n\n    - name: Build for Windows\n      run: cargo build --release --target x86_64-pc-windows-gnu\n\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        name: Release ${{ github.ref }}\n        tag_name: ${{ github.ref }}\n        prerelease: false\n        draft: false\n        files: |\n          dist/release/*\n        secrets: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        rust: [stable]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Setup Rust\n      uses: hecrj/setup-rust-action@v1\n      with:\n        rust-version: ${{ matrix.rust }}\n    - name: Checkout\n      uses: actions/checkout@v1\n    - name: Setup MUSL\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        rustup target add x86_64-unknown-linux-musl\n        sudo apt-get -qq install musl-tools\n    - name: Build for linux\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        make release_lnx\n        cargo install --locked cargo-rpm\n        make release_rpm\n    - name: Build for macOS\n      if: matrix.os == 'macOS-latest'\n      run: make release_mac\n    - name: Build for Windows\n      if: matrix.os == 'windows-latest'\n      run: make release_win\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        body: '[Changelog](https://github.com/dalance/procs/blob/master/CHANGELOG.md)'\n        files: \"*.zip\\n*.rpm\"\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4970b33b087f6bde2fef6", "level": "level3", "llm_response": " ```yaml\nname: Update Flex Archives\non:\n  workflow_dispatch:\n\njobs:\n  call-flex-update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n      - name: Call Flex Update Archived\n        uses: symfony/recipes/.github/workflows/callable-flex-update-archived.yml\n        with:\n          php-version: '8.0'\n```", "answer": "```yaml name: Update Flex Archives\n\non: [workflow_dispatch]\n\njobs:\n    call-flex-update:\n        uses: symfony/recipes/.github/workflows/callable-flex-update-archived.yml@main\n```"}
{"id": "63c49fdb517fc08c1ef0c477", "level": "level3", "llm_response": " ```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    id: build\n    steps:\n      - name: Checkout code\n        uses: d171c3b028d844f2bf14e9fdec0c58114451e4bf@v1\n      - name: Set up Python\n        uses: actions/setup-python@v3\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Build and sign artifacts\n        run: python build.py\n      - name: Generate hashes for provenance\n        id: hash\n        run: python generate_hashes.py\n      - name: Upload built packages\n        run: python upload_packages.py\n      - name: Upload smoketest-artifacts\n        run: python upload_smoketest_artifacts.py\n\n  generate-provenance:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download artifacts directories\n        run: python download_artifacts.py\n      - name: Generate build provenance\n        run: python generate_provenance.py\n\n  release-pypi:\n    needs: generate-provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download artifacts directories\n        run: python download_artifacts.py\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@v3\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n\n  release-github:\n    needs: generate-provenance\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download artifacts directories\n        run: python download_artifacts.py\n      - name: Upload artifacts to GitHub\n        uses: actions/upload-artifact@v3\n        with:\n          name: release-artifacts\n          path: ./artifacts\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  build:\n    name: Build and sign artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n    outputs:\n      hashes: ${{ steps.hash.outputs.hashes }}\n    steps:\n      - uses: actions/checkout@d171c3b028d844f2bf14e9fdec0c58114451e4bf\n\n      - uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a\n\n      - name: deps\n        run: python -m pip install -U build\n\n      - name: build\n        run: python -m build\n\n      - name: sign\n        run: |\n          mkdir -p smoketest-artifacts\n\n          # we smoke-test sigstore by installing each of the distributions\n          # we've built in a fresh environment and using each to sign and\n          # verify for itself, using the ambient OIDC identity\n          for dist in dist/*; do\n            dist_base=\"$(basename \"${dist}\")\"\n\n            python -m venv smoketest-env\n\n            ./smoketest-env/bin/python -m pip install \"${dist}\"\n\n            # NOTE: signing artifacts currently go in a separate directory,\n            # to avoid confusing the package uploader (which otherwise tries\n            # to upload them to PyPI and fails). Future versions of twine\n            # and the gh-action-pypi-publish action should support these artifacts.\n            ./smoketest-env/bin/python -m \\\n              sigstore sign \"${dist}\" \\\n              --output-signature smoketest-artifacts/\"${dist_base}.sig\" \\\n              --output-certificate smoketest-artifacts/\"${dist_base}.crt\"\n\n            ./smoketest-env/bin/python -m \\\n              sigstore verify \"${dist}\" \\\n              --cert \"smoketest-artifacts/${dist_base}.crt\" \\\n              --signature \"smoketest-artifacts/${dist_base}.sig\" \\\n              --cert-oidc-issuer https://token.actions.githubusercontent.com\n\n            rm -rf smoketest-env\n          done\n\n      - name: Generate hashes for provenance\n        shell: bash\n        id: hash\n        run: |\n          # sha256sum generates sha256 hash for all artifacts.\n          # base64 -w0 encodes to base64 and outputs on a single line.\n          # sha256sum artifact1 artifact2 ... | base64 -w0\n          echo \"hashes=$(sha256sum ./dist/* | base64 -w0)\" >> $GITHUB_OUTPUT\n\n      - name: Upload built packages\n        uses: actions/upload-artifact@v3\n        with:\n          name: built-packages\n          path: ./dist/\n          if-no-files-found: warn\n\n      - name: Upload smoketest-artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: smoketest-artifacts\n          path: smoketest-artifacts/\n          if-no-files-found: warn\n\n  generate-provenance:\n    needs: [build]\n    name: Generate build provenance\n    permissions:\n      actions: read   # To read the workflow path.\n      id-token: write # To sign the provenance.\n      contents: write # To add assets to a release.\n    # Currently this action needs to be referred by tag. More details at:\n    # https://github.com/slsa-framework/slsa-github-generator#verification-of-provenance\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1\n    with:\n      attestation-name: provenance-sigstore-${{ github.event.release.tag_name }}.intoto.jsonl\n      base64-subjects: \"${{ needs.build.outputs.hashes }}\"\n      upload-assets: true\n\n  release-pypi:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions: {}\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: publish\n        uses: pypa/gh-action-pypi-publish@717ba43cfbb0387f6ce311b169a825772f54d295\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n          packages_dir: built-packages/\n\n  release-github:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload release assets.\n      contents: write\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: Upload artifacts to github\n        # Confusingly, this action also supports updating releases, not\n        # just creating them. This is what we want here, since we've manually\n        # created the release that triggered the action.\n        uses: softprops/action-gh-release@v1\n        with:\n          # smoketest-artifacts/ contains the signatures and certificates.\n          files: |\n            built-packages/*\n            smoketest-artifacts/*\n```"}
{"id": "63c49e1d517fc08c1ef013af", "level": "level3", "llm_response": " ```yaml\nname: Gather Bazel Execution Logs\n\non:\n  workflow_dispatch:\n\njobs:\n  run-a:\n    runs-on: ubuntu-latest\n    steps:\n      - name: CHECKOUT REPOSITORY\n        uses: actions/checkout@v3\n      - name: CONFIGURE BAZEL\n        run: |\n          echo \"Configuring Bazel for target-this: ${{ github.event.inputs.target }}\"\n          # Bazel configuration steps here\n      - name: RUN TESTS\n        run: |\n          echo \"Running tests for target-this: ${{ github.event.inputs.target }}\"\n          # Test execution steps here\n      - name: SAVE EXECUTION LOG BINARY\n        run: |\n          echo \"Saving execution log binary for target-this: ${{ github.event.inputs.target }}\"\n          # Log binary saving steps here\n\n  run-b:\n    runs-on: ubuntu-latest\n    steps:\n      - name: CHECKOUT REPOSITORY\n        uses: actions/checkout@v3\n      - name: CONFIGURE BAZEL\n        run: |\n          echo \"Configuring Bazel for target-this: ${{ github.event.inputs.target }}\"\n          # Bazel configuration steps here\n      - name: RUN TESTS\n        run: |\n          echo \"Running tests for target-this: ${{ github.event.inputs.target }}\"\n          # Test execution steps here\n      - name: SAVE EXECUTION LOG BINARY\n        run: |\n          echo \"Saving execution log binary for target-this: ${{ github.event.inputs.target }}\"\n          # Log binary saving steps here\n\n  parse-logs:\n    needs: [run-a, run-b]\n    runs-on: ubuntu-latest\n    steps:\n      - name: CHECKOUT BAZEL\n        uses: actions/checkout@v3\n      - name: MOUNT BAZEL CACHE\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/bazel\n          key: ${{ runner.os }}-bazel-${{ github.sha }}\n      - name: BUILD EXECLOG PARSER\n        run: |\n          echo \"Building execution log parser\"\n          # Parser build steps here\n      - name: FETCH LOGS\n        run: |\n          echo \"Fetching logs\"\n          # Log fetching steps here\n      - name: PARSE LOGS\n        run: |\n          echo \"Parsing logs\"\n          # Log parsing steps here\n      - name: SAVE PARSED LOGS\n        run: |\n          echo \"Saving parsed logs\"\n          # Parsed logs saving steps here\n\nenv:\n  BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}\n  matrix.cache_name: bazel-cache\n  matrix.erlang_version: latest\n```\nNote: Replace the placeholder comments with actual commands or scripts needed for configuring Bazel, running tests, saving log binaries, building the execution log parser, fetching logs, and parsing logs. The `env` section includes the variable `BUILDBUDDY_API_KEY` and sets up a cache name and Erlang version for the matrix. Adjust the `matrix` settings as needed for your specific workflow.", "answer": "```yaml name: Gather Bazel Execution Logs\non:\n  workflow_dispatch:\n    inputs:\n      target:\n        description: 'A bazel label representing the test target'\n        required: true\n        default: '//deps/rabbit:rabbit_stream_queue_SUITE'\njobs:\n  run-a:\n    name: Run A\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-A\n        path: /tmp/exec.log\n  run-b:\n    name: Run B\n    needs: run-a\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-B\n        path: /tmp/exec.log\n  parse-logs:\n    name: Parse Logs\n    needs: [run-a, run-b]\n    runs-on: ubuntu-latest\n    steps:\n    - name: CHECKOUT BAZEL\n      uses: actions/checkout@v3\n      with:\n        repository: bazelbuild/bazel\n        path: bazel\n    - name: MOUNT BAZEL CACHE\n      uses: actions/cache@v3.0.11\n      with:\n        path: \"/home/runner/.cache/bazel\"\n        key: bazel\n    - name: BUILD EXECLOG PARSER\n      working-directory: bazel\n      run: |\n        bazelisk build src/tools/execlog:parser\n    - name: FETCH LOGS\n      uses: actions/download-artifact@v3\n    - name: PARSE LOGS\n      run: |\n        bazel/bazel-bin/src/tools/execlog/parser \\\n          --log_path=./execution-log-binary-A/exec.log \\\n          --log_path=./execution-log-binary-B/exec.log \\\n          --output_path=/tmp/execution-log-binary-A.log.txt \\\n          --output_path=/tmp/execution-log-binary-B.log.txt\n    - name: SAVE PARSED LOGS\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: parsed-logs\n        path: /tmp/execution-log-binary-*.log.txt\n```"}
{"id": "63c4979fb008460c1df1c263", "level": "level3", "llm_response": " ```yaml\nname: CMake-Android\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup Android NDK\n        id: setup-ndk\n        uses: nttld/setup-ndk@v1\n        with:\n          path: ${{ github.workspace }}\n          version: latest\n        env:\n          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n      - name: Prepare build environment\n        run: |\n          # Add commands to prepare the build environment here\n\n      - name: Build\n        run: |\n          # Add build commands here\n```", "answer": "```yaml name: CMake-Android\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.\n    # You can convert this to a matrix build if you need cross-platform coverage.\n    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - uses: nttld/setup-ndk@v1\n      id: setup-ndk\n      with:\n        ndk-version: r23c\n        add-to-path: false\n    - run: echo ${{env.ANDROID_NDK_HOME}}\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n        \n   # - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n   #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      # Build your program with the given configuration\n      run: mkdir ${{github.workspace}}/build; cd ${{github.workspace}}/build; cmake .. -DCMAKE_TOOLCHAIN_FILE=${{env.ANDROID_NDK_HOME}}/build/cmake/android.toolchain.cmake  -DANDROID_ABI=arm64-v8a  -DANDROID_PLATFORM=android-23;make\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n```"}
{"id": "63c495b88052faa2781b3bd6", "level": "level3", "llm_response": " ```yaml\nname: auto-merge\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto Merge\n        uses: ahmadnassri/action-dependabot-auto-merge@v2.4\n        with:\n          token: ${{ secrets.AUTOMERGE_TOKEN }}\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.4\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          target: minor\n```"}
{"id": "63c49cdd6fc19abdf9cc5ae4", "level": "level3", "llm_response": " ```yaml\nname: Dependabot - Recreate - remove label\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, labeled, unlabeled, assigned, draft-changed, locked, unlocked]\n\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Remove Labels\n        env:\n          LABELS_TO_REMOVE: ${{ github.event.pull_request.labels.map(label => label.name).join(',') }}\n        run: |\n          # Logic to remove labels from the pull request\n          # This is a placeholder, actual implementation will depend on the API and tooling used\n          echo \"Removing labels: $LABELS_TO_REMOVE\"\n```\n\nPlease note that the actual implementation of removing labels from a pull request will depend on the specific API and tooling you are using. The above YAML file sets up the workflow structure and includes a placeholder for the label removal logic. You will need to replace the placeholder with the actual commands or scripts that interact with your repository's API to remove the labels.", "answer": "```yaml name: Dependabot - Recreate - remove label.\non:\n  pull_request:\n    types:\n      - synchronize\n\npermissions: read-all\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    # if: ${{ github.event.action == 'synchronize'}}\n    permissions:\n      pull-requests: write\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Remove Labels\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh pr edit --remove-label \"dependabot:recreate\"  ${{ github.event.pull_request.number }}\n```"}
{"id": "63c49d82b008460c1df41798", "level": "level3", "llm_response": " ```yaml\nname: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - '1.x'\n      - '2.x'\n    tags:\n      - '*'\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    steps:\n      - name: mirror\n        uses: v1/git-mirror-action@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          gitee-ssh-private-key: ${{ secrets.GITEE_SSH_PRIVATE_KEY }}\n          gitee-repo-url: ${{ github.repository_url | replace('github.com', 'gitee.com') }}\n```\nPlease note that the `gitee-repo-url` step assumes that you have a way to replace `github.com` with `gitee.com` in the repository URL. You may need to add additional logic or a custom action to achieve this transformation if it's not straightforward.", "answer": "```yaml name: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - 1.x\n      - 2.x\n  create:\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    if: github.repository == 'Happy-Coding-Clans/vue-easytable'\n    steps:\n      - name: mirror\n        continue-on-error: true\n        if: github.event_name == 'push' || (github.event_name == 'create' && github.event.ref_type == 'tag')\n        uses: wearerequired/git-mirror-action@v1\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_SSH_PRIVATE_KEY }}\n        with:\n          source-repo: 'git@github.com:Happy-Coding-Clans/vue-easytable.git'\n          destination-repo: 'git@gitee.com:huangshuwei/vue-easytable.git'\n```"}
{"id": "63c4a14033b087f6bde718a8", "level": "level3", "llm_response": " ```yaml\nname: ROCM Docker Image Build\non:\n  workflow_dispatch:\n    inputs:\n      rocm_release:\n        description: 'ROCM release version'\n        required: true\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up ROCm\n        uses: ROCmSoftwarePlatform/actions/.github/workflows/rocm-release.yml@main\n        with:\n          rocm_release: ${{ github.event.inputs.rocm_release }}\n      - name: Build Docker Image\n        run: docker build -t rocm:${{ github.event.inputs.rocm_release }} .\n      - name: Push Docker Image\n        run: |\n          echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n          docker push rocm:${{ github.event.inputs.rocm_release }}\n```", "answer": "```yaml name: ROCM Docker image build\n\non:\n  workflow_dispatch:\n    inputs:\n      rocm_release:\n        description: ROCm release version\n        required: true\n\njobs:\n  release:\n    uses: ROCmSoftwarePlatform/actions/.github/workflows/rocm-release.yml@main\n    with:\n      rocm_release: ${{ github.event.inputs.rocm_release }}\n    secrets:\n      gh_token: ${{ secrets.MIGRAPHX_BOT_TOKEN }}\n```"}
{"id": "63c4974933b087f6bde31709", "level": "level3", "llm_response": " ```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: First Interaction\n        uses: actions/first-interaction@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Hi \ud83d\ude04, thanks for creating your first issue at Amazing CSS-Effects project!\ud83d\ude80\u26a1. Do read and follow the [Code of Conduct](https://github.com/arpit456jain/Amazing-Css-Effects/blob/master/CODE_OF_CONDUCT.md) while contributing.'\n        pr-message: 'Thank you for your pull request and welcome to our community! We will soon be getting back to you. Your patience will be greatly appreciated!Thanks! \ud83e\udd73'\n\n```"}
{"id": "63c49e391899db58865053ba", "level": "level3", "llm_response": " ```yaml\nname: Semgrep\n\non:\n  pull_request:\n  push:\n    branches:\n      - dev\n      - main\n  schedule:\n    - cron: '0 20 * * 1'\n\njobs:\n  Scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Run Semgrep\n        run: semgrep .\n\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          SARIF_FILE: ${{ github.workspace }}/semgrep-results.sarif\n```", "answer": "```yaml name: Semgrep\n\non:\n  # Scan changed files in PRs, block on new issues only (existing issues ignored)\n  pull_request:\n\n  push:\n    branches: [\"dev\", \"main\"]\n\n  schedule:\n    - cron: '23 20 * * 1'\n\njobs:\n  semgrep:\n    name: Scan\n    runs-on: ubuntu-latest\n    container:\n      image: returntocorp/semgrep\n    # Skip any PR created by dependabot to avoid permission issues\n    if: (github.actor != 'dependabot[bot]')\n    steps:\n      # Fetch project source\n      - uses: actions/checkout@v3\n\n      - run: semgrep scan --sarif --output=semgrep.sarif\n        env:\n          SEMGREP_RULES: >- # more at semgrep.dev/explore\n            p/security-audit\n            p/secrets\n            p/owasp-top-ten\n\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: semgrep.sarif\n        if: always()```"}
{"id": "63c49b8b6fc19abdf9cbd32f", "level": "level3", "llm_response": " ```yaml\nname: Publish to PyPI\n\non:\n  release:\n    types: [published]\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n\n      - name: Build\n        run: |\n          python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@v1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```", "answer": "```yaml name: Publish to PyPI\n\non:\n  release:\n    types: [released, prereleased]\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install wheel\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: '__token__'\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"id": "63c49ec7cbc73931bb1afa42", "level": "level3", "llm_response": " ```yaml\nname: Weekly Build\n\non:\n  schedule:\n    - cron: '0 10 * * 0'\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: Setup test environment\n        run: echo \"Setting up test environment\"\n      - name: Run darglint\n        run: echo \"Running darglint\"\n\n  build_posix:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: Get friendly Python version for nox\n        run: echo \"Getting friendly Python version for nox\"\n      - name: Ensure openssl installed for macos\n        run: echo \"Ensuring openssl installed for macos\"\n      - name: Setup test environment\n        run: echo \"Setting up test environment\"\n      - name: Run nox\n        run: echo \"Running nox\"\n```", "answer": "```yaml name: Weekly Build\n\non:\n  schedule:\n    # weekly at 0300 PST/1000 UTC on Sunday\n    - cron: '0 10 * * 0'\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 1\n      matrix:\n        os: [ubuntu-latest]\n        version: [\"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox darglint\n        run: python -m nox -s darglint\n\n  build_posix:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 8\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: get friendly (for nox) python version\n        # not super friendly looking, but easy way to get major.minor version so we can easily exec only the specific\n        # version we are targeting with nox, while still having versions like 3.9.0a4\n        run: |\n          echo \"FRIENDLY_PYTHON_VERSION=$(python -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\")\" >> $GITHUB_ENV\n      - name: ensure openssl installed for macos\n        # openssl missing/being linked incorrectly causes ssh2-python install failures\n        if: matrix.os == 'macos-latest'\n        run: |\n          brew install openssl\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox\n        env:\n          # needed to make the terminal a tty (i think? without this system ssh is super broken)\n          TERM: xterm\n        run: python -m nox -p $FRIENDLY_PYTHON_VERSION -k \"not darglint\"```"}
{"id": "63c498da33b087f6bde3b76e", "level": "level3", "llm_response": " ```yaml\nname: Normalize Composer\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ inputs.php || '8.1' }}\n          extensions: mbstring\n\n      - name: Install Composer Normalizer\n        run: composer require stefans/composer-normalizer\n\n      - name: Normalize the root composer.json file\n        run: composer normalize --config-file=.php-version\n\n      - name: Normalize the packages composer.json files\n        run: composer global require stefans/composer-normalizer && composer normalize\n\n      - name: Commit linted files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: ${{ inputs.message || 'Normalize composer.json files' }}\n```", "answer": "```yaml name: Normalize Composer\n\non:\n  workflow_dispatch:\n    inputs:\n      php:\n        default: \"8.1\"\n        type: string\n        required: false\n      message:\n        default: Normalize composer.json files\n        type: string\n        required: false\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ inputs.php }}\n          extensions: curl, dom, json, libxml, mbstring\n          coverage: none\n\n      - name: Install Composer Normalizer\n        run: |\n          composer global config --no-plugins allow-plugins.ergebnis/composer-normalize true\n          composer global require ergebnis/composer-normalize\n\n      - name: Normalize the root composer.json file\n        run: composer normalize\n\n      - name: Normalize the packages composer.json files\n        run: find src -name \"composer.json\" -print -exec composer normalize {} \\;\n\n      - name: Commit linted files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: ${{ inputs.message }}\n```"}
{"id": "63c498dfcbc73931bb189e97", "level": "level3", "llm_response": " ```yaml\nname: Arma\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n        uses: actions/checkout@master\n      - name: Validate SQF\n        uses: arma-actions/bom-check@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Validate Config\n        run: |\n          # Add validation logic here\n      - name: Check Strings\n        run: |\n          # Add string checking logic here\n      - name: Check for BOM\n        uses: arma-actions/bom-check@master\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n        uses: actions/checkout@master\n      - name: Lint (sqflint)\n        uses: arma-actions/sqflint@v2-preview\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n        uses: actions/checkout@master\n      - name: Build using HEMTT\n        run: |\n          # Add build logic here\n      - name: Upload Artifact\n        uses: actions/upload-artifact@master\n        with:\n          name: build-artifact\n          path: path/to/artifact\n```\nPlease note that you will need to replace `# Add validation logic here`, `# Add string checking logic here`, and `# Add build logic here` with the actual commands or scripts necessary for each step. Also, ensure that the paths and versions used for actions are correct and available in your GitHub repository.", "answer": "```yaml name: Arma\n\non:\n  push:\n    branches:\n    - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Validate SQF\n      run: python3 tools/sqf_validator.py\n    - name: Validate Config\n      run: python3 tools/config_style_checker.py\n    - name: Check Strings\n      run: python3 tools/check_strings.py\n    - name: Check for BOM\n      uses: arma-actions/bom-check@v1\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Lint (sqflint)\n      uses: arma-actions/sqflint@master\n      continue-on-error: true # No failure due to many false-positives\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Build using HEMTT\n      uses: arma-actions/hemtt@master\n      with:\n        command: build --release --ci\n    - name: Upload Artifact\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: CBA_A3-${{ github.sha }}-nobin\n        path: releases/CBA_A3_*.zip\n```"}
{"id": "63c49cf21842bc13d778706c", "level": "level3", "llm_response": " ```yaml\nname: CodeQL Workflow\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: 'read'\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: CodeQL Workflow\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\npermissions:\n  contents: read\n\njobs:\n  codeql:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql/codeql-configuration.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c496d21842bc13d775fae4", "level": "level3", "llm_response": " ```yaml\nname: auto-merge\n\non: [pull_request]\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto Merge Pull Request\n        uses: ahmadnassri/action-dependabot-auto-merge@v2.6\n        with:\n          token: ${{ secrets.AUTOMERGE_TOKEN }}\n```", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.6\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          approve: true\n          target: minor\n```"}
{"id": "63c49cfd1e336480757a4721", "level": "level3", "llm_response": " ```yaml\nname: CI\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: |\n          sudo apt-get update\n          sudo apt-get install postgresql\n      - name: Set up Go\n        uses: actions/setup-go@v1.2.4\n        with:\n          go-version: '1.16'\n      - name: Create PostgreSQL user and tables\n        run: |\n          sudo -u postgres psql -c \"CREATE USER myuser WITH PASSWORD 'mypassword';\"\n          sudo -u postgres psql -c \"CREATE DATABASE mydb OWNER myuser;\"\n      - name: Run Go tests\n        run: go test ./...\n      - name: .\n        run: echo \"Placeholder for additional step\"\n\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v18\n      - name: Check vendor SHA\n        run: |\n          echo \"Placeholder for SHA check logic\"\n```\n\nPlease note that placeholders for additional steps have been added with `echo \"Placeholder for additional step\"` as the actual commands were not provided in the input. You will need to replace these placeholders with the appropriate commands for your workflow.", "answer": "```yaml name: \"CI\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: sudo service postgresql start\n      - uses: actions/checkout@v3\n      - name: Create PostgreSQL user and tables\n        run: |\n          sudo -u postgres psql -c \"CREATE USER ${USER}\"\n          sudo -u postgres psql -c \"CREATE DATABASE lbitests OWNER ${USER}\"\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#run-tests\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#update-vendorsha -- ./nix/letsblockit.nix --check\n```"}
{"id": "63c49e61736e7f0ed8c679c4", "level": "level3", "llm_response": " ```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.16'\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5\n        with:\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n          passphrase: ${{ secrets.PASSPHRASE }}\n\n      - name: Cache Go modules\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/.cache/go-build\n          key: ${{ runner.os }}-${{ hashFiles('**/Gopkg.lock') }}\n\n      - name: Build and publish\n        uses: goreleaser/goreleaser-action@v3.2.0\n        with:\n          version: ${{ github.ref }}\n          release-tag: ${{ github.ref }}\n          env:\n            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          go-importpath: github.com/yourusername/yourrepo\n          gpg-fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}\n```\n\nPlease note that you will need to replace `yourusername/yourrepo` with the actual path to your Go project repository. Additionally, you should ensure that the secrets and variables provided match the ones available in your GitHub repository settings.", "answer": "```yaml name: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5\n        env:\n          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          PASSPHRASE: ${{ secrets.PASSPHRASE }}\n      - uses: actions/cache@v3.0.11\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3.2.0\n        with:\n          version: latest\n          args: release --rm-dist\n          key: ${{ secrets.YOUR_PRIVATE_KEY }}\n        env:\n          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c4952a7843b61269a05dc3", "level": "level3", "llm_response": " ```yaml\nname: main\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Check changelog\n        run: |\n          echo \"Checking changelog for changes...\"\n\n      - name: Build Docker image\n        uses: GabrielBB/xvfb-action@v1\n        with:\n          image-name: my-java-app\n          tag: latest\n          username: ${{ secrets.UPLOAD_USERNAME }}\n          key: ${{ secrets.UPLOAD_PRIVATE_KEY }}\n\n      - name: Build\n        run: ./gradlew build\n\n      - name: Smoke tests\n        run: ./gradlew test\n\n      - name: Upload\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-output\n          path: build/libs/my-java-app-*.jar\n        env:\n          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}\n          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}\n          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}\n          UPLOAD_HOSTNAME: ${{ secrets.UPLOAD_HOSTNAME }}\n```\nNote: The placeholder `my-java-app` should be replaced with the actual image name of your Java application. Also, ensure that the `./gradlew build` and `./gradlew test` commands match the build and test commands for your Java project. Adjust the paths and environment variables as needed for your specific setup.", "answer": "```yaml name: main\n\non:\n  pull_request:\n  push:\n    branches:\n      # Only build on push for master or dev, otherwise branches pushed for PR\n      # are built twice\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Check changelog\n        if: ${{ github.event_name == 'pull_request' }}\n        run: ci/check-changelog \"origin/$GITHUB_BASE_REF\" \"origin/$GITHUB_HEAD_REF\"\n        shell: bash\n\n      - name: Build Docker image\n        run: ci/build-docker-image\n        shell: bash\n\n      - name: Build\n        shell: bash\n        run: ci/docker-build-game SNAPSHOT=1\n        env:\n          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}\n          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}\n          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}\n\n      - name: Smoke tests\n        uses: GabrielBB/xvfb-action@v1\n        with:\n          run: make smoke-tests SNAPSHOT=1\n\n      - name: Upload\n        # Do not upload for pull requests: `make upload` does not work without the upload secrets\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        run: make upload SNAPSHOT=1\n        env:\n          UPLOAD_USERNAME: ${{ secrets.UPLOAD_USERNAME }}\n          UPLOAD_PRIVATE_KEY: ${{ secrets.UPLOAD_PRIVATE_KEY }}\n          UPLOAD_HOSTNAME: ${{ secrets.UPLOAD_HOSTNAME }}\n```"}
{"id": "63c49e5c1e336480757ad079", "level": "level3", "llm_response": " ```yaml\nname: Lint Commit Message\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      types: [opened, synchronize, reopened, labeled, unlabeled, assigned, locked]\n  workflow_dispatch:\n\njobs:\n  lint-commit-message:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Lint commit message\n        uses: wagoid/commitlint-github-action@v4\n        with:\n          config-file: './commitlint.config.yaml'\n```", "answer": "```yaml name: lint commit message\non: [ push, pull_request ]\n\njobs:\n  lint-commit-message:\n    runs-on: [self-hosted, linux, X64]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v4\n        with:\n          configFile: ${{ github.workspace }}/hack/commitlint.config.js\n```"}
{"id": "63c49f6233b087f6bde65d6b", "level": "level3", "llm_response": " ```yaml\nname: HealthChecks KAFKA Preview CD\n\non:\n  push:\n    tags:\n      - 'preview-kafka-*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '6.0.x'\n\n      - name: Restore\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release\n\n      - name: Pack\n        run: dotnet pack --configuration Release --output ./build\n\n      - name: Publish\n        run: |\n          dotnet nuget push ./build/HealthChecks.Kafka.Preview*.nupkg --source 'nuget.org' --api-key ${{ secrets.NUGET_API_KEY }}\n          dotnet nuget push ./build/HealthChecks.Kafka.Preview*.nupkg --source 'github-actions' --api-key ${{ secrets.GITHUB_TOKEN }}\n```\nPlease note that this YAML file assumes the use of a .NET 6.0 version and that you have the `NUGET_API_KEY` set as a secret in your GitHub repository settings. The `GITHUB_TOKEN` is used for pushing packages to GitHub Packages. Adjust the `dotnet-version` and package names as needed for your specific project.", "answer": "```yaml name: HealthChecks KAFKA Preview CD\r\n\r\non:\r\n  push:\r\n    tags:\r\n      - preview-kafka-*\r\n\r\njobs:\r\n  build:\r\n    env:\r\n      BUILD_CONFIG: Release\r\n      VERSION_SUFFIX: -rc2.${{ github.run_number }}\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: dotnet restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj\r\n    - name: Build\r\n      run: dotnet build --no-restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj -c $BUILD_CONFIG\r\n    - name: Pack\r\n      run: dotnet pack --no-build ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj --version-suffix $VERSION_SUFFIX -c $BUILD_CONFIG -o ./artifacts\r\n    - name: Publish\r\n      run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.Kafka.*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate\r\n```"}
{"id": "63c49f63b008460c1df4d69b", "level": "level3", "llm_response": " ```yaml\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Check branch for new commits, and env vars\n        env:\n          TAG_REGEX: '^v[0-9]+(\\.[0-9]+)*$'\n          SINCE_TAG: ${{ github.ref }}\n        run: |\n          echo \"Checking for new commits and environment variables...\"\n\n      - name: Prep changelog file (clear out old lines)\n        run: |\n          echo \"Preparing changelog file...\"\n\n      - name: Generate changelog\n        uses: heinrichreimer/action-github-changelog-generator@v2.1.1\n        with:\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n\n      - name: Small fixes\n        run: |\n          echo \"Applying small fixes...\"\n\n      - name: Diff and consistency check\n        run: |\n          echo \"Checking diff and consistency...\"\n\n      - name: Commit\n        run: |\n          echo \"Committing changes...\"\n\n      - name: Merge to Release branch\n        run: |\n          echo \"Merging changes to the Release branch...\"\n```", "answer": "```yaml # Copyright \u00a9 2012-2022 jrnl contributors\n# License: https://www.gnu.org/licenses/gpl-3.0.html\n\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    if: >\n      ! contains(github.event.head_commit.message, '[ci skip]') &&\n      ! (\n        startsWith(github.event.head_commit.message, 'Increment version to v') &&\n        startsWith(github.ref, 'refs/heads/')\n      )\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n\n      - name: Check branch for new commits, and env vars\n        run: |\n          echo \"::group::git fetch origin --tags --force\"\n          git fetch origin --tags --force\n          echo \"::endgroup::\"\n\n          TAG_REGEX='include-all'\n          echo \"::debug::GITHUB_REF: $GITHUB_REF\"\n          BRANCH=\"${GITHUB_REF##*/}\"\n\n          if [[ $GITHUB_REF =~ ^refs/tags/ ]]; then\n            # This is a tag build (i.e. a release)\n            echo '::debug::Release build'\n            if [[ ! $BRANCH =~ ^v[0-9]+(\\.[0-9]+){1,2}(-(alpha|beta)([0-9]+)?)?$ ]]; then\n              echo \"::error::Invalid tag format: ${BRANCH}\"\n              exit 1\n            fi\n\n            RELEASE=1\n            BRANCH=develop\n            git checkout $BRANCH\n\n            # if actual release (not pre), then changelog should exclude prereleases on update\n            prerelease_regex='(alpha|beta)'\n            if [[ ! ${GITHUB_REF##*/} =~ $prerelease_regex ]]; then\n              echo '::debug::Actual release (not a prerelease)'\n              TAG_REGEX=\"$prerelease_regex\"\n              echo \"FULL_RELEASE=true\" >> \"$GITHUB_ENV\"\n            fi\n          fi\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n\n          if [[ \"$(git rev-parse \"origin/$BRANCH\")\" != \"$GITHUB_SHA\" ]]; then\n            # Normal build on a branch (no tag)\n            echo \"::debug::BRANCH: $BRANCH $(git rev-parse origin/$BRANCH)\"\n            echo \"::debug::GITHUB_SHA: $GITHUB_SHA\"\n            echo \"::error::$BRANCH has been updated since build started. Aborting changelog.\"\n            exit 1\n          fi\n\n          SINCE_TAG=$(git tag --sort=-creatordate | grep -Ev \"$TAG_REGEX\" | awk \"NR==$(( 1 + ${RELEASE:-0} ))\")\n\n          echo \"::debug::BRANCH: $BRANCH\"\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n          echo \"::debug::FILENAME: CHANGELOG.md\"\n          echo \"::debug::SINCE_TAG: $SINCE_TAG\"\n\n          {\n          echo \"BRANCH=$BRANCH\"\n          echo \"TAG_REGEX=$TAG_REGEX\"\n          echo \"FILENAME=CHANGELOG.md\"\n          echo \"SINCE_TAG=$SINCE_TAG\"\n          } >> \"$GITHUB_ENV\"\n\n      - name: Prep changelog file (clear out old lines)\n        run: |\n          # delete the top of the changelog up to the correct tag\n          tagline=$(grep -n \"^## \\[${SINCE_TAG}\\]\" \"$FILENAME\" | awk '{print $1}' FS=':' | head -1)\n          echo \"tagline: ${tagline}\"\n\n          if [[ -z $tagline ]]; then\n            echo \"::error::Something is wrong. ${SINCE_TAG} isn't in the changelog.\"\n            exit 1\n          fi\n\n          if [[ $tagline == 1 ]]; then\n            echo \"::error::Something is wrong.\"\n            echo \"::error::The latest release ${SINCE_TAG} is the first line in the changelog,\"\n            echo \"::error::but the h1 '# Changelog' should always be the first line.\"\n            exit 1\n          fi\n\n          sed -i \"1,$(( tagline - 1 ))d\" \"$FILENAME\"\n          # delete generated line (or it will be added multiple times)\n          sed -i '/This Changelog was automatically generated by/d' \"$FILENAME\"\n          # delete trailing empty lines\n          sed -i -e :a -e '/^\\n*$/{$d;N;};/\\n$/ba' \"$FILENAME\"\n\n      - name: Generate changelog\n        uses: heinrichreimer/action-github-changelog-generator@v2.1.1\n        with:\n          # see: https://github.com/heinrichreimer/action-github-changelog-generator\n          repo: jrnl-org/jrnl\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n          base: CHANGELOG.md\n          addSections: '{\"build\":{\"prefix\":\"**Build:**\",\"labels\":[\"build\"]},\"docs\":{\"prefix\":\"**Documentation:**\",\"labels\":[\"documentation\"]},\"packaging\":{\"prefix\":\"**Packaging:**\",\"labels\":[\"packaging\"]}}'\n          issues: true\n          pullRequests: true\n          issuesWoLabels: false\n          unreleased: true\n          compareLink: true\n          includeLabels: bug,enhancement,documentation,build,packaging,deprecated\n          excludeLabels: stale,wontfix\n          excludeTagsRegex: ${{ env.TAG_REGEX }}\n          sinceTag: ${{ env.SINCE_TAG }}\n          maxIssues: 150\n          releaseUrl: https://pypi.org/project/jrnl/%s/\n          releaseBranch: develop\n          verbose: false\n          author: true\n\n      - name: Small fixes\n        run: |\n          # Change unreleased link to correct url\n          sed -i 's!https://pypi.org/project/jrnl/HEAD/!https://github.com/jrnl-org/jrnl/!' \"$FILENAME\"\n\n      - name: Diff and consistency check\n        run: |\n          git diff\n          if [[ $(grep -c '^# Changelog$' \"$FILENAME\") != 1 ]]; then\n            echo '::error::Something is wrong with the changelog.'\n            exit 1\n          fi\n          SOMETHING_CHANGED=false\n          git diff --exit-code || SOMETHING_CHANGED=true\n          echo \"::debug::SOMETHING_CHANGED: $SOMETHING_CHANGED\"\n          echo \"SOMETHING_CHANGED=$SOMETHING_CHANGED\" >> \"$GITHUB_ENV\"\n\n      - name: Commit\n        if: env.SOMETHING_CHANGED == 'true'\n        run: |\n          git config --global user.name \"${{ secrets.JRNL_BOT_NAME }}\"\n          git config --global user.email \"${{ secrets.JRNL_BOT_EMAIL }}\"\n          git add \"$FILENAME\"\n          git commit -m \"Update changelog [ci skip]\"\n          git push origin \"$BRANCH\"\n\n      - name: Merge to Release branch\n        if: env.FULL_RELEASE == 'true'\n        run: |\n          git fetch --unshallow origin\n          git checkout release\n          git merge --ff-only \"$BRANCH\"\n          git push origin release\n\n```"}
{"id": "63c49d091e336480757a4c12", "level": "level3", "llm_response": " ```yaml\nname: Label sponsors\n\non:\n  pull_request:\n  issue_created:\n\njobs:\n  is-sponsor-label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Label sponsors\n        uses: JasonEtco/is-sponsor-label-action@v1.2.0\n        with:\n          token: ${{ secrets.ACTIONS_TOKEN }}\n```", "answer": "```yaml name: Label sponsors\non:\n  pull_request:\n    types: [opened]\n  issues:\n    types: [opened]\njobs:\n  build:\n    name: is-sponsor-label\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JasonEtco/is-sponsor-label-action@v1.2.0\n        with:\n          label: sponsor\n        env:\n          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}\n```"}
{"id": "63c49ef46fc19abdf9cd2ebc", "level": "level3", "llm_response": " ```yaml\nname: Dummy workflow for conflicts\n\non:\n  pull_request_review_creation:\n\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dummy Step\n        run: echo \"This is a placeholder step to simulate a workflow action on a pull request review.\"\n```", "answer": "```yaml name: Dummy workflow for conflicts\non:\n  pull_request_review:\n    types: [submitted]\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"this is a dummy workflow that triggers a workflow_run; it's necessary because otherwise the repo secrets will not be in scope for externally forked pull requests\"\n```"}
{"id": "63c4989c1842bc13d776b509", "level": "level3", "llm_response": " ```yaml\nname: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get Merged Pull Request\n        uses: actions-ecosystem/action-get-merged-pull-request@v1\n        with:\n          repository_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n        id: get-merged-pull-request\n\n      - name: Release Drafter\n        uses: release-drafter/release-drafter@v5\n        with:\n          draft_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n          labels: ${{ steps.get-merged-pull-request.outputs.labels }}\n```", "answer": "```yaml name: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      # Get PR from merged commit to master\n      - uses: actions-ecosystem/action-get-merged-pull-request@v1\n        id: get-merged-pull-request\n        with:\n          github_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          publish: ${{ !contains(steps.get-merged-pull-request.outputs.labels, 'no-release') }}\n          prerelease: false\n          config-name: auto-release.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n```"}
{"id": "63c496f633b087f6bde2f773", "level": "level3", "llm_response": " ```yaml\nname: Close stale\non:\n  schedule:\n    - cron: '0 1 * * *'\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close stale\n        uses: actions/stale@v6\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: 'ubuntu-latest'\n    steps:\n    - uses: 'actions/stale@v6'\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n        stale-issue-message: |-\n          This issue is stale because it has been open for 90 days with no\n          activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-issue-label: 'lifecycle/stale'\n        exempt-issue-labels: 'lifecycle/frozen'\n\n        stale-pr-message: |-\n          This Pull Request is stale because it has been open for 90 days with\n          no activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-pr-label: 'lifecycle/stale'\n        exempt-pr-labels: 'lifecycle/frozen'\n\n        days-before-stale: 90\n        days-before-close: 30\n```"}
{"id": "63c49c16517fc08c1eef4503", "level": "level3", "llm_response": " ```yaml\nname: Comment When Needs More Info Label Added\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Create comment\n        uses: actions/github-script@v3\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const issueNumber = github.event.issue.number;\n            const userLogin = github.event.issue.user.login;\n            const commentMessage = `This issue requires more information from ${userLogin}. Please provide details.`;\n            github.issues.createComment({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              issue_number: issueNumber,\n              body: commentMessage\n            });\n```", "answer": "```yaml name: Comment When Needs More Info Label Added\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'needs more info'\n    steps:\n      - name: Create comment\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: 'create-comment'\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi, ${{ github.event.issue.user.login }}.\n\n            It seems that this issue is a bit vague and lacks some necessary information. \n\n            \u770b\u8d77\u6765\u8fd9\u6761 issue \u63cf\u8ff0\u5f97\u6709\u4e9b\u6a21\u7cca\uff0c\u7f3a\u5c11\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f\u3002\n```"}
{"id": "63c49c921e336480757a1c2c", "level": "level3", "llm_response": " ```yaml\nname: vcf2bcf Testing\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths-ignore:\n      - '.github/workflows/vcf2bcf.yml'\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n  pull_request:\n    branches:\n      - '*'\n    paths-ignore:\n      - '.github/workflows/vcf2bcf.yml'\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    steps:\n      - name: install graphviz and curl\n        run: sudo apt-get install -y graphviz curl\n      - name: checkout git repo\n        uses: actions/checkout@v2\n      - name: Set up Python 3.X\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.X'\n      - name: conda\n        run: conda init bash\n      - name: Install dependencies conda\n        run: conda env create -f environment.yml\n      - name: Install bioconvert with pip\n        run: pip install bioconvert\n      - name: Test with pytest\n        run: pytest\n```", "answer": "```yaml name: vcf2bcf Testing\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - bioconvert/vcf2bcf.py\n      - .github/workflows/vcf2bcf.yml\n  pull_request:\n    branches-ignore: []\n    paths:\n      - bioconvert/vcf2bcf.py\n  schedule:\n    - cron: '0 0 * * SUN'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 5\n      matrix:\n        python: [3.7, 3.8, 3.9]\n      fail-fast: false\n\n    steps:\n\n    - name: install graphviz and curl\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y graphviz-dev\n        sudo apt-get install libcurl4-gnutls-dev\n    - name: checkout git repo\n      uses: actions/checkout@v2\n    - name: Set up Python 3.X\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: conda\n      run: |\n        # $CONDA is an environment variable pointing to the root of the miniconda directory\n        echo $CONDA/bin >> $GITHUB_PATH\n    - name: Install dependencies conda\n      run: |\n        conda install -c conda-forge --quiet 'mamba<0.24' python=${{ matrix.python }}\n        mamba install -c conda-forge -c bioconda --quiet -y samtools bedtools bamtools mosdepth pbzip2 pigz dsrc sambamba squizz\n    - name: Install bioconvert with pip\n      run: |\n        pip install -r requirements.txt\n        pip install .[testing]\n    - name: Test with pytest\n      run: |\n        pytest -n 1  --cov-report term --cov=bioconvert.vcf2bcf test/test_vcf2bcf.py\n```"}
{"id": "63c498451842bc13d776928d", "level": "level3", "llm_response": " ```yaml\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_run:\n    workflows: [Continuous Integration]\n    types: [ completed ]\n\njobs:\n  merge-me:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        uses: ridedott/merge-me-action@v2.10.31\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # See https://github.com/ridedott/merge-me-action/\n# This workflow automates merges from patches sent by Dependabot, and\n# only by dependabot, once the other CI workflows pass\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - \"Continuous Integration\"\n\njobs:\n  merge-me:\n    name: Auto-merge Dependabot PRs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2.10.31\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          MERGE_METHOD: MERGE\n```"}
{"id": "63c499ba517fc08c1eee58bc", "level": "level3", "llm_response": " ```yaml\nname: Swift\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    types: [ opened, edited, reopened, ready_for_review ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n\n      - name: Build\n        run: swift build\n```", "answer": "```yaml name: Swift\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: macOS-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Build\n      run: swift build -v\n```"}
{"id": "63c49dda517fc08c1eeff921", "level": "level3", "llm_response": " ```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n    releases:\n      types: [published, draft]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@master\n\n      - name: Set up Ruby 2.6\n        uses: actions/setup-ruby@v1\n        with:\n          ruby-version: 2.6\n\n      - name: Publish to RubyGems\n        env:\n          RUBYGEMS_AUTH_TOKEN: ${{ secrets.RUBYGEMS_AUTH_TOKEN }}\n        run: |\n          gem build your_gem.gemspec\n          gem push your_gem-*.gem\n```\nPlease replace `your_gem.gemspec` with the actual gem specification file name for your Ruby project.", "answer": "```yaml name: Ruby Gem\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@master\n    - name: Set up Ruby 2.6\n      uses: actions/setup-ruby@v1\n      with:\n        ruby-version: 2.6.x\n\n    #- name: Publish to GPR\n    #  run: |\n    #    mkdir -p $HOME/.gem\n    #    touch $HOME/.gem/credentials\n    #    chmod 0600 $HOME/.gem/credentials\n    #    printf -- \"---\\n:github: Bearer ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n    #    gem build *.gemspec\n    #    gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n    #  env:\n    #    GEM_HOST_API_KEY: ${{secrets.GITHUB_TOKEN}}\n    #    OWNER: wpscanteam\n\n    - name: Publish to RubyGems\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:rubygems_api_key: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        gem build *.gemspec\n        gem push *.gem\n      env:\n        GEM_HOST_API_KEY: ${{secrets.RUBYGEMS_AUTH_TOKEN}}\n```"}
{"id": "63c4a04933b087f6bde6b99c", "level": "level3", "llm_response": " ```yaml\nname: Magisk\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1\n\n      - name: Copy hosts to magisk dir\n        run: cp hosts magisk/\n\n      - name: Zip magisk dir\n        run: zip -r magisk.zip magisk/\n\n      - name: Move bebasid-magisk to releases\n        run: mv magisk/bebasid-magisk releases/\n\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v10.1\n\n      - name: Validating hosts changes, run next command if it is true\n        run: |\n          if grep -q \"hosts\" ${{ steps.changed-files.outputs.files_with_changes }}\n          then\n            echo \"Validating hosts changes\"\n            # Add validation commands here\n          fi\n\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.UPDATE_TOKEN }}\n          path: releases/\n          branch: releases\n```\nThis YAML file defines a GitHub Actions workflow named `Magisk` that will run on push events to the `master` branch. It includes a job with seven steps, each performing a specific task related to managing the Magisk repository. The workflow utilizes various GitHub Actions and a secret token for authentication.", "answer": "```yaml name: Magisk\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Copy hosts to magisk dir\n      run: cp releases/hosts dev/magisk/\n    - name: Zip magisk dir\n      run: |\n        cd dev/magisk\n        zip -r bebasid-magisk.zip *\n        ls -l\n    - name: Move bebasid-magisk to releases\n      run: |\n        mv dev/magisk/bebasid-magisk.zip releases/\n        cd releases\n        ls -l\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v10.1\n    - name: Validating hosts changes, run next command if it is true\n      if: contains(steps.changed-files.outputs.modified_files, 'releases/hosts')\n      run: |\n          echo \"hosts file has been modified.\"\n          LAST_COMMIT_MESSAGE=\"$(git log -1 --pretty=\"%s %b\")\"\n          git config --global user.email \"gvoze32@yahoo.com\"\n          git config --global user.name \"zksbot\"\n          cd releases\n          ls -l\n          git add bebasid-magisk.zip\n          git commit -m \"Magisk sync: ${LAST_COMMIT_MESSAGE}\"\n    - name: Push changes\n      uses: ad-m/github-push-action@master\n      with:\n        github_token: ${{ secrets.UPDATE_TOKEN }}\n```"}
{"id": "63c5ae7c6b748c7b1faded89", "level": "level3", "llm_response": " ```yaml\nname: Maven Deploy\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set VERSION variable from tag\n        run: echo \"VERSION=${GITHUB_REF_NAME#refs/tags/}\" >> $GITHUB_ENV\n\n      - name: Configure GPG signing\n        uses: SamKirkland/gpg-action@v1\n        with:\n          recipients: ${{ secrets.BUF_SONATYPE_USER }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Configure GIT\n        uses: SamKirkland/gpg-action@v1\n        with:\n          recipients: ${{ secrets.BUF_SONATYPE_USER }}\n          passphrase: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          cache: 'maven'\n\n      - name: Update version in pom\n        run: |\n          sed -i \"s/<version>.*<\\/version>/<version>${{ env.VERSION }}<\\/version>/g\" pom.xml\n\n      - name: Publish to Maven Packages Apache Maven\n        run: mvn deploy\n        env:\n          MAVEN_OPTS: -Dmaven.repo.local=${{ github.workspace }}/repository\n          GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}\n          SONATYPE_USER: ${{ env.SONATYPE_USER }}\n          SONATYPE_PASSWORD: ${{ env.SONATYPE_PASSWORD }}\n```\nNote: The above YAML assumes that the repository contains a `pom.xml` file for Maven to interact with, and that the Maven credentials are stored as secrets in the GitHub repository settings. Adjust the `java-version` and other configurations as necessary for your specific setup.", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n## For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path\n\nname: Maven Deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      SONATYPE_USER: ${{secrets.BUF_SONATYPE_USER}}\n      SONATYPE_PASSWORD: ${{secrets.BUF_SONATYPE_PASSWORD}}\n      GPG_KEY_NAME: ${{secrets.GPG_KEY_NAME}}\n      GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}\n      MAVEN_OPTS: \"--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED\"\n      REF_NAME: ${{ github.ref_name }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set VERSION variable from tag\n        run: |\n          VERSION=${{ env.REF_NAME }}\n          echo \"VERSION=${VERSION:1}\" >> $GITHUB_ENV\n\n      - name: 'Configure GPG signing'\n        env:\n          GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n        run: |\n          # https://github.com/keybase/keybase-issues/issues/2798\n          export GPG_TTY=$(tty)\n          # Import gpg keys and warm the passphrase to avoid the gpg\n          # passphrase prompt when initating a deploy\n          # `--pinentry-mode=loopback` could be needed to ensure we\n          # suppress the gpg prompt\n          echo $GPG_KEY | base64 --decode > signing-key\n          gpg --passphrase $GPG_PASSPHRASE --batch --import signing-key\n          shred signing-key\n          \n      - name: Configure GIT\n        run: |\n          git config --global user.email \"envoy-bot@users.noreply.github.com\" \n          git config --global user.name \"envoy-bot\"\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          server-id: sonatype-nexus-snapshots\n          server-username: ${ env.SONATYPE_USER }\n          server-password: ${ env.SONATYPE_PASSWORD }\n          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}\n          gpg-passphrase: ${ env.GPG_PASSPHRASE }\n\n      - name: Update version in pom\n        working-directory: ${{ github.workspace }}/java\n        run: mvn -B versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false\n\n      - name: Publish to Maven Packages Apache Maven\n        working-directory: ${{ github.workspace }}/java\n        run: |\n          mvn -B -s settings.xml clean deploy \\\n          -Darguments=\"-s settings.xml\" \\\n          -DreleaseVersion=${{ env.VERSION }} \\\n          -DdevelopmentVersion=${{ env.VERSION }}-SNAPSHOT \\\n          -DscmCommentPrefix=\"java release: \"\n        env:\n          MAVEN_USERNAME: ${{ env.SONATYPE_USER }}\n          MAVEN_CENTRAL_TOKEN: ${{ env.SONATYPE_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```"}
{"id": "63c49a621e33648075793df8", "level": "level3", "llm_response": " ```yaml\nname: Generate Documentation\n\non:\n  push:\n    paths-ignore:\n      - 'cmake/**'\n    branches:\n      - main\n    paths:\n      - 'docs/sphinx/**'\n  pull_request:\n    paths-ignore:\n      - 'cmake/**'\n    branches:\n      - main\n    paths:\n      - 'docs/sphinx/**'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Bump Version Number\n        run: |\n          # Commands to bump version number\n\n      - name: Build Documentation\n        uses: totaldebug/sphinx-publish-action@v3\n\n      - name: Upload Documentation\n        uses: actions/upload-artifact@v3\n        with:\n          name: generated-docs\n          path: ./_build/html\n```\nPlease note that the steps for \"Bump Version Number\" and \".\" (which seems to be a placeholder) are left incomplete as there was no specific command or action provided for those steps. You will need to fill in the appropriate commands for those steps based on your project's requirements.", "answer": "```yaml name: Generate Documentation\n\non:\n  push:\n    paths-ignore:\n      - \"cmake/**\"\n  pull_request:\n    paths:\n      - \"docs/sphinx/**\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Bump Version Number\n        shell: bash\n        if: github.event_name == 'push'\n        run: |\n          VERTEST=\"\\#define\\sLIBOBS_API_\\w+_VER\\s([0-9]{1,2})\"\n          VER=\"\"\n          MAJOR=\"\"\n          while IFS= read -r l\n          do\n              if [[ $l =~ $VERTEST ]]; then\n                  if [[ $VER = '' ]]; then MAJOR=\"${BASH_REMATCH[1]}\"; else VER+=\".\"; fi\n                  VER+=\"${BASH_REMATCH[1]}\"\n              fi\n          done < \"libobs/obs-config.h\"\n\n          SVER=\"version = '([0-9\\.]+)'\"\n          RVER=\"version = '$VER'\"\n          SREL=\"release = '([0-9\\.]+)'\"\n          RREL=\"release = '$VER'\"\n          SCOPY=\"copyright = '([A-Za-z0-9, ]+)'\"\n          RCOPY=\"copyright = '2017-$(date +\"%Y\"), Hugh Bailey'\"\n          sed -i -E -e \"s/${SVER}/${RVER}/g\" -e \"s/${SREL}/${RREL}/g\" -e \"s/${SCOPY}/${RCOPY}/g\" docs/sphinx/conf.py\n      - uses: totaldebug/sphinx-publish-action@1.2.0\n        with:\n          sphinx_src: 'docs/sphinx'\n          build_only: True\n          target_branch: 'master'\n          target_path: '../home/_build'\n          pre_build_commands: 'pip install -Iv sphinx==5.1.1'\n      - uses: actions/upload-artifact@v3\n        with:\n          name: OBS Studio Documentation (HTML)\n          path: |\n            ${{ runner.temp }}/_github_home/_build\n            !${{ runner.temp }}/_github_home/_build/.doctrees\n```"}
{"id": "63c49ee533b087f6bde62bbb", "level": "level3", "llm_response": " ```yaml\nname: Auto-Close Issues on JavaScript Repository\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: v1/actions/checkout@v1\n\n      - name: Automatically close issues that don't follow the issue template\n        uses: lucasbento/auto-close-issues@v1.0.2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml on:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Automatically close issues that don't follow the issue template\n        uses: lucasbento/auto-close-issues@v1.0.2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-close-message: \"@${issue.user.login}: hello! :wave:\\n\\nThis issue is being automatically closed because it does not follow the issue template.\" # optional property\n          closed-issues-label: \"\ud83d\ude41 Not following issue template\" # optional property```"}
{"id": "63c49ecf1899db5886509168", "level": "level3", "llm_response": " ```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Setup git config\n        run: git config --global user.email \"${{ secrets.GITHUB_ACTOR }}@users.noreply.github.com\"\n        run: git config --global user.name \"${{ github.actor }}\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        with:\n          github_token: ${{ secrets.PAT_TOKEN }}\n          branch: 'include-admins'\n          state: 'disabled'\n\n      - name: Deploy\n        run: |\n          # Add deployment commands here, using secrets.DEPLOY_WEBHOOK_URL, secrets.TWINE_USERNAME and secrets.TWINE_PASSWORD\n\n      - name: Re-enable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        with:\n          github_token: ${{ secrets.PAT_TOKEN }}\n          branch: 'include-admins'\n          state: 'enabled'\n```\nPlease note that you will need to replace the deployment commands placeholder with the actual commands required for your deployment process. The `secrets` variables are assumed to be set in your GitHub repository's secrets settings.", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT_TOKEN }}\n\n      - name: Setup python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: Setup git config\n        run: |\n          git config --global user.name \"hikari-bot\"\n          git config --global user.email \"90276125+hikari-bot[bot]@users.noreply.github.com\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: false\n\n      - name: Deploy\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n          VERSION: ${{ github.event.release.tag_name }}\n          REF: ${{ github.sha }}\n          GITHUB_REPO_SLUG: ${{ github.repository }}\n          DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}\n          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\n        run: bash scripts/deploy.sh\n\n      - name: Re-enable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        if: always()\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: true\n```"}
{"id": "63c4966d33b087f6bde2bec0", "level": "level3", "llm_response": " ```yaml\nname: Go\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.16'\n\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v3\n\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n\n      - name: Install GoReleaser\n        run: |\n          go get -u github.com/goreleaser/goreleaser/cmd/goreleaser\n\n      - name: Show GoReleaser version\n        run: goreleaser --version\n\n      - name: Build\n        run: go build ./...\n\n      - name: Quick Test\n        run: go test -v ./... -short\n\n      - name: All Test\n        run: go test -v ./...\n\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v2\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n\n      - name: Install Venom\n        run: go get github.com/zub3r/venom/cmd/venom\n\n      - name: Show Venom version\n        run: venom --version\n\n      - name: Run End to End tests\n        run: venom test\n```\n\nNote: The `secrets.CODECOV_TOKEN` variable has been added for the `codecov/codecov-action` step. You should add this secret to your repository's secrets in the GitHub UI. If you use different tokens or have additional secrets, you can replace them accordingly.", "answer": "```yaml name: Go\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    # Run full test once a day\n    - cron: '0 0 * * *'\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-20.04\n    steps:\n      # https://github.com/actions/setup-go\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n        id: go\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          # Required: the version of golangci-lint is required\n          # and must be specified without patch version:\n          # we always use the latest patch version.\n          version: v1.50\n      - name: Install GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          install-only: true\n      - name: Show GoReleaser version\n        run: goreleaser --version\n      - name: Build\n        run: make build\n      - name: Quick Test\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: make test-short\n        if: ${{ github.event_name == 'pull_request' }}\n      - name: All Test\n        env:\n          # Access only to ec2 AMI api in read-only\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}\n          UPDATECLI_GITEA_TOKEN: ${{ secrets.UPDATECLI_GITEA_TOKEN }}\n        run: make test\n        if: ${{ github.event_name == 'schedule' }}\n      # Codecov should only be updated if make test is executed\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        if: ${{ github.event_name == 'schedule' }}\n      # Manage and run your integration tests with efficiency\n      # https://github.com/ovh/venom\n      - name: Install Venom\n        run: |\n          curl -o /usr/local/bin/venom https://github.com/ovh/venom/releases/download/$VENOM_VERSION/venom.linux-amd64 -L\n          sudo chmod +x /usr/local/bin/venom\n          ls -lha /usr/local/bin/venom\n        env:\n          VENOM_VERSION: v1.0.1\n      - name: Show Venom version\n        run: venom version\n      - name: Run End to End tests\n        run: make test-e2e\n        env:\n          IS_TTY: true # https://github.com/ovh/venom#use-venom-in-ci\n          # Access only to ec2 AMI api in read-only\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c6c517fc08c1eef66d4", "level": "level3", "llm_response": " ```yaml\nname: Run Build with Tests on PR\n\non:\n  pull_request:\n    branches:\n      - develop\n      - master\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref }}-run-build-with-tests\n      cancel-in-progress: true\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v3\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n\n      - name: Execute Gradle Build\n        run: ./gradlew build\n\n      - name: Publish Test Report\n        uses: mikepenz/action-junit-report@v3.5.0\n        with:\n          fail-on-failure: true\n\n      - name: Delete previous comment of Github Actions Bot\n        uses: izhangzhihao/delete-comment@master\n        with:\n          issue-number: ${{ github.event.number }}\n          comment-id: ${{ github.event.comment.id }}\n\n      - name: Notify current workflow is succeed\n        if: success()\n        uses: actions/github-script@v6\n        with:\n          script: |\n            github.issues.createComment({\n              issue_number: github.event.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: 'Workflow succeeded'\n            })\n\n      - name: Notify current workflow is failed\n        if: failure()\n        uses: actions/github-script@v6\n        with:\n          script: |\n            github.issues.createComment({\n              issue_number: github.event.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: 'Workflow failed'\n            })\n```", "answer": "```yaml name: Run Build with Tests on PR\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n    branches:\n      - develop\n      - master\n\nconcurrency:\n  group: ${{ github.head_ref }}-run-build-with-tests\n  cancel-in-progress: true\n\njobs:\n  build-and-run-unit-test:\n    name: \"Build & Test\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: '8.0.345'\n          architecture: x64\n          cache: 'gradle'\n\n      - name: Execute Gradle Build\n        run: ./gradlew clean test --console=plain\n\n      - name: Publish Test Report\n        uses: mikepenz/action-junit-report@v3.5.0\n        if: always()\n        with:\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          fail_on_failure: true\n          annotate_only: false\n          check_name: Test Report\n\n      - name: Delete previous comment of Github Actions Bot\n        uses: izhangzhihao/delete-comment@master\n        if: always()\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          delete_user_name: github-actions[bot]\n          issue_number: ${{ github.event.number }}\n\n      - name: Notify current workflow is succeed\n        uses: actions/github-script@v6\n        if: success()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u2705 Build & Test workflow succeed \u2705\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n\n      - name: Notify current workflow is failed\n        uses: actions/github-script@v6\n        if: failure()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u274c Build & Test workflow failed \u274c\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n```"}
{"id": "63c49c791842bc13d7783de7", "level": "level3", "llm_response": " ```yaml\nname: scala-steward\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate_token\n        uses: tibdex/github-app-token@v1\n        with:\n          token: ${{ secrets.SCALIKEJDBC_BOT_KEY }}\n\n      - name: Launch Scala Steward\n        uses: scala-steward-org/scala-steward-action@v2.26.0\n        with:\n          token: ${{ steps.generate_token.outputs.token }}\n```", "answer": "```yaml name: scala-steward\non:\n  push:\n    branches: [ master ]\n  schedule:\n  - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Generate token\n      id: generate_token\n      if: ${{ !github.event.repository.fork }}\n      uses: tibdex/github-app-token@v1\n      with:\n        app_id: 89631\n        private_key: ${{ secrets.SCALIKEJDBC_BOT_KEY }}\n    - name: Launch Scala Steward\n      if: ${{ !github.event.repository.fork }}\n      uses: scala-steward-org/scala-steward-action@v2.26.0\n      with:\n        github-token: ${{ steps.generate_token.outputs.token }}\n        author-email: \"74833019+scalikejdbc-bot[bot]@users.noreply.github.com\"\n        author-name: scalikejdbc-bot[bot]\n```"}
{"id": "63c4a158b008460c1df59cf6", "level": "level3", "llm_response": " ```yaml\nname: Library code size\n\non: pull_request\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1\n\n      - name: Calculate code size\n        uses: andresz1/size-limit-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```\nThis YAML file defines a GitHub Actions workflow named `Library code size` that triggers on pull request activity. It contains a single job with the id `size` that runs on the latest Ubuntu runner. The job has two steps: first, it checks out the repository using the v1 version of actions/checkout, and second, it calculates the code size using the v1 version of andresz1/size-limit-action, with the `GITHUB_TOKEN` secret for authentication.", "answer": "```yaml name: Library code size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5aead6b748c7b1fadf7b1", "level": "level3", "llm_response": " ```yaml\nname: Build Ubuntu 20.04 ARM64\non:\n  pull_request:\n    paths-ignore:\n      - docs/**\n      - samples/**\n      - **.md\n  push:\n    branches:\n      - master\n      - release/oss-v*\n      - tags:\n          - oss-v*\n    paths-ignore:\n      - docs/**\n      - samples/**\n      - **.md\njobs:\n  build:\n    runs-on: ubuntu-latest\n    uses: 'EventStore/EventStore/.github/workflows/build-reusable.yml'\n```", "answer": "```yaml name: Build Ubuntu 20.04 ARM64\non:\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n  push:\n    branches:\n      - master\n      - release/oss-v*\n    tags:\n      - oss-v*\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n\njobs:\n  build:\n    uses: EventStore/EventStore/.github/workflows/build-reusable.yml@d274d7d528800d72cfac3d496dc747fba5208ff3\n    with:\n      os: ubuntu-20.04-arm64\n      arch: arm64```"}
{"id": "63c4a0956fc19abdf9cdd937", "level": "level3", "llm_response": " ```yaml\nname: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Test:\n    runs-on: ${{ runner.os }}\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9]\n        marker: ['cwl1', 'cwl2']\n        conformance-version: ['1.0', '1.1']\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Cache pip\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}\n\n      - name: Cache galaxy venv\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/venv\n          key: ${{ runner.os }}-${{ hashFiles('**/requirements.venv.txt') }}\n\n      - name: Get full Python version\n        id: full-python-version\n        run: |\n          python -c \"import platform; print(platform.python_version())\"\n          echo \"::set-output name=version::$(python -c \"import platform; print(platform.python_version())\")\"\n\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n\n      - name: Run tests\n        run: pytest\n\n      - name: Upload coverage report\n        uses: codecov/codecov-action@v3\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-results\n          path: ./path/to/test-results\n```\nPlease note that you may need to adjust the paths for the `requirements.txt` and `requirements.venv.txt` files, as well as the path for the `test-results` artifact, to match your repository's structure.", "answer": "```yaml name: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\nenv:\n  GALAXY_TEST_DBURI: 'postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    name: Test\n    if: ${{ false }}\n    runs-on: ubuntu-latest\n    continue-on-error: ${{ startsWith(matrix.marker, 'red') }}\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7']\n        marker: ['green', 'red and required', 'red and not required']\n        conformance-version: ['cwl_conformance_v1_0'] #, 'cwl_conformance_v1_1', 'cwl_conformance_v1_2']\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: postgres\n        ports:\n          - 5432:5432\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache galaxy venv\n        uses: actions/cache@v3\n        with:\n          path: 'galaxy root/.venv'\n          key: gxy-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Run tests\n        run: ./run_tests.sh --coverage --skip_flakey_fails -cwl lib/galaxy_test/api/cwl -- -m \"${{ matrix.marker }} and ${{ matrix.conformance-version }}\"\n        working-directory: 'galaxy root'\n      - uses: codecov/codecov-action@v3\n        with:\n          flags: cwl-conformance\n          working-directory: 'galaxy root'\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: CWL conformance test results (${{ matrix.python-version }}, ${{ matrix.marker }}, ${{ matrix.conformance-version }})\n          path: 'galaxy root/run_cwl_tests.html'\n```"}
{"id": "63c4a09a33b087f6bde6da70", "level": "level3", "llm_response": " ```yaml\nname: system build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Nix\n        uses: cachix/install-nix-action@v18\n        with:\n          nix-version: '6.0'\n\n      - name: Install dependencies\n        run: nix-env -iA\n\n      - name: Compile and build\n        run: nix-build -A\n\n      - name: Run Flake Checks\n        run: nix-flake check\n```\nPlease note that the placeholder names for the steps (e.g., ``, ``, ``, `Run Flake Checks`) need to be replaced with the actual commands or actions you want to execute in each step. The `nix-build -A` command is also a placeholder and should be replaced with the actual build command for your Nix-based project.\n\nAlso, make sure to add the necessary secrets (`GITHUB_TOKEN` and `CACHIX_AUTH_TOKEN`) to your GitHub repository's settings under \"Secrets\" to ensure that the workflow can authenticate with GitHub and Cachix services.", "answer": "```yaml name: 'system build'\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Shallow clones won't work\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: cachix/cachix-action@v12\n        with:\n          name: kclejeune\n          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}\n          extraPullNames: nix-community\n      - name: Run Flake Checks\n        run: |\n          nix flake check -v --show-trace\n        timeout-minutes: 240\n```"}
{"id": "63c49fec6fc19abdf9cd94ca", "level": "level3", "llm_response": " ```yaml\nname: Commented Pull Request\non:\n  issues:\n    types: [commented]\n  pull_request_target:\n    types: [opened, synchronize, reopened]\n\njobs:\n  pullRequestHandler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Setup PowerShell\n        uses: actions/setup-powershell@v1\n\n      - name: PullRequestHandler\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          # PowerShell script to handle the pull request goes here\n          # Example:\n          Write-Host \"Handling the pull request\"\n          # Additional logic for the job\n```", "answer": "```yaml on:\n  issue_comment:\n    types: [ created ]\nname: Commented Pull Request\njobs:\n  pullRequestHandler:\n    name: PullRequestHandler\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@main\n    - name: PullRequestHandler\n      uses: ScoopInstaller/GithubActions@main\n      if: startsWith(github.event.comment.body, '/verify')\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5e736e7f0ed8c6105a", "level": "level3", "llm_response": " ```yaml\nname: Checklist\n\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - opened\n      - reopened\n      - synchronize\n      - edited\n      - assignee_changed\n      - milestone_changed\n      - label_added\n      - labeled\n      - unlabeled\n      - locked\n      - cleared_by\n      - ready_for_review\n      - synchronize_files\n      - created\n      - edited\n\njobs:\n  Test:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Verify Checklist\n        uses: mainversion/PowerShell-Docs/.github/actions/verification/checklist/v1@master\n        with:\n          checklist_file: 'path/to/checklist.json'\n```", "answer": "```yaml name: Checklist\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - opened\n      - reopened\n      - ready_for_review\n      - edited\n      - synchronize\npermissions:\n  contents: read\njobs:\n  Test:\n    name: Verify Status\n    runs-on: windows-latest\n    if: |\n      !contains(github.event.pull_request.title, 'WIP') &&\n      !github.event.pull_request.draft\n    defaults:\n      run:\n        shell: pwsh\n    steps:\n      - name: Verify Checklist\n        id: verify_checklist\n        uses: MicrosoftDocs/PowerShell-Docs/.github/actions/verification/checklist/v1@main\n```"}
{"id": "63c49d011e336480757a48d8", "level": "level3", "llm_response": " ```yaml\nname: User-agent updater\n\non:\n  push:\n    paths:\n      - '**.cpp'\n  schedule:\n    - cron: '0 0 1 * *'\n  workflow_dispatch:\n    events:\n      - 'workflow_dispatch'\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update User-Agent\n        uses: desktop-app/action_code_updater@master\n```", "answer": "```yaml name: User-agent updater.\n\non:\n  repository_dispatch:\n    types: [\"Restart user_agent_updater workflow.\"]\n  schedule:\n    # At 00:00 on day-of-month 1.\n    - cron: \"0 0 1 * *\"\n  pull_request_target:\n    types: [closed]\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: desktop-app/action_code_updater@master\n        with:\n          type: \"user-agent\"\n```"}
{"id": "63c4967033b087f6bde2c007", "level": "level3", "llm_response": " ```yaml\nname: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron: '0 6 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1\n\n      - name: Tap Homebrew Emacs Head\n        run: |\n          brew tap homebrew/emacs\n\n      - name: Install ${{ matrix.build_opts }}\n        run: |\n          # Example build options\n          # matrix.build_opts = [\n          #   { \"build_opts\": \"--with-eldoc\"},\n          #   { \"build_opts\": \"--with-xwidgets\"}\n          # ]\n          echo \"Installing Emacs with build options: ${{ matrix.build_opts }}\"\n\n      - name: Create personal config file from template\n        run: |\n          # Command to create config file from template\n\n      - name: Create savehist directory\n        run: |\n          mkdir -p ~/.emacs.d/savehist\n\n      - name: Create gnupg Emacs directory\n        run: |\n          mkdir -p ~/.emacs.d/gnupg\n\n      - name: Init git submodules\n        run: |\n          git submodule update --init --recursive\n\n      - name: Attempting startup...\n        run: |\n          # Command to attempt Emacs startup\n```\n\nPlease note that the `run` commands for steps 3 to 8 are placeholders and should be replaced with actual commands that perform the required actions. The `matrix.build_opts` variable is also a placeholder and should be defined in the workflow configuration to pass specific build options to the installation step.", "answer": "```yaml name: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron:  '0 6 * * *'\n\njobs:\n  build:\n\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        build_opts:\n          # Emacs 26.x\n          - 'emacs-head@26'\n\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n      GPG: '/usr/local/bin/gpg'\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Tap Homebrew Emacs Head\n      run: brew tap daviderestivo/emacs-head\n\n    - name: Install ${{ matrix.build_opts }}\n      run: brew install ${{ matrix.build_opts }}\n\n    - name: Create personal config file from template\n      run: mv personal.el.example personal.el\n\n    - name: Create savehist directory\n      run: mkdir -p ${{ github.workspace }}/savehist\n\n    - name: Create gnupg Emacs directory\n      run: mkdir -p ${{ github.workspace }}/elpa/gnupg\n\n    - name: Init git submodules\n      run: git submodule init && git submodule update && git submodule foreach --recursive git checkout master\n\n    - name: Attempting startup...\n      run: emacs -nw --batch --debug-init --eval='(let\n                                                   ((galactic-emacs-ci t)\n                                                    (debug-on-error (>=  emacs-major-version 26))\n                                                    (initial-buffer-choice \"*scratch*\")\n                                                    (user-emacs-directory default-directory)\n                                                    (user-init-file (expand-file-name \"init.el\")))\n                                                   (setq url-show-status nil)\n                                                   (package-initialize)\n                                                   (load-file user-init-file)\n                                                   (message \"... startup successful!\"))'\n```"}
{"id": "63c4985733b087f6bde383d5", "level": "level3", "llm_response": " ```yaml\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - '**/participants/**/*.yml'\n      - '**/update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n      - name: Validate YAML files\n        uses: SoftCreatR/validate-yaml-schema@v2.0.0\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n      - name: file-diff\n        id: file-diff\n        uses: lots0logs/gh-action-get-changed-files@v2.1.4\n      - name: Validate Links\n        uses: BobAnkh/add-contributors@v0.2.2\n\n  Main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Update README\n        run: |\n          sed -i 's/old_content/new_content/g' README.md\n      - name: Commit and push on changes\n        uses: EndBug/actions-gh-commit-push@v7\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n      - name:\n          id: add-contributors\n          uses: BobAnkh/add-contributors@v0.2.2\n```\nNote: The `sed` command in the `Update README` job is a placeholder for the actual command to update the README file. You should replace `old_content` with the actual content to be replaced and `new_content` with the new content. Also, the `requirements.txt` file should contain the necessary Python dependencies for the project. Adjust the paths and commands according to your project's specific needs.", "answer": "```yaml ---\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Validate YAML files\n        uses: SoftCreatR/validate-yaml-schema@v2.0.0\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6\n\n      - id: file-diff\n        uses: lots0logs/gh-action-get-changed-files@2.1.4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Validate Links\n        run: |\n          FILELIST=\"\"\n\n          for FILENAME in $(jq '.[]' $HOME/files.json); do\n            FILENAME=\"${FILENAME:1}\"\n            FILENAME=\"${FILENAME::-1}\"\n\n            if [ -f \"$FILENAME\" ] && [[ $FILENAME == *\"participants\"* ]] && [ \"${FILENAME: -4}\" == \".yml\" ]; then\n              FILELIST+=\"$FILENAME,\"\n            else\n              echo \"- Skipped $FILENAME\"\n            fi\n          done\n\n          if [ -n \"$FILELIST\" ]; then\n            gem install awesome_bot\n            awesome_bot --files \"$FILELIST\" --allow-dupe --allow-redirect --skip-save-results\n          else\n            echo \"Nothing to do.\"\n          fi\n\n  Main:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: python -m pip install -r requirements.txt\n\n      - name: Update README\n        run: python update_readme.py\n\n      - name: Commit and push on changes\n        run: |-\n          git add .\n          git diff\n          git config --global user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"github-actions[bot]\"\n          git commit -m \"Updated README\" -a || echo \"No changes to commit\"\n          git push\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks, Main]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - uses: BobAnkh/add-contributors@v0.2.2\n        with:\n          REPO_NAME: 'benbarth/hacktoberfest-swag'\n          CONTRIBUTOR: '## Contributors \u2728'\n          ACCESS_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          IGNORED_CONTRIBUTORS: 'Ben Barth,Sascha Greuel,Chandler Weiner'\n```"}
{"id": "63c49f6eb008460c1df4db9b", "level": "level3", "llm_response": " ```yaml\nname: docs\non:\n  push:\n    branches:\n      - master\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n\n      - name: Deploy documentation\n        run: python deploy_docs.py\n```\n\nIn this YAML file, I've assumed the following:\n\n- The `deploy_docs.py` script is responsible for deploying the documentation.\n- The `requirements.txt` file contains the necessary Python dependencies for the deployment step.\n- The `GITHUB_TOKEN` secret is used for authentication purposes within the workflow.\n\nPlease replace the placeholders with the actual names of your steps and scripts as needed.", "answer": "```yaml name: docs\non:\n  push:\n    branches:\n      - master\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a10f1e336480757bde95", "level": "level3", "llm_response": " ```yaml\nname: test\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        nim: [matrix.nim]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup Nim\n        uses: jiro4989/setup-nim-action@v1\n\n      - name: Build\n        run: nim tc main.nim\n\n      - name: Run tests\n        run: nim test\n\n      - name: Upload test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: test_results/\n\n      - name: Cleanup\n        run: rm -rf test_results/\n```\nPlease note that `matrix.nim` is a placeholder for actual Nim version(s) you want to test against. You should replace it with actual versions or use a list of versions. Additionally, the `main.nim` file should contain your test code.", "answer": "```yaml name: test\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os:\n          - ubuntu-22.04\n          # - windows-latest\n          # - macOS-latest\n        nim:\n          - '1.6.0'\n          - '1.6.x'\n          - 'stable'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jiro4989/setup-nim-action@v1\n        with:\n          nim-version: ${{ matrix.nim }}\n      - run: nimble install -Y\n      - name: Setup dependencies\n        run: |\n          sudo apt update -y\n          sudo apt install -y libgtk-4-dev\n      - name: Setup config.nims\n        run: |\n          # For referencing latest source code\n          echo 'switch(\"path\", \"$projectDir/..\")' > examples/config.nims\n      - run: nimble examples\n```"}
{"id": "63c49ebb736e7f0ed8c69a9f", "level": "level3", "llm_response": " ```yaml\nname: Build-images\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - images/linkerd-Dockerfile\n      - .github/workflows/container-images.yml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.CFCIBOT_DOCKERHUB_USERNAME }}\n          password: ${{ secrets.CFCIBOT_DOCKERHUB_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Build linkerd\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: images/linkerd-Dockerfile\n          push: true\n          tags: your-dockerhub-username/linkerd:latest\n```\nPlease replace `your-dockerhub-username/linkerd:latest` with your actual Docker Hub username and the tag you want to use for your `linkerd` image.", "answer": "```yaml name: Build-images\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'images/linkerd-Dockerfile'\n    - '.github/workflows/container-images.yml' # in case we change the versions below\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.CFCIBOT_DOCKERHUB_USERNAME }}\n          password: ${{ secrets.CFCIBOT_DOCKERHUB_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Build linkerd\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          file: images/linkerd-Dockerfile\n          tags: splatform/epinio-linkerd:2.11.1\n          build-args: |\n            LINKERD_VERSION=stable-2.11.1\n            LINKERD_CHECKSUM=96c08570b6f6ad40ef1e6aa970959c9c5541e36c85477ee9843b85b8fdcc54ea\n            KUBECTL_VERSION=v1.23.0\n            KUBECTL_CHECKSUM=2d0f5ba6faa787878b642c151ccb2c3390ce4c1e6c8e2b59568b3869ba407c4f\n```"}
{"id": "63c495138052faa2781af503", "level": "level3", "llm_response": " ```yaml\nname: Go Workflow\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch:\n\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n      - name: Compile\n        run: go build ./...\n      - name: Test\n        run: go test ./...\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch: # Enables on-demand/manual triggering\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n      - run: |\n          go get github.com/aws/aws-sdk-go\n          go mod tidy\n          cd tools/provider-schema\n          terraform init -upgrade\n          terraform providers schema -json > schema.json\n          cd ../..\n          git submodule update --remote\n          go generate ./...\n      - uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: |\n            autogenerated maintenance\n          title: autogenerated maintenance\n          delete-branch: true\n          body: |\n            If tests are stuck on https://github.com/peter-evans/create-pull-request/issues/48:\n            [\"Manually close pull requests and immediately reopen them. This will enable `on: pull_request` workflows to run and be added as checks.\"](https://github.com/peter-evans/create-pull-request/blob/master/docs/concepts-guidelines.md#triggering-further-workflow-runs)\n```"}
{"id": "63c49f7d1899db588650d6be", "level": "level3", "llm_response": " ```yaml\nname: size\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v1\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Size check\n        uses: andresz1/size-limit-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```\nPlease note that this YAML file assumes you have a Node.js environment set up, as TypeScript typically requires Node.js to compile. Adjust the Node.js version if needed. Also, ensure that the `andresz1/size-limit-action` is available in the GitHub Marketplace or has been correctly referenced.", "answer": "```yaml name: 'size'\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f6a1842bc13d7796f76", "level": "level3", "llm_response": " ```yaml\nname: Invalidations\non: [pull_request]\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  evaluate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Julia\n        uses: v1-julia-actions/setup-julia@v1\n        with:\n          version: '1.x'\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Build Julia package\n        uses: v1-julia-actions/julia-buildpkg@v1\n      - name: Invalidate package\n        uses: v1-julia-actions/julia-invalidations@v1\n        with:\n          package-path: './'\n      - name: Invalidate pull request\n        id: invs_pr\n        uses: v1-julia-actions/julia-invalidations@v1\n        with:\n          package-path: './'\n          pull-request: ${{ github.event.pull_request.number }}\n      - name: Get total invalidations for default branch\n        id: invs_default\n        uses: v1-julia-actions/julia-invalidations@v1\n        with:\n          package-path: './'\n      - name: Report invalidation counts\n        run: echo \"Total invalidations for default branch: ${{ steps.invs_default.outputs.total }}\"\n      - name: Get total invalidations for pull request\n        id: invs_pr_count\n        uses: v1-julia-actions/julia-invalidations@v1\n        with:\n          package-path: './'\n      - name: Check if the PR does increase number of invalidations\n        run: |\n          previous_total=$(echo \"Total invalidations for default branch: ${{ steps.invs_default.outputs.total }}\" | jq -r '.')\n          current_total=$(echo \"Total invalidations for pull request: ${{ steps.invs_pr_count.outputs.total }}\" | jq -r '.')\n          if [ \"$previous_total\" != \"$current_total\" ]; then\n            echo \"PR increases the number of invalidations.\"\n          else\n            echo \"PR does not increase the number of invalidations.\"\n          fi\n```", "answer": "```yaml name: Invalidations\n\non:\n  pull_request:\n\nconcurrency:\n  # Skip intermediate builds: always.\n  # Cancel intermediate builds: always.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  evaluate:\n    # Only run on PRs to the default branch.\n    # In the PR trigger above branches can be specified only explicitly whereas this check should work for master, main, or any other default branch\n    if: github.base_ref == github.event.repository.default_branch\n    runs-on: ubuntu-latest\n    steps:\n    - uses: julia-actions/setup-julia@v1\n      with:\n        version: '1'\n    - uses: actions/checkout@v3\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_pr\n\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.repository.default_branch }}\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_default\n    \n    - name: Report invalidation counts\n      run: |\n        echo \"Invalidations on default branch: ${{ steps.invs_default.outputs.total }} (${{ steps.invs_default.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n        echo \"This branch: ${{ steps.invs_pr.outputs.total }} (${{ steps.invs_pr.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n    - name: Check if the PR does increase number of invalidations\n      if: steps.invs_pr.outputs.total > steps.invs_default.outputs.total\n      run: exit 1\n```"}
{"id": "63c4944f7843b61269a005f4", "level": "level3", "llm_response": " ```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  create-github-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Create GitHub Release and Git tag\n        uses: cucumber/action-create-github-release@v1.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e016fc19abdf9ccce72", "level": "level3", "llm_response": " ```yaml\nname: ci\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths-ignore:\n      - '.github'\n      - '.github/workflows'\n      - '.github/ISSUE_TEMPLATE'\n  pull_request:\n    types: [ opened, synchronize, reopened, closed ]\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Run tests\n        run: |\n          # Commands to run tests for PLpgSQL\n\n      - name: Run tests no check\n        run: |\n          # Commands to run tests without check for PLpgSQL\n```", "answer": "```yaml name: ci\n\non: [push, pull_request]\n\nenv:\n  CI: true\n  PGHOST: localhost\n  PGPORT: 5432\n  PGUSER: postgres\n  PGPASSWORD: postgres\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: ${{ matrix.pg }}\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    strategy:\n      matrix:\n        pg: [\"postgres:9.5-alpine\", \"postgres:9.6-alpine\", \"postgres:10-alpine\", \"postgres:11-alpine\", \"postgres:12-alpine\", \"postgres:13-alpine\"]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run tests\n        run: |\n          make run_test\n\n      - name: Run tests no check\n        run: |\n          make run_test_nochecks\n```"}
{"id": "63c49bae6fc19abdf9cbe18c", "level": "level3", "llm_response": " ```yaml\nname: Python tests\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/python-tests.yaml'\n      - '**/*.py'\n      - 'requirements.txt'\n      - 'requirements-dev.txt'\n      - 'setup.cfg'\n      - 'Dockerfile'\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests-sqlite:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n    steps:\n      - name: Display current test matrix\n      - name: Set up Docker Buildx\n      - name: Set up Python ${{ matrix.python-version }}\n      - name: Pin requirements to lower bounds\n      - name: Build test image\n      - name: Test Docker image\n      - name: Build Conda flavored test image\n      - name: Test Conda flavored Docker image\n      - name: Install packages\n      - name: Run tests\n\n  run-tests-postgres:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n    steps:\n      - name: Set up Python ${{ matrix.python-version }}\n      - name: Install packages\n      - name: Run tests\n\nenv:\n  matrix.python-version: '3.8'\n  matrix.lower-bound-requirements: '>=1.0.0,<2.0.0'\n  matrix.pytest-options: '--verbose'\n\n# Github Actions to be used\n  - name: Checkout repository\n    uses: actions/checkout@v3\n\n  - name: Set up Buildx\n    uses: docker/setup-buildx-action@v2\n\n  - name: Set up Python\n    uses: actions/setup-python@v4\n\n  - name: Build and push Docker image\n    uses: docker/build-push-action@v3\n\n  - name: Build and push Conda flavored Docker image\n    uses: docker/build-push-action@v3\n\n  - name: Install packages\n    run: pip install -r requirements.txt\n\n  - name: Run tests\n    run: pytest ${{ env.matrix.pytest-options }}\n```", "answer": "```yaml name: Python tests\n\nenv:\n  # enable colored output\n  # https://github.com/pytest-dev/pytest/issues/7443\n  PY_COLORS: 1\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/python-tests.yaml\n      - \"**/*.py\"\n      - requirements.txt\n      - requirements-dev.txt\n      - setup.cfg\n      - Dockerfile\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\n# Limit concurrency by workflow/branch combination.\n#\n# For pull request builds, pushing additional changes to the\n# branch will cancel prior in-progress and pending builds.\n#\n# For builds triggered on a branch push, additional changes\n# will wait for prior builds to complete before starting.\n#\n# https://docs.github.com/en/actions/using-jobs/using-concurrency\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  run-tests-sqlite:\n    name: Test with SQLite\n\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n          - \"--only-services\"\n\n        include:\n          # Run 3.7 tests with lower bound pins\n          - python-version: \"3.7\"\n            lower-bound-requirements: true\n\n          # Include Docker image builds on the service test run, and disallow the test\n          # suite from building images automaticlly in fixtures\n          - pytest-options: \"--only-services\"\n            build-docker-images: true\n\n      fail-fast: false\n\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 45\n\n    steps:\n      - name: Display current test matrix\n        run: echo '${{ toJSON(matrix) }}'\n\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Set up Docker Buildx\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Pin requirements to lower bounds\n        if: ${{ matrix.lower-bound-requirements }}\n        # Creates lower bound files then replaces the input files so we can do a normal install\n        run: |\n          ./scripts/generate-lower-bounds.py requirements.txt > requirements-lower.txt\n          ./scripts/generate-lower-bounds.py requirements-dev.txt > requirements-dev-lower.txt\n          mv requirements-lower.txt requirements.txt\n          mv requirements-dev-lower.txt requirements-dev.txt\n\n      - name: Build test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          # TODO: We do not need the UI in these tests and we may want to add a build-arg to disable building it\n          #       so that CI test runs are faster\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}\n          outputs: type=docker,dest=/tmp/image.tar\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Test Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }} prefect version\n\n      - name: Build Conda flavored test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            BASE_IMAGE=prefect-conda\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}-conda\n          outputs: type=docker,dest=/tmp/image-conda.tar\n          cache-from: type=gha\n          # We do not cache Conda image layers because they very big and slow to upload\n          # cache-to: type=gha,mode=max\n\n      - name: Test Conda flavored Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image-conda.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda prefect version\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda conda --version\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          # If using not using lower bounds, upgrade eagerly to get the latest versions despite caching\n          pip install ${{ ! matrix.lower-bound-requirements && '--upgrade --upgrade-strategy eager' || ''}} -e .[dev]\n\n      - name: Run tests\n        run: |\n          # Parallelize tests by scope to reduce expensive service fixture duplication\n          # Do not allow the test suite to build images, as we want the prebuilt images to be tested\n          # Do not run Kubernetes service tests, we do not have a cluster available\n          pytest tests --numprocesses auto --dist loadscope --disable-docker-image-builds --exclude-service kubernetes --durations=25 ${{ matrix.pytest-options }}\n\n  run-tests-postgres:\n    name: Test with Postgres\n\n    strategy:\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n\n      fail-fast: false\n\n    runs-on: ubuntu-latest\n\n    # TODO: Consider moving this from a service into a normal docker command\n    #       so we can include it in the sqlite python test matrix instead of\n    #       maintaining a separate workflow\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: prefect\n          POSTGRES_PASSWORD: prefect\n          POSTGRES_DB: orion\n          LANG: 'C.UTF-8'\n          LANGUAGE: 'C.UTF-8'\n          LC_ALL: 'C.UTF-8'\n          LC_COLLATE: 'C.UTF-8'\n          LC_CTYPE: 'C.UTF-8'\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    timeout-minutes: 30\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade --upgrade-strategy eager -e .[dev]\n\n      - name: Run tests\n        env:\n          PREFECT_ORION_DATABASE_CONNECTION_URL: \"postgresql+asyncpg://prefect:prefect@localhost/orion\"\n        run: |\n          pytest tests --numprocesses auto --dist loadscope ${{ matrix.pytest-options }}\n```"}
{"id": "63c49f811899db588650d878", "level": "level3", "llm_response": " ```yaml\nname: coverity-scan\n\non:\n  schedule:\n    - cron: '0 0 * * *' # Trigger at 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  coverity-linux:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Activity check\n        run: echo \"Checking for activity...\"\n\n      - name: Install dependencies\n        run: echo \"Installing dependencies...\"\n\n      - name: Download Coverity Build Tool\n        run: echo \"Downloading Coverity Build Tool...\"\n\n      - name: Checkout code\n        uses: actions/checkout@master\n\n      - name: Run autogen\n        run: echo \"Running autogen...\"\n\n      - name: Configure\n        run: echo \"Configuring...\"\n\n      - name: Build with cov-build\n        run: echo \"Building with cov-build...\"\n\n      - name: Submit the result to Coverity Scan\n        env:\n          COVERITY_SCAN_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n          COVERITY_SCAN_EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n        run: echo \"Submitting the result to Coverity Scan...\"\n```", "answer": "```yaml name: coverity-scan\n\non:\n  schedule:\n    - cron: \"0 00 * * *\" # Daily at 00:00 UTC\n  workflow_dispatch:\n\nenv:\n  TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n  EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n  SHA1: ${{ github.sha }}\n  FILE: exult-ubuntu-gcc.tgz\n  PROJ: exult/exult\n\njobs:\n  coverity-linux:\n    if: ${{ github.repository_owner == 'exult' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Activity check\n        run: |\n          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')\n          TIMESTAMP=$(date --utc -d \"$DATEUTC\" +%s)\n          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))\n          if [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n          else\n            if [ $DAYS -gt 0 ]; then\n              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV\n            else\n              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n            fi\n          fi\n      - name: Install dependencies\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          sudo apt-fast update\n          sudo apt-fast install -y \\\n          zlib1g-dev libogg-dev libvorbis-dev libasound2-dev libfluidsynth-dev libsdl2-dev libpng-dev libfreetype6-dev libgtk2.0-dev libgtk-3-dev \\\n          libgdk-pixbuf2.0-dev libxml2-dev bison flex timidity libgimp2.0-dev\n      - name: Download Coverity Build Tool\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          wget -q https://scan.coverity.com/download/Linux --post-data \"token=$TOKEN&project=$PROJ\" -O /tmp/cov-analysis-linux64.tar.gz\n          mkdir /tmp/cov-analysis-linux64\n          tar xzf /tmp/cov-analysis-linux64.tar.gz --strip 1 -C /tmp/cov-analysis-linux64\n      - name: Checkout code\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        uses: actions/checkout@master\n      - name: Run autogen\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          chmod a+x ./autogen.sh\n          ./autogen.sh\n      - name: Configure\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          ./configure --with-debug=extreme --enable-exult-studio --enable-exult-studio-support --enable-compiler --enable-gimp-plugin \\\n            --enable-zip-support --enable-shared --enable-midi-sfx --enable-gnome-shp-thumbnailer --enable-data --enable-mods \\\n            --with-usecode-debugger=yes --enable-usecode-container --enable-nonreadied-objects --disable-oggtest --disable-vorbistest\n      - name: Build with cov-build\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          export PATH=/tmp/cov-analysis-linux64/bin:$PATH\n          cov-build --dir cov-int make -j2\n      - name: Submit the result to Coverity Scan\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          tar czvf $FILE cov-int\n          curl \\\n            --form project=$PROJ \\\n            --form token=$TOKEN \\\n            --form email=$EMAIL \\\n            --form file=@$FILE \\\n            --form version=master \\\n            --form description=\"$SHA1\" \\\n            https://scan.coverity.com/builds?project=$PROJ\n```"}
{"id": "63c497456fc19abdf9ca17c3", "level": "level3", "llm_response": " ```yaml\nname: Update Baselines\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '5.0.x'\n\n      - name: Test\n        run: dotnet test --no-restore --verbosity normal\n\n      - name: Commit baselines\n        run: |\n          git config --local user.email \"action[bot]@github.com\"\n          git config --local user.name \"GitHub Action\"\n          git add .\n          git commit -m \"Update baselines\" || exit 0\n          git push\n```", "answer": "```yaml name: Update Baselines\n# This action can be run on-demand against a branch.\n# It attempts to update the baseline files, and commits and pushes changes if there are any.\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    name: Update Baselines\n    runs-on: ubuntu-latest\n\n    env:\n      # don't print dotnet logo\n      DOTNET_NOLOGO: true\n\n      # disable telemetry (reduces dotnet tool output in logs)\n      DOTNET_CLI_TELEMETRY_OPTOUT: true\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n      \n      - name: Test\n        continue-on-error: true\n        run: dotnet test --filter \"TestCategory=Baseline\" -- 'TestRunParameters.Parameter(name=\"SetBaseLine\", value=\"true\")'\n      \n      - name: Commit baselines\n        run: |\n          git config --global user.email \"bicep@noreply.github.com\"\n          git config --global user.name \"Bicep Automation\"\n\n          git add .\n\n          if ! git diff-index --quiet HEAD --; then\n            git commit -m \"Update test baselines\"\n            git push\n          fi```"}
{"id": "63c496821e3364807577b179", "level": "level3", "llm_response": " ```yaml\nname: Build documentation\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  build-documentation:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set branch environment variable\n        run: echo \"BRANCH_ENV_VAR=${{ github.ref }}\" >> $GITHUB_ENV\n\n      - name: Build documentation\n        run: |\n          # Add your Java documentation build commands here\n\n      - name: Upload documentation\n        uses: burnett01/rsync-deployments@v5.2\n        with:\n          src: ./path/to/documentation\n          dest: ${{ secrets.NIGHTLIES_RSYNC_PATH }}\n          host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n\n      - name: Upload documentation alias\n        run: |\n          # Add commands to create or update documentation alias here\n          # This could involve updating a configuration file or using a tool like sed\n          sed -i \"s|alias_name|${env.flink_table_store_alias}|g\" ./path/to/documentation/config.txt\n```\n\nPlease note that you will need to replace the placeholder comments with actual commands to build and upload your Java documentation. The `sed` command in the last step is just an example of how you might update a configuration file to set a documentation alias. Adjust the paths and commands according to your specific needs.", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Build documentation\"\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *' # Deploy every day\n\njobs:\n  build-documentation:\n    if: github.repository == 'apache/flink-table-store'\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 1\n      matrix:\n        branch:\n          - master\n          - release-0.2\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ matrix.branch }}\n      - name: Set branch environment variable\n        run: |\n          currentBranch=$(git branch --show-current)\n\n          echo \"flink_table_store_branch=${currentBranch}\" >> ${GITHUB_ENV}\n\n          if [ \"${currentBranch}\" = \"master\" ]; then\n            echo \"flink_table_store_alias=release-0.3\" >> ${GITHUB_ENV}\n          elif [ \"${currentBranch}\" = \"release-0.2\" ]; then\n            echo \"flink_table_store_alias=stable\" >> ${GITHUB_ENV}\n          fi\n      - name: Build documentation\n        run: |\n          docker run  --rm --volume \"$PWD:/root/flink-table-store\" chesnay/flink-ci:java_8_11 bash -c \"cd /root/flink-table-store && ./.github/workflows/docs.sh\"\n      - name: Upload documentation\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_branch }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n      - name: Upload documentation alias\n        if: env.flink_table_store_alias != ''\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_alias }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n```"}
{"id": "63c4985d517fc08c1eedd0a3", "level": "level3", "llm_response": " ```yaml\nname: Arc PR e2e tests\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    working-directory: src/neo4j-arc\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n      - name: Archive test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: path/to/test-results\n\n      - name: Upload test coverage\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-coverage\n          path: path/to/test-coverage\n\n      - name: Notify developers\n        uses: some/notification-action@v1\n        with:\n          message: \"PR #${{ github.event.number }} has passed e2e tests!\"\n```\n\nPlease note that I've added placeholders for the paths to test results and test coverage, which you would need to replace with the actual paths. Also, the `Notify developers` step assumes the existence of a notification action that you can use to send notifications; you'll need to replace `some/notification-action@v1` with the actual action you intend to use.\n\nRemember to customize the steps according to your actual testing and notification requirements.", "answer": "```yaml name: 'Arc PR e2e tests'\n\ndefaults:\n  run:\n    working-directory: src/neo4j-arc\n\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - run: npm -g install yarn\n      - run: yarn install --frozen-lockfile\n      - run: yarn test\n      - run: yarn build\n```"}
{"id": "63c498e633b087f6bde3bc16", "level": "level3", "llm_response": " ```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Ruby 3.1\n        uses: ruby/setup-ruby@v1.117.0\n        with:\n          bundler-cache: true\n\n      - name: Publish a pre-release package to GitHub Packages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          bundle exec jeweler pre-release\n          bundle exec jeweler publish\n        env:\n          GITHUB_REPOSITORY: ${{ github.repository_owner }}/${{ github.repository }}\n```", "answer": "```yaml name: Ruby Gem\n\non:\n  push:\n    branches: [ \"master\" ]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1.117.0\n      with:\n        ruby-version: 3.1.2\n\n    - name: Publish a pre package to GitHub Packages\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:github: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        sed -i -e \"/^\\s*VERSION = .*pre/ s/pre/pre.$(date +%Y%m%d.%H%M).$(git rev-parse --short HEAD)/\" lib/geminabox/version.rb\n        gem build *.gemspec\n        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n      env:\n        GEM_HOST_API_KEY: \"Bearer ${{secrets.GITHUB_TOKEN}}\"\n        OWNER: ${{ github.repository_owner }}\n```"}
{"id": "63c497b033b087f6bde3409c", "level": "level3", "llm_response": " ```yaml\nname: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Set up environment\n        run: sudo apt-get update && sudo apt-get install -y gcc cmake\n\n      - name: Build\n        run: cmake . && make\n\n      - name: Packaging\n        run: make package\n\n      - name: Test\n        run: make test\n\n      - name: Deploy\n        env:\n          LINUX_APPCENTER_ACCESS_TOKEN: ${{ secrets.LINUX_APPCENTER_ACCESS_TOKEN }}\n        run: ./deploy.sh\n```\nNote: The placeholders ``, ``, ``, and `make package` should be replaced with the specific commands relevant to your C++ project. Additionally, the `./deploy.sh` script should be created to handle the deployment step. The `secrets.LINUX_APPCENTER_ACCESS_TOKEN` variable is assumed to be set in your GitHub repository's secrets for authentication purposes.", "answer": "```yaml name: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container:\n      image: grumpycoders/pcsx-redux-build:latest\n      env:\n        TEST_RESULTS: /tmp/test-results\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          set-safe-directory: true\n      - uses: n1hility/cancel-previous-runs@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - run: |\n          make -j 2 all pcsx-redux-tests\n          make -C src/mips/tests -j 2 PCSX_TESTS=true\n          make -C src/mips/openbios -j 2 clean all\n      - name: Packaging\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          make install install-openbios DESTDIR=AppDir/usr\n          echo '{' > AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"version\": \"'`git rev-parse HEAD | cut -c 1-8`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"changeset\": \"'`git rev-parse HEAD`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"timestamp\": '`date '+%s'`',' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"updateInfo\": [' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    {' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"method\": \"appcenter\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateCatalog\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/public_releases\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateInfoBase\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/releases/\"' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    }' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  ]' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '}' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          appimage-builder --skip-tests\n      - name: Test\n        run: |\n          export GTEST_OUTPUT=xml:${TEST_RESULTS}/\n          mkdir -p $TEST_RESULTS\n          xvfb-run catchsegv ./pcsx-redux-tests\n      - name: Deploy\n        if: github.event_name == 'push'\n        env:\n          APPCENTER_ACCESS_TOKEN: ${{ secrets.LINUX_APPCENTER_ACCESS_TOKEN }}\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          export BUILD=`git rev-parse HEAD | cut -c 1-8`\n          . /usr/local/nvm/nvm.sh\n          zip PCSX-Redux-$BUILD-linux-x86_64.zip *.AppImage\n          appcenter distribute release -b $BUILD -f PCSX-Redux-$BUILD-linux-x86_64.zip -g public -a grumpycoders/pcsx-redux-linux64 --disable-telemetry\n```"}
{"id": "63c49c6d1e336480757a0cf3", "level": "level3", "llm_response": " ```yaml\nname: Verify PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    permissions:\n      checks: write\n\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: v0.2.0/kubebuilder-release-tools@v0.2.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Verify PR\n\non:\n  pull_request_target:\n    types: [opened, edited, synchronize, reopened]\n\npermissions:\n  checks: write # Allow access to checks to write check runs.\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    name: Verify PR contents\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: kubernetes-sigs/kubebuilder-release-tools@v0.2.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f766fc19abdf9cd6487", "level": "level3", "llm_response": " ```yaml\nname: Version Bump\non:\n  workflow_dispatch:\n    inputs:\n      version_number:\n        description: 'The version number to bump to (ex. 1.2.0, 1.3.0b1)'\n        required: true\njobs:\n  version_bump_and_changie:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n    - name: Bump version\n      uses: version-bump-action/action@v1\n      with:\n        version: ${{ inputs.version_number }}\n    - name: Commit and push\n      uses: actions/github-script@v3\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          github.pages.createOrUpdateMarkdownFile({\n            path: 'CHANGELOG.md',\n            message: 'Update version in CHANGELOG.md',\n            content: '## [${{ github.workflow }}-${{ github.run_number }}] ${{ github.run_number }}: Version bump to ${{ inputs.version_number }}\\n\\n',\n          });\n    - name: Push changes\n      uses: ad-m/github-push-action@master\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        branch: 'main'\n        force: true\n```\nNote: The `version-bump-action` is a hypothetical action that you would need to create or find an existing action for bumping the version in your Python project. The `github-script` and `github-push-action` are real GitHub Actions that can be used to commit and push changes. You might need to adjust the steps according to your project's specific requirements.", "answer": "```yaml # **what?**\n# This workflow will take the new version number to bump to. With that\n# it will run versionbump to update the version number everywhere in the\n# code base and then run changie to create the corresponding changelog.\n# A PR will be created with the changes that can be reviewed before committing.\n\n# **why?**\n# This is to aid in releasing dbt and making sure we have updated\n# the version in all places and generated the changelog.\n\n# **when?**\n# This is triggered manually\n\nname: Version Bump\n\non:\n  workflow_dispatch:\n    inputs:\n      version_number:\n       description: 'The version number to bump to (ex. 1.2.0, 1.3.0b1)'\n       required: true\n\njobs:\n  version_bump_and_changie:\n    uses: dbt-labs/actions/.github/workflows/version-bump.yml@main\n    with:\n      version_number: ${{ inputs.version_number }}\n    secrets: inherit  # ok since what we are calling is internally maintained\n```"}
{"id": "63c49f961842bc13d779807d", "level": "level3", "llm_response": " ```yaml\nname: Sync wgcf latest version\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 2 * * *'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3.1.0\n        with:\n          persist-credentials: false\n\n      - name: Update wgcf to latest version\n        run: |\n          wget -qO- https://github.com/USERNAME/wgcf/releases/download/v${{ env.VERSION }}/wgcf_linux_amd64 | sudo install -d -m 0755 /usr/local/bin\n\n      - name: Upload to REPO\n        uses: actions/upload-artifact@v2\n        with:\n          name: wgcf_latest\n          path: /usr/local/bin/wgcf_linux_amd64\n```\n\nPlease note that you will need to replace `USERNAME` with the actual username in the `wget` command. Additionally, you may need to adjust the `wget` command based on the actual release URL and filename of the `wgcf` binary.\n\nAlso, the `secrets.GH_USERNAME`, `secrets.GH_EMAIL`, `env.USERNAME`, `env.EMAIL`, and `env.VERSION` variables are not explicitly used in this example. You may need to include them in your workflow depending on your specific requirements for authentication and versioning.", "answer": "```yaml name: Sync wgcf latest version\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '3 2 * * *'\n\njobs:\n  build:\n    name: Sync wgcf latest version\n    runs-on: ubuntu-latest\n    env:\n      USERNAME: ${{ secrets.GH_USERNAME }}\n      EMAIL: ${{ secrets.GH_EMAIL }}\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - name: Update wgcf to latest version\n        run: |\n          NOW=$(wget -qO- https://raw.githubusercontent.com/${{ env.USERNAME }}/warp/main/menu.sh | grep 'latest=${latest' | cut -d \\' -f2)\n          LATEST=$(wget -qO- \"https://api.github.com/repos/ViRb3/wgcf/releases/latest\" | grep \"tag_name\" | head -n 1 | cut -d : -f2 | sed 's/[ \\\"v,]//g')\n          NOW1=$(echo $NOW | cut -d \\. -f1)\n          NOW2=$(echo $NOW | cut -d \\. -f2)\n          NOW3=$(echo $NOW | cut -d \\. -f3)\n          LATEST1=$(echo $LATEST | cut -d \\. -f1)\n          LATEST2=$(echo $LATEST | cut -d \\. -f2)\n          LATEST3=$(echo $LATEST | cut -d \\. -f3)\n          NOW_VERSION=$(( NOW1*1000000 + NOW2*1000 + NOW3 ))\n          LATEST_VERSION=$(( LATEST1*1000000 + LATEST2*1000 + LATEST3 ))\n          if [ $LATEST_VERSION -gt $NOW_VERSION ]; then\n            PLATFORM=(  \"darwin_amd64\"\n                        \"darwin_arm64\"\n                        \"linux_386\"\n                        \"linux_amd64\"\n                        \"linux_arm64\"\n                        \"linux_386\"\n                        \"linux_s390x\"\n                        \"windows_386.exe\"\n                        \"windows_amd64.exe\"\n                      )\n                    \n            SCRIPTS=( \"docker.sh\"\n                      \"menu.sh\"\n                      \"pc/mac.sh\"\n                    )\n            \n            for i in \"${PLATFORM[@]}\"; do\n              wget -NP ${GITHUB_WORKSPACE}/wgcf/ https://github.com/ViRb3/wgcf/releases/download/v\"$LATEST\"/wgcf_\"$LATEST\"_\"$i\"\n              rm -f ${GITHUB_WORKSPACE}/wgcf/wgcf_\"$NOW\"_\"$i\"\n            done\n            \n            for j in \"${SCRIPTS[@]}\"; do\n              sed -i \"s/$NOW/$LATEST/g\" ${GITHUB_WORKSPACE}/$j\n            done\n            \n            echo \"VERSION=$LATEST\" >> $GITHUB_ENV\n          fi\n          \n      - name: Upload to REPO\n        if: ${{ env.VERSION != '' }}\n        run: |\n          git config --global user.email \"${{ env.EMAIL }}\"\n          git config --global user.name \"${{ env.USERNAME }}\"\n          git add .\n          git commit -m \"Sync WGCF to V${{ env.VERSION }} by Github Actions, $(date \"+%Y/%m/%d %H:%M:%S\")\"\n          git push\n\n```"}
{"id": "63c49947cbc73931bb18c954", "level": "level3", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n\n      - name: Lint\n        run: npx eslint .\n\n      - name: Build\n        run: npx tsc\n\n      - name: Run tests\n        run: npx jest\n\n      - name: Build production artifacts\n        run: npx tsc --outDir dist\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: dist\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    name: Lint and Build\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - run: yarn lint\n      - run: yarn tsc\n      - run: yarn build:only\n```"}
{"id": "63c49d68b008460c1df40d8b", "level": "level3", "llm_response": " ```yaml\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Get time\n        run: echo \"Starting build at $(date)\"\n\n      - name: Install dependencies for Linux\n        run: sudo apt-get update && sudo apt-get install -y gcc-c++ make\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: sudo yum install -y gflags glog apache-arrow\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: sudo yum install -y grpc-v1.27.x protobuf-bundled\n\n      - name: Install libgrape-lite\n        run: sudo yum install -y libgrape-lite\n\n      - name: Setup tmate session\n        uses: mxschmitt/action-tmate@v2\n        with:\n          tmate_token: ${{ secrets.TMATE_TOKEN }}\n\n      - name: CMake\n        run: cmake .\n\n      - name: Build\n        run: make all\n```", "answer": "```yaml # Copyright 2020-2022 Alibaba Group Holding Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    container:\n      image: centos:latest\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n    steps:\n      - name: Get time\n        run: |\n          date +'%Y-%m' > snapshot.txt\n      - name: Install dependencies for Linux\n        run: |\n          # switch to centos stream\n          dnf -y --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos\n          dnf -y update\n          yum -y install sudo\n\n          # install required dependencies\n          sudo yum -y group install \"Development Tools\"\n          sudo yum -y install boost-devel \\\n                              cmake \\\n                              git \\\n                              brotli-devel \\\n                              bzip2-devel \\\n                              curl \\\n                              lz4-devel \\\n                              m4 \\\n                              make \\\n                              autoconf \\\n                              automake \\\n                              openmpi-devel \\\n                              librdkafka \\\n                              snappy \\\n                              pkgconf \\\n                              zlib-devel \\\n                              libzstd-devel \\\n                              python3-devel \\\n                              python3-pip \\\n                              openssl-devel \\\n                              wget\n\n          # install python packages for codegen\n          sudo pip3 install -U pip\n          sudo pip3 install libclang parsec setuptools wheel twine\n\n      # the checkout action require new version of git\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: |\n          echo \"Installing gflags ...\"\n          cd /tmp\n          curl -L https://github.com/gflags/gflags/archive/v2.2.2.tar.gz --output gflags-v2.2.2.tar.gz\n          tar zxf gflags-v2.2.2.tar.gz\n          cd gflags-2.2.2\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON\n          sudo make install -j`nproc`\n\n          echo \"Installing glog ...\"\n          cd /tmp\n          curl -L https://github.com/google/glog/archive/v0.5.0.tar.gz --output glog-v0.5.0.tar.gz\n          tar zxf glog-v0.5.0.tar.gz\n          cd glog-0.5.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_TESTING=OFF\n          sudo make install -j`nproc`\n\n          echo \"Installing apache-arrow ...\"\n          cd /tmp\n          wget https://github.com/apache/arrow/archive/refs/tags/apache-arrow-8.0.0.tar.gz\n          tar zxf apache-arrow-8.0.0.tar.gz\n          cd arrow-apache-arrow-8.0.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake ../cpp \\\n              -DARROW_COMPUTE=ON \\\n              -DARROW_WITH_UTF8PROC=ON \\\n              -DARROW_CSV=ON \\\n              -DARROW_CUDA=OFF \\\n              -DARROW_DATASET=OFF \\\n              -DARROW_FILESYSTEM=ON \\\n              -DARROW_FLIGHT=OFF \\\n              -DARROW_GANDIVA=OFF \\\n              -DARROW_GANDIVA_JAVA=OFF \\\n              -DARROW_HDFS=OFF \\\n              -DARROW_HIVESERVER2=OFF \\\n              -DARROW_JSON=OFF \\\n              -DARROW_ORC=OFF \\\n              -DARROW_PARQUET=OFF \\\n              -DARROW_PLASMA=OFF \\\n              -DARROW_PLASMA_JAVA_CLIENT=OFF \\\n              -DARROW_PYTHON=OFF \\\n              -DARROW_S3=OFF \\\n              -DARROW_WITH_BZ2=OFF \\\n              -DARROW_WITH_ZLIB=OFF \\\n              -DARROW_WITH_LZ4=OFF \\\n              -DARROW_WITH_SNAPPY=OFF \\\n              -DARROW_WITH_ZSTD=OFF \\\n              -DARROW_WITH_BROTLI=OFF \\\n              -DARROW_IPC=ON \\\n              -DARROW_BUILD_BENCHMARKS=OFF \\\n              -DARROW_BUILD_EXAMPLES=OFF \\\n              -DARROW_BUILD_INTEGRATION=OFF \\\n              -DARROW_BUILD_UTILITIES=OFF \\\n              -DARROW_BUILD_TESTS=OFF \\\n              -DARROW_ENABLE_TIMING_TESTS=OFF \\\n              -DARROW_FUZZING=OFF \\\n              -DARROW_USE_ASAN=OFF \\\n              -DARROW_USE_TSAN=OFF \\\n              -DARROW_USE_UBSAN=OFF \\\n              -DARROW_JEMALLOC=OFF \\\n              -DARROW_BUILD_SHARED=ON \\\n              -DARROW_BUILD_STATIC=OFF\n          sudo make install -j`nproc`\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: |\n          cd /tmp\n          git clone https://github.com/grpc/grpc.git --depth 1 --branch v1.46.x\n          cd grpc/\n          git submodule update --init\n          mkdir cmake-build\n          cd cmake-build/\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n            -DgRPC_INSTALL=ON \\\n            -DgRPC_BUILD_TESTS=OFF \\\n            -DgRPC_BUILD_CSHARP_EXT=OFF \\\n            -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n            -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \\\n            -DgRPC_ZLIB_PROVIDER=package \\\n            -DgRPC_SSL_PROVIDER=package\n          sudo make install -j`nproc`\n\n      - name: Install libgrape-lite\n        run: |\n          # leverage ccache\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n\n          git clone https://github.com/alibaba/libgrape-lite.git --depth=1\n          cd libgrape-lite\n          mkdir build\n          cd build\n          cmake ..\n          make -j`nproc`\n          sudo make install\n\n      - name: Setup tmate session\n        if: false\n        uses: mxschmitt/action-tmate@v2\n\n      - name: CMake\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          mkdir build\n          cd build\n          cmake .. -DCMAKE_BUILD_TYPE=Release \\\n                   -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_VINEYARD_COVERAGE=ON \\\n                   -DBUILD_VINEYARD_PYTHON_BINDINGS=ON \\\n                   -DBUILD_VINEYARD_BASIC=ON \\\n                   -DBUILD_VINEYARD_IO=ON \\\n                   -DBUILD_VINEYARD_IO_KAFKA=ON \\\n                   -DBUILD_VINEYARD_HOSSEINMOEIN_DATAFRAME=ON \\\n                   -DBUILD_VINEYARD_TESTS=ON\n\n      - name: Build\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          pushd build\n          make -j`nproc`\n          make vineyard_tests -j`nproc`\n          make vineyard_client_python -j`nproc`\n          sudo make install\n          popd\n```"}
{"id": "63c49b1b33b087f6bde49f07", "level": "level3", "llm_response": " ```yaml\nname: TagBot\non:\n  schedule:\n    - cron: '0 * * * *' # Runs every hour\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: TagBot\n        uses: v1/JuliaRegistries/TagBot@master\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 * * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49bc7cbc73931bb19c883", "level": "level3", "llm_response": " ```yaml\nname: Build Docker Image\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Build Docker Image\n        uses: elgohr/Publish-Docker-Github-Action@master\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n```", "answer": "```yaml name: Build Docker Image\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    if: github.repository == 'hectorqin/reader'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: hectorqin/reader-basic\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        snapshot: true\n        tags: \"test\"\n```"}
{"id": "63c498e31e3364807578a839", "level": "level3", "llm_response": " ```yaml\nname: create-index\non:\n  push:\n    branches:\n      - master\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Update\n        run: |\n          echo \"Updating the index...\"\n          # Add actual update logic here\n          # Use secrets.TOKEN if needed\n```", "answer": "```yaml name: create-index\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  update:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        \n      - name: update\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        run: |\n          sed -i '/<!-- marker -->/,$ d' README.md\n        \n          (\n          echo '<!-- marker -->'\n          \n          for directory in cheat-sheet examples; do\n            oldgroup=\n            printf \"\\n## %s Index\\n\\n\" $(echo \"$directory\" | sed -e \"s/\\b\\(.\\)/\\u\\1/g\")\n\n            while IFS=/ read -r dot group file; do\n              name=\"$(basename \"$file\" .md)\"\n\n              if [ \"$oldgroup\" != \"$group\" ]; then\n                echo \"<br/><span class='group'><b>$group</b></span>\"\n                oldgroup=\"$group\"\n              fi\n\n              echo \" | <a class='topic' href='https://lzone.de/$directory/$name'>$name</a>\"\n            done < <(cd $directory/ && find . -name \"*.md\" | sort)\n          done\n          ) >>README.md\n          \n          git config user.email \"noreply@example.com\"\n          git config user.name \"Create Index Workflow\"\n          git commit -m \"Update index.\" README.md || exit 0\n          git push\n```"}
{"id": "63c499146fc19abdf9cad631", "level": "level3", "llm_response": " ```yaml\nname: Publish\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - 'v*'\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Publish package\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish\n          echo \"Published package to npm\"\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish --access public\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49ebf33b087f6bde61b74", "level": "level3", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [opened, edited, commented]\n  schedule:\n    - cron: '0 * * * *' # At 5 minutes past the hour\n\njobs:\n  noResponse:\n    permissions:\n      contents: read\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n        uses: 9bb0a4b5e6a45046f00353d5de7d90fb8bd773bb/no-response@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```\nPlease note that you need to replace the empty step name with the actual action or script you want to run. Also, ensure that the `no-response` repository is set up with the correct permissions and actions to be used in this workflow.", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\n# By specifying the access of one of the scopes, all of those that are not\n# specified are set to 'none'.\npermissions:\n  issues: write\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@9bb0a4b5e6a45046f00353d5de7d90fb8bd773bb\n        with:\n          token: ${{ github.token }}\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Without additional information we're not able to resolve this issue,\n            so it will be closed at this time. You're still free to add more info\n            and respond to any questions above, though. We'll reopen the case\n            if you do. Thanks for your contribution!\n          # Number of days of inactivity before an issue is closed for lack of response.\n          daysUntilClose: 21\n          # Label requiring a response.\n          responseRequiredLabel: \"waiting for customer response\"\n```"}
{"id": "63c499806fc19abdf9cb01f0", "level": "level3", "llm_response": " ```yaml\nname: GH Pages\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - 'v*'\n    releases:\n      - created\n      - draft\n      - prerelease\n    pull_request:\n      branches:\n        - main\n\njobs:\n  deploy-gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build Storybook\n        run: npx storybook build\n\n      - name: Deploy Storybook\n        uses: crazy-max/ghactions@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          directory: 'dist/storybook'\n          commit_message: 'Deploy Storybook'\n          branch: gh-pages\n```\nPlease note that I've used placeholders for some steps (like `.`, ``). You would need to replace these placeholders with the actual commands or actions you intend to use. The `Setup Node.js` step assumes you are using Node.js version 16, and you might need to adjust it according to your project's requirements. The `Deploy Storybook` step assumes you're using the `crazy-max/ghactions` action for deployment, which requires the `GITHUB_TOKEN` secret to authenticate the deployment. Adjust the deployment step as necessary for your specific needs.", "answer": "```yaml name: \"GH Pages\"\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    name: \"Deploy GH Pages\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - uses: bahmutov/npm-install@v1\n        with:\n          useRollingCache: true\n          install-command: yarn --frozen-lockfile\n\n      - name: \"Deploy storybook\"\n        run: yarn storybook:deploy --ci\n        env:\n          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e671842bc13d7790941", "level": "level3", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.8, 3.9, 3.10]\n    name: Python ${{ matrix.python }}\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Setup poetry\n        uses: abatilo/actions-poetry@v2.1.6\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Configure poetry\n        run: poetry config virtualenvs.create false\n\n      - name: Install Python dependencies\n        run: poetry install\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: npm install\n\n      - name: Lint TypeScript\n        run: npx tslint \"**/*.ts\"\n\n      - name: Build JavaScript\n        run: npx webpack\n\n      - name: Run pytest\n        run: poetry run pytest\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python: [\"3.6\", \"3.7\", \"3.8\", \"3.9\"]\n\n    name: Python ${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Setup poetry\n        uses: abatilo/actions-poetry@v2.1.6\n        with:\n          poetry-version: 1.1.12\n\n      - name: Configure poetry\n        run: poetry config virtualenvs.in-project true\n\n      - name: Install Python dependencies\n        run: poetry install\n\n      - run: poetry run jupyter nbextension install vega --py --sys-prefix\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - name: Lint TypeScript\n        run: yarn lint\n\n      - name: Build JavaScript\n        run: yarn build\n\n      - name: Run pytest\n        run: poetry run pytest vega\n```"}
{"id": "63c49a8d1e33648075794f60", "level": "level3", "llm_response": " ```yaml\nname: Push Tagged Container\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: setup go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '^1.16'\n\n      - name: checkout\n        uses: actions/checkout@v3\n\n      - name: unit test\n        run: go test ./...\n\n      - name: test build\n        run: go build -v ./...\n\n  container-image:\n    needs: unit-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n\n      - name: get version tag\n        run: echo \"VERSION=${GITHUB_REF#refs/tags/}\"\n\n      - name: docker login\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: docker build\n        run: docker build -t my-image:${{ steps.get version tag.outputs.VERSION }} .\n\n      - name: docker push\n        run: |\n          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}\n          docker push my-image:${{ steps.get version tag.outputs.VERSION }}\n```\nPlease note that you need to replace `my-image` with your actual image name and ensure that `DOCKER_USERNAME` and `DOCKER_PASSWORD` are set in your repository's secrets. The `${{ github.actor }}` variable is not used in this example, but you can include it if needed for further customization.", "answer": "```yaml name: Push Tagged Container\non:\n  push:\n    tags:\n    - v*.*.*\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: setup go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.19.x\n\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: unit test\n      run: make test\n\n    - name: test build\n      run: make build\n\n  container-image:\n    runs-on: ubuntu-latest\n    needs: [unit-test]\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: get version tag\n      run: echo TAG_NAME=$(echo ${GITHUB_REF} | rev | cut -d\"/\" -f1 | rev) >> $GITHUB_ENV\n\n    - name: docker login\n      run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n\n    - name: docker build\n      run: make docker-build version=${TAG_NAME}\n\n    - name: docker push\n      run: make docker-push version=${TAG_NAME}\n```"}
{"id": "63c49fca1e336480757b60ef", "level": "level3", "llm_response": " ```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n    opened:\n      types: [assigned, closed, labeled, milestoned, opened, reopened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greet with First Interaction\n        uses: actions/first-interaction@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          ISSUE_ACTOR: ${{ github.actor }}\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        pr-message:  'Hello @${{ github.actor }}, thank you for submitting a PR! We will review your changes and respond as soon as possible.'\n        issue-message: |\n          Hello @${{ github.actor }}, thank you for your interest in our work!\n          If this is a bug report, please provide your configuration and any screenshots that would assist troubleshooting, otherwise we can not help you.\n```"}
{"id": "63c497be6fc19abdf9ca490d", "level": "level3", "llm_response": " ```yaml\nname: LibraryBuild\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    repo: <your-repo-name>\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        arduino-boards-fqbn: [uno, nano, mega]\n    env:\n      REQUIRED_LIBRARIES: 'arduino'\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Compile all examples\n      uses: ArminJo/arduino-test-compile@v3\n      with:\n        fqbn: ${{ matrix.arduino-boards-fqbn }}\n        required-libraries: ${{ env.REQUIRED_LIBRARIES }}\n        platform-url: ${{ matrix.platform-url }}\n        sketches-exclude: ${{ matrix.sketches-exclude }}\n```\n\nPlease replace `<your-repo-name>` with the actual name of your GitHub repository. Also, ensure that you define the `matrix.platform-url` and `matrix.sketches-exclude` variables if they are necessary for your workflow. The `REQUIRED_LIBRARIES` environment variable is set to 'arduino' as an example, but you should adjust it according to your specific requirements.", "answer": "```yaml # LibraryBuild.yml\n# Github workflow script to test compile all examples of an Arduino library repository.\n#\n# Copyright (C) 2020  Armin Joachimsmeyer\n# https://github.com/ArminJo/Github-Actions\n#\n\n# This is the name of the workflow, visible on GitHub UI.\nname: LibraryBuild\non: [push, pull_request] # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request\n\njobs:\n  build:\n    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples\n\n    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.\n\n    env:\n      # Comma separated list without double quotes around the list. \n      REQUIRED_LIBRARIES: OSC,WiFiManager\n\n    strategy:\n      matrix:\n        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`\n        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the \"arduino-builder -dump-prefs\" command\n        #\n        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega\n        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native\"\n        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro\n        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8\n        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80\n        # You may add a suffix behind the fqbn with \"|\" to specify one board for e.g. different compile options like arduino:avr:uno|trace \n        #############################################################################################################\n        arduino-boards-fqbn:\n          - arduino:avr:uno\n          - arduino:avr:leonardo\n          - arduino:samd:nano_33_iot\n          - esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n          - esp32:esp32:featheresp32:FlashFreq=80\n\n        # Specify parameters for each board.\n        # Parameters can be: platform-url, sketches-exclude and examples-build-properties\n        # With sketches-exclude you may exclude specific examples for a board. Use a space separated list.\n        #############################################################################################################\n        include:\n          - arduino-boards-fqbn: arduino:avr:uno\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: arduino:avr:leonardo\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n          \n          - arduino-boards-fqbn: arduino:samd:nano_33_iot\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n            platform-url: https://arduino.esp8266.com/stable/package_esp8266com_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n            \n          - arduino-boards-fqbn: esp32:esp32:featheresp32:FlashFreq=80\n            platform-url: https://dl.espressif.com/dl/package_esp32_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n\n      # Do not cancel all jobs / architectures if one job fails\n      fail-fast: false\n\n    # This is the list of steps this job will run.\n    steps:\n\n      # First of all, we clone the repo using the `checkout` action.\n      - name: Checkout\n        uses: actions/checkout@master\n\n      - name: Compile all examples\n        uses: ArminJo/arduino-test-compile@v3\n        with:\n          arduino-board-fqbn: ${{ matrix.arduino-boards-fqbn }}\n          required-libraries: ${{ env.REQUIRED_LIBRARIES }}\n          platform-url: ${{ matrix.platform-url }}\n          sketches-exclude: ${{ matrix.sketches-exclude }}\n```"}
{"id": "63c498fe1899db58864e3ac1", "level": "level3", "llm_response": " ```yaml\nname: Cut Release\non:\n  workflow_call:\n    inputs:\n      release_tag:\n        required: true\n        type: string\n      key_ring:\n        required: true\n        type: string\n      key_name:\n        required: true\n        type: string\njobs:\n  cut-release:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: cut-release\n      cancel-in-progress: true\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Use Reusable Release Workflow\n        uses: sigstore/sigstore/.github/workflows/reusable-release.yml\n        with:\n          release_tag: ${{ github.event.inputs.release_tag }}\n          key_ring: ${{ github.event.inputs.key_ring }}\n          key_name: ${{ github.event.inputs.key_name }}\n```", "answer": "```yaml name: Cut Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_tag:\n        required: true\n        type: string\n        description: 'Release tag'\n      key_ring:\n        required: true\n        type: string\n        description: 'Key ring for cosign key'\n      key_name:\n        required: true\n        type: string\n        description: 'Key name for cosign key'\n\nconcurrency: cut-release\n\njobs:\n  cut-release:\n    name: Cut release\n    uses: sigstore/sigstore/.github/workflows/reusable-release.yml@main\n    permissions:\n      id-token: write\n      contents: read\n    with:\n      release_tag: ${{ github.event.inputs.release_tag }}\n      key_ring: ${{ github.event.inputs.key_ring }}\n      key_name: ${{ github.event.inputs.key_name }}\n      workload_identity_provider: 'projects/498091336538/locations/global/workloadIdentityPools/githubactions/providers/sigstore-rekor'\n      service_account: 'github-actions-rekor@projectsigstore.iam.gserviceaccount.com'\n      repo: 'rekor'\n```"}
{"id": "63c49d81736e7f0ed8c61ef8", "level": "level3", "llm_response": " ```yaml\nname: Jenkins Security Scan\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, synchronize, reopened]\n  workflow_dispatch:\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      actions: read\n      security-events: write\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Jenkins\n        uses: jenkins-x/github-action-setup-jenkins@v1\n        with:\n          jenkins-url: ${{ secrets.JENKINS_URL }}\n          jenkins-username: ${{ secrets.JENKINS_USERNAME }}\n          jenkins-password: ${{ secrets.JENKINS_PASSWORD }}\n\n      - name: Run Security Scan\n        run: ./run-security-scan.sh\n```\nNote: The provided YAML assumes the existence of a script `run-security-scan.sh` which should be created to execute the actual security scan using Jenkins. The `JENKINS_URL`, `JENKINS_USERNAME`, and `JENKINS_PASSWORD` should be set as secrets in the GitHub repository for authentication purposes.", "answer": "```yaml name: Jenkins Security Scan\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\npermissions:\n  security-events: write\n  contents: read\n  actions: read\n\njobs:\n  security-scan:\n    uses: jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml@v2\n    with:\n      java-cache: '' # Optionally enable use of a build dependency cache. Specify 'maven' or 'gradle' as appropriate.\n      java-version: 11 # What version of Java to set up for the build.\n```"}
{"id": "63c4a0a9517fc08c1ef113c7", "level": "level3", "llm_response": " ```yaml\nname: Test Lighthouse Check\n\non:\n  pull_request:\n    branches: [main]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n          registry-url: 'https://registry.npmjs.org'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Lighthouse Check\n        run: |\n          npx lighthouse $(github.ref) --output-json lighthouse-report.json --steps=performance,accessibility,best-practices,seo\n          echo \"Performance score: $(jq '.lighthouseResult.categories.performance.score' lighthouse-report.json)\"\n          echo \"Accessibility score: $(jq '.lighthouseResult.categories.accessibility.score' lighthouse-report.json)\"\n          echo \"Best Practices score: $(jq '.lighthouseResult.categories.best-practices.score' lighthouse-report.json)\"\n          echo \"SEO score: $(jq '.lighthouseResult.categories.seo.score' lighthouse-report.json)\"\n\n      - name: Upload Lighthouse report\n        uses: actions/upload-artifact@v2\n        with:\n          name: lighthouse-report\n          path: lighthouse-report.json\n\n      - name: Send Webhook Notification\n        if: github.ref == 'refs/heads/main'\n        uses: actions/github-script@v3\n        with:\n          script: |\n            const webhookUrl = process.env.LIGHTHOUSE_CHECK_WEBHOOK_URL;\n            const payload = {\n              job: 'lighthouse-check',\n              event: 'pull_request',\n              data: {\n                performance: $(jq '.lighthouseResult.categories.performance.score' lighthouse-report.json),\n                accessibility: $(jq '.lighthouseResult.categories.accessibility.score' lighthouse-report.json),\n                bestPractices: $(jq '.lighthouseResult.categories.best-practices.score' lighthouse-report.json),\n                seo: $(jq '.lighthouseResult.categories.seo.score' lighthouse-report.json)\n              }\n            };\n            await fetch(webhookUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${process.env.LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN}`\n              },\n              body: JSON.stringify(payload)\n            });\n```\n\nNote: This workflow assumes that you have the necessary secrets set up in your GitHub repository's settings. The secrets `LIGHTHOUSE_CHECK_AWS_ACCESS_KEY_ID`, `LIGHTHOUSE_CHECK_AWS_BUCKET`, `LIGHTHOUSE_CHECK_AWS_REGION`, `LIGHTHOUSE_CHECK_AWS_SECRET_ACCESS_KEY`, `LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN`, and `LIGHTHOUSE_CHECK_WEBHOOK_URL` are defined in the repository's secrets. The `jq` tool is used for parsing the JSON output of Lighthouse. You may need to install it in your workflow if it's not already available.", "answer": "```yaml name: Test Lighthouse Check\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: mkdir -p ${{ github.workspace }}/tmp/artifacts\n    - name: Run Lighthouse\n      uses: ./\n      with:\n        awsAccessKeyId: ${{ secrets.LIGHTHOUSE_CHECK_AWS_ACCESS_KEY_ID }}\n        awsBucket: ${{ secrets.LIGHTHOUSE_CHECK_AWS_BUCKET }}\n        awsRegion: ${{ secrets.LIGHTHOUSE_CHECK_AWS_REGION }}\n        awsSecretAccessKey: ${{ secrets.LIGHTHOUSE_CHECK_AWS_SECRET_ACCESS_KEY }}\n        device: all\n        gitAuthor: ${{ github.actor }}\n        gitBranch: ${{ github.ref }}\n        gitHubAccessToken: ${{ secrets.LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN }}\n        maxRetries: 1\n        outputDirectory: ${{ github.workspace }}/tmp/artifacts\n        urls: 'https://www.foo.software,https://www.foo.software/tag/articles/'\n        sha: ${{ github.sha }}\n        slackWebhookUrl: ${{ secrets.LIGHTHOUSE_CHECK_WEBHOOK_URL }}\n    - name: Upload artifacts\n      uses: actions/upload-artifact@master\n      with:\n        name: Lighthouse reports\n        path: ${{ github.workspace }}/tmp/artifacts\n```"}
{"id": "63c4981ab008460c1df1eed2", "level": "level3", "llm_response": " ```yaml\nname: Examples\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  examples:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup Starlark\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Build and run examples\n        run: |\n          # Commands to build and run Starlark examples\n\n      - name: Test examples\n        run: |\n          # Commands to test Starlark examples\n```\nNote: In the provided YAML, placeholders for actual commands to build, run, and test Starlark examples are used as comments. Replace these with the specific commands necessary for your use case.", "answer": "```yaml name: Examples\n\non:\n  pull_request:\n    branches: [ 'main' ]\n\njobs:\n  examples:\n    name: Build and run examples\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./examples/test.sh\n```"}
{"id": "63c49c756fc19abdf9cc3130", "level": "level3", "llm_response": " ```yaml\nname: Add \"approved\" label when approved\n\non: [pull_request]\n\njobs:\n  add_label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add \"approved\" label when approved\n        uses: master-version/label-when-approved-action@v1\n        with:\n          label: 'approved'\n          token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml on: pull_request_review\nname: Add \"approved\" label when approved\njobs:\n  add_label:\n    name: Add \"approved\" label when approved\n    runs-on: ubuntu-latest\n    steps:\n    - name: Add \"approved\" label when approved\n      uses: pullreminders/label-when-approved-action@master\n      env:\n        APPROVALS: \"1\"\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        ADD_LABEL: \"approved\"\n        REMOVE_LABEL: \"\"\n```"}
{"id": "63c4a0716fc19abdf9cdcba2", "level": "level3", "llm_response": " ```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    runs-on: ubuntu-latest\n    id: Linting\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Install Dependencies\n        run: npm install\n      - name: Run ESLint\n        run: npm run lint\n\n  Building:\n    runs-on: ubuntu-latest\n    needs: Linting\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Install Dependencies\n        run: npm install\n      - name: Build Code\n        run: npm run build\n```", "answer": "```yaml name: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    name: Linting\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/eslint.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Run ESLint\n        run: yarn lint --fix=false\n\n  Building:\n    name: Compile source code\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/tsc.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Build Code\n        run: yarn build\n```"}
{"id": "63c49d3433b087f6bde57d8e", "level": "level4", "llm_response": " ```yaml\nname: Python 3.10\non:\n  push:\n    branches:\n      - main\n      - master\n    paths-ignore:\n      - '.github/workflows/python3.10.yaml'\n    paths:\n      - '**/*.py'\n      - 'pylib/**/*'\n      - 'requirements.txt'\n  pull_request:\n    branches:\n      - main\n      - master\n    paths-ignore:\n      - '.github/workflows/python3.10.yaml'\n    paths:\n      - '**/*.py'\n      - 'pylib/**/*'\n      - 'requirements.txt'\n  workflow_dispatch:\n\njobs:\n  build:\n    if: github.repository_owner == 'HariSekhon'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Call reusable workflow\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const inputs = {\n              pythonVersion: '3.10',\n              caches: 'apt pip',\n              debug: process.env.GITHUB_EVENT_INPUTS.debug || false\n            };\n            github.actions.createWorkflowDispatch({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              workflow: 'HariSekhon/GitHub-Actions/.github/workflows/make.yaml',\n              ref: context.ref,\n              inputs: inputs\n            });\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2020-02-04 21:40:04 +0000 (Tue, 04 Feb 2020)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Python 3.10\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      python-version: \"3.10\"\n      caches: apt pip\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"id": "63c496441e33648075779820", "level": "level4", "llm_response": " ```yaml\nname: Delete PR documentation\n\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  delete:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger reusable workflow\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const input = {\n              pr_number: ${{ github.event.number }},\n              package: 'optimum'\n            };\n            github.actions.createWorkflowDispatch({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              workflow_id: 'huggingface/doc-builder/.github/workflows/delete_doc_comment.yml',\n              ref: 'refs/heads/main',\n              inputs: input\n            });\n```", "answer": "```yaml name: Delete PR documentation\n\non:\n  pull_request:\n    types: [ closed ]\n\n\njobs:\n  delete:\n    uses: huggingface/doc-builder/.github/workflows/delete_doc_comment.yml@main\n    with:\n      pr_number: ${{ github.event.number }}\n      package: optimum\n```"}
{"id": "63c49da61899db58865017a6", "level": "level4", "llm_response": " ```yaml\nname: Dependabot\n\non: pull_request\n\njobs:\n  dependabot:\n    if: github.actor == 'dependabot[bot]'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n\n    env:\n      PR_URL: ${{ github.event.pull_request.html_url }}\n      GITHUB_TOKEN: ${{ secrets.SYNCED_GITHUB_TOKEN_REPO }}\n\n    steps:\n      - name: approve\n        # Step details for approving the pull request\n\n      - name: merge\n        # Step details for merging the pull request\n```\nPlease note that the actual steps for `approve` and `merge` are not provided in this YAML snippet. You would need to fill in the appropriate commands or actions for those steps based on your specific requirements.", "answer": "```yaml # Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Dependabot\non: pull_request\n\npermissions:\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.SYNCED_GITHUB_TOKEN_REPO}}\n    steps:\n      - name: approve\n        run: gh pr review --approve \"$PR_URL\"\n      - name: merge\n        run: gh pr merge --auto --squash --delete-branch \"$PR_URL\"\n```"}
{"id": "63c49ed81899db58865094fa", "level": "level4", "llm_response": " ```yaml\nname: Java CI with Maven\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    repo:\n      push:\n        branches:\n          - '*'\n    pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean install\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: 'build-output'\n          path: './target/*.jar'\n```", "answer": "```yaml name: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build with Maven\n      run: mvn install\n    - uses: actions/upload-artifact@v3\n      with:\n        name: artifact\n        path: all/target\n```"}
{"id": "63c4a13d1899db588651899b", "level": "level4", "llm_response": " ```yaml\nname: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'  # At 12:00 am on Tuesdays\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - '.github/workflows/docs.yml'\n    paths-ignore:\n      - 'enaml/**'\n      - 'examples/**'\n      - 'docs/**'\n      - 'setup.py'\n      - 'pyproject.toml'\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Get history and tags for SCM versioning to work\n      - name: Set up Python\n      - name: Install dependencies\n      - name: Install project\n      - name: Install graphviz\n      - name: Build documentation\n```", "answer": "```yaml name: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths:\n      - .github/workflows/docs.yml\n      - \"enaml/**\"\n      - \"examples/**\"\n      - \"docs/**\"\n      - setup.py\n      - pyproject.toml\n\njobs:\n  docs:\n    name: Docs building\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Get history and tags for SCM versioning to work\n        run: |\n          git fetch --prune --unshallow\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install wheel\n          pip install -r docs/requirements.txt\n      - name: Install project\n        run: |\n          pip install -e .\n      - name: Install graphviz\n        uses: ts-graphviz/setup-graphviz@v1\n      - name: Build documentation\n        run: |\n          mkdir docs_output;\n          sphinx-build docs/source docs_output -W -b html;\n```"}
{"id": "63c49e011842bc13d778df54", "level": "level4", "llm_response": " ```yaml\nname: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '17 5 * * 1-5'\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n```\n\nPlease note that the step name is left empty (`''`). You should provide a meaningful step name and possibly define the step content, such as running a script or executing a command, to complete the workflow. Here's an example with a placeholder step name and a shell command:\n\n```yaml\nname: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '17 5 * * 1-5'\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Issues\n        run: |\n          echo \"Checking for new issues...\"\n          # Add commands to check for new issues here\n```\n\nReplace the echo command with actual commands to check for new issues, such as API calls or scripts that interact with your issue tracking system.", "answer": "```yaml name: Issue Manager\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"17 5 * * 1-5\" # run at 5:17 on Monday to Friday\n  # We only use the issue manager for auto-closing, so we only need the cron trigger.\n  # issue_comment:\n  #   types:\n  #     - created\n  #     - edited\n  # issues:\n  #   types:\n  #     - labeled\n\njobs:\n  issue-manager:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: tiangolo/issue-manager@0.4.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          config: >\n            {\n                \"$schema\": \"https://raw.githubusercontent.com/tiangolo/issue-manager/master/schema.json\",\n                \"waiting for input\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for input for a month. If anyone finds the time to provide the requested information, please re-open the issue and we will continue handling it.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for fix confirmation\": {\n                    \"delay\": \"P30DT0H0M0S\",\n                    \"message\": \"Auto-closing this issue after waiting for a fix confirmation for a month. If anyone still experiences this issue, please re-open the issue with updated information so we can continue working on a fix.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for release\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                },\n                \"waiting for resources\": {\n                    \"delay\": \"P3650DT0H0M0S\",\n                    \"message\": \"That was 10 years ago, I think we can close this now.\",\n                    \"remove_label_on_comment\": true,\n                    \"remove_label_on_close\": false\n                }\n            }\n```"}
{"id": "63c4990f1899db58864e41ef", "level": "level4", "llm_response": " ```yaml\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, created, edited, branch_updated]\n\njobs:\n  EnforceLabel:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Enforce Label\n        run: |\n          echo \"Enforcing label rules for the pull request...\"\n          # Here you would include the commands or scripts that enforce the label rules\n          # For example, checking if a label is required for the branch type\n          # and adding it if it's missing, or sending a notification if a label is removed.\n```", "answer": "```yaml ---\nname: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, synchronize]\njobs:\n  enforce-label:\n    name: EnforceLabel\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Enforce Label\n        uses: yogevbd/enforce-label-action@8d1e1709b1011e6d90400a0e6cf7c0b77aa5efeb\n        with:\n          BANNED_LABELS: \"hold\"\n          BANNED_LABELS_DESCRIPTION: \"PRs on hold cannot be merged\"\n```"}
{"id": "63c49d1633b087f6bde5714b", "level": "level4", "llm_response": " ```yaml\nname: C++ interop tests\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      - github-actions\n\njobs:\n  main:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [macOS-11, ubuntu-20.04, windows-2019]\n        target: [clang-13.0.0, clang-12.0.0, clang-11.0.0, clang-10.0.0, clang-9.0.0, clang-8.0.0, g++-11, g++-10, g++-9, msvc-2019, msvc-2017, msvc-2015, msvc-2013]\n    steps:\n      - name: Prepare compiler\n      - name: Determine base branch\n        id: base_branch\n      - name: Checkout DMD\n      - name: Checkout Phobos\n      - name: [Posix] Load cached clang\n        id: cache-clang\n      - name: [Posix] Setting up clang ${{ matrix.cxx-version }}\n      - name: [Posix] Setup environment variables\n      - name: [Posix] Verifying installed clang version\n      - name: [Linux] Setting up g++ ${{ matrix.cxx-version }}\n      - name: [Linux] Verifying installed g++ version\n      - name: [Windows] Restore dmc from cache\n        id: cache-dmc\n      - name: [Windows] Install dmc\n      - name: [Windows] Add VC toolset to PATH\n      - name: [Windows] Set environment variables\n      - name: [Posix] Build compiler & standard library\n      - name: [Windows] Build compiler & standard library\n      - name: [Posix] Run C++ test suite\n      - name: [Windows] Run C++ test suite\n      - name: Run C++ frontend unittests\n      - name: Run C++ frontend unittests (32-bit)\n      - name: Store artifacts\n```\nNote: The provided YAML code does not include the logic to exclude specific combinations from the matrix or to add key:value pairs from the provided list to each matrix combination. To implement these features, additional logic and possibly custom scripts would be required. The YAML above sets up the structure and workflow based on the given requirements.", "answer": "```yaml # Github action to test for C++ interoperability\n#\n# Most tests in the test-suite run on the CI when it comes to cross-platform testing.\n# However, the dlang auto-tester uses somewhat old host C/C++ compiler.\n# This is good for testing compatibility with e.g. LTS distributions,\n# but becomes problematic when we want to test more cutting-edge features,\n# such as newer C++ standards (C++17, C++20, etc...).\n#\n# This is the reason why we have this action: we have full control over the toolchain,\n# and it is cross platform. The supported platforms are whatever Github Actions support,\n# which is usually whatever the vendor (Canonical, Apple, Microsoft) supports.\n#\n# Notes:\n# - Some patterns used here have been developed through a lot of trial and error\n#   In particular, the build matrix approach, with two rows, and a large list of\n#   excludes, ended up being the most useful approach.\n# - Additionally, the check for the compiler version will save you a lot of trouble.\n#   Having the wrong path added to the $PATH and ending up with the wrong compiler\n#   being used can make debugging very painful.\n# - Try to use the native Github action syntax (${{ expression }}) when possible,\n#   as they are substituted with their value in the logs, unlike env variable.\n#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`\n#\n# TODO:\n# - Implement Windows + MSVC support\n# - Implement Windows + clang support\n# - Implement Linux + Clang 32 bits support (if possible)\nname: C++ interop tests\n\n# Only triggers on pushes to master & stable, as well as PR to master and stable\n# Sometimes reverts appear in the upstream repository (e.g. when the revert button\n# is clicked by a contributor with commit access), this should be tested as PR).\n#\n# Also note that Github actions does not retrigger on target branch changes,\n# hence the check on push.\non:\n  pull_request:\n    branches:\n      - master\n      - stable\n  push:\n    branches:\n      - master\n      - stable\n      # Use this branch name in your fork to test changes\n      - github-actions\n\njobs:\n  main:\n    name: Run\n    if: github.repository == 'dlang/dmd'\n\n    strategy:\n      # Since those tests takes very little time, don't use `fail-fast`.\n      # If runtime expand, we might want to comment this out,\n      # as most failing PRs do so because they don't compile / something is broken,\n      # very few PRs actually benefit from this.\n      fail-fast: false\n      matrix:\n        os: [ macOS-11, ubuntu-20.04, windows-2019 ]\n\n        target: [\n          # Versions of clang earlier than 11 are not available on 20.04, but are on macOS-11\n          clang-13.0.0, clang-12.0.0, clang-11.0.0, clang-10.0.0, clang-9.0.0, clang-8.0.0,\n        # For g++, we test the oldest compiler on Ubuntu 20.04, which is GCC-9\n          g++-11, g++-10, g++-9,\n          # Finally, we test MSVC 2013 - 2019\n          msvc-2019, msvc-2017, msvc-2015, msvc-2013\n        ]\n\n        # Exclude target compilers not supported by the host\n        # Note: Pattern matching is not supported so this list is quite long,\n        # and brittle, as changing an msvc entry would break on OSX, for example.\n        exclude:\n          # 20.04 only has g++-9 through to 11, and clang-11.0.0 through to 13.0.0\n          - { os: ubuntu-20.04, target: clang-10.0.0 }\n          - { os: ubuntu-20.04, target: clang-9.0.0 }\n          - { os: ubuntu-20.04, target: clang-8.0.0 }\n          # OSX only supports clang\n          - { os: macOS-11, target: g++-11 }\n          - { os: macOS-11, target: g++-10 }\n          - { os: macOS-11, target: g++-9 }\n          - { os: macOS-11, target: msvc-2019 }\n          - { os: macOS-11, target: msvc-2017 }\n          - { os: macOS-11, target: msvc-2015 }\n          - { os: macOS-11, target: msvc-2013 }\n          # We don't test g++ on Windows as DMD only mangles for MSVC\n          - { os: windows-2019, target: g++-11 }\n          - { os: windows-2019, target: g++-10 }\n          - { os: windows-2019, target: g++-9 }\n\n          # TODO: Implement support for clang and MSVC2017 on Windows\n          # Currently those are still being run by the auto-tester\n          # We can hardly test below 2017 in the CI because there's\n          # no way to install it via command line\n          # (TODO: Test with 2015 as the blog post is slightly ambiguous)\n          # https://devblogs.microsoft.com/cppblog/introducing-the-visual-studio-build-tools/\n          - { os: windows-2019, target: msvc-2017 }\n          - { os: windows-2019, target: msvc-2015 }\n          - { os: windows-2019, target: msvc-2013 }\n          - { os: windows-2019, target: clang-13.0.0 }\n          - { os: windows-2019, target: clang-12.0.0 }\n          - { os: windows-2019, target: clang-11.0.0 }\n          - { os: windows-2019, target: clang-10.0.0 }\n          - { os: windows-2019, target: clang-9.0.0 }\n          - { os: windows-2019, target: clang-8.0.0 }\n\n        # This sets the configuration for each jobs\n        # There's a bit of duplication involved (e.g. breaking down g++-9.3 into 2 strings),\n        # but some items are unique (e.g. clang-9.0.0 and 4.0.1 have differences in their naming).\n        include:\n          # Clang boilerplate\n          - { target: clang-13.0.0, compiler: clang, cxx-version: 13.0.0 }\n          - { target: clang-12.0.0, compiler: clang, cxx-version: 12.0.0 }\n          - { target: clang-11.0.0, compiler: clang, cxx-version: 11.0.0 }\n          - { target: clang-10.0.0, compiler: clang, cxx-version: 10.0.0 }\n          - { target: clang-9.0.0, compiler: clang, cxx-version: 9.0.0 }\n          - { target: clang-8.0.0, compiler: clang, cxx-version: 8.0.0 }\n          # g++ boilerplace\n          - { target: g++-11, compiler: g++, cxx-version: 11.2.0, major: 11 }\n          - { target: g++-10, compiler: g++, cxx-version: 10.3.0, major: 10 }\n          - { target: g++-9, compiler: g++, cxx-version: 9.4.0, major: 9 }\n          # Platform boilerplate\n          - { os: ubuntu-20.04, arch: x86_64-linux-gnu-ubuntu-20.04 }\n          - { os: macOS-11,  arch: x86_64-apple-darwin }\n          # Clang 9.0.0 have a different arch for OSX\n          - { os: macOS-11, target: clang-9.0.0, arch: x86_64-darwin-apple }\n          # Those targets will generate artifacts that can be used by other testers\n          - { storeArtifacts: false }\n          - { os: ubuntu-20.04, target: g++-9,    storeArtifacts: true }\n          - { os: macOS-11,  target: clang-9.0.0, storeArtifacts: true }\n          #- { os: windows-2019, target: msvc-2019,   storeArtifacts: true }\n\n    # We're using the latest available images at the time of this commit.\n    # Using a specific version for reproductibility.\n    # Feel free to update when a new release has matured.\n    runs-on: ${{ matrix.os }}\n    steps:\n\n    ########################################\n    #    Setting up the host D compiler    #\n    ########################################\n    - name: Prepare compiler\n      uses: dlang-community/setup-dlang@v1\n\n    ##############################################\n    # Find out which branch we need to check out #\n    ##############################################\n    - name: Determine base branch\n      id: base_branch\n      shell: bash\n      run: |\n        # For pull requests, base_ref will not be empty\n        if [ ! -z ${{ github.base_ref }} ]; then\n            echo \"branch=${{ github.base_ref }}\" >> $GITHUB_OUTPUT\n        # Otherwise, use whatever ref we have:\n        # For branches this in the format 'refs/heads/<branch_name>',\n        # and for tags it is refs/tags/<tag_name>.\n        else\n            echo \"branch=${{ github.ref }}\" >> $GITHUB_OUTPUT\n        fi\n\n    #########################################\n    # Checking out up DMD, druntime, Phobos #\n    #########################################\n    - name: Checkout DMD\n      uses: actions/checkout@v3\n      with:\n        path: dmd\n        persist-credentials: false\n    - name: Checkout Phobos\n      uses: actions/checkout@v3\n      with:\n        path: phobos\n        repository: dlang/phobos\n        ref: ${{ steps.base_branch.outputs.branch }}\n        persist-credentials: false\n\n\n    ########################################\n    #   Setting up the host C++ compiler   #\n    ########################################\n    - name: '[Posix] Load cached clang'\n      id: cache-clang\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/\n        key: ${{ matrix.cxx-version }}-${{ matrix.arch }}-2022-09-25-2121\n\n    - name: '[Posix] Setting up clang ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows' && steps.cache-clang.outputs.cache-hit != 'true'\n      run: |\n        if [ \"${{ matrix.cxx-version }}\" == \"8.0.0\" -o \"${{ matrix.cxx-version }}\" == \"9.0.0\" ]; then\n          wget --quiet --directory-prefix=${{ github.workspace }} https://releases.llvm.org/${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        else\n          wget --quiet --directory-prefix=${{ github.workspace }} https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.cxx-version }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        fi\n        tar -x -C ${{ github.workspace }} -f ${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}.tar.xz\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        # On OSX, the system header are installed via `xcode-select` and not distributed with clang\n        # Since some part of the testsuite rely on CC being only a binary (not a command),\n        # and config files where only introduced from 6.0.0, use a wrapper script.\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          # Note: heredoc shouldn't be indented\n          cat << 'EOF' > ${TMP_CC}-wrapper\n        #!/bin/bash\n        # Note: We need to use this because github.workspace is not stable\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          # Invoking clang with `clang++` will link the C++ standard library\n          # Make sure we got two separate wrapper for this\n          cat << 'EOF' > ${TMP_CC}++-wrapper\n        #!/bin/bash\n        SCRIPT_FULL_PATH=$(dirname \"$0\")\n        ${SCRIPT_FULL_PATH}/clang++ -isystem /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ $@\n        EOF\n          chmod +x ${TMP_CC}-wrapper ${TMP_CC}++-wrapper\n        fi\n\n    - name: '[Posix] Setup environment variables'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        TMP_CC='${{ github.workspace }}/clang+llvm-${{ matrix.cxx-version }}-${{ matrix.arch }}/bin/clang'\n        if [ \"${{ matrix.os }}\" == \"macOS-11\" ]; then\n          echo \"CC=${TMP_CC}-wrapper\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++-wrapper\" >> $GITHUB_ENV\n          echo \"SDKROOT=$(xcrun --show-sdk-path)\" >> $GITHUB_ENV\n        else\n          echo \"CC=${TMP_CC}\" >> $GITHUB_ENV\n          echo \"CXX=${TMP_CC}++\" >> $GITHUB_ENV\n        fi\n\n    # On OSX and Linux, clang is installed by default and in the path,\n    # so make sure ${CC} works\n    - name: '[Posix] Verifying installed clang version'\n      if: matrix.compiler == 'clang' && runner.os != 'Windows'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q 'version ${{ matrix.cxx-version }}'; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.cxx-version }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # G++ is only supported on Linux\n    - name: '[Linux] Setting up g++ ${{ matrix.cxx-version }}'\n      if: matrix.compiler == 'g++'\n      run: |\n        # Workaround bug in Github actions\n        curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -\n        # Make sure we have the essentials\n        sudo apt-get update\n        sudo apt-get install build-essential software-properties-common -y\n        # This ppa provides multiple versions of g++\n        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\n        sudo apt-get update\n        sudo apt-get install -y ${{ matrix.target }} ${{ matrix.target }}-multilib\n        echo \"CC=${{ matrix.target }}\" >> $GITHUB_ENV\n        echo \"CXX=${{ matrix.target }}\" >> $GITHUB_ENV\n\n    # Make sure ${CC} works and we don't use the $PATH one\n    - name: '[Linux] Verifying installed g++ version'\n      if: matrix.compiler == 'g++'\n      run: |\n        set -e\n        if ${CXX} --version | grep -q '${{ matrix.target }} (Ubuntu '; then\n          ${CXX} --version\n        else\n            echo \"Expected version ${{ matrix.target }}, from '${CXX}', got:\"\n            ${CXX} --version\n            exit 1\n        fi\n\n    # Restore or install dmc (and DM make)\n    - name: '[Windows] Restore dmc from cache'\n      id: cache-dmc\n      if: runner.os == 'Windows'\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}\\tools\\\n        key: ${{ matrix.os }}-dmc857\n\n    - name: '[Windows] Install dmc'\n      if: runner.os == 'Windows' && steps.cache-dmc.outputs.cache-hit != 'true'\n      shell: powershell\n      run: |\n        $url = \"http://ftp.digitalmars.com/Digital_Mars_C++/Patch/dm857c.zip\"\n        $sha256hash = \"F51CDFEB45EAF4FFBF7ABF0FE9B3D548B202B4528401005C2C3192B00BC32367\"\n        Write-Host ('Downloading {0} ...' -f $url)\n        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n        $ProgressPreference = 'SilentlyContinue'\n        New-Item -ItemType directory -Path ${{ github.workspace }}\\tools\\\n        Invoke-WebRequest -Uri $url -OutFile '${{ github.workspace }}\\tools\\dmc.zip'\n        if ((Get-FileHash '${{ github.workspace }}\\tools\\dmc.zip' -Algorithm \"SHA256\").Hash -ne $sha256hash) {\n          exit 1\n        }\n        Expand-Archive '${{ github.workspace }}\\tools\\dmc.zip' -DestinationPath ${{ github.workspace }}\\tools\\\n\n    - name: '[Windows] Add VC toolset to PATH'\n      if: runner.os == 'Windows'\n      uses: ilammy/msvc-dev-cmd@v1\n\n    - name: '[Windows] Set environment variables'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        echo \"VISUAL_STUDIO_LIB_NOT_DM=$(which lib.exe)\" >> $GITHUB_ENV\n        echo \"HOST_DMD=${{ env.DC }}\" >> $GITHUB_ENV\n        echo \"${{ github.workspace }}/tools/dm/bin/\" >> $GITHUB_PATH\n\n    ########################################\n    #    Building DMD, druntime, Phobos    #\n    ########################################\n    - name: '[Posix] Build compiler & standard library'\n      if: runner.os != 'Windows'\n      # By default, VMs have 2 processors available, hence the `-j2`:\n      # https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners#supported-runners-and-hardware-resources\n      run: |\n        # All hosts are 64 bits but let's be explicit\n        ./dmd/compiler/src/build.d -j2 MODEL=64\n        make -C dmd/druntime -f posix.mak -j2 MODEL=64\n        make -C phobos   -f posix.mak -j2 MODEL=64\n        # Both version can live side by side (they end up in a different directory)\n        # However, since clang does not provide a multilib package, only test 32 bits with g++\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/src/build.d install -j2 MODEL=32\n          make -C dmd/druntime -f posix.mak install -j2 MODEL=32\n          make -C phobos   -f posix.mak install -j2 MODEL=32\n        fi\n\n    - name: '[Windows] Build compiler & standard library'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        dmd -run dmd/compiler/src/build.d -j2 MODEL=64\n        if [ $? -ne 0 ]; then return 1; fi\n        # Note: Only CC for druntime and AR for Phobos are required ATM,\n        # but providing all three to avoid surprise for future contributors\n        # Those should really be in the path, though.\n        cd dmd/druntime\n        make -f win64.mak\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../../phobos/\n        make -f win64.mak CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n        cd ../\n\n    ########################################\n    #        Running the test suite        #\n    ########################################\n    - name: '[Posix] Run C++ test suite'\n      if: runner.os != 'Windows'\n      env:\n        # Reset LD_LIBRARY_PATH when running the tests, so they use the newly built libphobos2.so.\n        LD_LIBRARY_PATH: ''\n      run: |\n        ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=64\n        if [ ${{ matrix.compiler }} == \"g++\" ]; then\n          ./dmd/compiler/test/run.d clean\n          ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=32\n        fi\n\n    - name: '[Windows] Run C++ test suite'\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        cd dmd/druntime\n        make -f win64.mak test_stdcpp CC=cl.exe LD=link \"AR=$VISUAL_STUDIO_LIB_NOT_DM\"\n        if [ $? -ne 0 ]; then return 1; fi\n\n    ########################################\n    #      Run C++ frontend unittests      #\n    ########################################\n    - name: Run C++ frontend unittests\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=64\n\n    - name: Run C++ frontend unittests (32-bit)\n      if: matrix.compiler == 'g++'\n      run: |\n        ./dmd/compiler/src/build.d cxx-unittest MODEL=32\n\n    ########################################\n    #      Store generated artifacts       #\n    ########################################\n    - name: Store artifacts\n      if: ${{ matrix.storeArtifacts }}\n      uses: actions/upload-artifact@v3\n      with:\n        name: dmd-${{ matrix.os }}\n        path: install\n```"}
{"id": "63c49e8033b087f6bde602c0", "level": "level4", "llm_response": " ```yaml\nname: Coding Standards\n\non:\n  pull_request:\n    branches:\n      - '*.*'\n  push:\n    branches:\n      - '*.*'\n\njobs:\n  coding-standards:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger Coding Standards Workflow\n        uses: actions/checkout@v2\n        with:\n          ref: '*.*'\n\n      - name: Call Reusable Coding Standards Workflow\n        uses: ./.github/.github/actions/coding-standards\n        with:\n          php-version: '8.1'\n```", "answer": "```yaml name: \"Coding Standards\"\n\non:\n  pull_request:\n    branches:\n      - \"*.x\"\n  push:\n    branches:\n      - \"*.x\"\n\njobs:\n  coding-standards:\n    name: \"Coding Standards\"\n    uses: \"doctrine/.github/.github/workflows/coding-standards.yml@2.1.0\"\n    with:\n      php-version: '8.1'\n```"}
{"id": "63c496c333b087f6bde2e28f", "level": "level4", "llm_response": " ```yaml\nname: Missing API docs\n\non:\n  pull_request:\n    paths-ignore:\n      - '^marvim/api-doc-update\\*$'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n    steps:\n      - name: Trigger reusable workflow\n        uses: actions/github-script@v6\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const input = { check_only: true };\n            github.actions.createWorkflowDispatch({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              workflow_id: 'api-docs',\n              ref: context.head.ref,\n              input: input\n            });\n```", "answer": "```yaml name: Missing API docs\non:\n  pull_request:\n    branches-ignore:\n      - 'marvim/api-doc-update**'\n    paths:\n      - 'src/nvim/api/*.[ch]'\n      - 'runtime/lua/**.lua'\n      - 'runtime/doc/**'\n\njobs:\n  call-regen-api-docs:\n    permissions:\n      contents: write\n      pull-requests: write\n    uses: ./.github/workflows/api-docs.yml\n    with:\n      check_only: true\n```"}
{"id": "63c4977c1842bc13d7763db2", "level": "level4", "llm_response": " ```yaml\nname: Push issue to Github Project dashboard\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened, reopened]\n\njobs:\n  add_to_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add issue to Project Dashboard\n        run: |\n          # Add your script or command to add the opened issue to the project dashboard\n          echo \"Issue ${{ github.event.issue.number }} has been added to the project dashboard.\"\n```\n\nNote: You will need to replace the `echo` command with the actual script or command that adds the issue to your project dashboard. This example assumes you have a script or a command that can perform this action.", "answer": "```yaml name: Push issue to Github Project dashboard\n\non:\n    issues:\n        types:\n        -   opened\n    pull_request_target:\n        types:\n        -   opened\n\njobs:\n    add_to_project:\n        runs-on: ubuntu-latest\n        steps:\n        -   uses: actions/add-to-project@v0.0.3\n            with:\n                project-url: https://github.com/orgs/pyscript/projects/4/\n                github-token: ${{ secrets.PROJECT_TOKEN }}\n```"}
{"id": "63c496981e3364807577ba4f", "level": "level4", "llm_response": " ```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10]\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n    env:\n      PYTHON_VERSION: ${{ matrix.python-version }}\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: Install Dependencies\n      - name: Test with Pytest\n      - name: ''\n\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Python\n      - name: Install Dependencies\n      - name: Run e2e script\n\n  commitlint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Lint Commit Messages\n\n  release:\n    needs: [test, e2e, commitlint]\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Python Semantic Release\n```\n\nPlease note that placeholders (empty strings) in the step names should be replaced with the actual commands or scripts that are intended to be executed in those steps.", "answer": "```yaml name: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nconcurrency:\n  group: ${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    name: Test\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macOS-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: snok/install-poetry@v1.3.2\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install Dependencies\n        run: poetry install\n      - name: Test with Pytest\n        run: poetry run pytest --cov-report=xml\n      - uses: codecov/codecov-action@v3.1.1\n\n  e2e:\n    # https://github.com/browniebroke/django-codemod/issues/302\n    name: e2e\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n      - name: Install Dependencies\n        run: |\n          pip install .\n          pip install 'Django>=3.0,<3.1'\n      - name: Run e2e script\n        run: ./tests/test_e2e.sh\n\n  # Make sure commit messages follow the conventional commits convention:\n  # https://www.conventionalcommits.org\n  commitlint:\n    name: Lint Commit Messages\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v5.2.0\n\n  release:\n    runs-on: ubuntu-latest\n    environment: release\n    if: github.ref == 'refs/heads/main'\n    needs:\n      - test\n      - e2e\n      - commitlint\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      # Run semantic release:\n      # - Update CHANGELOG.md\n      # - Update version in code\n      # - Create git tag\n      # - Create GitHub release\n      # - Publish to PyPI\n      - name: Python Semantic Release\n        uses: relekang/python-semantic-release@v7.32.1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          pypi_token: ${{ secrets.PYPI_TOKEN }}\n```"}
{"id": "63c4a1251842bc13d77a219c", "level": "level4", "llm_response": " ```yaml\nname: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - 'docs/**'\n      - 'docusaurus.config.js'\n      - 'package.json'\n      - 'Vars.js'\n      - 'sidebars.js'\n      - 'yarn.lock'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Docusaurus\n        uses: docusaurus/actions@v2\n        with:\n          version: '2.0.0'\n\n      - name: Build website\n        run: |\n          cd docs\n          npm install\n          npm run build\n\n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs/_build/public\n```", "answer": "```yaml name: docs\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n    paths:\n      - docs/**\n      - docusaurus.config.js\n      - package.json\n      - Vars.js\n      - sidebars.js\n      - yarn.lock\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Docusaurus\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n          cache-dependency-path: yarn.lock\n      - name: Build website\n        run: |\n          yarn install --frozen-lockfile\n          yarn build\n      - name: Deploy to GitHub Pages\n        if: github.ref == 'refs/heads/main'\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./build```"}
{"id": "63c4a14a1842bc13d77a3048", "level": "level4", "llm_response": " ```yaml\nname: Docker Latest Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Out Repo\n        uses: actions/checkout@v2\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v1\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Build and push\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: Dockerfile\n          push: true\n          tags: user/repo:latest\n\n      - name: Discord Success Notification\n        uses: peter-evans/discord-notify@v3\n        with:\n          status: success\n          text: \"Docker image built and pushed successfully.\"\n\n      - name: Discord Failure Notification\n        uses: peter-evans/discord-notify@v3\n        with:\n          status: failure\n          text: \"Failed to build and push Docker image.\"\n```\n\nPlease replace `user/repo` with your actual Docker Hub username and repository name. Also, ensure that `DOCKER_USERNAME` and `DOCKER_PASSWORD` are set in your repository's secrets for Docker Hub authentication.", "answer": "```yaml name: Docker Latest Release\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n\n  docker-latest:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Check Out Repo\n        uses: actions/checkout@v3\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKER_HUB_USERNAME }}\n          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@master\n        with:\n          platforms: all\n\n      - name: Set up Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@v2\n\n      - name: Build and push\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: ./\n          file: ./Dockerfile\n          platforms: linux/amd64,linux/arm64,linux/arm/v7\n          push: true\n          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/plex-meta-manager:latest\n\n      - name: Discord Success Notification\n        uses: meisnate12/discord-notifications@master\n        if: success()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Success**\"\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png\n\n      - name: Discord Failure Notification\n        uses: meisnate12/discord-notifications@master\n        if: failure()\n        with:\n          webhook_id: ${{ secrets.BUILD_WEBHOOK_ID }}\n          webhook_token: ${{ secrets.BUILD_WEBHOOK_TOKEN }}\n          title: \"latest build: **Failure**\"\n          color: 0xe30c43\n          url: https://github.com/meisnate12/Plex-Meta-Manager/actions/runs/${{ github.run_id }}\n          username: Metabot\n          avatar_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/pmm.png\n          author: Docker\n          author_icon_url: https://raw.githubusercontent.com/meisnate12/Plex-Meta-Manager/master/.github/docker.png```"}
{"id": "63c4a04c1899db5886512a2b", "level": "level4", "llm_response": " ```yaml\nname: Deploy\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag or branch name to deploy'\n        required: true\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        default: 'integration'\n        type: choice\n        options:\n          - integration\n          - staging\n          - production\n  workflow_dispatch:\n    if: github.event.repository.name == 'alphagov/govuk-infrastructure' && github.event.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'\n\njobs:\n  build-and-publish-image:\n    runs-on: ubuntu-latest\n    if: github.event.repository.name == 'alphagov/govuk-infrastructure' && github.event.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'\n    outputs:\n      imageTag: ${{ steps.set-image-tag.outputs.imageTag }}\n    secrets:\n      AWS_GOVUK_ECR_ACCESS_KEY_ID: ${{ secrets.AWS_GOVUK_ECR_ACCESS_KEY_ID }}\n      AWS_GOVUK_ECR_SECRET_ACCESS_KEY: ${{ secrets.AWS_GOVUK_ECR_SECRET_ACCESS_KEY }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set image tag\n        id: set-image-tag\n        run: echo \"::set-output name=imageTag::$(echo ${{ github.ref }} | sed 's/refs\\/heads\\/\\(.*\\)\\/.*/\\1/')\"\n      - name: Call reusable workflow\n        uses: ./.github/workflows/build-and-push-image.yaml@main\n        with:\n          gitRef: ${{ inputs.gitRef || github.ref }}\n\n  trigger-deploy:\n    needs: build-and-publish-image\n    runs-on: ubuntu-latest\n    if: success()\n    secrets:\n      GOVUK_ARGO_EVENTS_WEBHOOK_TOKEN: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_TOKEN }}\n      GOVUK_ARGO_EVENTS_WEBHOOK_URL: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_URL }}\n      GOVUK_CI_GITHUB_API_TOKEN: ${{ secrets.GOVUK_CI_GITHUB_API_TOKEN }}\n    steps:\n      - name: Call reusable workflow\n        uses: ./.github/workflows/deploy.yaml@main\n        with:\n          imageTag: ${{ needs.build-and-publish-image.outputs.imageTag }}\n          environment: ${{ inputs.environment || 'integration' }}\n```", "answer": "```yaml name: Deploy\n\nrun-name: Deploy ${{ inputs.gitRef || github.ref_name  }} to ${{ inputs.environment || 'integration' }}\n\non:\n  workflow_dispatch:\n    inputs:\n      gitRef:\n        description: 'Commit, tag or branch name to deploy'\n        required: true\n        type: string\n        default: 'main'\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: choice\n        options:\n        - integration\n        - staging\n        - production\n        default: 'integration'\n  workflow_run:\n    workflows: [CI]\n    types: [completed]\n    branches: [main]\n\njobs:\n  build-and-publish-image:\n    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'\n    name: Build and publish image\n    uses: alphagov/govuk-infrastructure/.github/workflows/build-and-push-image.yaml@main\n    with:\n      gitRef: ${{ inputs.gitRef || github.ref }}\n    secrets:\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_GOVUK_ECR_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_GOVUK_ECR_SECRET_ACCESS_KEY }}\n  trigger-deploy:\n    name: Trigger deploy to ${{ inputs.environment || 'integration' }}\n    needs: build-and-publish-image\n    uses: alphagov/govuk-infrastructure/.github/workflows/deploy.yaml@main\n    with:\n      imageTag: ${{ needs.build-and-publish-image.outputs.imageTag }}\n      environment: ${{ inputs.environment || 'integration' }}\n    secrets:\n      WEBHOOK_TOKEN: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_TOKEN }}\n      WEBHOOK_URL: ${{ secrets.GOVUK_ARGO_EVENTS_WEBHOOK_URL }}\n      GH_TOKEN: ${{ secrets.GOVUK_CI_GITHUB_API_TOKEN }}\n```"}
{"id": "63c49ffc517fc08c1ef0d18c", "level": "level4", "llm_response": " ```yaml\nname: YAML Linter\n\non:\n  push:\n    paths-ignore:\n      - '**.java'\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  linter:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: YAML Linter\n        run: |\n          # Add YAML linting commands here\n          echo \"Running YAML Linter\"\n```\nPlease note that you will need to replace the placeholder `# Add YAML linting commands here` with the actual commands you use to lint YAML files. The `actions/checkout@v2` action is used to checkout the repository code. You may also need to add any additional tools or dependencies required for the YAML linting process.", "answer": "```yaml name: YAML Linter\n\non:\n  push:\n    paths:\n    - '**.yml'\n  pull_request:\n    branches:\n    - master\n\npermissions:\n  contents: read\n\njobs:\n  linter:\n\n    name: YAML Linter\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n    - name: YAML Linter\n      uses: ibiqlik/action-yamllint@v3.1.1\n      with:\n        config_file: '.github/configs/yaml-linter.yml'\n```"}
{"id": "63c49a841842bc13d7777897", "level": "level4", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n  release:\n    types: [published, created, drafts]\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Deploy to NPM\n        run: npm publish\n\n  github:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: 'us-west-2'\n      - name: Upload Release Asset\n        uses: svenstaro/upload-release-asset-action@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.get-upload-url.outputs.upload_url }}\n          asset_path: './dist/your-package.tgz'\n          asset_name: 'your-package-version.tgz'\n          asset_content_type: 'application/x-tar'\n\nworkflow_dispatch:\n  # This allows manual triggering of the workflow\n  # You can trigger it from GitHub UI under Actions tab\n```\n\nPlease note that you'll need to replace `'./dist/your-package.tgz'` with the actual path to your package file and `'your-package-version.tgz'` with the desired release asset name. Additionally, ensure that your AWS credentials and GitHub token are stored as secrets in your repository settings.\n\nThis YAML file defines a GitHub Actions workflow named `Release` that triggers on push events for tags starting with `v` or on release events. It has two jobs: `npm` and `github`. The `npm` job installs dependencies and publishes to NPM, while the `github` job uploads a release asset to GitHub.", "answer": "```yaml # https://docs.github.com/actions\n\nname: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/.htaccess bin/htaccess.conf\n      - name: Deploy to NPM\n        uses: JS-DevTools/npm-publish@v1.4.3\n        with:\n          token: ${{ secrets.NPM_TOKEN }}\n\n  github:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./bin/build.sh dist/h5bp.htaccess bin/htaccess.conf\n      - name: Upload Release Asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: ./dist/h5bp.htaccess\n          asset_name: h5bp.htaccess\n          asset_content_type: application/octet-stream\n```"}
{"id": "63c49c871e336480757a1819", "level": "level4", "llm_response": " ```yaml\nname: Release notifier\n\non:\n  release:\n    types: [published, draft, prereleased]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Notify IRC\n        # Here you would typically use a GitHub Action that can interact with IRC,\n        # such as `actions/send-irc` or a custom script.\n        # For example:\n        # uses: actions/send-irc@v1\n        # with:\n        #   channel: '#your-irc-channel'\n        #   message: \"New release ${{ github.event.release.tag_name }} on GitHub\"\n```\n\nPlease note that the `Notify IRC` step is a placeholder. To actually send messages to an IRC channel, you would need to use a specific GitHub Action or a custom script that handles IRC communication. The `actions/send-irc` action mentioned in the example is a hypothetical action and may not exist; you would need to find or create an appropriate action for this purpose.", "answer": "```yaml name: Release notifier\n\non:\n  release:\n    types: [published]\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Notify IRC\n        uses: Gottox/irc-message-action@v2\n        with:\n          server: \"irc.libera.chat\"\n          channel: \"#shiori\"\n          nickname: ShioriBot\n          tls: true\n          sasl_password: ${{ secrets.IRC_SHIORIBOT_PWD }}\n          message: \"New release: ${{ github.event.repository.full_name }}@${{ github.event.release.name }}: ${{ github.event.release.html_url }}\"\n```"}
{"id": "63c4a1506fc19abdf9ce1a6b", "level": "level4", "llm_response": " ```yaml\nname: Contribs\n\non:\n  pull_request:\n    types: [opened, reopened]\n\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Contribs\n        run: |\n          echo \"This workflow is triggered by a pull request event.\"\n          # Add additional steps for the job here\n```", "answer": "```yaml name: Contribs\non:\n  pull_request_target:\n    types: [opened, reopened]\n\njobs:\n  contribs:\n    runs-on: ubuntu-latest\n    name: Contribs\n    steps:\n      - name: Contribs\n        uses: carlescufi/action-contribs@main\n        with:\n          github-token: ${{ secrets.NCS_GITHUB_TOKEN }}\n          command: 'external'\n          messages: |\n                    Thank you for your contribution!\n                    It seems you are not a member of the nrfconnect GitHub organization. External contributions are handled as follows:\n                    Large contributions, affecting multiple subsystems for example, may be rejected if they are complex, may introduce regressions due to lack of test coverage, or if they are not consistent with the architecture of nRF Connect SDK.\n                    PRs will be run in our continuous integration (CI) test system.\n                    If CI passes, PRs will be tagged for review and merged on successful completion of review. You may be asked to make some modifications to your contribution during review.\n                    If CI fails, PRs may be rejected or may be tagged for review and rework.\n                    PRs that become outdated due to other changes in the repository may be rejected or rework requested.\n                    External contributions will be prioritized for review based on the relevance to current development efforts in nRF Connect SDK.  Bug fix PRs will be prioritized.\n                    You may raise issues or ask for help from our Technical Support team by visiting https://devzone.nordicsemi.com/.\n                    |\n                    The author of this pull request has now been added to the nrfconnect GitHub organization.\n          labels: 'external'\n```"}
{"id": "63c49ff01899db5886510419", "level": "level4", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        # Here you would add the specific step commands or actions\n        # For example, a placeholder for a script or action to update the release draft\n        run: echo \"Update release draft logic goes here\"\n```\n\nPlease note that in the provided YAML, the actual step commands or actions to update the release draft are not specified. You would need to replace the `echo \"Update release draft logic goes here\"` line with the actual commands or actions that perform the desired task. This could involve invoking a script, using a GitHub Action, or any other command-line instructions necessary to update the release draft.", "answer": "```yaml name: Release Drafter\n\non:\n    push:\n        # branches to consider in the event; optional, defaults to all\n        branches:\n            - master\n    # pull_request event is required only for autolabeler\n    pull_request:\n        # Only following types are handled by the action, but one can default to all as well\n        types: [opened, reopened, synchronize]\n\njobs:\n    update_release_draft:\n        runs-on: ubuntu-latest\n        steps:\n            # (Optional) GitHub Enterprise requires GHE_HOST variable set\n            #- name: Set GHE_HOST\n            #  run: |\n            #    echo \"GHE_HOST=${GITHUB_SERVER_URL##https:\\/\\/}\" >> $GITHUB_ENV\n\n            # Drafts your next Release notes as Pull Requests are merged into \"master\"\n            - uses: release-drafter/release-drafter@v5\n                # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n                # with:\n                #   config-name: my-config.yml\n                #   disable-autolabeler: true\n              env:\n                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c881e336480757a1881", "level": "level4", "llm_response": " ```yaml\nname: Python testing\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n\njobs:\n  lint:\n    name: Lint package\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Cache pip\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Lint with flake8 & pylint\n        run: |\n          pip install flake8 pylint\n          flake8 .\n          pylint *.py\n\n  tests:\n    name: Test package\n    needs: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.9', '3.10']\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Cache pip\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pip\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Run tests with pytest\n        run: pytest\n      - name: Install Coveralls\n        run: pip install coveralls\n      - name: Run tests with pytest & Calculate coverage\n        run: |\n          coverage run --source=. -m pytest\n          coverage report -m\n      - name: Send coverage to Coveralls\n        run: coveralls\n```", "answer": "```yaml ---\nname: \"Python testing\"\n\non:\n  push:\n    branches:\n      - master\n      - main\n      - dev\n  pull_request:\n  schedule:\n    - cron: \"23 3 * * 1\"\n\njobs:\n  lint:\n    name: \"Lint package\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - run: |\n          echo \"package=$(ls -F | grep \\/$ | grep -v \"bin\\|examples\\|tests\" | sed -n \"s/\\///g;1p\")\" >> $GITHUB_ENV\n\n      - name: \"Set up Python\"\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-dev.txt\n          if [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Lint with flake8 & pylint\"\n        run: |\n          flake8 ${{ env.package }} tests\n          pylint ${{ env.package }} tests\n\n  tests:\n    name: \"Test package\"\n    needs: lint\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 3\n      matrix:\n        python-version: ['3.9', '3.10']\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: \"Cache pip\"\n        uses: actions/cache@v3\n        with:\n          # This path is specific to Ubuntu\n          path: ~/.cache/pip\n          # Look to see if there is a cache hit for the corresponding requirements file\n          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n          restore-keys: |\n            ${{ runner.os }}-pip-\n            ${{ runner.os }}-\n\n      - name: \"Install dependencies\"\n        run: |\n          python -m pip install --upgrade pip\n          # Prefer requirements-test.txt\n          if [ -f requirements-test.txt ]; then\n            bin/install_requirements requirements-test.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements-dev.txt ]; then\n            bin/install_requirements requirements-dev.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          elif [ -f requirements.txt ]; then\n            bin/install_requirements requirements.txt \"${{ secrets.ADMIN_GITHUB_TOKEN }}\"\n          fi\n          pip install pytest-xdist\n\n          if [ -d custom_components ]; then\n            echo '\"\"\"Stub.\"\"\"' >custom_components/__init__.py\n          fi\n\n      - name: \"Run tests with pytest\"\n        if: matrix.python-version != '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar\n          ./bin/check_dirty\n\n      - name: \"Install Coveralls\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pip install pytest-xdist coveralls\n\n      - name: \"Run tests with pytest & Calculate coverage\"\n        if: matrix.python-version == '3.9'\n        run: |\n          pytest --basetemp=$RUNNER_TEMP --durations=10 -n auto --dist=loadfile -qq -o console_output_style=count -p no:sugar --cov --cov-report=\n          ./bin/check_dirty\n\n      - name: \"Send coverage to Coveralls\"\n        if: matrix.python-version == '3.9'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: coveralls --service=github\n```"}
{"id": "63c4a08c33b087f6bde6d427", "level": "level4", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      types: [opened, synchronize, reopened, labeled, unlabeled, review_requested, review_requested, edited]\n  workflow_dispatch:\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: SwiftLint\n        uses: ./.github/actions/swift-lint\n        with:\n          args: --strict\n\n  ESLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Run ESLint\n        run: eslint .\n```\n\nPlease note that the `.github/actions/swift-lint` part is a placeholder for the actual SwiftLint action configuration file. You will need to create this file in your repository with the appropriate configuration for SwiftLint.\n\nAlso, the `eslint .` command assumes that ESLint is configured and available in your repository. If not, you will need to set up ESLint and ensure it is installed in your GitHub Actions runner environment.", "answer": "```yaml name: Lint\n\non: [push, pull_request]\n\njobs:\n  SwiftLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: GitHub Action for SwiftLint with --strict\n        uses: norio-nomura/action-swiftlint@3.0.1\n        with:\n          args: --strict\n  ESLint:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: RUN ESLint\n        uses: 123FLO321/action-eslint-standalone@0.4.0\n        with:\n          args: --ext .js --ext .js.mustache --max-warnings=0\n```"}
{"id": "63c49c0c1899db58864f76fb", "level": "level4", "llm_response": " ```yaml\nname: Mirror main to master\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  mirror_job:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: read\n      packages-restore: read\n      pull-requests: write\n\n    if: github.repository == 'flutter/samples'\n    steps:\n      - name: Mirror action step\n        id: mirror\n        run: |\n          # Add your mirroring script or command here\n          echo \"Mirroring main to master\"\n```", "answer": "```yaml # Copyright 2013 The Flutter Authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# Mirror master to main branches in the gallery repository.\non:\n  push:\n    branches:\n      - 'main'\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  mirror_job:\n    permissions:\n      pull-requests: write\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'flutter/samples' }}\n    name: Mirror main branch to master branch\n    steps:\n      - name: Mirror action step\n        id: mirror\n        uses: google/mirror-branch-action@c6b07e441a7ffc5ae15860c1d0a8107a3a151db8\n        with:\n          github-token: ${{ secrets.FLUTTERMIRRORINGBOT_TOKEN }}\n          source: 'main'\n          dest: 'master'\n```"}
{"id": "63c49df833b087f6bde5cc43", "level": "level4", "llm_response": " ```yaml\nname: Check Arduino\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  pull_request:\n    types: [opened, synchronize, reopened, labeled, unlabeled, review_requested, review_requested, edited]\n  schedule:\n    - cron: '0 8 * * TU'\n  workflow_dispatch:\n  app_dispatch:\n    types: [workflow_dispatch]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Arduino Lint\n        run: |\n          # Commands to run Arduino lint checks\n          echo \"Running Arduino lint checks...\"\n          # Replace with actual lint command\n          arduino-lint-command\n```", "answer": "```yaml name: Check Arduino\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n  pull_request:\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by new rules added to Arduino Lint.\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Arduino Lint\n        uses: arduino/arduino-lint-action@v1\n        with:\n          compliance: specification\n          library-manager: update\n          # Always use this setting for official repositories. Remove for 3rd party projects.\n          official: true\n          project-type: library\n```"}
{"id": "63c496fb33b087f6bde2f916", "level": "level4", "llm_response": " ```yaml\nname: automatmerge\n\non:\n  pull_request:\n    types: [labeled, unlabeled, edited, reopened, synchronize, review_requested, ready_for_review, check_suite]\n\njobs:\n  automatmerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        # Here you would add the actual steps for your automerge process\n        run: echo \"Automating merge process...\"\n```", "answer": "```yaml name: automerge\non:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - synchronize\n      - opened\n      - edited\n      - ready_for_review\n      - reopened\n      - unlocked\n  pull_request_review:\n    types:\n      - submitted\n  check_suite:\n    types:\n      - completed\n  status: {}\njobs:\n  automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: automerge\n        uses: \"pascalgn/automerge-action@f81beb99aef41bb55ad072857d43073fba833a98\"\n        env:\n          GITHUB_TOKEN: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"id": "63c49b2fcbc73931bb198927", "level": "level4", "llm_response": " ```yaml\nname: PHP Lint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    pull_request:\n      branches:\n        - main\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php-version: [5.3, 8.0]\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n\n    - name: Install PHP ${{ matrix.php-version }}\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php-version }}\n        extensions: pdo_mysql\n\n    - name: Lint PHP files\n      run: |\n        composer require squizlabs/php_codesniffer --dev\n        phpcs --standard=PSR2 --extensions=php src\n```", "answer": "```yaml name: \"PHP Lint\"\n\non:\n  - push\n  - pull_request\n\njobs:\n  tests:\n    name: \"Lint\"\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        php-version:\n          - \"5.3\"\n          - \"8.0\"\n\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v3\"\n\n      - name: \"Install PHP\"\n        uses: \"shivammathur/setup-php@v2\"\n        with:\n          coverage: \"none\"\n          php-version: \"${{ matrix.php-version }}\"\n\n      - name: \"Lint PHP files\"\n        run: \"find src/ -type f -name '*.php' -print0 | xargs -0 -L1 -P4 -- php -l -f\"\n```"}
{"id": "63c4a17e6fc19abdf9ce2c3f", "level": "level4", "llm_response": " ```yaml\nname: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build and Publish\n        env:\n          TWINE_USERNAME: __token__\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        run: |\n          python setup.py sdist bdist_wheel\n          twine upload dist/*\n```", "answer": "```yaml name: Publish ratarmountcore to PyPI\n\non:\n  push:\n    tags:\n      - 'core-v*.*.*'\n\njobs:\n  deploy:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.8'\n    - name: Install Dependencies\n      run: |\n        python3 -m pip install --upgrade pip\n        pip install setuptools wheel twine build\n    - name: Build and Publish\n      working-directory: core\n      env:\n        TWINE_PASSWORD: ${{ secrets.RATARMOUNTCORE_TWINE_PASSWORD }}\n      run: |\n        python3 -m build\n        twine check dist/*\n        twine upload --skip-existing -u __token__ dist/*\n```"}
{"id": "63c4a01b6fc19abdf9cda80e", "level": "level4", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - devel\n      - devel4\n      - devel5\n      - master\n  pull_request:\n    branches:\n      - devel\n      - devel4\n      - devel5\n  schedule:\n    - cron: '0 1 3 * *'\n  workflow_dispatch:\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    strategy:\n      matrix:\n        language: [cpp]\n    steps:\n      - name: Checkout repository\n      - name: Initialize CodeQL\n      - name: Autobuild\n      - name: Perform CodeQL Analysis\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"devel\", \"devel4\", \"devel5\", \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"devel\", \"devel4\", \"devel5\" ]\n  schedule:\n    - cron: '20 1 * * 3'\n  workflow_dispatch:\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'cpp' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with: { submodules: true }\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c4a0b1cbc73931bb1bc0b8", "level": "level4", "llm_response": " ```yaml\nname: Java CI with Maven\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths-ignore:\n      - '.github'\n      - '.github/workflows'\n  pull_request:\n    types: [ opened, synchronize, reopened, labeled, unlabeled, cleared ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '1.8'\n          distribution: 'adopt'\n\n      - name: Run unit tests\n        run: ./mvnw test\n        env:\n          MAVEN_OPTS: -Dmaven.repo.local=.m2/repository\n```\n\nPlease note that the `.m2/repository` path is used for Maven's local repository. If your project does not use Maven, you will need to adjust the steps accordingly. Additionally, since the primary language is Digital Command Language (DCL), which is not typically associated with Java CI workflows, the workflow provided is generic and assumes the use of Maven for Java projects. If DCL is used for a specific aspect of the project, additional customization might be necessary.", "answer": "```yaml # Run mvn test to ensure all tests pass\n\nname: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Set up JDK 1.8\n      uses: actions/setup-java@v3\n      with:\n        java-version: 8\n        distribution: zulu\n    - name: Run unit tests\n      run: mvn test\n```"}
{"id": "63c49b06517fc08c1eeedd30", "level": "level4", "llm_response": " ```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [opened, edited, reopened]\n  pull_requests:\n    created:\n      - branches:\n          - main\n    updated:\n      - branches:\n          - main\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: sign-or-recheck\n        id: sign-or-recheck\n        # Step details go here\n\n      - name: CLA Assistant\n        run: |\n          # Job details go here\n```\nPlease replace `# Step details go here` with the actual commands or scripts you want to execute in the `sign-or-recheck` and `CLA Assistant` steps.", "answer": "```yaml name: \"CLA Assistant\"\non:\n  # issue_comment triggers this action on each comment on issues and pull requests\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-regex-match@v2\n        id: sign-or-recheck\n        with:\n          text: ${{ github.event.comment.body }}\n          regex: '\\s*(I have read the CLA Document and I hereby sign the CLA)|(recheckcla)\\s*'\n      \n      - name: \"CLA Assistant\"\n        if: ${{ steps.sign-or-recheck.outputs.match != '' || github.event_name == 'pull_request_target' }}\n        # Alpha Release\n        uses: cla-assistant/github-action@v2.1.1-beta\n        env:\n          # Generated and maintained by github\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # JFrog organization secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.CLA_SIGN_TOKEN }}\n        with:\n          path-to-signatures: 'signed_clas.json'\n          path-to-document: 'https://jfrog.com/cla/'\n          remote-organization-name: 'jfrog'\n          remote-repository-name: 'jfrog-signed-clas'\n          # branch should not be protected\n          branch: 'master'\n          allowlist: bot*\n```"}
{"id": "63c49c9233b087f6bde53b34", "level": "level4", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  validate_pr_title:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Validate PR title\n        run: |\n          echo \"Validating PR title...\"\n          # Insert TypeScript linting command here\n          # Example: tsc --noEmitOnError\n          # Add additional linting steps as needed\n```\n\nIn this YAML configuration, you need to replace the placeholder comment with the actual TypeScript linting command or a series of commands that perform the desired linting process. Commonly, you might use a tool like ESLint or TSLint for TypeScript linting.\n\nHere's an example using ESLint with the appropriate npm script:\n\n```yaml\n      - name: Validate PR title\n        run: |\n          echo \"Validating PR title...\"\n          npm install eslint --save-dev\n          npx eslint --config .eslintrc.js \"${{ github.event.pull_request.title }}\"\n```\n\nMake sure you have an `.eslintrc.js` file in your repository with the necessary configuration for ESLint.\n\nRemember to adjust the linting command according to your project's specific requirements and linting tool setup.", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          # Configure which types are allowed.\n          # Default: https://github.com/commitizen/conventional-commit-types\n          types: |\n            feat\n            fix\n            cleanup\n            docs\n            chore\n          # Configure which scopes are allowed.\n          scopes: |\n            admin\n            store\n            theme\n            server\n          # Configure that a scope must always be provided.\n          requireScope: false\n```"}
{"id": "63c49b9f1e3364807579baef", "level": "level4", "llm_response": " ```yaml\nname: Release Management\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os_bin:\n          - macos64\n          - macos64-mpi\n          - linux64\n          - linux64-mpi\n          - win64\n          - win64-mpi\n\n    steps:\n      - name: Cache Object Files\n        uses: actions/cache@v2\n        with:\n          path: |\n            /path/to/object/files\n            /path/to/dependencies\n          key: ${{ runner.os }}-${{ hashFiles('**/*.cpp') }}\n\n      - name: Build\n        run: |\n          cmake . -DOS_BIN=${{ matrix.os_bin }}\n          make\n\n      - name: Create Archive\n        run: |\n          tar -czvf build/SU2-${{ matrix.os_bin }}.tar.gz build/\n\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v2\n        with:\n          name: SU2-${{ matrix.os_bin }}\n          path: build/SU2-${{ matrix.os_bin }}.tar.gz\n\n      - name: Update Release\n        id: update_release\n        uses: actions/create-release@v1\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Release ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload Release Asset\n        if: github.ref == 'refs/tags/v*'\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.upload_url }}\n          asset_path: build/SU2-${{ matrix.os_bin }}.tar.gz\n          asset_name: SU2-${{ matrix.os_bin }}.tar.gz\n          asset_content_type: application/gzip\n```\n\nNote: The paths to object files and dependencies, as well as the specific flags for the build process, are placeholders and should be adjusted to fit the actual project requirements. The `cmake` command assumes a C++ project using CMake for building. The `upload-release-asset` step assumes that the release is tagged with a version number, and the artifact is uploaded as an asset to that release.", "answer": "```yaml name: Release Management\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - develop\n\njobs:\n  build_and_upload:\n    name: Build SU2\n    strategy:\n      fail-fast: false\n      matrix:\n        os_bin: [macos64, macos64-mpi, linux64, linux64-mpi, win64, win64-mpi]\n        include:\n          - os_bin: win64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_windows'\n          - os_bin: win64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_windows_mpi'\n          - os_bin: macos64\n            flags: '-Dwith-mpi=disabled --cross-file=/hostfiles/hostfile_darwin'\n          - os_bin: macos64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_darwin_mpi'\n          - os_bin: linux64\n            flags: '-Dwith-mpi=disabled -Dstatic-cgns-deps=true --cross-file=/hostfiles/hostfile_linux'\n          - os_bin: linux64-mpi\n            flags: '-Dcustom-mpi=true --cross-file=/hostfiles/hostfile_linux_mpi'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cache Object Files\n        uses: actions/cache@v3\n        with:\n          path: ccache\n          key: ${{ matrix.os_bin }}-${{ github.sha }}\n          restore-keys: ${{ matrix.os_bin }}\n      - name: Build\n        uses: docker://ghcr.io/su2code/su2/build-su2-cross:220716-1459\n        with:\n          args: -b ${{ github.sha }} -f \"${{matrix.flags}}\"\n      - name: Create Archive\n        run: |\n          cd install\n          zip -r ../${{matrix.os_bin}}.zip bin/*\n        # Uploads binaries as artifacts (just as a backup)\n      - name: Upload Binaries\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{matrix.os_bin}}\n          path: ${{matrix.os_bin}}.zip\n        # Update the release notes of latest draft release\n      - uses: talbring/jenkins-release-drafter@v5.2.0-jenkins-11\n        name: Update Release\n        id: update_release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Upload binaries as assets to draft release\n      - name: Upload Release Asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1.0.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.update_release.outputs.uploadurl }}\n          asset_path: ${{matrix.os_bin}}.zip\n          asset_name: SU2-${{ steps.update_release.outputs.tagname }}-${{matrix.os_bin}}.zip\n          asset_content_type: application/zip\n          \n```"}
{"id": "63c49c0e1e3364807579e6b2", "level": "level4", "llm_response": " ```yaml\nname: Lint\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install PHP\n        run: sudo apt-get install php\n\n      - name: Run Script\n        run: php /path/to/your/script.php\n```\n\nPlease note that in a real-world scenario, you would need to adjust the installation of PHP and the path to your PHP script to match your repository's requirements. Additionally, the `sudo apt-get install php` command is not the typical way to install PHP on Ubuntu. You might need to use a package manager like `apt` with the correct PHP package names (e.g., `php`, `php-cli`) and ensure the repository has the necessary dependencies.\n\nAlso, ensure that you have the appropriate permissions and configurations to install software on GitHub Actions runners. For many projects, it's common to use Docker containers to run the desired environment instead.", "answer": "```yaml name: Lint\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n\njobs:\n  staticanalysis:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Install PHP\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: '8.0'\n\n    - name: Run Script\n      run: |\n        composer global require phpstan/phpstan\n        for dir in $(find * -type d -name src -not -path 'appengine/*' -not -path '*/vendor/*' -exec dirname {} \\;);\n        do\n          composer install --working-dir=$dir --ignore-platform-reqs\n          echo \"<?php require_once 'testing/sample_helpers.php';require_once '$dir/vendor/autoload.php';\" > autoload.php\n          ~/.composer/vendor/bin/phpstan analyse $dir/src --autoload-file=autoload.php\n        done\n```"}
{"id": "63c49df7cbc73931bb1aa759", "level": "level4", "llm_response": " ```yaml\nname: Pull Request Labeler\non:\n  schedule:\n    - cron: '*/5 * * * *'\n  pull_request:\n    types: [opened, synchronize, reopened]\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    if: github.repository == 'eclipse/omr'\n    steps:\n      - name: ''\n```\n\nPlease note that the step name is left empty (`''`). You should provide the actual name of the step and the action to be performed in that step. For example, if you want to label the pull request, you might include a step with the following content:\n\n```yaml\n      - name: Label Pull Request\n        uses: actions/labeler@v2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          configuration: '[\"critical\", \"urgent\"]'\n```\n\nMake sure to replace the placeholder step name and actions with the appropriate ones for your workflow.", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n  schedule:\n  - cron: \"*/5 * * * *\"\n\njobs:\n  triage:\n    if: github.repository == 'eclipse/omr'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: fjeremic/cron-labeler@0.3.0\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c497e71e33648075784188", "level": "level4", "llm_response": " ```yaml\nname: PR Labeling\n\non:\n  pull_request:\n    types: [opened, edited, reopened]\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel lgtm\n        env:\n          GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n        # Add the actual step commands here\n        # For example:\n        # - name: Set up Python\n        #   uses: actions/setup-python@v2\n        #   with:\n        #     python-version: '3.x'\n        #\n        # - name: Install dependencies\n        #   run: |\n        #     python -m pip install --upgrade pip\n        #     pip install your-dependencies\n        #\n        # - name: Execute lgtm cancellation\n        #   run: |\n        #     # Your command to cancel lgtm\n        #     echo \"Canceling lgtm for PR ${{ github.event.number }}\"\n```\n\nPlease note that the above YAML file is a template and the actual commands for the `Cancel lgtm` step need to be filled in according to your specific requirements. The `GH_TOKEN` environment variable is set to the GitHub token secret named `CLUSTERPEDIA_BOT_TOKEN`.", "answer": "```yaml name: 'PR Labeling'\n\non:\n  pull_request_target:\n    types: [synchronize]\n\npermissions:\n  pull-requests: write\n\nenv:\n  GH_TOKEN: ${{ secrets.CLUSTERPEDIA_BOT_TOKEN }}\n\njobs:\n  cancel-lgtm:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel lgtm\n        run: |\n          gh pr -R ${{ github.repository }} edit ${{ github.event.pull_request.number }} --remove-label \"lgtm\"\n```"}
{"id": "63c49dc9cbc73931bb1a9737", "level": "level4", "llm_response": " ```yaml\nname: NetworkX Forward algorithm CI\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 19 * * *'\njobs:\n  forward-algo-test:\n    if: github.ref == 'refs/heads/main' && github.repository == 'alibaba/GraphScope'\n    runs-on: ubuntu-20.04\n    steps:\n      - name: '' # Replace with actual step name\n        uses: ./.github/workflows/steps/step-definition # Replace with actual step definition\n      - name: Build GAE and coordinator\n        run: |\n          # Commands to build GAE and coordinator\n      - name: Run Forward algorithms test\n        run: |\n          # Commands to run forward algorithms test\n      - name: Upload Coverage\n        run: |\n          # Commands to upload coverage report\n    env:\n      CONTAINER_RESOURCE_OPTIONS: --shm-size 4096m\n    shell:\n      - bash --noprofile --norc -eo pipefail\n```\n\nPlease note that you need to replace the placeholder names in the steps (e.g., `''`, `step-definition`) with actual names and commands relevant to your workflow. The `env` section is used to set the Docker container resource options, and the `shell` section defines the default shell environment for the job.", "answer": "```yaml name: NetworkX Forward algorithm CI\n\non:\n  workflow_dispatch:\n  schedule:\n    # The notifications for scheduled workflows are sent to the user who\n    # last modified the cron syntax in the workflow file.\n    # Trigger the workflow at 03:00(CST) every day.\n    - cron:  '00 19 * * *'\n\njobs:\n  forward-algo-test:\n    if: ${{ github.ref == 'refs/heads/main' && github.repository == 'alibaba/GraphScope' }}\n    runs-on: ubuntu-20.04\n    defaults:\n      run:\n        shell: bash --noprofile --norc -eo pipefail {0}\n    container:\n      image: registry.cn-hongkong.aliyuncs.com/graphscope/graphscope-vineyard:v0.9.0\n      options:\n        --shm-size 4096m\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build GAE and coordinator\n      run: |\n        pushd ${GITHUB_WORKSPACE}\n        make gae ENABLE_JAVA_SDK=OFF BUILD_TEST=OFF NUMPROC=1\n        # also make coordinator and client for python test\n        make coordinator && make client\n        popd\n\n    - name: Run Forward algorithms test\n      env:\n        DEPLOYMENT: 'standalone'\n      run: |\n        cd ${GITHUB_WORKSPACE}/python\n        python3 -m pytest --cov=graphscope --cov-config=.coveragerc --cov-report=xml \\\n          --cov-report=term -s -v -m \"not slow\" graphscope/nx/algorithms/tests/forward\n\n    - name: Upload Coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./python/coverage.xml\n        fail_ci_if_error: true\n```"}
{"id": "63c49e7d1e336480757add5b", "level": "level4", "llm_response": " ```yaml\nname: generate-tag\non:\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      GRADLE_OPTS: \"-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\\\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\\\"\"\n    steps:\n      - name: Checkout\n      - name: Set up Java\n      - name: Gradle build\n      - name: Stop Gradle daemons\n\n  generate-tag:\n    needs: build\n    runs-on: ubuntu-latest\n    env:\n      GRADLE_OPTS: \"-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\\\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\\\"\"\n    steps:\n      - name: Checkout\n      - name: Set up Java\n      - name: Generate Tag\n      - name: Push\n      - name: Stop Gradle daemons\n\nparameters:\n  stage-this:\n    description: The stage of the release\n    required: true\n    default: auto\n    type: choice\n    options:\n      - alpha\n      - beta\n      - rc\n      - final\n      - auto\n  scope-this:\n    description: The scope of the release\n    required: true\n    default: auto\n    type: choice\n    options:\n      - minor\n      - major\n      - auto\n```", "answer": "```yaml name: generate-tag\n\non:\n  workflow_dispatch:\n    branches: [main]\n    inputs:\n      stage:\n        description: 'Stage'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'alpha'\n          - 'beta'\n          - 'rc'\n          - 'final'\n          - 'auto'\n      scope:\n        description: 'Scope'\n        required: true\n        default: 'auto'\n        type: choice\n        options:\n          - 'minor'\n          - 'major'\n          - 'auto'\n\nenv:\n  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs=\"-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Gradle build\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace build \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n\n  generate-tag:\n    runs-on: ubuntu-latest\n\n    needs:\n      - build\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.TOKEN_GITHUB_ACTION }}\n\n      - name: Set up Java\n        uses: actions/setup-java@v3.4.0\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Generate Tag\n        uses: gradle/gradle-build-action@v2.2.0\n        with:\n          arguments: --full-stacktrace createSemverTag \"-Psemver.scope=${{ github.event.inputs.scope }}\" \"-Psemver.stage=${{ github.event.inputs.stage }}\"\n\n      - name: Push\n        run: git push --follow-tags\n\n      - name: Stop Gradle daemons\n        run: ./gradlew --stop\n```"}
{"id": "63c49da4517fc08c1eefe37e", "level": "level4", "llm_response": " ```yaml\nname: e2e test all\n\non: [pull_request]\n\nenv:\n  PRISMA_TELEMETRY_INFORMATION: prisma-client-go e2e-test.yml\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: deps\n      - name: generate\n      - name: test\n```\n\nPlease note that the placeholder names for the steps (e.g., ``, ``, ``, `deps`, `generate`, `test`) need to be replaced with the actual step names relevant to your e2e testing process.", "answer": "```yaml name: e2e test all\non: pull_request\nenv:\n  PRISMA_TELEMETRY_INFORMATION: \"prisma-client-go e2e-test.yml\"\n\njobs:\n  e2e:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.19'\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/pkg/mod\n            ~/.cache\n          restore-keys: ${{ runner.os }}-go-\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n\n      - name: deps\n        run: go mod download\n\n      - name: generate\n        run: |\n          cd test/e2e/\n          go generate -tags e2e ./...\n        # env:\n        #   DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n\n      - name: test\n        run: |\n          cd test/e2e/\n          go test ./... -run '^TestE2E.*$' -tags e2e -v\n        env:\n          # DATA_PROXY_DATABASE_URL: ${{ secrets.DATA_PROXY_DATABASE_URL }}\n          PRISMA_CLIENT_GO_LOG: info\n```"}
{"id": "63c49e501842bc13d778ff97", "level": "level4", "llm_response": " ```yaml\nname: Linter\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    paths:\n      - '**.go'\n    types: [ refs/heads/main, refs/tags/* ]\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v2\n\n      - name: Run Golint\n        run: go install golang.org/x/lint/golint@latest\n        working-directory: ./...\n```", "answer": "```yaml on: [push, pull_request]\nname: Linter\njobs:\n  Golint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fetch Repository\n        uses: actions/checkout@v3.1.0\n      - name: Run Golint\n        uses: reviewdog/action-golangci-lint@v2\n        with:\n          golangci_lint_flags: \"--tests=false\"\n```"}
{"id": "63c498d31899db58864e2905", "level": "level4", "llm_response": " ```yaml\nname: TOC Generator\non:\n  push:\n    paths-ignore:\n      - '**.md'\n    paths:\n      - 'ReadMe.md'\n\njobs:\n  generateTOC:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate Table of Contents\n        run: |\n          # Command to generate TOC for ReadMe.md\n          echo \"Generating TOC for ReadMe.md...\"\n          # Insert actual TOC generation command here\n          # Example: dotnet tool run toc-generator --input ReadMe.md --output ReadMe.md.toc\n```\n\nPlease note that you will need to replace the `echo` and example command with the actual command or script you intend to use for generating the Table of Contents (TOC) for your `ReadMe.md` file. The `dotnet tool run` command is just an example and assumes you have a tool named `toc-generator` installed in your `.NET Core` environment.", "answer": "```yaml name: TOC Generator\n\non:\n  push:\n    paths:\n      - 'ReadMe.md'\n\njobs:\n  generateTOC:\n    name: TOC Generator\n    runs-on: ubuntu-latest\n    steps:\n      - uses: technote-space/toc-generator@v2.4.0\n        with:\n          TOC_TITLE: \"## Table of Contents\"\n```"}
{"id": "63c498e96fc19abdf9cac426", "level": "level4", "llm_response": " ```yaml\nname: Update Python Dependencies\n\non:\n  workflow_dispatch:\n\njobs:\n  update_python_dependencies:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Call reusable workflow\n      uses: actions/github-script@v6\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          const pythonVersion = process.env.GITHUB_EVENT_PATH.split(':')[1];\n          const workflowId = 'update_python_dependencies';\n          github.actions.createWorkflowDispatch({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            workflow_id: workflowId,\n            ref: context.ref,\n            inputs: {\n              pythonVersion: pythonVersion\n            }\n          });\n```", "answer": "```yaml name: Update Python Dependencies\n\non:\n    workflow_dispatch:\n\njobs:\n    update_python_dependencies:\n        uses: SFDO-Tooling/.github/.github/workflows/update_python_dependencies.yml@main\n        with:\n            python-version: 3.8\n```"}
{"id": "63c499601899db58864e6352", "level": "level4", "llm_response": " ```yaml\nname: Issue Closer\n\non:\n  issues:\n    types: [opened, reopened]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Close Issue\n        run: |\n          git config --global user.name \"GitHub-Actions\"\n          git config --global user.email \"actions@github.com\"\n          git checkout -b close-issue\n          git add .\n          git commit -m \"Closing the issue automatically\"\n          git push origin close-issue\n          echo \"Issue closed by automated workflow.\"\n```", "answer": "```yaml # This is a basic workflow to help you get started with Actions\n\nname: Issue Closer\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n  issues:\n    types: [ opened, reopened ]\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      - name: Close Issue\n        uses: peter-evans/close-issue@v1.0.1\n        with:\n          comment: |\n           **Use [Discuss Issues](https://discuss.dgraph.io/c/issues/35/clients/46) for reporting issues about this repository.**\n```"}
{"id": "63c496dccbc73931bb17caa5", "level": "level4", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8 pytest black\n\n      - name: Lint with flake8\n        run: |\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n          if [ $? -ne 0 ]; then\n            echo \"Linting failed!\"\n            exit 1\n          fi\n\n      - name: Format with black\n        run: |\n          black --check .\n          if [ $? -ne 0 ]; then\n            echo \"Formatting failed!\"\n            exit 1\n          fi\n```", "answer": "```yaml name: pre-commit\n\non:\n  pull_request:\n  push:\n    branches: [main]\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v3\n    - uses: pre-commit/action@v3.0.0\n```"}
{"id": "63c49e4f736e7f0ed8c67231", "level": "level4", "llm_response": " ```yaml\nname: CMake\n\non:\n  push:\n    branches:\n      - '*'\n  pull_request:\n    branches:\n      - '*'\n\nenv:\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n    steps:\n      - name: ''\n      - name: Windows: Configure environment\n        if: github.ref == 'refs/heads/windows-latest'\n      - name: Linux: Install dependency libraries\n        if: github.ref != 'refs/heads/windows-latest'\n      - name: Configure CMake\n      - name: Build\n      - name: Test\n      - name: ''\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Create plugin archive\n      - name: Upload binaries to release\n```\n\nPlease note that I have left the placeholder names for the steps (`''`) as placeholders for you to fill in with the actual commands or scripts you intend to run. You should replace these with the appropriate shell commands or scripts for your C++ project using CMake.", "answer": "```yaml name: CMake\n\non:\n  push:\n    branches: [ \"*\" ]\n  pull_request:\n    branches: [ \"*\" ]\n  release:\n    type: [created, edited]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: RelWithDebInfo\n\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - windows-latest\n          - macos-latest\n\n    runs-on: ${{matrix.os}}\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Windows: Configure environment\"\n      if: runner.os == 'Windows'\n      shell: bash\n      run: |\n        # Select MinGW toolchain instead of the default MSVC.\n        echo \"CMAKE_GENERATOR=MinGW Makefiles\" >> $GITHUB_ENV\n\n    - name: \"Linux: Install dependency libraries\"\n      if: runner.os == 'Linux'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y --no-install-recommends freeglut3-dev libudev-dev libopenal-dev\n\n    - name: Configure CMake\n      working-directory: ${{github.workspace}}/src\n      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      working-directory: ${{github.workspace}}/src\n      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}\n\n    - name: Test\n      working-directory: ${{github.workspace}}/build\n      run: ctest -C ${{env.BUILD_TYPE}}\n      \n    - uses: actions/upload-artifact@v2\n      with:\n        name: binaries\n        path: ${{github.workspace}}/build/*.xpl\n        if-no-files-found: error\n\n  package:\n    needs: build\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - uses: actions/download-artifact@v2\n        with:\n          name: binaries\n          path: FlyWithLua/64\n\n      - uses: actions/upload-artifact@v2\n        with:\n          name: FlyWithLua_plugin\n          path: |\n            ${{github.workspace}}/FlyWithLua*\n          if-no-files-found: error\n\n      - name: Create plugin archive\n        if: github.event_name == 'release'\n        run: zip -r FlyWithLua_NG_Lin_Mac_Win.zip FlyWithLua/\n\n      - name: Upload binaries to release\n        if: github.event_name == 'release'\n        uses: svenstaro/upload-release-action@v2\n        with:\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          file: FlyWithLua_NG_Lin_Mac_Win.zip\n          tag: ${{ github.ref }}\n          overwrite: true\n```"}
{"id": "63c49cd8b008460c1df3d38d", "level": "level4", "llm_response": " ```yaml\nname: GraalVM CE CI\n\non:\n  push:\n    branches:\n      - master\n      - '[1-9].[0-9]+'.x\n  pull_request:\n    branches:\n      - master\n      - '[1-9].[0-9]+'.x\n\njobs:\n  build:\n    if: github.repository != 'micronaut-projects/micronaut-project-template'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: [17]\n        graalvm: ['latest', 'dev']\n    steps:\n      - name: Free disk space\n      - name: ''\n      - name: ''\n      - name: Setup GraalVM CE\n      - name: Build with Gradle\n      - name: Publish Test Report\n```", "answer": "```yaml # WARNING: Do not edit this file directly. Instead, go to:\n#\n# https://github.com/micronaut-projects/micronaut-project-template/tree/master/.github/workflows\n#\n# and edit them there. Note that it will be sync'ed to all the Micronaut repos\nname: GraalVM CE CI\non:\n  push:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\n  pull_request:\n    branches:\n      - master\n      - '[1-9]+.[0-9]+.x'\njobs:\n  build:\n    if: github.repository != 'micronaut-projects/micronaut-project-template'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java: ['17']\n        graalvm: ['latest', 'dev']\n    steps:\n       # https://github.com/actions/virtual-environments/issues/709\n      - name: Free disk space\n        run: |\n         sudo rm -rf \"/usr/local/share/boost\"\n         sudo rm -rf \"$AGENT_TOOLSDIRECTORY\"\n         sudo apt-get clean\n         df -h\n      - uses: actions/checkout@v3\n      - uses: actions/cache@v3\n        with:\n          path: ~/.gradle/caches\n          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}\n          restore-keys: |\n            ${{ runner.os }}-gradle-\n      - name: Setup GraalVM CE\n        uses: graalvm/setup-graalvm@v1\n        with:\n          version: ${{ matrix.graalvm }}\n          java-version: ${{ matrix.java }}\n          components: 'native-image'\n      - name: Build with Gradle\n        run: |\n          if ./gradlew tasks --no-daemon --all | grep -w \"testNativeImage\"\n          then\n            ./gradlew check testNativeImage --continue --no-daemon\n          else\n            ./gradlew check --continue --no-daemon\n          fi\n        env:\n           TESTCONTAINERS_RYUK_DISABLED: true\n           GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}\n           GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}\n           GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}\n           PREDICTIVE_TEST_SELECTION: \"${{ github.event_name == 'pull_request' && 'true' || 'false' }}\"\n      - name: Publish Test Report\n        if: always()\n        uses: mikepenz/action-junit-report@v3.5.2\n        with:\n          check_name: GraalVM CE CI / Test Report (Java ${{ matrix.java }})\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          check_retries: 'true'\n```"}
{"id": "63c49fbe1e336480757b5ce4", "level": "level4", "llm_response": " ```yaml\nname: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    if: github.repository == 'belgattitude/nextjs-monorepo-example' && contains('refs/heads/main', github.ref)\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16.x'\n\n      - name: \ud83d\udce5 Monorepo install\n        run: npm install\n\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        run: |\n          # Your commands to create a release or publish to npm\n          echo \"::set-output name=changesets::result\"\n```\nPlease replace `# Your commands to create a release or publish to npm` with the actual commands required for your workflow to create a release or publish to npm. The `echo \"::set-output name=changesets::result\"` line is a placeholder to indicate where you would output the results of your command.", "answer": "```yaml name: ReleaseOrVersionPR\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    # Basic security: the release job can only be executed from this repo and from the main branch (not a remote thing)\n    if: ${{ github.repository == 'belgattitude/nextjs-monorepo-example' && contains('refs/heads/main',github.ref)}}\n    name: Release and changelog\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # To run comparison we need more than the latest commit.\n          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches\n          fetch-depth: 0\n\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n\n      - name: \ud83d\udce5 Monorepo install\n        uses: ./.github/actions/yarn-nm-install\n\n      # @link https://github.com/changesets/action\n      - name: Create Release Pull Request or Publish to npm\n        id: changesets\n        uses: changesets/action@v1\n        with:\n          # publish: yarn g:release\n          cwd: ${{ github.workspace }}\n          title: '[Release] Version packages'\n          # Optional, might be used in conjunction with GITHUB_TOKEN to\n          # allow running the workflows on a Version package action.\n          # Be aware of security implications.\n          # setupGitUser: true\n        env:\n          # See https://github.com/changesets/action/issues/147\n          HOME: ${{ github.workspace }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # Uncomment and add secrets to allow publishing\n          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49bb533b087f6bde4ddd4", "level": "level4", "llm_response": " ```yaml\nname: Pull Request Labeler\non: [pull_request]\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Label Pull Request\n        run: |\n          # Your labeling script or command goes here\n          # Example: echo \"Label PR with TypeScript changes\"\n          # You would replace this with actual code to label the PR\n```\n\nIn this YAML configuration, replace the `echo` command with the actual script or command you would use to label the pull request with TypeScript changes. This might involve interacting with the GitHub API or using a tool that automates labeling.", "answer": "```yaml name: 'Pull Request Labeler'\non: [pull_request]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: DataDog/labeler@glob-all\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n```"}
{"id": "63c4972e1899db58864d7e70", "level": "level4", "llm_response": " ```yaml\nname: Dependabot auto-merge\n\non: [pull_request]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        # Add steps for metadata here\n\n      - name: Enable auto-merge for Dependabot PRs\n        # Add steps to enable auto-merge here\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.0\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49da46fc19abdf9cca9c1", "level": "level4", "llm_response": " ```yaml\nname: build\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, macos-12, windows-2022]\n    env:\n      MAX_TIME_MINUTES: 90\n    steps:\n      - name: Checkout\n      - name: Cache Go\n      - name: Cache Envoy binaries\n      - name: Verify clean check-in\n      - name: Run unit tests\n      - name: Build the func-e binary\n      - name: Run e2e tests using the func-e binary\n      - name: Run e2e tests using the func-e binary (CentOS)\n      - name: Generate coverage report\n      - name: Upload coverage report\n```", "answer": "```yaml # `name` value will appear \"as is\" in the badge.\n# See https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository\n# yamllint --format github .github/workflows/commit.yaml\n---\nname: \"build\"\n\non:\n  push:  # We run tests on non-tagged pushes to master\n    tags: ''\n    branches: master\n    # ignore docs as they are built with Netlify. Ignore travis-related changes, too.\n    # func-e.wxs is used for the Windows Installer, so tested with msi.yaml\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  pull_request:  # We also run tests on pull requests targeted at the master branch.\n    branches: master\n    paths-ignore:\n      - '**/*.md'\n      - 'site/**'\n      - 'netlify.toml'\n      - '.travis.yml'\n      - 'packaging/msi/*'\n      - 'packaging/icon@48w.ico'\n      - '.github/workflows/msi.yaml'\n  # workflow_dispatch will let us manually trigger the workflow from GitHub actions dashboard.\n  # For example, you can try to build a branch without raising a pull request.\n  # See https://docs.github.com/en/free-pro-team@latest/actions/managing-workflow-runs/manually-running-a-workflow\n  workflow_dispatch:\n\ndefaults:\n  run:  # use bash for all operating systems unless overridden\n    shell: bash\n\njobs:\n  test:\n    name: \"Run unit tests (${{ matrix.os }})\"\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 90  # instead of 360 by default\n    strategy:\n      fail-fast: false  # don't fail fast as sometimes failures are operating system specific\n      matrix:  # use latest available versions and be consistent on all workflows!\n        os: [ubuntu-20.04, macos-12, windows-2022]\n\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n\n      - name: \"Cache Go\"\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          # go.mod for go release version, go.sum for modules used, and Tools.mk for 'go run' tools\n          key: test-${{ runner.os }}-go-${{ hashFiles('go.mod', 'go.sum', 'Tools.mk') }}\n          restore-keys: test-${{ runner.os }}-go-\n\n      - name: \"Cache Envoy binaries\"\n        uses: actions/cache@v3\n        with:  # ~/.func-e/versions is cached so that we only re-download once: for TestFuncEInstall\n          path: ~/.func-e/versions\n          key: test-${{ runner.os }}-envoy-${{ hashFiles('internal/version/last_known_envoy.txt') }}\n          restore-keys: test-${{ runner.os }}-envoy-\n\n      - name: \"Verify clean check-in\"\n        run: make check\n\n      - name: \"Run unit tests\"\n        run: make test\n\n      - name: \"Build the `func-e` binary\"\n        run: make build\n\n      - name: \"Run e2e tests using the `func-e` binary\"\n        run: make e2e\n\n      - name: \"Run e2e tests using the `func-e` binary (CentOS)\"\n        if: runner.os == 'Linux'\n        run: docker run --rm -v $HOME/.func-e:$HOME/.func-e -v $PWD:/work ${CENTOS_IMAGE} -o ${E2E_FUNC_E_PATH}/func-e e2e\n        env:  # CENTOS_IMAGE was built by internal-images.yaml; E2E_FUNC_E_PATH was built via `make build`\n          CENTOS_IMAGE: ghcr.io/tetratelabs/func-e-internal:centos-8\n          E2E_FUNC_E_PATH: build/func-e_linux_amd64\n\n      - name: \"Generate coverage report\"  # only once (not per OS)\n        if: runner.os == 'Linux'\n        run: make coverage\n\n      - name: \"Upload coverage report\"  # only on master push and only once (not per OS)\n        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && runner.os == 'Linux'\n        uses: codecov/codecov-action@v2\n        with:\n          file: ./coverage.txt\n```"}
{"id": "63c4a0b91842bc13d779f860", "level": "level4", "llm_response": " ```yaml\nname: update-flake\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 7 * * Tue'\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Install Nix\n        run: |\n          curl -L https://nixos.org/releases/nix/nix-2.3.2.tar.gz | tar xz\n          cd nix-2.3.2\n          ./bootstrap.sh\n      - name: generate-token\n        run: |\n          echo \"Generating token...\"\n          # Add logic to generate a token\n      - name: Update flake.lock\n        run: |\n          # Add logic to update flake.lock\n```", "answer": "```yaml name: update-flake\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '45 7 * * 2' # runs weekly on Tuesday at 07:45\n\njobs:\n  lockfile:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Install Nix\n        uses: cachix/install-nix-action@v17\n        with:\n          extra_nix_config: |\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: tibdex/github-app-token@v1\n        id: generate-token\n        with:\n          app_id: 207529\n          private_key: ${{ secrets.STEWARD_PRIVATE_KEY }}\n      - name: Update flake.lock\n        uses: DeterminateSystems/update-flake-lock@v14\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          branch: update/flake-lock-${{ github.run_number }}\n```"}
{"id": "63c4a13633b087f6bde7145d", "level": "level4", "llm_response": " ```yaml\nname: Master - CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  Julia:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1, nightly]\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n        arch: [x64]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n          arch: ${{ matrix.arch }}\n\n      - name: Install dependencies\n        run: julia --project=@. -e 'using Pkg; Pkg.instantiate()'\n\n      - name: Run tests\n        run: julia --project=@. -e 'using Pkg; Pkg.test()'\n\n      - name: Upload test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: test-results/\n\n      - name: Notify on failure\n        if: failure()\n        uses: actions/set-output@v2\n        with:\n          name: test-failed\n          value: true\n```\n\nNote: The placeholders for the step names (e.g., ``, ``) should be replaced with the actual commands you want to run. The `Upload test results` step assumes that the test results are stored in a directory named `test-results`. Adjust the path as necessary based on your test output. The `Notify on failure` step is a simple example of setting an output variable to indicate a failure; you may want to customize this step to integrate with your notification system.", "answer": "```yaml name: Master - CI\n\non:\n  push:\n    branches:\n      - master\n    schedule:\n      - cron: 0 * * * *\njobs:\n  test:\n    name: Julia ${{ matrix.julia-version }} - ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: ['1', 'nightly']\n        julia-arch: [x64]\n        os: [ubuntu-latest, windows-latest, macOS-latest]\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: julia-actions/setup-julia@latest\n        continue-on-error: true\n        with:\n          version: ${{ matrix.julia-version }}\n          arch: ${{ matrix.julia-arch }}\n      - uses: julia-actions/julia-buildpkg@latest\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-runtest@latest\n        continue-on-error: ${{ matrix.julia-version == 'nightly' }}\n        env:\n          PYTHON: \"\"\n      - uses: julia-actions/julia-processcoverage@v1\n      - uses: codecov/codecov-action@v1\n        with:\n          file: ./lcov.info\n          flags: unittests\n          name: codecov-umbrella\n          fail_ci_if_error: false\n          token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"id": "63c4a057517fc08c1ef0f4c2", "level": "level4", "llm_response": " ```yaml\nname: Autocloser\n\non:\n  issues:\n    types: [opened, reopened]\n\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Issue auto-closer\n        run: |\n          # Commands to automatically close issues go here\n          echo \"Automating issue closure...\"\n          # Example: git issue-close <issue-number>\n```", "answer": "```yaml name: Autocloser\non: [issues]\njobs:\n  autoclose:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Issue auto-closer\n      uses: roots/issue-closer-action@v1.1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-close-message: \"@${issue.user.login} this issue was automatically closed because it did not follow the bellow rules:\\n\\n<pre>\\n\\n\\n\\nIMPORTANT: Please use the following link to create a new issue:\\n\\nhttps://www.creative-tim.com/new-issue/argon-dashboard\\n\\n**If your issue was not created using the app above, it will be closed immediately.**\\n\\n\\n\\nLove Creative Tim? Do you need Angular, React, Vuejs or HTML? You can visit:\\n\ud83d\udc49  https://www.creative-tim.com/bundles\\n\ud83d\udc49  https://www.creative-tim.com\\n\\n\\n</pre>\\n\\n\"\n        issue-pattern: (\\#\\#\\# Version([\\S\\s.*]*?)\\#\\#\\# Reproduction link([\\S\\s.*]*?)\\#\\#\\# Operating System([\\S\\s.*]*?)\\#\\#\\# Device([\\S\\s.*]*?)\\#\\#\\# Browser & Version([\\S\\s.*]*?)\\#\\#\\# Steps to reproduce([\\S\\s.*]*?)\\#\\#\\# What is expected([\\S\\s.*]*?)\\#\\#\\# What is actually happening([\\S\\s.*]*?)---([\\S\\s.*]*?)\\#\\#\\# Solution([\\S\\s.*]*?)\\#\\#\\# Additional comments([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)|(\\#\\#\\# What is your enhancement([\\S\\s.*]*?)\\<\\!-- generated by creative-tim-issues\\. DO NOT REMOVE --\\>)\n```"}
{"id": "63c496fd33b087f6bde2f9ec", "level": "level4", "llm_response": " ```yaml\nname: Label Pull Requests\non: [pull_request]\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add Labels for PR\n        run: |\n          # Commands to add labels to the pull request\n          echo \"Adding labels to PR\"\n\n      - name: Add PR Size Labels for PR\n        run: |\n          # Commands to add size labels to the pull request\n          echo \"Adding size labels to PR\"\n```", "answer": "```yaml name: Label Pull Requests\n\non:\n- pull_request_target\n\njobs:\n  label-pr:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Add Labels for PR\n      uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        configuration-path: .github/labeler.yaml\n        sync-labels: true\n\n    - name: Add PR Size Labels for PR\n      uses: codelytv/pr-size-labeler@v1\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        xs_label: 'size/XS'\n        xs_max_size: '20'\n        s_label: 'size/S'\n        s_max_size: '50'\n        m_label: 'size/M'\n        m_max_size: '150'\n        l_label: 'size/L'\n        l_max_size: '300'\n        xl_label: 'size/XL'\n        fail_if_xl: 'false'\n        message_if_xl: >\n          'This PR has too many changes.\n          Please make sure you are NOT addressing multiple issues with one PR.'\n```"}
{"id": "63c49b4e33b087f6bde4b436", "level": "level4", "llm_response": " ```yaml\nname: deploy armeria\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n    paths:\n      - 'build-bin/**'\n      - 'docker/**'\n      - 'armeria/**'\n      - '.github/workflows/deploy-armeria.yaml'\n      - 'parent-pom.xml'\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ~/.m2\n          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}\n\n      - name: Deploy armeria\n        run: |\n          # Add the commands to deploy armeria here\n          echo \"Deploying armeria...\"\n```", "answer": "```yaml # yamllint --format github .github/workflows/deploy.yml\n---\nname: deploy armeria\n\non:\n  # We deploy non-tagged pushes to master relevant for this project. We can't opt out of\n  # documentation-only commits because GH actions does not permit paths and paths-ignore.\n  push:\n    tags: ''\n    branches: master\n    paths:\n      - \"build-bin/**\"\n      - \"docker/**\"\n      - \"armeria/**\"\n      - \".github/workflows/deploy-armeria.yaml\"\n      - \"parent-pom.xml\"\n\njobs:\n  deploy:\n    runs-on: ubuntu-20.04  # newest available distribution, aka focal\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 1\n      - name: Cache local Maven repository\n        uses: actions/cache@v2\n        with:\n          path: ./m2repository  # Shared with the Docker build context via .dockerignore\n          key: ${{ runner.os }}-armeria-maven-${{ hashFiles('parent-pom.xml', 'armeria/pom.xml') }}\n          restore-keys: ${{ runner.os }}-armeria-maven-\n      # We can't cache Docker without using buildx because GH actions restricts /var/lib/docker\n      # That's ok because DOCKER_PARENT_IMAGE is always ghcr.io and local anyway.\n      - name: Deploy armeria\n        env:\n          # GH_USER=<user that created GH_TOKEN>\n          GH_USER: ${{ secrets.GH_USER }}\n          # GH_TOKEN=<hex token value>\n          #   - pushes Docker images to ghcr.io\n          #   - create via https://github.com/settings/tokens\n          #   - needs repo:status, public_repo, write:packages, delete:packages\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n        run: |\n          build-bin/configure_deploy armeria &&\n          build-bin/deploy armeria\n```"}
{"id": "63c49d9333b087f6bde5a392", "level": "level4", "llm_response": " ```yaml\nname: Dependabot auto-merge\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        # Here you would add steps to handle metadata, e.g., checking versions\n\n      - name: Enable auto-merge for Dependabot PRs\n        if: github.actor == 'dependabot[bot]'\n        run: |\n          # Here you would add the command to enable auto-merge for Dependabot PRs\n          # This might involve interacting with GitHub's API\n```\n\nPlease note that the actual commands to handle metadata and enable auto-merge for Dependabot PRs are not provided, as they would depend on the specific actions you want to take. You would need to replace the comments with the appropriate commands or scripts.", "answer": "```yaml name: Dependabot auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.1.1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n      - name: Enable auto-merge for Dependabot PRs\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"id": "63c49fce1842bc13d779961e", "level": "level4", "llm_response": " ```yaml\nname: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    id: lint\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Run linter\n        uses: golangci/golangci-lint@v1.50\n        with:\n          version: v1.50\n          install: true\n          args: --enable=all\n\n  tests:\n    runs-on: ubuntu-latest\n    needs: lint\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Install GCC and C libraries required by the race detector\n        run: sudo apt-get update && sudo apt-get install -y gcc libc6-dev\n      - name: Run unit tests\n        run: go test -race ./...\n```", "answer": "```yaml name: PR\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  lint:\n    name: GolangCI Lint\n    runs-on: ubuntu-latest\n    container: golangci/golangci-lint:v1.50-alpine\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Run linter\n      run: golangci-lint run\n\n  tests:\n    name: Run unit tests with the race detector enabled\n    runs-on: ubuntu-latest\n    container: golang:1.19-alpine\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 1\n\n      - name: Install GCC and C libraries required by the race detector\n        run: apk add --update gcc musl-dev\n\n      - name: Run unit tests\n        run: go test -v -race ./...\n```"}
{"id": "63c4a0e633b087f6bde6f51f", "level": "level4", "llm_response": " ```yaml\nname: Sync master to preview\non:\n  push:\n    branches:\n      - master\n\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Merge master -> preview\n        run: |\n          git fetch origin master:refs/remotes/origin/master\n          git checkout -b preview origin/master\n          git merge master --no-ff -X theirs\n```\nPlease note that the first step is named \"Checkout code\" which is a placeholder for the actual action you would like to perform, such as setting up Python or installing dependencies. You may need to add those steps depending on your specific requirements. The `Merge master -> preview` step assumes you want to merge the `master` branch into a new `preview` branch locally on the runner. Adjust the merge strategy (`-X theirs`) as needed for your workflow.", "answer": "```yaml name: Sync master to preview\n\n# When there's a push on master, we want to reflect it on preview too.\non:\n  push:\n    branches:\n      - 'master'\njobs:\n  sync-preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n\n      - name: Merge master -> preview\n        uses: devmasx/merge-branch@v1.3.0\n        with:\n          type: now\n          head_to_merge: ${{ github.ref }}\n          from_branch: master\n          target_branch: preview\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a05b33b087f6bde6c178", "level": "level4", "llm_response": " ```yaml\nname: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Use Node.js 16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Cache node modules\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n      - name: Run tests\n        run: npm test\n\n  release:\n    needs: test\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v2\n      - name: Install Node.js, NPM and Yarn\n        run: npm install\n      - name: Build & Release Electron app\n        run: npm run build-and-release\n```", "answer": "```yaml name: Build/release\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v3\n        - name: Use Node.js 16\n          uses: actions/setup-node@v3\n          with:\n            node-version: 16\n        - run: yarn\n        - run: yarn test --detectOpenHandles --forceExit\n\n  release:\n    needs: test\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v3\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Build & Release Electron app\n        uses: samuelmeuli/action-electron-builder@v1\n        with:\n          github_token: ${{ secrets.github_token }}\n          release: true\n```"}
{"id": "63c496561899db58864d23d8", "level": "level4", "llm_response": " ```yaml\nname: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/molecule.prometheus.yml'\n      - '.config/molecule/config.yml'\n      - 'molecule/Dockerfile.*'\n      - 'molecule/prometheus/**'\n      - 'roles/prometheus/**'\n      - 'plugins/filter/prometheus_architecture.py'\n      - 'plugins/filter/yaml.py'\n  workflow_dispatch:\n\njobs:\n  prometheus:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    inputs:\n      debug:\n        description: 'Run with tmate debugging'\n        required: false\n        default: false\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Call reusable workflow\n        uses: ./.github/workflows/molecule.yaml\n        with:\n          debug: ${{ inputs.debug == 'true' }}\n          scenario: prometheus\n```", "answer": "```yaml name: Molecule - Prometheus\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.prometheus.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/prometheus/**\n      - roles/prometheus/**\n      # Plugins\n      - plugins/filter/prometheus_architecture.py\n      - plugins/filter/yaml.py\n  workflow_dispatch:\n    inputs:\n      debug:\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  prometheus:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: prometheus\n```"}
{"id": "63c49d6ecbc73931bb1a706f", "level": "level4", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 24 * * sun'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      actions:\n        write: security-events\n    strategy:\n      matrix:\n        language: [go]\n\n    steps:\n      - name: Checkout repository\n      - name: Initialize CodeQL\n        uses: actions/initialize-codeql@v1\n      - name: Autobuild\n        run: |\n          make autobuild\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ main ]\n  schedule:\n    - cron: '24 0 * * 0'\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  analyze:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49752cbc73931bb17fa34", "level": "level4", "llm_response": " ```yaml\nname: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version-this:\n        description: 'Version to release'\n        required: false\n      force-this:\n        description: 'Force a release even when there are release-blockers'\n        required: false\n      schedule:\n        - cron: '0 17 15 * *'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Rust\n        uses: actions/setup-rust@v1\n\n      - name: Release a new Relay version\n        id: release\n        run: |\n          # Step 1: Check for version and force release if necessary\n          if [ -n \"${{ github.event.inputs.version-this }}\" ]; then\n            version_to_release=${{ github.event.inputs.version-this }}\n          else\n            version_to_release=$(cargo metadata --format-version=0 --no-deps --no-legacy | grep '^version:' | awk '{print $2}')\n          fi\n\n          if [ -n \"${{ github.event.inputs.force-this }}\" ] && [ \"${{ github.event.inputs.force-this }}\" == \"true\" ]; then\n            force_release=true\n          else\n            force_release=false\n          fi\n\n          # Step 2: Prepare release\n          echo \"Preparing release for version $version_to_release\"\n          # Insert commands to prepare the release here\n          # For example, tagging the release, creating release notes, etc.\n\n          # Check if force release is enabled\n          if [ \"$force_release\" == \"true\" ]; then\n            echo \"Forcing release due to force-this input\"\n            # Insert commands to force the release here\n          else\n            echo \"Release prepared for version $version_to_release\"\n            # Insert commands to publish the release here\n          fi\n```\nThis YAML file defines a GitHub Actions workflow named `Release` for a Rust repository. It includes triggers for manual dispatch and scheduled runs. The workflow has a single job named `release` that runs on the latest Ubuntu runner. The job includes two steps: setting up Rust and preparing the release, with optional inputs for version and force release. The actual commands to prepare and publish the release should be inserted where indicated.", "answer": "```yaml name: Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: Version to release (optional)\n        required: false\n      force:\n        description: Force a release even when there are release-blockers (optional)\n        required: false\n\n  schedule:\n    # We want the release to be at 9-10am Pacific Time\n    # We also want it to be 1 hour before the on-prem release\n    - cron: \"0 17 15 * *\"\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    name: \"Release a new Relay version\"\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GH_RELEASE_PAT }}\n          fetch-depth: 0\n\n      - name: Prepare release\n        uses: getsentry/action-prepare-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_PAT }}\n        with:\n          version: ${{ github.event.inputs.version }}\n          force: ${{ github.event.inputs.force }}\n          calver: true\n```"}
{"id": "63c49b3c1e33648075799306", "level": "level4", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16.x'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Create Release Pull Request / NPM Publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish\n          # Additional commands to create a pull request can be added here\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits\n          fetch-depth: 0\n\n      - name: Setup Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n      - name: Install Dependencies\n        run: npm i\n\n      - name: Create Release Pull Request / NPM Publish\n        uses: changesets/action@v1\n        with:\n          publish: npm run changeset-publish\n          version: npm run changeset-version\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"id": "63c49e5b517fc08c1ef02da4", "level": "level4", "llm_response": " ```yaml\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    branches:\n      - release-notes-preview-is-not-working\n  issues:\n    labels:\n      - release-notes\n    comments:\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Generate Preview\n        run: |\n          python generate_preview.py\n```\nNote: The `.`, ``, and ` ` in the step names are placeholders. You should replace them with the actual commands or scripts you want to run in each step. For example, you might have a script named `generate_preview.py` that generates the preview of the release notes.", "answer": "```yaml # https://github.com/marketplace/actions/release-notes-preview\nname: Release-Notes-Preview\n\non:\n  pull_request:\n    # This workflow is not working for some reason. It is stuck with this message:\n    #  Release Notes Confirmation Pending \u2014 awaiting release notes review\n    #  Keeping the YAML file to check back again in the future\n    branches: [release-notes-preview-is-not-working] # [develop]\n  issue_comment:\n    types: [edited]\n\njobs:\n  preview:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          git fetch --prune --unshallow --tags\n      - uses: snyk/release-notes-preview@v1.6.2\n        with:\n          releaseBranch: develop\n        env:\n          GITHUB_PR_USERNAME: ${{ github.actor }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49a621e33648075793e20", "level": "level4", "llm_response": " ```yaml\nname: macOS\n\non:\n  push:\n    branches:\n      - main\n      - issue*\n      - release-*\n  pull_request:\n    branches:\n      - main\n      - issue*\n      - release-*\n\njobs:\n  Compile and test planner:\n    runs-on: ${{ matrix.macos }}\n    strategy:\n      matrix:\n        version:\n          - {'macos': 'macos-11', 'python': '3.8'}\n          - {'macos': 'macos-12', 'python': '3.10'}\n    env:\n      MAX_TIME: 60\n    steps:\n      - name: Clone repository\n        run: git clone https://github.com/your-username/your-repo.git\n      - name: Install Python\n        run: |\n          curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n          python get-pip.py\n          pip install python==${{ matrix.python }}\n      - name: Compile planner\n        run: python compile_planner.py\n      - name: Install tox\n        run: pip install tox\n      - name: Install VAL\n        run: pip install val\n      - name: Run driver, translator and search tests\n        run: tox -e py38,py310\n    max_time: ${{ env.MAX_TIME }}\n```\nPlease replace `https://github.com/your-username/your-repo.git` with the actual URL of your GitHub repository. Also, ensure that the `compile_planner.py` script exists in your repository or update the path accordingly. The `tox` configuration should also be set up in your repository to run tests against the specified Python versions.", "answer": "```yaml ---\nname: macOS\n\non:\n  push:\n    branches: [main, issue*, release-*]\n  pull_request:\n    branches: [main, issue*, release-*]\n\njobs:\n  test:\n    name: Compile and test planner\n    timeout-minutes: 60\n    runs-on: ${{ matrix.version.macos }}\n    strategy:\n      matrix:\n        version:\n          - {macos: macos-11, python: '3.8'}\n          - {macos: macos-12, python: '3.10'}\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@master\n\n      - name: Install Python\n        uses: actions/setup-python@master\n        with:\n          python-version: ${{ matrix.version.python }}\n\n      - name: Compile planner\n        run: |\n          export CXXFLAGS=\"-Werror\" # Treat compilation warnings as errors.\n          ./build.py\n          ./build.py --debug\n\n      - name: Install tox\n        run: |\n          pip3 install tox\n\n      - name: Install VAL\n        run: |\n          brew install gnu-sed\n          git clone https://github.com/KCL-Planning/VAL.git\n          cd VAL\n          git checkout a5565396007eee73ac36527fbf904142b3077c74\n          make clean  # Remove old build artifacts and binaries.\n          gsed -i 's/-Werror //g' Makefile  # Ignore warnings.\n          make -j2\n          mv validate ../\n          cd ../\n          rm -rf VAL\n\n      - name: Run driver, translator and search tests\n        run: |\n          export PATH=\"$(pwd):$PATH\" # Add VAL to path.\n          cd misc\n          tox -e driver,translator,search\n\n...\n```"}
{"id": "63c49c571e336480757a03aa", "level": "level4", "llm_response": " ```yaml\nname: Add issues to project\non:\n  issues:\n    types: [opened]\n\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add issue to project\n        run: |\n          # Add your C# script or command to handle the issue here\n          echo \"Issue added to project\"\n          # Example: Add issue to a project management tool or document\n```\n\nIn this YAML configuration, you would replace the echo command with the actual script or command that adds the issue to your project management system or documentation. This could involve API calls, file manipulations, or other C#-specific operations.", "answer": "```yaml name: Add isuses to project\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add issue to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        with: \n          project-url: https://github.com/orgs/FirelyTeam/projects/6\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}```"}
{"id": "63c499b71842bc13d7772793", "level": "level4", "llm_response": " ```yaml\nname: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n      - tags:\n        - '*'\n    pull_request:\n      created:\n      - types: [opened]\n      branches:\n        - main\n\nenv:\n  CABAL_ARGS: --project-file=cabal.project.ci\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: True\n\njobs:\n  build:\n    name: Build on ${{ matrix.os }} with GHC-${{ matrix.ghc-version }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        ghc-version: [9.2]\n    steps:\n      - name: Checkout\n      - name: Setup Haskell\n      - name: Setup Node\n      - name: Setup BumpVer\n      - name: Setup HTMLProofer\n      - id: setup-epubcheck\n        name: Setup EPUBCheck\n      - name: Cache build\n      - name: Build\n      - name: Test with BumpVer\n      - name: Test with HTML-validate\n      - name: Test with HTMLProofer\n      - name: Test with EPUBCheck\n      - name: Upload latest artifact\n\n  publish:\n    needs: build\n    if: github.event_name == 'push'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n      - name: Publish to GitHub Pages\n        uses: actions/github-pages@v2\n        with:\n          target_branch: gh-pages\n          publish_dir: ./dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - name: Publish to GitHub Releases\n        if: startsWith(github.ref, 'refs/tags/v')\n        uses: actions/github-releases@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          draft: false\n          tag_name: ${{ github.ref }}\n          name: ${{ github.ref }}\n          publish_dir: ./dist\n          artifacts: 'Website HEAD Linux GHC-9.2'\n\n  release:\n    needs: build\n    if: startsWith(github.ref, 'refs/tags/v')\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n      - name: Publish to GitHub Releases\n        uses: actions/github-releases@v1\n        with:\n          draft: false\n          tag_name: ${{ github.ref }}\n          name: ${{ github.ref }}\n          publish_dir: ./dist\n          artifacts: 'Website HEAD Linux GHC-9.2'\n```", "answer": "```yaml name: Build & Test\n\non:\n  push:\n    branches:\n      - dev\n    tags:\n      - '*'\n  pull_request:\n    types:\n      - opened\n      - synchronize\n\nenv:\n  CABAL_ARGS: \"--project-file=cabal.project.ci\"\n  NOKOGIRI_USE_SYSTEM_LIBRARIES: true\n\ndefaults:\n  run:\n    shell: pwsh\n\njobs:\n  build:\n    strategy:\n      fail-fast: true\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        ghc-version: [\"9.2\"]\n        include:\n          - experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"8.10\"\n            experimental: false\n          - os: ubuntu-latest\n            ghc-version: \"9.0\"\n            experimental: false\n\n    name: Build on ${{ matrix.os }} with GHC-${{ matrix.ghc-version }}\n    runs-on: ${{ matrix.os }}\n    continue-on-error: ${{ matrix.experimental }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: 'true'\n\n      - name: Setup Haskell\n        uses: ./.github/actions/setup-haskell\n        with:\n          ghc-version: ${{ matrix.ghc-version }}\n          cabal-project-freeze-file: cabal.project.ci.freeze\n\n      - name: Setup Node\n        uses: ./.github/actions/setup-node\n\n      - name: Setup BumpVer\n        uses: ./.github/actions/setup-bumpver\n        # depends on requirements-dev.txt\n\n      - name: Setup HTMLProofer\n        if: runner.os != 'Windows'\n        uses: ./.github/actions/setup-htmlproofer\n        # depends on Gemfile\n\n      - name: Setup EPUBCheck\n        uses: ./.github/actions/setup-epubcheck\n        id: setup-epubcheck\n        with:\n          epubcheck-version: \"4.2.6\"\n\n      - name: Cache build\n        uses: actions/cache@v3\n        with:\n          path: _cache\n          key: build-${{ runner.os }}-${{ secrets.BUILD_CACHE_VERSION }}\n\n      - name: Build\n        run: make build\n\n      - name: Test with BumpVer\n        run: bumpver update --dry --no-fetch\n\n      - name: Test with HTML-validate\n        run: make test-html-validate\n\n      - name: Test with HTMLProofer\n        if: runner.os != 'Windows'\n        run: make test-htmlproofer\n\n      - name: Test with EPUBCheck\n        run: make test-epubcheck\n        env:\n          EPUBCHECK: \"java -jar ${{ steps.setup-epubcheck.outputs.epubcheck-jar-path }}\"\n\n      - name: Upload latest artifact\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: Website HEAD ${{ runner.os }} GHC-${{ matrix.ghc-version }}\n          path: _site\n          if-no-files-found: error\n\n  publish:\n    name: Publish to GitHub Pages\n    needs: [build]\n    if: github.event_name == 'push'\n    uses: ./.github/workflows/publish.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n\n  release:\n    name: Publish to GitHub Releases\n    needs: [build]\n    if: startsWith(github.ref, 'refs/tags/v')\n    uses: ./.github/workflows/release.yml\n    with:\n      artifact-name: Website HEAD Linux GHC-9.2\n```"}
{"id": "63c49a621e33648075793dfd", "level": "level4", "llm_response": " ```yaml\nname: Steam Upload\n\non:\n  release:\n    types: [published, prereleased, draft]\n  workflow_dispatch:\n\ninputs:\n  tag-this:\n    description: 'Tag to fetch and upload (nightly if none)'\n    required: false\n  win_url_override:\n    description: 'Windows build to use (.zip only)'\n    required: false\n  mac_url_override:\n    description: 'Mac build to use (.dmg only)'\n    required: false\n  mac_arm_url_override:\n    description: 'Mac arm build to use (.dmg only)'\n    required: false\n\nenv:\n  WORKFLOW_ID: '583765'\n  GIT_NIGHTLY_BRANCH: 'master'\n  STEAM_NIGHTLY_BRANCH: 'nightly'\n  STEAM_STABLE_BRANCH: 'staging'\n  STEAM_BETA_BRANCH: 'beta_staging'\n  SEVENZIP_HASH: '5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d'\n\njobs:\n  Steam upload:\n    runs-on: ubuntu-20.04\n    if: github.repository_owner == 'obsproject'\n    steps:\n      - name: Checkout\n        id: checkout\n\n      - name: Setup 7-Zip\n        id: setup-7zip\n\n      - name: Get build information\n        id: build-info\n\n      - name: Restore build cache\n        id: cache\n\n      - name: Determine if Steam upload should run\n        id: should-run\n\n      - name: Download and prepare builds\n        id: download-and-prepare-builds\n\n      - name: Setup steamcmd\n        id: setup-steamcmd\n\n      - name: Generate Steam auth code\n        id: steam-totp\n\n      - name: Upload to Steam\n        id: upload-to-steam\n\n      - name: Upload Steam build logs\n        id: upload-steam-build-logs\n```", "answer": "```yaml name: Steam Upload\n\non:\n  release:\n    types:\n    - published\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Tag to fetch and upload (nightly if none)'\n        required: false\n      win_url_override:\n        description: 'Windows build to use (.zip only)'\n        required: false\n      mac_url_override:\n        description: 'Mac build to use (.dmg only)'\n        required: false\n      mac_arm_url_override:\n        description: 'Mac ARM build to use (.dmg only)'\n        required: false\n  schedule:\n  - cron: 0 0 * * *\n\nenv:\n  WORKFLOW_ID: 583765\n  GIT_NIGHTLY_BRANCH: master\n  STEAM_NIGHTLY_BRANCH: nightly\n  STEAM_STABLE_BRANCH: staging\n  STEAM_BETA_BRANCH: beta_staging\n  SEVENZIP_HASH: 5290409e7bbe2f133d0bd7e7482548678157ea2be276b0f9cb440600f4be9a2d\n\njobs:\n  upload:\n    name: Steam upload\n    runs-on: ubuntu-20.04\n    if: github.repository_owner == 'obsproject'\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        path: source\n\n      # The 7-Zip version available in the default ubuntu repos (p7zip) is wildly out-of-date and does not properly support DMG files.\n    - name: Setup 7-Zip\n      run: |\n        mkdir 7z && cd 7z\n        curl -s https://www.7-zip.org/a/7z2200-linux-x64.tar.xz -o 7z.tar.xz\n        \n        if [[ '${{ env.SEVENZIP_HASH }}' != \"$(sha256sum 7z.tar.xz | cut -d \" \" -f 1)\" ]]; then\n            echo \"7-Zip Download hash does not match!\"\n            exit 1\n        fi\n        \n        tar -xJf 7z.tar.xz\n        echo \"$(pwd)\" >> $GITHUB_PATH\n\n    - name: Get build information\n      id: build-info\n      run: |\n        EVENT='${{ github.event_name }}'\n        if [[ ${EVENT} == 'release' || ( ${EVENT} == 'workflow_dispatch' && -n '${{ github.event.inputs.tag }}') ]]; then\n            if [[ ${EVENT} == \"release\" ]]; then\n                DESC='${{ github.event.release.tag_name }}'\n                if [[ '${{ github.event.release.prerelease }}' == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL='${{ github.event.release.assets_url }}'\n            else\n                RELEASE=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/releases/tags/${{ github.event.inputs.tag }}')\"\n\n                DESC=\"$(jq -r '.tag_name' <<< ${RELEASE})\"\n                if [[ \"$(jq -r '.prerelease' <<< ${RELEASE})\" == 'true' ]]; then\n                  BRANCH='${{ env.STEAM_BETA_BRANCH }}'\n                else\n                  BRANCH='${{ env.STEAM_STABLE_BRANCH }}'\n                fi\n                ASSETS_URL=\"$(jq -r '.assets_url' <<< ${RELEASE})\"\n            fi\n\n            ASSETS=\"$(curl -s \"${ASSETS_URL}\")\"\n            WIN_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x64.zip\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*x86_64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.[] | select(.name|test(\".*arm64.*.dmg\")) .browser_download_url' <<< ${ASSETS})\"\n            TYPE='release'\n        else\n            BRANCH='${{ env.STEAM_NIGHTLY_BRANCH }}'\n            BUILDS=\"$(curl -s '${{ github.api_url }}/repos/obsproject/obs-studio/actions/workflows/${{ env.WORKFLOW_ID }}/runs?per_page=1&event=push&status=success&branch=${{ env.GIT_NIGHTLY_BRANCH }}')\"\n            ARTIFACTS_URL=\"$(jq -r '.workflow_runs[].artifacts_url' <<< ${BUILDS})\"\n            DESC=\"g$(jq -r '.workflow_runs[].head_sha' <<< \"${BUILDS}\" | cut -c1-9)\"\n\n            ARTIFACTS=\"$(curl -s ${ARTIFACTS_URL})\"\n            WIN_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*windows-x64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-x86_64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            MAC_ARM_ASSET_URL=\"$(jq -r '.artifacts[] | select(.name|test(\".*macos-arm64.*\")) .archive_download_url' <<< ${ARTIFACTS})\"\n            TYPE='nightly'\n        fi\n\n        # Apply overrides from workflow_dispatch\n        if [[ ${EVENT} == 'workflow_dispatch' ]]; then\n            if [[ -n '${{ github.event.inputs.win_url_override }}' ]]; then\n                WIN_ASSET_URL='${{ github.event.inputs.win_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_url_override }}' ]]; then\n                MAC_ASSET_URL='${{ github.event.inputs.mac_url_override }}'\n            fi\n\n            if [[ -n '${{ github.event.inputs.mac_arm_url_override }}' ]]; then\n                MAC_ARM_ASSET_URL='${{ github.event.inputs.mac_arm_url_override }}'\n            fi\n        fi\n\n        if [[ -z ${WIN_ASSET_URL} || -z ${MAC_ASSET_URL} || -z ${MAC_ARM_ASSET_URL} ]]; then\n            echo \"Missing at least one asset URL!\"\n            exit 1\n        fi\n\n        # set env variables for subsequent steps\n        echo \"type=${TYPE}\" >> $GITHUB_OUTPUT\n        echo \"branch=${BRANCH}\" >> $GITHUB_OUTPUT\n        echo \"desc=${DESC}\" >> $GITHUB_OUTPUT\n        echo \"win_url=${WIN_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_intel_url=${MAC_ASSET_URL}\" >> $GITHUB_OUTPUT\n        echo \"mac_arm_url=${MAC_ARM_ASSET_URL}\" >> $GITHUB_OUTPUT\n\n    - name: Restore build cache\n      id: cache\n      uses: actions/cache@v3\n      with:\n        path: ${{ github.workspace }}/steam/build\n        key: ${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}\n        # Using \"restore-keys\" will restore the most recent cache for the branch, even if the exact cache doesn't exist.\n        # This doesn't set cache-hit to true so it won't skip the upload for nightlies.\n        restore-keys: ${{ steps.build-info.outputs.branch }}\n\n    - name: Determine if Steam upload should run\n      # If the nightly build has already been uploaded and thus a cache exists skip this and the following steps.\n      # Steam does not prevent us from uploading duplicate builds so this would just pollute the dashboard.\n      # This is a bit of a hack and can fail to work if our cache has been evicted or we somehow have no commits for 7 days,\n      # but it's better than nothing!\n      id: should-run\n      run: |\n        if [[ '${{ steps.build-info.outputs.type }}' == 'release' || '${{ steps.cache.outputs.cache-hit }}' != 'true' ]]; then\n            echo \"result=true\" >> $GITHUB_OUTPUT\n        else\n            echo \"result=false\" >> $GITHUB_OUTPUT\n        fi\n\n    - name: Download and prepare builds\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        echo \"::group::Download Windows build\"\n        if [[ '${{ steps.build-info.outputs.win_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        else\n            curl -L '${{ steps.build-info.outputs.win_url }}' -o windows.zip\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Download Mac builds\"\n        if [[ '${{ steps.build-info.outputs.mac_intel_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_intel_url }}' -o mac_x86.dmg\n        fi\n\n        if [[ '${{ steps.build-info.outputs.mac_arm_url }}' == *'api.github.com'* ]]; then\n            curl -L -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg.zip\n        else\n            curl -L '${{ steps.build-info.outputs.mac_arm_url }}' -o mac_arm64.dmg\n        fi\n        echo \"::endgroup::\"\n\n        mkdir -p steam && cd steam\n\n        echo \"::group::Extract and prepare Win64\"\n        mkdir steam-windows\n        (\n            cd steam-windows\n            unzip ../../windows.zip\n            # CI builds can be double-zipped\n            if compgen -G \"*.zip\" > /dev/null; then\n                unzip *.zip\n                rm *.zip\n            fi\n            # copy install scripts and create sentinel file\n            cp -r ../../source/CI/steam/scripts_windows scripts\n            touch disable_updater\n        )\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract macOS (x86)\"\n        mkdir -p steam-macos/x86\n        # CI builds are zipped\n        if [[ -f ../mac_x86.dmg.zip ]]; then\n            unzip ../mac_x86.dmg.zip\n            # 7-Zip will have an exit code of 2 due to the \"unsafe\" 'Applications' symlink.\n            # GitHub treats this as a failure so ignore non-zero exit codes here.\n            7zz x *.dmg -otmp_x86 || true\n            rm *.dmg\n        else\n            7zz x ../mac_x86.dmg -otmp_x86 || true\n        fi\n\n        if [ -d tmp_x86/OBS.app ]; then\n            mv tmp_x86/OBS.app steam-macos/x86\n        else\n            mv tmp_x86/*/OBS.app steam-macos/x86\n        fi\n        echo \"::endgroup::\"\n\n        echo \"::group::Extract and prepare macOS (arm64)\"\n        mkdir -p steam-macos/arm64\n        if [[ -f ../mac_arm64.dmg.zip ]]; then\n            unzip ../mac_arm64.dmg.zip\n            7zz x *.dmg -otmp_arm64 || true\n            rm *.dmg\n        else\n            7zz x ../mac_arm64.dmg -otmp_arm64 || true\n        fi\n\n        if [ -d tmp_arm64/OBS.app ]; then\n            mv tmp_arm64/OBS.app steam-macos/arm64\n        else\n            mv tmp_arm64/*/OBS.app steam-macos/arm64\n        fi\n\n        cp ../source/CI/steam/scripts_macos/launch.sh steam-macos/launch.sh\n        echo \"::endgroup::\"\n\n    - name: Setup steamcmd\n      if: steps.should-run.outputs.result == 'true'\n      uses: CyberAndrii/setup-steamcmd@e19cd1516315ce46dbfffa47193f92fe42d1419e\n\n    - name: Generate Steam auth code\n      if: steps.should-run.outputs.result == 'true'\n      id: steam-totp\n      uses: CyberAndrii/steam-totp@0fc9e59dc5bbf4368d23d5a33956f104248da31a\n      with:\n        shared_secret: ${{ secrets.STEAM_SHARED_SECRET }}\n\n    - name: Upload to Steam\n      if: steps.should-run.outputs.result == 'true'\n      run: |\n        cd steam\n        echo \"::group::Prepare Steam build script\"\n        # The description in Steamworks for the build will be \"github_<branch>-<tag/short hash>\", e.g. \"github_nightly-gaa73de952\"\n        sed 's/@@DESC@@/${{ steps.build-info.outputs.branch }}-${{ steps.build-info.outputs.desc }}/;s/@@BRANCH@@/${{ steps.build-info.outputs.branch }}/' ../source/CI/steam/obs_build.vdf > build.vdf\n        echo \"Generated file:\"\n        cat build.vdf\n        echo \"::endgroup::\"\n        echo \"::group::Upload to Steam\"\n        steamcmd +login '${{ secrets.STEAM_USER }}' '${{ secrets.STEAM_PASSWORD }}' '${{ steps.steam-totp.outputs.code }}' +run_app_build \"$(pwd)/build.vdf\" +quit\n        echo \"::endgroup::\"\n\n    - name: Upload Steam build logs\n      if: steps.should-run.outputs.result == 'true'\n      uses: actions/upload-artifact@v3\n      with:\n        name: steam-build-logs\n        path: ${{ github.workspace }}/steam/build/*.log\n```"}
{"id": "63c497b0cbc73931bb181e14", "level": "level4", "llm_response": " ```yaml\nname: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        run: echo \"Fetching project data for the newly opened issue...\"\n        # Additional commands to fetch project data can be added here\n\n      - name: Add issue to project\n        run: echo \"Adding the issue to the project board...\"\n        # Additional commands to add the issue to the project board can be added here\n```", "answer": "```yaml name: Add Issue to Board\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  track_issue:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get project data\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n        run: |\n          gh api graphql -f query='\n            query {\n              organization(login: \"revoltchat\"){\n                projectNext(number: 3) {\n                  id\n                  fields(first:20) {\n                    nodes {\n                      id\n                      name\n                      settings\n                    }\n                  }\n                }\n              }\n            }' > project_data.json\n\n          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV\n          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") | .id' project_data.json) >> $GITHUB_ENV\n          echo 'TODO_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== \"Status\") |.settings | fromjson.options[] | select(.name==\"Todo\") |.id' project_data.json) >> $GITHUB_ENV\n\n      - name: Add issue to project\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT }}\n          ISSUE_ID: ${{ github.event.issue.node_id }}\n        run: |\n          item_id=\"$( gh api graphql -f query='\n            mutation($project:ID!, $issue:ID!) {\n              addProjectNextItem(input: {projectId: $project, contentId: $issue}) {\n                projectNextItem {\n                  id\n                }\n              }\n            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')\"\n          \n          echo 'ITEM_ID='$item_id >> $GITHUB_ENV\n```"}
{"id": "63c4981c33b087f6bde36b61", "level": "level4", "llm_response": " ```yaml\nname: sync-files\n\non:\n  schedule:\n    - cron: '0 0 * * *'  # At 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    runs-on: ubuntu-latest\n    needs: []\n    steps:\n      - name: Check secret\n        id: check-secret\n        uses: autowarefoundation/autoware-github-actions/.github/workflows/check-secret.yaml@v1\n        with:\n          secret: ${{ secrets.APP_ID }}\n\n  sync-files:\n    if: ${{ needs.check-secret.outputs.set == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        run: echo \"Generating token...\"\n\n      - name: Run sync-files\n        run: echo \"Running sync-files...\"\n```", "answer": "```yaml name: sync-files\n\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\n\njobs:\n  check-secret:\n    uses: autowarefoundation/autoware-github-actions/.github/workflows/check-secret.yaml@v1\n    secrets:\n      secret: ${{ secrets.APP_ID }}\n\n  sync-files:\n    needs: check-secret\n    if: ${{ needs.check-secret.outputs.set == 'true' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate token\n        id: generate-token\n        uses: tibdex/github-app-token@v1\n        with:\n          app_id: ${{ secrets.APP_ID }}\n          private_key: ${{ secrets.PRIVATE_KEY }}\n\n      - name: Run sync-files\n        uses: autowarefoundation/autoware-github-actions/sync-files@v1\n        with:\n          token: ${{ steps.generate-token.outputs.token }}\n          pr-labels: |\n            bot\n            sync-files\n          auto-merge-method: squash\n```"}
{"id": "63c49ee0517fc08c1ef064ca", "level": "level4", "llm_response": " ```yaml\nname: Update Issues\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '*/30 * * * *'\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Update Issues\n        # Here you would add the steps to update the issues,\n        # which might involve using the GitHub API with the GITHUB_TOKEN\n        # For example, you might use a GitHub Actions step that runs shell commands\n        # to update the issues with new permissions.\n        # Ensure that the GITHUB_TOKEN has write access to the issues scope.\n        run: |\n          echo \"Update issues permissions for GITHUB_TOKEN in issues scope\"\n          # Add your script or command to update issue permissions here\n```\n\nPlease note that the `Update Issues` step is a placeholder. You will need to implement the actual logic to update the issue permissions, which may involve using the GitHub API and handling the GITHUB_TOKEN securely. The `echo` command is just a placeholder and should be replaced with the actual commands to perform the update.\n\nAlso, remember that the GITHUB_TOKEN should have the necessary permissions set in your repository settings for the workflow to run successfully. This is not something that can be set directly within the workflow file; it must be configured in the GitHub repository settings.", "answer": "```yaml # Install this in .github/workflows/ to automate issue maintenance.\nname: Update Issues\n\non:\n  workflow_dispatch:\n    # Allows for manual triggering.\n  schedule:\n    # Run every 30 minutes\n    - cron: '*/30 * * * *'\n\npermissions:\n  issues: write\n\njobs:\n  update-issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          repository: shaka-project/shaka-github-tools\n\n      - name: Update Issues\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          cd update-issues\n          npm ci\n          node main.js\n```"}
{"id": "63c49c411e3364807579faeb", "level": "level4", "llm_response": " ```yaml\nname: PR Labels\n\non:\n  pull_request:\n    types: [opened, labeled, unlabeled, edited]\n\njobs:\n  workflows:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Call Reusable Workflow\n        uses: hassio-addons/workflows/.github/workflows/pr-labels.yaml@main\n```", "answer": "```yaml ---\nname: PR Labels\n\n# yamllint disable-line rule:truthy\non:\n  pull_request_target:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  workflows:\n    uses: hassio-addons/workflows/.github/workflows/pr-labels.yaml@main\n```"}
{"id": "63c4a19f1842bc13d77a502b", "level": "level4", "llm_response": " ```yaml\nname: CompatHelper\non:\n  schedule:\n    - cron: '0 0 * * *' # Trigger at 12:00 am every day\n  workflow_dispatch: # Also triggerable by manual intervention\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install CompatHelper\n        run: Pkg.add(\"CompatHelper\")\n      \n      - name: Run CompatHelper\n        run: CompatHelper.main()\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: '00 00 * * *'\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}  # trigger CI\n        run: julia -e 'using CompatHelper; CompatHelper.main(; subdirs = [\"\", \"docs\"])'\n```"}
{"id": "63c49ee2736e7f0ed8c6ab16", "level": "level4", "llm_response": " ```yaml\nname: Check changelog file included\non:\n  pull_request:\n    paths-ignore:\n      - '**/perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Changelog\n        # Add the actual step commands here, e.g., using a script or a tool\n        run: |\n          echo \"Checking changelog file included...\"\n          # Insert Python script or command to verify the changelog here\n```\n\nNote: The actual step commands to check the changelog file are not included in this YAML snippet. You would need to replace the `echo` and comments with the specific commands or scripts that perform the desired checks. For instance, if you have a Python script named `check_changelog.py`, you would add a step like this:\n\n```yaml\n      - name: Check Changelog\n        run: python check_changelog.py\n```\n\nMake sure to include this script in your repository and provide the necessary logic to check for the changelog file inclusion.", "answer": "```yaml name: Check changelog file included\n\non:\n  pull_request:\n    paths:\n      - 'perceval/**'\n\njobs:\n  check-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: bitergia/release-tools-check-changelog@master\n```"}
{"id": "63c49f21b008460c1df4bcb5", "level": "level4", "llm_response": " ```yaml\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n      paths-ignore:\n        - LICENSE*\n        - .gitignore\n        - **.md\n        - **.adoc\n        - *.txt\n        - .ci/**\n  pull_request:\n    branches:\n      - main\n      paths-ignore:\n        - LICENSE*\n        - .gitignore\n        - **.md\n        - **.adoc\n        - *.txt\n        - .ci/**\n\njobs:\n  jpa-postgresql-container:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        java-version: [11]\n        maven-version: [3.8.6]\n    services:\n      postgres:\n        image: postgres:latest\n        ports:\n          - 5432:5432\n        options:\n          - --health-cmd pg_isready\n          - --health-interval 10s\n          - --health-timeout 5s\n          - --health-retries 5\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v2\n\n      - name: Java and Maven Setup\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ matrix.java-version }}\n          distribution: 'adopt'\n          maven-version: ${{ matrix.maven-version }}\n\n      - name: Build with Maven\n        run: mvn clean package\n```", "answer": "```yaml # Runs optaplanner-persistence-jpa module tests in a PostgreSQL container\n\nname: Persistence JPA\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n    branches:\n      - main\n    paths-ignore:\n      - 'LICENSE*'\n      - '.gitignore'\n      - '**.md'\n      - '**.adoc'\n      - '*.txt'\n      - '.ci/**'\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  jpa-postgresql-container:\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n        java-version: [ 11 ]\n        maven-version: [ '3.8.6' ]\n      fail-fast: false\n    runs-on: ${{ matrix.os }}\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n    name: ${{ matrix.os }} - Java ${{ matrix.java-version }} - Maven\n    steps:\n      - name: Check out repository code\n        uses: actions/checkout@v3\n      - name: Java and Maven Setup\n        uses: kiegroup/kogito-pipelines/.ci/actions/maven@main\n        with:\n          java-version: ${{ matrix.java-version }}\n          maven-version: ${{ matrix.maven-version }}\n          cache-key-prefix: ${{ runner.os }}-${{ matrix.java-version }}-maven${{ matrix.maven-version }}\n      # Builds the JPA module and runs tests in a PostgreSQL container\n      - name: Build with Maven\n        run: mvn -B clean install -pl :optaplanner-persistence-jpa -am -Ppostgresql\n```"}
{"id": "63c4a18e33b087f6bde73347", "level": "level4", "llm_response": " ```yaml\nname: Test Report\non:\n  workflow_run:\n    workflows: ['LoRa E2E CI', 'LoRa Build & Test CI']\n    types: [completed]\n\njobs:\n  report:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      id-token: write\n      packages: write\n      packages/*: write\n      security-events: write\n      security-events/*: write\n      check-runs: write\n      check-runs/*: write\n      check-suites: write\n      check-suites/*: write\n      pull-requests: write\n    steps:\n      - name: Generate Test Report\n        run: |\n          # Commands to generate the test report\n          echo \"Test report generation steps go here\"\n```\nNote: Replace the `echo \"Test report generation steps go here\"` line with the actual commands required to generate the test report for your C# project. The permissions have been set according to the user's request, granting write access to the specified scopes only for the `report` job.", "answer": "```yaml name: 'Test Report'\non:\n  workflow_run:\n    workflows: ['LoRa E2E CI', 'LoRa Build & Test CI']                     # runs after CI workflow\n    types:\n      - completed\njobs:\n  report:\n    permissions:\n      checks: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: dorny/test-reporter@v1\n      with:\n        artifact: /(.*)results/\n        name: '$1Results'\n        path: '**/*.trx'\n        reporter: dotnet-trx\n```"}
{"id": "63c497f91899db58864dce30", "level": "level4", "llm_response": " ```yaml\nname: Integration Test - Expression\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test_expression:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - name: ''\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Cache dependencies\n        uses: actions/cache@v2\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```\nNote: The placeholder `''` for the first step name should be replaced with the actual name of the step, which is missing in the provided input.", "answer": "```yaml name: Integration Test - Expression\n\non:\n  push:\n    branches: [main]\n  pull_request:\n\njobs:\n  test_expression:\n    name: ubuntu-latest\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js 16 x64\n        uses: actions/setup-node@v3.5.0\n        with:\n          node-version: 16\n          architecture: x64\n      - run: npm ci\n      - run: npm run test-expression\n```"}
{"id": "63c49758517fc08c1eed656f", "level": "level4", "llm_response": " ```yaml\nname: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, ready_for_review]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: null\n      contents: write\n      packages: write\n      security-events: write\n      repo: write\n\n    strategy:\n      matrix:\n        working-directory: ['src', 'test']\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          ref: ${{ github.head_ref }}\n          fetch-depth: 0\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Lint\n        run: golangci-lint run ./...\n        if: ${{ matrix.working-directory == 'test' }}\n```", "answer": "```yaml name: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\n# Remove all permissions from GITHUB_TOKEN except metadata.\npermissions: {}\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        working-directory:\n          - \"\"\n          - test\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.49.0\n          working-directory: ${{matrix.working-directory}}\n```"}
{"id": "63c49caa33b087f6bde54454", "level": "level4", "llm_response": " ```yaml\nname: Language Service\n\non:\n  push:\n    paths:\n      - 'src/language-service/**'\n      - '.github/**'\n  pull_request:\n    paths:\n      - 'src/language-service/**'\n      - '.github/**'\n\njobs:\n  language-service:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v2\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        run: npx eslint .\n\n      - name: \ud83d\ude80 Build Schema\n        run: npx tsc\n\n      - name: \ud83d\ude80 Run Compile\n        run: npx ts-node ./compile.ts\n\n      - name: \ud83c\udfd7 Create .npmrc\n        run: echo \"//registry.npmjs.org/:_authToken=${NPM_TOKEN}\" > .npmrc\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        run: npm publish\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\nNote: Replace `${{ secrets.NPM_TOKEN }}` with your actual NPM token stored as a secret in your GitHub repository. This workflow assumes you have the necessary scripts and configurations in place for the steps to work correctly.", "answer": "```yaml name: Language Sevice\n\non:\n  push:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n  pull_request:\n    paths:\n      - \"src/language-service/*\"\n      - \".github/*\"\n\njobs:\n  language-service:\n    name: Language Service\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: \u2935\ufe0f Check out code from GitHub\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Set up NodeJS\n        uses: actions/setup-node@v3.5.1\n        with:\n          node-version: \"16\"\n\n      - name: \ud83c\udfd7 Install NodeJS packages\n        working-directory: src/language-service\n        run: npm install\n\n      - name: \ud83d\ude80 Run Linter\n        working-directory: src/language-service\n        run: npm run lint\n\n      - name: \ud83d\ude80 Build Schema\n        working-directory: src/language-service\n        run: npm run schema\n\n      - name: \ud83d\ude80 Run Compile\n        working-directory: src/language-service\n        run: npm run compile\n\n      - name: \ud83c\udfd7 Create .npmrc\n        if: success() && github.ref == 'refs/heads/master'\n        run:\n          echo \"//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN\" >> ~/.npmrc\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: \ud83d\ude80 Publish to NPM Registry\n        if: success() && github.ref == 'refs/heads/master'\n        env:\n          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: |\n          npm publish src/language-service\n\n    # - name: NPM Publish to Registry\n    #   uses: actions/npm@master\n    #   if: success() && github.ref == 'refs/heads/master'\n    #   env:\n    #     NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n    #   with:\n    #     args: publish src/language-service\n```"}
{"id": "63c4a074517fc08c1ef10025", "level": "level4", "llm_response": " ```yaml\nname: Require pull request labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, deleted, updated]\n\njobs:\n  require-pr-labels:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: read\n      security-events: write\n      pull-requests: write\n    steps:\n      - name: Enforce PR Labels\n        uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for Bug Labels\n        run: |\n          # Add your script or command here to check for bug labels\n          echo \"Checking for bug labels on the pull request...\"\n```\nPlease note that the actual script or command to check for bug labels in the `require-bug-labels` job step is not provided and should be added according to your requirements.", "answer": "```yaml name: Require pull request labels\n\npermissions:\n  pull-requests: read\n\non:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - unlabeled\n      - synchronize\n\njobs:\n  require-pr-labels:\n    uses: replicatedhq/reusable-workflows/.github/workflows/pr-enforce-labels.yaml@main\n  require-bug-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v2\n        if: ${{ github.event.label.name == 'type::bug' }}\n        with:\n          mode: exactly\n          count: 1\n          labels: \"bug::normal, bug::regression\"\n```"}
{"id": "63c49d8733b087f6bde59ea2", "level": "level4", "llm_response": " ```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        # Add the actual step command here, for example:\n        run: echo \"Update release draft logic goes here\"\n```\n\nPlease note that you will need to replace `echo \"Update release draft logic goes here\"` with the actual commands or scripts required to update the release draft in your C++ repository.", "answer": "```yaml name: Release Drafter\n# https://github.com/release-drafter/release-drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n  # pull_request event is required only for autolabeler\n  pull_request:\n    # Only following types are handled by the action, but one can default to all as well\n    types: [opened, reopened, synchronize]\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n        # with:\n        #   config-name: my-config.yml\n        #   disable-autolabeler: true\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a0b433b087f6bde6e4a8", "level": "level4", "llm_response": " ```yaml\nname: Deploy Schema and Guidelines\n\non:\n  push:\n    branches:\n      - develop\n\nenv:\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout main repo\n        uses: actions/checkout@v2\n        with:\n          ref: main\n          path: ${{ env.SCHEMA_DIR }}/schema-repo\n\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n\n      - name: Build with Ant\n        run: ant build\n\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v2\n        with:\n          repository: ${{ env.SCHEMA_REPO }}\n          ref: ${{ env.SCHEMA_BRANCH }}\n          path: ${{ env.SCHEMA_DIR }}\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r build/schema ${{ env.SCHEMA_DIR }}\n\n      - name: Check git status before commit\n        run: git status\n\n      - name: Configure git\n        run: git config --global user.email \"your-email@example.com\"\n        run: git config --global user.name \"Your Name\"\n\n      - name: Commit files\n        run: |\n          git add ${{ env.SCHEMA_DIR }}/*\n          git commit -m \"Deploy schema\"\n\n      - name: Push changes to SCHEMA\n        run: |\n          git push origin ${{ env.SCHEMA_BRANCH }}\n\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v2\n        with:\n          repository: ${{ env.GUIDELINES_REPO }}\n          ref: ${{ env.GUIDELINES_BRANCH }}\n          path: ${{ env.GUIDELINES_DIR }}\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: cp -r build/guidelines ${{ env.GUIDELINES_DIR }}\n\n      - name: Check git status before commit\n        run: git status\n\n      - name: Configure git\n        run: git config --global user.email \"your-email@example.com\"\n        run: git config --global user.name \"Your Name\"\n\n      - name: Commit files\n        run: |\n          git add ${{ env.GUIDELINES_DIR }}/*\n          git commit -m \"Deploy guidelines\"\n\n      - name: Push changes to GUIDELINES\n        run: |\n          git push origin ${{ env.GUIDELINES_BRANCH }}\n```", "answer": "```yaml # This workflow will perform the following steps for pushes the the develop branch\n# * build the Schema and the Guidelines with Ant\n# * publish the Schema to music-encoding/schema under ./dev\n# * publish the Guidelines to music-encoding/guidelines under ./dev\n\nname: Deploy Schema and Guidelines\n\non:\n  push:\n    branches: [develop]\n\nenv:\n  # schema\n  SCHEMA_REPO: ${{ github.repository_owner }}/schema\n  SCHEMA_BRANCH: main\n\n  # guidelines\n  GUIDELINES_REPO: ${{ github.repository_owner }}/guidelines\n  GUIDELINES_BRANCH: main\n\n  # temporary directories\n  SCHEMA_DIR: schema-dir\n  GUIDELINES_DIR: guidelines-dir\n\njobs:\n  build:\n    name: Build and deploy Schema and Guidelines\n    runs-on: ubuntu-latest\n\n    steps:\n      ### BUIDLING THE SCHEMA AND THE GUIDELINES ###\n      - name: Checkout main repo\n        uses: actions/checkout@v3\n        with:\n          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n          # recursively checkout submodules.\n          #\n          # When the `ssh-key` input is not provided, SSH URLs beginning with\n          # `git@github.com:` are converted to HTTPS.\n          #\n          # Default: false\n          submodules: recursive\n\n      - name: Set up Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: \"temurin\"\n          java-version: \"17\"\n\n      - name: Build with Ant\n        # For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant\n        run: |\n          ant -noinput -buildfile build.xml init\n          ant -noinput -buildfile build.xml -lib lib/saxon/saxon-he-10.5.jar -Dgithub.sha=${{ github.sha }}\n\n      ### PUBLISHING THE SCHEMA ###\n      - name: Checkout SCHEMA_REPO into SCHEMA_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.SCHEMA_REPO }}\n          # Deploy key as secret for accessing <owner>/<SCHEMA_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_SCHEMA }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.SCHEMA_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.SCHEMA_DIR }}\n\n      - name: Copy built schema to SCHEMA_DIR\n        run: cp -r dist/schemata/dev $SCHEMA_DIR/\n\n      - name: Check git status before commit\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of schema build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to SCHEMA\n        working-directory: ${{ env.SCHEMA_DIR }}\n        run: git push origin HEAD:$SCHEMA_BRANCH\n\n      ### PUBLISHING THE GUIDELINES ###\n      - name: Checkout GUIDELINES_REPO into GUIDELINES_DIR\n        uses: actions/checkout@v3\n        with:\n          # repository to check out\n          repository: ${{ env.GUIDELINES_REPO }}\n          # Deploy key as secret for accessing <owner>/<GUIDELINES_REPO>;\n          # cf. explanation in https://github.com/rism-ch/verovio/pull/1751\n          ssh-key: ${{ secrets.GH_ACTIONS_DEPLOY_KEY_GUIDELINES }}\n          # ref (branch, tag or SHA) to check out\n          ref: ${{ env.GUIDELINES_BRANCH }}\n          # relative path under $GITHUB_WORKSPACE to place the repository\n          path: ${{ env.GUIDELINES_DIR }}\n\n      - name: Copy built guidelines to GUIDELINES_DIR\n        run: |\n          rm -rf $GUIDELINES_DIR/dev \n          cp -r dist/guidelines/dev/web $GUIDELINES_DIR/\n          mv $GUIDELINES_DIR/web $GUIDELINES_DIR/dev\n\n      - name: Check git status before commit\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          git config --get remote.origin.url\n          git status\n\n      - name: Configure git\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Configuring git...\"\n          git config user.name \"github-actions\"\n          git config user.email \"github-actions@users.noreply.github.com\"\n\n      - name: Commit files\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: |\n          echo \"Running git commit...\"\n          git add .\n          git commit -m \"Auto-commit of guidelines build for ${{ github.repository }}@${{ github.sha }}\"\n\n      - name: Push changes to GUIDELINES\n        working-directory: ${{ env.GUIDELINES_DIR }}\n        run: git push origin HEAD:$GUIDELINES_BRANCH\n```"}
{"id": "63c494a48052faa2781ac54c", "level": "level4", "llm_response": " ```yaml\nname: Lock closed issues\n\non:\n  schedule:\n    - cron: '30 5 * * *'  # Runs at 05:30 am every day\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Lock closed issues\n        # Add the specific step commands here\n```\n\nPlease note that you need to replace `Lock closed issues` with the actual commands or actions you want to perform in the `Lock closed issues` step. For example, if you're using a GitHub Action, you would specify the action and its arguments.", "answer": "```yaml name: \"Lock closed issues\"\n\non:\n  schedule:\n    - cron: \"30 5 * * *\"\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/lock-threads@v3.0.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-comment: \"This issue has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\"\n          issue-inactive-days: 30\n          process-only: \"issues\"\n# cspell:ignore dessant\n```"}
{"id": "63c49de9736e7f0ed8c64893", "level": "level4", "llm_response": " ```yaml\nname: Check for merge conflicts\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-label PRs with merge conflicts\n        # This step would typically include actions or scripts to check for merge conflicts\n        # and label the pull request accordingly.\n        # Since we don't have the specific actions, we're just defining the step name.\n        run: |\n          echo \"Checking for merge conflicts...\"\n          # Insert merge conflict detection logic here\n          # For example, using a hypothetical script or tool\n          # ./detect_merge_conflicts.sh\n          # If conflicts are found, label the PR\n          # gh pr comment --create --body \"Merge conflicts detected. Please resolve before merging.\"\n```", "answer": "```yaml # This workflow checks open PRs for merge conflicts and labels them when conflicts are found\nname: Check for merge conflicts\n\n# Run whenever the \"main\" branch is updated\n# NOTE: This means merge conflicts are only checked for when a PR is merged to main.\non:\n  push:\n    branches:\n      - main\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      # See: https://github.com/mschilde/auto-label-merge-conflicts/\n      - name: Auto-label PRs with merge conflicts\n        uses: mschilde/auto-label-merge-conflicts@v2.0\n        # Add \"merge conflict\" label if a merge conflict is detected. Remove it when resolved.\n        # Note, the authentication token is created automatically\n        # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token\n        with:\n          CONFLICT_LABEL_NAME: 'merge conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Ignore errors\n        continue-on-error: true\n```"}
{"id": "63c4a0591842bc13d779d081", "level": "level4", "llm_response": " ```yaml\nname: Issue closer\non:\n  issues:\n    types: [opened]\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue\n        run: echo \"Processing the opened issue...\"\n```", "answer": "```yaml name: Issue closer.\n\non:\n  issues:\n    types: opened\n\njobs:\n  comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Process an issue.\n        uses: desktop-app/action_issue_closer@master\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e2db008460c1df45cd1", "level": "level4", "llm_response": " ```yaml\nname: Cron Failures Check\non:\n  schedule:\n    - cron: '59 23 * * 1-5'\n  workflow_dispatch:\n\njobs:\n  call_cron_failures:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2\n      - name: Call reusable workflow\n        uses: ./.github/workflows/call-reusable-workflow.yml@main\n        with:\n          secrets: 'special_case_secrets=inherit'\n```", "answer": "```yaml ---\n\non:\n  # Note: This only applies to the default branch.\n  schedule:\n    # N/B: This should correspond to a period slightly after\n    # the last job finishes running.  See job defs. at:\n    # https://cirrus-ci.com/settings/repository/5138144844840960\n    - cron:  '59 23 * * 1-5'\n  # Debug: Allow triggering job manually in github-actions WebUI\n  workflow_dispatch: {}\n\njobs:\n  # Ref: https://docs.github.com/en/actions/using-workflows/reusing-workflows\n  call_cron_failures:\n    uses: containers/buildah/.github/workflows/check_cirrus_cron.yml@main\n    secrets: inherit\n```"}
{"id": "63c4993a1899db58864e5313", "level": "level4", "llm_response": " ```yaml\nname: Package Trigger Scheduler\non:\n  schedule:\n    - cron: '0 3 * * 4'  # Trigger at 03:24 am on Thursdays\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger Step 1\n        run: echo \"Step 1: Preparation\"\n\n      - name: Package Trigger Scheduler\n        run: echo \"Step 2: Execute package trigger\"\n```", "answer": "```yaml name: Package Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '24 3 * * 4'\n  workflow_dispatch:\n\njobs:\n  package-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: Package Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"${br}\" == \"${ls_branch}\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-transmission/${br}/.github/workflows/package_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering package trigger workflow for branch ${br}. ****\"\n                triggered_branches=\"${triggered_branches}${br} \"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-transmission/actions/workflows/package_trigger.yml/dispatches\n                sleep 30\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n          echo \"**** Package check build(s) triggered for branch(es): ${triggered_branches} ****\"\n          echo \"**** Notifying Discord ****\"\n          curl -X POST -H \"Content-Type: application/json\" --data '{\"avatar_url\": \"https://cdn.discordapp.com/avatars/354986384542662657/df91181b3f1cf0ef1592fbe18e0962d7.png\",\"embeds\": [{\"color\": 9802903,\n            \"description\": \"**Package Check Build(s) Triggered for transmission** \\n**Branch(es):** '\"${triggered_branches}\"' \\n**Build URL:** '\"https://ci.linuxserver.io/blue/organizations/jenkins/Docker-Pipeline-Builders%2Fdocker-transmission/activity/\"' \\n\"}],\n            \"username\": \"Github Actions\"}' ${{ secrets.DISCORD_WEBHOOK }}\n```"}
{"id": "63c4987033b087f6bde38dfc", "level": "level4", "llm_response": " ```yaml\nname: Release Drafter\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Release Draft\n        # The actual step content will be defined here, e.g., a script or a set of commands\n        run: |\n          echo \"Updating release draft...\"\n          # Insert your release draft update commands here\n```\n\nNote: The placeholder `Update Release Draft` under the `run` key should be replaced with the actual commands or scripts you want to execute to update the release draft. This could involve interacting with GitHub's API, using a tool like `set-release`, or any other automation required for the task.", "answer": "```yaml # draft release notes with https://github.com/release-drafter/release-drafter\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e4bb008460c1df468cb", "level": "level4", "llm_response": " ```yaml\nname: No Response\n\non:\n  issues:\n    types: [created]\n  pull_requests:\n    types: [opened, synchronize, reopened]\n  schedule:\n    - cron: '0 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n\n    steps:\n      - name: ''\n```\nPlease note that the step name is left empty (`''`) as per your request. If you need to specify a particular step name or action, please provide the details, and I will update the YAML accordingly.", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pull-requests: write\n    steps:\n      - uses: lee-dohm/no-response@v0.5.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          # Number of days of inactivity before an Issue is closed for lack of response\n          daysUntilClose: 7\n          # Label requiring a response\n          responseRequiredLabel: 'status: needs more information'\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Since the issue is missing key information and has been inactive for 7 days, it has been automatically closed.\n            If you wish to see the issue reopened, please provide the missing information.\n```"}
{"id": "63c49f741899db588650d292", "level": "level4", "llm_response": " ```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '30 17 * * 0'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      matrix:\n        language: [csharp]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v1\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '30 17 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c49f7a1e336480757b40f6", "level": "level4", "llm_response": " ```yaml\nname: Protobuf\non:\n  pull_request:\n    paths:\n      - 'proto/**'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Step 1'\n      - name: 'git_diff'\n        id: git_diff\n      - name: 'Step 3'\n\n  lint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - name: 'Step 1'\n      - name: 'Step 2'\n\n  break-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Step 1'\n      - name: 'Step 2'\n      - name: 'Step 3'\n```", "answer": "```yaml name: Protobuf\n# Protobuf runs buf (https://buf.build/) lint and check-breakage\n# This workflow is only run when a .proto file has been changed\non:\n  pull_request:\n    paths:\n      - \"proto/**\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        id: git_diff\n        with:\n          PATTERNS: |\n            **/**.proto\n            **/buf.yaml\n            buf.work.yaml\n            buf.gen.yaml\n      - run: |\n          make proto-gen\n        if: env.GIT_DIFF\n\n  lint:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-lint-action@v1\n        with:\n          input: \"proto\"\n\n  break-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: bufbuild/buf-setup-action@v1.9.0\n      - uses: bufbuild/buf-breaking-action@v1\n        with:\n          input: \"proto\"\n          against: \"https://github.com/${{ github.repository }}.git#branch=${{ github.event.pull_request.base.ref }},ref=HEAD~1,subdir=proto\"\n```"}
{"id": "63c49801cbc73931bb1841e8", "level": "level4", "llm_response": " ```yaml\nname: Clean\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    types: [ closed ]\n  workflow_dispatch:\n\njobs:\n  DeleteArtifacts:\n    runs-on: ubuntu-latest\n    environment:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Add commands to delete artifacts here\n          echo \"Artifacts deleted\"\n```", "answer": "```yaml # This file was automatically generated by sbt-github-actions using the\n# githubWorkflowGenerate task. You should add and commit this file to\n# your git repository. It goes without saying that you shouldn't edit\n# this file by hand! Instead, if you wish to make changes, you should\n# change your sbt build configuration to revise the workflow description\n# to meet your needs, then regenerate this file.\n\nname: Clean\n\non: push\n\njobs:\n  delete-artifacts:\n    name: Delete Artifacts\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - name: Delete artifacts\n        run: |\n          # Customize those three lines with your repository and credentials:\n          REPO=${GITHUB_API_URL}/repos/${{ github.repository }}\n\n          # A shortcut to call GitHub API.\n          ghapi() { curl --silent --location --user _:$GITHUB_TOKEN \"$@\"; }\n\n          # A temporary file which receives HTTP response headers.\n          TMPFILE=/tmp/tmp.$$\n\n          # An associative array, key: artifact name, value: number of artifacts of that name.\n          declare -A ARTCOUNT\n\n          # Process all artifacts on this repository, loop on returned \"pages\".\n          URL=$REPO/actions/artifacts\n          while [[ -n \"$URL\" ]]; do\n\n            # Get current page, get response headers in a temporary file.\n            JSON=$(ghapi --dump-header $TMPFILE \"$URL\")\n\n            # Get URL of next page. Will be empty if we are at the last page.\n            URL=$(grep '^Link:' \"$TMPFILE\" | tr ',' '\\n' | grep 'rel=\"next\"' | head -1 | sed -e 's/.*<//' -e 's/>.*//')\n            rm -f $TMPFILE\n\n            # Number of artifacts on this page:\n            COUNT=$(( $(jq <<<$JSON -r '.artifacts | length') ))\n\n            # Loop on all artifacts on this page.\n            for ((i=0; $i < $COUNT; i++)); do\n\n              # Get name of artifact and count instances of this name.\n              name=$(jq <<<$JSON -r \".artifacts[$i].name?\")\n              ARTCOUNT[$name]=$(( $(( ${ARTCOUNT[$name]} )) + 1))\n\n              id=$(jq <<<$JSON -r \".artifacts[$i].id?\")\n              size=$(( $(jq <<<$JSON -r \".artifacts[$i].size_in_bytes?\") ))\n              printf \"Deleting '%s' #%d, %'d bytes\\n\" $name ${ARTCOUNT[$name]} $size\n              ghapi -X DELETE $REPO/actions/artifacts/$id\n            done\n          done\n```"}
{"id": "63c49b84b008460c1df34d2f", "level": "level4", "llm_response": " ```yaml\nname: Generate docs\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Setup .NET\n      - name: Restore dependencies\n      - name: Build\n      - name: Generate docs\n      - name: Commit\n```", "answer": "```yaml name: 'Generate docs'\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.Sbom.Api/Config/Args/*.cs'\n      - 'src/Microsoft.Sbom.Common/Config/IConfiguration.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v2\n\n      - name: Restore dependencies\n        run: dotnet restore \n        \n      - name: Build\n        run: dotnet build --no-restore\n\n      - name: Generate docs\n        run: |\n          # Run CLI\n          dotnet run -p src/Microsoft.Sbom.Tool generate -- -h 2> help.txt || true\n          cat <<EOF > docs/sbom-tool-arguments.md\n          # Sbom tool arguments\n          \n          \\`\\`\\`shell\n          dotnet run -p './src/Microsoft.Sbom.Tool' generate -- -h\n          \\`\\`\\`\n\n          \\`\\`\\`\n          $(tail --lines=+4 help.txt)\n          \\`\\`\\`\n          EOF\n\n      - name: Commit\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'Auto update docs/*.md'\n          file_pattern: 'docs/*.md'\n          ```"}
{"id": "63c49cc31e336480757a2f97", "level": "level4", "llm_response": " ```yaml\nname: TagBot\n\non:\n  issues:\n    types: [opened, edited, reopened, labeled, unlabeled, milestoned, expiring]\n  pull_requests:\n    types: [opened, edited, reopened, synchronize, rebased, review_requested, review_requested, labeled, unlabeled, ready_for_review]\n  issues:\n    types: [commented]\n  workflow_dispatch:\n\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n```\n\nPlease note that the step name is left empty as per your request. You can fill in the step with the appropriate actions or commands that the job should perform. For example, you might want to add a step to update a tag or push a tag to the repository.\n\n```yaml\n      - name: Update Tag\n        run: julia --project=@. -e 'using Pkg; Pkg.add(\"SomePackage\"); Pkg.precompile()'\n```\n\nReplace the placeholder step with actual commands relevant to your use case.", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"id": "63c4974bcbc73931bb17f7a8", "level": "level4", "llm_response": " ```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, rebase]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Lint Python code\n        uses: pycodestyle/pycodestyle-action@v2\n        with:\n          python-version: '3.8'\n```\n\nThis YAML file defines a GitHub Actions workflow named `Lint PR` that is triggered by the specified pull request events. The workflow includes a single job called `main` that runs on the latest Ubuntu runner. The job has a step named \"Lint Python code\" which utilizes the `pycodestyle-action` to lint the Python code in the repository. The `python-version` is set to '3.8', which you can adjust based on your repository's requirements.", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # Please look up the latest version from\n      # https://github.com/amannn/action-semantic-pull-request/releases\n      - uses: amannn/action-semantic-pull-request@v3.4.2\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d681e336480757a6e6f", "level": "level4", "llm_response": " ```yaml\nname: MSDocs build verifier\non: pull_request\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@v2\n\n      - name: Validate\n        run: |\n          # Add validation steps here\n          echo \"Validating the MSDocs build...\"\n```", "answer": "```yaml name: MSDocs build verifier\non: pull_request\nenv:\n  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  validate:\n    name: MSDocs build verifier\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n\n      - name: Validate\n        uses: dotnet/docs-actions/actions/docs-verifier@main\n```"}
{"id": "63c498991842bc13d776b38d", "level": "level4", "llm_response": " ```yaml\nname: Auto Assign\non: [pull_request]\n\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Assign Reviewer\n        # Here you would typically use a script or a GitHub Action to perform the actual assignment\n        # For example purposes, we'll just echo a placeholder message\n        run: echo \"Assigning reviewer for pull request ${{ github.event.number }}\"\n```\n\nPlease note that the `echo` command is just a placeholder. In a real-world scenario, you would replace it with a script or a set of actions that actually perform the task of assigning a reviewer based on your repository's rules and logic.", "answer": "```yaml name: \"Auto Assign\"\non:\n  - pull_request\n\njobs:\n  assign_reviewer:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: shufo/auto-assign-reviewer-by-files@v1.1.2\n        with:\n          config: \"MAINTAINERS\"\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49af6cbc73931bb1971dd", "level": "level4", "llm_response": " ```yaml\nname: Releaser\non:\n  push:\n    paths-ignore:\n      - '**.md'\n      - '**.txt'\n    paths:\n      - 'version.json'\njobs:\n  releaser:\n    runs-on: ubuntu-latest\n    workflow_dispatch:\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Run releaser\n        uses: ./.github/.github/workflows/releaser.yml@master\n```", "answer": "```yaml # File managed by web3-bot. DO NOT EDIT.\n# See https://github.com/protocol/.github/ for details.\n\nname: Releaser\non:\n  push:\n    paths: [ 'version.json' ]\n\njobs:\n  releaser:\n    uses: protocol/.github/.github/workflows/releaser.yml@master\n```"}
{"id": "63c49baab008460c1df35d33", "level": "level4", "llm_response": " ```yaml\nname: Launchpad Mirror\non:\n  push:\n    branches:\n      - master\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: lp-${{ github.ref }}\n      cancel-in-progress: true\n    if: github.repository == 'widelands/widelands'\n    steps:\n      - name: Setting up bazaar\n        run: |\n          # Commands to setup bazaar\n\n      - name: Checkout trunk\n        uses: actions/checkout@v2\n        with:\n          ref: trunk\n\n      - name: Checkout master\n        uses: actions/checkout@v2\n        with:\n          ref: master\n\n      - name: Cleaning tree\n        run: |\n          # Commands to clean the tree\n\n      - name: Copying files\n        run: |\n          # Commands to copy files from trunk to master\n\n      - name: Committing and pushing changes\n        run: |\n          git config --global user.email \"your-email@example.com\"\n          git config --global user.name \"Your Name\"\n          git add .\n          git commit -m \"Synchronizing Launchpad trunk with GitHub master\"\n          git push origin master\n```\nNote: Replace the placeholder comments with actual commands required for each step. The `github.ref` is used to dynamically set the concurrency group based on the event ref (branch name or tag). The `if` condition ensures the workflow runs only for the specified repository. The `cancel-in-progress` option is used to cancel any running workflow in the same concurrency group if a new workflow is triggered.", "answer": "```yaml name: Launchpad Mirror\nconcurrency:\n  group: lp-${{ github.ref }}\n  cancel-in-progress: true\non:\n  push:\n    branches:\n      - master\njobs:\n  mirror:\n    if: github.repository == 'widelands/widelands'\n    name: Synchronizing Launchpad trunk with GitHub master\n    runs-on: ubuntu-latest\n    steps:\n    - name: Setting up bazaar\n      run: |\n        sudo apt-get update\n        sudo apt-get install bzr\n        mkdir ~/.ssh || true\n        echo \"${{ secrets.LP_SSH }}\" > ~/.ssh/id_rsa\n        chmod 400 ~/.ssh/id_rsa\n        echo \"${{ secrets.LP_HOST }}\" > ~/.ssh/known_hosts\n        eval \"$(ssh-agent -s)\"\n        ssh-add ~/.ssh/id_rsa\n        bzr whoami \"The Widelands Bunnybot <bunnybot@widelands.org>\"\n        bzr launchpad-login \"widelandsofficial\"\n    - name: Checkout trunk\n      run: |\n        cd ~\n        bzr branch lp:widelands wl_trunk\n    - name: Checkout master\n      run: |\n        cd ~\n        git clone --depth=1 https://github.com/widelands/widelands.git wl_master\n    - name: Cleaning tree\n      run: |\n        cd ~/wl_trunk\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".bzr\" ]\n          then\n            rm -r \"$file\"\n          fi\n        done\n    - name: Copying files\n      run: |\n        cd ~/wl_master\n        for file in $(ls -A)\n        do\n          if ! [ \"$file\" == \".git\" ]\n          then\n            cp -r $file ~/wl_trunk/$file\n          fi\n        done\n        cd ~/wl_trunk\n        mv .gitignore .bzrignore\n    - name: Committing and pushing changes\n      run: |\n        cd ~/wl_trunk\n        commit_message=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/$GITHUB_SHA\" | grep -F \"\\\"message\\\": \")\n        commit_message=${commit_message#*: \\\"}\n        commit_message=${commit_message%\\\",}\n        commit_message=\"$commit_message\\n\\n(by $GITHUB_ACTOR)\\n$GITHUB_SHA\"\n        commit_message=${commit_message//\"\\r\\n\"/\"\\n\"}\n        printf \"$commit_message\" > ~/temp_commit_message\n        bzr remove\n        bzr add\n        bzr commit --strict -F ~/temp_commit_message\n        set +e\n        check_for_remote_changes=$(curl -i \"https://api.github.com/repos/widelands/widelands/commits/master\" | grep -m 1 \"\\\"sha\\\": \")\n        set -e\n        check_for_remote_changes=${check_for_remote_changes#*: \\\"}\n        check_for_remote_changes=${check_for_remote_changes%\\\",}\n        if [ \"$check_for_remote_changes\" == \"$GITHUB_SHA\" ]\n        then\n          bzr push :parent\n        else\n          echo \"master was updated from '$GITHUB_SHA' to '$check_for_remote_changes', cancel\"\n          exit 1\n        fi\n```"}
{"id": "63c4978e517fc08c1eed7b18", "level": "level4", "llm_response": " ```yaml\nname: Cancel\n\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\n\njobs:\n  cancel:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: 'write'\n    steps:\n      - name: Cancel Previous Runs\n        run: echo \"Canceling previous runs\"\n        max_time: 3m\n```", "answer": "```yaml name: Cancel\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\npermissions: {} # none\njobs:\n  cancel:\n    permissions:\n      actions: write\n    name: Cancel Previous Runs\n    runs-on: ubuntu-latest\n    timeout-minutes: 3\n    steps:\n      - uses: styfle/cancel-workflow-action@0.10.0\n        with:\n          workflow_id: nodejs.yml\n          access_token: ${{ github.token }}\n```"}
{"id": "63c49ed7b008460c1df49e8e", "level": "level4", "llm_response": " ```yaml\nname: Check for merge conflicts\non:\n  push:\n    branches:\n      - master\njobs:\n  triage:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Check for merge conflicts\n```\nPlease provide the specific command or script you want to be executed in the step for checking merge conflicts, as the placeholder `Check for merge conflicts` needs to be replaced with an actual step detail.", "answer": "```yaml name: 'Check for merge conflicts'\non:\n  push:\n    branches:\n      - master\njobs:\n  triage:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: mschilde/auto-label-merge-conflicts@2e8fcc76c6430272ec8bb64fb74ec1592156aa6a\n        with:\n          CONFLICT_LABEL_NAME: 'Merge Conflict'\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          WAIT_MS: 8000\n```"}
{"id": "63c499ce1899db58864e9096", "level": "level4", "llm_response": " ```yaml\nname: Check Enforcer\non:\n  pull_request_target:\n    types: [opened, synchronize, reopened, labeled, unlabeled, milestoned, de milestoned, locked, unlocked]\n  issues:\n    types: [opened, closed, reopened, assigned, unassigned, labeled, unlabeled, milestoned, de milestoned, locked, unlocked]\n  check_suite:\n    types: [created, cleared, completed]\n  comments:\n    types: [created]\n\njobs:\n  event-handler:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: none\n      id-token: none\n      security-events: none\n      repo: none\n      gists: none\n      admin: none\n      delete_repo: none\n      manage_repositories: none\n      manage_gists: none\n      admin_gists: none\n      upload_gists: none\n      manage_workflows: none\n      read_workflow_dispatch: none\n      write_workflow_dispatch: none\n      read_repository: none\n      write_repository: none\n      read_workflow_run: none\n      write_workflow_run: none\n      read_repository_dispatch: none\n      write_repository_dispatch: none\n      read_workflow_job: none\n      write_workflow_job: none\n      read_workflow_run_attributes: none\n      write_workflow_run_attributes: none\n      read_repository_dispatch_event: none\n      write_repository_dispatch_event: none\n      read_workflow_run_dispatch_event: none\n      write_workflow_run_dispatch_event: none\n      read_workflow_job_dispatch_event: none\n      write_workflow_job_dispatch_event: none\n      read_workflow_run_dispatch_event_attributes: none\n      write_workflow_run_dispatch_event_attributes: none\n      read_workflow_run_attributes: none\n      write_workflow_run_attributes: none\n      read_workflow_run_attributes_attributes: none\n      write_workflow_run_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      write_workflow_run_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes_attributes: none\n      read_workflow_run_attributes_", "answer": "```yaml # NOTE: currently azure-sdk-actions only hosts check enforcer code.\n# If further functionality is added, this name should be updated to reflect\n# the more generic behavior\nname: Check Enforcer\n\non:\n  check_suite:\n    types: [completed]\n  issue_comment:\n    types: [created]\n\npermissions: {}\n\njobs:\n  event-handler:\n    permissions:\n      statuses: write # to set status (azure/azure-sdk-actions)\n      pull-requests: read # to read pull requests (azure/azure-sdk-actions)\n      checks: read # to read check status (azure/azure-sdk-actions)\n    name: Handle ${{ github.event_name }} ${{ github.event.action }} event\n    runs-on: ubuntu-latest\n    steps:\n      - uses: azure/azure-sdk-actions@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c498b51842bc13d776be8f", "level": "level4", "llm_response": " ```yaml\nname: format-check\n\non:\n  push:\n    branches:\n      - master\n      - release-*\n      - tags:\n          - '*'\n    pull_request:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        julia-version: [1]\n        julia-arch: [x86]\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: ${{ matrix.julia-version }}\n          architecture: ${{ matrix.julia-arch }}\n\n      - name: Install JuliaFormatter\n        run: |\n          julia -e 'using Pkg; Pkg.add(\"JuliaFormatter\")'\n\n      - name: Format check\n        run: |\n          julia --project=@. -e 'using Pkg; Pkg.instantiate(); using JuliaFormatter; JuliaFormatter.check()'\n```", "answer": "```yaml name: format-check\n\non:\n  push:\n    branches:\n      - 'master'\n      - 'release-'\n    tags: '*'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        julia-version: [1]\n        julia-arch: [x86]\n        os: [ubuntu-latest]\n    steps:\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: ${{ matrix.julia-version }}\n\n      - uses: actions/checkout@v1\n      - name: Install JuliaFormatter and format\n        # This will use the latest version by default but you can set the version like so:\n        #\n        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\", version=\"0.13.0\"))'\n        run: |\n          julia  -e 'using Pkg; Pkg.add(PackageSpec(name=\"JuliaFormatter\"))'\n          julia  -e 'using JuliaFormatter; format(\".\", verbose=true)'\n      - name: Format check\n        run: |\n          julia -e '\n          out = Cmd(`git diff`) |> read |> String\n          if out == \"\"\n              exit(0)\n          else\n              @error \"Some files have not been formatted !!!\"\n              write(stdout, out)\n              exit(1)\n          end'\n```"}
{"id": "63c49c896fc19abdf9cc3935", "level": "level4", "llm_response": " ```yaml\nname: pre-commit\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Lint with flake8\n        run: |\n          pip install flake8\n          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n\n      - name: Test with pytest\n        run: |\n          pip install pytest\n          pytest\n\n      - name: Format with black\n        run: |\n          pip install black\n          black . --check\n\n      - name: Commit and push if changes\n        if: hasError() || hasFailure()\n        run: |\n          git config user.name 'GitHub Actions'\n          git config user.email '<EMAIL>'\n          git add -A\n          git commit -m \"Pre-commit checks\" || echo \"No changes to commit\"\n          git push\n```\n\nPlease note that the placeholders (e.g., ``) should be replaced with actual step names and commands as per the specific requirements of your project. The example above includes a series of linting and testing steps that are common for Python projects. Adjust the steps to fit your project's needs.", "answer": "```yaml # https://pre-commit.com\n# This GitHub Action assumes that the repo contains a valid .pre-commit-config.yaml file.\n---\nname: pre-commit\non:\n  pull_request:\n  push:\n    branches: [master]\n\npermissions:\n  contents: read\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n      - run: pip install pre-commit\n      - run: pre-commit --version\n      - run: pre-commit install\n      - run: pre-commit run --all-files\n```"}
{"id": "63c4a192cbc73931bb1c17ce", "level": "level4", "llm_response": " ```yaml\nname: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - '**.php'\n      - '**.md'\n      - '**.js'\n      - '**.css'\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Checkout Push\n        uses: actions/checkout@v2\n        with:\n          repository: ${{ github.repository }}\n          ref: ${{ github.ref }}\n          path: .\n\n      - name: Install prettier and plugin-php\n        run: composer require --dev php-fig/prettier-php\n\n      - name: Check formatting with Prettier\n        run: npx prettier --write \"**/*.php\"\n\n      - name: Prettify code\n        run: |\n          find . -name '*.php' -exec npx prettier --write {} \\;\n          find . -name '*.md' -exec npx prettier --write {} \\;\n          find . -name '*.js' -exec npx prettier --write {} \\;\n          find . -name '*.css' -exec npx prettier --write {} \\;\n\n      - name: Commit changes\n        run: |\n          git config --global user.name 'GitHub Action'\n          git config --global user.email 'action@github.com'\n          git add -A\n          git commit -m \"Prettify code with Prettier\"\n          git push\n```", "answer": "```yaml name: Format with Prettier\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"**.php\"\n      - \"**.md\"\n      - \"**.js\"\n      - \"**.css\"\n\njobs:\n  prettier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Pull Request\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: actions/checkout@v3\n        with:\n          repository: ${{ github.event.pull_request.head.repo.full_name }}\n          ref: ${{ github.event.pull_request.head.ref }}\n\n      - name: Checkout Push\n        if: ${{ github.event_name != 'pull_request' }}\n        uses: actions/checkout@v3\n\n      - name: Install prettier and plugin-php\n        run: npm install --global prettier @prettier/plugin-php\n\n      - name: Check formatting with Prettier\n        continue-on-error: true\n        run: composer format:check \n\n      - name: Prettify code\n        run: composer format \n\n      - name: Commit changes\n        uses: EndBug/add-and-commit@v9\n        with:\n          message: \"style: Formatted code with Prettier\"\n          default_author: github_actions\n```"}
{"id": "63c49bf26fc19abdf9cbfd17", "level": "level4", "llm_response": " ```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Compile TypeScript\n        run: npm run build\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Build\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18.1.0'\n      - run: yarn install\n      - run: yarn build\n```"}
{"id": "63c4984f1899db58864df21d", "level": "level4", "llm_response": " ```yaml\nname: Rust\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\nenv:\n  NAME: Rust Test\n  CARGO_TERM_COLOR: always\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Setup | Rust | Nightly\n      - name: Install Cargo Make\n      - name: Cache Cargo Files\n      - name: Build\n      - name: Run tests\n      - name: Lint\n```", "answer": "```yaml name: Rust\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  NAME: \"Rust Test\"\n  CARGO_TERM_COLOR: always\n\njobs:\n  build-nd-test:\n    name: Build & Test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup | Rust | Nightly\n        uses: ATiltedTree/setup-rust@v1\n        with:\n          rust-version: nightly\n          components: clippy rustfmt\n\n      - uses: davidB/rust-cargo-make@v1\n        name: Install Cargo Make\n\n      - uses: actions/cache@v3\n        name: Cache Cargo Files\n        with:\n          path: |\n            target/release\n            target/debug\n          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Build\n        run: cargo build --verbose\n      - name: Run tests\n        run: cargo test --verbose\n      - name: Lint\n        run: cargo fmt -- --check\n```"}
{"id": "63c49bb61899db58864f54af", "level": "level4", "llm_response": " ```yaml\nname: Flawfinder\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  flawfinder:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: 'read'\n      contents: 'read'\n      security-events: 'write'\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Scan with Flawfinder\n        run: |\n          # Command to run Flawfinder scanner\n          # Example: flawfinder scan --output scan_results.txt\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: actions/upload-artifact@v2\n        with:\n          name: scan_results.txt\n          path: scan_results.txt\n```", "answer": "```yaml name: Flawfinder\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  flawfinder:\n    name: Flawfinder Checks\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Scan with Flawfinder\n        uses: david-a-wheeler/flawfinder@8e4a779ad59dbfaee5da586aa9210853b701959c\n        with:\n          arguments: '--sarif ./'\n          output: 'flawfinder_results.sarif'\n\n      - name: Upload analysis results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{github.workspace}}/flawfinder_results.sarif\n```"}
{"id": "63c499411e3364807578cc03", "level": "level4", "llm_response": " ```yaml\nname: Upload Production Release (1GP)\non:\n  workflow_call:\n    inputs:\n      packaging-org-auth-url:\n        required: true\n        type: string\n      dev-hub-auth-url:\n        required: true\n        type: string\njobs:\n  upload-production-release-1gp:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger reusable workflow\n        workflow_call:\n          workflows:\n            - name: Production 1GP\n              repository: SFDO-Community/standard-workflows\n              path: .github/workflows/production-1gp.yml\n              secrets:\n                packaging-org-auth-url: ${{ secrets.PACKAGING_ORG_AUTH_URL }}\n                dev-hub-auth-url: ${{ secrets.DEV_HUB_AUTH_URL }}\n```", "answer": "```yaml on:\n  workflow_dispatch: \njobs:\n  upload-production-release-1gp:\n    name: \"Upload Production Release (1GP)\"\n    uses: SFDO-Community/standard-workflows/.github/workflows/production-1gp.yml@main\n    secrets:\n      packaging-org-auth-url: '${{ secrets.PACKAGING_ORG_AUTH_URL }}'\n      dev-hub-auth-url: '${{ secrets.DEV_HUB_AUTH_URL }}'\n```"}
{"id": "63c49db4517fc08c1eefe9e6", "level": "level4", "llm_response": " ```yaml\nname: Failure Help Text\n\non:\n  workflow_run:\n    workflows: ['Build CI']\n    types: [completed]\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request'\n    steps:\n      - name: Post comment to help\n        # Add the necessary steps to post a comment on the pull request\n        # This is a placeholder and needs to be filled with actual commands\n        run: echo \"Posting help comment...\"\n```\n\nPlease note that the `run` command under the `Post comment to help` step is a placeholder. You will need to replace it with the actual commands or scripts that interact with GitHub's API to post a comment on the pull request. This could involve using GitHub Actions secrets and the `github` action to authenticate and post the comment.", "answer": "```yaml # SPDX-FileCopyrightText: 2021 Scott Shawcroft for Adafruit Industries\n#\n# SPDX-License-Identifier: MIT\n\nname: Failure help text\n\non:\n  workflow_run:\n    workflows: [\"Build CI\"]\n    types:\n      - completed\n\njobs:\n  post-help:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request' }}\n    steps:\n    - name: Post comment to help\n      uses: adafruit/circuitpython-action-library-ci-failed@v1\n```"}
{"id": "63c49da71899db58865017eb", "level": "level4", "llm_response": " ```yaml\nname: bundlediff-ios\n\non:\n  pull_request:\n    branches:\n      - onekey\n\njobs:\n  build-ios-head:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    id: build-ios-head\n    steps:\n      - name: ''\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n      - name: yarn-cache\n        run: |\n          # Step to cache yarn dependencies\n      - name: Install Dependency\n        run: |\n          # Step to install dependencies\n      - name: Generate stats.json\n        run: |\n          # Step to generate stats.json\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v2\n        with:\n          name: stats.json\n          path: ${{ steps.generate-stats.outputs.stats-json-path }}\n\n  build-ios-base:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    id: build-ios-base\n    steps:\n      - name: ''\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n      - name: yarn-cache\n        run: |\n          # Step to cache yarn dependencies\n      - name: Install Dependency\n        run: |\n          # Step to install dependencies\n      - name: Generate stats.json\n        run: |\n          # Step to generate stats.json\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v2\n        with:\n          name: stats.json\n          path: ${{ steps.generate-stats.outputs.stats-json-path }}\n\n  compare:\n    needs: [build-ios-base, build-ios-head]\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Compare base & head bundle sizes\n        run: |\n          # Step to compare bundle sizes\n```\n\nNote: The actual commands and details for the steps have been omitted for brevity. You would need to fill in the specific commands and actions required for each step based on your project's needs. The placeholders like `''` should be replaced with the actual names of the steps. The `outputs.stats-json-path` is a hypothetical example to illustrate how you might pass the path of the generated `stats.json` file from one step to another. You will need to define the actual outputs and usage based on your workflow's requirements.", "answer": "```yaml name: bundlediff-ios\n\non:\n  pull_request:\n    branches: [onekey]\n\njobs:\n  # Build current and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-head:\n    name: 'Build ios head'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{github.event.pull_request.head.ref}}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: head-stats\n          path: ./packages/app/stats.json\n\n  # Build base for comparison and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-ios-base:\n    name: 'Build ios base'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.base_ref }}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:ios\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: base-stats\n          path: ./packages/app/stats.json\n\n  # run the action against the stats.json files\n  compare:\n    name: 'Compare base & head bundle sizes'\n    runs-on: ubuntu-latest\n    needs: [build-ios-base, build-ios-head]\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - uses: github/webpack-bundlesize-compare-action@v1.5.0\n        with:\n          title: 'ios bundle diff'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          current-stats-json-path: ./head-stats/stats.json\n          base-stats-json-path: ./base-stats/stats.json\n```"}
{"id": "63c494a58052faa2781ac58c", "level": "level4", "llm_response": " ```yaml\nname: Semantic PR and Commit Messages\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    runs-on: ubuntu-latest\n    workflow_dispatch: false\n    needs: []\n    if: github.event.action != 'closed'\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Trigger Semantic Validation Workflow\n        uses: ./.github/workflows/semantic.yml@main\n        with:\n          repository_token: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml ---\nname: \"Semantic PR and Commit Messages\"\n\non:\n  pull_request:\n    types: [opened, reopened, synchronize, edited]\n\njobs:\n  semantic:\n    uses: influxdata/validate-semantic-github-messages/.github/workflows/semantic.yml@main\n```"}
{"id": "63c49781cbc73931bb180cf0", "level": "level4", "llm_response": " ```yaml\nname: \ud83d\ude4f\ud83c\udffb Lint Test\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run golangci-lint\n        run: |\n          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n          golangci-lint run ./...\n```", "answer": "```yaml name: \ud83d\ude4f\ud83c\udffb Lint Test\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  lint:\n    name: Lint Test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: latest\n          args: --timeout 5m\n          working-directory: .```"}
{"id": "63c49fea1899db588651014e", "level": "level4", "llm_response": " ```yaml\nname: size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    environment:\n      CI_JOB_NUMBER: 1\n    steps:\n      - name: Initial Step\n        run: echo \"Initializing size job\"\n\n      - name: Final Step\n        run: echo \"Calculating size metrics\"\n```", "answer": "```yaml name: size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49ad26fc19abdf9cb8a3b", "level": "level4", "llm_response": " ```yaml\nname: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  configlet:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Call Reusable Workflow\n        workflow_call:\n          workflows:\n            - id: configlet\n              name: exercism/github-actions/.github/workflows/configlet.yml@main\n```", "answer": "```yaml name: Configlet\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  configlet:\n    uses: exercism/github-actions/.github/workflows/configlet.yml@main\n```"}
{"id": "63c49b2ecbc73931bb1988db", "level": "level4", "llm_response": " ```yaml\nname: test\n\non:\n  schedule:\n    - cron: '0 7 * * sun'\n  push:\n    branches:\n      - main\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n  pull_request:\n    paths:\n      - '**.md'\n      - '**.ts'\n      - '**.vim'\n      - '.github/workflows/test.yml'\n      - 'Makefile'\n\nenv:\n  DENOPS_PATH: './'\n  DENO_DIR: '.'\n\njobs:\n  check:\n    runs-on: ${{ matrix.runner }}\n    strategy:\n      matrix:\n        runner: [ubuntu-latest]\n        version: [1.17.1, '1.x']\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: Lint check\n      - name: Format check\n      - name: Type check\n\n  test:\n    runs-on: ${{ matrix.runner }}\n    strategy:\n      matrix:\n        runner: [windows-latest, macos-latest, ubuntu-latest]\n        version: [1.17.1, '1.x']\n        host_version: ['{\"vim\": \"v8.2.3452\", \"nvim\": \"v0.6.0\"}']\n    steps:\n      - name: Cache dependencies\n        uses: actions/cache@v2\n        with:\n          path: |\n            node_modules\n            .deno\n          key: ${{ runner }}-${{ hashFiles('**/package-lock.json') }}\n      - name: Install dependencies\n        run: npm install\n      - name: Check Vim\n        run: |\n          deno run --allow-net --allow-read --allow-env --allow-read-only --allow-write --allow-memory-growth --unstable ./check_vim.ts\n      - name: Check Neovim\n        run: |\n          deno run --allow-net --allow-read --allow-env --allow-read-only --allow-write --allow-memory-growth --unstable ./check_nvim.ts\n      - name: Test\n        run: |\n          deno test --allow-net --allow-read --allow-env --allow-read-only --allow-write --allow-memory-growth\n```\nNote: The placeholder steps (`name: ''`) should be replaced with actual commands or scripts that perform the required actions for the workflow. The `./check_vim.ts` and `./check_nvim.ts` scripts are placeholders for actual Deno scripts that check Vim and Neovim respectively.", "answer": "```yaml name: test\n\nenv:\n  DENOPS_PATH: \"./\"\n  DENO_DIR: \".deno\"\n\non:\n  schedule:\n    - cron: \"0 7 * * 0\"\n  push:\n    branches:\n      - main\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n  pull_request:\n    paths:\n      - \"**.md\"\n      - \"**.ts\"\n      - \"**.vim\"\n      - \".github/workflows/test.yml\"\n      - \"Makefile\"\n\ndefaults:\n  run:\n    shell: bash --noprofile --norc -eo pipefail {0}\n\njobs:\n  check:\n    strategy:\n      matrix:\n        runner:\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - name: Lint check\n        run: make lint\n      - name: Format check\n        run: make fmt-check\n      - name: Type check\n        run: make type-check\n\n  test:\n    strategy:\n      matrix:\n        runner:\n          - windows-latest\n          - macos-latest\n          - ubuntu-latest\n        version:\n          - \"1.17.1\"\n          - \"1.x\"\n        host_version:\n          - vim: \"v8.2.3452\"\n            nvim: \"v0.6.0\"\n    runs-on: ${{ matrix.runner }}\n    steps:\n      - run: git config --global core.autocrlf false\n        if: runner.os == 'Windows'\n      - uses: actions/checkout@v3\n      - uses: denoland/setup-deno@v1\n        with:\n          deno-version: \"${{ matrix.version }}\"\n      - uses: actions/cache@v3\n        id: cache\n        with:\n          path: ${{ env.DENO_DIR }}\n          key: ${{ runner.os }}-deno-${{ matrix.version }}-${{ hashFiles('**/*.ts') }}\n          restore-keys: |\n            ${{ runner.os }}-deno-${{ matrix.version }}-\n            ${{ runner.os }}-deno-\n      - uses: thinca/action-setup-vim@v1\n        id: vim\n        with:\n          vim_type: \"Vim\"\n          vim_version: \"${{ matrix.host_version.vim }}\"\n          download: \"never\"\n      - name: Check Vim\n        run: |\n          echo ${DENOPS_TEST_VIM}\n          ${DENOPS_TEST_VIM} --version\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n      - uses: thinca/action-setup-vim@v1\n        id: nvim\n        with:\n          vim_type: \"Neovim\"\n          vim_version: \"${{ matrix.host_version.nvim }}\"\n      - name: Check Neovim\n        run: |\n          echo ${DENOPS_TEST_NVIM}\n          ${DENOPS_TEST_NVIM} --version\n        env:\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n      - name: Test\n        run: make test\n        env:\n          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable_path }}\n          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable_path }}\n        timeout-minutes: 5\n```"}
{"id": "63c49dc01899db58865021ca", "level": "level4", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n          - macOS-latest\n          - windows-latest\n        rust:\n          - stable\n\n    steps:\n      - name: Setup Rust\n        run: cargo install cargo-audit\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup MUSL\n        run: cargo build --release --target ${{ matrix.os }} --features musl\n\n      - name: Build for Linux\n        if: ${{ matrix.os == 'ubuntu-latest' }}\n        run: cargo build --release --target ${{ matrix.os }} --features musl\n\n      - name: Build for macOS\n        if: ${{ matrix.os == 'macOS-latest' }}\n        run: xcodebuild -project YourProject.xcodeproj -target YourTarget -configuration Release\n\n      - name: Build for Windows\n        if: ${{ matrix.os == 'windows-latest' }}\n        run: cargo build --release --target x86_64-pc-windows-msvc --features musl\n\n      - name: Release\n        run: cargo publish --locked\n```\n\nPlease replace `YourProject.xcodeproj` and `YourTarget` with the actual project and target names for the macOS build step. This YAML file assumes that the Rust project uses Cargo and has a `Cargo.toml` file that specifies the required dependencies and features. The `cargo publish --locked` command assumes that you have already set up a release token in your Cargo.toml file. If not, you'll need to add it and configure it with your GitHub token.", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest, windows-latest]\n        rust: [stable]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - name: Setup Rust\n      uses: hecrj/setup-rust-action@v1\n      with:\n        rust-version: ${{ matrix.rust }}\n    - name: Checkout\n      uses: actions/checkout@v1\n    - name: Setup MUSL\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        rustup target add x86_64-unknown-linux-musl\n        sudo apt-get -qq install musl-tools\n    - name: Build for linux\n      if: matrix.os == 'ubuntu-latest'\n      run: |\n        make release_lnx\n        cargo install --locked cargo-rpm\n        make release_rpm\n    - name: Build for macOS\n      if: matrix.os == 'macOS-latest'\n      run: make release_mac\n    - name: Build for Windows\n      if: matrix.os == 'windows-latest'\n      run: make release_win\n    - name: Release\n      uses: softprops/action-gh-release@v1\n      with:\n        body: '[Changelog](https://github.com/dalance/procs/blob/master/CHANGELOG.md)'\n        files: \"*.zip\\n*.rpm\"\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4970b33b087f6bde2fef6", "level": "level4", "llm_response": " ```yaml\nname: Update Flex Archives\non:\n  workflow_dispatch:\n    inputs:\n      message:\n        description: 'Optional message for the trigger'\n        required: false\njobs:\n  call-flex-update:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Call reusable workflow\n        uses: symfony/recipes/.github/workflows/callable-flex-update-archived.yml@main\n        with:\n          message: ${{ github.event.inputs.message }}\n```", "answer": "```yaml name: Update Flex Archives\n\non: [workflow_dispatch]\n\njobs:\n    call-flex-update:\n        uses: symfony/recipes/.github/workflows/callable-flex-update-archived.yml@main\n```"}
{"id": "63c49fdb517fc08c1ef0c477", "level": "level4", "llm_response": " ```yaml\nname: Release\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  build:\n    name: Build and sign artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n    steps:\n      - name: Checkout repository\n      - name: Set up Python\n        uses: actions/setup-python@v2\n      - name: Build\n      - name: Sign artifacts\n      - name: Generate hashes for provenance\n        id: hash\n        run: |\n          # Commands to generate hashes\n      - name: Upload built packages\n      - name: Upload smoketest-artifacts\n    outputs:\n      hashes: ${{ steps.hash.outputs.hashes }}\n\n  generate-provenance:\n    name: Generate build provenance\n    dependencies:\n      - build\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: write\n      actions: read\n    steps:\n      - name: Call reusable workflow\n        uses: actions/checkout@v2\n        with:\n          path: slsa-framework/slsa-github-generator\n          ref: v1.2.1\n        env:\n          attestation-name: provenance-sigstore-${{ github.event.release.tag_name }}.intoto.jsonl\n          base64-subjects: ${{ needs.build.outputs.hashes }}\n          upload-assets: True\n\n  release-pypi:\n    name: Release to PyPI\n    dependencies:\n      - build\n      - generate-provenance\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: null\n    steps:\n      - name: Download artifacts directories\n      - name: Publish to PyPI\n\n  release-github:\n    name: Release to GitHub\n    dependencies:\n      - build\n      - generate-provenance\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: write\n    steps:\n      - name: Download artifacts directories\n      - name: Upload artifacts to GitHub\n```", "answer": "```yaml name: Release\n\non:\n  release:\n    types:\n      - published\n\njobs:\n  build:\n    name: Build and sign artifacts\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n    outputs:\n      hashes: ${{ steps.hash.outputs.hashes }}\n    steps:\n      - uses: actions/checkout@d171c3b028d844f2bf14e9fdec0c58114451e4bf\n\n      - uses: actions/setup-python@7f80679172b057fc5e90d70d197929d454754a5a\n\n      - name: deps\n        run: python -m pip install -U build\n\n      - name: build\n        run: python -m build\n\n      - name: sign\n        run: |\n          mkdir -p smoketest-artifacts\n\n          # we smoke-test sigstore by installing each of the distributions\n          # we've built in a fresh environment and using each to sign and\n          # verify for itself, using the ambient OIDC identity\n          for dist in dist/*; do\n            dist_base=\"$(basename \"${dist}\")\"\n\n            python -m venv smoketest-env\n\n            ./smoketest-env/bin/python -m pip install \"${dist}\"\n\n            # NOTE: signing artifacts currently go in a separate directory,\n            # to avoid confusing the package uploader (which otherwise tries\n            # to upload them to PyPI and fails). Future versions of twine\n            # and the gh-action-pypi-publish action should support these artifacts.\n            ./smoketest-env/bin/python -m \\\n              sigstore sign \"${dist}\" \\\n              --output-signature smoketest-artifacts/\"${dist_base}.sig\" \\\n              --output-certificate smoketest-artifacts/\"${dist_base}.crt\"\n\n            ./smoketest-env/bin/python -m \\\n              sigstore verify \"${dist}\" \\\n              --cert \"smoketest-artifacts/${dist_base}.crt\" \\\n              --signature \"smoketest-artifacts/${dist_base}.sig\" \\\n              --cert-oidc-issuer https://token.actions.githubusercontent.com\n\n            rm -rf smoketest-env\n          done\n\n      - name: Generate hashes for provenance\n        shell: bash\n        id: hash\n        run: |\n          # sha256sum generates sha256 hash for all artifacts.\n          # base64 -w0 encodes to base64 and outputs on a single line.\n          # sha256sum artifact1 artifact2 ... | base64 -w0\n          echo \"hashes=$(sha256sum ./dist/* | base64 -w0)\" >> $GITHUB_OUTPUT\n\n      - name: Upload built packages\n        uses: actions/upload-artifact@v3\n        with:\n          name: built-packages\n          path: ./dist/\n          if-no-files-found: warn\n\n      - name: Upload smoketest-artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: smoketest-artifacts\n          path: smoketest-artifacts/\n          if-no-files-found: warn\n\n  generate-provenance:\n    needs: [build]\n    name: Generate build provenance\n    permissions:\n      actions: read   # To read the workflow path.\n      id-token: write # To sign the provenance.\n      contents: write # To add assets to a release.\n    # Currently this action needs to be referred by tag. More details at:\n    # https://github.com/slsa-framework/slsa-github-generator#verification-of-provenance\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.1\n    with:\n      attestation-name: provenance-sigstore-${{ github.event.release.tag_name }}.intoto.jsonl\n      base64-subjects: \"${{ needs.build.outputs.hashes }}\"\n      upload-assets: true\n\n  release-pypi:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions: {}\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: publish\n        uses: pypa/gh-action-pypi-publish@717ba43cfbb0387f6ce311b169a825772f54d295\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n          packages_dir: built-packages/\n\n  release-github:\n    needs: [build, generate-provenance]\n    runs-on: ubuntu-latest\n    permissions:\n      # Needed to upload release assets.\n      contents: write\n    steps:\n      - name: Download artifacts diretories # goes to current working directory\n        uses: actions/download-artifact@v3\n\n      - name: Upload artifacts to github\n        # Confusingly, this action also supports updating releases, not\n        # just creating them. This is what we want here, since we've manually\n        # created the release that triggered the action.\n        uses: softprops/action-gh-release@v1\n        with:\n          # smoketest-artifacts/ contains the signatures and certificates.\n          files: |\n            built-packages/*\n            smoketest-artifacts/*\n```"}
{"id": "63c49e1d517fc08c1ef013af", "level": "level4", "llm_response": " ```yaml\nname: Gather Bazel Execution Logs\n\non:\n  workflow_dispatch:\n\njobs:\n  run-a:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version: [25]\n        cache_name: [ci-bazel-cache-analysis]\n    env:\n      BAZEL_LABEL: //deps/rabbit:rabbit_stream_queue_SUITE\n    steps:\n      - name: CHECKOUT REPOSITORY\n      - name: CONFIGURE BAZEL\n      - name: RUN TESTS\n      - name: SAVE EXECUTION LOG BINARY\n    timeout-minutes: 120\n\n  run-b:\n    dependencies:\n      - run-a\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version: [25]\n        cache_name: [ci-bazel-cache-analysis]\n    steps:\n      - name: CHECKOUT REPOSITORY\n      - name: CONFIGURE BAZEL\n      - name: RUN TESTS\n      - name: SAVE EXECUTION LOG BINARY\n    timeout-minutes: 120\n\n  parse-logs:\n    dependencies:\n      - run-a\n      - run-b\n    runs-on: ubuntu-latest\n    steps:\n      - name: CHECKOUT BAZEL\n      - name: MOUNT BAZEL CACHE\n      - name: BUILD EXECLOG PARSER\n      - name: FETCH LOGS\n      - name: PARSE LOGS\n      - name: SAVE PARSED LOGS\n    timeout-minutes: 120\n```", "answer": "```yaml name: Gather Bazel Execution Logs\non:\n  workflow_dispatch:\n    inputs:\n      target:\n        description: 'A bazel label representing the test target'\n        required: true\n        default: '//deps/rabbit:rabbit_stream_queue_SUITE'\njobs:\n  run-a:\n    name: Run A\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-A\n        path: /tmp/exec.log\n  run-b:\n    name: Run B\n    needs: run-a\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        erlang_version:\n        - \"25\"\n        include:\n        - erlang_version: \"25\"\n          cache_name: ci-bazel-cache-analysis\n    timeout-minutes: 120\n    steps:\n    - name: CHECKOUT REPOSITORY\n      uses: actions/checkout@v3\n    - name: CONFIGURE BAZEL\n      run: |\n        cat << EOF >> user.bazelrc\n          build:buildbuddy --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}\n\n          build:buildbuddy --build_metadata=ROLE=CI\n          build:buildbuddy --remote_instance_name=buildbuddy-io/buildbuddy/ci-${{ matrix.cache_name }}\n        EOF\n    - name: RUN TESTS\n      run: |\n        sudo sysctl -w net.ipv4.tcp_keepalive_time=60\n        sudo ethtool -K eth0 tso off gso off gro off tx off rx off lro off\n        bazelisk test ${{ github.event.inputs.target }} \\\n          --config=rbe-${{ matrix.erlang_version }} \\\n          --execution_log_binary_file=/tmp/exec.log\n    - name: SAVE EXECUTION LOG BINARY\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: execution-log-binary-B\n        path: /tmp/exec.log\n  parse-logs:\n    name: Parse Logs\n    needs: [run-a, run-b]\n    runs-on: ubuntu-latest\n    steps:\n    - name: CHECKOUT BAZEL\n      uses: actions/checkout@v3\n      with:\n        repository: bazelbuild/bazel\n        path: bazel\n    - name: MOUNT BAZEL CACHE\n      uses: actions/cache@v3.0.11\n      with:\n        path: \"/home/runner/.cache/bazel\"\n        key: bazel\n    - name: BUILD EXECLOG PARSER\n      working-directory: bazel\n      run: |\n        bazelisk build src/tools/execlog:parser\n    - name: FETCH LOGS\n      uses: actions/download-artifact@v3\n    - name: PARSE LOGS\n      run: |\n        bazel/bazel-bin/src/tools/execlog/parser \\\n          --log_path=./execution-log-binary-A/exec.log \\\n          --log_path=./execution-log-binary-B/exec.log \\\n          --output_path=/tmp/execution-log-binary-A.log.txt \\\n          --output_path=/tmp/execution-log-binary-B.log.txt\n    - name: SAVE PARSED LOGS\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: parsed-logs\n        path: /tmp/execution-log-binary-*.log.txt\n```"}
{"id": "63c4979fb008460c1df1c263", "level": "level4", "llm_response": " ```yaml\nname: CMake-Android\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n\n    steps:\n      - name: ''\n      - name: setup-ndk\n        id: setup-ndk\n        # Commands to setup NDK\n\n      - name: ''\n      - name: Build\n        run: |\n          # Commands to build the project\n```\n\nPlease note that I have left the step names empty as they were not provided in the input. You should replace the empty step names with the actual commands you need to execute in those steps.", "answer": "```yaml name: CMake-Android\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.\n    # You can convert this to a matrix build if you need cross-platform coverage.\n    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix\n    strategy:\n      matrix:\n        os: [ ubuntu-latest ]\n    runs-on: ${{ matrix.os }}\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - uses: nttld/setup-ndk@v1\n      id: setup-ndk\n      with:\n        ndk-version: r23c\n        add-to-path: false\n    - run: echo ${{env.ANDROID_NDK_HOME}}\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n\n        \n   # - name: Configure CMake\n      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.\n      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type\n   #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}\n\n    - name: Build\n      # Build your program with the given configuration\n      run: mkdir ${{github.workspace}}/build; cd ${{github.workspace}}/build; cmake .. -DCMAKE_TOOLCHAIN_FILE=${{env.ANDROID_NDK_HOME}}/build/cmake/android.toolchain.cmake  -DANDROID_ABI=arm64-v8a  -DANDROID_PLATFORM=android-23;make\n      env:\n        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}\n```"}
{"id": "63c495b88052faa2781b3bd6", "level": "level4", "llm_response": " ```yaml\nname: auto-merge\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - name: ''\n```\n\nPlease note that the step name is left empty (`''`). You should replace this with the actual name of the step you want to include in the job, such as `install dependencies`, `build`, `test`, or any other relevant step for your workflow.\n\nHere's an example with a step named `install dependencies`:\n\n```yaml\nname: auto-merge\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - name: Install Dependencies\n        run: npm install\n```\n\nMake sure to customize the step according to your specific needs for the JavaScript project.", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n    branches:\n      - main\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.4\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          target: minor\n```"}
{"id": "63c49cdd6fc19abdf9cc5ae4", "level": "level4", "llm_response": " ```yaml\nname: Dependabot - Recreate - remove label\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n\n    steps:\n      - name: Set GITHUB_TOKEN permissions\n        run: |\n          echo \"::add-credentials repo name::github-token\"\n          echo \"::set-env name=GITHUB_TOKEN::${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Remove Labels\n        run: |\n          # Commands to remove labels from the pull request\n          # Example:\n          # git ls-remote --tags origin && git checkout main\n          # git tag -l | xargs -n 1 git tag -d\n          # git push origin --delete $(git tag -l)\n          # git push origin --tags\n```\n\nPlease note that the actual commands to remove labels will depend on your specific requirements and the structure of your repository. The above example is a placeholder and should be replaced with the appropriate commands. Additionally, the `GITHUB_TOKEN` should be configured in your repository's secrets for this workflow to work.", "answer": "```yaml name: Dependabot - Recreate - remove label.\non:\n  pull_request:\n    types:\n      - synchronize\n\npermissions: read-all\njobs:\n  remove-recreate-label:\n    runs-on: ubuntu-latest\n    # if: ${{ github.event.action == 'synchronize'}}\n    permissions:\n      pull-requests: write\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Remove Labels\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh pr edit --remove-label \"dependabot:recreate\"  ${{ github.event.pull_request.number }}\n```"}
{"id": "63c49d82b008460c1df41798", "level": "level4", "llm_response": " ```yaml\nname: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - '1.x'\n      - '2.x'\n    tags:\n      - '*'\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    if: github.repository == 'Happy-Coding-Clans/vue-easytable'\n    steps:\n      - name: mirror\n        run: |\n          # Add steps for syncing the mirror here\n          echo \"Mirror syncing process started.\"\n```\nThis YAML defines a GitHub Actions workflow with the specified triggers and job structure. The actual syncing commands would need to be added where the echo command is placed.", "answer": "```yaml name: \ud83d\udd00 Sync mirror to Gitee\n\non:\n  push:\n    branches:\n      - master\n      - dev\n      - 1.x\n      - 2.x\n  create:\n\njobs:\n  mirror:\n    runs-on: ubuntu-latest\n    if: github.repository == 'Happy-Coding-Clans/vue-easytable'\n    steps:\n      - name: mirror\n        continue-on-error: true\n        if: github.event_name == 'push' || (github.event_name == 'create' && github.event.ref_type == 'tag')\n        uses: wearerequired/git-mirror-action@v1\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_SSH_PRIVATE_KEY }}\n        with:\n          source-repo: 'git@github.com:Happy-Coding-Clans/vue-easytable.git'\n          destination-repo: 'git@gitee.com:huangshuwei/vue-easytable.git'\n```"}
{"id": "63c4a14033b087f6bde718a8", "level": "level4", "llm_response": " ```yaml\nname: ROCM Docker image build\n\non:\n  workflow_dispatch:\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        rocm_release: ['7.2.r17', '7.2.r20'] # Example release versions, adjust as needed\n\n    steps:\n    - name: Checkout Repository\n      uses: actions/checkout@v2\n\n    - name: Call ROCM Release Workflow\n      uses: ROCmSoftwarePlatform/actions/.github/workflows/rocm-release.yml@main\n      with:\n        rocm_release: ${{ github.event.inputs.rocm_release }}\n        gh_token: ${{ secrets.MIGRAPHX_BOT_TOKEN }}\n```", "answer": "```yaml name: ROCM Docker image build\n\non:\n  workflow_dispatch:\n    inputs:\n      rocm_release:\n        description: ROCm release version\n        required: true\n\njobs:\n  release:\n    uses: ROCmSoftwarePlatform/actions/.github/workflows/rocm-release.yml@main\n    with:\n      rocm_release: ${{ github.event.inputs.rocm_release }}\n    secrets:\n      gh_token: ${{ secrets.MIGRAPHX_BOT_TOKEN }}\n```"}
{"id": "63c4974933b087f6bde31709", "level": "level4", "llm_response": " ```yaml\nname: Greetings\non:\n  pull_request:\n  issues:\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Greeting\n        run: echo \"Hello, this is a greeting for the repository!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Hi \ud83d\ude04, thanks for creating your first issue at Amazing CSS-Effects project!\ud83d\ude80\u26a1. Do read and follow the [Code of Conduct](https://github.com/arpit456jain/Amazing-Css-Effects/blob/master/CODE_OF_CONDUCT.md) while contributing.'\n        pr-message: 'Thank you for your pull request and welcome to our community! We will soon be getting back to you. Your patience will be greatly appreciated!Thanks! \ud83e\udd73'\n\n```"}
{"id": "63c49e391899db58865053ba", "level": "level4", "llm_response": " ```yaml\nname: Semgrep\n\non:\n  pull_request:\n  push:\n    branches:\n      - dev\n      - main\n  schedule:\n    - cron: '0823 * * 1'\n\njobs:\n  Scan:\n    runs-on: ubuntu-latest\n    if: github.actor != 'dependabot[bot]'\n    steps:\n      - name: Set up Docker\n        uses: docker/setup-buildx-action@v1\n      - name: Scan with Semgrep\n        uses: returntocorp/semgrep@v1\n        with:\n          args: '--output-sarif=sarif-results.json'\n      - name: Upload SARIF file\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          files: sarif-results.json\n```", "answer": "```yaml name: Semgrep\n\non:\n  # Scan changed files in PRs, block on new issues only (existing issues ignored)\n  pull_request:\n\n  push:\n    branches: [\"dev\", \"main\"]\n\n  schedule:\n    - cron: '23 20 * * 1'\n\njobs:\n  semgrep:\n    name: Scan\n    runs-on: ubuntu-latest\n    container:\n      image: returntocorp/semgrep\n    # Skip any PR created by dependabot to avoid permission issues\n    if: (github.actor != 'dependabot[bot]')\n    steps:\n      # Fetch project source\n      - uses: actions/checkout@v3\n\n      - run: semgrep scan --sarif --output=semgrep.sarif\n        env:\n          SEMGREP_RULES: >- # more at semgrep.dev/explore\n            p/security-audit\n            p/secrets\n            p/owasp-top-ten\n\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: semgrep.sarif\n        if: always()```"}
{"id": "63c49b8b6fc19abdf9cbd32f", "level": "level4", "llm_response": " ```yaml\nname: Publish to PyPI\n\non:\n  release:\n    types: [published, prereleased]\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@v1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_TOKEN }}\n```\n\nNote:\n- The `Checkout repository` step uses `actions/checkout@v2` to checkout the code into the runner's filesystem.\n- The `Set up Python 3.8` step sets up the Python 3.8 environment using `actions/setup-python@v2`.\n- The `Install dependencies` step upgrades pip and installs the project's dependencies listed in `requirements.txt`.\n- The `Build` step builds the project using `setup.py sdist bdist_wheel`.\n- The `Publish to PyPI` step publishes the built distribution to PyPI using the GitHub Actions `pypa/gh-action-pypi-publish` action.\n- The `PYPI_TOKEN` secret must be set in the GitHub repository's settings under \"Secrets\" for the `Publish to PyPI` step to work.\n- The permissions for the GITHUB_TOKEN are assumed to be correctly set in the GitHub repository settings. The `PYPI_TOKEN` should have the necessary permissions to publish packages to PyPI.", "answer": "```yaml name: Publish to PyPI\n\non:\n  release:\n    types: [released, prereleased]\n\npermissions:\n  contents: read # to fetch code (actions/checkout)\n\njobs:\n  build_and_publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install wheel\n      - name: Build\n        run: python setup.py sdist bdist_wheel\n\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: '__token__'\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"id": "63c49ec7cbc73931bb1afa42", "level": "level4", "llm_response": " ```yaml\nname: Weekly Build\n\non:\n  schedule:\n    - cron: '0 10 * * 0'\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        version: [3.10]\n    steps:\n      - name: ''\n      - name: Set up python ${{ matrix.version }}\n      - name: setup test env\n      - name: run nox darglint\n\n  build_posix:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        version: [3.7, 3.8, 3.9, 3.10]\n    steps:\n      - name: ''\n      - name: Set up python ${{ matrix.version }}\n      - name: get friendly (for nox) python version\n      - name: ensure openssl installed for macos\n      - name: setup test env\n      - name: run nox\n```", "answer": "```yaml name: Weekly Build\n\non:\n  schedule:\n    # weekly at 0300 PST/1000 UTC on Sunday\n    - cron: '0 10 * * 0'\n  workflow_dispatch:\n\njobs:\n  darglint:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 1\n      matrix:\n        os: [ubuntu-latest]\n        version: [\"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox darglint\n        run: python -m nox -s darglint\n\n  build_posix:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      max-parallel: 8\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n        version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: main\n      - name: set up python ${{ matrix.version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.version }}\n      - name: get friendly (for nox) python version\n        # not super friendly looking, but easy way to get major.minor version so we can easily exec only the specific\n        # version we are targeting with nox, while still having versions like 3.9.0a4\n        run: |\n          echo \"FRIENDLY_PYTHON_VERSION=$(python -c \"import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')\")\" >> $GITHUB_ENV\n      - name: ensure openssl installed for macos\n        # openssl missing/being linked incorrectly causes ssh2-python install failures\n        if: matrix.os == 'macos-latest'\n        run: |\n          brew install openssl\n      - name: setup test env\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install --upgrade setuptools wheel\n          python -m pip install nox\n      - name: run nox\n        env:\n          # needed to make the terminal a tty (i think? without this system ssh is super broken)\n          TERM: xterm\n        run: python -m nox -p $FRIENDLY_PYTHON_VERSION -k \"not darglint\"```"}
{"id": "63c498da33b087f6bde3b76e", "level": "level4", "llm_response": " ```yaml\nname: Normalize Composer\n\non:\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.1'\n          extensions: mbstring\n\n      - name: Install Composer Normalizer\n        run: composer require composer-php-normalizer/normalizer\n\n      - name: Normalize the root composer.json file\n        run: composer-php-normalizer:normalize composer.json\n\n      - name: Normalize the packages composer.json files\n        run: composer-php-normalizer:normalize --directory vendor/\n\n      - name: Commit linted files\n        run: |\n          git config --global user.name 'GitHub-Actions'\n          git config --global user.email '<EMAIL>'\n          git add composer.json vendor/\n          git commit -m \"${{ github.event.inputs.message-its || 'Normalize composer.json files' }}\"\n          git push\n```", "answer": "```yaml name: Normalize Composer\n\non:\n  workflow_dispatch:\n    inputs:\n      php:\n        default: \"8.1\"\n        type: string\n        required: false\n      message:\n        default: Normalize composer.json files\n        type: string\n        required: false\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ inputs.php }}\n          extensions: curl, dom, json, libxml, mbstring\n          coverage: none\n\n      - name: Install Composer Normalizer\n        run: |\n          composer global config --no-plugins allow-plugins.ergebnis/composer-normalize true\n          composer global require ergebnis/composer-normalize\n\n      - name: Normalize the root composer.json file\n        run: composer normalize\n\n      - name: Normalize the packages composer.json files\n        run: find src -name \"composer.json\" -print -exec composer normalize {} \\;\n\n      - name: Commit linted files\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: ${{ inputs.message }}\n```"}
{"id": "63c498dfcbc73931bb189e97", "level": "level4", "llm_response": " ```yaml\nname: Arma\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n      - name: Validate SQF\n      - name: Validate Config\n      - name: Check Strings\n      - name: Check for BOM\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n      - name: Lint (sqflint)\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the source code\n      - name: Build using HEMTT\n      - name: Upload Artifact\n```", "answer": "```yaml name: Arma\n\non:\n  push:\n    branches:\n    - master\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Validate SQF\n      run: python3 tools/sqf_validator.py\n    - name: Validate Config\n      run: python3 tools/config_style_checker.py\n    - name: Check Strings\n      run: python3 tools/check_strings.py\n    - name: Check for BOM\n      uses: arma-actions/bom-check@v1\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Lint (sqflint)\n      uses: arma-actions/sqflint@master\n      continue-on-error: true # No failure due to many false-positives\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout the source code\n      uses: actions/checkout@master\n    - name: Build using HEMTT\n      uses: arma-actions/hemtt@master\n      with:\n        command: build --release --ci\n    - name: Upload Artifact\n      uses: actions/upload-artifact@v2-preview\n      with:\n        name: CBA_A3-${{ github.sha }}-nobin\n        path: releases/CBA_A3_*.zip\n```"}
{"id": "63c49cf21842bc13d778706c", "level": "level4", "llm_response": " ```yaml\nname: CodeQL Workflow\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\n\njobs:\n  codeql:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      actions: read\n      security-events: write\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v1\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v1\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: CodeQL Workflow\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 15 * * 6'\npermissions:\n  contents: read\n\njobs:\n  codeql:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 2\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          config-file: ./.github/codeql/codeql-configuration.yml\n          languages: javascript\n\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"id": "63c496d21842bc13d775fae4", "level": "level4", "llm_response": " ```yaml\nname: auto-merge\non: [pull_request]\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - name: Auto-merge\n        # The actual step content would be defined here, such as a script or command\n        # For example:\n        # run: |\n        #   echo \"Auto-merging pull request...\"\n        #   # Additional merge logic would go here\n```\n\nNote: The actual step content (e.g., a script or command) has been commented out as it was not provided in the user's input. You would need to fill in the appropriate commands for your specific use case.", "answer": "```yaml name: auto-merge\n\non:\n  pull_request_target:\n\njobs:\n  auto-merge:\n    runs-on: ubuntu-latest\n    if: github.actor == 'dependabot[bot]'\n    steps:\n      - uses: ahmadnassri/action-dependabot-auto-merge@v2.6\n        with:\n          github-token: ${{ secrets.AUTOMERGE_TOKEN }}\n          command: \"squash and merge\"\n          approve: true\n          target: minor\n```"}
{"id": "63c49cfd1e336480757a4721", "level": "level4", "llm_response": " ```yaml\nname: CI\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: |\n          # Commands to start PostgreSQL\n\n      - name: Install Dependencies\n        run: |\n          # Commands to install Go dependencies\n\n      - name: Create PostgreSQL user and tables\n        run: |\n          # Commands to create PostgreSQL user and tables\n\n      - name: Run Tests\n        run: |\n          # Commands to run Go tests\n\n      - name: Lint\n        run: |\n          # Commands for linting\n\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Vendor SHA\n        run: |\n          # Commands to check Vendor SHA\n\n      - name: Update Dependencies\n        run: |\n          # Commands to update dependencies\n\n      - name: Run Tests\n        run: |\n          # Commands to run Go tests\n```\nNote: Replace the `# Commands` placeholders with the actual shell commands or scripts necessary to perform the specified actions.", "answer": "```yaml name: \"CI\"\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  run-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start PostgreSQL\n        run: sudo service postgresql start\n      - uses: actions/checkout@v3\n      - name: Create PostgreSQL user and tables\n        run: |\n          sudo -u postgres psql -c \"CREATE USER ${USER}\"\n          sudo -u postgres psql -c \"CREATE DATABASE lbitests OWNER ${USER}\"\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#run-tests\n  check-vendorsha:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cachix/install-nix-action@v18\n      - run: nix run .#update-vendorsha -- ./nix/letsblockit.nix --check\n```"}
{"id": "63c49e61736e7f0ed8c679c4", "level": "level4", "llm_response": " ```yaml\nname: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Import GPG key\n        id: import_gpg\n        uses: JamesIves/goreleaser-action@master\n        with:\n          args: --gpg-keys=https://github.com/goreleaser/goreleaser.git/keys.txt\n\n      - name: .\n        run: echo \"This step is intentionally left blank for placeholder purposes.\"\n\n      - name: Run GoReleaser\n        env:\n          GOPROXY: https://proxy.goreleaser.com\n        uses: goreleaser/goreleaser-action@v1\n        with:\n          args: release --rm-dist\n```", "answer": "```yaml name: release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Import GPG key\n        id: import_gpg\n        uses: crazy-max/ghaction-import-gpg@v5\n        env:\n          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          PASSPHRASE: ${{ secrets.PASSPHRASE }}\n      - uses: actions/cache@v3.0.11\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3.2.0\n        with:\n          version: latest\n          args: release --rm-dist\n          key: ${{ secrets.YOUR_PRIVATE_KEY }}\n        env:\n          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"id": "63c4952a7843b61269a05dc3", "level": "level4", "llm_response": " ```yaml\nname: main\n\non:\n  pull_request:\n  push:\n    branches:\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: ''\n      - name: Check changelog\n      - name: Build Docker image\n      - name: Build\n      - name: Smoke tests\n      - name: Upload\n```", "answer": "```yaml name: main\n\non:\n  pull_request:\n  push:\n    branches:\n      # Only build on push for master or dev, otherwise branches pushed for PR\n      # are built twice\n      - master\n      - dev\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Check changelog\n        if: ${{ github.event_name == 'pull_request' }}\n        run: ci/check-changelog \"origin/$GITHUB_BASE_REF\" \"origin/$GITHUB_HEAD_REF\"\n        shell: bash\n\n      - name: Build Docker image\n        run: ci/build-docker-image\n        shell: bash\n\n      - name: Build\n        shell: bash\n        run: ci/docker-build-game SNAPSHOT=1\n        env:\n          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}\n          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}\n          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}\n\n      - name: Smoke tests\n        uses: GabrielBB/xvfb-action@v1\n        with:\n          run: make smoke-tests SNAPSHOT=1\n\n      - name: Upload\n        # Do not upload for pull requests: `make upload` does not work without the upload secrets\n        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}\n        run: make upload SNAPSHOT=1\n        env:\n          UPLOAD_USERNAME: ${{ secrets.UPLOAD_USERNAME }}\n          UPLOAD_PRIVATE_KEY: ${{ secrets.UPLOAD_PRIVATE_KEY }}\n          UPLOAD_HOSTNAME: ${{ secrets.UPLOAD_HOSTNAME }}\n```"}
{"id": "63c49e5c1e336480757ad079", "level": "level4", "llm_response": " ```yaml\nname: Lint Commit Message\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n    pull_request:\n      types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\njobs:\n  lint-commit-message:\n    runs-on: [ self-hosted, ubuntu-latest, x64 ]\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v2\n\n      - name: Lint Commit Message\n        run: |\n          # Commands to lint commit messages\n          echo \"Linting commit messages...\"\n          # Insert linting script or command here\n\n      - name: Notify on Lint Failure\n        if: failure()\n        uses: some/notification-action@v1\n        with:\n          title: \"Lint Failure\"\n          content: \"The commit message linting failed.\"\n```\n\nPlease note that you'll need to replace the placeholder comment `# Insert linting script or command here` with the actual command or script that performs the linting of commit messages in Go. Also, replace `some/notification-action@v1` with the actual notification action you want to use for sending notifications in case of a lint failure.", "answer": "```yaml name: lint commit message\non: [ push, pull_request ]\n\njobs:\n  lint-commit-message:\n    runs-on: [self-hosted, linux, X64]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v4\n        with:\n          configFile: ${{ github.workspace }}/hack/commitlint.config.js\n```"}
{"id": "63c49f6233b087f6bde65d6b", "level": "level4", "llm_response": " ```yaml\nname: HealthChecks KAFKA Preview CD\non:\n  push:\n    tags:\n      - 'preview-kafka-*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_CONFIG: Release\n      VERSION_SUFFIX: '-rc2.${{ github.run_number }}'\n\n    steps:\n      - name: ''\n      - name: Setup .NET\n      - name: Restore\n      - name: Build\n      - name: Pack\n      - name: Publish\n```\n\nPlease note that I have left the first step with an empty name as you did not provide any specific command or action for that step. If you have a command or action you want to execute in that step, please replace the empty string with the appropriate content.", "answer": "```yaml name: HealthChecks KAFKA Preview CD\r\n\r\non:\r\n  push:\r\n    tags:\r\n      - preview-kafka-*\r\n\r\njobs:\r\n  build:\r\n    env:\r\n      BUILD_CONFIG: Release\r\n      VERSION_SUFFIX: -rc2.${{ github.run_number }}\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@v3\r\n    - name: Setup .NET\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: 6.0.x\r\n    - name: Restore\r\n      run: dotnet restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj\r\n    - name: Build\r\n      run: dotnet build --no-restore ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj -c $BUILD_CONFIG\r\n    - name: Pack\r\n      run: dotnet pack --no-build ./src/HealthChecks.Kafka/HealthChecks.Kafka.csproj --version-suffix $VERSION_SUFFIX -c $BUILD_CONFIG -o ./artifacts\r\n    - name: Publish\r\n      run: dotnet nuget push ./artifacts/AspNetCore.HealthChecks.Kafka.*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate\r\n```"}
{"id": "63c49f63b008460c1df4d69b", "level": "level4", "llm_response": " ```yaml\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    runs-on: ubuntu-latest\n    if: !contains(github.event.head_commit.message, '[ci skip]') && !(startsWith(github.event.head_commit.message, 'Increment version to v') && startsWith(github.ref, 'refs/heads/'))\n    steps:\n      - name: Check branch for new commits, and env vars\n        # Step details go here\n\n      - name: Prep changelog file (clear out old lines)\n        # Step details go here\n\n      - name: Generate changelog\n        # Step details go here\n\n      - name: Small fixes\n        # Step details go here\n\n      - name: Diff and consistency check\n        # Step details go here\n\n      - name: Commit\n        # Step details go here\n\n      - name: Merge to Release branch\n        # Step details go here\n```\n\nNote: The placeholder comments `# Step details go here` should be replaced with the actual commands or scripts that you want to execute in each step. This YAML file defines the structure of the workflow, but it is not functional until those details are filled in.", "answer": "```yaml # Copyright \u00a9 2012-2022 jrnl contributors\n# License: https://www.gnu.org/licenses/gpl-3.0.html\n\nname: Changelog\n\non:\n  push:\n    branches:\n      - develop\n    tags:\n      - 'v*'\n\njobs:\n  generate:\n    if: >\n      ! contains(github.event.head_commit.message, '[ci skip]') &&\n      ! (\n        startsWith(github.event.head_commit.message, 'Increment version to v') &&\n        startsWith(github.ref, 'refs/heads/')\n      )\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n\n      - name: Check branch for new commits, and env vars\n        run: |\n          echo \"::group::git fetch origin --tags --force\"\n          git fetch origin --tags --force\n          echo \"::endgroup::\"\n\n          TAG_REGEX='include-all'\n          echo \"::debug::GITHUB_REF: $GITHUB_REF\"\n          BRANCH=\"${GITHUB_REF##*/}\"\n\n          if [[ $GITHUB_REF =~ ^refs/tags/ ]]; then\n            # This is a tag build (i.e. a release)\n            echo '::debug::Release build'\n            if [[ ! $BRANCH =~ ^v[0-9]+(\\.[0-9]+){1,2}(-(alpha|beta)([0-9]+)?)?$ ]]; then\n              echo \"::error::Invalid tag format: ${BRANCH}\"\n              exit 1\n            fi\n\n            RELEASE=1\n            BRANCH=develop\n            git checkout $BRANCH\n\n            # if actual release (not pre), then changelog should exclude prereleases on update\n            prerelease_regex='(alpha|beta)'\n            if [[ ! ${GITHUB_REF##*/} =~ $prerelease_regex ]]; then\n              echo '::debug::Actual release (not a prerelease)'\n              TAG_REGEX=\"$prerelease_regex\"\n              echo \"FULL_RELEASE=true\" >> \"$GITHUB_ENV\"\n            fi\n          fi\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n\n          if [[ \"$(git rev-parse \"origin/$BRANCH\")\" != \"$GITHUB_SHA\" ]]; then\n            # Normal build on a branch (no tag)\n            echo \"::debug::BRANCH: $BRANCH $(git rev-parse origin/$BRANCH)\"\n            echo \"::debug::GITHUB_SHA: $GITHUB_SHA\"\n            echo \"::error::$BRANCH has been updated since build started. Aborting changelog.\"\n            exit 1\n          fi\n\n          SINCE_TAG=$(git tag --sort=-creatordate | grep -Ev \"$TAG_REGEX\" | awk \"NR==$(( 1 + ${RELEASE:-0} ))\")\n\n          echo \"::debug::BRANCH: $BRANCH\"\n          echo \"::debug::TAG_REGEX: $TAG_REGEX\"\n          echo \"::debug::FILENAME: CHANGELOG.md\"\n          echo \"::debug::SINCE_TAG: $SINCE_TAG\"\n\n          {\n          echo \"BRANCH=$BRANCH\"\n          echo \"TAG_REGEX=$TAG_REGEX\"\n          echo \"FILENAME=CHANGELOG.md\"\n          echo \"SINCE_TAG=$SINCE_TAG\"\n          } >> \"$GITHUB_ENV\"\n\n      - name: Prep changelog file (clear out old lines)\n        run: |\n          # delete the top of the changelog up to the correct tag\n          tagline=$(grep -n \"^## \\[${SINCE_TAG}\\]\" \"$FILENAME\" | awk '{print $1}' FS=':' | head -1)\n          echo \"tagline: ${tagline}\"\n\n          if [[ -z $tagline ]]; then\n            echo \"::error::Something is wrong. ${SINCE_TAG} isn't in the changelog.\"\n            exit 1\n          fi\n\n          if [[ $tagline == 1 ]]; then\n            echo \"::error::Something is wrong.\"\n            echo \"::error::The latest release ${SINCE_TAG} is the first line in the changelog,\"\n            echo \"::error::but the h1 '# Changelog' should always be the first line.\"\n            exit 1\n          fi\n\n          sed -i \"1,$(( tagline - 1 ))d\" \"$FILENAME\"\n          # delete generated line (or it will be added multiple times)\n          sed -i '/This Changelog was automatically generated by/d' \"$FILENAME\"\n          # delete trailing empty lines\n          sed -i -e :a -e '/^\\n*$/{$d;N;};/\\n$/ba' \"$FILENAME\"\n\n      - name: Generate changelog\n        uses: heinrichreimer/action-github-changelog-generator@v2.1.1\n        with:\n          # see: https://github.com/heinrichreimer/action-github-changelog-generator\n          repo: jrnl-org/jrnl\n          token: ${{ secrets.JRNL_BOT_TOKEN }}\n          base: CHANGELOG.md\n          addSections: '{\"build\":{\"prefix\":\"**Build:**\",\"labels\":[\"build\"]},\"docs\":{\"prefix\":\"**Documentation:**\",\"labels\":[\"documentation\"]},\"packaging\":{\"prefix\":\"**Packaging:**\",\"labels\":[\"packaging\"]}}'\n          issues: true\n          pullRequests: true\n          issuesWoLabels: false\n          unreleased: true\n          compareLink: true\n          includeLabels: bug,enhancement,documentation,build,packaging,deprecated\n          excludeLabels: stale,wontfix\n          excludeTagsRegex: ${{ env.TAG_REGEX }}\n          sinceTag: ${{ env.SINCE_TAG }}\n          maxIssues: 150\n          releaseUrl: https://pypi.org/project/jrnl/%s/\n          releaseBranch: develop\n          verbose: false\n          author: true\n\n      - name: Small fixes\n        run: |\n          # Change unreleased link to correct url\n          sed -i 's!https://pypi.org/project/jrnl/HEAD/!https://github.com/jrnl-org/jrnl/!' \"$FILENAME\"\n\n      - name: Diff and consistency check\n        run: |\n          git diff\n          if [[ $(grep -c '^# Changelog$' \"$FILENAME\") != 1 ]]; then\n            echo '::error::Something is wrong with the changelog.'\n            exit 1\n          fi\n          SOMETHING_CHANGED=false\n          git diff --exit-code || SOMETHING_CHANGED=true\n          echo \"::debug::SOMETHING_CHANGED: $SOMETHING_CHANGED\"\n          echo \"SOMETHING_CHANGED=$SOMETHING_CHANGED\" >> \"$GITHUB_ENV\"\n\n      - name: Commit\n        if: env.SOMETHING_CHANGED == 'true'\n        run: |\n          git config --global user.name \"${{ secrets.JRNL_BOT_NAME }}\"\n          git config --global user.email \"${{ secrets.JRNL_BOT_EMAIL }}\"\n          git add \"$FILENAME\"\n          git commit -m \"Update changelog [ci skip]\"\n          git push origin \"$BRANCH\"\n\n      - name: Merge to Release branch\n        if: env.FULL_RELEASE == 'true'\n        run: |\n          git fetch --unshallow origin\n          git checkout release\n          git merge --ff-only \"$BRANCH\"\n          git push origin release\n\n```"}
{"id": "63c49d091e336480757a4c12", "level": "level4", "llm_response": " ```yaml\nname: Label sponsors\n\non:\n  pull_request:\n  issues:\n    opened:\n\njobs:\n  is-sponsor-label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: ''\n        run: |\n          # Add your script or command here to label the sponsors\n          echo \"Labeling sponsors for the PR/issue\"\n```\n\nPlease note that I've left a placeholder for the step name and command (`''`) as you did not provide specific details on what the step should do. You'll need to replace the `echo \"Labeling sponsors for the PR/issue\"` line with the actual command or script that labels the sponsors in your repository.", "answer": "```yaml name: Label sponsors\non:\n  pull_request:\n    types: [opened]\n  issues:\n    types: [opened]\njobs:\n  build:\n    name: is-sponsor-label\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JasonEtco/is-sponsor-label-action@v1.2.0\n        with:\n          label: sponsor\n        env:\n          GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}\n```"}
{"id": "63c49ef46fc19abdf9cd2ebc", "level": "level4", "llm_response": " ```yaml\nname: Dummy workflow for conflicts\n\non:\n  pull_request_review:\n    types: [submitted]\n\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Example Step\n        run: echo \"This is a placeholder step for conflict resolution\"\n```", "answer": "```yaml name: Dummy workflow for conflicts\non:\n  pull_request_review:\n    types: [submitted]\njobs:\n  dummy:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"this is a dummy workflow that triggers a workflow_run; it's necessary because otherwise the repo secrets will not be in scope for externally forked pull requests\"\n```"}
{"id": "63c4989c1842bc13d776b509", "level": "level4", "llm_response": " ```yaml\nname: auto-release\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get Merged Pull Request\n        id: get-merged-pull-request\n        # Add the step details here, such as using actions/checkout or similar\n\n      - name: Release Process\n        id: release-process\n        # Add the step details here, such as using actions/create-release or similar\n```\n\nPlease note that the actual steps for `get-merged-pull-request` and `release-process` are not defined in this YAML snippet. You would need to fill in the appropriate actions or scripts that perform the desired tasks within those steps.", "answer": "```yaml name: auto-release\n\non:\n  push:\n    branches:\n      - main\n      - master\n      - production\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      # Get PR from merged commit to master\n      - uses: actions-ecosystem/action-get-merged-pull-request@v1\n        id: get-merged-pull-request\n        with:\n          github_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          publish: ${{ !contains(steps.get-merged-pull-request.outputs.labels, 'no-release') }}\n          prerelease: false\n          config-name: auto-release.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}\n```"}
{"id": "63c496f633b087f6bde2f773", "level": "level4", "llm_response": " ```yaml\nname: Close stale\non:\n  schedule:\n    - cron: '0 1 * * *'\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n```\n\nPlease note that you need to replace the empty string in the `name` field with the actual name of the step or the task that you want to execute. For example:\n\n```yaml\nname: 'Clean up stale resources'\n```\n\nHere's the updated YAML with a placeholder step name:\n\n```yaml\nname: Close stale\non:\n  schedule:\n    - cron: '0 1 * * *'\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clean up stale resources\n```", "answer": "```yaml name: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n  stale:\n    runs-on: 'ubuntu-latest'\n    steps:\n    - uses: 'actions/stale@v6'\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n\n        stale-issue-message: |-\n          This issue is stale because it has been open for 90 days with no\n          activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-issue-label: 'lifecycle/stale'\n        exempt-issue-labels: 'lifecycle/frozen'\n\n        stale-pr-message: |-\n          This Pull Request is stale because it has been open for 90 days with\n          no activity. It will automatically close after 30 more days of\n          inactivity. Keep fresh with the 'lifecycle/frozen' label.\n        stale-pr-label: 'lifecycle/stale'\n        exempt-pr-labels: 'lifecycle/frozen'\n\n        days-before-stale: 90\n        days-before-close: 30\n```"}
{"id": "63c49c16517fc08c1eef4503", "level": "level4", "llm_response": " ```yaml\nname: Comment When Needs More Info Label Added\n\non:\n  issue_comment:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'needs more info'\n    steps:\n      - name: Create comment\n        run: |\n          echo \"A comment has been added to the issue. Please provide more information.\"\n          # Here you can add commands to interact with GitHub API or scripts to automate the commenting process\n```\nThis YAML file defines a GitHub Actions workflow that will trigger when an issue comment is labeled with the name 'needs more info'. It includes one job with a single step to create a comment, which can be expanded with actual commands to interact with the GitHub API.", "answer": "```yaml name: Comment When Needs More Info Label Added\n\non:\n  issues:\n    types: [labeled]\n\njobs:\n  create-comment:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'needs more info'\n    steps:\n      - name: Create comment\n        uses: actions-cool/issues-helper@v3\n        with:\n          actions: 'create-comment'\n          token: ${{ secrets.GITHUB_TOKEN }}\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Hi, ${{ github.event.issue.user.login }}.\n\n            It seems that this issue is a bit vague and lacks some necessary information. \n\n            \u770b\u8d77\u6765\u8fd9\u6761 issue \u63cf\u8ff0\u5f97\u6709\u4e9b\u6a21\u7cca\uff0c\u7f3a\u5c11\u4e00\u4e9b\u5fc5\u8981\u7684\u4fe1\u606f\u3002\n```"}
{"id": "63c49c921e336480757a1c2c", "level": "level4", "llm_response": " ```yaml\nname: vcf2bcf Testing\n\non:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n      - '.github/workflows/vcf2bcf.yml'\n  pull_request:\n    paths:\n      - 'bioconvert/vcf2bcf.py'\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.7', '3.8', '3.9']\n    max_concurrent_runs: 5\n    steps:\n      - name: install graphviz and curl\n      - name: checkout git repo\n      - name: Set up Python ${{ matrix.python-version }}\n      - name: conda\n      - name: Install dependencies conda\n      - name: Install bioconvert with pip\n      - name: Test with pytest\n```", "answer": "```yaml name: vcf2bcf Testing\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n      - dev\n      - refactoring\n    paths:\n      - bioconvert/vcf2bcf.py\n      - .github/workflows/vcf2bcf.yml\n  pull_request:\n    branches-ignore: []\n    paths:\n      - bioconvert/vcf2bcf.py\n  schedule:\n    - cron: '0 0 * * SUN'\n\njobs:\n  build-linux:\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 5\n      matrix:\n        python: [3.7, 3.8, 3.9]\n      fail-fast: false\n\n    steps:\n\n    - name: install graphviz and curl\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y graphviz-dev\n        sudo apt-get install libcurl4-gnutls-dev\n    - name: checkout git repo\n      uses: actions/checkout@v2\n    - name: Set up Python 3.X\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: conda\n      run: |\n        # $CONDA is an environment variable pointing to the root of the miniconda directory\n        echo $CONDA/bin >> $GITHUB_PATH\n    - name: Install dependencies conda\n      run: |\n        conda install -c conda-forge --quiet 'mamba<0.24' python=${{ matrix.python }}\n        mamba install -c conda-forge -c bioconda --quiet -y samtools bedtools bamtools mosdepth pbzip2 pigz dsrc sambamba squizz\n    - name: Install bioconvert with pip\n      run: |\n        pip install -r requirements.txt\n        pip install .[testing]\n    - name: Test with pytest\n      run: |\n        pytest -n 1  --cov-report term --cov=bioconvert.vcf2bcf test/test_vcf2bcf.py\n```"}
{"id": "63c498451842bc13d776928d", "level": "level4", "llm_response": " ```yaml\nname: Auto-merge Dependabot PRs\non:\n  workflow_run:\n    workflows: [Continuous Integration]\n    types: [ completed ]\n\njobs:\n  merge-me:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        run: |\n          # Add commands here to auto-merge Dependabot PRs\n          echo \"Auto-merging Dependabot PRs...\"\n          # Example command (this is a placeholder, replace with actual merge logic)\n          git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*\n          git checkout -b origin/pr/$(git rev-list --max-count=1 origin/pr --sort=-committerdate | cut -d' ' -f1)\n          git merge origin/pr/$(git rev-list --max-count=1 origin/pr --sort=-committerdate | cut -d' ' -f1)\n          git push origin HEAD:refs/heads/origin/pr/$(git rev-list --max-count=1 origin/pr --sort=-committerdate | cut -d' ' -f1)\n```\n\nPlease note that the above YAML file is a template. You will need to replace the placeholder commands with actual logic to auto-merge Dependabot pull requests based on your repository's requirements. The example assumes that you have a branch naming convention that allows you to sort pull requests by the latest commit date and that you want to merge the most recent pull request. Adjust the logic as necessary for your specific workflow.", "answer": "```yaml # See https://github.com/ridedott/merge-me-action/\n# This workflow automates merges from patches sent by Dependabot, and\n# only by dependabot, once the other CI workflows pass\nname: Auto-merge Dependabot PRs\n\non:\n  workflow_run:\n    types:\n      - completed\n    workflows:\n      - \"Continuous Integration\"\n\njobs:\n  merge-me:\n    name: Auto-merge Dependabot PRs\n    runs-on: ubuntu-latest\n    steps:\n      - name: Auto-Merge\n        if: ${{ github.event.workflow_run.conclusion == 'success' }}\n        uses: ridedott/merge-me-action@v2.10.31\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          MERGE_METHOD: MERGE\n```"}
{"id": "63c499ba517fc08c1eee58bc", "level": "level4", "llm_response": " ```yaml\nname: Swift\n\non:\n  push:\n    branches: [ main ]\n    tags: [ '*' ]\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: macOS-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Build\n        run: swift build\n```", "answer": "```yaml name: Swift\n\non: [push]\n\njobs:\n  build:\n\n    runs-on: macOS-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Build\n      run: swift build -v\n```"}
{"id": "63c49dda517fc08c1eeff921", "level": "level4", "llm_response": " ```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '2.6'\n\n      - name: Publish to RubyGems\n        env:\n          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}\n        run: |\n          gem build your_gem.gemspec\n          gem push your_gem-*.gem\n```\n\nPlease note that you will need to replace `your_gem.gemspec` with the actual name of your gemspec file, and ensure that the `RAILS_MASTER_KEY` is set as a secret in your GitHub repository settings. The `gem push` command will push your gem to the RubyGems repository. If you are using a different gem hosting service, you will need to adjust the deployment step accordingly.", "answer": "```yaml name: Ruby Gem\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@master\n    - name: Set up Ruby 2.6\n      uses: actions/setup-ruby@v1\n      with:\n        ruby-version: 2.6.x\n\n    #- name: Publish to GPR\n    #  run: |\n    #    mkdir -p $HOME/.gem\n    #    touch $HOME/.gem/credentials\n    #    chmod 0600 $HOME/.gem/credentials\n    #    printf -- \"---\\n:github: Bearer ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n    #    gem build *.gemspec\n    #    gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n    #  env:\n    #    GEM_HOST_API_KEY: ${{secrets.GITHUB_TOKEN}}\n    #    OWNER: wpscanteam\n\n    - name: Publish to RubyGems\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:rubygems_api_key: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        gem build *.gemspec\n        gem push *.gem\n      env:\n        GEM_HOST_API_KEY: ${{secrets.RUBYGEMS_AUTH_TOKEN}}\n```"}
{"id": "63c4a04933b087f6bde6b99c", "level": "level4", "llm_response": " ```yaml\nname: Magisk\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: ''\n      - name: Copy hosts to magisk dir\n      - name: Zip magisk dir\n      - name: Move bebasid-magisk to releases\n      - name: Get changed files\n        id: changed-files\n      - name: Validating hosts changes, run next command if it is true\n      - name: Push changes\n```", "answer": "```yaml name: Magisk\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n    - name: Copy hosts to magisk dir\n      run: cp releases/hosts dev/magisk/\n    - name: Zip magisk dir\n      run: |\n        cd dev/magisk\n        zip -r bebasid-magisk.zip *\n        ls -l\n    - name: Move bebasid-magisk to releases\n      run: |\n        mv dev/magisk/bebasid-magisk.zip releases/\n        cd releases\n        ls -l\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v10.1\n    - name: Validating hosts changes, run next command if it is true\n      if: contains(steps.changed-files.outputs.modified_files, 'releases/hosts')\n      run: |\n          echo \"hosts file has been modified.\"\n          LAST_COMMIT_MESSAGE=\"$(git log -1 --pretty=\"%s %b\")\"\n          git config --global user.email \"gvoze32@yahoo.com\"\n          git config --global user.name \"zksbot\"\n          cd releases\n          ls -l\n          git add bebasid-magisk.zip\n          git commit -m \"Magisk sync: ${LAST_COMMIT_MESSAGE}\"\n    - name: Push changes\n      uses: ad-m/github-push-action@master\n      with:\n        github_token: ${{ secrets.UPDATE_TOKEN }}\n```"}
{"id": "63c5ae7c6b748c7b1faded89", "level": "level4", "llm_response": " ```yaml\nname: Maven Deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      SONATYPE_USER: ${{ secrets.BUF_SONATYPE_USER }}\n      SONATYPE_PASSWORD: ${{ secrets.BUF_SONATYPE_PASSWORD }}\n      GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME }}\n      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n      MAVEN_OPTS: --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED\n      REF_NAME: ${{ github.ref_name }}\n\n    steps:\n      - name: Set VERSION variable from tag\n        # Step implementation\n\n      - name: Configure GPG signing\n        # Step implementation\n\n      - name: Configure GIT\n        # Step implementation\n\n      - name: Set up JDK\n        # Step implementation\n\n      - name: Update version in pom\n        # Step implementation\n\n      - name: Publish to Maven Packages Apache Maven\n        # Step implementation\n```\nPlease note that the actual implementation of each step is not provided here. You would need to fill in the appropriate commands and scripts for each step based on your project's requirements.", "answer": "```yaml # This workflow will build a package using Maven and then publish it to GitHub packages when a release is created\n## For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path\n\nname: Maven Deploy\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      SONATYPE_USER: ${{secrets.BUF_SONATYPE_USER}}\n      SONATYPE_PASSWORD: ${{secrets.BUF_SONATYPE_PASSWORD}}\n      GPG_KEY_NAME: ${{secrets.GPG_KEY_NAME}}\n      GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}\n      MAVEN_OPTS: \"--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED\"\n      REF_NAME: ${{ github.ref_name }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set VERSION variable from tag\n        run: |\n          VERSION=${{ env.REF_NAME }}\n          echo \"VERSION=${VERSION:1}\" >> $GITHUB_ENV\n\n      - name: 'Configure GPG signing'\n        env:\n          GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n        run: |\n          # https://github.com/keybase/keybase-issues/issues/2798\n          export GPG_TTY=$(tty)\n          # Import gpg keys and warm the passphrase to avoid the gpg\n          # passphrase prompt when initating a deploy\n          # `--pinentry-mode=loopback` could be needed to ensure we\n          # suppress the gpg prompt\n          echo $GPG_KEY | base64 --decode > signing-key\n          gpg --passphrase $GPG_PASSPHRASE --batch --import signing-key\n          shred signing-key\n          \n      - name: Configure GIT\n        run: |\n          git config --global user.email \"envoy-bot@users.noreply.github.com\" \n          git config --global user.name \"envoy-bot\"\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n          server-id: sonatype-nexus-snapshots\n          server-username: ${ env.SONATYPE_USER }\n          server-password: ${ env.SONATYPE_PASSWORD }\n          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}\n          gpg-passphrase: ${ env.GPG_PASSPHRASE }\n\n      - name: Update version in pom\n        working-directory: ${{ github.workspace }}/java\n        run: mvn -B versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false\n\n      - name: Publish to Maven Packages Apache Maven\n        working-directory: ${{ github.workspace }}/java\n        run: |\n          mvn -B -s settings.xml clean deploy \\\n          -Darguments=\"-s settings.xml\" \\\n          -DreleaseVersion=${{ env.VERSION }} \\\n          -DdevelopmentVersion=${{ env.VERSION }}-SNAPSHOT \\\n          -DscmCommentPrefix=\"java release: \"\n        env:\n          MAVEN_USERNAME: ${{ env.SONATYPE_USER }}\n          MAVEN_CENTRAL_TOKEN: ${{ env.SONATYPE_PASSWORD }}\n          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```"}
{"id": "63c49a621e33648075793df8", "level": "level4", "llm_response": " ```yaml\nname: Generate Documentation\non:\n  push:\n    paths-ignore:\n      - 'cmake/**'\n    paths:\n      - 'docs/sphinx/**'\n  pull_request:\n    paths-ignore:\n      - 'cmake/**'\n    paths:\n      - 'docs/sphinx/**'\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Bump Version Number\n        # Assuming there's a script or action to bump version number\n        run: ./bump_version.sh\n\n      - name: Build Documentation\n        # Assuming there's a script or action to build documentation\n        run: ./build_docs.sh\n\n      - name: Deploy Documentation\n        # Assuming there's a script or action to deploy documentation\n        run: ./deploy_docs.sh\n```\n\nPlease note that the placeholders `./bump_version.sh`, `./build_docs.sh`, and `./deploy_docs.sh` should be replaced with the actual scripts or actions that perform the required tasks. The `paths` filters are used to ensure that the workflow runs only when the specified paths are modified in a push or pull request event.", "answer": "```yaml name: Generate Documentation\n\non:\n  push:\n    paths-ignore:\n      - \"cmake/**\"\n  pull_request:\n    paths:\n      - \"docs/sphinx/**\"\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Bump Version Number\n        shell: bash\n        if: github.event_name == 'push'\n        run: |\n          VERTEST=\"\\#define\\sLIBOBS_API_\\w+_VER\\s([0-9]{1,2})\"\n          VER=\"\"\n          MAJOR=\"\"\n          while IFS= read -r l\n          do\n              if [[ $l =~ $VERTEST ]]; then\n                  if [[ $VER = '' ]]; then MAJOR=\"${BASH_REMATCH[1]}\"; else VER+=\".\"; fi\n                  VER+=\"${BASH_REMATCH[1]}\"\n              fi\n          done < \"libobs/obs-config.h\"\n\n          SVER=\"version = '([0-9\\.]+)'\"\n          RVER=\"version = '$VER'\"\n          SREL=\"release = '([0-9\\.]+)'\"\n          RREL=\"release = '$VER'\"\n          SCOPY=\"copyright = '([A-Za-z0-9, ]+)'\"\n          RCOPY=\"copyright = '2017-$(date +\"%Y\"), Hugh Bailey'\"\n          sed -i -E -e \"s/${SVER}/${RVER}/g\" -e \"s/${SREL}/${RREL}/g\" -e \"s/${SCOPY}/${RCOPY}/g\" docs/sphinx/conf.py\n      - uses: totaldebug/sphinx-publish-action@1.2.0\n        with:\n          sphinx_src: 'docs/sphinx'\n          build_only: True\n          target_branch: 'master'\n          target_path: '../home/_build'\n          pre_build_commands: 'pip install -Iv sphinx==5.1.1'\n      - uses: actions/upload-artifact@v3\n        with:\n          name: OBS Studio Documentation (HTML)\n          path: |\n            ${{ runner.temp }}/_github_home/_build\n            !${{ runner.temp }}/_github_home/_build/.doctrees\n```"}
{"id": "63c49ee533b087f6bde62bbb", "level": "level4", "llm_response": " ```yaml\nname: Auto-Close Issues\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Automatically close issues that don't follow the issue template\n        run: |\n          # Add your automation script here to check and close issues\n          echo \"Automating issue closure based on template adherence...\"\n          # Example: Use shell commands or scripts to close issues\n          # For instance, using GitHub API:\n          # github-api --token ${{ secrets.GITHUB_TOKEN }} --repo ${{ github.repository }} --method POST --endpoint issues/close --data '{\"issue_number\": 1}'\n```\n\nPlease note that the actual script for checking and closing issues will need to be implemented according to your specific requirements. The example provided is a placeholder to demonstrate where the logic should be placed. You might need to use GitHub's API or another method to interact with GitHub issues programmatically.", "answer": "```yaml on:\n  issues:\n    types: [opened, edited]\n\njobs:\n  auto_close_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Automatically close issues that don't follow the issue template\n        uses: lucasbento/auto-close-issues@v1.0.2\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-close-message: \"@${issue.user.login}: hello! :wave:\\n\\nThis issue is being automatically closed because it does not follow the issue template.\" # optional property\n          closed-issues-label: \"\ud83d\ude41 Not following issue template\" # optional property```"}
{"id": "63c49ecf1899db5886509168", "level": "level4", "llm_response": " ```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - '**'\n    tags:\n      - 'v*'\n    releases:\n      types: [prereleased, released, drafted]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v2\n\n      - name: Setup python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Setup git config\n        run: |\n          git config --global user.email \"your-email@example.com\"\n          git config --global user.name \"Your Name\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        run: |\n          git config branch.include_admins.protected false\n\n      - name: Deploy\n        run: |\n          # Add deployment script here\n          echo \"Deploying release...\"\n\n      - name: Re-enable \"include administrators\" branch protection\n        run: |\n          git config branch.include_admins.protected true\n```\nNote: You will need to replace `\"your-email@example.com\"` and `\"Your Name\"` with your actual email and name. Additionally, the deployment script in the `Deploy` step should be customized according to your specific deployment process.", "answer": "```yaml name: Release\n\non:\n  release:\n    types: [published]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT_TOKEN }}\n\n      - name: Setup python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: Setup git config\n        run: |\n          git config --global user.name \"hikari-bot\"\n          git config --global user.email \"90276125+hikari-bot[bot]@users.noreply.github.com\"\n\n      - name: Temporarily disable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: false\n\n      - name: Deploy\n        env:\n          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}\n          VERSION: ${{ github.event.release.tag_name }}\n          REF: ${{ github.sha }}\n          GITHUB_REPO_SLUG: ${{ github.repository }}\n          DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}\n          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\n        run: bash scripts/deploy.sh\n\n      - name: Re-enable \"include administrators\" branch protection\n        uses: benjefferies/branch-protection-bot@master\n        if: always()\n        with:\n          access_token: ${{ secrets.PAT_TOKEN }}\n          enforce_admins: true\n```"}
{"id": "63c4966d33b087f6bde2bec0", "level": "level4", "llm_response": " ```yaml\nname: Go\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Set up Go\n        id: go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v2\n        with:\n          path: module\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v2\n      - name: Install GoReleaser\n        run: |\n          go get github.com/go-telepathy/goreleaser\n      - name: Show GoReleaser version\n        run: go-releaser version\n      - name: Build\n        run: go build ./...\n      - name: Quick Test\n        run: go test -short ./...\n      - name: All Test\n        run: go test -v ./...\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v1\n        with:\n          fail_ci_if_error: true\n      - name: Install Venom\n        run: go get github.com/spf13/viper\n      - name: Show Venom version\n        run: viper version\n      - name: Run End to End tests\n        run: go test -v -tags=e2e ./...\n```", "answer": "```yaml name: Go\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    # Run full test once a day\n    - cron: '0 0 * * *'\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-20.04\n    steps:\n      # https://github.com/actions/setup-go\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n        id: go\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v3\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3\n        with:\n          # Required: the version of golangci-lint is required\n          # and must be specified without patch version:\n          # we always use the latest patch version.\n          version: v1.50\n      - name: Install GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          install-only: true\n      - name: Show GoReleaser version\n        run: goreleaser --version\n      - name: Build\n        run: make build\n      - name: Quick Test\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: make test-short\n        if: ${{ github.event_name == 'pull_request' }}\n      - name: All Test\n        env:\n          # Access only to ec2 AMI api in read-only\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}\n          UPDATECLI_GITEA_TOKEN: ${{ secrets.UPDATECLI_GITEA_TOKEN }}\n        run: make test\n        if: ${{ github.event_name == 'schedule' }}\n      # Codecov should only be updated if make test is executed\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        if: ${{ github.event_name == 'schedule' }}\n      # Manage and run your integration tests with efficiency\n      # https://github.com/ovh/venom\n      - name: Install Venom\n        run: |\n          curl -o /usr/local/bin/venom https://github.com/ovh/venom/releases/download/$VENOM_VERSION/venom.linux-amd64 -L\n          sudo chmod +x /usr/local/bin/venom\n          ls -lha /usr/local/bin/venom\n        env:\n          VENOM_VERSION: v1.0.1\n      - name: Show Venom version\n        run: venom version\n      - name: Run End to End tests\n        run: make test-e2e\n        env:\n          IS_TTY: true # https://github.com/ovh/venom#use-venom-in-ci\n          # Access only to ec2 AMI api in read-only\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49c6c517fc08c1eef66d4", "level": "level4", "llm_response": " ```yaml\nname: Run Build with Tests on PR\n\non:\n  pull_request:\n    branches:\n      - develop\n      - master\n\njobs:\n  Build & Test:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.head_ref }}-run-build-with-tests\n      cancel-in-progress: true\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n\n      - name: Execute Gradle Build\n        run: ./gradlew build\n\n      - name: Publish Test Report\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: build/reports/tests\n\n      - name: Delete previous comment of Github Actions Bot\n        if: github.event.pull_request.review.state == 'COMMENTED'\n        run: |\n          git config --global user.name 'Github Actions Bot'\n          git config --global user.email 'actions@github.com'\n          git reset --hard HEAD~1\n          git clean -fdx\n\n      - name: Notify current workflow is succeed\n        if: success()\n        run: echo \"Workflow succeeded\"\n\n      - name: Notify current workflow is failed\n        if: failure()\n        run: echo \"Workflow failed\"\n```", "answer": "```yaml name: Run Build with Tests on PR\n\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n    branches:\n      - develop\n      - master\n\nconcurrency:\n  group: ${{ github.head_ref }}-run-build-with-tests\n  cancel-in-progress: true\n\njobs:\n  build-and-run-unit-test:\n    name: \"Build & Test\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup JDK 8\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: '8.0.345'\n          architecture: x64\n          cache: 'gradle'\n\n      - name: Execute Gradle Build\n        run: ./gradlew clean test --console=plain\n\n      - name: Publish Test Report\n        uses: mikepenz/action-junit-report@v3.5.0\n        if: always()\n        with:\n          report_paths: '**/build/test-results/test/TEST-*.xml'\n          fail_on_failure: true\n          annotate_only: false\n          check_name: Test Report\n\n      - name: Delete previous comment of Github Actions Bot\n        uses: izhangzhihao/delete-comment@master\n        if: always()\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          delete_user_name: github-actions[bot]\n          issue_number: ${{ github.event.number }}\n\n      - name: Notify current workflow is succeed\n        uses: actions/github-script@v6\n        if: success()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u2705 Build & Test workflow succeed \u2705\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n\n      - name: Notify current workflow is failed\n        uses: actions/github-script@v6\n        if: failure()\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            github.rest.issues.createComment({\n              issue_number: ${{ github.event.pull_request.number }},\n              owner: 'naver',\n              repo: 'ngrinder',\n              body: '\u274c Build & Test workflow failed \u274c\\n- [Show details](https://github.com/naver/ngrinder/actions/runs/${{ github.run_id }})'\n            })\n```"}
{"id": "63c49c791842bc13d7783de7", "level": "level4", "llm_response": " ```yaml\nname: scala-steward\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n      - name: Generate token\n        id: generate_token\n        # Add steps for generating token here\n\n      - name: Launch Scala Steward\n        run: |\n          # Add steps to launch Scala Steward here\n```\nNote: You will need to fill in the actual steps for generating the token and launching Scala Steward based on your specific requirements. The above YAML is a template to get you started with your GitHub Actions workflow.", "answer": "```yaml name: scala-steward\non:\n  push:\n    branches: [ master ]\n  schedule:\n  - cron: '0 0 * * *'\n  workflow_dispatch:\njobs:\n  scala-steward:\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    steps:\n    - name: Generate token\n      id: generate_token\n      if: ${{ !github.event.repository.fork }}\n      uses: tibdex/github-app-token@v1\n      with:\n        app_id: 89631\n        private_key: ${{ secrets.SCALIKEJDBC_BOT_KEY }}\n    - name: Launch Scala Steward\n      if: ${{ !github.event.repository.fork }}\n      uses: scala-steward-org/scala-steward-action@v2.26.0\n      with:\n        github-token: ${{ steps.generate_token.outputs.token }}\n        author-email: \"74833019+scalikejdbc-bot[bot]@users.noreply.github.com\"\n        author-name: scalikejdbc-bot[bot]\n```"}
{"id": "63c4a158b008460c1df59cf6", "level": "level4", "llm_response": " ```yaml\nname: Library code size\n\non: [pull_request]\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    environment:\n      CI_JOB_NUMBER: '1'\n\n    steps:\n      - name: Step 1\n        # Step 1 details go here\n\n      - name: Step 2\n        # Step 2 details go here\n```\nNote: In the provided template, the actual commands or scripts for `Step 1` and `Step 2` are not specified. You should replace the comments with the appropriate actions or commands that you want to run in each step.", "answer": "```yaml name: Library code size\non: [pull_request]\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c5aead6b748c7b1fadf7b1", "level": "level4", "llm_response": " ```yaml\nname: Build Ubuntu 20.04 ARM64\n\non:\n  pull_request:\n    paths-ignore:\n      - docs/**\n      - samples/**\n      - **.md\n  push:\n    branches:\n      - master\n      - release/oss-v*\n      - tags:\n          - oss-v*\n    paths-ignore:\n      - docs/**\n      - samples/**\n      - **.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.event_name != 'pull_request'\n    needs: EventStore/EventStore/.github/workflows/build-reusable.yml@d274d7d528800d72cfac3d496dc747fba5208ff3\n    with:\n      os: ubuntu-20.04-arm64\n      arch: arm64\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Call reusable workflow\n        uses: ./\n        with:\n          os: ${{ inputs.os }}\n          arch: ${{ inputs.arch }}\n```", "answer": "```yaml name: Build Ubuntu 20.04 ARM64\non:\n  pull_request:\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n  push:\n    branches:\n      - master\n      - release/oss-v*\n    tags:\n      - oss-v*\n    paths-ignore:\n      - \"docs/**\"\n      - \"samples/**\"\n      - \"**.md\"\n\njobs:\n  build:\n    uses: EventStore/EventStore/.github/workflows/build-reusable.yml@d274d7d528800d72cfac3d496dc747fba5208ff3\n    with:\n      os: ubuntu-20.04-arm64\n      arch: arm64```"}
{"id": "63c4a0956fc19abdf9cdd937", "level": "level4", "llm_response": " ```yaml\nname: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n\nenv:\n  GALAXY_TEST_DBURI: postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.7]\n        marker: [green, red, required]\n        conformance-version: [cwl_conformance_v1_0]\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: postgres\n        ports:\n          - 5432:5432\n    steps:\n      - name: ''\n      - name: ''\n      - name: Get full Python version\n        id: full-python-version\n      - name: Cache pip dir\n        run: |\n          pip install --cache-dir /tmp/pip-cache -r requirements.txt\n      - name: Cache galaxy venv\n        uses: actions/cache@v2\n        with:\n          path: ~/.cache/pyenv/versions/${{ matrix.python-version }}\n          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}\n      - name: Run tests\n        run: |\n          python -m unittest discover tests\n      - name:\n          if: ${{ always() }}\n      - name:\n          if: ${{ failure() }}\n```\nNote: The placeholder `''` in the step names should be replaced with actual step names relevant to the workflow. The above YAML file is a template and requires the actual names of the steps to be defined for a complete and functional workflow.", "answer": "```yaml name: CWL conformance\non:\n  push:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\n  pull_request:\n    paths-ignore:\n      - 'client/**'\n      - 'doc/**'\nenv:\n  GALAXY_TEST_DBURI: 'postgresql://postgres:postgres@localhost:5432/galaxy?client_encoding=utf8'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    name: Test\n    if: ${{ false }}\n    runs-on: ubuntu-latest\n    continue-on-error: ${{ startsWith(matrix.marker, 'red') }}\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: ['3.7']\n        marker: ['green', 'red and required', 'red and not required']\n        conformance-version: ['cwl_conformance_v1_0'] #, 'cwl_conformance_v1_1', 'cwl_conformance_v1_2']\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: postgres\n        ports:\n          - 5432:5432\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          path: 'galaxy root'\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Get full Python version\n        id: full-python-version\n        shell: bash\n        run: echo \"version=$(python -c 'import sys; print(\"-\".join(str(v) for v in sys.version_info))')\" >> $GITHUB_OUTPUT\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Cache galaxy venv\n        uses: actions/cache@v3\n        with:\n          path: 'galaxy root/.venv'\n          key: gxy-venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('galaxy root/requirements.txt') }}\n      - name: Run tests\n        run: ./run_tests.sh --coverage --skip_flakey_fails -cwl lib/galaxy_test/api/cwl -- -m \"${{ matrix.marker }} and ${{ matrix.conformance-version }}\"\n        working-directory: 'galaxy root'\n      - uses: codecov/codecov-action@v3\n        with:\n          flags: cwl-conformance\n          working-directory: 'galaxy root'\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: CWL conformance test results (${{ matrix.python-version }}, ${{ matrix.marker }}, ${{ matrix.conformance-version }})\n          path: 'galaxy root/run_cwl_tests.html'\n```"}
{"id": "63c4a09a33b087f6bde6da70", "level": "level4", "llm_response": " ```yaml\nname: system build\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Nix\n        uses: nixos/nix-action@v1\n\n      - name: Install Dependencies\n        run: nix-build -A default\n\n      - name: Build Application\n        run: nix-build -A default\n\n      - name: Run Flake Checks\n        run: flake8 .\n```", "answer": "```yaml name: 'system build'\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n          - ubuntu-latest\n          - macos-latest\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          # Shallow clones won't work\n          fetch-depth: 0\n      - uses: cachix/install-nix-action@v18\n        with:\n          extra_nix_config: |\n            experimental-features = nix-command flakes\n            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}\n      - uses: cachix/cachix-action@v12\n        with:\n          name: kclejeune\n          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}\n          extraPullNames: nix-community\n      - name: Run Flake Checks\n        run: |\n          nix flake check -v --show-trace\n        timeout-minutes: 240\n```"}
{"id": "63c49fec6fc19abdf9cd94ca", "level": "level4", "llm_response": " ```yaml\nname: Commented Pull Request\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request_comment:\n    types: [created]\n\njobs:\n  pullRequestHandler:\n    runs-on: windows-latest\n    steps:\n      - name: '' # Replace with actual step name\n        run: |\n          # Step instructions go here\n\n      - name: PullRequestHandler\n        run: |\n          # Pull request handling logic goes here\n```\n\nPlease note that the first step is left empty (`''`) as you did not provide any specific instructions for that step. You should replace the placeholder text with the actual commands or scripts that you want to execute in that step.\n\nRemember to also replace the placeholder comments (`# Step instructions go here` and `# Pull request handling logic goes here`) with the actual PowerShell commands or scripts that you intend to run in each step.\n\nThe above YAML configuration defines a GitHub Actions workflow that triggers on the creation of a comment on an issue or pull request and includes a job named `pullRequestHandler` with two placeholder steps.", "answer": "```yaml on:\n  issue_comment:\n    types: [ created ]\nname: Commented Pull Request\njobs:\n  pullRequestHandler:\n    name: PullRequestHandler\n    runs-on: windows-latest\n    steps:\n    - uses: actions/checkout@main\n    - name: PullRequestHandler\n      uses: ScoopInstaller/GithubActions@main\n      if: startsWith(github.event.comment.body, '/verify')\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49d5e736e7f0ed8c6105a", "level": "level4", "llm_response": " ```yaml\nname: Checklist\n\non:\n  pull_request:\n    branches:\n      - main\n    types: [opened, reopened, synchronize, edited, labeled, unlabeled, pulled, pushed]\n\njobs:\n  Test:\n    runs-on: windows-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Verify Status\n        if: !contains(github.event.pull_request.title, 'WIP') &&\n            !github.event.pull_request.draft\n        run:\n          name: Verify Checklist\n          run: |\n            # Commands to verify checklist go here\n```", "answer": "```yaml name: Checklist\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - opened\n      - reopened\n      - ready_for_review\n      - edited\n      - synchronize\npermissions:\n  contents: read\njobs:\n  Test:\n    name: Verify Status\n    runs-on: windows-latest\n    if: |\n      !contains(github.event.pull_request.title, 'WIP') &&\n      !github.event.pull_request.draft\n    defaults:\n      run:\n        shell: pwsh\n    steps:\n      - name: Verify Checklist\n        id: verify_checklist\n        uses: MicrosoftDocs/PowerShell-Docs/.github/actions/verification/checklist/v1@main\n```"}
{"id": "63c49d011e336480757a48d8", "level": "level4", "llm_response": " ```yaml\nname: User-agent updater\non:\n  push:\n    paths:\n      - '**.yml'\n  workflow_dispatch:\n    events:\n      - type: workflow_dispatch\n        inputs:\n          restart_workflow:\n            description: 'Restart User-agent updater workflow'\n            required: false\n  schedule:\n    - cron: '0 0 1 * *'\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update User-Agent\n        run: |\n          # Commands to update the user_agent here\n          echo \"Updating user_agent...\"\n```\n\nNote: The placeholder `echo \"Updating user_agent...\"` should be replaced with the actual commands required to update the user_agent in the C++ application. The `paths` in the `on` section is set to match YAML files, which might be used to trigger the workflow, but you should adjust this according to the actual files you want to monitor for changes.", "answer": "```yaml name: User-agent updater.\n\non:\n  repository_dispatch:\n    types: [\"Restart user_agent_updater workflow.\"]\n  schedule:\n    # At 00:00 on day-of-month 1.\n    - cron: \"0 0 1 * *\"\n  pull_request_target:\n    types: [closed]\n\njobs:\n  User-agent:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: desktop-app/action_code_updater@master\n        with:\n          type: \"user-agent\"\n```"}
{"id": "63c4967033b087f6bde2c007", "level": "level4", "llm_response": " ```yaml\nname: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron: '0 6 * * *'\n\njobs:\n  build:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        build_opts: [emacs-head@26]\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n      GPG: /usr/local/bin/gpg\n    steps:\n      - name: ''\n      - name: Tap Homebrew Emacs Head\n      - name: Install ${{ matrix.build_opts }}\n      - name: Create personal config file from template\n      - name: Create savehist directory\n      - name: Create gnupg Emacs directory\n      - name: Init git submodules\n      - name: Attempting startup...\n```", "answer": "```yaml name: Emacs 26\n\non:\n  push:\n    branches:\n      - master\n      - dev\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  pull_request:\n    paths:\n      - '.github/workflows/emacs-26.yml'\n      - 'conf/**'\n      - 'lib/**'\n      - 'lisp/**'\n      - 'init.el'\n  schedule:\n    - cron:  '0 6 * * *'\n\njobs:\n  build:\n\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        build_opts:\n          # Emacs 26.x\n          - 'emacs-head@26'\n\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n      GPG: '/usr/local/bin/gpg'\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Tap Homebrew Emacs Head\n      run: brew tap daviderestivo/emacs-head\n\n    - name: Install ${{ matrix.build_opts }}\n      run: brew install ${{ matrix.build_opts }}\n\n    - name: Create personal config file from template\n      run: mv personal.el.example personal.el\n\n    - name: Create savehist directory\n      run: mkdir -p ${{ github.workspace }}/savehist\n\n    - name: Create gnupg Emacs directory\n      run: mkdir -p ${{ github.workspace }}/elpa/gnupg\n\n    - name: Init git submodules\n      run: git submodule init && git submodule update && git submodule foreach --recursive git checkout master\n\n    - name: Attempting startup...\n      run: emacs -nw --batch --debug-init --eval='(let\n                                                   ((galactic-emacs-ci t)\n                                                    (debug-on-error (>=  emacs-major-version 26))\n                                                    (initial-buffer-choice \"*scratch*\")\n                                                    (user-emacs-directory default-directory)\n                                                    (user-init-file (expand-file-name \"init.el\")))\n                                                   (setq url-show-status nil)\n                                                   (package-initialize)\n                                                   (load-file user-init-file)\n                                                   (message \"... startup successful!\"))'\n```"}
{"id": "63c4985733b087f6bde383d5", "level": "level4", "llm_response": " ```yaml\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *' # at 12:00 am on day 1 of the month (january)\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        run: git checkout main\n      - name: Validate YAML files\n        run: |\n          # Commands to validate YAML files\n\n  ValidateLinks:\n    dependencies:\n      - ValidateYAML\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        run: git checkout main\n      - name: Set up Ruby 2.6\n        run: |\n          # Commands to set up Ruby 2.6\n      - name: file-diff\n        run: |\n          # Commands for file diff\n      - name: Validate Links\n        run: |\n          # Commands to validate links\n\n  Main:\n    dependencies:\n      - ValidateYAML\n      - ValidateLinks\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        run: git checkout main\n      - name: Set up Python\n        run: |\n          # Commands to set up Python\n      - name: Install dependencies\n        run: |\n          # Commands to install dependencies\n      - name: Update README\n        run: |\n          # Commands to update README\n      - name: Commit and push on changes\n        run: |\n          # Commands to commit and push changes\n\n  UpdateContributors:\n    dependencies:\n      - ValidateYAML\n      - ValidateLinks\n      - Main\n    runs-on: ubuntu-latest\n    steps:\n      - name: Git checkout\n        run: git checkout main\n      - name:\n          # Commands for updating contributors\n```", "answer": "```yaml ---\nname: Update README\n\non:\n  push:\n    branches:\n      - main\n      - master\n    paths:\n      - 'participants/**/*.yml'\n      - 'update_readme.py'\n  schedule:\n    - cron: '0 0 1 1 *'\n  workflow_dispatch:\n\njobs:\n  ValidateYAML:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Validate YAML files\n        uses: SoftCreatR/validate-yaml-schema@v2.0.0\n\n  ValidateLinks:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Ruby 2.6\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.6\n\n      - id: file-diff\n        uses: lots0logs/gh-action-get-changed-files@2.1.4\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Validate Links\n        run: |\n          FILELIST=\"\"\n\n          for FILENAME in $(jq '.[]' $HOME/files.json); do\n            FILENAME=\"${FILENAME:1}\"\n            FILENAME=\"${FILENAME::-1}\"\n\n            if [ -f \"$FILENAME\" ] && [[ $FILENAME == *\"participants\"* ]] && [ \"${FILENAME: -4}\" == \".yml\" ]; then\n              FILELIST+=\"$FILENAME,\"\n            else\n              echo \"- Skipped $FILENAME\"\n            fi\n          done\n\n          if [ -n \"$FILELIST\" ]; then\n            gem install awesome_bot\n            awesome_bot --files \"$FILELIST\" --allow-dupe --allow-redirect --skip-save-results\n          else\n            echo \"Nothing to do.\"\n          fi\n\n  Main:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: python -m pip install -r requirements.txt\n\n      - name: Update README\n        run: python update_readme.py\n\n      - name: Commit and push on changes\n        run: |-\n          git add .\n          git diff\n          git config --global user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"github-actions[bot]\"\n          git commit -m \"Updated README\" -a || echo \"No changes to commit\"\n          git push\n\n  UpdateContributors:\n    runs-on: ubuntu-latest\n    needs: [ValidateYAML, ValidateLinks, Main]\n\n    steps:\n      - name: Git checkout\n        uses: actions/checkout@v3\n\n      - uses: BobAnkh/add-contributors@v0.2.2\n        with:\n          REPO_NAME: 'benbarth/hacktoberfest-swag'\n          CONTRIBUTOR: '## Contributors \u2728'\n          ACCESS_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          IGNORED_CONTRIBUTORS: 'Ben Barth,Sascha Greuel,Chandler Weiner'\n```"}
{"id": "63c49f6eb008460c1df4db9b", "level": "level4", "llm_response": " ```yaml\nname: docs\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Step 1'\n        # Step 1 details go here\n\n      - name: 'Step 2'\n        # Step 2 details go here\n\n      - name: 'Step 3'\n        # Step 3 details go here\n\n      - name: 'Step 4'\n        # Step 4 details go here\n```\n\nNote: The placeholder comments (`# Step X details go here`) need to be replaced with the actual commands or scripts that will be executed in each step. For example, you might have steps that involve checking out the code, building the documentation, deploying to a server, etc.", "answer": "```yaml name: docs\non:\n  push:\n    branches:\n      - master\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c4a10f1e336480757bde95", "level": "level4", "llm_response": " ```yaml\nname: test\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '*.md'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-22.04]\n        nim: [1.6.0, 1.6.x, stable]\n\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: Setup dependencies\n      - name: Setup config.nims\n      - name: ''\n```\n\nPlease note that the placeholder names for the steps (e.g., `''`) should be replaced with actual step names relevant to the build process for the Nim language. The above YAML is a template and requires the specific commands or actions to be executed in each step.", "answer": "```yaml name: test\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n  pull_request:\n    paths-ignore:\n      - 'README**'\n      - '**.md'\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os:\n          - ubuntu-22.04\n          # - windows-latest\n          # - macOS-latest\n        nim:\n          - '1.6.0'\n          - '1.6.x'\n          - 'stable'\n    steps:\n      - uses: actions/checkout@v3\n      - uses: jiro4989/setup-nim-action@v1\n        with:\n          nim-version: ${{ matrix.nim }}\n      - run: nimble install -Y\n      - name: Setup dependencies\n        run: |\n          sudo apt update -y\n          sudo apt install -y libgtk-4-dev\n      - name: Setup config.nims\n        run: |\n          # For referencing latest source code\n          echo 'switch(\"path\", \"$projectDir/..\")' > examples/config.nims\n      - run: nimble examples\n```"}
{"id": "63c49ebb736e7f0ed8c69a9f", "level": "level4", "llm_response": " ```yaml\nname: Build-images\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - images/linkerd-Dockerfile\n      - .github/workflows/container-images.yml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Build linkerd\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: images/linkerd-Dockerfile\n          push: true\n          tags: user/linkerd:latest\n```", "answer": "```yaml name: Build-images\n\non:\n  push:\n    branches: [ main ]\n    paths:\n    - 'images/linkerd-Dockerfile'\n    - '.github/workflows/container-images.yml' # in case we change the versions below\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.CFCIBOT_DOCKERHUB_USERNAME }}\n          password: ${{ secrets.CFCIBOT_DOCKERHUB_PASSWORD }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Build linkerd\n        id: docker_build\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          file: images/linkerd-Dockerfile\n          tags: splatform/epinio-linkerd:2.11.1\n          build-args: |\n            LINKERD_VERSION=stable-2.11.1\n            LINKERD_CHECKSUM=96c08570b6f6ad40ef1e6aa970959c9c5541e36c85477ee9843b85b8fdcc54ea\n            KUBECTL_VERSION=v1.23.0\n            KUBECTL_CHECKSUM=2d0f5ba6faa787878b642c151ccb2c3390ce4c1e6c8e2b59568b3869ba407c4f\n```"}
{"id": "63c495138052faa2781af503", "level": "level4", "llm_response": " ```yaml\nname: Go Workflow\n\non:\n  push:\n    branches:\n      - master\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch:\n\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Initialize\n        run: echo \"Initializing...\"\n\n      - name: Build\n        run: go build ./...\n\n      - name: Test\n        run: go test ./...\n\n      - name: Deploy\n        run: echo \"Deploying...\"\n```", "answer": "```yaml on:\n  push:\n    branches: [ master ]\n  schedule:\n    - cron: '*/5 * * * *'\n  workflow_dispatch: # Enables on-demand/manual triggering\njobs:\n  job:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n      - run: |\n          go get github.com/aws/aws-sdk-go\n          go mod tidy\n          cd tools/provider-schema\n          terraform init -upgrade\n          terraform providers schema -json > schema.json\n          cd ../..\n          git submodule update --remote\n          go generate ./...\n      - uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: |\n            autogenerated maintenance\n          title: autogenerated maintenance\n          delete-branch: true\n          body: |\n            If tests are stuck on https://github.com/peter-evans/create-pull-request/issues/48:\n            [\"Manually close pull requests and immediately reopen them. This will enable `on: pull_request` workflows to run and be added as checks.\"](https://github.com/peter-evans/create-pull-request/blob/master/docs/concepts-guidelines.md#triggering-further-workflow-runs)\n```"}
{"id": "63c49f7d1899db588650d6be", "level": "level4", "llm_response": " ```yaml\nname: size\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  size:\n    runs-on: ubuntu-latest\n    environment:\n      CI_JOB_NUMBER: 1\n    steps:\n      - name: ''\n      - name: ''\n```\n\nPlease note that you should replace the placeholder text `''` with the actual names of the steps you want to include in your workflow. Without specific step names or descriptions, the placeholders cannot be filled in.", "answer": "```yaml name: 'size'\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f6a1842bc13d7796f76", "level": "level4", "llm_response": " ```yaml\nname: Invalidations\non: [pull_request]\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  evaluate:\n    runs-on: ubuntu-latest\n    if: github.base_ref == github.event.repository.default_branch\n    steps:\n      - name: ''\n      - name: ''\n      - name: ''\n      - name: invs_pr\n        id: invs_pr\n      - name: ''\n      - name: invs_default\n        id: invs_default\n      - name: Report invalidation counts\n      - name: Check if the PR does increase number of invalidations\n```\n\nNote: The placeholder names for the steps (e.g., ``, ``, `invs_pr`, etc.) need to be replaced with actual step names relevant to the workflow's purpose. The above YAML structure provides the required workflow configuration based on the provided details.", "answer": "```yaml name: Invalidations\n\non:\n  pull_request:\n\nconcurrency:\n  # Skip intermediate builds: always.\n  # Cancel intermediate builds: always.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  evaluate:\n    # Only run on PRs to the default branch.\n    # In the PR trigger above branches can be specified only explicitly whereas this check should work for master, main, or any other default branch\n    if: github.base_ref == github.event.repository.default_branch\n    runs-on: ubuntu-latest\n    steps:\n    - uses: julia-actions/setup-julia@v1\n      with:\n        version: '1'\n    - uses: actions/checkout@v3\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_pr\n\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.repository.default_branch }}\n    - uses: julia-actions/julia-buildpkg@v1\n    - uses: julia-actions/julia-invalidations@v1\n      id: invs_default\n    \n    - name: Report invalidation counts\n      run: |\n        echo \"Invalidations on default branch: ${{ steps.invs_default.outputs.total }} (${{ steps.invs_default.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n        echo \"This branch: ${{ steps.invs_pr.outputs.total }} (${{ steps.invs_pr.outputs.deps }} via deps)\" >> $GITHUB_STEP_SUMMARY\n    - name: Check if the PR does increase number of invalidations\n      if: steps.invs_pr.outputs.total > steps.invs_default.outputs.total\n      run: exit 1\n```"}
{"id": "63c4944f7843b61269a005f4", "level": "level4", "llm_response": " ```yaml\nname: Release GitHub\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  create-github-release:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    env:\n      RELEASE_BRANCH: ${{ github.ref }}\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Create GitHub Release and Git tag\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git fetch --tags --force\n          git checkout ${{ env.RELEASE_BRANCH }}\n          git tag -a v$(git describe --tags --abbrev=0) -m \"Release ${{ env.RELEASE_BRANCH }}\"\n          git push origin ${{ env.RELEASE_BRANCH }}\n          git push origin --tags\n```", "answer": "```yaml name: Release GitHub\n\non:\n  push:\n    branches: [release/*]\n\njobs:\n  create-github-release:\n    name: Create GitHub Release and Git tag\n    runs-on: ubuntu-latest\n    environment: Release\n    permissions:\n      contents: write\n    steps:\n      - uses: actions/checkout@v3\n      - uses: cucumber/action-create-github-release@v1.1.0\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e016fc19abdf9ccce72", "level": "level4", "llm_response": " ```yaml\nname: ci\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n    repo: <your-repo-name>\n    pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        pg:\n          - postgres:9.5-alpine\n          - postgres:9.6-alpine\n          - postgres:10-alpine\n          - postgres:11-alpine\n          - postgres:12-alpine\n          - postgres:13-alpine\n    env:\n      CI: 'true'\n      PGHOST: localhost\n      PGPORT: 5432\n      PGUSER: postgres\n      PGPASSWORD: postgres\n\n    services:\n      postgres:\n        image: ${{ matrix.pg }}\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n        ports:\n          - 5432:5432\n\n    steps:\n      - name: Set up PostgreSQL\n        run: echo \"Setting up PostgreSQL service\"\n\n      - name: Run tests\n        run: echo \"Running tests\"\n\n      - name: Run tests no check\n        run: echo \"Running tests without checks\"\n```\n\nPlease replace `<your-repo-name>` with the actual name of your GitHub repository. Additionally, adjust the `push` event branches and tags as needed for your workflow.", "answer": "```yaml name: ci\n\non: [push, pull_request]\n\nenv:\n  CI: true\n  PGHOST: localhost\n  PGPORT: 5432\n  PGUSER: postgres\n  PGPASSWORD: postgres\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: ${{ matrix.pg }}\n        env:\n          POSTGRES_PASSWORD: postgres\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n\n    strategy:\n      matrix:\n        pg: [\"postgres:9.5-alpine\", \"postgres:9.6-alpine\", \"postgres:10-alpine\", \"postgres:11-alpine\", \"postgres:12-alpine\", \"postgres:13-alpine\"]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run tests\n        run: |\n          make run_test\n\n      - name: Run tests no check\n        run: |\n          make run_test_nochecks\n```"}
{"id": "63c49bae6fc19abdf9cbe18c", "level": "level4", "llm_response": " ```yaml\nname: Python tests\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/python-tests.yaml'\n      - '**/*.py'\n      - 'requirements.txt'\n      - 'requirements-dev.txt'\n      - 'setup.cfg'\n      - 'Dockerfile'\n  push:\n    branches:\n      - main\n\njobs:\n  run-tests-sqlite:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    env:\n      PY_COLORS: 1\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [3.7, 3.8, 3.9, 3.10]\n        pytest-options: [--exclude-services, --only-services]\n        lower-bound-requirements: ['true']\n        build-docker-images: ['true']\n    steps:\n      - name: Display current test matrix\n      - name: ''\n      - name: Set up Docker Buildx\n      - name: Set up Python ${{ matrix.python-version }}\n      - name: Pin requirements to lower bounds\n      - name: Build test image\n      - name: Test Docker image\n      - name: Build Conda flavored test image\n      - name: Test Conda flavored Docker image\n      - name: Install packages\n      - name: Run tests\n\n  run-tests-postgres:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    env:\n      PY_COLORS: 1\n    services:\n      postgres:\n        image: postgres:13\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9, 3.10]\n        pytest-options: ['--exclude-services']\n    steps:\n      - name: ''\n      - name: Set up Python ${{ matrix.python-version }}\n      - name: Install packages\n      - name: Run tests\n```", "answer": "```yaml name: Python tests\n\nenv:\n  # enable colored output\n  # https://github.com/pytest-dev/pytest/issues/7443\n  PY_COLORS: 1\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/python-tests.yaml\n      - \"**/*.py\"\n      - requirements.txt\n      - requirements-dev.txt\n      - setup.cfg\n      - Dockerfile\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\n# Limit concurrency by workflow/branch combination.\n#\n# For pull request builds, pushing additional changes to the\n# branch will cancel prior in-progress and pending builds.\n#\n# For builds triggered on a branch push, additional changes\n# will wait for prior builds to complete before starting.\n#\n# https://docs.github.com/en/actions/using-jobs/using-concurrency\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.event_name == 'pull_request' }}\n\njobs:\n  run-tests-sqlite:\n    name: Test with SQLite\n\n    strategy:\n      matrix:\n        os:\n          - ubuntu-latest\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n          - \"--only-services\"\n\n        include:\n          # Run 3.7 tests with lower bound pins\n          - python-version: \"3.7\"\n            lower-bound-requirements: true\n\n          # Include Docker image builds on the service test run, and disallow the test\n          # suite from building images automaticlly in fixtures\n          - pytest-options: \"--only-services\"\n            build-docker-images: true\n\n      fail-fast: false\n\n    runs-on: ${{ matrix.os }}\n    timeout-minutes: 45\n\n    steps:\n      - name: Display current test matrix\n        run: echo '${{ toJSON(matrix) }}'\n\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Set up Docker Buildx\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/setup-buildx-action@v2\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Pin requirements to lower bounds\n        if: ${{ matrix.lower-bound-requirements }}\n        # Creates lower bound files then replaces the input files so we can do a normal install\n        run: |\n          ./scripts/generate-lower-bounds.py requirements.txt > requirements-lower.txt\n          ./scripts/generate-lower-bounds.py requirements-dev.txt > requirements-dev-lower.txt\n          mv requirements-lower.txt requirements.txt\n          mv requirements-dev-lower.txt requirements-dev.txt\n\n      - name: Build test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          # TODO: We do not need the UI in these tests and we may want to add a build-arg to disable building it\n          #       so that CI test runs are faster\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}\n          outputs: type=docker,dest=/tmp/image.tar\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n      - name: Test Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }} prefect version\n\n      - name: Build Conda flavored test image\n        if: ${{ matrix.build-docker-images }}\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          build-args: |\n            PYTHON_VERSION=${{ matrix.python-version }}\n            BASE_IMAGE=prefect-conda\n            PREFECT_EXTRAS=[dev]\n          tags: prefecthq/prefect:dev-python${{ matrix.python-version }}-conda\n          outputs: type=docker,dest=/tmp/image-conda.tar\n          cache-from: type=gha\n          # We do not cache Conda image layers because they very big and slow to upload\n          # cache-to: type=gha,mode=max\n\n      - name: Test Conda flavored Docker image\n        if: ${{ matrix.build-docker-images }}\n        run: |\n          docker load --input /tmp/image-conda.tar\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda prefect version\n          docker run --rm prefecthq/prefect:dev-python${{ matrix.python-version }}-conda conda --version\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          # If using not using lower bounds, upgrade eagerly to get the latest versions despite caching\n          pip install ${{ ! matrix.lower-bound-requirements && '--upgrade --upgrade-strategy eager' || ''}} -e .[dev]\n\n      - name: Run tests\n        run: |\n          # Parallelize tests by scope to reduce expensive service fixture duplication\n          # Do not allow the test suite to build images, as we want the prebuilt images to be tested\n          # Do not run Kubernetes service tests, we do not have a cluster available\n          pytest tests --numprocesses auto --dist loadscope --disable-docker-image-builds --exclude-service kubernetes --durations=25 ${{ matrix.pytest-options }}\n\n  run-tests-postgres:\n    name: Test with Postgres\n\n    strategy:\n      matrix:\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n        pytest-options:\n          - \"--exclude-services\"\n\n      fail-fast: false\n\n    runs-on: ubuntu-latest\n\n    # TODO: Consider moving this from a service into a normal docker command\n    #       so we can include it in the sqlite python test matrix instead of\n    #       maintaining a separate workflow\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_USER: prefect\n          POSTGRES_PASSWORD: prefect\n          POSTGRES_DB: orion\n          LANG: 'C.UTF-8'\n          LANGUAGE: 'C.UTF-8'\n          LC_ALL: 'C.UTF-8'\n          LC_COLLATE: 'C.UTF-8'\n          LC_CTYPE: 'C.UTF-8'\n        ports:\n          - 5432:5432\n        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5\n\n    timeout-minutes: 30\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          cache: \"pip\"\n          cache-dependency-path: \"requirements*.txt\"\n\n      - name: Install packages\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade --upgrade-strategy eager -e .[dev]\n\n      - name: Run tests\n        env:\n          PREFECT_ORION_DATABASE_CONNECTION_URL: \"postgresql+asyncpg://prefect:prefect@localhost/orion\"\n        run: |\n          pytest tests --numprocesses auto --dist loadscope ${{ matrix.pytest-options }}\n```"}
{"id": "63c49f811899db588650d878", "level": "level4", "llm_response": " ```yaml\nname: coverity-scan\n\non:\n  schedule:\n    - cron: '0 0 * * *' # Trigger at 12:00 am every day\n  workflow_dispatch:\n\njobs:\n  coverity-linux:\n    runs-on: ubuntu-latest\n    if: github.repository_owner == 'exult'\n    env:\n      TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n      EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n      SHA1: ${{ github.sha }}\n      FILE: exult-ubuntu-gcc.tgz\n      PROJ: exult/exult\n\n    steps:\n      - name: Activity check\n        run: echo \"Checking for activity...\"\n\n      - name: Install dependencies\n        run: echo \"Installing dependencies...\"\n\n      - name: Download Coverity Build Tool\n        run: echo \"Downloading Coverity Build Tool...\"\n\n      - name: Checkout code\n        run: echo \"Checking out code...\"\n\n      - name: Run autogen\n        run: echo \"Running autogen...\"\n\n      - name: Configure\n        run: echo \"Configuring...\"\n\n      - name: Build with cov-build\n        run: echo \"Building with cov-build...\"\n\n      - name: Submit the result to Coverity Scan\n        run: echo \"Submitting result to Coverity Scan...\"\n```", "answer": "```yaml name: coverity-scan\n\non:\n  schedule:\n    - cron: \"0 00 * * *\" # Daily at 00:00 UTC\n  workflow_dispatch:\n\nenv:\n  TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}\n  EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}\n  SHA1: ${{ github.sha }}\n  FILE: exult-ubuntu-gcc.tgz\n  PROJ: exult/exult\n\njobs:\n  coverity-linux:\n    if: ${{ github.repository_owner == 'exult' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Activity check\n        run: |\n          DATEUTC=$(curl -sL https://api.github.com/repos/exult/exult/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')\n          TIMESTAMP=$(date --utc -d \"$DATEUTC\" +%s)\n          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))\n          if [ \"${{ github.event_name }}\" == \"workflow_dispatch\" ]; then\n            echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n          else\n            if [ $DAYS -gt 0 ]; then\n              echo EXULT_REPO_ALIVE=false >> $GITHUB_ENV\n            else\n              echo EXULT_REPO_ALIVE=true >> $GITHUB_ENV\n            fi\n          fi\n      - name: Install dependencies\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          sudo apt-fast update\n          sudo apt-fast install -y \\\n          zlib1g-dev libogg-dev libvorbis-dev libasound2-dev libfluidsynth-dev libsdl2-dev libpng-dev libfreetype6-dev libgtk2.0-dev libgtk-3-dev \\\n          libgdk-pixbuf2.0-dev libxml2-dev bison flex timidity libgimp2.0-dev\n      - name: Download Coverity Build Tool\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          wget -q https://scan.coverity.com/download/Linux --post-data \"token=$TOKEN&project=$PROJ\" -O /tmp/cov-analysis-linux64.tar.gz\n          mkdir /tmp/cov-analysis-linux64\n          tar xzf /tmp/cov-analysis-linux64.tar.gz --strip 1 -C /tmp/cov-analysis-linux64\n      - name: Checkout code\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        uses: actions/checkout@master\n      - name: Run autogen\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          chmod a+x ./autogen.sh\n          ./autogen.sh\n      - name: Configure\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          ./configure --with-debug=extreme --enable-exult-studio --enable-exult-studio-support --enable-compiler --enable-gimp-plugin \\\n            --enable-zip-support --enable-shared --enable-midi-sfx --enable-gnome-shp-thumbnailer --enable-data --enable-mods \\\n            --with-usecode-debugger=yes --enable-usecode-container --enable-nonreadied-objects --disable-oggtest --disable-vorbistest\n      - name: Build with cov-build\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          export PATH=/tmp/cov-analysis-linux64/bin:$PATH\n          cov-build --dir cov-int make -j2\n      - name: Submit the result to Coverity Scan\n        if: ${{ env.EXULT_REPO_ALIVE == 'true' }}\n        run: |\n          tar czvf $FILE cov-int\n          curl \\\n            --form project=$PROJ \\\n            --form token=$TOKEN \\\n            --form email=$EMAIL \\\n            --form file=@$FILE \\\n            --form version=master \\\n            --form description=\"$SHA1\" \\\n            https://scan.coverity.com/builds?project=$PROJ\n```"}
{"id": "63c497456fc19abdf9ca17c3", "level": "level4", "llm_response": " ```yaml\nname: Update Baselines\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    environment:\n      variables:\n        DOTNET_NOLOGO: 'True'\n        DOTNET_CLI_TELEMETRY_OPTOUT: 'True'\n\n    steps:\n      - name: ''\n        # Placeholder for the first step, details to be filled as per the requirement\n\n      - name: Setup .NET Core\n        # Placeholder for the second step, details to be filled as per the requirement\n\n      - name: Test\n        # Placeholder for the third step, details to be filled as per the requirement\n\n      - name: Commit baselines\n        # Placeholder for the fourth step, details to be filled as per the requirement\n```\n\nPlease note that the steps `''`, `Setup .NET Core`, `Test`, and `Commit baselines` are placeholders and need to be filled with the actual commands or scripts that are required for each step. The YAML structure provided is a template for the GitHub Actions workflow.", "answer": "```yaml name: Update Baselines\n# This action can be run on-demand against a branch.\n# It attempts to update the baseline files, and commits and pushes changes if there are any.\n\non:\n  workflow_dispatch:\n\njobs:\n  main:\n    name: Update Baselines\n    runs-on: ubuntu-latest\n\n    env:\n      # don't print dotnet logo\n      DOTNET_NOLOGO: true\n\n      # disable telemetry (reduces dotnet tool output in logs)\n      DOTNET_CLI_TELEMETRY_OPTOUT: true\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n      \n      - name: Test\n        continue-on-error: true\n        run: dotnet test --filter \"TestCategory=Baseline\" -- 'TestRunParameters.Parameter(name=\"SetBaseLine\", value=\"true\")'\n      \n      - name: Commit baselines\n        run: |\n          git config --global user.email \"bicep@noreply.github.com\"\n          git config --global user.name \"Bicep Automation\"\n\n          git add .\n\n          if ! git diff-index --quiet HEAD --; then\n            git commit -m \"Update test baselines\"\n            git push\n          fi```"}
{"id": "63c496821e3364807577b179", "level": "level4", "llm_response": " ```yaml\nname: Build documentation\n\non:\n  push:\n    branches:\n      - master\n      - release-0.2\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  build-documentation:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        branch: [master, release-0.2]\n    steps:\n      - name: ''\n      - name: Set branch environment variable\n        run: echo \"Branch=${{ github.ref }}\"\n      - name: Build documentation\n        run: |\n          # Commands to build documentation\n      - name: Upload documentation\n        run: |\n          # Commands to upload documentation\n      - name: Upload documentation alias\n        run: |\n          # Commands to upload documentation alias\n```\n\nNote: The placeholder `''` in the first step should be replaced with the actual command or action that the job is supposed to perform. Similarly, the comments under each step should be replaced with the actual shell commands or scripts necessary for building, uploading, and aliasing the documentation.", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: \"Build documentation\"\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 0 * * *' # Deploy every day\n\njobs:\n  build-documentation:\n    if: github.repository == 'apache/flink-table-store'\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 1\n      matrix:\n        branch:\n          - master\n          - release-0.2\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ matrix.branch }}\n      - name: Set branch environment variable\n        run: |\n          currentBranch=$(git branch --show-current)\n\n          echo \"flink_table_store_branch=${currentBranch}\" >> ${GITHUB_ENV}\n\n          if [ \"${currentBranch}\" = \"master\" ]; then\n            echo \"flink_table_store_alias=release-0.3\" >> ${GITHUB_ENV}\n          elif [ \"${currentBranch}\" = \"release-0.2\" ]; then\n            echo \"flink_table_store_alias=stable\" >> ${GITHUB_ENV}\n          fi\n      - name: Build documentation\n        run: |\n          docker run  --rm --volume \"$PWD:/root/flink-table-store\" chesnay/flink-ci:java_8_11 bash -c \"cd /root/flink-table-store && ./.github/workflows/docs.sh\"\n      - name: Upload documentation\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_branch }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n      - name: Upload documentation alias\n        if: env.flink_table_store_alias != ''\n        uses: burnett01/rsync-deployments@5.2\n        with:\n          switches: --archive --compress\n          path: docs/target/\n          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-table-store-docs-${{ env.flink_table_store_alias }}/\n          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}\n          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}\n          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}\n          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}\n```"}
{"id": "63c4985d517fc08c1eedd0a3", "level": "level4", "llm_response": " ```yaml\nname: Arc PR e2e tests\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run E2E tests\n        run: npm run e2e\n\n      - name: Build project\n        run: npm run build\n\n      - name: Archive artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: ./dist\n\n      - name: Publish test results\n        uses: actions/upload-artifact@v2\n        with:\n          name: test-results\n          path: ./test-results\n```\n\nNote: The placeholder names for the steps (e.g., ``, ``, ``, ``, ``) should be replaced with actual step names relevant to the tasks you want to perform. The above YAML is a template with placeholders and common steps for a Node.js/TypeScript project. Adjust the steps according to your specific workflow requirements.", "answer": "```yaml name: 'Arc PR e2e tests'\n\ndefaults:\n  run:\n    working-directory: src/neo4j-arc\n\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - run: npm -g install yarn\n      - run: yarn install --frozen-lockfile\n      - run: yarn test\n      - run: yarn build\n```"}
{"id": "63c498e633b087f6bde3bc16", "level": "level4", "llm_response": " ```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: ''\n      - name: Set up Ruby 3.1\n      - name: Publish a pre package to GitHub Packages\n```\n\nPlease note that the first step name is empty. You should replace the empty string with the actual step name you intend to use. Here's an example of how you might complete it:\n\n```yaml\nname: Ruby Gem\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby 3.1\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '3.1'\n\n      - name: Publish a pre package to GitHub Packages\n        uses: actions/github-script@v5\n        with:\n          script: |\n            const gh = require(\"@actions/github\");\n            const api = github.getRepoContext().repo.owner.github;\n            api.repos.createOrUpdatePrerelease({\n              tag_name: 'pre-release',\n              target_commitish: 'master',\n              name: 'Pre-release package',\n              draft: true,\n              prerelease: true\n            });\n```\n\nThis example assumes you want to check out the repository, set up Ruby 3.1, and then publish a pre-release package to GitHub Packages. Adjust the script as needed for your specific requirements.", "answer": "```yaml name: Ruby Gem\n\non:\n  push:\n    branches: [ \"master\" ]\n\njobs:\n  build:\n    name: Build + Publish\n    runs-on: ubuntu-22.04\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby 3.1\n      uses: ruby/setup-ruby@v1.117.0\n      with:\n        ruby-version: 3.1.2\n\n    - name: Publish a pre package to GitHub Packages\n      run: |\n        mkdir -p $HOME/.gem\n        touch $HOME/.gem/credentials\n        chmod 0600 $HOME/.gem/credentials\n        printf -- \"---\\n:github: ${GEM_HOST_API_KEY}\\n\" > $HOME/.gem/credentials\n        sed -i -e \"/^\\s*VERSION = .*pre/ s/pre/pre.$(date +%Y%m%d.%H%M).$(git rev-parse --short HEAD)/\" lib/geminabox/version.rb\n        gem build *.gemspec\n        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem\n      env:\n        GEM_HOST_API_KEY: \"Bearer ${{secrets.GITHUB_TOKEN}}\"\n        OWNER: ${{ github.repository_owner }}\n```"}
{"id": "63c497b033b087f6bde3409c", "level": "level4", "llm_response": " ```yaml\nname: Linux CI\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker\n        uses: docker/setup-buildx-action@v1\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          file: Dockerfile\n          push: true\n          tags: grumpycoders/pcsx-redux-build:latest\n      - name: Set environment variable\n        run: echo \"TEST_RESULTS=/tmp/test-results\" >> $GITHUB_ENV\n      - name: Build\n        run: |\n          # Build commands here\n      - name: Packaging\n        run: |\n          # Packaging commands here\n      - name: Test\n        run: |\n          # Test commands here\n      - name: Deploy\n        run: |\n          # Deployment commands here\n```", "answer": "```yaml name: Linux CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    container:\n      image: grumpycoders/pcsx-redux-build:latest\n      env:\n        TEST_RESULTS: /tmp/test-results\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          set-safe-directory: true\n      - uses: n1hility/cancel-previous-runs@v2\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - run: |\n          make -j 2 all pcsx-redux-tests\n          make -C src/mips/tests -j 2 PCSX_TESTS=true\n          make -C src/mips/openbios -j 2 clean all\n      - name: Packaging\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          make install install-openbios DESTDIR=AppDir/usr\n          echo '{' > AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"version\": \"'`git rev-parse HEAD | cut -c 1-8`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"changeset\": \"'`git rev-parse HEAD`'\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"timestamp\": '`date '+%s'`',' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  \"updateInfo\": [' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    {' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"channel\": \"dev\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"method\": \"appcenter\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateCatalog\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/public_releases\",' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '      \"updateInfoBase\": \"https://install.appcenter.ms/api/v0.1/apps/grumpycoders/pcsx-redux-linux64/distribution_groups/public/releases/\"' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '    }' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '  ]' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          echo '}' >> AppDir/usr/share/pcsx-redux/resources/version.json\n          appimage-builder --skip-tests\n      - name: Test\n        run: |\n          export GTEST_OUTPUT=xml:${TEST_RESULTS}/\n          mkdir -p $TEST_RESULTS\n          xvfb-run catchsegv ./pcsx-redux-tests\n      - name: Deploy\n        if: github.event_name == 'push'\n        env:\n          APPCENTER_ACCESS_TOKEN: ${{ secrets.LINUX_APPCENTER_ACCESS_TOKEN }}\n        run: |\n          git config --global --add safe.directory /__w/pcsx-redux/pcsx-redux\n          export BUILD=`git rev-parse HEAD | cut -c 1-8`\n          . /usr/local/nvm/nvm.sh\n          zip PCSX-Redux-$BUILD-linux-x86_64.zip *.AppImage\n          appcenter distribute release -b $BUILD -f PCSX-Redux-$BUILD-linux-x86_64.zip -g public -a grumpycoders/pcsx-redux-linux64 --disable-telemetry\n```"}
{"id": "63c49c6d1e336480757a0cf3", "level": "level4", "llm_response": " ```yaml\nname: Verify PR\n\non:\n  pull_request:\n    types: [opened, edited, reopened, synchronize, ready_for_review]\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    permissions:\n      checks: write\n\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: actions/verify-action@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          verify: ${{ github.event.pull_request.html_url }}\n```", "answer": "```yaml name: Verify PR\n\non:\n  pull_request_target:\n    types: [opened, edited, synchronize, reopened]\n\npermissions:\n  checks: write # Allow access to checks to write check runs.\n\njobs:\n  verify:\n    runs-on: ubuntu-latest\n    name: Verify PR contents\n    steps:\n      - name: Verifier action\n        id: verifier\n        uses: kubernetes-sigs/kubebuilder-release-tools@v0.2.0\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49f766fc19abdf9cd6487", "level": "level4", "llm_response": " ```yaml\nname: Version Bump\n\non:\n  workflow_call:\n    inputs:\n      version_number:\n        description: 'Version number to bump to (ex. 1.2.0, 1.3.0b1)'\n        required: true\n\njobs:\n  version_bump_and_changie:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger reusable workflow\n        uses: actions/github-script@v4\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const versionBumpWorkflow = await github.actions.createWorkflowExecutionBuilder({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              workflow_id: 'dbt-labs/actions/version-bump.yml',\n              input: { version_number: `${context.payload.inputs.version_number}` },\n              secrets: ['special_case_secrets=inherit']\n            }).setRetention(60).build();\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Call reusable workflow\n        uses: ./.github/actions/dbt-labs/version-bump\n        with:\n          version_number: ${{ github.event.inputs.version_number }}\n```\nPlease note that this YAML assumes that the `dbt-labs/actions/version-bump.yml` workflow is already set up to accept the `version_number` input and handle the `special_case_secrets` as described. The `dbt-labs/actions/version-bump` is a placeholder for the actual path to the reusable workflow within your repository. Adjust the path as necessary.", "answer": "```yaml # **what?**\n# This workflow will take the new version number to bump to. With that\n# it will run versionbump to update the version number everywhere in the\n# code base and then run changie to create the corresponding changelog.\n# A PR will be created with the changes that can be reviewed before committing.\n\n# **why?**\n# This is to aid in releasing dbt and making sure we have updated\n# the version in all places and generated the changelog.\n\n# **when?**\n# This is triggered manually\n\nname: Version Bump\n\non:\n  workflow_dispatch:\n    inputs:\n      version_number:\n       description: 'The version number to bump to (ex. 1.2.0, 1.3.0b1)'\n       required: true\n\njobs:\n  version_bump_and_changie:\n    uses: dbt-labs/actions/.github/workflows/version-bump.yml@main\n    with:\n      version_number: ${{ inputs.version_number }}\n    secrets: inherit  # ok since what we are calling is internally maintained\n```"}
{"id": "63c49f961842bc13d779807d", "level": "level4", "llm_response": " ```yaml\nname: Sync wgcf latest version\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 2 * * *'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    environment:\n      USERNAME: ${{ secrets.GH_USERNAME }}\n      EMAIL: ${{ secrets.GH_EMAIL }}\n    steps:\n      - name: ''\n      - name: Update wgcf to latest version\n      - name: Upload to REPO\n```", "answer": "```yaml name: Sync wgcf latest version\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '3 2 * * *'\n\njobs:\n  build:\n    name: Sync wgcf latest version\n    runs-on: ubuntu-latest\n    env:\n      USERNAME: ${{ secrets.GH_USERNAME }}\n      EMAIL: ${{ secrets.GH_EMAIL }}\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - name: Update wgcf to latest version\n        run: |\n          NOW=$(wget -qO- https://raw.githubusercontent.com/${{ env.USERNAME }}/warp/main/menu.sh | grep 'latest=${latest' | cut -d \\' -f2)\n          LATEST=$(wget -qO- \"https://api.github.com/repos/ViRb3/wgcf/releases/latest\" | grep \"tag_name\" | head -n 1 | cut -d : -f2 | sed 's/[ \\\"v,]//g')\n          NOW1=$(echo $NOW | cut -d \\. -f1)\n          NOW2=$(echo $NOW | cut -d \\. -f2)\n          NOW3=$(echo $NOW | cut -d \\. -f3)\n          LATEST1=$(echo $LATEST | cut -d \\. -f1)\n          LATEST2=$(echo $LATEST | cut -d \\. -f2)\n          LATEST3=$(echo $LATEST | cut -d \\. -f3)\n          NOW_VERSION=$(( NOW1*1000000 + NOW2*1000 + NOW3 ))\n          LATEST_VERSION=$(( LATEST1*1000000 + LATEST2*1000 + LATEST3 ))\n          if [ $LATEST_VERSION -gt $NOW_VERSION ]; then\n            PLATFORM=(  \"darwin_amd64\"\n                        \"darwin_arm64\"\n                        \"linux_386\"\n                        \"linux_amd64\"\n                        \"linux_arm64\"\n                        \"linux_386\"\n                        \"linux_s390x\"\n                        \"windows_386.exe\"\n                        \"windows_amd64.exe\"\n                      )\n                    \n            SCRIPTS=( \"docker.sh\"\n                      \"menu.sh\"\n                      \"pc/mac.sh\"\n                    )\n            \n            for i in \"${PLATFORM[@]}\"; do\n              wget -NP ${GITHUB_WORKSPACE}/wgcf/ https://github.com/ViRb3/wgcf/releases/download/v\"$LATEST\"/wgcf_\"$LATEST\"_\"$i\"\n              rm -f ${GITHUB_WORKSPACE}/wgcf/wgcf_\"$NOW\"_\"$i\"\n            done\n            \n            for j in \"${SCRIPTS[@]}\"; do\n              sed -i \"s/$NOW/$LATEST/g\" ${GITHUB_WORKSPACE}/$j\n            done\n            \n            echo \"VERSION=$LATEST\" >> $GITHUB_ENV\n          fi\n          \n      - name: Upload to REPO\n        if: ${{ env.VERSION != '' }}\n        run: |\n          git config --global user.email \"${{ env.EMAIL }}\"\n          git config --global user.name \"${{ env.USERNAME }}\"\n          git add .\n          git commit -m \"Sync WGCF to V${{ env.VERSION }} by Github Actions, $(date \"+%Y/%m/%d %H:%M:%S\")\"\n          git push\n\n```"}
{"id": "63c49947cbc73931bb18c954", "level": "level4", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install Node dependencies\n        run: npm install\n\n      - name: Run linter\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Run tests\n        run: npm test\n\n      - name: Publish artifacts\n        run: npm run publish\n```\n\nPlease note that placeholders for the actual commands (e.g., `npm run lint`, `npm test`, `npm run publish`) should be replaced with the actual scripts defined in your `package.json` file.", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  publish:\n    name: Lint and Build\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - run: yarn lint\n      - run: yarn tsc\n      - run: yarn build:only\n```"}
{"id": "63c49d68b008460c1df40d8b", "level": "level4", "llm_response": " ```yaml\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - v*\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n\n    steps:\n      - name: Get time\n        run: date\n\n      - name: Install dependencies for Linux\n        run: sudo apt-get update && sudo apt-get install -y build-essential\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: |\n          sudo dnf install -y gflags glog apache-arrow\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: |\n          sudo dnf install -y grpc-v1.27.x protobuf-bundled\n\n      - name: Install libgrape-lite\n        run: sudo dnf install -y libgrape-lite\n\n      - name: Setup tmate session\n        run: |\n          curl -sSL https://raw.githubusercontent.com/tmux-io/tmux-installer/master/install | bash\n\n      - name: CMake\n        run: cmake .\n\n      - name: Build\n        run: make all\n```", "answer": "```yaml # Copyright 2020-2022 Alibaba Group Holding Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Compatibility Build on CentOS Latest\n\non:\n  push:\n    tags:\n      - 'v*'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    container:\n      image: centos:latest\n    strategy:\n      matrix:\n        os: [ubuntu-20.04]\n    steps:\n      - name: Get time\n        run: |\n          date +'%Y-%m' > snapshot.txt\n      - name: Install dependencies for Linux\n        run: |\n          # switch to centos stream\n          dnf -y --disablerepo '*' --enablerepo=extras swap centos-linux-repos centos-stream-repos\n          dnf -y update\n          yum -y install sudo\n\n          # install required dependencies\n          sudo yum -y group install \"Development Tools\"\n          sudo yum -y install boost-devel \\\n                              cmake \\\n                              git \\\n                              brotli-devel \\\n                              bzip2-devel \\\n                              curl \\\n                              lz4-devel \\\n                              m4 \\\n                              make \\\n                              autoconf \\\n                              automake \\\n                              openmpi-devel \\\n                              librdkafka \\\n                              snappy \\\n                              pkgconf \\\n                              zlib-devel \\\n                              libzstd-devel \\\n                              python3-devel \\\n                              python3-pip \\\n                              openssl-devel \\\n                              wget\n\n          # install python packages for codegen\n          sudo pip3 install -U pip\n          sudo pip3 install libclang parsec setuptools wheel twine\n\n      # the checkout action require new version of git\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      - name: Install gflags, glog and apache-arrow for CentOS latest\n        run: |\n          echo \"Installing gflags ...\"\n          cd /tmp\n          curl -L https://github.com/gflags/gflags/archive/v2.2.2.tar.gz --output gflags-v2.2.2.tar.gz\n          tar zxf gflags-v2.2.2.tar.gz\n          cd gflags-2.2.2\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON\n          sudo make install -j`nproc`\n\n          echo \"Installing glog ...\"\n          cd /tmp\n          curl -L https://github.com/google/glog/archive/v0.5.0.tar.gz --output glog-v0.5.0.tar.gz\n          tar zxf glog-v0.5.0.tar.gz\n          cd glog-0.5.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_TESTING=OFF\n          sudo make install -j`nproc`\n\n          echo \"Installing apache-arrow ...\"\n          cd /tmp\n          wget https://github.com/apache/arrow/archive/refs/tags/apache-arrow-8.0.0.tar.gz\n          tar zxf apache-arrow-8.0.0.tar.gz\n          cd arrow-apache-arrow-8.0.0\n          mkdir -p build-dir\n          cd build-dir\n          cmake ../cpp \\\n              -DARROW_COMPUTE=ON \\\n              -DARROW_WITH_UTF8PROC=ON \\\n              -DARROW_CSV=ON \\\n              -DARROW_CUDA=OFF \\\n              -DARROW_DATASET=OFF \\\n              -DARROW_FILESYSTEM=ON \\\n              -DARROW_FLIGHT=OFF \\\n              -DARROW_GANDIVA=OFF \\\n              -DARROW_GANDIVA_JAVA=OFF \\\n              -DARROW_HDFS=OFF \\\n              -DARROW_HIVESERVER2=OFF \\\n              -DARROW_JSON=OFF \\\n              -DARROW_ORC=OFF \\\n              -DARROW_PARQUET=OFF \\\n              -DARROW_PLASMA=OFF \\\n              -DARROW_PLASMA_JAVA_CLIENT=OFF \\\n              -DARROW_PYTHON=OFF \\\n              -DARROW_S3=OFF \\\n              -DARROW_WITH_BZ2=OFF \\\n              -DARROW_WITH_ZLIB=OFF \\\n              -DARROW_WITH_LZ4=OFF \\\n              -DARROW_WITH_SNAPPY=OFF \\\n              -DARROW_WITH_ZSTD=OFF \\\n              -DARROW_WITH_BROTLI=OFF \\\n              -DARROW_IPC=ON \\\n              -DARROW_BUILD_BENCHMARKS=OFF \\\n              -DARROW_BUILD_EXAMPLES=OFF \\\n              -DARROW_BUILD_INTEGRATION=OFF \\\n              -DARROW_BUILD_UTILITIES=OFF \\\n              -DARROW_BUILD_TESTS=OFF \\\n              -DARROW_ENABLE_TIMING_TESTS=OFF \\\n              -DARROW_FUZZING=OFF \\\n              -DARROW_USE_ASAN=OFF \\\n              -DARROW_USE_TSAN=OFF \\\n              -DARROW_USE_UBSAN=OFF \\\n              -DARROW_JEMALLOC=OFF \\\n              -DARROW_BUILD_SHARED=ON \\\n              -DARROW_BUILD_STATIC=OFF\n          sudo make install -j`nproc`\n\n      - name: Install grpc v1.27.x and bundled protobuf for CentOS latest\n        run: |\n          cd /tmp\n          git clone https://github.com/grpc/grpc.git --depth 1 --branch v1.46.x\n          cd grpc/\n          git submodule update --init\n          mkdir cmake-build\n          cd cmake-build/\n          cmake .. -DBUILD_SHARED_LIBS=ON \\\n            -DgRPC_INSTALL=ON \\\n            -DgRPC_BUILD_TESTS=OFF \\\n            -DgRPC_BUILD_CSHARP_EXT=OFF \\\n            -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \\\n            -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \\\n            -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \\\n            -DgRPC_ZLIB_PROVIDER=package \\\n            -DgRPC_SSL_PROVIDER=package\n          sudo make install -j`nproc`\n\n      - name: Install libgrape-lite\n        run: |\n          # leverage ccache\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n\n          git clone https://github.com/alibaba/libgrape-lite.git --depth=1\n          cd libgrape-lite\n          mkdir build\n          cd build\n          cmake ..\n          make -j`nproc`\n          sudo make install\n\n      - name: Setup tmate session\n        if: false\n        uses: mxschmitt/action-tmate@v2\n\n      - name: CMake\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          mkdir build\n          cd build\n          cmake .. -DCMAKE_BUILD_TYPE=Release \\\n                   -DBUILD_SHARED_LIBS=ON \\\n                   -DBUILD_VINEYARD_COVERAGE=ON \\\n                   -DBUILD_VINEYARD_PYTHON_BINDINGS=ON \\\n                   -DBUILD_VINEYARD_BASIC=ON \\\n                   -DBUILD_VINEYARD_IO=ON \\\n                   -DBUILD_VINEYARD_IO_KAFKA=ON \\\n                   -DBUILD_VINEYARD_HOSSEINMOEIN_DATAFRAME=ON \\\n                   -DBUILD_VINEYARD_TESTS=ON\n\n      - name: Build\n        run: |\n          export PATH=/usr/lib64/openmpi/bin/:$PATH\n          export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH\n\n          pushd build\n          make -j`nproc`\n          make vineyard_tests -j`nproc`\n          make vineyard_client_python -j`nproc`\n          sudo make install\n          popd\n```"}
{"id": "63c49b1b33b087f6bde49f07", "level": "level4", "llm_response": " ```yaml\nname: TagBot\non:\n  schedule:\n    - cron: '0 * * * *' # every hour\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: TagBotStep\n        run: echo \"This step will run every hour to perform tagging tasks.\"\n```", "answer": "```yaml name: TagBot\non:\n  schedule:\n    - cron: 0 * * * *\njobs:\n  TagBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49bc7cbc73931bb19c883", "level": "level4", "llm_response": " ```yaml\nname: Build Docker Image\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'hectorqin/reader'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Build Docker Image\n        run: docker build -t hectorqin/reader:latest .\n\n      - name: Publish to Registry\n        run: |\n          echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u hectorqin --password-stdin registry.example.com\n          docker push hectorqin/reader:latest\n```\nPlease note that you need to replace `registry.example.com` with your actual Docker registry URL and ensure that your Docker credentials are stored as secrets in your GitHub repository settings.", "answer": "```yaml name: Build Docker Image\non:\n  push:\n    branches:\n      - master\njobs:\n  build:\n    if: github.repository == 'hectorqin/reader'\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: hectorqin/reader-basic\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n        snapshot: true\n        tags: \"test\"\n```"}
{"id": "63c498e31e3364807578a839", "level": "level4", "llm_response": " ```yaml\nname: create-index\non:\n  push:\n    branches:\n      - master\njobs:\n  update:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Update\n        run: |\n          # Add your update commands here for the HTML code\n          echo \"Update steps for HTML files would go here\"\n```", "answer": "```yaml name: create-index\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  update:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        \n      - name: update\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        run: |\n          sed -i '/<!-- marker -->/,$ d' README.md\n        \n          (\n          echo '<!-- marker -->'\n          \n          for directory in cheat-sheet examples; do\n            oldgroup=\n            printf \"\\n## %s Index\\n\\n\" $(echo \"$directory\" | sed -e \"s/\\b\\(.\\)/\\u\\1/g\")\n\n            while IFS=/ read -r dot group file; do\n              name=\"$(basename \"$file\" .md)\"\n\n              if [ \"$oldgroup\" != \"$group\" ]; then\n                echo \"<br/><span class='group'><b>$group</b></span>\"\n                oldgroup=\"$group\"\n              fi\n\n              echo \" | <a class='topic' href='https://lzone.de/$directory/$name'>$name</a>\"\n            done < <(cd $directory/ && find . -name \"*.md\" | sort)\n          done\n          ) >>README.md\n          \n          git config user.email \"noreply@example.com\"\n          git config user.name \"Create Index Workflow\"\n          git commit -m \"Update index.\" README.md || exit 0\n          git push\n```"}
{"id": "63c499146fc19abdf9cad631", "level": "level4", "llm_response": " ```yaml\nname: Publish\n\non:\n  push:\n    tags:\n      - 'v*'\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Compile TypeScript\n        run: npm run build\n\n      - name: Run tests\n        run: npm test\n\n      - name: Publish to npm\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npm publish\n```\n\nNote:\n- Replace `npm run build` and `npm test` with the actual commands for compiling TypeScript and running tests in your project.\n- Make sure to set the `NPM_TOKEN` in your repository's secrets to allow publishing to npm.\n- The `tags` pattern `'v*'` is used to trigger the workflow on pushes to tags that start with 'v', which is common for semantic versioning in TypeScript projects. Adjust the pattern as needed for your project.\n- The `release` event is configured to trigger on published releases. Adjust if you need a different trigger.", "answer": "```yaml name: Publish\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish --access public\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"id": "63c49ebf33b087f6bde61b74", "level": "level4", "llm_response": " ```yaml\nname: No Response\non:\n  issues:\n    types: [opened, edited, commented]\n  schedule:\n    - cron: '0 * * * *'\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set GITHUB_TOKEN permissions\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::set-output name=permissions::write\"\n          echo \"::set-output name=scopes::issues\"\n```", "answer": "```yaml name: No Response\n\n# Both `issue_comment` and `scheduled` event types are required for this Action\n# to work properly.\non:\n  issue_comment:\n    types: [created]\n  schedule:\n    # Schedule for five minutes after the hour, every hour\n    - cron: '5 * * * *'\n\n# By specifying the access of one of the scopes, all of those that are not\n# specified are set to 'none'.\npermissions:\n  issues: write\n\njobs:\n  noResponse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: lee-dohm/no-response@9bb0a4b5e6a45046f00353d5de7d90fb8bd773bb\n        with:\n          token: ${{ github.token }}\n          # Comment to post when closing an Issue for lack of response. Set to `false` to disable\n          closeComment: >\n            Without additional information we're not able to resolve this issue,\n            so it will be closed at this time. You're still free to add more info\n            and respond to any questions above, though. We'll reopen the case\n            if you do. Thanks for your contribution!\n          # Number of days of inactivity before an issue is closed for lack of response.\n          daysUntilClose: 21\n          # Label requiring a response.\n          responseRequiredLabel: \"waiting for customer response\"\n```"}
{"id": "63c499806fc19abdf9cb01f0", "level": "level4", "llm_response": " ```yaml\nname: GH Pages\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - 'v*'\n    releases:\n      - prerelease\n    schedule:\n      - cron: '0 0 * * *' # Runs daily at midnight\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Setup Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install Dependencies\n        run: npm install\n\n      - name: Build Storybook\n        run: npx storybook build --out-dir public\n\n      - name: Deploy Storybook\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: public\n          publish_branch: gh-pages\n```\n\nNote: The placeholders for the 2nd and 3rd steps have been left empty (``). You should specify the actions required for those steps. For example, if you need to build your TypeScript project, you might use:\n\n```yaml\n      - name: Build TypeScript Project\n        run: npm run build\n```\n\nAnd if you need to prepare a specific directory or perform any other actions, you should fill in the appropriate commands. The `Deploy Storybook` step uses the `peaceiris/actions-gh-pages` action to deploy the contents of the `public` directory to the `gh-pages` branch of your repository.", "answer": "```yaml name: \"GH Pages\"\n\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n\njobs:\n  deploy-gh-pages:\n    name: \"Deploy GH Pages\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"Checkout\"\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - uses: bahmutov/npm-install@v1\n        with:\n          useRollingCache: true\n          install-command: yarn --frozen-lockfile\n\n      - name: \"Deploy storybook\"\n        run: yarn storybook:deploy --ci\n        env:\n          GH_TOKEN: ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49e671842bc13d7790941", "level": "level4", "llm_response": " ```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.6, 3.7, 3.8, 3.9]\n\n    steps:\n      - name: ''\n      - name: Set up Python ${{ matrix.python }}\n      - name: Setup poetry\n      - name: Configure poetry\n      - name: Install Python dependencies\n      - name:\n      - name: Setup Node\n      - name: Install Node dependencies\n      - name: Lint TypeScript\n      - name: Build JavaScript\n      - name: Run pytest\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python: [\"3.6\", \"3.7\", \"3.8\", \"3.9\"]\n\n    name: Python ${{ matrix.python }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python ${{ matrix.python }}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python }}\n\n      - name: Setup poetry\n        uses: abatilo/actions-poetry@v2.1.6\n        with:\n          poetry-version: 1.1.12\n\n      - name: Configure poetry\n        run: poetry config virtualenvs.in-project true\n\n      - name: Install Python dependencies\n        run: poetry install\n\n      - run: poetry run jupyter nbextension install vega --py --sys-prefix\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n\n      - name: Install Node dependencies\n        run: yarn --frozen-lockfile\n\n      - name: Lint TypeScript\n        run: yarn lint\n\n      - name: Build JavaScript\n        run: yarn build\n\n      - name: Run pytest\n        run: poetry run pytest vega\n```"}
{"id": "63c49a8d1e33648075794f60", "level": "level4", "llm_response": " ```yaml\nname: Push Tagged Container\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: setup go\n        run: |\n          # Commands to setup Go environment\n\n      - name: checkout\n        uses: actions/checkout@v2\n\n      - name: unit test\n        run: |\n          # Commands to run Go unit tests\n\n      - name: test build\n        run: |\n          # Commands to build the Go project\n\n  container-image:\n    needs: unit-test\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v2\n\n      - name: get version tag\n        run: |\n          # Commands to extract version tag from tag name\n\n      - name: docker login\n        uses: docker/login-action@v1\n        with:\n          registry: your-registry-url\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: docker build\n        run: |\n          docker build . --tag your-image-name:${{ steps.get version tag.outputs.tag }}\n\n      - name: docker push\n        run: |\n          docker push your-image-name:${{ steps.get version tag.outputs.tag }}\n```\n\nPlease replace `your-registry-url`, `your-image-name`, and the placeholder comments with the actual commands and values specific to your Go project. Also, ensure that `DOCKER_USERNAME` and `DOCKER_PASSWORD` are stored as secrets in your GitHub repository's settings for authentication with your Docker registry.", "answer": "```yaml name: Push Tagged Container\non:\n  push:\n    tags:\n    - v*.*.*\n\njobs:\n  unit-test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: setup go\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.19.x\n\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: unit test\n      run: make test\n\n    - name: test build\n      run: make build\n\n  container-image:\n    runs-on: ubuntu-latest\n    needs: [unit-test]\n\n    steps:\n    - name: checkout\n      uses: actions/checkout@v3\n\n    - name: get version tag\n      run: echo TAG_NAME=$(echo ${GITHUB_REF} | rev | cut -d\"/\" -f1 | rev) >> $GITHUB_ENV\n\n    - name: docker login\n      run: echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin\n\n    - name: docker build\n      run: make docker-build version=${TAG_NAME}\n\n    - name: docker push\n      run: make docker-push version=${TAG_NAME}\n```"}
{"id": "63c49fca1e336480757b60ef", "level": "level4", "llm_response": " ```yaml\nname: Greetings\n\non:\n  pull_request:\n  issues:\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Hello\n        run: echo \"Hello, world! This workflow is triggered by pull request or issue activity.\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        pr-message:  'Hello @${{ github.actor }}, thank you for submitting a PR! We will review your changes and respond as soon as possible.'\n        issue-message: |\n          Hello @${{ github.actor }}, thank you for your interest in our work!\n          If this is a bug report, please provide your configuration and any screenshots that would assist troubleshooting, otherwise we can not help you.\n```"}
{"id": "63c497be6fc19abdf9ca490d", "level": "level4", "llm_response": " ```yaml\nname: LibraryBuild\n\non:\n  push:\n    branches:\n      - main\n    tags\n    pull_request:\n      types: [opened, edited, synchronize, labeled, unlabeled, reopened]\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        arduino-boards-fqbn: [arduino:avr:uno, arduino:avr:leonardo, arduino:samd:nano_33_iot, esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80]\n        sketches-exclude: []\n\n    env:\n      REQUIRED_LIBRARIES: OSC,WiFiManager\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Compile all examples\n        run: |\n          # Commands to compile all examples for each board\n          # This is a placeholder for the actual compile commands\n          echo \"Compiling examples for ${ARDUINO_BOARDS_FQBN}\"\n          # Example: echo \"Compiling for arduino:avr:uno\"\n          # Add actual compilation commands here for each board\n```\n\nPlease note that the actual commands to compile the examples for each board are not included in the placeholder section. You will need to replace the echo command with the actual compilation steps for each board, taking into account the `sketches-exclude` list to skip certain examples if necessary. The `sketches-exclude` list is not used in the above YAML, but you can implement logic in the job steps to handle this based on your requirements.", "answer": "```yaml # LibraryBuild.yml\n# Github workflow script to test compile all examples of an Arduino library repository.\n#\n# Copyright (C) 2020  Armin Joachimsmeyer\n# https://github.com/ArminJo/Github-Actions\n#\n\n# This is the name of the workflow, visible on GitHub UI.\nname: LibraryBuild\non: [push, pull_request] # see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request\n\njobs:\n  build:\n    name: ${{ matrix.arduino-boards-fqbn }} - test compiling examples\n\n    runs-on: ubuntu-latest # I picked Ubuntu to use shell scripts.\n\n    env:\n      # Comma separated list without double quotes around the list. \n      REQUIRED_LIBRARIES: OSC,WiFiManager\n\n    strategy:\n      matrix:\n        # The matrix will produce one job for each configuration parameter of type `arduino-boards-fqbn`\n        # In the Arduino IDE, the fqbn is printed in the first line of the verbose output for compilation as parameter -fqbn=... for the \"arduino-builder -dump-prefs\" command\n        #\n        # Examples: arduino:avr:uno, arduino:avr:leonardo, arduino:avr:nano, arduino:avr:mega\n        # arduino:sam:arduino_due_x, arduino:samd:arduino_zero_native\"\n        # ATTinyCore:avr:attinyx5:chip=85,clock=1internal, digistump:avr:digispark-tiny, digistump:avr:digispark-pro\n        # STM32:stm32:GenF1:pnum=BLUEPILL_F103C8\n        # esp8266:esp8266:huzzah:eesz=4M3M,xtal=80, esp32:esp32:featheresp32:FlashFreq=80\n        # You may add a suffix behind the fqbn with \"|\" to specify one board for e.g. different compile options like arduino:avr:uno|trace \n        #############################################################################################################\n        arduino-boards-fqbn:\n          - arduino:avr:uno\n          - arduino:avr:leonardo\n          - arduino:samd:nano_33_iot\n          - esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n          - esp32:esp32:featheresp32:FlashFreq=80\n\n        # Specify parameters for each board.\n        # Parameters can be: platform-url, sketches-exclude and examples-build-properties\n        # With sketches-exclude you may exclude specific examples for a board. Use a space separated list.\n        #############################################################################################################\n        include:\n          - arduino-boards-fqbn: arduino:avr:uno\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: arduino:avr:leonardo\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n          \n          - arduino-boards-fqbn: arduino:samd:nano_33_iot\n            sketches-exclude: MPU6050_DMP6_ESPWiFi,MPU6050_DMP6_Ethernet\n\n          - arduino-boards-fqbn: esp8266:esp8266:huzzah:eesz=4M3M,xtal=80\n            platform-url: https://arduino.esp8266.com/stable/package_esp8266com_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n            \n          - arduino-boards-fqbn: esp32:esp32:featheresp32:FlashFreq=80\n            platform-url: https://dl.espressif.com/dl/package_esp32_index.json\n            sketches-exclude: MPU6050_DMP6_Ethernet\n\n      # Do not cancel all jobs / architectures if one job fails\n      fail-fast: false\n\n    # This is the list of steps this job will run.\n    steps:\n\n      # First of all, we clone the repo using the `checkout` action.\n      - name: Checkout\n        uses: actions/checkout@master\n\n      - name: Compile all examples\n        uses: ArminJo/arduino-test-compile@v3\n        with:\n          arduino-board-fqbn: ${{ matrix.arduino-boards-fqbn }}\n          required-libraries: ${{ env.REQUIRED_LIBRARIES }}\n          platform-url: ${{ matrix.platform-url }}\n          sketches-exclude: ${{ matrix.sketches-exclude }}\n```"}
{"id": "63c498fe1899db58864e3ac1", "level": "level4", "llm_response": " ```yaml\nname: Cut Release\n\non:\n  workflow_dispatch:\n\njobs:\n  cut-release:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n      contents: read\n\n    steps:\n    - name: Cut release\n      id: cut-release\n      env:\n        GITHUB_TOKEN_SCOPE: id-token\n      run: |\n        # Modify permissions for the GITHUB_TOKEN\n        echo \"::set-output name=token_scope::$GITHUB_TOKEN_SCOPE\"\n\n    - name: Call reusable workflow\n      id: reusable-release\n      uses: actions/github-script@v3\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          const reusableReleaseWorkflow = await github.actions.createWorkflowRun({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            workflow_id: 'sigstore/sigstore/.github/workflows/reusable-release.yml',\n            inputs: {\n              release_tag: context.payload.inputs.release_tag,\n              key_ring: context.payload.inputs.key_ring,\n              key_name: context.payload.inputs.key_name,\n              workload_identity_provider: 'projects/498091336538/locations/global/workloadIdentityPools/githubactions/providers/sigstore-rekor',\n              service_account: 'github-actions-rekor@projectsigstore.iam.gserviceaccount.com',\n              repo: context.repo.defaultRepo.owner + '/' + context.repo.defaultRepo.repo\n            }\n          })\n\nworkflow_dispatch:\n  inputs:\n    release_tag:\n      description: 'The release tag to cut'\n      required: true\n      type: string\n    key_ring:\n      description: 'The key ring for cosign key'\n      required: true\n      type: string\n    key_name:\n      description: 'The key name for cosign key'\n      required: true\n      type: string\n```", "answer": "```yaml name: Cut Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_tag:\n        required: true\n        type: string\n        description: 'Release tag'\n      key_ring:\n        required: true\n        type: string\n        description: 'Key ring for cosign key'\n      key_name:\n        required: true\n        type: string\n        description: 'Key name for cosign key'\n\nconcurrency: cut-release\n\njobs:\n  cut-release:\n    name: Cut release\n    uses: sigstore/sigstore/.github/workflows/reusable-release.yml@main\n    permissions:\n      id-token: write\n      contents: read\n    with:\n      release_tag: ${{ github.event.inputs.release_tag }}\n      key_ring: ${{ github.event.inputs.key_ring }}\n      key_name: ${{ github.event.inputs.key_name }}\n      workload_identity_provider: 'projects/498091336538/locations/global/workloadIdentityPools/githubactions/providers/sigstore-rekor'\n      service_account: 'github-actions-rekor@projectsigstore.iam.gserviceaccount.com'\n      repo: 'rekor'\n```"}
{"id": "63c49d81736e7f0ed8c61ef8", "level": "level4", "llm_response": " ```yaml\nname: Jenkins Security Scan\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, edited, reopened]\n  workflow_dispatch:\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      actions: read\n      security-events: write\n\n    steps:\n      - name: Call Jenkins Security Scan Workflow\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Run Jenkins Security Scan\n        uses: ./.github/workflows/jenkins-security-scan.yaml@v2\n        with:\n          java-cache: ${{ github.event.inputs.java-cache }}\n          java-version: ${{ github.event.inputs.java-version }}\n```", "answer": "```yaml name: Jenkins Security Scan\non:\n  push:\n    branches:\n      - \"master\"\n  pull_request:\n    types: [ opened, synchronize, reopened ]\n  workflow_dispatch:\n\npermissions:\n  security-events: write\n  contents: read\n  actions: read\n\njobs:\n  security-scan:\n    uses: jenkins-infra/jenkins-security-scan/.github/workflows/jenkins-security-scan.yaml@v2\n    with:\n      java-cache: '' # Optionally enable use of a build dependency cache. Specify 'maven' or 'gradle' as appropriate.\n      java-version: 11 # What version of Java to set up for the build.\n```"}
{"id": "63c4a0a9517fc08c1ef113c7", "level": "level4", "llm_response": " ```yaml\nname: Test Lighthouse Check\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run Lighthouse\n        run: npx lighthouse $(curl -s https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}) --output=json --output-path=lighthouse-report.json\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: lighthouse-report\n          path: lighthouse-report.json\n```\nPlease note that this YAML configuration assumes that Lighthouse is available as a Node.js package (`npx lighthouse`) and that you have set up the necessary environment to run it. If Lighthouse is not available as a package, you would need to adjust the step accordingly, possibly using a different approach to execute Lighthouse against the pull request's content.", "answer": "```yaml name: Test Lighthouse Check\non: [pull_request]\n\njobs:\n  lighthouse-check:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - run: mkdir -p ${{ github.workspace }}/tmp/artifacts\n    - name: Run Lighthouse\n      uses: ./\n      with:\n        awsAccessKeyId: ${{ secrets.LIGHTHOUSE_CHECK_AWS_ACCESS_KEY_ID }}\n        awsBucket: ${{ secrets.LIGHTHOUSE_CHECK_AWS_BUCKET }}\n        awsRegion: ${{ secrets.LIGHTHOUSE_CHECK_AWS_REGION }}\n        awsSecretAccessKey: ${{ secrets.LIGHTHOUSE_CHECK_AWS_SECRET_ACCESS_KEY }}\n        device: all\n        gitAuthor: ${{ github.actor }}\n        gitBranch: ${{ github.ref }}\n        gitHubAccessToken: ${{ secrets.LIGHTHOUSE_CHECK_GITHUB_ACCESS_TOKEN }}\n        maxRetries: 1\n        outputDirectory: ${{ github.workspace }}/tmp/artifacts\n        urls: 'https://www.foo.software,https://www.foo.software/tag/articles/'\n        sha: ${{ github.sha }}\n        slackWebhookUrl: ${{ secrets.LIGHTHOUSE_CHECK_WEBHOOK_URL }}\n    - name: Upload artifacts\n      uses: actions/upload-artifact@master\n      with:\n        name: Lighthouse reports\n        path: ${{ github.workspace }}/tmp/artifacts\n```"}
{"id": "63c4981ab008460c1df1eed2", "level": "level4", "llm_response": " ```yaml\nname: Examples\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  examples:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Build and run examples\n        run: |\n          python -m venv venv\n          . venv/bin/activate\n          pip install -r requirements.txt\n          python examples/run_examples.py\n```\n\nNote: The above YAML assumes that the Starlark scripts are interfaced with Python, and there are requirements listed in a `requirements.txt` file. The `examples/run_examples.py` script is a Python script that should be designed to execute the Starlark examples. Adjust the script names and commands according to your actual script and requirements.", "answer": "```yaml name: Examples\n\non:\n  pull_request:\n    branches: [ 'main' ]\n\njobs:\n  examples:\n    name: Build and run examples\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./examples/test.sh\n```"}
{"id": "63c49c756fc19abdf9cc3130", "level": "level4", "llm_response": " ```yaml\nname: Add \"approved\" label when approved\non: [pull_request]\njobs:\n  add_label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add \"approved\" label when approved\n        run: |\n          git config --global user.name \"GitHub Action\"\n          git config --global user.email \"769c3f17-c79b-4b74-b243-a5161249d0c8@users.noreply.github.com\"\n          git checkout -b ${{ github.event.pull_request.number }}\n          git add .\n          git commit -m \"Approved by [Your Name]\"\n          git push origin ${{ github.event.pull_request.number }}\n          git tag -a \"approved\" -m \"Approved by [Your Name]\"\n          git push origin \"approved\"\n```", "answer": "```yaml on: pull_request_review\nname: Add \"approved\" label when approved\njobs:\n  add_label:\n    name: Add \"approved\" label when approved\n    runs-on: ubuntu-latest\n    steps:\n    - name: Add \"approved\" label when approved\n      uses: pullreminders/label-when-approved-action@master\n      env:\n        APPROVALS: \"1\"\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        ADD_LABEL: \"approved\"\n        REMOVE_LABEL: \"\"\n```"}
{"id": "63c4a0716fc19abdf9cdcba2", "level": "level4", "llm_response": " ```yaml\nname: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    runs-on: ubuntu-latest\n    name: Linting\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v2\n      - name: Add problem matcher\n        uses: actions/problem-matcher@v1\n      - name: Use Node.js v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install Dependencies\n        run: npm install\n      - name: Run ESLint\n        run: npx eslint .\n\n  Building:\n    runs-on: ubuntu-latest\n    name: Building\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v2\n      - name: Add problem matcher\n        uses: actions/problem-matcher@v1\n      - name: Use Node.js v16\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n      - name: Install Dependencies\n        run: npm install\n      - name: Build Code\n        run: npm run build\n```", "answer": "```yaml name: Continuous Integration\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  Linting:\n    name: Linting\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/eslint.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Run ESLint\n        run: yarn lint --fix=false\n\n  Building:\n    name: Compile source code\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Project\n        uses: actions/checkout@v3\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/problemMatchers/tsc.json\"\n      - name: Use Node.js v16\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: yarn\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile\n      - name: Build Code\n        run: yarn build\n```"}
