{"id": "63c4972533b087f6bde30980", "level": "level1", "llm_response": "```yaml\nname: Release\n\non:\n  workflow_dispatch:\n\njobs:\n  release:\n    id: release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Build with Maven\n        run: mvn clean deploy\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: release-artifacts\n          path: target/*.jar\n```", "answer": "```yaml name: Release\n\non:\n  workflow_dispatch:\n\njobs:\n  release:\n\n    name: Release to Maven Central\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n\n      - name: Publish to Maven Central\n        run: |\n          git config user.name '${{ github.actor }}'\n          git config user.email '${{ github.actor }}@users.noreply.github.com'\n          ./mvnw -B release:prepare release:perform -Dpassword=${{ secrets.GITHUB_TOKEN }} \\\n              -Djansi.passthrough=true \\\n              -Dstyle.color=always\n        env:\n          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```"}
{"id": "63c4979433b087f6bde334fc", "level": "level1", "llm_response": "```yaml\nname: Frogbot Scan and Fix\n\non:\n  push:\n    branches:\n      - dev\n\njobs:\n  create-fix-pull-requests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      \n      - name: Run Frogbot scan and fix\n        run: frogbot --fix\n```", "answer": "```yaml name: \"Frogbot Scan and Fix\"\non:\n  push:\n    branches:\n      - \"dev\"\njobs:\n  create-fix-pull-requests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      # Install prerequisites\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - uses: jfrog/frogbot@v2\n        env:\n          # [Mandatory]\n          # JFrog platform URL (This functionality requires version 3.29.0 or above of Xray)\n          JF_URL: ${{ secrets.FROGBOT_URL }}\n\n          # [Mandatory if JF_USER and JF_PASSWORD are not provided]\n          # JFrog access token with 'read' permissions on Xray service\n          JF_ACCESS_TOKEN: ${{ secrets.FROGBOT_ACCESS_TOKEN }}\n\n          # [Mandatory]\n          # The GitHub token automatically generated for the job\n          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"id": "63c49dae1e336480757a8b6e", "level": "level1", "llm_response": "```yaml\nname: coverage\n\non:\n  pull_request:\n    branches: [ '*' ]\n  push:\n    branches: [ 'main' ]\n\njobs:\n  codecov:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run tests and generate coverage report\n        run: |\n          pytest --cov=my_project --cov-report=xml\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v1\n```", "answer": "```yaml name: coverage\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  codecov:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install poetry\n      uses: snok/install-poetry@v1\n      with:\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3.0.9\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-3.10-${{ hashFiles('**/poetry.lock') }}-0\n    - name: Install dependencies\n      run: poetry install\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n    - name: Test with pytest\n      run: poetry run pytest --cov=fastapi_azure_auth tests/ --verbose --assert=plain --cov-report=xml\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        fail_ci_if_error: true\n        token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"id": "63c498731899db58864e00b5", "level": "level1", "llm_response": "```yaml\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows: [build-ci]\n    types: [completed]\n\njobs:\n  k3s:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    concurrency: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n\n  rke2:\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    concurrency: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"id": "63c49f4a1842bc13d7796221", "level": "level1", "llm_response": "```yaml\nname: Manual Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_token:\n        description: 'Release Token'\n        required: true\n        type: string\n      release_reason:\n        description: 'Reason for this manual release'\n        required: true\n        type: string\n\njobs:\n  token-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check release token\n        run: echo \"The provided release token is ${{ github.event.inputs.release_token }}\"\n\n  hub-integration:\n    needs: token-check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Integrate with Hub\n        run: echo \"Integrating with Hub using the release token and reason: ${{ github.event.inputs.release_token }} - ${{ github.event.inputs.release_reason }}\"\n\n  regular-release:\n    needs: [token-check, hub-integration]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Perform Regular Release\n        run: echo \"Performing regular release using the release token and reason: ${{ github.event.inputs.release_token }} - ${{ github.event.inputs.release_reason }}\"\n```", "answer": "```yaml name: Manual Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_token:\n        description: 'Your release token'\n        required: true\n      release_reason:\n        description: 'Short reason for this manual release'\n        required: true\n\njobs:\n  token-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check release token\n        id: token-check\n        run: | \n          touch SUCCESS\n        if: inputs.release_token == env.release_token\n        env:\n          release_token: ${{ secrets.JINA_CORE_RELEASE_TOKEN }}\n      - name: Fail release token\n        run: |\n          [[ -f SUCCESS ]]\n\n\n  hub-integration:\n    needs: token-check\n    uses: jina-ai/hub-integration/.github/workflows/main.yml@main\n    with:\n      actions: 'all'\n    secrets:\n      jina_dev_bot: ${{ secrets.JINA_DEV_BOT }}\n      jina_auth_token: ${{ secrets.JINA_AUTH_TOKEN }}\n\n  regular-release:\n    needs: [token-check]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.5.0\n        with:\n          token: ${{ secrets.JINA_DEV_BOT }}\n          fetch-depth: 100  # means max contribute history is limited to 100 lines\n#          submodules: true\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.7\n        # https://github.com/actions/checkout#fetch-all-tags\n      - run: |\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n          npm install git-release-notes\n          pip install twine wheel\n          ./scripts/release.sh final \"${{ github.event.inputs.release_reason }}\" \"${{github.actor}}\"\n        env:\n          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\n          JINA_SLACK_WEBHOOK: ${{ secrets.JINA_SLACK_WEBHOOK }}\n      - if: failure()\n        run: echo \"nothing to release\"\n      - name: bumping master version\n        uses: ad-m/github-push-action@v0.6.0\n        with:\n          github_token: ${{ secrets.JINA_DEV_BOT }}\n          tags: true\n          branch: ${{ github.ref }}\n```"}
{"id": "63c49855517fc08c1eedcd57", "level": "level1", "llm_response": "```yaml\nname: Close stale issues\n\non:\n  schedule:\n    - cron: '30 1 * * *'\n  workflow_dispatch:\n\npermissions:\n  issues: write\n  pull-requests: write\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      \n      - name: Install dependencies\n        run: npm install\n      \n      - name: Run script to close stale issues\n        run: npm run close-stale-issues\n```", "answer": "```yaml name: Close stale issues\n\non:\n  schedule:\n    - cron: \"30 1 * * *\"\n  workflow_dispatch:\n\npermissions:\n  issues: write\n  pull-requests: write\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      # https://github.com/marketplace/actions/close-stale-issues\n      - name: Close stale issues\n        uses: actions/stale@v6\n        with:\n          stale-issue-label: stale\n          exempt-all-assignees: true\n          exempt-issue-labels: pinned,security\n\n          days-before-issue-stale: 30\n          stale-issue-message: |\n            This issue has been automatically marked as stale because it has not\n            had recent activity. It will be closed if no further activity occurs.\n          days-before-issue-close: 7\n          close-issue-message: |\n            This issue has not seen any activity since it was marked stale.\n            Closing.\n\n          stale-pr-label: stale\n          exempt-pr-labels: pinned,security\n\n          days-before-pr-stale: 30\n          stale-pr-message: |\n            This pull request has been automatically marked as stale because it\n            has not had recent activity. It will be closed if no further activity\n            occurs. Thank you for your contributions.\n          days-before-pr-close: 7\n          close-pr-message: |\n            This pull request has not seen any activity since it was marked stale.\n            Closing.\n```"}
{"id": "63c4a0c11842bc13d779fadd", "level": "level1", "llm_response": "```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  create_release:\n    id: create_release\n    runs-on: ubuntu-latest\n    steps:\n      # Add steps for creating release here\n\n  build_wheels:\n    id: build_wheels\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [windows-latest, macos-latest]\n        python-version: [3.7, 3.8, 3.9]\n    steps:\n      # Add steps for building wheels here\n\n  build_wheels_linux:\n    id: build_wheels_linux\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.7, 3.8, 3.9]\n    steps:\n      # Add steps for building wheels on Linux here\n```", "answer": "```yaml name: Release\n# This workflow builds the wheels \"on tag\".\n# If run from the hyperspy/hyperspy repository, the wheels will be uploaded to pypi ;\n# otherwise, the wheels will be available as a github artifact.\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\njobs:\n  create_release:\n    permissions:\n      contents: write\n    name: Create Release\n    runs-on: ubuntu-latest\n    outputs: \n      upload_url: ${{ steps.create_release.outputs.upload_url }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n      - name: Create Release\n        id: create_release\n        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions\n        with:\n          draft: false\n          prerelease: false\n\n  build_wheels:\n    name: Wheels on ${{ matrix.os }}/py${{ matrix.python-version }}\n    needs: create_release\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest, macos-latest]\n        python-version: ['3.7', '3.8', '3.9', '3.10']\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: What OS and Python version\n        run: |\n          uname -a\n          python --version\n          which python\n\n      - name: install build and twine\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install build twine\n\n      - name: Build wheels\n        run: |\n          python -m build\n\n      - name: Display content dist folder\n        run: |\n          ls dist/\n\n      - name: Install and test distribution\n        env:\n          MPLBACKEND: agg\n        run: |\n          pip install --pre --find-links dist hyperspy[tests]\n          pytest --pyargs hyperspy\n\n      - uses: actions/upload-artifact@v3\n        with:\n          path: ./dist/*.whl\n\n      - name: Publish wheels to PyPI\n        if: github.repository_owner == 'hyperspy'\n        env:\n          # Github secret set in the hyperspy/hyperspy repository\n          # Not available from fork or pull request\n          # Secrets are not passed to workflows that are triggered by a pull request from a fork\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: |\n          twine upload dist/*.whl --verbose\n\n  build_wheels_linux:\n    name: Wheels on ubuntu-latest\n    needs: create_release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: install twine\n        run: |\n          python -m pip install twine\n\n      - name: Build source distribution\n        run: |\n          pip install build\n          python -m build --sdist\n\n      - name: Build manylinux Python wheels\n        uses: RalfG/python-wheels-manylinux-build@c244013d850d8df62e9c7dd3ddab0cc581308de6\n        with:\n          python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310'\n          build-requirements: 'cython'\n\n      - name: Display content dist folder\n        run: |\n          ls dist/\n\n      - name: Install and test distribution\n        env:\n          MPLBACKEND: agg\n        run: |\n          pip install --pre --find-links dist hyperspy[tests]\n          pytest --pyargs hyperspy\n\n      - uses: actions/upload-artifact@v3\n        with:\n          path: |\n            ./dist/*-manylinux*.whl\n            ./sdist/*.tar.gz\n\n      - name: Publish wheels to PyPI\n        if: github.repository_owner == 'hyperspy'\n        env:\n          # Github secret set in the hyperspy/hyperspy repository\n          # Not available from fork or pull request\n          # Secrets are not passed to workflows that are triggered by a pull request from a fork\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: |\n          twine upload dist/*-manylinux*.whl --verbose \n          twine upload dist/*.tar.gz --verbose \n\n```"}
{"id": "63c49e201842bc13d778ec70", "level": "level1", "llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up C compiler\n        run: sudo apt-get update && sudo apt-get install -y build-essential\n      \n      - name: Run labeler script\n        run: ./label_pr.sh\n```", "answer": "```yaml name: 'Pull Request Labeler'\non:\n  - pull_request_target\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v3.0.0\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n```"}
{"id": "63c4956f8052faa2781b1cd4", "level": "level1", "llm_response": "```yaml\nname: Android CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v2\n        with:\n          java-version: '1.8'\n          distribution: 'adopt'\n\n      - name: Grant execute permission for gradlew\n        run: chmod +x ./gradlew\n\n      - name: Build with Gradle\n        run: ./gradlew build\n```", "answer": "```yaml name: Android CI\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      CCACHE_DIR: ${{ github.workspace }}/.ccache\n      CCACHE_COMPILERCHECK: \"%compiler% -dumpmachine; %compiler% -dumpversion\"\n      CCACHE_NOHASHDIR: true\n      CCACHE_MAXSIZE: 1G\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: 0\n      - name: Setup JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n          cache: 'gradle'\n      - name: Retrieve version\n        run: |\n          echo VERSION=$(echo ${{ github.event.head_commit.id }} | head -c 10) >> $GITHUB_ENV\n      - name: Set up ccache\n        uses: hendrikmuhs/ccache-action@v1.2\n        with:\n          key: ${{ runner.os }}-${{ github.sha }}\n          restore-keys: ${{ runner.os }}\n      - name: Cache gradle build\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches/build-cache-*\n          key: gradle-builds-${{ github.sha }}\n          restore-keys: gradle-builds\n      - name: Build with Gradle\n        run: |\n          echo 'org.gradle.caching=true' >> gradle.properties\n          echo 'org.gradle.parallel=true' >> gradle.properties\n          echo 'org.gradle.vfs.watch=true' >> gradle.properties\n          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties\n          echo 'android.native.buildOutput=verbose' >> gradle.properties\n          ./gradlew -PappVerName=${{ env.VERSION }} assembleRelease assembleDebug\n      - name: Upload built apk\n        if: success()\n        uses: actions/upload-artifact@v3\n        with:\n          name: snapshot\n          path: |\n              ${{ github.workspace }}/app/build/outputs/apk\n              ${{ github.workspace }}/app/build/outputs/mapping\n      - name: Post to channel\n        if: github.ref == 'refs/heads/master'\n        env:\n          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}\n          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}\n          FILE: ${{ github.workspace }}/app/release/BiliRoaming_${{ env.VERSION }}.apk\n          COMMIT_MESSAGE: |+\n            New push to github\\!\n            ```\n            ${{ github.event.head_commit.message }}\n            ```by `${{ github.event.head_commit.author.name }}`\n            See commit detail [here](${{ github.event.head_commit.url }})\n            Snapshot apk is attached \\(unsupported by TAICHI\\)\n        run: |\n          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ[\"COMMIT_MESSAGE\"])))'`\n          curl -v \"https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D\"  -F release=\"@$FILE\"\n```"}
{"id": "63c49f1bb008460c1df4ba38", "level": "level1", "llm_response": "```yaml\nname: Sync contributor base branch on change\n\non:\n  pull_request:\n    types: [edited, synchronize]\n    branches:\n      - 'contrib/**'\n\njobs:\n  sync_contributor_base_branch:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      # Add your synchronization logic here\n```", "answer": "```yaml name: Sync contributor base branch on change\non:\n  pull_request_target:\n    types:\n      - edited\n      - synchronize\n    branches:\n      - 'contrib/**'\n\npermissions:\n  contents: read\n\njobs:\n  sync_contributor_base_branch:\n    runs-on: ubuntu-latest\n    if: github.repository == 'demisto/content' && github.event.pull_request.head.repo.fork == true && contains(github.head_ref, 'xsoar-bot-contrib-ContributionTestPack') == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.9'\n      - name: Install Python Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pipenv==2021.5.29\n      - name: Sync Base Branch to Master\n        env:\n          CONTENTBOT_GH_ADMIN_TOKEN: ${{ secrets.CONTENTBOT_GH_ADMIN_TOKEN }}\n        run: |\n          echo \"Updating contribution base branch (contrib/*)\"\n          cd Utils/github_workflow_scripts\n          pipenv sync\n          pipenv run ./sync_contrib_base.py --branch_name ${{ github.event.pull_request.base.ref }}\n          echo \"Finished updating base branch\"\n```"}
{"id": "63c49ed8517fc08c1ef0615e", "level": "level1", "llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build project\n      run: npm run build\n\n    - name: Create release\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        npx semantic-release --no-ci\n```", "answer": "```yaml name: Create release\n\non:\n  push:\n    tags:\n      - \"v*\" # Push events to matching v*, i.e. v1.0, v20.15.10\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n        with:\n          fetch-depth: 0 # Fetch all tags\n\n      - name: Create Release for Tag\n        id: release_tag\n        uses: Akryum/release-tag@conventional\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          preset: angular # Use conventional-changelog preset\n```"}
{"id": "63c49f0533b087f6bde63878", "level": "level1", "llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  release:\n    types: [ created ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '20 13 * * 2'\n\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '7.4'\n\n      - name: Install dependencies\n        run: composer install --no-interaction --prefer-dist\n\n      - name: Run tests\n        run: vendor/bin/phpunit\n```", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n  # Every Tuesday at 1:20pm UTC\n  schedule:\n    - cron: '20 13 * * 2'\n\njobs:\n  ci:\n    name: CI\n    # Only run cron on the silverstripe account\n    if: (github.event_name == 'schedule' && github.repository_owner == 'silverstripe') || (github.event_name != 'schedule')\n    uses: silverstripe/gha-ci/.github/workflows/ci.yml@v1\n```"}
{"id": "63c497806fc19abdf9ca2fc8", "level": "level1", "llm_response": "```yaml\nname: FOSSA License Scan\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  fossa-scan:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n      - name: Run FOSSA scan\n        run: |\n          curl -sSL https://dl.fossa.io/fossa-cli/latest | sh\n          fossa init --project-name your-project-name\n          fossa analyze\n```", "answer": "```yaml name: FOSSA License Scan\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  fossa-scan:\n    if: ${{ github.repository == 'crackthecodeabhi/kreds' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Run FOSSA Scan\n        uses: fossas/fossa-action@v1\n        with:\n          api-key: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"id": "63c49eb5cbc73931bb1af27c", "level": "level1", "llm_response": "```yaml\nname: Test build package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      \n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      \n      - name: Build package\n        run: |\n          python setup.py sdist bdist_wheel\n      \n      - name: Upload distribution packages\n        uses: actions/upload-artifact@v2\n        with:\n          name: dist-package\n          path: dist/\n```", "answer": "```yaml name: Test build package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    uses: fizyk/actions-reuse/.github/workflows/pypi.yml@v1.3.2\n```"}
{"id": "63c5c4b5ac4f2678a5bd2e8c", "level": "level1", "llm_response": "```yaml\nname: Maestro tests\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  workflow_dispatch:\n\nconcurrency:\n  group: maestro-tests-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  maestro-tests:\n    runs-on: ubuntu-latest\n    steps:\n      # Add your steps here\n```", "answer": "```yaml name: Maestro tests\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  workflow_dispatch:\n\nconcurrency:\n  group: maestro-tests-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  maestro-tests:\n    runs-on: [ macos-latest ]\n    steps:\n      - name: Checkout Android source\n        uses: actions/checkout@v3\n\n      - name: set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Install Maestro\n        run: |\n          brew tap mobile-dev-inc/tap\n          brew install maestro\n\n      - name: Maestro tests\n        id: run-maestro-tests\n        uses: reactivecircus/android-emulator-runner@v2\n        with:\n          api-level: 31\n          arch: x86_64\n          disable-animations: true\n          disk-size: 8G\n          script: >\n            adb root\n            \n            ./gradlew\n            -PmaestroTests=true\n            -PsentryDsn=${{ secrets.SENTRY_DSN }}\n            -PsentryEnvironment=staging\n            -PmanifestEndpoint=${{ secrets.MANIFEST_ENDPOINT }}\n            :app:installStagingRelease\n            \n            maestro test\n            -e number=${{ secrets.TEST_LOGIN_PHONE_NUMBER }}\n            -e pin=${{ secrets.TEST_LOGIN_PIN }}\n            -e otp=${{ secrets.TEST_LOGIN_OTP }}\n            maestroUiFlows/login_flow.yaml\n            \n            adb uninstall org.simple.clinic.staging\n```"}
{"id": "63c49e751e336480757ada00", "level": "level1", "llm_response": "```yaml\nname: build-release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build-release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Build with Maven\n      run: mvn clean install\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@v2\n      with:\n        name: release-jar\n        path: target/*.jar\n```", "answer": "```yaml name: build-release\non: \n  push:\n    tags:\n      - v*\njobs:\n  build-release:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@154c24e1f33dbb5865a021c99f1318cfebf27b32\n        with:\n          buildkitd-flags: --debug\n\n      - name: Checkout\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n\n      - name: Create output dir\n        run: |\n          mkdir -p apk\n\n      - name: Build\n        uses: docker/build-push-action@9379083e426e2e84abb80c8c091f5cdeb7d3fd7a\n        with:\n          file: android/Dockerfile\n          context: .\n          outputs: apk\n\n      - name: Upload APK\n        uses: actions/upload-artifact@e448a9b857ee2131e752b06002bf0e093c65e571\n        with:\n          name: apk\n          path: apk/apolloui-prod-release-unsigned.apk\n\n      - name: Upload mapping\n        uses: actions/upload-artifact@e448a9b857ee2131e752b06002bf0e093c65e571\n        with:\n          name: mapping\n          path: apk/mapping.txt\n```"}
{"id": "63c49c7a1899db58864fa34d", "level": "level1", "llm_response": "```yaml\nname: Icon EmacsIcon3\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - icons/EmacsIcon3.icns\n      - .github/workflows/icon-EmacsIcon3.yml\n  pull_request:\n    paths:\n      - icons/EmacsIcon3.icns\n      - .github/workflows/icon-EmacsIcon3.yml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      # Add your build steps here\n```", "answer": "```yaml # This file is automatically generated by iconset script.\n#\n# DO NOT MODIFY it manually.\n\nname: Icon EmacsIcon3\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - \"icons/EmacsIcon3.icns\"\n      - \".github/workflows/icon-EmacsIcon3.yml\"\n  pull_request:\n    paths:\n      - \"icons/EmacsIcon3.icns\"\n      - \".github/workflows/icon-EmacsIcon3.yml\"\n\njobs:\n  build:\n    runs-on: macos-11\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build emacs-plus with EmacsIcon3 icon\n        run: brew install Aliases/$(readlink Aliases/emacs-plus) --with-EmacsIcon3-icon\n\n      - name: Test installation\n        run: $(brew --prefix)/bin/emacs --batch --eval='(print (+ 2 2))'\n```"}
{"id": "63c5c55aac4f2678a5bd5363", "level": "level1", "llm_response": "```yaml\nname: Issue Template Bot\n\non:\n  issues:\n    types: [opened, edited]\n  pull_request:\n    types: [edited]\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run bot\n        run: npm start\n```", "answer": "```yaml name: Issue Template Bot\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Run Bot\n        uses: ./.github/actions/issue_template_bot\n        with: \n          token: ${{ secrets.GITHUB_TOKEN }}\n          config_path: \".github/issue_template_bot.json\"```"}
{"id": "63c49ad4cbc73931bb196454", "level": "level1", "llm_response": "```yaml\nname: build\n\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n    tags:\n      - '*'\n  repository_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n\n    - name: Build with Maven\n      run: mvn clean install\n```", "answer": "```yaml name: build\n\non: [ pull_request, push ]\n\njobs:\n  build:\n    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n      - name: Validate Gradle Wrapper\"\n        uses: gradle/wrapper-validation-action@v1\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n      - name: Clean Build\n        run: ./gradlew clean build\n      - name: Determine release status\n        if: ${{ runner.os == 'Linux' }}\n        run: |\n          if [ \"$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\\-SNAPSHOT')\" ]; then\n            echo \"STATUS=snapshot\" >> $GITHUB_ENV\n          else\n            echo \"STATUS=release\" >> $GITHUB_ENV\n          fi\n      - name: Publish Release\n        if: ${{ runner.os == 'Linux' && env.STATUS == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6'}}\n        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository\n        env:\n          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}\n          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}\n          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}\n          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}\n      - name: Publish Snapshot\n        if: ${{ runner.os == 'Linux' && env.STATUS != 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6' }}\n        run: ./gradlew publishToSonatype\n        env:\n          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}\n          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}\n      - name: Publish core javadoc\n        if: ${{ runner.os == 'Linux' && env.STATUS == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6'}}\n        uses: cpina/github-action-push-to-another-repository@main\n        env:\n          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}\n        with:\n          source-directory: 'Core/build/docs/javadoc'\n          destination-github-username: 'IntellectualSites'\n          destination-repository-name: 'plotsquared-javadocs'\n          user-email: ${{ secrets.USER_EMAIL }}\n          target-branch: main\n          target-directory: core\n      - name: Publish bukkit javadoc\n        if: ${{ runner.os == 'Linux' && env.STATUS == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6'}}\n        uses: cpina/github-action-push-to-another-repository@main\n        env:\n          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}\n        with:\n          source-directory: 'Bukkit/build/docs/javadoc'\n          destination-github-username: 'IntellectualSites'\n          destination-repository-name: 'plotsquared-javadocs'\n          user-email: ${{ secrets.USER_EMAIL }}\n          target-branch: main\n          target-directory: bukkit\n```"}
{"id": "63c49a5533b087f6bde4507f", "level": "level1", "llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n    types: [opened, closed]\n  issues:\n    types: [opened, closed]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      \n      - name: Install dependencies\n        run: npm install\n      \n      - name: Run script\n        run: echo \"Hello, world!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Thanks a lot for opening your first issue with us! \ud83e\udde1 We''ll get back to you shortly! \u23f3 If it was a _Support Request_, please check [our extensive CTF manual](https://pwning.owasp-juice.shop/part1/ctf.html) first. Also, please consider asking on the [community chat](../#troubleshooting-) next time! \ud83d\udcac'\n          pr-message: 'Thanks a lot for your contribution! \ud83d\udc96 This seems to be you first PR! \ud83c\udf20 If it''s getting merged & complies with our [contribution guidelines](../blob/master/CONTRIBUTING.md), you are probably eligible to some free stickers! \ud83c\udf81'\n```"}
{"id": "63c4a13a517fc08c1ef14c68", "level": "level1", "llm_response": "```yaml\nname: release\n\non:\n  workflow_dispatch:\n    inputs:\n      tag-this:\n        description: 'Tag and release to create'\n        required: true\n        type: string\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_ENV: .env\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      \n      - name: Build project\n        run: go build -o myapp .\n      \n      - name: Create release\n        run: |\n          echo \"VERSION=${{ github.event.inputs.tag-this }}\" >> $GITHUB_ENV\n          gh release create ${{ github.event.inputs.tag-this }} --title \"Release ${{ github.event.inputs.tag-this }}\" --notes \"Release notes for version ${{ github.event.inputs.tag-this }}\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: release\non:\n  workflow_dispatch:\n    # Inputs the workflow accepts.\n    inputs:\n      tag:\n        description: 'tag and release to create'\n        # Input has to be provided for the workflow to run\n        required: true\nenv:\n  GITHUB_ENV: \".env\"\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n        with:\n          ref: master\n      - name: Install go\n        uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version-file: go.mod\n      - name: Login to dockerhub to push the image\n        run: echo \"${{ secrets.DockerHubToken }}\" | docker login --username ${DOCKER_USER} --password-stdin\n        env:\n          DOCKER_USER: ${{ secrets.DockerHubUser }}\n      - name: Publish Docker Image\n        env:\n          VERSION: ${{ github.event.inputs.tag }}\n        run: make ci publish\n      - name: run make bump-version\n        run: make bump-version\n        env:\n          NEW_VERSION: ${{ github.event.inputs.tag }}\n      - name: commit manifests\n        uses: EndBug/add-and-commit@61a88be553afe4206585b31aa72387c64295d08b\n        with:\n          message: \"create release manifests for ${{ github.event.inputs.tag }}\"\n          add: \"releases/ VERSION CHANGELOG.md\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # target commit should be the commit with the new release manifest, not the commit when workflow was triggered\n      - name: find target commit to tag\n        run: |\n          sha=$(git rev-parse HEAD)\n          echo \"TARGET_SHA=$sha\" >> $GITHUB_ENV\n      - name: Create GitHub Release\n        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          target_commitish: ${{ env.TARGET_SHA }}\n          tag_name: ${{ github.event.inputs.tag }}\n          name: Release ${{ github.event.inputs.tag }}\n          body: See the [CHANGELOG](https://github.com/digitalocean/digitalocean-cloud-controller-manager/blob/${{ github.event.inputs.tag }}/CHANGELOG.md) for details.\n```"}
{"id": "63c49b51cbc73931bb199777", "level": "level1", "llm_response": "```yaml\nname: Nightly Master Snapshot\n\non:\n  schedule:\n    - cron: '30 6 * * *'\n\npermissions:\n  contents: read\n\nenv:\n  JAVA_OPTS: \"-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xms60M -Xmx1G -XX:InitialCodeCacheSize=40M -XX:ReservedCodeCacheSize=120M\"\n\njobs:\n  publish-snapshot:\n    runs-on: ubuntu-latest\n    steps:\n      # Add your steps here\n```", "answer": "```yaml name: Nightly Master Snapshot\n\non:\n  schedule:\n    - cron: '30 6 * * *'\n\nenv:\n  JAVA_OPTS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xms60M -Xmx1G -XX:InitialCodeCacheSize=40M -XX:ReservedCodeCacheSize=120M'\n\npermissions:\n  contents: read\n\njobs:\n  publish-snapshot:\n    permissions:\n      contents: none\n    if: ${{ github.ref == 'refs/heads/master' }}\n    uses: jruby/jruby/.github/workflows/snapshot-publish.yml@6cd0d4d96d9406635183d81cf91acc82cd78245f\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n```"}
{"id": "63c49c0c1899db58864f76f8", "level": "level1", "llm_response": "```yaml\nname: Beta Branch CI\n\non:\n  push:\n    branches:\n      - beta\n  pull_request:\n    branches:\n      - beta\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  stable-tests-on-beta:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      # Add your steps here\n\n  android-build:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      # Add your steps here\n\n  ios-build:\n    runs-on: macos-latest\n    defaults:\n      run:\n        shell: bash\n    steps:\n      # Add your steps here\n```", "answer": "```yaml name: Beta Branch CI\n\n# Declare default permissions as read only.\npermissions: read-all\n\non:\n  push:\n    branches: [beta]\n  pull_request:\n    branches: [beta]\n  workflow_dispatch:\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  # Run the stable test script on the beta channel. Since this branch will soon\n  # be merged into main as our stable-targeting code, this is the key thing we\n  # need to test.\n  stable-tests-on-beta:\n    runs-on: ${{ matrix.os }}\n    if: github.repository == 'flutter/samples'\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc\n        with:\n          distribution: 'zulu'\n          java-version: '12.x'\n      - uses: subosito/flutter-action@dbf1fa04f4d2e52c33185153d06cdb5443aa189d\n        with:\n          channel: beta\n      - run: ./tool/flutter_ci_script_stable.sh\n  # Verify the Android add-to-app samples build and pass tests with the beta\n  # channel.\n  android-build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'flutter/samples'\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc\n        with:\n          distribution: 'zulu'\n          java-version: '12.x'\n      - uses: subosito/flutter-action@dbf1fa04f4d2e52c33185153d06cdb5443aa189d\n        with:\n          channel: beta\n      - run: ./tool/android_ci_script.sh\n  # Verify the iOS add-to-app samples build and pass tests with the beta\n  # channel.\n  ios-build:\n    runs-on: macos-latest\n    if: github.repository == 'flutter/samples'\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc\n        with:\n          distribution: 'zulu'\n          java-version: '12.x'\n      - uses: subosito/flutter-action@dbf1fa04f4d2e52c33185153d06cdb5443aa189d\n        with:\n          channel: beta\n      - run: ./tool/ios_ci_script.sh\n```"}
{"id": "63c49f35517fc08c1ef0871c", "level": "level1", "llm_response": "```yaml\nname: Add new issue/PR to project\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [opened]\n\njobs:\n  add-to-project:\n    id: add-to-project\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Add issue or PR to project\n        run: |\n          echo \"Adding issue or PR to project\"\n          # Add your custom logic here to add the issue or PR to the project\n```", "answer": "```yaml name: Add new issue/PR to project\n\non:\n  issues:\n    types:\n      - opened\n      \n  pull_request_target:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add issue or PR to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@v0.3.0\n        with:\n          project-url: https://github.com/orgs/rapidsai/projects/51\n          github-token: ${{ secrets.ADD_TO_PROJECT_GITHUB_TOKEN }}\n```"}
{"id": "63c49b7dcbc73931bb19aa9f", "level": "level1", "llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Deploy to production\n        run: npm run deploy\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [main]\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@master\n      - name: vuepress-deploy\n        uses: jenkey2011/vuepress-deploy@master\n        env:\n          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n          TARGET_REPO: FEDarling/weekly-tracker\n          TARGET_BRANCH: pages\n          BUILD_SCRIPT: yarn && yarn build\n          BUILD_DIR: public\n```"}
{"id": "63c4981fb008460c1df1f128", "level": "level1", "llm_response": "```yaml\nname: Remove Label\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  remove-safe-to-test-label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      \n      - name: Remove label\n        run: |\n          gh pr edit ${{ github.event.pull_request.number }} --remove-label \"safe-to-test\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Remove Label\non: [ pull_request ]\njobs:\n  remove-safe-to-test-label:\n    runs-on: ubuntu-latest\n    name: Remove Label\n    steps:\n      - name:\n        uses: buildsville/add-remove-label@v1\n        with:\n          token: ${{secrets.GITHUB_TOKEN}}\n          label: safe-to-test\n          type: remove\n```"}
{"id": "63c49ab2517fc08c1eeeba89", "level": "level1", "llm_response": "```yaml\nname: Coverage\n\non:\n  push:\n    branches:\n      - master\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run unit tests\n        run: npm test\n```", "answer": "```yaml # Runs tests for all packages after pushes to master to check code coverage on a project level\nname: Coverage\n\non:\n  push:\n    branches:\n      - master\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Unit tests\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile --no-progress --non-interactive\n\n      - name: Test\n        run: yarn test --all --coverage\n```"}
{"id": "63c499c86fc19abdf9cb1f2a", "level": "level1", "llm_response": "```yaml\nname: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\njobs:\n  lint:\n    id: golangci\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run golangci-lint\n        run: |\n          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n          golangci-lint run\n```", "answer": "```yaml name: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\n# Remove all permissions from GITHUB_TOKEN except metadata.\npermissions: {}\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        working-directory:\n          - \"\"\n          - test\n          - hack/tools\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.50.0\n          working-directory: ${{matrix.working-directory}}\n```"}
{"id": "63c497e16fc19abdf9ca57f3", "level": "level1", "llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issues:\n    types: [commented]\n  pull_request:\n    types: [opened, closed, synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      \n      - name: Install dependencies\n        run: npm install\n      \n      - name: Run CLA Assistant\n        run: npx cla-assistant\n```", "answer": "```yaml name: 'CLA Assistant'\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened, closed, synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'CLA Assistant'\n        if: github.base_ref != 'main' && ((github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target')\n        # Alpha Release\n        uses: gnosis/github-action@master\n        # GitHub token, automatically provided to the action\n        # (No need to define this secret in the repo settings)\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-cla-document: 'https://github.com/gnosis/cowswap/blob/develop/docs/GNOSIS_CLA.md'\n          branch: 'cla-signatures'\n          allowlist: dependabot,mergify,alfetopito,anxolin,W3stside,nenadV91,annamsgeorge,avsavsavs,c3rnst,cmagan,josojo,davidalbela,fedgiac,fleupold,giacomolicari,GabrielCamba,nlordell,alongoni,elena-zh,henrypalacios,matextrem,ramirotw\n          empty-commit-flag: false\n          blockchain-storage-flag: false\n```"}
{"id": "63c4985d517fc08c1eedd0a0", "level": "level1", "llm_response": "```yaml\nname: Browser PR e2e tests\n\non:\n  pull_request:\n    branches:\n      - master\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  e2e-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      \n      - name: Install dependencies\n        run: npm install\n      \n      - name: Run e2e tests\n        run: npm test -- --browser=chrome\n```", "answer": "```yaml name: 'Browser PR e2e tests'\n\non:\n  pull_request:\n    branches: [master]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  e2e-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        neo4j-version:\n          - 3.5\n          - 4.3\n          - 4.4\n        neo4j-edition:\n          - community\n          - enterprise\n    services:\n      neo4j:\n        image: neo4j:${{ matrix.neo4j-version }}-${{ matrix.neo4j-edition }}\n        env:\n          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes\n        ports:\n          - 7687:7687\n          - 7474:7474\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - run: npm -g install yarn serve\n      - run: yarn install --frozen-lockfile\n      - run: yarn build\n      - run: sudo apt-get update\n      - run: sudo apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n      - run: npx serve -l 8080 dist & npm run wait-on-neo4j && yarn wait-on-dev\n      - run: echo \"Servers ready!\"\n      - run: yarn e2e --env server=${{ matrix.neo4j-version }},browser-password=password,edition=${{ matrix.neo4j-edition }}\n      - name: Upload test screenshots\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-screenshots-${{ matrix.neo4j-version }}-${{ matrix.neo4j-edition }}\n          path: |\n            ./e2e_tests/screenshots\n            ./e2e_tests/videos\n```"}
{"id": "63c49e06b008460c1df44dbd", "level": "level1", "llm_response": "```yaml\nname: Release Published\n\non:\n  release:\n    types: [published, prereleased, drafted]\n  workflow_dispatch:\n\ninputs:\n  tag-this:\n    description: 'Release tag'\n    required: true\n    default: ''\n\njobs:\n  setup:\n    id: setup\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n\n  deploy_maven:\n    id: deploy_maven\n    needs: setup\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to Maven Central\n        run: |\n          mvn clean deploy -DskipTests=true -Prelease -DreleaseVersion=${{ github.event.release.tag_name }} -Dtag=${{ inputs.tag-this }}\n        env:\n          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}\n\n  deploy_javadocs:\n    id: deploy_javadocs\n    needs: setup\n    runs-on: ubuntu-latest\n    steps:\n      - name: Upload Javadocs\n        run: |\n          mvn javadoc:javadoc\n          scp -P 8080 -r target/site/apidocs user@host:/path/to/javadocs\n        env:\n          SCP_HOST: ${{ secrets.SCP_HOST }}\n          SCP_USER: ${{ secrets.SCP_USER }}\n          SCP_PASSWORD: ${{ secrets.SCP_PASSWORD }}\n```", "answer": "```yaml name: Release Published\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Release Tag'\n        required: true\n\njobs:\n  setup:\n    name: Setup\n    runs-on: ubuntu-latest\n    outputs:\n      tag: ${{ steps.collect-data.outputs.tag }}\n      version: ${{ steps.collect-data.outputs.version }}\n    steps:\n      - name: Collect Data\n        id: collect-data\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let tag;\n            if (context.payload.inputs) {\n              tag = context.payload.inputs.tag;\n            } else {\n              tag = context.payload.release.tag_name;\n            }\n\n            let version = tag.replace(/^v/, \"\");\n\n            core.setOutput(\"tag\", tag);\n            core.setOutput(\"version\", version);\n\n      - run: |\n          echo \"Publishing version ${{ steps.collect-data.outputs.version }} from ${{ steps.collect-data.outputs.tag }}\"\n\n  deploy_maven:\n    name: Deploy to Maven\n    needs: [ setup ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download release assets\n        uses: robinraju/release-downloader@v1.5\n        with:\n          repository: \"liquibase/liquibase\"\n          tag: \"${{ needs.setup.outputs.tag }}\"\n          filename: \"*\"\n          out-file-path: \".\"\n\n      - name: Set up Java for publishing to Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n          server-id: sonatype-nexus-staging\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.GPG_SECRET }}\n          gpg-passphrase: GPG_PASSPHRASE\n        env:\n          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Publish to Maven Central\n        env:\n          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.SONATYPE_TOKEN }}\n          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}\n        run: |\n          version=${{ needs.setup.outputs.version }}\n\n          unzip liquibase-additional-*.zip\n\n          ##extracts and sign poms\n          unzip -j liquibase-core-${version}.jar META-INF/maven/org.liquibase/liquibase-core/pom.xml\n          mv pom.xml liquibase-core-${version}.pom\n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-core-${version}.pom\n\n          unzip -j liquibase-maven-plugin-${version}.jar META-INF/maven/org.liquibase/liquibase-maven-plugin/pom.xml\n          mv pom.xml liquibase-maven-plugin-${version}.pom\n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-maven-plugin-${version}.pom\n\n          unzip -j liquibase-cdi-${version}.jar META-INF/maven/org.liquibase/liquibase-cdi/pom.xml\n          mv pom.xml liquibase-cdi-${version}.pom\n          sed -i -e \"s/<description>/<name>Liquibase CDI Plugin<\\/name><description>/\" liquibase-cdi-${version}.pom   ## name didn't end up in pom. Hack it in for now\n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-cdi-${version}.pom\n\n          unzip -j liquibase-commercial-${version}.jar META-INF/maven/org.liquibase/liquibase-commercial/pom.xml\n          mv pom.xml liquibase-commercial-${version}.pom\n          sed -i -e \"s/<\\/licenses>/<\\/licenses><scm><connection>private<\\/connection><developerConnection>private<\\/developerConnection><url>private<\\/url><\\/scm>/\" liquibase-commercial-${version}.pom   ## scm info not in the pom          \n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-commercial-${version}.pom\n          \n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-core-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-core-${version}.jar \\\n            -Dsources=liquibase-core-${version}-sources.jar \\\n            -Djavadoc=liquibase-core-${version}-javadoc.jar \\\n            -Dfiles=liquibase-core-${version}.jar.asc,liquibase-core-${version}-sources.jar.asc,liquibase-core-${version}-javadoc.jar.asc,liquibase-core-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-commercial-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-commercial-${version}.jar \\\n            -Dsources=liquibase-commercial-${version}-sources.jar \\\n            -Djavadoc=liquibase-commercial-${version}-javadoc.jar \\\n            -Dfiles=liquibase-commercial-${version}.jar.asc,liquibase-commercial-${version}-sources.jar.asc,liquibase-commercial-${version}-javadoc.jar.asc,liquibase-commercial-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-maven-plugin-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-maven-plugin-${version}.jar \\\n            -Dsources=liquibase-maven-plugin-${version}-sources.jar \\\n            -Djavadoc=liquibase-maven-plugin-${version}-javadoc.jar \\\n            -Dfiles=liquibase-maven-plugin-${version}.jar.asc,liquibase-maven-plugin-${version}-sources.jar.asc,liquibase-maven-plugin-${version}-javadoc.jar.asc,liquibase-maven-plugin-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-cdi-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-cdi-${version}.jar \\\n            -Dsources=liquibase-cdi-${version}-sources.jar \\\n            -Djavadoc=liquibase-cdi-${version}-javadoc.jar \\\n            -Dfiles=liquibase-cdi-${version}.jar.asc,liquibase-cdi-${version}-sources.jar.asc,liquibase-cdi-${version}-javadoc.jar.asc,liquibase-cdi-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          ## Release repository\n          ## Have to find the stagingRepositoryId that was auto-generated\n          rcList=$(mvn -B org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-list -DnexusUrl=https://oss.sonatype.org/ -DserverId=sonatype-nexus-staging)\n          #echo $rcList\n\n          stagingRepositoryId=$(echo $rcList | grep -o \"\\[INFO\\] orgliquibase-[0-9]*[ ]*OPEN\" | grep -o \"orgliquibase-[0-9]*\")\n          echo \"Staging Repository Id: $stagingRepositoryId\"\n\n          if [ \"$(echo $stagingRepositoryId | grep -o \"\\-\" | wc -l)\" != \"1\" ]; then\n            echo \"Did not find exactly one open repository\"\n            exit 1\n          fi\n\n          mvn org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-close \\\n            -DnexusUrl=https://oss.sonatype.org/ \\\n            -DserverId=sonatype-nexus-staging \\\n            -DstagingRepositoryId=$stagingRepositoryId \\\n            -DstagingProgressTimeoutMinutes=10\n\n          mvn org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-release \\\n            -DautoDropAfterRelease=true \\\n            -DnexusUrl=https://oss.sonatype.org/ \\\n            -DserverId=sonatype-nexus-staging \\\n            -DstagingRepositoryId=$stagingRepositoryId \\\n            -DstagingProgressTimeoutMinutes=10\n  \n  deploy_javadocs:\n    name: Upload Javadocs\n    needs: [ setup ]\n    runs-on: ubuntu-latest\n    # These permissions are needed to interact with GitHub's OIDC Token endpoint.\n    permissions:\n      id-token: write\n      contents: read\n    steps:\n    - name: Download release javadocs\n      uses: robinraju/release-downloader@v1.5\n      with:\n        repository: \"liquibase/liquibase\"\n        tag: \"${{ needs.setup.outputs.tag }}\"\n        filename: \"liquibase-additional*.zip\"\n        out-file-path: \".\"\n\n    - name: Unpack javadoc files and upload to s3\n      env:\n        AWS_ACCESS_KEY_ID: ${{ secrets.JAVADOCS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: ${{ secrets.JAVADOCS_SECRET_ACCESS_KEY }}\n        AWS_DEFAULT_REGION: us-east-1\n      run: |\n        unzip -j '*.zip' '*javadoc*.jar'\n        unzip '*liquibase-cdi*.jar' -d liquibase-cdi/\n        unzip '*liquibase-commercial*.jar' -d liquibase-commercial/\n        unzip '*liquibase-core*.jar' -d liquibase-core/\n        unzip '*liquibase-maven-plugin*.jar' -d liquibase-maven-plugin/\n        rm -rf *.jar *.zip\n        aws s3 sync . s3://javadocsliquibasecom-origin --only-show-errors```"}
{"id": "63c498b51842bc13d776bea0", "level": "level1", "llm_response": "```yaml\nname: Keep the versions up-to-date\n\non:\n  release:\n    types: [published, prereleased, edited]\n  pull_request:\n    types: [edited]\n\njobs:\n  actions-tagger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      \n      - name: Install dependencies\n        run: npm install\n      \n      - name: Run version update script\n        run: npx semantic-release --no-ci\n```", "answer": "```yaml name: Keep the versions up-to-date\n\non:\n  release:\n    types: [published, edited]\n\njobs:\n  actions-tagger:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n        env:\n          GITHUB_TOKEN: \"${{secrets.GITHUB_TOKEN}}\"\n        with:\n          publish_latest_tag: true\n```"}
{"id": "63c49e201842bc13d778ec6c", "level": "level1", "llm_response": "```yaml\nname: Do Not Merge\n\non:\n  pull_request_target:\n    types: [opened, synchronize, reopened]\n  pull_request_review:\n    types: [submitted]\n\njobs:\n  do-not-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      \n      - name: Prevent merging\n        run: echo \"This pull request cannot be merged.\"\n```", "answer": "```yaml name: Do Not Merge\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  do-not-merge:\n    if: ${{ contains(github.event.*.labels.*.name, 'DNM') }}\n    name: Prevent Merging\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for label\n        run: |\n          echo \"Pull request is labeled as 'DNM'\"\n          echo \"This workflow fails so that the pull request cannot be merged\"\n          exit 1\n```"}
