{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n\n    - name: Build project\n      run: mvn clean install\n\n    - name: Deploy to Maven Central\n      uses: adobe/jenkinsfile-maven-deploy@v0.4.0\n      with:\n        username: ${{ secrets.MAVEN_USERNAME }}\n        password: ${{ secrets.MAVEN_PASSWORD }}\n        groupId: com.example\n        artifactId: my-project\n        version: ${{ github.ref_name }}\n        packaging: jar\n```", "answer": "```yaml name: Release\n\non:\n  workflow_dispatch:\n\njobs:\n  release:\n\n    name: Release to Maven Central\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Maven Central\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 17\n          server-id: ossrh\n          server-username: OSSRH_USERNAME\n          server-password: OSSRH_TOKEN\n          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}\n\n      - name: Publish to Maven Central\n        run: |\n          git config user.name '${{ github.actor }}'\n          git config user.email '${{ github.actor }}@users.noreply.github.com'\n          ./mvnw -B release:prepare release:perform -Dpassword=${{ secrets.GITHUB_TOKEN }} \\\n              -Djansi.passthrough=true \\\n              -Dstyle.color=always\n        env:\n          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}\n          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}\n```"}
{"llm_response": "```yaml Frogbot Scan and Fix:\n  on:\n    push:\n      branches:\n        - dev\n\n  jobs:\n    create-fix-pull-requests:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n\n        - name: Install dependencies\n          run: go mod download\n\n        - name: Run frogbot scan\n          run: frogbot-scan\n\n        - name: Create pull request\n          if: ${{ github.event.pull_request.number }}\n          uses: actions/create-pull-request@v3\n          with:\n            title: \"Fixes found in Frogbot scan\"\n            body: \"This PR addresses issues detected by Frogbot during a scan.\"\n            labels: \"fix, issue\"\n            assignees: \"\"\n```", "answer": "```yaml name: \"Frogbot Scan and Fix\"\non:\n  push:\n    branches:\n      - \"dev\"\njobs:\n  create-fix-pull-requests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      # Install prerequisites\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.x\n\n      - uses: jfrog/frogbot@v2\n        env:\n          # [Mandatory]\n          # JFrog platform URL (This functionality requires version 3.29.0 or above of Xray)\n          JF_URL: ${{ secrets.FROGBOT_URL }}\n\n          # [Mandatory if JF_USER and JF_PASSWORD are not provided]\n          # JFrog access token with 'read' permissions on Xray service\n          JF_ACCESS_TOKEN: ${{ secrets.FROGBOT_ACCESS_TOKEN }}\n\n          # [Mandatory]\n          # The GitHub token automatically generated for the job\n          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: coverage\n\non:\n  - pull_request\n  - push:\n    branches:\n      - main\n\njobs:\n  codecov:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install coverage pytest\n      - name: Run tests\n        run: pytest\n      - name: Generate coverage report\n        run: coverage combine\n      - name: Upload coverage to Codecov\n        uses: codecov/upload@v2\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          directory: .\n```", "answer": "```yaml name: coverage\n\non:\n  pull_request:\n  push:\n    branches:\n      - main\n\njobs:\n  codecov:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n    - name: Install poetry\n      uses: snok/install-poetry@v1\n      with:\n        virtualenvs-create: true\n        virtualenvs-in-project: true\n    - name: Load cached venv\n      id: cached-poetry-dependencies\n      uses: actions/cache@v3.0.9\n      with:\n        path: .venv\n        key: venv-${{ runner.os }}-3.10-${{ hashFiles('**/poetry.lock') }}-0\n    - name: Install dependencies\n      run: poetry install\n      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'\n    - name: Test with pytest\n      run: poetry run pytest --cov=fastapi_azure_auth tests/ --verbose --assert=plain --cov-report=xml\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        fail_ci_if_error: true\n        token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"llm_response": "```yaml Elemental E2E tests with Rancher Manager:\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  k3s:\n    runs-on: ubuntu-latest\n    concurrency-group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.14'\n      - name: Install dependencies\n        run: go get ./...\n      - name: Run K3s tests\n        run: go test ./...\n\n  rke2:\n    runs-on: ubuntu-latest\n    concurrency-group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.14'\n      - name: Install dependencies\n        run: go get ./...\n      - name: Run RKE2 tests\n        run: go test ./...\n```", "answer": "```yaml # This workflow calls the master E2E workflow with custom variables\nname: Elemental E2E tests with Rancher Manager\n\non:\n  workflow_run:\n    workflows:\n      - build-ci\n    branches:\n      - main\n    types:\n      - completed\n\nconcurrency:\n  group: e2e-tests-${{ github.head_ref || github.ref }}-${{ github.repository }}\n  cancel-in-progress: false\n\njobs:\n  k3s:\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-k3s\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+k3s1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n  rke2:\n    if: always()\n    needs: k3s\n    uses: ./.github/workflows/master-e2e.yaml\n    secrets:\n      credentials: ${{ secrets.GCP_CREDENTIALS }}\n    with:\n      cluster_name: cluster-rke2\n      dashboard_version: latest\n      k8s_version_to_provision: v1.24.4+rke2r1\n      rancher_channel: stable\n      rancher_version: latest\n      runner: elemental-e2e-ci-runner-spot-x86-64-2\n      start_condition: ${{ github.event.workflow_run.conclusion }}\n      test_type: cli\n      zone: us-central1-a\n      workflow_download: ${{ github.event.workflow_run.workflow_id }}\n```"}
{"llm_response": "```yaml\nname: Manual Release\n\non:\n  push:\n    branches-ignore:\n      - main\n\njobs:\n  token-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Validate release token\n        run: |\n          if [ \"$GITHUB_TOKEN\" != \"${{ secrets.RELEASE_TOKEN }}\" ]; then\n            echo \"Error: Invalid release token provided.\"\n            exit 1\n          fi\n\n  hub-integration:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Authenticate with GitHub Hub API\n        run: |\n          echo \"::set-output name=auth-token::$(echo $GITHUB_TOKEN | base64)\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Perform integration test\n        run: |\n          # Add your integration test commands here\n          echo \"Integration test passed.\"\n\n  regular-release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: |\n          pytest\n\n      - name: Create release\n        run: |\n          gh release create v1.0.0 --title \"Release v1.0.0\" --body \"This is the first release.\"\n          gh release upload v1.0.0 myfile.zip\n```", "answer": "```yaml name: Manual Release\n\non:\n  workflow_dispatch:\n    inputs:\n      release_token:\n        description: 'Your release token'\n        required: true\n      release_reason:\n        description: 'Short reason for this manual release'\n        required: true\n\njobs:\n  token-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check release token\n        id: token-check\n        run: | \n          touch SUCCESS\n        if: inputs.release_token == env.release_token\n        env:\n          release_token: ${{ secrets.JINA_CORE_RELEASE_TOKEN }}\n      - name: Fail release token\n        run: |\n          [[ -f SUCCESS ]]\n\n\n  hub-integration:\n    needs: token-check\n    uses: jina-ai/hub-integration/.github/workflows/main.yml@main\n    with:\n      actions: 'all'\n    secrets:\n      jina_dev_bot: ${{ secrets.JINA_DEV_BOT }}\n      jina_auth_token: ${{ secrets.JINA_AUTH_TOKEN }}\n\n  regular-release:\n    needs: [token-check]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.5.0\n        with:\n          token: ${{ secrets.JINA_DEV_BOT }}\n          fetch-depth: 100  # means max contribute history is limited to 100 lines\n#          submodules: true\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.7\n        # https://github.com/actions/checkout#fetch-all-tags\n      - run: |\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n          npm install git-release-notes\n          pip install twine wheel\n          ./scripts/release.sh final \"${{ github.event.inputs.release_reason }}\" \"${{github.actor}}\"\n        env:\n          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}\n          JINA_SLACK_WEBHOOK: ${{ secrets.JINA_SLACK_WEBHOOK }}\n      - if: failure()\n        run: echo \"nothing to release\"\n      - name: bumping master version\n        uses: ad-m/github-push-action@v0.6.0\n        with:\n          github_token: ${{ secrets.JINA_DEV_BOT }}\n          tags: true\n          branch: ${{ github.ref }}\n```"}
{"llm_response": "```yaml\nname: Close stale issues\n\non:\n  schedule:\n    - cron: '0 1 * * *'\n  push:\n    branches-ignore:\n      - master\n      - main\n    paths-ignore:\n      - '**/node_modules/**'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14.x'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run linter\n        run: npm run lint\n\n      - name: Check for stale issues\n        run: |\n          npx github-actions-stale --days 30 --label stale-issue --comment \"This issue has been open for over 30 days. If you believe this issue is still relevant, please reopen it.\"\n          git add .\n          git commit -m \"Close stale issues\"\n          git push origin HEAD\n\n      - name: Approve stale issue comments\n        if: github.event.pull_request.action == 'closed' && github.event.pull_request.labels.some(label => label.name === 'stale-issue')\n        run: |\n          npx github-actions-stale --approve --labels stale-issue\n          git add .\n          git commit -m \"Approve stale issue comments\"\n          git push origin HEAD\n```", "answer": "```yaml name: Close stale issues\n\non:\n  schedule:\n    - cron: \"30 1 * * *\"\n  workflow_dispatch:\n\npermissions:\n  issues: write\n  pull-requests: write\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      # https://github.com/marketplace/actions/close-stale-issues\n      - name: Close stale issues\n        uses: actions/stale@v6\n        with:\n          stale-issue-label: stale\n          exempt-all-assignees: true\n          exempt-issue-labels: pinned,security\n\n          days-before-issue-stale: 30\n          stale-issue-message: |\n            This issue has been automatically marked as stale because it has not\n            had recent activity. It will be closed if no further activity occurs.\n          days-before-issue-close: 7\n          close-issue-message: |\n            This issue has not seen any activity since it was marked stale.\n            Closing.\n\n          stale-pr-label: stale\n          exempt-pr-labels: pinned,security\n\n          days-before-pr-stale: 30\n          stale-pr-message: |\n            This pull request has been automatically marked as stale because it\n            has not had recent activity. It will be closed if no further activity\n            occurs. Thank you for your contributions.\n          days-before-pr-close: 7\n          close-pr-message: |\n            This pull request has not seen any activity since it was marked stale.\n            Closing.\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  create_release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Create release\n        uses: actions/create-release@v4\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          tag-name: ${{ github.ref }}\n          release-title: \"Release ${{ github.ref }}\"\n          body: \"This is the release body.\"\n          draft: false\n          prerelease: false\n\n  build_wheels:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        python-version: ['3.8', '3.9']\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\"\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install setuptools wheel\n      - name: Build wheels\n        run: |\n          python setup.py bdist_wheel\n```", "answer": "```yaml name: Release\n# This workflow builds the wheels \"on tag\".\n# If run from the hyperspy/hyperspy repository, the wheels will be uploaded to pypi ;\n# otherwise, the wheels will be available as a github artifact.\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\njobs:\n  create_release:\n    permissions:\n      contents: write\n    name: Create Release\n    runs-on: ubuntu-latest\n    outputs: \n      upload_url: ${{ steps.create_release.outputs.upload_url }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n      - name: Create Release\n        id: create_release\n        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions\n        with:\n          draft: false\n          prerelease: false\n\n  build_wheels:\n    name: Wheels on ${{ matrix.os }}/py${{ matrix.python-version }}\n    needs: create_release\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [windows-latest, macos-latest]\n        python-version: ['3.7', '3.8', '3.9', '3.10']\n\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - uses: actions/setup-python@v4\n        name: Install Python\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: What OS and Python version\n        run: |\n          uname -a\n          python --version\n          which python\n\n      - name: install build and twine\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install build twine\n\n      - name: Build wheels\n        run: |\n          python -m build\n\n      - name: Display content dist folder\n        run: |\n          ls dist/\n\n      - name: Install and test distribution\n        env:\n          MPLBACKEND: agg\n        run: |\n          pip install --pre --find-links dist hyperspy[tests]\n          pytest --pyargs hyperspy\n\n      - uses: actions/upload-artifact@v3\n        with:\n          path: ./dist/*.whl\n\n      - name: Publish wheels to PyPI\n        if: github.repository_owner == 'hyperspy'\n        env:\n          # Github secret set in the hyperspy/hyperspy repository\n          # Not available from fork or pull request\n          # Secrets are not passed to workflows that are triggered by a pull request from a fork\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: |\n          twine upload dist/*.whl --verbose\n\n  build_wheels_linux:\n    name: Wheels on ubuntu-latest\n    needs: create_release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n\n      - name: install twine\n        run: |\n          python -m pip install twine\n\n      - name: Build source distribution\n        run: |\n          pip install build\n          python -m build --sdist\n\n      - name: Build manylinux Python wheels\n        uses: RalfG/python-wheels-manylinux-build@c244013d850d8df62e9c7dd3ddab0cc581308de6\n        with:\n          python-versions: 'cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310'\n          build-requirements: 'cython'\n\n      - name: Display content dist folder\n        run: |\n          ls dist/\n\n      - name: Install and test distribution\n        env:\n          MPLBACKEND: agg\n        run: |\n          pip install --pre --find-links dist hyperspy[tests]\n          pytest --pyargs hyperspy\n\n      - uses: actions/upload-artifact@v3\n        with:\n          path: |\n            ./dist/*-manylinux*.whl\n            ./sdist/*.tar.gz\n\n      - name: Publish wheels to PyPI\n        if: github.repository_owner == 'hyperspy'\n        env:\n          # Github secret set in the hyperspy/hyperspy repository\n          # Not available from fork or pull request\n          # Secrets are not passed to workflows that are triggered by a pull request from a fork\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: |\n          twine upload dist/*-manylinux*.whl --verbose \n          twine upload dist/*.tar.gz --verbose \n\n```"}
{"llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened, labeled, unlabeled]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run labeler script\n        run: |\n          ./label_pr.py\n```", "answer": "```yaml name: 'Pull Request Labeler'\non:\n  - pull_request_target\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v3.0.0\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n```"}
{"llm_response": "```yaml Android CI:\n  on:\n    push:\n      branches:\n        - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Build with Gradle\n        run: ./gradlew build\n```", "answer": "```yaml name: Android CI\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      CCACHE_DIR: ${{ github.workspace }}/.ccache\n      CCACHE_COMPILERCHECK: \"%compiler% -dumpmachine; %compiler% -dumpversion\"\n      CCACHE_NOHASHDIR: true\n      CCACHE_MAXSIZE: 1G\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n          fetch-depth: 0\n      - name: Setup JDK 17\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: 17\n          cache: 'gradle'\n      - name: Retrieve version\n        run: |\n          echo VERSION=$(echo ${{ github.event.head_commit.id }} | head -c 10) >> $GITHUB_ENV\n      - name: Set up ccache\n        uses: hendrikmuhs/ccache-action@v1.2\n        with:\n          key: ${{ runner.os }}-${{ github.sha }}\n          restore-keys: ${{ runner.os }}\n      - name: Cache gradle build\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches/build-cache-*\n          key: gradle-builds-${{ github.sha }}\n          restore-keys: gradle-builds\n      - name: Build with Gradle\n        run: |\n          echo 'org.gradle.caching=true' >> gradle.properties\n          echo 'org.gradle.parallel=true' >> gradle.properties\n          echo 'org.gradle.vfs.watch=true' >> gradle.properties\n          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties\n          echo 'android.native.buildOutput=verbose' >> gradle.properties\n          ./gradlew -PappVerName=${{ env.VERSION }} assembleRelease assembleDebug\n      - name: Upload built apk\n        if: success()\n        uses: actions/upload-artifact@v3\n        with:\n          name: snapshot\n          path: |\n              ${{ github.workspace }}/app/build/outputs/apk\n              ${{ github.workspace }}/app/build/outputs/mapping\n      - name: Post to channel\n        if: github.ref == 'refs/heads/master'\n        env:\n          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}\n          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}\n          FILE: ${{ github.workspace }}/app/release/BiliRoaming_${{ env.VERSION }}.apk\n          COMMIT_MESSAGE: |+\n            New push to github\\!\n            ```\n            ${{ github.event.head_commit.message }}\n            ```by `${{ github.event.head_commit.author.name }}`\n            See commit detail [here](${{ github.event.head_commit.url }})\n            Snapshot apk is attached \\(unsupported by TAICHI\\)\n        run: |\n          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ[\"COMMIT_MESSAGE\"])))'`\n          curl -v \"https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D\"  -F release=\"@$FILE\"\n```"}
{"llm_response": "```yaml\nname: Sync contributor base branch on change\n\non:\n  pull_request:\n    branches:\n      - contrib/**\n\n\njobs:\n  sync_contributor_base_branch:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Modify permissions for GITHUB_TOKEN\n        run: |\n          chmod +x ./modify_permissions.sh\n          ./modify_permissions.sh\n      - name: Commit and push changes\n        run: |\n          git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n          git config --global user.name \"GitHub Actions\"\n          git add .\n          git commit -m \"Update permissions for GITHUB_TOKEN\"\n          git push origin HEAD\n```", "answer": "```yaml name: Sync contributor base branch on change\non:\n  pull_request_target:\n    types:\n      - edited\n      - synchronize\n    branches:\n      - 'contrib/**'\n\npermissions:\n  contents: read\n\njobs:\n  sync_contributor_base_branch:\n    runs-on: ubuntu-latest\n    if: github.repository == 'demisto/content' && github.event.pull_request.head.repo.fork == true && contains(github.head_ref, 'xsoar-bot-contrib-ContributionTestPack') == false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: '3.9'\n      - name: Install Python Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install pipenv==2021.5.29\n      - name: Sync Base Branch to Master\n        env:\n          CONTENTBOT_GH_ADMIN_TOKEN: ${{ secrets.CONTENTBOT_GH_ADMIN_TOKEN }}\n        run: |\n          echo \"Updating contribution base branch (contrib/*)\"\n          cd Utils/github_workflow_scripts\n          pipenv sync\n          pipenv run ./sync_contrib_base.py --branch_name ${{ github.event.pull_request.base.ref }}\n          echo \"Finished updating base branch\"\n```"}
{"llm_response": "```yaml\nname: Create release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Build project\n        run: npm run build\n      - name: Create release\n        uses: github-actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          RELEASE_NAME: \"Release ${{ github.ref_name }}\"\n          RELEASE_BODY: \"This is a release of my project.\"\n          RELEASE_TAG: \"${{ github.ref_name }}\"\n          RELEASE_ASSET_URLS: \"\"\n          RELEASE_ASSET_FILE_NAMES: \"\"\n          RELEASE_ASSET_CONTENT_TYPES: \"\"\n          RELEASE_ASSET_DESCRIPTIONS: \"\"\n```", "answer": "```yaml name: Create release\n\non:\n  push:\n    tags:\n      - \"v*\" # Push events to matching v*, i.e. v1.0, v20.15.10\n\njobs:\n  build:\n    name: Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@master\n        with:\n          fetch-depth: 0 # Fetch all tags\n\n      - name: Create Release for Tag\n        id: release_tag\n        uses: Akryum/release-tag@conventional\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          preset: angular # Use conventional-changelog preset\n```"}
{"llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n    tags:\n      - '*'\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 12 * * Tue'\n\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install dependencies\n      run: composer install --no-dev\n    - name: Run tests\n      run: vendor/bin/phpunit\n```", "answer": "```yaml name: CI\n\non:\n  push:\n  pull_request:\n  workflow_dispatch:\n  # Every Tuesday at 1:20pm UTC\n  schedule:\n    - cron: '20 13 * * 2'\n\njobs:\n  ci:\n    name: CI\n    # Only run cron on the silverstripe account\n    if: (github.event_name == 'schedule' && github.repository_owner == 'silverstripe') || (github.event_name != 'schedule')\n    uses: silverstripe/gha-ci/.github/workflows/ci.yml@v1\n```"}
{"llm_response": "```yaml\nname: FOSSA License Scan\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  fossa-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: fossa/fossa-cli@v2\n        with:\n          access-token: ${{ secrets.FOSSA_ACCESS_TOKEN }}\n          project-id: ${{ secrets.FOSSA_PROJECT_ID }}\n```", "answer": "```yaml name: FOSSA License Scan\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  fossa-scan:\n    if: ${{ github.repository == 'crackthecodeabhi/kreds' }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n\n      - name: Run FOSSA Scan\n        uses: fossas/fossa-action@v1\n        with:\n          api-key: ${{ secrets.FOSSA_API_KEY }}\n```"}
{"llm_response": "```yaml\nname: Test build package\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Build the package\n        run: |\n          python setup.py sdist bdist_wheel\n```", "answer": "```yaml name: Test build package\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    uses: fizyk/actions-reuse/.github/workflows/pypi.yml@v1.3.2\n```"}
{"llm_response": "```yaml\nname: Maestro tests\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, reopened, synchronize]\n  workflow_dispatch:\n\njobs:\n  maestro-tests:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: maestro-tests-${{ github.ref }}\n      parallelism: 1\n```", "answer": "```yaml name: Maestro tests\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n  workflow_dispatch:\n\nconcurrency:\n  group: maestro-tests-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  maestro-tests:\n    runs-on: [ macos-latest ]\n    steps:\n      - name: Checkout Android source\n        uses: actions/checkout@v3\n\n      - name: set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: 11\n\n      - name: Install Maestro\n        run: |\n          brew tap mobile-dev-inc/tap\n          brew install maestro\n\n      - name: Maestro tests\n        id: run-maestro-tests\n        uses: reactivecircus/android-emulator-runner@v2\n        with:\n          api-level: 31\n          arch: x86_64\n          disable-animations: true\n          disk-size: 8G\n          script: >\n            adb root\n            \n            ./gradlew\n            -PmaestroTests=true\n            -PsentryDsn=${{ secrets.SENTRY_DSN }}\n            -PsentryEnvironment=staging\n            -PmanifestEndpoint=${{ secrets.MANIFEST_ENDPOINT }}\n            :app:installStagingRelease\n            \n            maestro test\n            -e number=${{ secrets.TEST_LOGIN_PHONE_NUMBER }}\n            -e pin=${{ secrets.TEST_LOGIN_PIN }}\n            -e otp=${{ secrets.TEST_LOGIN_OTP }}\n            maestroUiFlows/login_flow.yaml\n            \n            adb uninstall org.simple.clinic.staging\n```"}
{"llm_response": "```yaml build-release:\n  on:\n    push:\n      tags:\n        - v*\n  jobs:\n    build-release:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up JDK\n          uses: actions/setup-java@v2\n          with:\n            java-version: '11'\n        - name: Build and Test\n          run: mvn clean install\n```", "answer": "```yaml name: build-release\non: \n  push:\n    tags:\n      - v*\njobs:\n  build-release:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@154c24e1f33dbb5865a021c99f1318cfebf27b32\n        with:\n          buildkitd-flags: --debug\n\n      - name: Checkout\n        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f\n\n      - name: Create output dir\n        run: |\n          mkdir -p apk\n\n      - name: Build\n        uses: docker/build-push-action@9379083e426e2e84abb80c8c091f5cdeb7d3fd7a\n        with:\n          file: android/Dockerfile\n          context: .\n          outputs: apk\n\n      - name: Upload APK\n        uses: actions/upload-artifact@e448a9b857ee2131e752b06002bf0e093c65e571\n        with:\n          name: apk\n          path: apk/apolloui-prod-release-unsigned.apk\n\n      - name: Upload mapping\n        uses: actions/upload-artifact@e448a9b857ee2131e752b06002bf0e093c65e571\n        with:\n          name: mapping\n          path: apk/mapping.txt\n```"}
{"llm_response": "```yaml\nname: Icon EmacsIcon3\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - icons/EmacsIcon3.icns\n      - .github/workflows/icon-EmacsIcon3.yml\n  pull_request:\n    paths:\n      - icons/EmacsIcon3.icns\n      - .github/workflows/icon-EmacsIcon3.yml\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '3.0'\n      - name: Install dependencies\n        run: bundle install\n      - name: Build icon\n        run: bundle exec rake build-icon\n```", "answer": "```yaml # This file is automatically generated by iconset script.\n#\n# DO NOT MODIFY it manually.\n\nname: Icon EmacsIcon3\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - \"icons/EmacsIcon3.icns\"\n      - \".github/workflows/icon-EmacsIcon3.yml\"\n  pull_request:\n    paths:\n      - \"icons/EmacsIcon3.icns\"\n      - \".github/workflows/icon-EmacsIcon3.yml\"\n\njobs:\n  build:\n    runs-on: macos-11\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build emacs-plus with EmacsIcon3 icon\n        run: brew install Aliases/$(readlink Aliases/emacs-plus) --with-EmacsIcon3-icon\n\n      - name: Test installation\n        run: $(brew --prefix)/bin/emacs --batch --eval='(print (+ 2 2))'\n```"}
{"llm_response": "```yaml\nname: Issue Template Bot\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Issue Template Bot\n\non:\n  issues:\n    types: [opened, edited]\n\njobs:\n  run:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Run Bot\n        uses: ./.github/actions/issue_template_bot\n        with: \n          token: ${{ secrets.GITHUB_TOKEN }}\n          config_path: \".github/issue_template_bot.json\"```"}
{"llm_response": "```yaml build:\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n      branches:\n        - main\n    workflow_dispatch:\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up JDK\n          uses: actions/setup-java@v2\n          with:\n            java-version: '11'\n        - name: Build and test\n          run: |\n            mvn clean install\n```", "answer": "```yaml name: build\n\non: [ pull_request, push ]\n\njobs:\n  build:\n    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n      - name: Validate Gradle Wrapper\"\n        uses: gradle/wrapper-validation-action@v1\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: temurin\n          java-version: 17\n      - name: Clean Build\n        run: ./gradlew clean build\n      - name: Determine release status\n        if: ${{ runner.os == 'Linux' }}\n        run: |\n          if [ \"$(./gradlew properties | awk '/^version:/ { print $2; }' | grep '\\-SNAPSHOT')\" ]; then\n            echo \"STATUS=snapshot\" >> $GITHUB_ENV\n          else\n            echo \"STATUS=release\" >> $GITHUB_ENV\n          fi\n      - name: Publish Release\n        if: ${{ runner.os == 'Linux' && env.STATUS == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6'}}\n        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository\n        env:\n          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}\n          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}\n          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}\n          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}\n      - name: Publish Snapshot\n        if: ${{ runner.os == 'Linux' && env.STATUS != 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6' }}\n        run: ./gradlew publishToSonatype\n        env:\n          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USERNAME }}\n          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}\n      - name: Publish core javadoc\n        if: ${{ runner.os == 'Linux' && env.STATUS == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6'}}\n        uses: cpina/github-action-push-to-another-repository@main\n        env:\n          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}\n        with:\n          source-directory: 'Core/build/docs/javadoc'\n          destination-github-username: 'IntellectualSites'\n          destination-repository-name: 'plotsquared-javadocs'\n          user-email: ${{ secrets.USER_EMAIL }}\n          target-branch: main\n          target-directory: core\n      - name: Publish bukkit javadoc\n        if: ${{ runner.os == 'Linux' && env.STATUS == 'release' && github.event_name == 'push' && github.ref == 'refs/heads/v6'}}\n        uses: cpina/github-action-push-to-another-repository@main\n        env:\n          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}\n        with:\n          source-directory: 'Bukkit/build/docs/javadoc'\n          destination-github-username: 'IntellectualSites'\n          destination-repository-name: 'plotsquared-javadocs'\n          user-email: ${{ secrets.USER_EMAIL }}\n          target-branch: main\n          target-directory: bukkit\n```"}
{"llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n    types: [opened, edited, synchronize]\n  issue:\n    types: [opened, edited, synchronize]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Display message\n        run: echo \"Hello from the Greetings Workflow!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: 'Thanks a lot for opening your first issue with us! \ud83e\udde1 We''ll get back to you shortly! \u23f3 If it was a _Support Request_, please check [our extensive CTF manual](https://pwning.owasp-juice.shop/part1/ctf.html) first. Also, please consider asking on the [community chat](../#troubleshooting-) next time! \ud83d\udcac'\n          pr-message: 'Thanks a lot for your contribution! \ud83d\udc96 This seems to be you first PR! \ud83c\udf20 If it''s getting merged & complies with our [contribution guidelines](../blob/master/CONTRIBUTING.md), you are probably eligible to some free stickers! \ud83c\udf81'\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Create a new tag\n      run: |\n        echo \"export TAG_TO_RELEASE=${{ inputs.tag-this }}\" >> $GITHUB_ENV\n        git add .\n        git commit -m \"Create tag ${TAG_TO_RELEASE}\"\n        git tag ${TAG_TO_RELEASE}\n    - name: Push changes to remote repository\n      run: git push origin HEAD --tags\n```", "answer": "```yaml name: release\non:\n  workflow_dispatch:\n    # Inputs the workflow accepts.\n    inputs:\n      tag:\n        description: 'tag and release to create'\n        # Input has to be provided for the workflow to run\n        required: true\nenv:\n  GITHUB_ENV: \".env\"\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n        with:\n          ref: master\n      - name: Install go\n        uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f\n        with:\n          go-version-file: go.mod\n      - name: Login to dockerhub to push the image\n        run: echo \"${{ secrets.DockerHubToken }}\" | docker login --username ${DOCKER_USER} --password-stdin\n        env:\n          DOCKER_USER: ${{ secrets.DockerHubUser }}\n      - name: Publish Docker Image\n        env:\n          VERSION: ${{ github.event.inputs.tag }}\n        run: make ci publish\n      - name: run make bump-version\n        run: make bump-version\n        env:\n          NEW_VERSION: ${{ github.event.inputs.tag }}\n      - name: commit manifests\n        uses: EndBug/add-and-commit@61a88be553afe4206585b31aa72387c64295d08b\n        with:\n          message: \"create release manifests for ${{ github.event.inputs.tag }}\"\n          add: \"releases/ VERSION CHANGELOG.md\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # target commit should be the commit with the new release manifest, not the commit when workflow was triggered\n      - name: find target commit to tag\n        run: |\n          sha=$(git rev-parse HEAD)\n          echo \"TARGET_SHA=$sha\" >> $GITHUB_ENV\n      - name: Create GitHub Release\n        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          target_commitish: ${{ env.TARGET_SHA }}\n          tag_name: ${{ github.event.inputs.tag }}\n          name: Release ${{ github.event.inputs.tag }}\n          body: See the [CHANGELOG](https://github.com/digitalocean/digitalocean-cloud-controller-manager/blob/${{ github.event.inputs.tag }}/CHANGELOG.md) for details.\n```"}
{"llm_response": "```yaml Nightly Master Snapshot:\n  on:\n    schedule:\n      - cron: '0 6 * * *'\n  env:\n    JAVA_OPTS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xms60M -Xmx1G -XX:InitialCodeCacheSize=40M -XX:ReservedCodeCacheSize=120M'\n  jobs:\n    publish-snapshot:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Set up Ruby\n          uses: ruby/setup-ruby@v1\n        - name: Install dependencies\n          run: bundle install\n        - name: Build and publish snapshot\n          run: bundle exec rake build:snapshot\n```", "answer": "```yaml name: Nightly Master Snapshot\n\non:\n  schedule:\n    - cron: '30 6 * * *'\n\nenv:\n  JAVA_OPTS: '-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xms60M -Xmx1G -XX:InitialCodeCacheSize=40M -XX:ReservedCodeCacheSize=120M'\n\npermissions:\n  contents: read\n\njobs:\n  publish-snapshot:\n    permissions:\n      contents: none\n    if: ${{ github.ref == 'refs/heads/master' }}\n    uses: jruby/jruby/.github/workflows/snapshot-publish.yml@6cd0d4d96d9406635183d81cf91acc82cd78245f\n    secrets:\n      SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}\n```"}
{"llm_response": "```yaml Beta Branch CI:\n  name: Beta Branch CI\n  on:\n    push:\n      branches:\n        - beta\n    pull_request:\n      branches:\n        - beta\n    schedule:\n      - cron: '0 0 * * *'\n  jobs:\n    stable-tests-on-beta:\n      runs-on: ubuntu-latest\n      defaults:\n        run:\n          shell: bash\n      permissions:\n        write: all\n    android-build:\n      runs-on: ubuntu-latest\n      defaults:\n        run:\n          shell: bash\n      permissions:\n        write: all\n    ios-build:\n      runs-on: macos-latest\n      defaults:\n        run:\n          shell: bash\n      permissions:\n        write: all\n```", "answer": "```yaml name: Beta Branch CI\n\n# Declare default permissions as read only.\npermissions: read-all\n\non:\n  push:\n    branches: [beta]\n  pull_request:\n    branches: [beta]\n  workflow_dispatch:\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  # Run the stable test script on the beta channel. Since this branch will soon\n  # be merged into main as our stable-targeting code, this is the key thing we\n  # need to test.\n  stable-tests-on-beta:\n    runs-on: ${{ matrix.os }}\n    if: github.repository == 'flutter/samples'\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc\n        with:\n          distribution: 'zulu'\n          java-version: '12.x'\n      - uses: subosito/flutter-action@dbf1fa04f4d2e52c33185153d06cdb5443aa189d\n        with:\n          channel: beta\n      - run: ./tool/flutter_ci_script_stable.sh\n  # Verify the Android add-to-app samples build and pass tests with the beta\n  # channel.\n  android-build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'flutter/samples'\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc\n        with:\n          distribution: 'zulu'\n          java-version: '12.x'\n      - uses: subosito/flutter-action@dbf1fa04f4d2e52c33185153d06cdb5443aa189d\n        with:\n          channel: beta\n      - run: ./tool/android_ci_script.sh\n  # Verify the iOS add-to-app samples build and pass tests with the beta\n  # channel.\n  ios-build:\n    runs-on: macos-latest\n    if: github.repository == 'flutter/samples'\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc\n        with:\n          distribution: 'zulu'\n          java-version: '12.x'\n      - uses: subosito/flutter-action@dbf1fa04f4d2e52c33185153d06cdb5443aa189d\n        with:\n          channel: beta\n      - run: ./tool/ios_ci_script.sh\n```"}
{"llm_response": "```yaml\nname: Add new issue/PR to project\n\non:\n  issues:\n    types: [opened]\n  pull_request:\n    types: [created]\n\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          if [[ ${{ github.event.action }} == \"opened\" ]]; then\n            # Logic to handle issue creation\n            echo \"Handling issue creation\"\n          elif [[ ${{ github.event.action }} == \"created\" ]]; then\n            # Logic to handle pull request creation\n            echo \"Handling pull request creation\"\n          fi\n```", "answer": "```yaml name: Add new issue/PR to project\n\non:\n  issues:\n    types:\n      - opened\n      \n  pull_request_target:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add issue or PR to project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@v0.3.0\n        with:\n          project-url: https://github.com/orgs/rapidsai/projects/51\n          github-token: ${{ secrets.ADD_TO_PROJECT_GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Build project\n      run: npm run build\n    - name: Deploy to GitHub Pages\n      uses: github-pages-deploy-action@v3\n      with:\n        branch: gh-pages\n        folder: dist\n```", "answer": "```yaml name: Deploy\non:\n  push:\n    branches: [main]\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@master\n      - name: vuepress-deploy\n        uses: jenkey2011/vuepress-deploy@master\n        env:\n          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n          TARGET_REPO: FEDarling/weekly-tracker\n          TARGET_BRANCH: pages\n          BUILD_SCRIPT: yarn && yarn build\n          BUILD_DIR: public\n```"}
{"llm_response": "```yaml Remove Safe To Test Label:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Remove label\n      run: |\n        echo \"Removing 'Safe To Test' label from pull request\"\n        gh pr edit --label --remove safe-to-test $GITHUB_REF_NAME\n```", "answer": "```yaml name: Remove Label\non: [ pull_request ]\njobs:\n  remove-safe-to-test-label:\n    runs-on: ubuntu-latest\n    name: Remove Label\n    steps:\n      - name:\n        uses: buildsville/add-remove-label@v1\n        with:\n          token: ${{secrets.GITHUB_TOKEN}}\n          label: safe-to-test\n          type: remove\n```"}
{"llm_response": "```yaml\nname: Coverage\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run unit tests\n        run: npm test\n```", "answer": "```yaml # Runs tests for all packages after pushes to master to check code coverage on a project level\nname: Coverage\n\non:\n  push:\n    branches:\n      - master\n\npermissions:\n  contents: read\n\njobs:\n  tests:\n    name: Unit tests\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: '0'\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n          cache: 'yarn'\n\n      - name: Install Dependencies\n        run: yarn --frozen-lockfile --no-progress --non-interactive\n\n      - name: Test\n        run: yarn test --all --coverage\n```"}
{"llm_response": "```yaml\nname: golangci-lint\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    branches-ignore:\n      - main\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - ready_for_review\n      - synchronize\n      - reopened\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Install golangci-lint\n        run: go install github.com/golangci/golangci-lint/cmd/golangcilint@latest\n      - name: Run golangci-lint\n        run: golangcilint --timeout=30m\n```", "answer": "```yaml name: golangci-lint\n\non:\n  pull_request:\n    types: [opened, edited, synchronize, reopened]\n\n# Remove all permissions from GITHUB_TOKEN except metadata.\npermissions: {}\n\njobs:\n  golangci:\n    name: lint\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        working-directory:\n          - \"\"\n          - test\n          - hack/tools\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v3.2.0\n        with:\n          version: v1.50.0\n          working-directory: ${{matrix.working-directory}}\n```"}
{"llm_response": "```yaml\nname: CLA Assistant\n\non:\n  issues_comment:\n    types: [created]\n  pull_request:\n    types: [opened, closed, synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check for CLA signature\n        run: |\n          if ! git show --porcelain | grep \"Signed-off-by:\" > /dev/null; then\n            echo \"CLA signature not found! Please sign your commit.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: 'CLA Assistant'\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened, closed, synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'CLA Assistant'\n        if: github.base_ref != 'main' && ((github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target')\n        # Alpha Release\n        uses: gnosis/github-action@master\n        # GitHub token, automatically provided to the action\n        # (No need to define this secret in the repo settings)\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          path-to-signatures: 'signatures/version1/cla.json'\n          path-to-cla-document: 'https://github.com/gnosis/cowswap/blob/develop/docs/GNOSIS_CLA.md'\n          branch: 'cla-signatures'\n          allowlist: dependabot,mergify,alfetopito,anxolin,W3stside,nenadV91,annamsgeorge,avsavsavs,c3rnst,cmagan,josojo,davidalbela,fedgiac,fleupold,giacomolicari,GabrielCamba,nlordell,alongoni,elena-zh,henrypalacios,matextrem,ramirotw\n          empty-commit-flag: false\n          blockchain-storage-flag: false\n```"}
{"llm_response": "```yaml Browser PR e2e tests:\n\non:\n  pull_request:\n    branches:\n      - master\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  e2e-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run e2e tests\n        run: npm test\n```", "answer": "```yaml name: 'Browser PR e2e tests'\n\non:\n  pull_request:\n    branches: [master]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}\n  cancel-in-progress: true\n\njobs:\n  e2e-tests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        neo4j-version:\n          - 3.5\n          - 4.3\n          - 4.4\n        neo4j-edition:\n          - community\n          - enterprise\n    services:\n      neo4j:\n        image: neo4j:${{ matrix.neo4j-version }}-${{ matrix.neo4j-edition }}\n        env:\n          NEO4J_ACCEPT_LICENSE_AGREEMENT: yes\n        ports:\n          - 7687:7687\n          - 7474:7474\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - run: npm -g install yarn serve\n      - run: yarn install --frozen-lockfile\n      - run: yarn build\n      - run: sudo apt-get update\n      - run: sudo apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n      - run: npx serve -l 8080 dist & npm run wait-on-neo4j && yarn wait-on-dev\n      - run: echo \"Servers ready!\"\n      - run: yarn e2e --env server=${{ matrix.neo4j-version }},browser-password=password,edition=${{ matrix.neo4j-edition }}\n      - name: Upload test screenshots\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-screenshots-${{ matrix.neo4j-version }}-${{ matrix.neo4j-edition }}\n          path: |\n            ./e2e_tests/screenshots\n            ./e2e_tests/videos\n```"}
{"llm_response": "```yaml\nname: Release Published\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  release:\n    types:\n      - draft\n      - prerelease\n      - published\n  workflow_dispatch:\n\njobs:\n  setup:\n    runs-on: ubuntu-latest\n\n  deploy_maven:\n    runs-on: ubuntu-latest\n    needs: [setup]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '17'\n\n      - name: Build project\n        run: mvn clean install\n\n  deploy_javadocs:\n    runs-on: ubuntu-latest\n    needs: [setup]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '17'\n\n      - name: Generate Javadocs\n        run: mvn javadoc:javadoc\n\n      - name: Upload Javadocs\n        uses: actions/upload-artifact@v2\n        with:\n          name: javadocs\n          path: target/site/apidocs\n```", "answer": "```yaml name: Release Published\non:\n  release:\n    types: [published]\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'Release Tag'\n        required: true\n\njobs:\n  setup:\n    name: Setup\n    runs-on: ubuntu-latest\n    outputs:\n      tag: ${{ steps.collect-data.outputs.tag }}\n      version: ${{ steps.collect-data.outputs.version }}\n    steps:\n      - name: Collect Data\n        id: collect-data\n        uses: actions/github-script@v6\n        with:\n          script: |\n            let tag;\n            if (context.payload.inputs) {\n              tag = context.payload.inputs.tag;\n            } else {\n              tag = context.payload.release.tag_name;\n            }\n\n            let version = tag.replace(/^v/, \"\");\n\n            core.setOutput(\"tag\", tag);\n            core.setOutput(\"version\", version);\n\n      - run: |\n          echo \"Publishing version ${{ steps.collect-data.outputs.version }} from ${{ steps.collect-data.outputs.tag }}\"\n\n  deploy_maven:\n    name: Deploy to Maven\n    needs: [ setup ]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Download release assets\n        uses: robinraju/release-downloader@v1.5\n        with:\n          repository: \"liquibase/liquibase\"\n          tag: \"${{ needs.setup.outputs.tag }}\"\n          filename: \"*\"\n          out-file-path: \".\"\n\n      - name: Set up Java for publishing to Maven Central Repository\n        uses: actions/setup-java@v3\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n          server-id: sonatype-nexus-staging\n          server-username: MAVEN_USERNAME\n          server-password: MAVEN_PASSWORD\n          gpg-private-key: ${{ secrets.GPG_SECRET }}\n          gpg-passphrase: GPG_PASSPHRASE\n        env:\n          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}\n\n      - name: Publish to Maven Central\n        env:\n          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}\n          MAVEN_PASSWORD: ${{ secrets.SONATYPE_TOKEN }}\n          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}\n        run: |\n          version=${{ needs.setup.outputs.version }}\n\n          unzip liquibase-additional-*.zip\n\n          ##extracts and sign poms\n          unzip -j liquibase-core-${version}.jar META-INF/maven/org.liquibase/liquibase-core/pom.xml\n          mv pom.xml liquibase-core-${version}.pom\n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-core-${version}.pom\n\n          unzip -j liquibase-maven-plugin-${version}.jar META-INF/maven/org.liquibase/liquibase-maven-plugin/pom.xml\n          mv pom.xml liquibase-maven-plugin-${version}.pom\n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-maven-plugin-${version}.pom\n\n          unzip -j liquibase-cdi-${version}.jar META-INF/maven/org.liquibase/liquibase-cdi/pom.xml\n          mv pom.xml liquibase-cdi-${version}.pom\n          sed -i -e \"s/<description>/<name>Liquibase CDI Plugin<\\/name><description>/\" liquibase-cdi-${version}.pom   ## name didn't end up in pom. Hack it in for now\n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-cdi-${version}.pom\n\n          unzip -j liquibase-commercial-${version}.jar META-INF/maven/org.liquibase/liquibase-commercial/pom.xml\n          mv pom.xml liquibase-commercial-${version}.pom\n          sed -i -e \"s/<\\/licenses>/<\\/licenses><scm><connection>private<\\/connection><developerConnection>private<\\/developerConnection><url>private<\\/url><\\/scm>/\" liquibase-commercial-${version}.pom   ## scm info not in the pom          \n          gpg --batch --pinentry-mode=loopback --passphrase \"$GPG_PASSWORD\" -ab liquibase-commercial-${version}.pom\n          \n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-core-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-core-${version}.jar \\\n            -Dsources=liquibase-core-${version}-sources.jar \\\n            -Djavadoc=liquibase-core-${version}-javadoc.jar \\\n            -Dfiles=liquibase-core-${version}.jar.asc,liquibase-core-${version}-sources.jar.asc,liquibase-core-${version}-javadoc.jar.asc,liquibase-core-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-commercial-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-commercial-${version}.jar \\\n            -Dsources=liquibase-commercial-${version}-sources.jar \\\n            -Djavadoc=liquibase-commercial-${version}-javadoc.jar \\\n            -Dfiles=liquibase-commercial-${version}.jar.asc,liquibase-commercial-${version}-sources.jar.asc,liquibase-commercial-${version}-javadoc.jar.asc,liquibase-commercial-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-maven-plugin-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-maven-plugin-${version}.jar \\\n            -Dsources=liquibase-maven-plugin-${version}-sources.jar \\\n            -Djavadoc=liquibase-maven-plugin-${version}-javadoc.jar \\\n            -Dfiles=liquibase-maven-plugin-${version}.jar.asc,liquibase-maven-plugin-${version}-sources.jar.asc,liquibase-maven-plugin-${version}-javadoc.jar.asc,liquibase-maven-plugin-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          mvn -B org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M1:deploy-file \\\n            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \\\n            -DrepositoryId=sonatype-nexus-staging \\\n            -DpomFile=liquibase-cdi-${version}.pom \\\n            -DgeneratePom=false \\\n            -Dfile=liquibase-cdi-${version}.jar \\\n            -Dsources=liquibase-cdi-${version}-sources.jar \\\n            -Djavadoc=liquibase-cdi-${version}-javadoc.jar \\\n            -Dfiles=liquibase-cdi-${version}.jar.asc,liquibase-cdi-${version}-sources.jar.asc,liquibase-cdi-${version}-javadoc.jar.asc,liquibase-cdi-${version}.pom.asc \\\n            -Dtypes=jar.asc,jar.asc,jar.asc,pom.asc \\\n            -Dclassifiers=,sources,javadoc,\n\n          ## Release repository\n          ## Have to find the stagingRepositoryId that was auto-generated\n          rcList=$(mvn -B org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-list -DnexusUrl=https://oss.sonatype.org/ -DserverId=sonatype-nexus-staging)\n          #echo $rcList\n\n          stagingRepositoryId=$(echo $rcList | grep -o \"\\[INFO\\] orgliquibase-[0-9]*[ ]*OPEN\" | grep -o \"orgliquibase-[0-9]*\")\n          echo \"Staging Repository Id: $stagingRepositoryId\"\n\n          if [ \"$(echo $stagingRepositoryId | grep -o \"\\-\" | wc -l)\" != \"1\" ]; then\n            echo \"Did not find exactly one open repository\"\n            exit 1\n          fi\n\n          mvn org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-close \\\n            -DnexusUrl=https://oss.sonatype.org/ \\\n            -DserverId=sonatype-nexus-staging \\\n            -DstagingRepositoryId=$stagingRepositoryId \\\n            -DstagingProgressTimeoutMinutes=10\n\n          mvn org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-release \\\n            -DautoDropAfterRelease=true \\\n            -DnexusUrl=https://oss.sonatype.org/ \\\n            -DserverId=sonatype-nexus-staging \\\n            -DstagingRepositoryId=$stagingRepositoryId \\\n            -DstagingProgressTimeoutMinutes=10\n  \n  deploy_javadocs:\n    name: Upload Javadocs\n    needs: [ setup ]\n    runs-on: ubuntu-latest\n    # These permissions are needed to interact with GitHub's OIDC Token endpoint.\n    permissions:\n      id-token: write\n      contents: read\n    steps:\n    - name: Download release javadocs\n      uses: robinraju/release-downloader@v1.5\n      with:\n        repository: \"liquibase/liquibase\"\n        tag: \"${{ needs.setup.outputs.tag }}\"\n        filename: \"liquibase-additional*.zip\"\n        out-file-path: \".\"\n\n    - name: Unpack javadoc files and upload to s3\n      env:\n        AWS_ACCESS_KEY_ID: ${{ secrets.JAVADOCS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: ${{ secrets.JAVADOCS_SECRET_ACCESS_KEY }}\n        AWS_DEFAULT_REGION: us-east-1\n      run: |\n        unzip -j '*.zip' '*javadoc*.jar'\n        unzip '*liquibase-cdi*.jar' -d liquibase-cdi/\n        unzip '*liquibase-commercial*.jar' -d liquibase-commercial/\n        unzip '*liquibase-core*.jar' -d liquibase-core/\n        unzip '*liquibase-maven-plugin*.jar' -d liquibase-maven-plugin/\n        rm -rf *.jar *.zip\n        aws s3 sync . s3://javadocsliquibasecom-origin --only-show-errors```"}
{"llm_response": "```yaml\nname: Keep the versions up-to-date\n\non:\n  - release\n  - pull_request_target\n  - pull_request\n\njobs:\n  actions-tagger:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Tag the release\n        run: npx lerna version --no-git-tag\n```", "answer": "```yaml name: Keep the versions up-to-date\n\non:\n  release:\n    types: [published, edited]\n\njobs:\n  actions-tagger:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: Actions-R-Us/actions-tagger@latest\n        env:\n          GITHUB_TOKEN: \"${{secrets.GITHUB_TOKEN}}\"\n        with:\n          publish_latest_tag: true\n```"}
{"llm_response": "```yaml\nname: Do Not Merge\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    types:\n      - opened\n      - edited\n      - labeled\n      - unlabeled\n      - reopened\n\njobs:\n  do-not-merge:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check if the PR is labeled as \"Do Not Merge\"\n        uses: actions/labeler@v2\n        with:\n          labels-to-add: 'Do Not Merge'\n          labels-to-remove: ''\n```", "answer": "```yaml name: Do Not Merge\n\non:\n  pull_request:\n    types: [synchronize, opened, reopened, labeled, unlabeled]\n\njobs:\n  do-not-merge:\n    if: ${{ contains(github.event.*.labels.*.name, 'DNM') }}\n    name: Prevent Merging\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check for label\n        run: |\n          echo \"Pull request is labeled as 'DNM'\"\n          echo \"This workflow fails so that the pull request cannot be merged\"\n          exit 1\n```"}
{"llm_response": "```yaml\nname: Coding Style\n\non:\n  push:\n    branches-ignore:\n      - main\n    tags-ignore:\n      - main\n  pull_request:\n    branches-ignore:\n      - main\n    tags-ignore:\n      - main\n\njobs:\n  nette_cc:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install Nette Code Checker\n        run: composer require --dev nette/nette-code-checker\n\n      - name: Run Nette Code Checker\n        run: ./vendor/bin/nette-code-checker\n\n  nette_cs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install Nette Coding Standard\n        run: composer require --dev nette/coding-standard\n\n      - name: Run Nette Coding Standard\n        run: ./vendor/bin/nette-coding-standard\n```", "answer": "```yaml name: Coding Style\n\non: [push, pull_request]\n\njobs:\n    nette_cc:\n        name: Nette Code Checker\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/code-checker temp/code-checker ^3 --no-progress\n            - run: php temp/code-checker/code-checker --strict-types --no-progress\n\n\n    nette_cs:\n        name: Nette Coding Standard\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: shivammathur/setup-php@v2\n              with:\n                  php-version: 8.0\n                  coverage: none\n\n            - run: composer create-project nette/coding-standard temp/coding-standard ^3 --no-progress\n            - run: php temp/coding-standard/ecs check\n```"}
{"llm_response": "```yaml\nname: App / Lint\n\non:\n  push:\n    branches:\n      - master\n      - release-*\n  pull_request:\n\npermissions:\n  contents: read\n  security-events: write\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Install dependencies\n        run: ./gradlew build\n      - name: Run lint\n        run: ./gradlew check\n```", "answer": "```yaml name: App / Lint\n\non:\n  push:\n    branches:\n      - master\n      - release-*\n  pull_request:\n\npermissions:\n  contents: read\n  security-events: write\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3\n      - name: Setup Java\n        uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc # tag=v3\n        with:\n          distribution: temurin\n          java-version: 17\n      - name: Setup Gradle\n        uses: gradle/gradle-build-action@fd32ae908111fe31afa48827bd1ee909540aa971 # tag=v2\n      - name: Run detekt and lint tasks\n        run: ./gradlew detekt lint\n      - name: Upload SARIF files\n        uses: github/codeql-action/upload-sarif@cc7986c02bac29104a72998e67239bb5ee2ee110 # tag=v2\n        if: ${{ always() }}\n        with:\n          sarif_file: .\n```"}
{"llm_response": "```yaml comment-on-pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14.x'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm build\n\n      - name: Publish package\n        run: npm publish --access=public\n\n      - name: Comment on PR\n        if: ${{ github.event.action == 'opened' }}\n        uses: actions/github-script@v5\n        with:\n          script: |\n            const octokit = require('@octokit/rest');\n            const token = process.env.GITHUB_TOKEN;\n            const owner = 'your-repo-owner';\n            const repo = 'your-repo-name';\n            const prNumber = ${{ github.event.number }};\n            const message = 'Thank you for submitting this pull request!';\n\n            octokit.issues.createComment({\n              owner,\n              repo,\n              issue_number: prNumber,\n              body: message,\n            });\n```", "answer": "```yaml # WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt\n\nenv:\n  AWS_REGION: us-west-2\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}\n  PROVIDER: aws\n  PUBLISH_REPO_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}\n  PUBLISH_REPO_USERNAME: ${{ secrets.OSSRH_USERNAME }}\n  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}\n  PULUMI_API: https://api.pulumi-staging.io\n  PULUMI_GO_DEP_ROOT: ${{ github.workspace }}/..\n  PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget\n  PULUMI_MISSING_DOCS_ERROR: true\n  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n  SIGNING_KEY: ${{ secrets.JAVA_SIGNING_KEY }}\n  SIGNING_KEY_ID: ${{ secrets.JAVA_SIGNING_KEY_ID }}\n  SIGNING_PASSWORD: ${{ secrets.JAVA_SIGNING_PASSWORD }}\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\n  TRAVIS_OS_NAME: linux\njobs:\n  comment-on-pr:\n    if: github.event.pull_request.head.repo.full_name != github.repository\n    name: comment-on-pr\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Repo\n      uses: actions/checkout@v3\n    - name: Comment PR\n      uses: thollander/actions-comment-pull-request@v1\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        message: >\n          PR is now waiting for a maintainer to run the acceptance tests.\n\n          **Note for the maintainer:** To run the acceptance tests, please comment */run-acceptance-tests* on the PR\nname: pull-request\non:\n  pull_request_target: {}\n```"}
{"llm_response": "```yaml Auto Update - Spec:\n  jobs:\n    update-spec:\n      runs-on: ubuntu-latest\n      defaults:\n        shell: bash\n      on:\n        dispatches:\n          types:\n            - spec-update\n```", "answer": "```yaml name: Auto Update - Spec\non:\n  repository_dispatch:\n    types: [spec-update]\ndefaults:\n  run:\n    shell: bash\njobs:\n  update-spec:\n    env:\n      SPEC_REF: ${{ github.event.client_payload.ref }}\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          submodules: true\n\n      - name: Update keptn/spec\n        run: |\n          cd specification\n          git fetch\n          git checkout ${{ env.SPEC_REF }}\n          cd ..\n\n      - name: Extract spec tag\n        run: echo \"SPEC_TAG=${SPEC_REF#refs/tags/}\" >> $GITHUB_ENV\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          token: ${{ secrets.KEPTN_BOT_TOKEN }}\n          commit-message: \"build(deps): Update keptn/spec to release ${{ env.SPEC_TAG }}\"\n          committer: \"keptn-bot <86361500+keptn-bot@users.noreply.github.com>\"\n          author: \"keptn-bot <86361500+keptn-bot@users.noreply.github.com>\"\n          signoff: true\n          branch: patch/update-keptn-spec-${{ env.SPEC_TAG }}\n          delete-branch: true\n          base: master\n          labels: \"area:spec,automated pr,dependencies\"\n          title: \"build(deps): Update keptn/spec to release ${{ env.SPEC_TAG }}\"\n          body: |\n            **This is an automated PR!**\n\n            Update to the keptn/spec\n            New version: ${{ env.SPEC_TAG }}\n```"}
{"llm_response": "```yaml Build Test:\n  on:\n    push:\n      branches: [ main ]\n      pull_request:\n        types: [ opened, reopened, closed ]\n\n  jobs:\n    deploy:\n      runs-on: ubuntu-latest\n\n      steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Build Test\n\non: [pull_request]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: deploy\n    steps:\n      - name: Checkout Commit\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version-file: '.nvmrc'\n      - name: Install pnpm\n        run: npm i --location=global pnpm\n      - name: Install dependencies\n        run: pnpm install\n      - name: Build\n        run: pnpm build\n        env:\n          LOCALE_CI: en\n```"}
{"llm_response": "```yaml Apply triage label to new issue:\n  on:\n    issues:\n      types: [opened]\n  \n  jobs:\n    triage:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n      \n        - name: Apply triage label\n          run: |\n            echo \"Applying triage label to new issue.\"\n            git add .\n            git commit -m \"Add triage label to new issue.\"\n            git push origin HEAD\n```", "answer": "```yaml name: Apply triage label to new issue\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: andymckay/labeler@1.0.4\n        with:\n          repo-token: '${{ secrets.GITHUB_TOKEN }}'\n          add-labels: 'Status: Triage'\n```"}
{"llm_response": "```yaml\nname: cla-bot\n\non:\n  issues_comment:\n    types: [created]\n  pull_request:\n    types: [opened, closed, synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: pip install -r requirements.txt\n      - name: Run CLA check\n        run: ./run_cla_check.sh\n```", "answer": "```yaml \nname: \"cla-bot\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  cla-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"MLCommons CLA bot check\"\n        if: (github.event.comment.body == 'recheck') || github.event_name == 'pull_request_target'\n        # Alpha Release\n        uses: mlcommons/cla-bot@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # the below token should have repo scope and must be manually added by you in the repository's secret\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.MLCOMMONS_BOT_CLA_TOKEN }}\n        with:\n          path-to-signatures: 'cla-bot/v1/cla.json'\n          # branch should not be protected\n          branch: 'main'\n          allowlist: user1,bot*\n          remote-organization-name: mlcommons\n          remote-repository-name: systems\n          \n         #below are the optional inputs - If the optional inputs are not given, then default values will be taken\n          #remote-organization-name: enter the remote organization name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #remote-repository-name:  enter the  remote repository name where the signatures should be stored (Default is storing the signatures in the same repository)\n          #create-file-commit-message: 'For example: Creating file for storing CLA Signatures'\n          #signed-commit-message: 'For example: $contributorName has signed the CLA in #$pullRequestNo'\n          #custom-notsigned-prcomment: 'pull request comment with Introductory message to ask new contributors to sign'\n          #custom-pr-sign-comment: 'The signature to be committed in order to sign the CLA'\n          #custom-allsigned-prcomment: 'pull request comment when all contributors has signed, defaults to **CLA Assistant Lite bot** All Contributors have signed the CLA.'\n```"}
{"llm_response": "```yaml Library Builds\n\nname: Library Builds\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  LC_CTYPE: en_US.UTF-8\n  LANG: en_US.UTF-8\n\njobs:\n  static-lib:\n    runs-on: ubuntu-latest\n\n  dynamic-lib:\n    runs-on: ubuntu-latest\n```", "answer": "```yaml name: Library Builds\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\nenv:\n  LC_CTYPE: en_US.UTF-8\n  LANG: en_US.UTF-8\n\njobs:\n  static-lib:\n    runs-on: macos-12\n    strategy:\n      matrix:\n        sdk: [ iphonesimulator, macosx ]\n    steps:\n      - uses: maxim-lobanov/setup-xcode@v1.5.1\n        with:\n          xcode-version: ^14.1\n      - uses: actions/checkout@v3\n      - uses: sersoft-gmbh/xcodebuild-action@v2\n        with:\n          workspace: Xcode/Lumberjack.xcworkspace\n          scheme: CocoaLumberjack-Static\n          configuration: Release\n          sdk: ${{ matrix.sdk }}\n          action: build\n\n  dynamic-lib:\n    runs-on: macos-12\n    strategy:\n      matrix:\n        scheme: [ CocoaLumberjack, CocoaLumberjackSwift ]\n        sdk: [ iphonesimulator, macosx, watchsimulator, appletvsimulator ]\n    steps:\n      - uses: maxim-lobanov/setup-xcode@v1.5.1\n        with:\n          xcode-version: ^14.1\n      - uses: actions/checkout@v3\n      - uses: sersoft-gmbh/xcodebuild-action@v2\n        with:\n          workspace: Xcode/Lumberjack.xcworkspace\n          scheme: ${{ matrix.scheme }}\n          configuration: Release\n          sdk: ${{ matrix.sdk }}\n          action: build\n```"}
{"llm_response": "```yaml .github/workflows/DotnetTests.yml\nname: Dotnet Tests\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup .NET Core\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '3.x'\n    - name: Restore dependencies\n      run: dotnet restore\n    - name: Build solution\n      run: dotnet build --configuration Release\n    - name: Test solution\n      run: dotnet test --configuration Release\n```", "answer": "```yaml \ufeffname: Dotnet Tests\n\non:  \n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        dotnet-version: [ '6.0.402' ]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}\n        uses: actions/setup-dotnet@v1.7.2\n        with:\n          dotnet-version: ${{ matrix.dotnet-version }}     \n      - name: Install dependencies\n        run: dotnet restore\n      - name: Build\n        run: dotnet build --configuration Release --no-restore\n      - name: Test\n        run: dotnet test --no-restore --verbosity normal\n```"}
{"llm_response": "```yaml\nname: Close stale issues\n\non:\n  schedule:\n    - cron: '0 2 * * *'\n  push:\n    branches:\n      - main\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Close stale issues\n        run: |\n          python close_stale_issues.py\n```", "answer": "```yaml name: \"Close stale issues\"\non:\n  schedule:\n    - cron: \"0 2 * * *\"\n  workflow_dispatch:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v5\n        with:\n          days-before-issue-stale: -1 # We don't want to mark issues as stale in this action\n          days-before-issue-close: 14\n          days-before-pr-close: -1 # don't close PRs\n          stale-issue-label: stale\n          any-of-labels: \"needs info\"\n          debug-only: true # enable dry-run, remove when we know from the logs it's working.\n```"}
{"llm_response": "```yaml\nname: Fetcher Tests\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - '**/target'\n      - '**/.gitignore'\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - '**/target'\n      - '**/.gitignore'\n  schedule:\n    - cron: '0 2 * * Wed'\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\nenv:\n  SPRINGERNatureAPIKey: ${{ secrets.SPRINGERNATUREAPIKEY_FOR_TESTS }}\n  AstrophysicsDataSystemAPIKey: ${{ secrets.ASTROPHYSICSDATASYSTEMAPIKEY_FOR_TESTS }}\n  IEEEAPIKey: ${{ secrets.IEEEAPIKey_FOR_TESTS }}\n  BiodiversityHeritageApiKey: ${{ secrets.BIODIVERSITYHERITAGE_APIKEY_FOR_TESTS }}\n\nconcurrency:\n  group: \"fetcher-tests-${{ github.head_ref }}\"\n  cancel-in-progress: true\n\njobs:\n  fetchertests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n\n      - name: Run tests\n        run: |\n          mvn clean install\n```", "answer": "```yaml name: Fetcher Tests\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/main/java/org/jabref/logic/importer/fetcher/**'\n      - 'src/test/java/org/jabref/logic/importer/fetcher/**'\n      - '.github/workflows/tests-fetchers.yml'\n      - 'build.gradle'\n  pull_request:\n    paths:\n      - 'src/main/java/org/jabref/logic/importer/fetcher/**'\n      - 'src/test/java/org/jabref/logic/importer/fetcher/**'\n      - '.github/workflows/tests-fetchers.yml'\n      - 'build.gradle'\n  schedule:\n    # run on each Wednesday\n    - cron: '2 3 * * 3'\n  workflow_dispatch:\n\nenv:\n  SpringerNatureAPIKey: ${{ secrets.SPRINGERNATUREAPIKEY_FOR_TESTS }}\n  AstrophysicsDataSystemAPIKey: ${{ secrets.AstrophysicsDataSystemAPIKey_FOR_TESTS }}\n  IEEEAPIKey: ${{ secrets.IEEEAPIKey_FOR_TESTS }}\n  BiodiversityHeritageApiKey: ${{ secrets.BiodiversityHeritageApiKey_FOR_TESTS}}\n\nconcurrency:\n  group: fetcher-tests-${{ github.head_ref }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  fetchertests:\n    name: Fetcher tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v3\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          java-version: 18\n          distribution: 'temurin'\n          cache: 'gradle'\n      - name: Run fetcher tests\n        run: ./gradlew fetcherTest\n        env:\n          CI: \"true\"\n```"}
{"llm_response": "```yaml release:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Build project\n      run: npm build\n    - name: Release to GitHub Packages\n      uses: actions/upload-artifact@v2\n      with:\n        name: package\n        path: dist\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Cache\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-npm-${{ hashFiles('**/package.json') }}\n          restore-keys: |\n            ${{ runner.os }}-npm-\n      - name: Install dependencies\n        run: npm i\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n      - name: Release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npx semantic-release\n```"}
{"llm_response": "```yaml Merge Checker\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    types: [opened, edited, labeled, unlabeled]\n\njobs:\n  check_labels:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Install dependencies\n      run: go get -d ./...\n    - name: Run merge checker\n      run: go run ./cmd/check_labels/main.go\n```", "answer": "```yaml ---\nname: Merge Checker\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n      - reopened\n      - labeled\n      - unlabeled\n\njobs:\n\n  check_labels:\n    name: Check labels\n    runs-on: ubuntu-latest\n    steps:\n      - uses: docker://agilepathway/pull-request-label-checker:latest\n        with:\n          none_of: do-not-merge/hold\n          one_of: ok-to-merge\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: CMake Build (Ubuntu aarch64)\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up CMake\n        uses: cmake/setup-cmake@v3\n      - name: Install dependencies\n        run: cmake --install-deps\n      - name: Configure project\n        run: cmake .\n      - name: Build project\n        run: make\n```", "answer": "```yaml name: CMake Build (Ubuntu aarch64)\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\nenv:\n  BUILD_TYPE: Release\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    container: ubuntu:20.04\n\n    steps:\n    - name: Prepare system\n      shell: bash\n      run: |\n        apt update\n        apt -y full-upgrade\n        apt -y install git\n    - name: Check out source\n      uses: actions/checkout@v1\n    - name: Install dependencies\n      shell: bash\n      run: |\n        dpkg --add-architecture arm64\n        sh -c \"sed \\\"s|^deb \\([a-z\\.:/]*\\) \\([a-z\\-]*\\) \\(.*\\)$|deb [arch=amd64] \\1 \\2 \\3\\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports \\2 \\3|\\\" /etc/apt/sources.list > /etc/apt/sources.list.new\"\n        rm /etc/apt/sources.list\n        mv /etc/apt/sources.list{.new,}\n        apt update\n        DEBIAN_FRONTEND=noninteractive apt install -y {gcc-10,g++-10,pkg-config}-aarch64-linux-gnu {libsdl2,qtbase5,qtmultimedia5,libslirp,libarchive,libepoxy}-dev:arm64 cmake dpkg-dev\n    - name: Configure\n      shell: bash\n      run: |\n        CC=aarch64-linux-gnu-gcc-10 CXX=aarch64-linux-gnu-g++-10 cmake -DPKG_CONFIG_EXECUTABLE=/usr/bin/aarch64-linux-gnu-pkg-config $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B build\n    - name: Make\n      shell: bash\n      run: |\n        cmake --build build -j$(nproc --all)\n        mkdir dist\n        cp build/melonDS dist\n    - uses: actions/upload-artifact@v1\n      with:\n        name: melonDS-ubuntu-aarch64\n        path: dist\n```"}
{"llm_response": "```yaml\nname: Discord Notification\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  issues:\n    types:\n      - opened\n      - closed\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install requests\n\n      - name: Send notification to Discord\n        run: |\n          curl -X POST \\\n            --header \"Content-Type: application/json\" \\\n            ${{ secrets.DISCORD_WEBHOOK }} \\\n            --data '{\"content\": \"New changes available in your repository.\"}'\n```", "answer": "```yaml name: \"Discord Notification\"\non: [push, pull_request, issues]\nenv:\n  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}\n\njobs:\n  notify:\n    runs-on: ubuntu-latest\n    steps:\n\n      - name: Triggering Push Discord Notification\n        if: github.event_name == 'push' && github.repository_owner == 'hugsy'\n        uses: sarisia/actions-status-discord@v1\n        with:\n          nodetail: true\n          title: ${{ github.actor }} pushed to `${{ github.ref }}`\n          description: |\n            **Commit delta**: `${{ github.event.before }}` \u2192 `${{ github.event.after }}`\n            ---\n            **Changes**: ${{ github.event.compare }}\n            ---\n            **Commits**:\n              \u25cf ${{ join(github.event.commits.*.message, '\n              \u25cf ') }}\n\n          color: 0x0000ff\n          username: ${{ github.actor }} on CFB\n          avatar_url: https://i.imgur.com/O4RKNqj.png\n\n      - name: Triggering Pull Request Discord Notification\n        if: github.event_name == 'pull_request' && github.event.action == 'opened' && github.repository_owner == 'hugsy'\n        uses: sarisia/actions-status-discord@v1\n        with:\n          nodetail: true\n          title: ${{ github.actor }} created a new Pull Request (`#${{ github.event.pull_request.number }}`)\n          description: |\n            **${{ github.event.pull_request.title }}**\n\n            ${{ github.event.pull_request.body }}\n\n            ---\n            Link: ${{ github.event.pull_request.html_url }}\n          color: 0xff0000\n          username: ${{ github.actor }} on CFB\n          avatar_url: https://i.imgur.com/O4RKNqj.png\n          \n      - name: Triggering Issue Discord Notification\n        if: github.event_name == 'issues' && github.event.action == 'opened' && github.repository_owner == 'hugsy'\n        uses: sarisia/actions-status-discord@v1\n        with:\n          nodetail: true\n          title: ${{ github.actor }} created a new Issue (`#${{ github.event.issue.number }}`)\n          description: |\n            **${{ github.event.issue.title }}**\n\n            ${{ github.event.issue.body }}\n\n            ---\n            Link: ${{ github.event.issue.html_url }}\n          color: 0x00ff00\n          username: ${{ github.actor }} on CFB\n          avatar_url: https://i.imgur.com/O4RKNqj.png\n```"}
{"llm_response": "```yaml goreleaser:\n  on:\n    push:\n      tags:\n        - '.*'\n  jobs:\n    goreleaser:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n        - name: Install dependencies\n          run: make build\n        - name: Build and publish\n          run: make release\n```", "answer": "```yaml name: goreleaser\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.18\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          # either 'goreleaser' (default) or 'goreleaser-pro'\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution\n        # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}\n```"}
{"llm_response": "```yaml JDK9\nname: JDK9\n\non:\n  push:\n    branches:\n      - '**'\n    paths:\n      - 'Casks/zulu-jdk9.rb'\n  pull_request:\n    branches:\n      - master\n    paths:\n      - 'Casks/zulu-jdk9.rb'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '3.0'\n      - name: Install dependencies\n        run: bundle install\n      - name: Run tests\n        run: bundle exec rspec\n```", "answer": "```yaml name: JDK9\n\non:\n  push:\n    branches:\n      - '**'\n    paths:\n      - 'Casks/zulu-jdk9.rb'\n  pull_request:\n    branches:\n      - master\n    paths:\n      - 'Casks/zulu-jdk9.rb'\n\njobs:\n\n  build:\n    name: Build\n    runs-on: macos-latest\n    steps:\n\n      - name: Check out\n        uses: actions/checkout@v3\n\n      - name: brew pull & reset & tap\n        run: |\n          brew update-reset \"$(brew --repository)\"\n          brew update-reset \"$(brew --repository homebrew/cask)\"\n          mkdir -p $(brew --repo)/Library/Taps/mdogan\n          ln -s $GITHUB_WORKSPACE $(brew --repo)/Library/Taps/mdogan/homebrew-zulu\n        env:\n          HOMEBREW_COLOR: 1\n          HOMEBREW_DEVELOPER: 1\n\n      - name: install jdk9\n        run: brew install zulu-jdk9\n        env:\n          HOMEBREW_COLOR: 1\n          HOMEBREW_DEVELOPER: 1\n\n      - name: uninstall jdk9\n        run: brew uninstall zulu-jdk9\n        env:\n          HOMEBREW_COLOR: 1\n          HOMEBREW_DEVELOPER: 1\n```"}
{"llm_response": "```yaml astro-i18next-deploy-example:\n  on:\n    push:\n      branches:\n        - main\n        - alpha\n        - beta\n\n  jobs:\n    build-and-deploy:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Set up Node.js\n          uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n\n        - name: Install dependencies\n          run: npm install\n\n        - name: Build the project\n          run: npm run build\n\n        - name: Deploy to GitHub Pages\n          uses: actions/deploy-pages@v3\n          with:\n            github-token: ${{ secrets.GITHUB_TOKEN }}\n            publish-dir: ./dist\n```", "answer": "```yaml name: astro-i18next-deploy-example\n\non:\n  push:\n    branches: [main, alpha, beta]\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout \ud83d\udece\ufe0f\n        uses: actions/checkout@v3\n\n      - name: Install and Build \ud83d\udd27\n        run: |\n          npm ci\n          npm run build\n          cd example\n          npm ci\n          npm link ..\n          npm run build\n\n      - name: Deploy \ud83d\ude80\n        uses: JamesIves/github-pages-deploy-action@v4.3.3\n        with:\n          branch: gh-pages\n          folder: example/dist\n```"}
{"llm_response": "```yaml\nname: Build ShellCheck\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n    types:\n      - workflow_run\n\njobs:\n  package_source:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Haskell\n        uses: hadolint/hadolint-action@v0.17.0\n        with:\n          version: \"8.10.7\"\n      - name: Install dependencies\n        run: |\n          cabal update\n          cabal install --only-dependencies\n      - name: Package source code\n        run: |\n          cabal sdist\n\n  build_source:\n    runs-on: ubuntu-latest\n    needs: package_source\n    steps:\n      - name: Checkout source code\n        uses: actions/checkout@v2\n      - name: Set up Haskell\n        uses: hadolint/hadolint-action@v0.17.0\n        with:\n          version: \"8.10.7\"\n      - name: Build source code\n        run: |\n          cabal build\n\n  package_binary:\n    runs-on: ubuntu-latest\n    needs: build_source\n    steps:\n      - name: Checkout source code\n        uses: actions/checkout@v2\n      - name: Set up Haskell\n        uses: hadolint/hadolint-action@v0.17.0\n        with:\n          version: \"8.10.7\"\n      - name: Build binaries\n        run: |\n          cabal install --only-dependencies\n          cabal binary-depends\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: package_binary\n    steps:\n      - name: Checkout source code\n        uses: actions/checkout@v2\n      - name: Set up Haskell\n        uses: hadolint/hadolint-action@v0.17.0\n        with:\n          version: \"8.10.7\"\n      - name: Deploy binaries\n        run: |\n          cabal install --only-dependencies\n          cabal binary-depends\n```", "answer": "```yaml name: Build ShellCheck\n\n# Run this workflow every time a new commit pushed to your repository\non: push\n\njobs:\n  package_source:\n    name: Package Source Code\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Dependencies\n        run: |\n          sudo apt-get update\n          sudo apt-mark manual ghc # Don't bother installing ghc just to tar up source\n          sudo apt-get install cabal-install\n\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Deduce tags\n        run: |\n          mkdir source\n          echo \"latest\" > source/tags\n          if tag=$(git describe --exact-match --tags)\n          then\n            echo \"stable\" >> source/tags\n            echo \"$tag\" >> source/tags\n          fi\n          cat source/tags\n\n      - name: Package Source\n        run: |\n          grep \"stable\" source/tags || ./setgitversion\n          cabal sdist\n          mv dist-newstyle/sdist/*.tar.gz source/source.tar.gz\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: source\n          path: source/\n\n  build_source:\n    name: Build Source Code\n    needs: package_source\n    strategy:\n      matrix:\n        build: [linux.x86_64, linux.aarch64, linux.armv6hf, darwin.x86_64, windows.x86_64]\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Build source\n        run: |\n          mkdir -p bin\n          mkdir -p bin/${{matrix.build}}\n          ( cd bin && ../build/run_builder ../source/source.tar.gz ../build/${{matrix.build}} )\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: bin\n          path: bin/\n\n  package_binary:\n    name: Package Binaries\n    needs: build_source\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Work around GitHub permissions bug\n        run: chmod +x bin/*/shellcheck*\n\n      - name: Package binaries\n        run: |\n          export TAGS=\"$(cat source/tags)\"\n          mkdir -p deploy\n          cp -r bin/* deploy\n          cd deploy\n          ../.prepare_deploy\n          rm -rf */ README* LICENSE*\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: deploy\n          path: deploy/\n\n  deploy:\n    name: Deploy binaries\n    needs: package_binary\n    runs-on: ubuntu-latest\n    environment: Deploy\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Download artifacts\n        uses: actions/download-artifact@v3\n\n      - name: Upload to GitHub\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          export TAGS=\"$(cat source/tags)\"\n          ./.github_deploy\n\n      - name: Waiting for GitHub to replicate uploaded releases\n        run: |\n          sleep 300\n\n      - name: Upload to Docker Hub\n        env:\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n          DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}\n          DOCKER_BASE: ${{ secrets.DOCKER_USERNAME }}/shellcheck\n        run: |\n          export TAGS=\"$(cat source/tags)\"\n          ( source ./.multi_arch_docker && set -eux && multi_arch_docker::main )\n```"}
{"llm_response": "```yaml\nname: Mirror pre-requisite images for Shipwright samples\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  push:\n    branches-ignore:\n      - master\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2\n    - name: Login to Docker Hub\n      uses: docker/login-action@v2\n      with:\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }}\n    - name: Pull pre-requisite images\n      run: |\n        docker pull gcr.io/googlesamples/skaffold:latest\n        docker pull gcr.io/google-containers/hello-world:latest\n        docker pull gcr.io/google-containers/httpd:latest\n        docker pull gcr.io/google-containers/nginx:latest\n```", "answer": "```yaml name: Mirror pre-requisite images for Shipwright samples\n\non:\n  schedule:\n  - cron: '0 0 * * *'\n  workflow_dispatch:  # Manual trigger\n\njobs:\n  build:\n    if: ${{ github.repository == 'shipwright-io/build' }}\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: imjasonh/setup-crane@e82f1b9a8007d399333baba4d75915558e9fb6a4\n\n      - name: Mirror images\n        env:\n          REPO: ghcr.io/${{ github.repository_owner }}/shipwright-samples\n        run: |\n          for IMAGE in \\\n            library/golang:1.16 \\\n            library/golang:1.17 \\\n            library/golang:1.18 \\\n            library/maven:3-jdk-8-openj9 \\\n            library/node:12 \\\n            library/node:14 \\\n            library/node:16 \\\n            library/python:3.8 \\\n            library/python:3.9 \\\n            openliberty/open-liberty:kernel-java8-openj9-ubi \\\n            ; do\n            crane cp \"${IMAGE}\" \"${REPO}/$(cut -d/ -f2 <<<\"${IMAGE}\")\"\n          done\n```"}
{"llm_response": "```yaml Code Style:\n  on:\n    push:\n      branches:\n        - main\n        - release-*\n\n  jobs:\n    style:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - uses: gofmt-action/setup-go@v0.4.3\n        - uses: gofmt-action/gofmt@v0.4.3\n        - uses: actions/labeler@v2\n          with:\n            labels:\n              - code-style\n```", "answer": "```yaml # Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-sandbox/knobots\n\nname: Code Style\n\non:\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\njobs:\n\n  style:\n    uses: knative/actions/.github/workflows/style.yaml@main\n```"}
{"llm_response": "```yaml\nname: Unit Tests\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip setuptools wheel\n        pip install pytest pytest-cov\n\n    - name: Run tests\n      run: |\n        pytest --cov=your_package_name\n```", "answer": "```yaml name: Unit Tests\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Environment\n      run: env\n    - name: Checkout\n      run: |\n        if [ \"$GITHUB_EVENT_NAME\" == 'push' ]\n        then\n          git clone --recursive https://github.com/$GITHUB_REPOSITORY $GITHUB_WORKSPACE && \\\n            git -C \"$GITHUB_WORKSPACE\" checkout $GITHUB_SHA\n        elif [ \"$GITHUB_EVENT_NAME\" == 'pull_request' ]\n        then\n          git clone --single-branch --recursive https://github.com/$GITHUB_REPOSITORY $GITHUB_WORKSPACE && \\\n            git -C \"$GITHUB_WORKSPACE\" fetch origin $GITHUB_REF && \\\n            git -C \"$GITHUB_WORKSPACE\" checkout FETCH_HEAD\n        else\n          git clone --recursive -b $GITHUB_HEAD_REF https://github.com/$GITHUB_REPOSITORY $GITHUB_WORKSPACE\n        fi\n    - name: Setup Python 3.7\n      run: |\n        python_dir=$(ls -1d $RUNNER_TOOL_CACHE/Python/3.7*/x64 | tail -1)\n        echo \"${python_dir}\" >> $GITHUB_PATH\n        echo \"${python_dir}/bin\" >> $GITHUB_PATH\n        echo \"pythonLocation=${python_dir}\" >> $GITHUB_ENV\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        # Install mysql_config on machine to avoid \"OSError: mysql_config not found\" error during pip install for mysqlclient.\n        sudo apt-get update && sudo apt-get install -y libmysqlclient-dev\n        pip3 install -r deps/requirements.txt\n        pip3 install -r deps/dev_requirements.txt\n        pip3 install -r deps/vcs_requirements.txt\n    - name: Run Python tests\n      run: |\n        ./tests/run_unit_tests.sh\n```"}
{"llm_response": "```yaml\nname: Vulnerability\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 4 * * 0'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run vulnerability analysis\n        run: npm audit --json\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"Vulnerability\"\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"main\" ]\n  schedule:\n    - cron: '37 4 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Check for vulnerability\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml ci-link-checker-image:\n  name: CI Link Checker Image\n  on:\n    push:\n      branches-ignore: ['main']\n      paths:\n        - '.github/website_link_checker/**'\n    pull_request:\n      branches-ignore: ['main']\n      paths:\n        - '.github/website_link_checker/**'\n    schedule:\n      - cron: '0 0 * * *' # Run every day at midnight\n  jobs:\n    build:\n      concurrency:\n        group: \"github-workflow-${{ github.workflow }}-${{ github.head_ref || github.run_id }}\"\n        parallelism: 1\n      runs-on: ubuntu-latest\n      defaults:\n        working-directory: \".github/website_link_checker\"\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n        - name: Install dependencies\n          run: go mod download\n        - name: Run link checker\n          run: go test ./...\n```", "answer": "```yaml name: ci-link-checker-image\n\non:\n  push:\n    paths:\n      - '.github/website_link_checker/**'\n    branches:\n      - \"master\"\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\ndefaults:\n  run:\n    working-directory: .github/website_link_checker\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: Login to Packages Container registry\n      uses: docker/login-action@v2\n      with:\n        registry: ghcr.io\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    - run: echo \"TODAY=$(date +\"%Y.%m.%d\")\" >> $GITHUB_ENV\n    - name: build ci-link-checker:${{env.TODAY}} image\n      run: |\n        docker build -t ghcr.io/runatlantis/ci-link-checker:${{env.TODAY}} .\n    - name: publish ci-link-checker:${{env.TODAY}} image\n      run: |\n        docker push ghcr.io/runatlantis/ci-link-checker:${{env.TODAY}}\n        docker tag ghcr.io/runatlantis/ci-link-checker:${{env.TODAY}} ghcr.io/runatlantis/ci-link-checker:latest\n        docker push ghcr.io/runatlantis/ci-link-checker:latest\n```"}
{"llm_response": "```yaml\nname: Unlabel Assigned Issues\n\non:\n  issues:\n    types:\n      - assigned\n\njobs:\n  unlabel-issue:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install your-package-name\n\n      - name: Label issue\n        run: |\n          gh issue label -a \"bug\" \"$GITHUB_EVENT_REPOSITORY_ID/$GITHUB_EVENT_NUMBER\"\n```", "answer": "```yaml name: Unlabel Assigned Issues\non:\n  issues:\n    types:\n      - assigned\npermissions:\n  contents: read\n\njobs:\n  unlabel-issue:\n    permissions:\n      issues: write  # for andymckay/labeler to label issues\n      pull-requests: write  # for andymckay/labeler to label PRs\n    runs-on: ubuntu-latest\n    steps:\n      - name: unlabel-issues\n        uses: andymckay/labeler@master\n        with:\n          remove-labels: \"needs-triage\"\n```"}
{"llm_response": "```yaml\nname: External Trigger Scheduler\n\non:\n  schedule:\n    - cron: '0 43 * * *' # Run every hour at 43 minutes past the hour\n  push:\n    branches: [ main ]\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: External Trigger Scheduler\n\non:\n  schedule:\n    - cron:  '43 * * * *'\n  workflow_dispatch:\n\njobs:\n  external-trigger-scheduler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n        with:\n          fetch-depth: '0'\n\n      - name: External Trigger Scheduler\n        run: |\n          echo \"**** Branches found: ****\"\n          git for-each-ref --format='%(refname:short)' refs/remotes\n          echo \"**** Pulling the yq docker image ****\"\n          docker pull ghcr.io/linuxserver/yq\n          for br in $(git for-each-ref --format='%(refname:short)' refs/remotes)\n          do\n            br=$(echo \"$br\" | sed 's|origin/||g')\n            echo \"**** Evaluating branch ${br} ****\"\n            ls_branch=$(curl -sX GET https://raw.githubusercontent.com/linuxserver/docker-rutorrent/${br}/jenkins-vars.yml \\\n              | docker run --rm -i --entrypoint yq ghcr.io/linuxserver/yq -r .ls_branch)\n            if [ \"$br\" == \"$ls_branch\" ]; then\n              echo \"**** Branch ${br} appears to be live; checking workflow. ****\"\n              if curl -sfX GET https://raw.githubusercontent.com/linuxserver/docker-rutorrent/${br}/.github/workflows/external_trigger.yml > /dev/null 2>&1; then\n                echo \"**** Workflow exists. Triggering external trigger workflow for branch ${br} ****.\"\n                curl -iX POST \\\n                  -H \"Authorization: token ${{ secrets.CR_PAT }}\" \\\n                  -H \"Accept: application/vnd.github.v3+json\" \\\n                  -d \"{\\\"ref\\\":\\\"refs/heads/${br}\\\"}\" \\\n                  https://api.github.com/repos/linuxserver/docker-rutorrent/actions/workflows/external_trigger.yml/dispatches\n              else\n                echo \"**** Workflow doesn't exist; skipping trigger. ****\"\n              fi\n            else\n              echo \"**** ${br} appears to be a dev branch; skipping trigger. ****\"\n            fi\n          done\n```"}
{"llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.14'\n\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: \"Pull Request Labeler\"\r\non:\r\n  pull_request_target:\r\n    types: [opened]\r\n\r\njobs:\r\n  triage:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/labeler@main\r\n      with:\r\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\r\n        configuration-path: .github/pr-labeler.yml\r\n        sync-labels: false\r\n```"}
{"llm_response": "```yaml\nname: Codespell\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  Codespell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Codespell\n        run: |\n          sudo apt-get update\n          sudo apt-get install codespell\n      - name: Run Codespell\n        run: |\n          codespell --ignore-case -L en_US,fr_FR --exclude=vendor --exclude=test\n```", "answer": "```yaml name: Codespell\n\non:\n  pull_request:\n\njobs:\n\n  Codespell:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - name: Run check\n        uses: codespell-project/actions-codespell@master\n        with:\n          skip: ./src/control/vendor,./.git\n          ignore_words_file: ci/codespell.ignores\n          builtin: clear,rare,informal,names,en-GB_to_en-US\n```"}
{"llm_response": "```yaml Deploy Demo Audioserve\non:\n  push:\n    branches:\n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Build project\n        run: cargo build --release\n      - name: Upload to GitHub Pages\n        uses: actions/deploy-pages@v3\n          with:\n            github_token: ${{ secrets.GITHUB_TOKEN }}\n            publish_dir: target/release\n```", "answer": "```yaml name: Deploy Demo Audioserve\n\non:\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: ssh to VM and redeploy\n        uses: appleboy/ssh-action@master\n        with:\n          host: audioserve.zderadicka.eu\n          username: ${{ secrets.AUDIOSERVE_USERNAME }}\n          key: ${{ secrets.AUDIOSERVE_KEY }}\n          script: |\n            docker stop -t 30 audioserve || true\n            docker rm -f audioserve || true\n            docker pull izderadicka/audioserve:unstable\n            ./run-audioserve.sh\n```"}
{"llm_response": "```yaml Pull Request Labeler:\n  on:\n    pull_request:\n      types:\n        - opened\n        - labeled\n        - unlabeled\n        - ready_for_review\n        - merged\n\n  jobs:\n    label:\n      runs-on: ubuntu-latest\n\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Set up Rust\n          uses: actions/setup-rust@v2\n          with:\n            rust-version: 'stable'\n\n        - name: Install dependencies\n          run: cargo build --release\n\n        - name: Run tests\n          run: cargo test\n\n        - name: Label pull request\n          if: github.event.pull_request.labels.some(label => label.name == \"bug\")\n          run: |\n            curl -X POST \\\n              https://api.github.com/repos/<username>/<repository>/issues/<issue-number>/labels \\\n              -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n              -d '{\"name\": \"bug\"}'\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n- pull_request_target\n\njobs:\n  label:\n    runs-on: ubuntu-20.04\n    steps:\n    - uses: actions/labeler@v4\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        sync-labels: true\n```"}
{"llm_response": "```yaml\nname: Run all plugin workflows\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Lint code\n      run: npm run lint\n```", "answer": "```yaml name: Run all plugin workflows\n\non: workflow_dispatch\n\njobs:\n    lint:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: actions/setup-node@v3\n              with:\n                  node-version: 14\n            - run: 'echo done'\n```"}
{"llm_response": "```yaml\nname: CIFuzz\n\non:\n  pull_request:\n    branches: [ main ]\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build and run Fuzzing\n        run: |\n          make fuzzing\n```", "answer": "```yaml name: CIFuzz\non: [pull_request]\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'capstone'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'capstone'\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure()\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"llm_response": "```yaml update:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Update design pattern membership\n      run: |\n        # Add your script here to update design pattern membership\n        echo \"Updating design pattern membership...\"\n        # Example command to add or remove members from a group\n        git config --global user.name \"Your Name\"\n        git config --global user.email \"your.email@example.com\"\n        git remote set-url origin https://github.com/username/repository.git\n        git push -u origin main\n```", "answer": "```yaml name: Update design pattern membership\n\non:\n  workflow_dispatch:\n  schedule:\n  - cron: '13 14 * * *'\n\njobs:\n  update:\n\n    runs-on: ubuntu-latest\n    container: obolibrary/odkfull:v1.3.1\n\n    steps:\n    - name: Checkout repo\n      uses: actions/checkout@v3\n      \n    - name: Work around https://github.com/peter-evans/create-pull-request/issues/1170\n      run: git config --global --add safe.directory \"$GITHUB_WORKSPACE\"\n      \n    - name: Update design pattern membership\n      run: cd src/ontology && make pattern-docs && rm -rf dosdp-tools-0.19.3 && rm -rf dosdp-tools-0.19.3.tgz && cd ../..\n    \n    - name: Create PR\n      uses: peter-evans/create-pull-request@v4\n      with:\n        title: Update design pattern docs\n        branch: update-design-patterns\n        add-paths: |\n            src/design_patterns/*.tsv\n            docs/patterns/*.md\n            src/ontology/imports/go-pattern-conformance.ttl\n```"}
{"llm_response": "```yaml winget:\n  on:\n    push:\n      branches:\n        - main\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Build Winget package\n      run: make build\n\n    - name: Publish Winget package to GitHub Packages\n      uses: docker/build-push-action@v3\n      with:\n        image: wingetpackage/winget:latest\n        tags: ${{ inputs.version-this }}\n        username: github-actions-bot\n        password: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Winget\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'The latest version'\n        required: true\n\njobs:\n  publish:\n    runs-on: windows-latest\n    defaults:\n      run:\n        shell: pwsh\n        working-directory: ${{ github.workspace }}/packages/winget\n    env:\n      WINGETCREATE_TOKEN: ${{ secrets.WINGETCREATE_TOKEN }}\n    steps:\n    - name: Checkout code \ud83d\udc4b\n      uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n    - name: Create manifest and submit PR \ud83d\udce6\n      run: |\n        ./build.ps1 -Version \"${{ github.event.inputs.version }}\" -Token $env:WINGETCREATE_TOKEN\n```"}
{"llm_response": "```yaml\nname: PHPCPD\n\non:\n  - pull_request:\n      branches:\n        - develop\n    push:\n      branches:\n        - develop\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Install PHPCPD\n      run: |\n        sudo apt-get update && sudo apt-get install php-cpd\n    - name: Run PHPCPD\n      run: |\n        cd /path/to/repo && phpcpd .\n```", "answer": "```yaml name: PHPCPD\n\non:\n  pull_request:\n    branches:\n      - develop\n    paths:\n      - '**.php'\n      - '.github/workflows/phpcpd.yml'\n  push:\n    branches:\n      - develop\n    paths:\n      - '**.php'\n      - '.github/workflows/phpcpd.yml'\n\njobs:\n  build:\n    name: Code Copy-Paste Detection\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[ci skip]')\"\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: '8.0'\n          tools: phpcpd\n          extensions: dom, mbstring\n          coverage: none\n\n      - name: Detect duplicate code\n        run: phpcpd app/ tests/\n```"}
{"llm_response": "```yaml\nname: Clang Tests\n\non:\n  push:\n    branches-ignore:\n      - main\n    paths:\n      - release/**\n      - clang/**\n      - .github/workflows/clang-tests.yml\n      - .github/workflows/llvm-project-tests.yml\n      - !llvm/**\n  pull_request:\n    branches-ignore:\n      - main\n    paths:\n      - release/**\n      - clang/**\n      - .github/workflows/clang-tests.yml\n      - .github/workflows/llvm-project-tests.yml\n      - !llvm/**\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  check_clang:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Clang\n        uses: actions/setup-clang@v2\n      - name: Build Clang\n        run: make -C clang/\n```", "answer": "```yaml name: Clang Tests\n\non:\n  workflow_dispatch:\n  push:\n    ignore-forks: true\n    branches:\n      - 'release/**'\n    paths:\n      - 'clang/**'\n      - '.github/workflows/clang-tests.yml'\n      - '.github/workflows/llvm-project-tests.yml'\n      - '!llvm/**'\n  pull_request:\n    ignore-forks: true\n    branches:\n      - 'release/**'\n    paths:\n      - 'clang/**'\n      - '.github/workflows/clang-tests.yml'\n      - '.github/workflows/llvm-project-tests.yml'\n      - '!llvm/**'\n\nconcurrency:\n  # Skip intermediate builds: always.\n  # Cancel intermediate builds: only if it is a pull request build.\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}\n\njobs:\n  check_clang:\n    if: github.repository_owner == 'llvm'\n    name: Test clang,lldb,libclc\n    uses: ./.github/workflows/llvm-project-tests.yml\n    with:\n      build_target: check-clang\n      projects: clang;lldb;libclc\n```"}
{"llm_response": "```yaml CI\n\nname: CI\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  fork:\n  pull_request:\n    types:\n      - opened\n      - labeled\n      - assigned\n      - ready_for_review\n      - closed\n\njobs:\n  test:\n    runs-on: macOS-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Swift\n        uses: swift/setup-swift@v0.4.3\n      - name: Run tests\n        run: swift test --enable-code-coverage\n      - name: Upload coverage report\n        uses: codecov/upload-action@v2\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          directory: .codecov/\n          fail_on_error: false\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    runs-on: macos-12\n    steps:\n    - uses: actions/checkout@v3\n    - name: Run tests\n      env: \n        DEVELOPER_DIR: /Applications/Xcode_13.4.1.app\n      run: swift test\n```"}
{"llm_response": "```yaml\nname: Static analysis checks\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  analysis:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install black flake8 pylint\n      - name: Run static analysis checks\n        run: |\n          black .\n          flake8 .\n          pylint .\n```", "answer": "```yaml name: Static analysis checks\n\non:\n  pull_request:\n  push:\n  # Run once a day\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  analysis:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        category:\n          - bandit\n          - doc8\n          - docs\n          - readme\n          - flake8\n          - pylint\n          - flake8-tests\n          - pylint-tests\n          - flake8-examples\n          - pylint-examples\n          - black-check\n          - isort-check\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.8\n      - run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade -r dev_requirements/ci-requirements.txt\n      - name: run test\n        env:\n          TOXENV: ${{ matrix.category }}\n        run: tox -- -vv\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 11 * * 1'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/setup@v1\n        with:\n          language: csharp\n        env:\n          CODEQL_DATABASE_PATH: /github/workspace/.codeql/database\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/run@v1\n        with:\n          database-path: ${{ env.CODEQL_DATABASE_PATH }}\n```", "answer": "```yaml name: \"CodeQL\"\r\n\r\non:\r\n  push:\r\n    branches: [ master ]\r\n  pull_request:\r\n    # The branches below must be a subset of the branches above\r\n    branches: [ master ]\r\n  schedule:\r\n    - cron: '15 23 * * 1'\r\n\r\njobs:\r\n  analyze:\r\n    name: Analyze\r\n    runs-on: windows-2019\r\n\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        language: [ 'csharp' ]\r\n\r\n    steps:\r\n    - name: Checkout repository\r\n      uses: actions/checkout@v3\r\n      with:\r\n          fetch-depth: 0\r\n\r\n    - name: Setup dotnet\r\n      uses: actions/setup-dotnet@v3\r\n      with:\r\n        dotnet-version: |\r\n          3.1.x\r\n          5.0.x\r\n          6.0.x                     \r\n\r\n    # Initializes the CodeQL tools for scanning.\r\n    - name: Initialize CodeQL\r\n      uses: github/codeql-action/init@v2\r\n      with:\r\n        languages: ${{ matrix.language }}\r\n        # If you wish to specify custom queries, you can do so here or in a config file.\r\n        # By default, queries listed here will override any specified in a config file.\r\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\r\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\r\n\r\n    - name: Autobuild\r\n      uses: github/codeql-action/autobuild@v2\r\n\r\n    - name: Perform CodeQL Analysis\r\n      uses: github/codeql-action/analyze@v2\r\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 1 * * FRI'\n\npermissions:\n  contents: read\n  actions: read\n  pull-requests: read\n  security-events: write\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: github/codeql-action/analyze@v2\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          path: .\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '30 1 * * 5'\n\npermissions:\n  contents: read\n  actions: read\n  pull-requests: read\n  security-events: write\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Verify Pull Request\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  call-verify-workflow:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up .NET SDK\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.x'\n    - name: Restore NuGet packages\n      run: dotnet restore\n    - name: Build and test\n      run: dotnet build --configuration Release && dotnet test --configuration Release\n```", "answer": "```yaml name: Verify Pull Request\n\non:\n  pull_request:\n\njobs:\n  call-verify-workflow:\n    uses: Lombiq/GitHub-Actions/.github/workflows/verify-submodule-pull-request.yml@dev\n```"}
{"llm_response": "```yaml\nname: Benchmarks\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  run_benchmark:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Rust\n      uses: actions-rs/setup-rust@v1\n      with:\n        rust-version: 'stable'\n\n    - name: Build and run benchmarks\n      run: |\n        cargo build --release\n        ./target/release/benches/benchmarks\n```", "answer": "```yaml name: Benchmarks\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  runBenchmark:\n    if: contains(github.event.pull_request.labels.*.name, 'run-benchmark')\n    name: run benchmark\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - uses: actions-rs/toolchain@v1.0.7\n        with:\n          toolchain: stable\n          override: true\n          profile: minimal\n      - name: Cache cargo\n        uses: actions/cache@v3\n        with:\n          path: |\n            target\n            ~/.cargo/git\n            ~/.cargo/registry\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n      - uses: boa-dev/criterion-compare-action@v3.2.3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          branchName: ${{ github.base_ref }}\n          cwd: ./boa_engine\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 17 * * MON'\n\njobs:\n  analyze:\n    name: Analyze with CodeQL\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up CodeQL\n        uses: github/codeql-action/setup@v2\n      - name: Initialize CodeQL database\n        uses: github/codeql-action/init-db@v2\n      - name: Annotate source code with CodeQL queries\n        uses: github/codeql-action/annotate@v2\n      - name: Generate report\n        uses: github/codeql-action/report@v2\n```", "answer": "```yaml \nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    # Mondays at 13:17 UTC\n    - cron: '17 13 * * 1'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'java' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: setup JDK\n      uses: actions/setup-java@v3\n      with:\n        distribution: \"temurin\"\n        java-version: 8\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: build\n      run: ./mvnw --batch-mode --no-transfer-progress --show-version --settings .github/maven/settings.xml package\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Brick Offline First\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - packages/brick_offline_first/**\n      - .github/workflows/brick_offline_first.yaml\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    # Your job configuration goes here\n```", "answer": "```yaml name: Brick Offline First\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    paths:\n      - \"packages/brick_offline_first/**\"\n      - \".github/workflows/brick_offline_first.yaml\"\n\nenv:\n  PUB_ENVIRONMENT: bot.github\n\njobs:\n  analyze_format_test:\n    uses: ./.github/workflows/reusable-dart-analyze-format-test.yaml\n    with:\n      package: brick_offline_first\n```"}
{"llm_response": "```yaml\nname: Dev branch CI\n\non:\n  push:\n    branches:\n      - dev\n\njobs:\n  lib-build-test:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n\n  extensions-build-test:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Dev branch CI \n# Runs CI on all libraries when a PR is merged to dev\n\non:\n  push:\n    branches:\n      - \"dev\"\n\nconcurrency:\n  group: dev-ci-${{github.ref}}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  lib-build-test:\n    runs-on: ubuntu-latest\n\n    strategy:\n        fail-fast: false\n        matrix:\n          library: \n            - msal-core\n            - msal-common\n            - msal-browser\n            - msal-node\n            - msal-angular\n            - msal-react\n            - node-token-validation\n\n    name: ${{ matrix.library }}\n  \n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n\n    - name: Restore node_modules\n      uses: actions/cache@v3\n      id: cache\n      with:\n        path: |\n          node_modules\n          lib/*/node_modules\n        key: ${{ runner.os }}-${{ hashFiles('package-lock.json', 'lib/*/package-lock.json') }}\n\n    - name: Clean Install\n      if: steps.cache.outputs.cache-hit != 'true'\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n\n    - name: Build packages\n      working-directory: lib/${{ matrix.library }}\n      run: npm run build:all\n\n    - name: Unit Tests with coverage\n      working-directory: lib/${{ matrix.library }}\n      run: npm run test:coverage\n\n    - name: Upload Test Coverage to CodeCov\n      if: success()\n      uses: codecov/codecov-action@v3\n      with:\n        files: lib/${{matrix.library}}/coverage/lcov.info\n        flags: ${{ matrix.library }}\n        \n  extensions-build-test:\n    runs-on: windows-2019\n  \n    name: msal-node-extensions\n    \n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n\n    - name: Clean Install\n      env:\n        RUNNING_NODE_CI: 1\n      run: npm ci\n\n    - name: Build packages\n      working-directory: extensions/msal-node-extensions\n      run: npm run build:all\n\n    - name: Lint\n      working-directory: extensions/msal-node-extensions\n      run: npm run lint\n\n    - name: Unit Tests with coverage\n      working-directory: extensions/msal-node-extensions\n      run: npm run test:coverage\n\n    - name: Upload Test Coverage to CodeCov\n      if: success()\n      uses: codecov/codecov-action@v3\n      with:\n        files: extensions/msal-node-extensions/coverage/lcov.info\n        flags: msal-node-extensions\n```"}
{"llm_response": "```yaml\nname: Publish to TestPyPI\n\non:\n  push:\n    branches:\n      - release/*\n\njobs:\n  build-and-test-sdist-and-wheels:\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.ref }}\n      parallelism: 1\n    runs-on: ubuntu-latest\n    steps:\n      # Add your build and test steps here\n```", "answer": "```yaml name: Publish to TestPyPI\n\non:\n  push:\n    branches:\n      - 'release/*.*.*'\n\nconcurrency:\n  group: \"${{ github.workflow }}-${{ github.ref }}\"\n  cancel-in-progress: true\n\njobs:\n  build-and-test-sdist-and-wheels:\n    uses: ./.github/workflows/publish-packages.yml\n    with:\n      upload_to_test: true\n    secrets:\n      TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 0 * * Sat'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Run CodeQL analysis\n      uses: github/codeql-action@v2\n      with:\n        codeql-cli-version: 'latest'\n        database-dir: ./codeql-database\n        targets: './src/**/*.cs'\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ master ]\n  schedule:\n    - cron: '0 0 * * 6'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: [ 'csharp' ]\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n        with:\n          # We must fetch at least the immediate parents so that if this is\n          # a pull request then we can checkout the head.\n          fetch-depth: 2\n\n      # If this run was triggered by a pull request event, then checkout\n      # the head of the pull request instead of the merge commit.\n      - run: git checkout HEAD^2\n        if: ${{ github.event_name == 'pull_request' }}\n\n      # Initializes the CodeQL tools for scanning.\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n\n      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n      # If this step fails, then you should remove it and run the build manually (see below)\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n\n      # \u2139\ufe0f Command-line programs to run using the OS shell.\n      # \ud83d\udcda https://git.io/JvXDl\n\n      # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n      #    and modify them (or add more) to build your code if your project\n      #    uses a compiled language\n\n      #- run: |\n      #   make bootstrap\n      #   make release\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Auto message on PR merge\n\non:\n  pull_request:\n    types: [closed]\n\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run script to send message\n        run: npx send-pr-message\n```", "answer": "```yaml name: Auto message on PR merge\n\non:\n  pull_request_target:\n    types: [closed]\n\njobs:\n  auto-response:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: derekprior/add-autoresponse@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          respondableId: ${{ github.event.pull_request.node_id }}\n          response: 'Thank you @${{ github.event.pull_request.user.login }} for taking out your valuable time in order to contribute to our project. Looking forward for more such amazing contributions :).'\n          author: ${{ github.event.pull_request.user.login }}\n          exemptedAuthors: 'Rishabh-malhotraa'\n```"}
{"llm_response": "```yaml\nname: Greetings\n\non:\n  pull_request:\n    types: [opened, synchronize]\n  issue:\n    types: [opened, synchronize]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build and run the application\n        run: ./gradlew build && ./gradlew run\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: '\ud83d\ude4fThank you for opening an issue! Viscerion is maintained by [volunteers](https://github.com/msfjarvis/viscerion/graphs/contributors) from the community. Please be kind and remember that Viscerion isn''t anyone''s main job \ud83d\ude18.'\n```"}
{"llm_response": "```yaml\nname: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches-ignore:\n      - master\n      - develop\n    paths-ignore:\n      - **/docs/**/*\n      - **/Gemfile**\n      - **/README.md**\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\n  workflow_dispatch:\n  pull_request:\n    branches-ignore:\n      - master\n      - develop\n    paths-ignore:\n      - **/docs/**/*\n      - **/Gemfile**\n      - **/README.md**\n    paths:\n      - nginx/**\n      - Dockerfiles/nginx.Dockerfile\n      - shared/bin/*\n      - .trigger_workflow_build\n      - _config.yml\n      - _includes/**\n      - _layouts/**\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Build Nginx\n        run: make build\n      - name: Push to GHCR\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          tag: nginx:latest\n          registry: ghcr.io\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n```", "answer": "```yaml name: nginx-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'nginx/**'\n      - 'Dockerfiles/nginx.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n      - '_config.yml'\n      - '_includes/**'\n      - '_layouts/**'\n      - 'docs/**'\n      - 'Gemfile'\n      - 'README.md'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Extract commit SHA\n        shell: bash\n        run: echo \"sha=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n        id: extract_commit_sha\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/nginx.Dockerfile\n          build-args: |\n            VCS_REVISION=${{ steps.extract_commit_sha.outputs.sha }}\n            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/nginx-proxy:${{ steps.extract_branch.outputs.branch }}\n```"}
{"llm_response": "```yaml\nname: Validate PR Title\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    types: [opened, reopened, edited, synchronize, assignee-changed, labeled, draft-published]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Validate PR Title\n      run: |\n        if [[ $GITHUB_EVENT_NAME == \"pull_request\" ]]; then\n          pr_title=$(jq '.title' \"$GITHUB_EVENT_PATH\")\n          if ! [[ $pr_title =~ ^[A-Z][a-zA-Z0-9 ]*$ ]]; then\n            echo \"Error: Pull request title must start with an uppercase letter followed by alphanumeric characters.\"\n            exit 1\n          fi\n        fi\n```", "answer": "```yaml name: Validate PR Title\n\n# We recommend that maintainers use this Chrome/Firefox extension so that\n# squashed PRs will have the merged commit message default to the PR title and\n# description:  https://github.com/zachwhaley/squashed-merge-message\n#\n# This avoids the need to amend commits after the fact to match the desired PR\n# syntax.  As long as the PR itself is properly-formatted, this extension will\n# help you commit the right format to the repo, too.  This, in turn, feeds the\n# changelog and release workflows.\n\non:\n  # NOTE: The automated PRs from release-please-action do not seem to trigger\n  # any of the default PR triggers (opened, synchronize, reopened).  So we need\n  # additional types.  This is a good set that makes it easy to trigger the\n  # workflow manually if needed.\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n      - edited\n      - synchronize\n      - assigned\n      - labeled\n      - ready_for_review\n      - review_requested\n\njobs:\n  main:\n    name: Validate PR Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Sauce Labs UI Tests\n\non:\n  schedule:\n    - cron: '0 0 * * *' # Triggered at 12:00 AM every day\n  push:\n    branches:\n      - master\n  pull_request:\n    paths-ignore:\n      - '**'\n    paths:\n      - Sources/**\n      - Tests/**\n      - .github/workflows/saucelabs-UI-tests.yml\n      - fastlane/**\n      - .sauce/config.yml\n      - scripts/set-device-tests-environment.patch\n      - scripts/ci-select-xcode.sh\n\njobs:\n  build-ui-tests:\n    name: Build UITests with Xcode ${{ matrix.xcode }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        xcode: [8.1, 9.3, 10.1]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Xcode\n        uses: actions/setup-xcode@v2\n        with:\n          xcode-version: ${{ matrix.xcode }}\n      - name: Install dependencies\n        run: |\n          cd Sources\n          pod install\n      - name: Run unit tests\n        run: |\n          cd Tests\n          xctool test -reporter junit -destination 'platform=iOS Simulator,name=iPhone 12 Pro Max'\n\n  run-ui-tests-with-sauce:\n    name: Run UI Tests for iOS ${{ matrix.suite }} on Sauce Labs\n    needs: build-ui-tests\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Sauce Connect\n        uses: saucelabs/actions-sauce-connect@v2\n        env:\n          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}\n          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}\n      - name: Start Sauce Connect\n        run: sauce-connect start --disable-tunneling\n      - name: Run UI tests\n        run: |\n          cd Sources\n          xctool test -reporter junit -destination 'platform=iOS Simulator,name=iPhone 12 Pro Max'\n```", "answer": "```yaml name: Sauce Labs UI Tests\non:\n  # Schedule the UI tests so we can see in Sentry how the duration of transactions\n  # changes over time.\n  schedule:\n    - cron: '0 0 * * *'\n  push:\n    branches:\n      - master\n\n  pull_request:\n    paths:\n      - 'Sources/**'\n      - 'Tests/**'\n      - '.github/workflows/saucelabs-UI-tests.yml'\n      - 'fastlane/**'\n      - '.sauce/config.yml'\n      - 'scripts/set-device-tests-environment.patch'\n      - 'scripts/ci-select-xcode.sh'\n\njobs:\n  build-ui-tests:\n    name: Build UITests with Xcode ${{matrix.xcode}}\n    runs-on: ${{matrix.runs-on}}\n    strategy:\n      matrix:\n        include:\n          - runs-on: macos-11\n            xcode: '12.5.1'\n\n          - runs-on: macos-12\n            xcode: '13.4.1'\n\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./scripts/ci-select-xcode.sh ${{matrix.xcode}}\n      - name: Install SentryCli\n        run: brew install getsentry/tools/sentry-cli\n      - run: git apply ./scripts/set-device-tests-environment.patch\n      - name: Cache iOS-Swift App and dSYM build products\n        id: ios-swift-cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            DerivedData/Build/Products/Debug-iphoneos/iOS-Swift.app.dSYM\n            DerivedData/Build/Products/Debug-iphoneos/iOS-Swift.app\n          key: ios-swift-for-ui-testing-cache-key-${{ hashFiles('Samples/iOS-Swift/iOS-Swift/**') }}-Xcode-${{ matrix.xcode }}\n      - name: Cache iOS-Swift UI Test Runner App build product\n        id: ios-swift-uitest-runner-cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            DerivedData/Build/Products/Debug-iphoneos/iOS-SwiftUITests-Runner.app\n          key: ios-swift-for-ui-testing-cache-key-${{ hashFiles('Samples/iOS-Swift/iOS-SwiftUITests/**') }}-Xcode-${{ matrix.xcode }}\n      - run: fastlane build_ios_swift_for_tests\n        env:\n          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}\n          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}\n          APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}\n          FASTLANE_KEYCHAIN_PASSWORD: ${{ secrets.FASTLANE_KEYCHAIN_PASSWORD }}\n          MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}\n          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}\n          MATCH_USERNAME: ${{ secrets.MATCH_USERNAME }}\n      - run: fastlane build_ios_swift_ui_test\n        env:\n          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}\n          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}\n          APP_STORE_CONNECT_KEY: ${{ secrets.APP_STORE_CONNECT_KEY }}\n          FASTLANE_KEYCHAIN_PASSWORD: ${{ secrets.FASTLANE_KEYCHAIN_PASSWORD }}\n          MATCH_GIT_PRIVATE_KEY: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}\n          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}\n          MATCH_USERNAME: ${{ secrets.MATCH_USERNAME }}\n      - name: Upload dSYMs\n        run: |\n          sentry-cli --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }} upload-dif --org sentry-sdks --project sentry-cocoa DerivedData/Build/Products/Debug-iphoneos/iOS-Swift.app.dSYM\n      - name: Archiving DerivedData\n        uses: actions/upload-artifact@v3\n        with:\n          name: DerivedData-Xcode-${{matrix.xcode}}\n          path: |\n            **/Debug-iphoneos/iOS-Swift.app\n            **/Debug-iphoneos/iOS-SwiftUITests-Runner.app\n\n  run-ui-tests-with-sauce:\n    name: Run UI Tests for iOS ${{ matrix.suite }} on Sauce Labs\n    runs-on: ubuntu-latest\n    needs: build-ui-tests\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - xcode: '13.4.1'\n            suite: 'iOS-15'\n\n          # We want to test the frame tracker at 120 fps\n          - xcode: '13.4.1'\n            suite: 'iPhone-Pro'\n\n          - xcode: '13.4.1'\n            suite: 'iOS-14'\n\n          - xcode: '13.4.1'\n            suite: 'iOS-13'\n\n          # iOS 12 has a failing test that we need to fix https://github.com/getsentry/sentry-cocoa/issues/1566\n          # iOS 11 keeps timing out and we don't know how to fix it.\n          - xcode: '12.5.1'\n            suite: 'iOS-10'\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/download-artifact@v3\n        with:\n          name: DerivedData-Xcode-${{matrix.xcode}}\n\n      - run: npm install -g saucectl@0.107.2\n\n      # As Sauce Labs is a bit flaky we retry 5 times\n      - name: Run Tests in SauceLab\n        env:\n          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}\n          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}\n        run: for i in {1..5}; do saucectl run --select-suite ${{ matrix.suite }} && break ; done\n```"}
{"llm_response": "```yaml\nname: \ud83d\udcca Wiki Sync\n\non:\n  push:\n    branches:\n      - main\n  schedule:\n    - cron: '0 1 * * Sun'\n\njobs:\n  update-wiki:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install\n      - run: npm run build\n      - run: npm run deploy\n```", "answer": "```yaml # Uses the contents of the ./docs directory for Dashy's GH Wiki page\nname: \ud83d\udcca Wiki Sync\non:\n  workflow_dispatch: # Manual dispatch\n  schedule:\n    - cron: '0 1 * * 0' # At 01:00 on Sunday.\njobs:\n  update-wiki:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master        \n    - name: Upload Docs to GH Wiki\n      uses: docker://decathlon/wiki-page-creator-action:latest\n      env:\n        GH_PAT: ${{ secrets.BOT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}\n        ACTION_MAIL: alicia-gh-bot@mail.as93.net\n        ACTION_NAME: liss-bot\n        OWNER: Lissy93\n        REPO_NAME: Dashy\n        MD_FOLDER: docs/\n#     - name: Sync Wiki\n#       uses: joeizzard/action-wiki-sync@master\n#       with:\n#         username: example\n#         access_token: ${{ secrets.GITHUB_TOKEN }}\n#         wiki_folder: ./docs\n#         commit_username: 'liss-bot'\n#         commit_email: 'liss-bot@d0h.co'\n#         commit_message: '\ud83d\udcd5 Chore: Sync Wiki'\n```"}
{"llm_response": "```yaml update_quarkus_platform:\n  runs-on: ubuntu-latest\n  schedule:\n    - cron: '0 */4 * * *'\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Update Quarkus Platform\n      run: |\n        # Add your commands here to update Quarkus Platform in embedded templates\n        echo \"Updating Quarkus Platform...\"\n        # Example command to update Quarkus Platform using a script or command-line tool\n        ./update-quarkus.sh\n    - name: Grant write access to GITHUB_TOKEN\n      run: |\n        echo \"::set-output name=write-access::true\"\n```", "answer": "```yaml name: Update Quarkus Platform in embedded templates\n\npermissions:\n  contents: write\n  pull-requests: write\n\non:\n  schedule:\n    - cron: '0 */4 * * *'\n\njobs:\n  update:\n    name: Update Quarkus Platform\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n      - name: Install NPM deps.\n        run: npm install axios xml2js octokit\n      - name: Create PR\n        env:\n          GITHUB_TOKEN: ${{ github.token }}\n        run: node ./hack/update-quarkus-platform.js\n\n```"}
{"llm_response": "```yaml Release-Drafter:\n  on:\n    push:\n      branches:\n        - master\n\n  jobs:\n    update_release_draft:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Update release draft\n          uses: peter-evans/create-release@v3\n          with:\n            repo-token: ${{ secrets.GITHUB_TOKEN }}\n            tag-name: v${{ github.ref_name }}\n            target-commitish: ${{ github.sha }}\n            title: Release ${{ github.ref_name }}\n            body: |\n              This pull request contains changes that have been merged into the main branch.\n              Please review and merge this pull request to create a new release.\n            prerelease: false\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - master\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"master\"\n      - uses: release-drafter/release-drafter@v5\n        with:\n          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml\n           config-name: release-drafter-config.yml\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Test & Deploy\n\non:\n  - push:\n      branches:\n        - master\n        - '*'\n  - pull_request:\n      branches:\n        - master\n\njobs:\n  audit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Audit\n        run: npm install && npm test\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Tests\n        run: npm install && npm test\n\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Deploy\n        run: npm install && npm run build && npm run deploy\n```", "answer": "```yaml name: Test & Deploy\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - master\n    tags:\n      - '*'\n  pull_request:\n    branches:\n      - master\n\njobs:\n\n  audit:\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: current\n\n      - uses: actions/checkout@v3\n\n      - run: npm audit --omit=dev\n\n  test:\n\n    needs: [ audit ]\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [ '14', '16', '18' ]\n\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n\n      - uses: actions/checkout@v3\n\n      - run: npm ci\n\n      - name: Test\n        run: npm test\n\n      - uses: actions/upload-artifact@v3\n        if: failure()\n        with:\n          name: cypress-screenshots\n          path: cypress/screenshots\n          retention-days: 7\n\n      - uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: cypress-videos\n          path: cypress/videos\n          retention-days: 7\n\n  deploy:\n\n    needs: [ test ]\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push'\n\n    steps:\n      - uses: actions/setup-node@v3\n        with:\n          node-version: current\n\n      - uses: actions/checkout@v3\n\n      - run: npm ci\n\n      - name: Deploy @latest version to npm\n        if: startsWith(github.ref, 'refs/tags/')\n        uses: JS-DevTools/npm-publish@v1\n        with:\n          token: ${{ secrets.NPM_TOKEN }}\n\n      - name: Update @next version\n        if: startsWith(github.ref, 'refs/heads/')\n        run: npm version prerelease --no-git-tag-version --preid \"$GITHUB_RUN_NUMBER\"\n\n      - name: Deploy @next version to npm\n        if: startsWith(github.ref, 'refs/heads/')\n        uses: JS-DevTools/npm-publish@v1\n        with:\n          tag: next\n          token: ${{ secrets.NPM_TOKEN }}\n          check-version: false\n```"}
{"llm_response": "```yaml\nname: Tests MSSQL\n\non:\n  push:\n    branches:\n      - master\n      - main\n  pull_request:\n\njobs:\n  Tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.17'\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Run tests\n      run: go test ./...\n```", "answer": "```yaml on:\n    push:\n        branches:\n            - master\n            - main\n    pull_request:\nname: \"Tests MSSQL\"\njobs:\n    Tests:\n        runs-on: ubuntu-latest\n        services:\n            mssql:\n                image: 'mcmoe/mssqldocker:v2019.CU4.0'\n                ports:\n                    - '1433:1433'\n                env:\n                    ACCEPT_EULA: Y\n                    SA_PASSWORD: MsSql!1234\n                    MSSQL_DB: master\n                    MSSQL_USER: sa\n                    MSSQL_PASSWORD: MsSql!1234\n                options: >-\n                    --health-cmd \"/opt/mssql-tools/bin/sqlcmd -U sa -P $SA_PASSWORD -Q 'select 1' -b -o /dev/null\"\n                    --health-interval 1s\n                    --health-timeout 30s\n                    --health-start-period 10s\n                    --health-retries 20\n        strategy:\n            matrix:\n                go-version:\n                    - 1.14.x\n                    - 1.16.x\n                    - 1.19.x\n                platform:\n                    - ubuntu-latest\n                    - windows-latest\n        steps:\n            -   name: Install Go\n                uses: actions/setup-go@v3\n                with:\n                    go-version: '${{ matrix.go-version }}'\n            -   name: Setup Golang caches\n                uses: actions/cache@v3\n                with:\n                    # In order:\n                    # * Module download cache\n                    # * Build cache (Linux)\n                    # * Build cache (Mac)\n                    # * Build cache (Windows)\n                    path: |\n                        ~/go/pkg/mod\n                        ~/.cache/go-build\n                        ~/Library/Caches/go-build\n                        ~\\AppData\\Local\\go-build\n                    key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}\n                    restore-keys: |\n                        ${{ runner.os }}-go-${{ matrix.go-version }}-\n            -   name: Fetch Repository\n                uses: actions/checkout@v3\n            -   name: Run Test\n                run: cd ./mssql && go test ./... -v -race\n                env:\n                    MSSQL_DATABASE: master\n                    MSSQL_USERNAME: sa\n                    MSSQL_PASSWORD: MsSql!1234\n```"}
{"llm_response": "```yaml\nname: release-please\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Run release-please\n      uses: github-actions/release-please@v2\n      with:\n        token: ${{ secrets.GITHUB_TOKEN }}\n        dry-run: true\n```", "answer": "```yaml name: release-please\non:\n  push:\n    branches:\n      - main\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: navikt/github-app-token-generator@a9cd374e271b8aef573b8c16ac46c44fb89b02db\n        id: get-token\n        with:\n          private-key: ${{ secrets.TOKENS_PRIVATE_KEY }}\n          app-id: ${{ secrets.TOKENS_APP_ID }}\n      - uses: GoogleCloudPlatform/release-please-action@v3\n        id: release\n        with:\n          token: ${{ steps.get-token.outputs.token }}\n          release-type: node\n          package-name: 'netlify-lambda'\n      - uses: actions/checkout@v3\n        if: ${{ steps.release.outputs.release_created }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '*'\n          check-latest: true\n          registry-url: 'https://registry.npmjs.org'\n        if: ${{ steps.release.outputs.release_created }}\n      - run: npm publish\n        if: ${{ steps.release.outputs.release_created }}\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n```"}
{"llm_response": "```yaml\nname: Lint Code Base\n\non:\n  push:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *' # Run every day at midnight\n  workflow_dispatch:\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Lint the code\n      run: npm run lint\n```", "answer": "```yaml ###########################\n## Linter GitHub Actions ##\n###########################\n#\n# Documentation: https://github.com/github/super-linter/\n#\n# Exception config files are in the .github/linters directory\n#\nname: Lint Code Base\non:\n  workflow_dispatch:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    name: Lint Code Base\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          # Full git history is needed to get a proper list of changed files within `super-linter`\n          fetch-depth: 0\n      - name: Set VALIDATE_ALL_CODEBASE variable to false\n        # Only run the full workflow for manual runs or if upgrading the super linter\n        if: |\n            github.event_name != 'workflow_dispatch' &&\n            startsWith(github.event.pull_request.title,'Bump github/super-linter') != true\n        run: |\n          echo \"VALIDATE_ALL_CODEBASE=false\" >> $GITHUB_ENV\n      - name: Lint Code Base\n        uses: github/super-linter@v4.9.7\n        #uses: docker://github/super-linter:v4.7.1\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          VALIDATE_BASH: true\n          VALIDATE_CSS: true\n          VALIDATE_EDITORCONFIG: true\n          VALIDATE_HTML: true\n          VALIDATE_JAVASCRIPT_ES: true\n          VALIDATE_JSON: true\n          VALIDATE_MARKDOWN: true\n          VALIDATE_PYTHON_PYLINT: true\n          VALIDATE_PYTHON_FLAKE8: true\n          VALIDATE_SQLFLUFF: true\n          VALIDATE_YAML: true\n```"}
{"llm_response": "```yaml\nname: Trigger action on PR comment\n\non:\n  issues_comment:\n    types: [created]\n\njobs:\n  trigger-doc-build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Julia\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1.8'  # Replace with your preferred Julia version\n\n      - name: Run documentation build script\n        run: |\n          julia -e 'using Pkg; Pkg.add(\"Documenter\"); using Documenter; Documenter.setup()'\n          julia -e 'using Documenter; Documenter.build(\"src\")'\n\n      - name: Push documentation to GitHub Pages\n        uses: actions/deploy@v2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          path: docs/build/html\n          target-branch: gh-pages\n```", "answer": "```yaml name: Trigger action on PR comment\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  trigger-doc-build:\n    if: ${{ github.event.issue.pull_request &&\n            ( github.event.comment.author_association == 'OWNER' ||\n              github.event.comment.author_association == 'MEMBER' ||\n              github.event.comment.author_association == 'COLLABORATOR' ) &&\n            contains(github.event.comment.body, '@climabot build docs') }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: octokit/request-action@v2.0.26\n        id: get_pr # need sha of commit\n        with:\n          route: GET /repos/{repository}/pulls/{pull_number}\n          repository: ${{ github.repository }}\n          pull_number: ${{ github.event.issue.number }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n \n      - name: Trigger Buildkite Pipeline\n        id: buildkite\n        uses: CliMA/buildkite-pipeline-action@master\n        with:\n          access_token: ${{ secrets.BUILDKITE }}\n          pipeline: 'clima/climatemachine-docs'\n          branch: ${{ fromJson(steps.get_pr.outputs.data).head.ref }}\n          commit: ${{ fromJson(steps.get_pr.outputs.data).head.sha }}\n          message: \":github: Triggered by comment on PR #${{ github.event.issue.number }}\"\n          env: '{\"PULL_REQUEST\": ${{ github.event.issue.number }} }'\n          async: true\n\n      - name: Create comment\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            Docs build created: ${{ steps.buildkite.outputs.web_url }}\n            Preview link: https://clima.github.io/ClimateMachine.jl/previews/PR${{ github.event.issue.number}}\n        \n```"}
{"llm_response": "```yaml Sync CloudFlare Client\n\nname: Sync CloudFlare Client\n\non:\n  push:\n    branches-ignore:\n      - main\n  schedule:\n    - cron: '0 2 * * *'\n\njobs:\n  WireGuard-go:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up WireGuard-go\n        run: |\n          curl https://raw.githubusercontent.com/WireGuard/wireguard-go/master/release/install.sh | bash\n```", "answer": "```yaml name: Sync CloudFlare Client\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '18 2 * * *'\n\njobs:\n  WireGuard-go:\n\n    name: Sync Client to the latest\n\n    runs-on: ubuntu-20.04\n\n    env:\n      USERNAME: ${{ secrets.GH_USERNAME }}\n      EMAIL: ${{ secrets.GH_EMAIL }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3.1.0\n        with:\n          fetch-depth: 0\n\n      - name: Check the official latest version of Client\n        run: |\n          NOW=$(wget -qO- \"https://api.github.com/repos/${{ env.USERNAME }}/warp/releases\" | grep \"tag_name\" | grep \"CloudFlare\" | head -n 1 | sed \"s/.*_v\\(.\\{1,\\}\\)\\\".*/\\1/g\")\n          LATEST=$(wget -qO- \"https://pkg.cloudflareclient.com/packages/cloudflare-warp\" | grep \"release-row\" | awk -F '</td><td>' {'print $1'} | awk -F '<td>' {'print $2'})\n          NOW1=$(echo $NOW | cut -d \\. -f1)\n          NOW2=$(echo $NOW | cut -d \\. -f2)\n          NOW3=$(echo $NOW | cut -d \\. -f3)\n          LATEST1=$(echo $LATEST | cut -d \\. -f1)\n          LATEST2=$(echo $LATEST | cut -d \\. -f2)\n          LATEST3=$(echo $LATEST | cut -d \\. -f3)\n          NOW_VERSION=$(( NOW1*10000000 + NOW2*10000 + NOW3 ))\n          LATEST_VERSION=$(( LATEST1*10000000 + LATEST2*10000 + LATEST3 ))\n          \n          Operating_System=(\"CentOS 8\" \"Debian Bullseye\" \"Debian Buster\" \"Debian Stretch\" \"Ubuntu Jammy\" \"Ubuntu Focal\" \"Ubuntu Bionic\" \"Ubuntu Xenial\")\n          System_Rename=(\"CentOS_8.rpm\" \"Debian_11.deb\" \"Debian_10.deb\" \"Debian_9.deb\" \"Ubuntu_22.04.deb\" \"Ubuntu_20.04.deb\" \"Ubuntu_18.04.deb\" \"Ubuntu_16.04.deb\")\n          \n          if [ $LATEST_VERSION -gt $NOW_VERSION ]; then\n            for ((i=0; i<${#Operating_System[@]}; i++)); do\n              File_Path=$(wget -qO- https://pkg.cloudflareclient.com/packages/cloudflare-warp | grep 'release-row' | awk -F \"</td><td>${Operating_System[i]}\" {'print $2'} | awk -F 'Download' {'print $1'} | awk -F \\\" {'print $2'})\n              Download_URL=\"https://pkg.cloudflareclient.com$File_Path\"\n              wget -O ${GITHUB_WORKSPACE}/Client/Client_${System_Rename[i]} $Download_URL\n            done\n            \n            echo \"VERSION=$LATEST\" >> $GITHUB_ENV\n            echo \"DIST=${GITHUB_WORKSPACE}/Client\" >> $GITHUB_ENV\n          fi\n  \n      - name: Upload to REPO\n        if: ${{ env.VERSION != '' }}\n        run: |\n          git config --global user.email \"${{ env.EMAIL }}\"\n          git config --global user.name \"${{ env.USERNAME }}\"\n          git add .\n          git commit -m \"Sync Client to V${{ env.VERSION }} by Github Actions, $(date \"+%Y/%m/%d %H:%M:%S\")\"\n          git push\n          rm -f ${{ env.DIST }}/README.md\n          \n      - name: Release binaries \n        uses: softprops/action-gh-release@v1\n        if: ${{ env.VERSION != '' }}\n        with:\n          tag_name: CloudFlare_Client_v${{ env.VERSION }}\n          files: ${{ env.DIST }}/*\n```"}
{"llm_response": "```yaml docs\n\nname: Docs\n\non:\n  push:\n    branches-ignore:\n      - main\n    tags:\n      - 'v*'\n  pull_request:\n  workflow_dispatch:\n\nconcurrency:\n  groups:\n    docs:\n      max-concurrent: 1\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n      - name: Build and test\n        run: |\n          make build test\n      - name: Publish documentation\n        run: |\n          ./build/docs\n          ./build/docs/publish\n```", "answer": "```yaml name: docs\n\nconcurrency:\n  group: docs-${{ github.ref }}\n  cancel-in-progress: true\n\non:\n  workflow_dispatch:\n  push:\n    tags:\n      - 'v*'\n  pull_request:\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          version: v0.6.0\n      -\n        name: Build docs\n        uses: docker/bake-action@v2\n        with:\n          targets: docs\n      -\n        name: Check GitHub Pages status\n        uses: crazy-max/ghaction-github-status@v3\n        with:\n          pages_threshold: major_outage\n      -\n        name: Deploy\n        if: github.event_name != 'pull_request'\n        uses: crazy-max/ghaction-github-pages@v3\n        with:\n          target_branch: gh-pages\n          build_dir: site\n          jekyll: false\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: verify agent\n\non:\n  pull_request:\n    paths-ignore:\n      - \"**/node_modules/**\"\n      - \"**/vendor/**\"\n\njobs:\n  verify_agent:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Verify agent\n        run: make verify-agent\n\n  verify_agent_arm64:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Verify agent (arm64)\n        run: make verify-agent-arm64\n```", "answer": "```yaml on: \n   pull_request:\n      paths:\n        - 'agent/**'\n        - 'message/**'\n\nname: verify agent\n\njobs:\n  verify_agent:\n    name: verify agent\n    runs-on: \"cirun-aws-amd64-32c--${{ github.run_id }}\"\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          fetch-depth: 0\n\n      # - name: install docker\n      #   run: |\n      #     sudo systemctl stop unattended-upgrades\n      #     curl -fsSL https://get.docker.com | bash\n      \n      - name: docker version\n        run: |\n          docker version\n\n      - name: Log in to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: \"ghcr.io\" \n          username: \"${{ github.repository_owner }}\"\n          password: \"${{ secrets.GITHUB_TOKEN }}\" \n\n      - name: verify agent\n        run: |\n          docker run --rm  -t  --privileged --workdir /deepflow/  -v $(pwd):\"/deepflow/\"  --entrypoint \"bash\" ghcr.io/deepflowys/rust-build:1.14 \"-c\" \"\\\n          source /opt/rh/devtoolset-8/enable && \\\n          cd  agent/src/ebpf && \\\n          make clean && \\\n          make rust-sample && \\\n          make test && \\\n          make tools && \\\n          cd ../../ && \\\n          RUSTFLAGS='-D warnings' cargo check --all-targets && \\\n          cargo fmt --all -- --check\"\n\n  verify_agent_arm64:\n    name: verify agent arm64\n    runs-on: \"cirun-aws-arm64-32c--${{ github.run_id }}\"\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n          fetch-depth: 0\n\n      # - name: install docker\n      #   run: |\n      #     sudo systemctl stop unattended-upgrades\n      #     curl -fsSL https://get.docker.com | bash\n\n      - name: docker version\n        run: |\n          docker version\n\n      - name: Log in to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: \"ghcr.io\" \n          username: \"${{ github.repository_owner }}\"\n          password: \"${{ secrets.GITHUB_TOKEN }}\" \n\n      - name: verify agent\n        run: |\n          docker run --rm  -t  --privileged --workdir /deepflow/  -v $(pwd):\"/deepflow/\"  --entrypoint \"bash\" ghcr.io/deepflowys/rust-build:1.14-arm64 \"-c\" \"\\\n          source /opt/rh/devtoolset-8/enable && \\\n          cd  agent/src/ebpf && \\\n          CC=musl-gcc CLANG=musl-clang make clean && \\\n          CC=musl-gcc CLANG=musl-clang make rust-sample && \\\n          CC=musl-gcc CLANG=musl-clang make test && \\\n          CC=musl-gcc CLANG=musl-clang make tools && \\\n          cd ../../ && \\\n          RUSTFLAGS='-D warnings' cargo check && \\\n          cargo fmt --all -- --check\"\n\n```"}
{"llm_response": "```yaml\nname: Generate Services Reference\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - packages/medusa/src/services/**\n\n  pull_request:\n    branches:\n      - master\n    paths:\n      - packages/medusa/src/services/**\n\njobs:\n  services:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Run generator\n      run: npx @medusajs/generator-service-reference\n```", "answer": "```yaml name: Generate Services Reference\non: \n  push:\n    branches:\n      - \"master\"\n    paths:\n      - packages/medusa/src/services/**\n  pull_request:\n    types:\n      - closed\n    branches:\n      - \"master\"\n    paths:\n      - packages/medusa/src/services/**\njobs:\n  services:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@0.9.1\n        with:\n          access_token: ${{ github.token }}\n\n      - name: Checkout\n        uses: actions/checkout@v2.3.5\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js environment\n        uses: actions/setup-node@v2.4.1\n        with:\n          node-version: \"14\"\n          cache: \"yarn\"\n\n      - name: Install dependencies\n        uses: ./.github/actions/cache-deps\n        with:\n          extension: reference\n\n      - name: Build Packages\n        run: yarn build\n\n      - name: Generate Services Reference\n        run: yarn generate:services\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          commit-message: 'chore(docs): Generated Services Reference (automated)'\n          base: 'master'\n          title: 'chore(docs): Generated Services Reference (automated)'\n          labels: 'type: chore'\n          add-paths: docs/content/references/services/**\n          branch: 'chore/generate-services'\n          branch-suffix: 'timestamp'\n```"}
{"llm_response": "```yaml enforce-label:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up .NET SDK\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.x'\n\n    - name: Run tests\n      run: dotnet test --configuration Release\n```", "answer": "```yaml name: Enforce PR labels\n\non:\n  pull_request:\n    types: [labeled, unlabeled, opened, edited, synchronize]\njobs:\n  enforce-label:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: yogevbd/enforce-label-action@2.1.0\n      with:\n        REQUIRED_LABELS_ANY: \"feature,bugfix,maintenance\"\n        REQUIRED_LABELS_ANY_DESCRIPTION: \"Select at least one label ['feature','bugfix','maintenance']\"\n```"}
{"llm_response": "```yaml TagBot:\n  on:\n    - push\n    - pull_request\n    - issue_comment\n    - workflow_dispatch\n\n  jobs:\n    TagBot:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Setup Julia\n          uses: julia-actions/setup-julia@v1\n          with:\n            version: '1.7.x'\n\n        - name: Install dependencies\n          run: |\n            julia --eval \"using Pkg; Pkg.add(\\\"Git\\\")\"\n\n        - name: Run tests\n          run: |\n            julia --project=. --eval \"using Test; testdir = \\\"test\\\"; include(joinpath(testdir, \\\"runtests.jl\\\"))\"\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ssh: ${{ secrets.DOCUMENTER_KEY }}\n```"}
{"llm_response": "```yaml\nname: Build And Deploy Playground Frontend Application\n\non:\n  push:\n    branches:\n      - master\n      - release-* # match release-*\n      - v*       # match v*\n      - *        # match all tags\n  pull_request:\n    branches:\n      - playground-staging\n    paths:\n      - 'playground/backend/**'\n    labels:\n      - build-playground-frontend-app\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}@${\n    github.event.pull_request.head.label ||\n    github.head_ref ||\n    github.ref\n  }\n  cancel-in-progress: true\n\njobs:\n  build_playground_frontend_docker_image:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '17'\n      - name: Build Playground Frontend App\n        run: ./gradlew build\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one or more\n# contributor license agreements.  See the NOTICE file distributed with\n# this work for additional information regarding copyright ownership.\n# The ASF licenses this file to You under the Apache License, Version 2.0\n# (the \"License\"); you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Build And Deploy Playground Frontend Application\n\non:\n  push:\n    tags: 'v*'\n    branches: ['master', 'release-*']\n  pull_request:\n    paths: ['playground/backend/**']\n    branches: ['playground-staging']\n  workflow_dispatch:\n\n# This allows a subsequently queued workflow run to interrupt previous runs\nconcurrency:\n  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'\n  cancel-in-progress: true\n\njobs:\n  build_playground_frontend_docker_image:\n    name: Build Playground Frontend App\n    runs-on: ubuntu-latest\n    env:\n      GO_VERSION: 1.18.0\n      BEAM_VERSION: 2.40.0\n      TERRAFORM_VERSION: 1.0.9\n      FLUTTER_VERSION: 3.3.2\n      STAND_SUFFIX: ''\n      GOOGLE_DOMAIN: '-dot-apache-beam-testing.appspot.com'\n    steps:\n      - name: Check out the repo\n        uses: actions/checkout@v3\n      - uses: actions/setup-java@v3\n        with:\n            distribution: 'zulu'\n            java-version: '8'\n      - name: install flutter\n        run: |\n             wget https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_$FLUTTER_VERSION-stable.tar.xz &&\\\n             tar -xf flutter_linux_$FLUTTER_VERSION-stable.tar.xz &&\\\n             mv flutter /opt/ &&\\\n             ln -s /opt/flutter/bin/flutter /usr/local/bin/flutter &&\\\n             ln -s /opt/flutter/bin/dart /usr/local/bin/dart &&\\\n             dart pub global activate protoc_plugin &&\\\n             ln -s /root/.pub-cache/bin/protoc-gen-dart /usr/local/bin/\n      - name: Remove default github maven configuration\n        # This step is a workaround to avoid a decryption issue\n        run: rm ~/.m2/settings.xml\n      - name: install npm\n        uses: actions/setup-node@v3\n        with:\n            node-version: '14'\n      - name: install docker linter\n        run: npm install  -g dockerlint\n      - name: lint dockerfile\n        run: dockerlint Dockerfile\n        working-directory: playground/frontend\n      - uses: hashicorp/setup-terraform@v1\n        with:\n            terraform_version: ${{ env.TERRAFORM_VERSION }}\n        if: startsWith(github.ref, 'ref/tags/')\n      - name: Set Docker Tag\n        run: echo \"DOCKERTAG=${GITHUB_SHA}\" >> $GITHUB_ENV\n      - name: Set Docker Tag If Github Tag was trigger\n        run: echo \"DOCKERTAG=${GITHUB_REF#refs/*/}\" >> $GITHUB_ENV\n        if: startsWith(github.ref, 'refs/tags/')\n      - name: Setup GCP account\n        run: |\n             echo \"${{ secrets.GCP_PLAYGROUND_SA_KEY }}\" | base64 -d > /tmp/gcp_access.json\n        if: startsWith(github.ref, 'ref/tags/')\n      - name: Login to Docker Registry\n        run: cat /tmp/gcp_access.json | docker login -u _json_key --password-stdin https://${{ secrets.PLAYGROUND_REGISTRY_NAME }}\n        if: startsWith(github.ref, 'ref/tags/')\n      - name: Deploy Frontend Application\n        env:\n          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_access.json\n        run: ./gradlew playground:terraform:deployFrontend -Pdocker-tag=${{env.DOCKERTAG}} -Pproject_id=${{ secrets.GCP_PLAYGROUND_PROJECT_ID }} -Pproject_environment='beta'\n        if: startsWith(github.ref, 'refs/tags/')\n```"}
{"llm_response": "```yaml\nname: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run tests\n      run: npm test\n```", "answer": "```yaml name: Test CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Use Node.js 16.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          cache: yarn\n      - name: Install\n        run: |\n          npm install -g yarn\n          yarn\n        env:\n          CI: \"true\"\n      - name: Build\n        run: |\n          yarn build\n        env:\n          CI: \"true\"\n      - name: Check Circular Dependencies\n        run: |\n          yarn circular\n        env:\n          CI: \"true\"\n      - name: Test\n        run: |\n          yarn test\n        env:\n          CI: \"true\"\n      - name: Bench\n        run: |\n          node packages/core/build/examples/bench/queue.js\n        env:\n          CI: \"true\"\n```"}
{"llm_response": "```yaml\nname: Docker Demo Image\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  image_build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build Docker image\n        run: docker build -t your-docker-username/demo-image .\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Push Docker image\n        run: docker push your-docker-username/demo-image\n```", "answer": "```yaml name: Docker Demo Image\non:\n  release:\n    types: [published]\n\njobs:\n  image_build:\n    name: Build, Tag & Push\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n\n      - name: Docker Login\n        env:\n          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}\n        run: 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'\n      - name: Build Image\n        run: 'docker build -t demo_app demo/'\n      - name: Tag & Push Version Image\n        run: |\n          VERSION_TAG=$(echo $GITHUB_REF | sed \"s/.*\\///\")\n          docker tag demo_app workarea/demo_app:$VERSION_TAG\n          docker push workarea/demo_app:$VERSION_TAG\n      - name: Tag & Push Latest Image\n        run: |\n          docker tag demo_app workarea/demo_app:latest\n          docker push workarea/demo_app:latest\n```"}
{"llm_response": "```yaml e2e-kind-decommission:\n  on:\n    push:\n      branches:\n        - master\n    pull_request:\n      branches:\n        - master\n    schedule:\n      - cron: '0 0 * * *'\n  jobs:\n    e2e-kind-decommission:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n        - name: Build and test\n          run: |\n            go build\n            go test\n```", "answer": "```yaml # Copyright 2022 The Cockroach Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: e2e-kind-decommission\n\non:\n  # Triggers the workflow on push or pull request events but only for the master branch\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  e2e-kind-decommission:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n    steps:\n      - uses: actions/checkout@v3\n      - name: Mount bazel cache\n        uses: actions/cache@v3\n        with:\n          path: \"~/.cache/bazel\"\n          key: bazel\n\n      - name: End-to-end (k3d)\n        run: make test/e2e/k3d-decommission\n```"}
{"llm_response": "```yaml\nname: TOC Generator\n\non:\n  push:\n    branches:\n      - main\n  tag_push:\n    tags:\n      - v*\n  repository_dispatch:\n    types:\n      - generate-toc\n\njobs:\n  generateTOC:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        dotnet restore\n\n    - name: Generate table of contents\n      run: |\n        dotnet build --configuration Release --output ./bin/release/net6.0\n        dotnet publish ./src/SampleProject/SampleProject.csproj --configuration Release --output ./bin/release/net6.0/publish\n\n    - name: Upload to GitHub Pages\n      uses: actions/upload-artifact@v2\n      with:\n        name: toc\n        path: ./bin/release/net6.0/publish\n```", "answer": "```yaml on: push\nname: TOC Generator\njobs:\n  generateTOC:\n    name: TOC Generator\n    runs-on: ubuntu-latest\n    steps:\n      - uses: technote-space/toc-generator@v4\n        with:\n          FOLDING: true\n          TOC_TITLE: Details\n```"}
{"llm_response": "```yaml\nname: Publish devtools extension\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: [check]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Deploy to GitHub Pages\n        uses: github-pages-deploy-action@v3\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          target-branch: gh-pages\n          path: dist\n```", "answer": "```yaml name: Publish devtools extension\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n    branches:\n      - main\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    if: ${{ contains(github.event.head_commit.message, 'applying package updates') || github.event_name == 'workflow_dispatch' }}\n\n    outputs:\n      status: ${{ steps.verify-extension-changed.outputs.any_changed }}\n\n    steps:\n      - uses: actions/checkout@v2\n        name: Checkout [main]\n\n      - name: Verify extension has changed\n        uses: tj-actions/changed-files@v23.1\n        id: verify-extension-changed\n        with:\n          files: |\n            packages/devtools/package.json\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: check\n    if: ${{ needs.check.outputs.status == 'true' || github.event_name == 'workflow_dispatch' }}\n\n    steps:\n      - uses: actions/checkout@v2\n        name: Checkout [main]\n\n      - uses: actions/setup-node@v1\n        with:\n          node-version: '14'\n\n      - name: Get Yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"::set-output name=dir::$(yarn config get cacheFolder)\"\n\n      - name: Restore Yarn cache\n        uses: actions/cache@v2\n        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}\n          restore-keys: |\n            yarn-cache-folder-\n\n      - run: yarn install --immutable\n      - run: yarn nx run-many --target=build --projects=@griffel/devtools --parallel --max-parallel=3\n      - run: yarn nx run @griffel/devtools:pack-extension\n\n      - name: Upload extension\n        uses: mobilefirstllc/cws-publish@latest\n        with:\n          action: 'publish'\n          refresh_token: ${{ secrets.CHROME_EXT_REFRESH_TOKEN }}\n          client_id: ${{ secrets.CHROME_EXT_CLIENT_ID }}\n          client_secret: ${{ secrets.CHROME_EXT_CLIENT_SECRET }}\n          extension_id: ${{ secrets.CHROME_EXT_APP_ID }}\n          zip_file: ./dist/packages/ext.zip\n```"}
{"llm_response": "```yaml\nname: ci\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - .gitignore\n    paths:\n      - '.github/workflows/ci.yml'\n      - 'lib/**'\n      - '*.gemspec'\n      - 'spec/**'\n      - 'db/migrate/**'\n      - 'Rakefile'\n      - 'Gemfile'\n      - '.rubocop.yml'\n  pull_request:\n    branches:\n      - master\n  create:\n    branches:\n      - master\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: 2.7\n      - name: Install dependencies\n        run: bundle install\n      - name: Run tests\n        run: bundle exec rspec\n```", "answer": "```yaml ---\nname: ci\non:\n  push:\n    branches:\n      - master\n    paths:\n      - \".github/workflows/ci.yml\"\n      - lib/**\n      - \"*.gemspec\"\n      - spec/**\n      - db/migrate/**\n      - Rakefile\n      - Gemfile\n      - \".rubocop.yml\"\n  pull_request:\n    branches:\n      - master\n  create:\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        ruby:\n          - '2.7'\n          - '2.6'\n          - '2.5'\n          - '2.4'\n          - jruby\n        rails:\n          - \"6.1.0\"\n          - \"6.0.0\"\n          - \"5.2.0\"\n          - \"5.1.0\"\n          - \"5.0.0\"\n          - \"4.2.0\"\n        exclude:\n          - ruby: \"2.4\"\n            rails: \"6.0.0\"\n          - ruby: \"2.4\"\n            rails: \"6.1.0\"\n          - ruby: \"2.7\"\n            rails: \"4.2.0\"\n    env:\n      APT_DEPS: libsqlite3-dev\n      RAILS_VERSION: \"${{matrix.rails}}\"\n      RAILS_ENV: test\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - name: Install package dependencies\n        run: \"[ -e $APT_DEPS ] || sudo apt-get install -y --no-install-recommends $APT_DEPS\"\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: \"${{matrix.ruby}}\"\n      - name: Install latest bundler\n        run: |\n          gem install bundler --no-document\n          bundle config set without 'tools benchmarks docs'\n      - name: Bundle install\n        run: bundle install --jobs 4 --retry 3\n      - name: Run all tests\n        run: bundle exec rake app:db:reset app:spec\n```"}
{"llm_response": "```yaml\nname: Dispatch Command\n\non:\n  issues_comment:\n    branches:\n      - main\n\njobs:\n  dispatch-command:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Grant GITHUB_TOKEN read access to contents\n      run: |\n        chmod +x .github/workflows/give-access-to-github-token.sh\n        ./give-access-to-github-token.sh\n```", "answer": "```yaml name: Dispatch Command\n\non:\n  issue_comment:\n    types: [created]\n\npermissions:\n  contents: read\n\njobs:\n  dispatch-command:\n    if: startsWith(github.repository, 'Homebrew/')\n    runs-on: ubuntu-latest\n    steps:\n      - name: Dispatch /rebase Command\n        uses: peter-evans/slash-command-dispatch@2afb49dbaafaba8005860648bf7fc178637aca0d\n        with:\n          token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          reaction-token: ${{ secrets.HOMEBREW_GITHUB_PUBLIC_REPO_TOKEN }}\n          commands: rebase\n          permission: triage\n          issue-type: pull-request\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n      - v[0-9]*\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 43 * * Fri'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: github/codeql-action/setup@v2\n        with:\n          languages: go\n      - name: Analyze\n        uses: github/codeql-action/analyze@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: \n      - master\n      - v[0-9]**\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches:\n      - master\n  schedule:\n    - cron: '43 20 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'go' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://git.io/codeql-language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml CI:\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Rust\n        uses: actions/setup-rust@v2\n        with:\n          rust-version: 'stable'\n      - name: Build\n        run: cargo build\n  build_result:\n    runs-on: ubuntu-latest\n    needs: [ci]\n    steps:\n      - name: Check build status\n        if: ${{ success() }}\n        run: echo \"Build successful!\"\n      - name: Fail if build failed\n        if: ${{ failure() }}\n        run: echo \"Build failed. Please check the logs.\"\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [auto]\n  pull_request:\n\njobs:\n  ci:\n    name: CI\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        version: [1.56.0, stable, beta, nightly]\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set toolchain\n        run: |\n          rustup set profile minimal\n          rustup override set ${{ matrix.version }}\n\n      - name: Init submodules\n        run: git submodule update --init\n\n      - name: Cargo bench\n        if: matrix.version != '1.41.0'\n        run: cargo bench --all\n        env:\n          RUSTFLAGS: --cfg bench\n\n      - name: Test \"rustc-test/capture\" feature\n        if: matrix.version == 'nightly'\n        working-directory: rcdom\n        run: cargo test --features \"rustc-test/capture\"\n\n      - name: Cargo test\n        if: matrix.version != 'nightly'\n        run: cargo test --all\n\n      - name: Cargo doc\n        if: matrix.version == 'nightly'\n        run: cargo doc\n\n  build_result:\n    name: homu build finished\n    runs-on: ubuntu-latest\n    needs:\n      - \"ci\"\n\n    steps:\n      - name: Mark the job as successful\n        run: exit 0\n        if: success()\n      - name: Mark the job as unsuccessful\n        run: exit 1\n        if: \"!success()\"\n```"}
{"llm_response": "```yaml\nname: Upload Python Package Windows\n\non:\n  release:\n    types: [published, prerelease, draft]\n\njobs:\n  deploy:\n    runs-on: windows-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: pip install --upgrade pip setuptools wheel\n\n      - name: Build package\n        run: python setup.py sdist bdist_wheel\n\n      - name: Upload to PyPI\n        uses: pypa/upload-action@v1\n        with:\n          repository-url: https://upload.pypi.org/legacy/simple/\n          token: ${{ secrets.PYPI_TOKEN }}\n          distribution-file: dist/*\n```", "answer": "```yaml # This workflow will upload a Python Package using Twine when a release is created\n# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries\n\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\nname: Upload Python Package Windows\n\non:\n  release:\n    types: [published]\n\npermissions:\n  contents: read\n\njobs:\n  deploy:\n\n    runs-on: windows-2022\n    \n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v3\n      with:\n        python-version: \"${{ matrix.python-version }}\"\n    - name: Run tests\n      run: |\n        pip install .\n        pip install -r requirements-dev.txt\n        py.test\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        python -m pip install wheel twine\n    - name: \"Build package for python ${{ matrix.python-version }}\"\n      run: |\n        python setup.py bdist_wheel\n    - name: Publish distribution \ud83d\udce6 to Test PyPI\n      env:\n        TWINE_USERNAME: __token__\n        #TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}\n        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}\n      run: |\n        #python -m twine upload --repository testpypi dist/* --verbose --skip-existing\n        python -m twine upload dist/* --verbose --skip-existing\n```"}
{"llm_response": "```yaml test-chia:\n  on:\n    push:\n      branches:\n        - integration\n\n  jobs:\n    docker:\n      runs-on: ubuntu-latest\n\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Set up Python\n          uses: actions/setup-python@v2\n          with:\n            python-version: '3.x'\n\n        - name: Install dependencies\n          run: |\n            pip install --upgrade pip\n            pip install -r requirements.txt\n\n        - name: Run tests\n          run: pytest\n```", "answer": "```yaml name: test-chia\n\non:\n  push:\n    branches:\n      - 'integration'\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - \n        name: Login to DockerHub\n        uses: docker/login-action@v2 \n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Login to GitHub Container Registry\n        uses: docker/login-action@v2 \n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          file: docker/dockerfile\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          build-args: |\n            \"UBUNTU_VER=jammy\"\n            \"MACHINARIS_STREAM=test\"\n            \"CHIADOG_BRANCH=dev\"\n            \"CHIA_BRANCH=release/1.6.1\"\n            \"BLADEBIT_BRANCH=2.0.0-beta1\"\n          tags: |\n            ${{ secrets.DOCKERHUB_USERNAME }}/machinaris:test\n            ghcr.io/${{ secrets.DOCKERHUB_USERNAME }}/machinaris:test\n```"}
{"llm_response": "```yaml\nname: Links\n\non:\n  - push\n  - pull_request\n  - schedule\n    - cron: '0 0 * * *'\n\njobs:\n  linkChecker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n      - name: Install dependencies\n        run: go mod download\n      - name: Run link checker\n        run: ./check-links.sh\n```", "answer": "```yaml name: Links\n\non:\n  repository_dispatch:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 0 1 * *\"\n\njobs:\n  linkChecker:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: Link Checker\n        uses: lycheeverse/lychee-action@v1.5.1\n        with:\n          args: --verbose --no-progress **/*.md **/*.html\n        env:\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n\n      - name: Create Issue From File\n        uses: peter-evans/create-issue-from-file@v3\n        with:\n          title: Link Checker Report\n          content-filepath: ./lychee/out.md\n          labels: report, automated issue```"}
{"llm_response": "```yaml HTML5-check:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n    - name: Install dependencies\n      run: |\n        if [ \"$GITHUB_REF\" = \"refs/heads/main\" ] || [ \"$GITHUB_REF\" = \"refs/heads/master\" ]; then\n          apt-get update && apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-dev\n        fi\n    - name: Build HTML5\n      run: |\n        if [ \"$GITHUB_REF\" = \"refs/heads/main\" ] || [ \"$GITHUB_REF\" = \"refs/heads/master\" ]; then\n          Rscript -e 'devtools::install_github(\"rstudio/htmlwidgets\")'\n          Rscript -e 'htmlwidgets::run_widget(\"htmlwidgets::shiny_app\", app_dir = \"./app\", output_file = \"index.html\")'\n        fi\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: HTML5 check\n\njobs:\n  HTML5-check:\n    uses: easystats/workflows/.github/workflows/html-5-check.yaml@main\n```"}
{"llm_response": "```yaml\nname: Unassign Issues\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  unassign_issues:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Unassign issues\n        run: |\n          python -m issue_unassigner\n```", "answer": "```yaml on:\n  schedule:\n    # * is a special character in YAML so you have to quote this string\n    - cron:  '0 0 * * *'\n  workflow_dispatch: # Enable manual runs of the bot\n\njobs:\n  unassign_issues:\n    runs-on: ubuntu-latest\n    name: Unassign issues\n    steps:\n      - name: Unassign issues\n        uses: codethesaurus/unassign-issues@1.2\n        id: unassign_issues\n        with:\n          token: ${{secrets.GITHUB_TOKEN}}\n          warning_inactive_in_hours: 336 # 14 days\n          unassign_inactive_in_hours: 408 # 3 days later\n          office_hours: 'n/a'\n          warning_inactive_message: \"If you are still working on this issue, that's fine. Please comment here to tell the bot to give you more time.\"\n      - name: Print the unassigned issues\n        run: echo \"Unassigned issues = ${{steps.unassign_issues.outputs.unassigned_issues}}\"\n      - name: Print the warned issues\n        run: echo \"Warned issues = ${{steps.unassign_issues.outputs.warned_issues}}\"\n```"}
{"llm_response": "```yaml\nname: Build Examples\n\non:\n  push:\n    branches: [ main ]\n  tags:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++ compiler\n        run: |\n          sudo apt-get update && \\\n          sudo apt-get install -y g++ cmake\n\n      - name: Clone repository\n        run: git clone https://github.com/<username>/<repository>.git\n\n      - name: Build examples\n        working-directory: <repository>\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n```", "answer": "```yaml name: Build Examples\n\n# Triggers the workflow on push or pull request events\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, 'ci skip')\"\n\n    strategy:\n      matrix:\n        example:\n          [\n            examples/a_wild_card/,\n            examples/b_address_change/,\n            examples/c_check_all_addresses/,\n            examples/d_simple_logger/,\n            examples/e_continuous_measurement/,\n            examples/f_basic_data_request/,\n            examples/g_terminal_window/,\n            examples/h_SDI-12_slave_implementation/,\n            examples/i_SDI-12_interface/,\n            examples/j_external_pcint_library/,\n            examples/k_concurrent_logger/,\n          ]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set variables\n        run: |\n          if [[ -z \"${GITHUB_HEAD_REF}\" ]]; then\n            echo \"::debug::Push to commit ${GITHUB_SHA}\"\n            echo \"LIBRARY_INSTALL_SOURCE=https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_SHA}\" >> $GITHUB_ENV\n          else\n            echo \"::debug::Pull Request from the ${GITHUB_HEAD_REF} branch\"\n            echo \"LIBRARY_INSTALL_SOURCE=https://github.com/${GITHUB_REPOSITORY}.git#${GITHUB_HEAD_REF}\" >> $GITHUB_ENV\n          fi\n\n      - name: Restore or Cache pip\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.cache/pip\n          # if requirements.txt hasn't changed, then it will be a \"cache hit\" and pip will be restored\n          # if requirements.txt HAS changed, it will be a \"cache miss\" and a new cache of pip will be created if the job completes successfully\n          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n          restore-keys: ${{ runner.os }}-pip-\n\n      - name: Restore or Cache PlatformIO and Libraries\n        uses: actions/cache@v3.0.11\n        with:\n          path: ~/.platformio\n          # if nothing in the lock files has changed, then it will be a \"cache hit\" and pip will be restored\n          # otherwise, it will be a \"cache miss\" and a new cache of libraries will be created if the job completes successfully\n          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      # This should be pulled from cache, if there's not a new version\n      - name: Install PlatformIO\n        run: |\n          python -m pip install --upgrade pip\n          pip install --upgrade platformio\n\n      - name: Run PlatformIO\n        if:  matrix.example != 'examples/j_external_pcint_library/'\n        env:\n          PLATFORMIO_CI_SRC: ${{ matrix.example }}\n        run: |\n          echo \"${{ env.LIBRARY_INSTALL_SOURCE }}\"\n          pio lib --global install ${{ env.LIBRARY_INSTALL_SOURCE }}\n          pio lib --global install EnableInterrupt\n          platformio ci --board=mayfly --board=feather32u4 --board=adafruit_feather_m0 --board=uno --board=megaatmega2560 --board=huzzah --board=featheresp32\n          pio lib --global uninstall SDI-12\n\n      - name: Run PlatformIO\n        if: matrix.example == 'examples/j_external_pcint_library/'\n        env:\n          PLATFORMIO_CI_SRC: ${{ matrix.example }}\n          PLATFORMIO_BUILD_FLAGS: -DSDI12_EXTERNAL_PCINT\n        run: |\n          echo \"${{ env.LIBRARY_INSTALL_SOURCE }}\"\n          pio lib --global install ${{ env.LIBRARY_INSTALL_SOURCE }}\n          pio lib --global install EnableInterrupt\n          platformio ci --board=mayfly --board=feather32u4 --board=adafruit_feather_m0 --board=uno --board=megaatmega2560\n          pio lib --global uninstall SDI-12\n```"}
{"llm_response": "```yaml\nname: Sync\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n    - name: Build with Maven\n      run: mvn clean install\n```", "answer": "```yaml name: Sync\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    if: github.repository == 'doocs/source-code-hunter'\n    steps:\n      - name: Sync to Gitee\n        uses: wearerequired/git-mirror-action@master\n        env:\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n        with:\n          source-repo: git@github.com:doocs/source-code-hunter.git\n          destination-repo: git@gitee.com:Doocs/source-code-hunter.git\n\n      - name: Build Gitee Pages\n        uses: yanglbme/gitee-pages-action@main\n        with:\n          gitee-username: yanglbme\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          gitee-repo: doocs/source-code-hunter\n          branch: main\n```"}
{"llm_response": "```yaml\nname: Check & fix styling\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 */6 * * *' # Every day at midnight\n  workflow_dispatch:\n\njobs:\n  php-cs-fixer:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Composer\n        run: composer self-update --check\n      - name: Install dependencies\n        run: composer install\n      - name: Run PHP CS Fixer\n        run: vendor/bin/php-cs-fixer fix --dry-run --diff\n```", "answer": "```yaml name: Check & fix styling\n\non: [push]\n\njobs:\n  php-cs-fixer:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.head_ref }}\n\n      - name: Run PHP CS Fixer\n        uses: docker://oskarstark/php-cs-fixer-ga\n        with:\n          args: --config=.php-cs-fixer.dist.php --allow-risky=yes\n\n      - name: Commit changes\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: Fix styling\n```"}
{"llm_response": "```yaml\nname: Docker Image Build\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Build Docker image\n      run: docker build -t my-vue-app .\n```", "answer": "```yaml name: 'docker image build'\n\non:\n  create\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      - name: Checkout submodules\n        run: git submodule update --init --recursive        \n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      -\n        name: Login to DockerHub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7,linux/arm/v6\n          push: true\n          tags: wikihostinc/looking-glass-server:latest\n```"}
{"llm_response": "```yaml\nname: Tests\n\non:\n  push:\n    branches:\n      - master\n      - develop\n      - 3.x\n  pull_request:\n\njobs:\n  PHPUnitTests:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        php: [7.4, 8.0]\n        dbName: [mysql, postgresql]\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: ${{ matrix.php }}\n          install-composer: true\n\n      - name: Install dependencies\n        run: composer install\n\n      - name: Run PHPUnit tests\n        run: vendor/bin/phpunit --coverage-html coverage\n```", "answer": "```yaml name: Tests\n\non:\n  push:\n    branches:\n      - master\n      - develop\n      - 3.x\n  pull_request:\n\njobs:\n  PHPUnitTests:\n#    runs-on: ${{ matrix.os }}\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 6\n      matrix:\n#        os: [ubuntu-latest, windows-latest]\n        php: ['7.4', '8.0', '8.1']\n        db: ['mysql:5.7', 'mysql:8.0', 'mariadb:10.2', 'mariadb:10.6']\n        include:\n          - db: 'mysql:5.7'\n            dbName: 'MySQL 5.7'\n          - db: 'mysql:8.0'\n            dbName: 'MySQL'\n          - db: 'mariadb:10.2'\n            dbName: 'MariaDB 10.2'\n          - db: 'mariadb:10.6'\n            dbName: 'MariaDB'\n      fail-fast: false\n\n    services:\n      mysql:\n        image: ${{ matrix.db }}\n        ports:\n          - 3306\n\n    name: 'PHPUnit Tests ${{ matrix.php }} / ${{ matrix.dbName }}'\n\n    steps:\n      - name: Checkout changes\n        uses: actions/checkout@v1\n\n      - name: Create MySQL Database\n        run: |\n          sudo systemctl start mysql\n          mysql -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }} -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' --port ${{ env.DB_PORT }}\n\n      - name: Install PHP\n        uses: shivammathur/setup-php@master\n        with:\n          php-version: ${{ matrix.php }}\n          extensions: mbstring, intl, gd, xml, sqlite\n\n      - name: Install composer dependencies\n        run: composer install --no-interaction --prefer-dist --no-progress --no-scripts\n\n      - name: Reset TastyIgniter library\n        run: |\n          git reset --hard HEAD\n          rm -rf ./vendor/tastyigniter/flame\n          wget https://github.com/tastyigniter/flame/archive/master.zip -O ./vendor/tastyigniter/master.zip\n          unzip ./vendor/tastyigniter/master.zip -d ./vendor/tastyigniter\n          mv ./vendor/tastyigniter/flame-master ./vendor/tastyigniter/flame\n          composer dump-autoload\n\n      - name: Run composer post-update scripts\n        run: |\n          php artisan key:generate --force\n          php artisan igniter:install --no-interaction\n          php artisan igniter:util set version\n          php artisan package:discover\n\n      - name: Run PHPUnit Test Suite\n        run: ./vendor/bin/phpunit\n\n    env:\n      DB_PORT: 3306\n      DB_DATABASE: test\n      DB_USERNAME: root\n      DB_PASSWORD: root\n      DB_PREFIX: 'ti_'\n      IGNITER_LOCATION_MODE: multiple\n```"}
{"llm_response": "```yaml\nname: Dependabot Batcher for Paella 7\n\non:\n  - push\n  - pull_request\n  - workflow_dispatch\n\njobs:\n  dependabot-batcher-paella-7:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Dependabot Batcher\n        run: |\n          # Add your Dependabot batcher command here\n          ./path/to/dependabot/batcher.sh\n```", "answer": "```yaml # Dependabot Batcher v1.0.1\n\nname: 'Dependabot Batcher for Paella 7'\n\n# Controls when the workflow will run\non:\n  pull_request:\n    paths:\n      - '/modules/engage-paella-player-7/**'\n  push:\n    paths:\n      - '/modules/engage-paella-player-7/**'\n\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  dependabot-batcher-paella-7:\n    name: 'Combine dependabot PRs'\n    runs-on: ubuntu-latest\n    steps:\n  # Batches Dependabot PRs into one by merging them into a combined branch, then raising a new PR\n      - name: 'Dependabot Batcher'\n        uses: Legal-and-General/dependabot-batcher@v1.0.1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }} #required\n          baseBranchName: 'r/12.x' #optional\n          batchBranchName: 'paella7-batcher-updates'\n          batchPullTitle: 'Batch Dependabot Updates for Paella 7'\n```"}
{"llm_response": "```yaml BE UT (Clang):\n  on:\n    push:\n      branches:\n        - main\n\n  concurrency:\n    group: ${{ github.ref }}\n    parallelism: 1\n\n  jobs:\n    run-ut:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Set up JDK\n          uses: actions/setup-java@v2\n          with:\n            java-version: '11'\n\n        - name: Build project\n          run: mvn clean install\n\n        - name: Run tests\n          run: mvn test\n```", "answer": "```yaml # Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nname: BE UT (Clang)\n\non:\n  pull_request:\n\nconcurrency:\n  group: ${{ github.ref }} (BE UT Clang)\n  cancel-in-progress: true\n\njobs:\n  run-ut:\n    name: BE UT (Clang)\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          submodules: recursive\n\n      - name: Ccache ${{ github.ref }}\n        uses: ./.github/actions/ccache-action\n        with:\n          key: ${{ github.ref }} (BE UT Clang)\n          max-size: \"1G\"\n\n      - name: Paths filter\n        uses: ./.github/actions/paths-filter\n        id: filter\n        with:\n          filters: |\n            be_changes:\n              - 'be/**'\n              - 'gensrc/proto/**'\n              - 'gensrc/thrift/**'\n\n      - name: Run UT ${{ github.ref }}\n        if: ${{ steps.filter.outputs.be_changes == 'true' }}\n        run: |\n          export DEFAULT_DIR='/opt/doris'\n          export PATH=\"${DEFAULT_DIR}/ldb-toolchain/bin/:${DEFAULT_DIR}/thirdparty/installed/bin/:${PATH}\"\n          export DORIS_THIRDPARTY=\"${DEFAULT_DIR}/thirdparty\"\n\n          mkdir \"${DEFAULT_DIR}\"\n\n          wget https://github.com/amosbird/ldb_toolchain_gen/releases/download/v0.12/ldb_toolchain_gen.sh \\\n            -q -O /tmp/ldb_toolchain_gen.sh\n          bash /tmp/ldb_toolchain_gen.sh \"${DEFAULT_DIR}/ldb-toolchain\"\n\n          mkdir -p \"${DORIS_THIRDPARTY}/installed\"\n          docker run --rm --mount=type=bind,source=\"${DORIS_THIRDPARTY}/installed\",target=/installed \\\n            apache/doris:build-env-ldb-toolchain-latest bash -c 'mv /var/local/thirdparty/installed/* /installed'\n\n          sudo apt update\n          sudo apt upgrade --yes\n          sudo DEBIAN_FRONTEND=noninteractive apt install --yes tzdata byacc\n\n          # set timezone\n          sudo ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n          sudo dpkg-reconfigure --frontend noninteractive tzdata\n\n          DORIS_TOOLCHAIN=clang ./run-be-ut.sh -j \"$(nproc)\" --run --clean\n\n      - name: Skip UT ${{ github.ref }}\n        if: ${{ steps.filter.outputs.be_changes == 'false' }}\n        run: echo 'No need to run.'\n```"}
{"llm_response": "```yaml\nname: bundlediff-web\n\non:\n  pull_request:\n    branches:\n      - onekey\n\njobs:\n  build-web-head:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build web head\n        run: npm install && npm run build\n\n  build-web-base:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build web base\n        run: npm install && npm run build\n\n  compare:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Compare base & head bundle sizes\n        run: npm install && npm run compare-bundle-sizes\n```", "answer": "```yaml name: bundlediff-web\n\non:\n  pull_request:\n    branches: [onekey]\n\njobs:\n  # Build current and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-web-head:\n    name: 'Build web head'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{github.event.pull_request.head.ref}}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:web\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: head-stats\n          path: ./packages/web/web-build/stats.json\n\n  # Build base for comparison and upload stats.json\n  # You may replace this with your own build method. All that\n  # is required is that the stats.json be an artifact\n  build-web-base:\n    name: 'Build web base'\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          ref: ${{ github.base_ref }}\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"dir=$(yarn cache dir)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        id: yarn-cache\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install Dependency\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          yarn global add expo-cli sharp-cli@^1.10.0 && yarn\n\n      - name: Generate stats.json\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n        run: yarn stats:web\n\n      - name: Upload stats.json\n        uses: actions/upload-artifact@v3\n        with:\n          name: base-stats\n          path: ./packages/web/web-build/stats.json\n\n  # run the action against the stats.json files\n  compare:\n    name: 'Compare base & head bundle sizes'\n    runs-on: ubuntu-latest\n    needs: [build-web-base, build-web-head]\n    steps:\n      - uses: actions/download-artifact@v3\n\n      - uses: github/webpack-bundlesize-compare-action@v1.5.0\n        with:\n          title: 'web bundle diff'\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          current-stats-json-path: ./head-stats/stats.json\n          base-stats-json-path: ./base-stats/stats.json\n```"}
{"llm_response": "```yaml\nname: Publish\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Kotlin\n        uses: gradle/setup-kotlin@v7\n\n      - name: Build and publish\n        run: ./gradlew build publish\n```", "answer": "```yaml name: Publish\non:\n  release:\n    types:\n      - published\n\njobs:\n  publish:\n    runs-on: macos-11\n    steps:\n      - uses: actions/checkout@v3\n      - uses: gradle/wrapper-validation-action@v1\n      - uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n\n      - uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n            ~/.konan\n            ~/.android/build-cache\n            ~/.android/cache\n          key: ${{ runner.os }}-publish-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}\n          restore-keys: |\n            ${{ runner.os }}-publish-\n            ${{ runner.os }}-\n\n      - run: ./gradlew check\n      - run: >-\n          ./gradlew\n          -PVERSION_NAME=\"${GITHUB_REF/refs\\/tags\\//}\"\n          -PsigningInMemoryKey=\"${{ secrets.SIGNING_KEY }}\"\n          -PsigningInMemoryKeyPassword=\"${{ secrets.SIGNING_PASSWORD }}\"\n          -PmavenCentralUsername=\"${{ secrets.OSS_SONATYPE_NEXUS_USERNAME }}\"\n          -PmavenCentralPassword=\"${{ secrets.OSS_SONATYPE_NEXUS_PASSWORD }}\"\n          publish\n\n      - run: |\n          rm -f ~/.gradle/caches/modules-2/modules-2.lock\n          rm -f ~/.gradle/caches/modules-2/gc.properties\n```"}
{"llm_response": "```yaml\nname: Tests DynamoDB\n\non:\n  push:\n    branches:\n      - master\n      - main\n  pull_request:\n    branches:\n      - master\n      - main\n\njobs:\n  Tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Install dependencies\n      run: go mod download\n    - name: Run tests\n      run: go test ./...\n```", "answer": "```yaml on:\n    push:\n        branches:\n            - master\n            - main\n    pull_request:\nname: \"Tests DynamoDB\"\njobs:\n    Tests:\n        runs-on: ubuntu-latest\n        services:\n            mongo:\n                image: 'amazon/dynamodb-local:latest'\n                ports:\n                    - '8000:8000'\n        strategy:\n            matrix:\n                go-version:\n                    - 1.14.x\n                    - 1.16.x\n                    - 1.19.x\n                platform:\n                    - ubuntu-latest\n                    - windows-latest\n        steps:\n            -   name: Install Go\n                uses: actions/setup-go@v3\n                with:\n                    go-version: '${{ matrix.go-version }}'\n            -   name: Setup Golang caches\n                uses: actions/cache@v3\n                with:\n                    # In order:\n                    # * Module download cache\n                    # * Build cache (Linux)\n                    # * Build cache (Mac)\n                    # * Build cache (Windows)\n                    path: |\n                        ~/go/pkg/mod\n                        ~/.cache/go-build\n                        ~/Library/Caches/go-build\n                        ~\\AppData\\Local\\go-build\n                    key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}\n                    restore-keys: |\n                        ${{ runner.os }}-go-${{ matrix.go-version }}-\n            -   name: Fetch Repository\n                uses: actions/checkout@v3\n            -   name: Run Test\n                run: cd ./dynamodb && go test ./... -v -race\n```"}
{"llm_response": "```yaml govc-Tests\nname: govc Tests\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\nconcurrency:\n  group: govmomi-govc-tests-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  Run govc Tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Run govc tests\n        run: make test\n\n  Verify govc docs are up-to-date:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Run govc doc generation\n        run: make doc\n\n      - name: Verify that generated documentation matches expected content\n        # Add your verification logic here\n        run: echo \"Verifying govc docs...\"\n        # Example: Compare files or use a tool like diff\n```", "answer": "```yaml #  Copyright (c) 2021 VMware, Inc. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\nname: govc Tests\n\non:\n  push:\n    branches: [\"main\", \"master\"]\n\n  pull_request:\n    branches: [\"main\", \"master\"]\n\nconcurrency:\n  group: govmomi-govc-tests-${{ github.head_ref || github.run_id }}\n  cancel-in-progress: true\n\njobs:\n  govc-tests:\n    name: Run govc Tests\n    strategy:\n      fail-fast: false\n      matrix:\n        go-version: [\"1.17\", \"1.18\"]\n        platform: [\"ubuntu-20.04\"]\n        cmd: [\"govc-test\"]\n        experimental: [false]\n        timeout: [20]\n        include:\n          - go-version: \"1.18\"\n            platform: \"ubuntu-20.04\"\n            cmd: \"govc-test-sso\"\n            experimental: true\n            timeout: 3\n          - go-version: \"1.18\"\n            platform: \"ubuntu-20.04\"\n            cmd: \"govc-test-sso-assert-cert\"\n            experimental: true\n            timeout: 3\n\n    runs-on: ${{ matrix.platform }}\n    continue-on-error: ${{ matrix.experimental }}\n    timeout-minutes: ${{ matrix.timeout }}\n\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n        id: go\n\n      - name: Restore Go cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-${{ matrix.go-version }}-\n\n      - name: Run ${{ matrix.cmd }}\n        run: |\n          make ${{ matrix.cmd }}\n\n  govc-docs:\n    name: Verify govc docs are up2date\n    strategy:\n      matrix:\n        go-version: [\"1.17\"]\n        platform: [\"ubuntu-20.04\"]\n    runs-on: ${{ matrix.platform }}\n    timeout-minutes: 3\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v3\n\n      - name: Set up Go ${{ matrix.go-version }}\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n        id: go\n\n      - name: Restore Go cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cache/go-build\n            ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-${{ matrix.go-version }}-\n\n      - name: Run \"make doc\"\n        run: |\n          make doc\n          if [ -z \"$(git status --porcelain)\" ]; then \n            echo \"govc/USAGE.md is up2date...\"\n          else \n            echo \"dirty working directory (diff):\"\n            git --no-pager diff\n            echo \"::error file=govc/USAGE.md::Run make doc to update USAGE.md\"\n            exit 1\n          fi\n```"}
{"llm_response": "```yaml\nname: Markdown Links Check\n\non:\n  push:\n    branches-ignore:\n      - main\n    paths:\n      - .github/markdown-link-check.json\n      - .github/workflows/markdown-link-check.yaml\n      - **/*.md\n  pull_request:\n    branches-ignore:\n      - main\n    paths:\n      - .github/markdown-link-check.json\n      - .github/workflows/markdown-link-check.yaml\n      - **/*.md\n  schedule:\n    - cron: '0 0 * * Tue'\n\njobs:\n  check-links:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: cargo install markdown-link-check\n      - name: Run markdown-link-check\n        run: markdown-link-check --config .github/markdown-link-check.json\n```", "answer": "```yaml ---\n\"on\":\n  push:\n    branches:\n      - trunk\n    paths:\n      - .github/markdown-link-check.json\n      - .github/workflows/markdown-link-check.yaml\n      - \"**/*.md\"\n  pull_request:\n    branches:\n      - trunk\n    paths:\n      - .github/markdown-link-check.json\n      - .github/workflows/markdown-link-check.yaml\n      - \"**/*.md\"\n  schedule:\n    - cron: \"0 0 * * TUE\"\nname: Markdown Links Check\njobs:\n  check-links:\n    name: Check links\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Check for broken links in markdown files\n        uses: gaurav-nelson/github-action-markdown-link-check@v1\n        with:\n          use-quiet-mode: \"yes\"\n          use-verbose-mode: \"yes\"\n          config-file: \".github/markdown-link-check.json\"\n          folder-path: \".\"\n```"}
{"llm_response": "```yaml\nname: Review automatic pull requests\n\non:\n  pull_request:\n    types: [opened, edited]\n  pull_request_target:\n    types: [opened, edited]\n\njobs:\n  auto_review:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up .NET SDK\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.x'\n      - name: Run code analysis\n        run: dotnet analyze --no-build\n      - name: Check if changes are approved\n        if: github.event.pull_request.merged == false\n          run: |\n            echo \"Pull request is not merged yet.\"\n            exit 1\n      - name: Request a review\n        uses: github-actions/create-pr-review@v4\n        with:\n          base-ref: ${{ github.base.ref }}\n          head-ref: ${{ github.head.ref }}\n          title: Code review requested\n          body: |\n            Please review the changes made in this pull request.\n            Once you have reviewed it, mark it as ready for merge.\n          assignees: ${{ github.event.requested_reviewers }}\n          reviewers: ${{ github.event.requested_reviewers }}\n```", "answer": "```yaml name: Review automatic pull requests\non:\n  pull_request_target:\n    types: [opened, ready_for_review]\npermissions:\n  issues: write\n  pull-requests: write\njobs:\n  auto_review:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'dotnet/roslyn-analyzers' && (github.event.pull_request.user.login == 'dotnet-bot' || github.event.pull_request.user.login == 'dotnet-maestro[bot]') }}\n    steps:\n    - name: Create review\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        PULL_REQUEST_ID: ${{ github.event.pull_request.node_id }}\n      run: |\n        gh api graphql -f query='\n          mutation($pull: ID!) {\n            addPullRequestReview(input: {pullRequestId: $pull}) {\n              pullRequestReview {\n                id\n              }\n            }\n          }' -f pull=$PULL_REQUEST_ID > data.json\n\n        cat data.json\n        echo 'REVIEW_ID='$(jq -r '.data.addPullRequestReview.pullRequestReview.id' data.json) >> $GITHUB_ENV\n\n    - name: Submit approval\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      if: ${{ env.REVIEW_ID != '' && env.REVIEW_ID != 'null' && !contains(github.event.pull_request.body, 'Updates sdk.version') }}\n      run: |\n        gh api graphql -f query='\n          mutation($review: ID!) {\n            submitPullRequestReview(input: {pullRequestReviewId: $review, event: APPROVE, body: \"Auto-approve\"}) {\n              clientMutationId\n            }\n          }' -f review=$REVIEW_ID\n\n    - name: Submit change request\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      if: ${{ env.REVIEW_ID != '' && env.REVIEW_ID != 'null' && contains(github.event.pull_request.body, 'Updates sdk.version') }}\n      run: |\n        gh api graphql -f query='\n          mutation($review: ID!) {\n            submitPullRequestReview(input: {pullRequestReviewId: $review, event: REQUEST_CHANGES, body: \"This PR changes the .NET SDK version. Review required from @dotnet/roslyn-infrastructure before merging.\"}) {\n              clientMutationId\n            }\n          }' -f review=$REVIEW_ID\n```"}
{"llm_response": "```yaml\nname: Close stale issues\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  cleanup:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: '3.0'\n      - name: Install dependencies\n        run: bundle install\n      - name: Check for stale issues\n        run: bundle exec rake check_stale_issues\n      - name: Disable permissions\n        run: |\n          curl --request PUT \\\n            https://api.github.com/repos/<username>/<repository>/settings/permissions/contents/GITHUB_TOKEN \\\n            -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            -d '{\"scope\": []}'\n```", "answer": "```yaml name: \"Close stale issues\"\n\n# Controls when the action will run.\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\npermissions: {}\njobs:\n  cleanup:\n    permissions:\n      issues: write # to label, comment and close issues\n      pull-requests: write # to label, comment and close pull requests\n\n    runs-on: ubuntu-latest\n    name: Stale issue job\n    steps:\n    - uses: aws-actions/stale-issue-cleanup@v5\n      with:\n        # Setting messages to an empty string will cause the automation to skip\n        # that category\n        ancient-issue-message: Greetings! We\u2019re closing this issue because it has been open a long time and hasn\u2019t been updated in a while and may not be getting the attention it deserves. We encourage you to check if this is still an issue in the latest release and if you find that this is still a problem, please feel free to comment or open a new issue.\n        stale-issue-message: This issue has not received a response in 1 week. If you still think there is a problem, please leave a comment to avoid the issue from automatically closing.\n        stale-pr-message: This PR has not received a response in 1 week. If you still think there is a problem, please leave a comment to avoid the PR from automatically closing.\n        # These labels are required\n        stale-issue-label: closing-soon\n        exempt-issue-label: no-autoclose\n        stale-pr-label: closing-soon\n        exempt-pr-label: pr/needs-review\n        response-requested-label: response-requested\n\n        # Don't set closed-for-staleness label to skip closing very old issues\n        # regardless of label\n        closed-for-staleness-label: closed-for-staleness\n\n        # Issue timing\n        days-before-stale: 5\n        days-before-close: 2\n        days-before-ancient: 365\n\n        # If you don't want to mark a issue as being ancient based on a\n        # threshold of \"upvotes\", you can set this here. An \"upvote\" is\n        # the total number of +1, heart, hooray, and rocket reactions\n        # on an issue.\n        minimum-upvotes-to-exempt: 10\n\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        # loglevel: DEBUG\n        # Set dry-run to true to not perform label or close actions.\n        # dry-run: true\n```"}
{"llm_response": "```yaml\nname: @tailscale/connect npm publish\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm install\n    - run: npm publish\n```", "answer": "```yaml name: \"@tailscale/connect npm publish\"\n\non: workflow_dispatch\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Set up node\n        uses: actions/setup-node@v3\n        with:\n          node-version: \"16.x\"\n          registry-url: \"https://registry.npmjs.org\"\n\n      - name: Build package\n        # Build with build_dist.sh to ensure that version information is embedded.\n        # GOROOT is specified so that the Go/Wasm that is trigged by build-pk\n        # also picks up our custom Go toolchain.\n        run: |\n          ./build_dist.sh tailscale.com/cmd/tsconnect\n          GOROOT=\"${HOME}/.cache/tailscale-go\" ./tsconnect build-pkg\n\n      - name: Publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.TSCONNECT_NPM_PUBLISH_AUTH_TOKEN }}\n        run: ./tool/yarn --cwd ./cmd/tsconnect/pkg publish --access public\n```"}
{"llm_response": "```yaml \ud83e\udd37 Script checks\n\non:\n  push:\n    branches-ignore:\n      - main\n    paths-ignore:\n      - '**/node_modules/**'\n      - '**/.git/**'\n      - '**/dist/**'\n  pull_request:\n    paths-ignore:\n      - '**/node_modules/**'\n      - '**/.git/**'\n      - '**/dist/**'\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up C++\n        uses: actions/setup-cpp@v2\n        with:\n          cpp-version: '11'\n      - name: Build and test\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n         ctest\n```", "answer": "```yaml name: \ud83e\udd39 Script checks\n\non:\n  push:\n    branches:\n      - master\n      - release-**\n  pull_request:\n  release:\n    types: ['published', 'released']\n\njobs:\n  test:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Check version number\n        run: |\n          ./test/test_version_number.sh\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - \"2.2.x\"\n  pull_request:\n    branches:\n      - \"2.2.x\"\n  schedule:\n    - cron: '0 23 * * 2'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/setup@v2\n        with:\n          codeql-version: latest\n      - name: Run CodeQL CLI\n        uses: github/codeql-action/run@v2\n        with:\n          database-location: ./codeql-results/codeql.db\n          results-json-path: ./codeql-results/results.json\n          database-name: php-analysis\n          database-type: sqlite\n          database-url: postgresql://localhost/php-analysis\n          database-username: your_username\n          database-password: your_password\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ 2.2.x ]\n  pull_request:\n    branches: [ 2.2.x ]\n  schedule:\n    - cron: '26 23 * * 2'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Publish to Maven Repository\n\non:\n  release:\n    types: [published, prerelease]\n  pull_request:\n    types: [opened]\n\njobs:\n  publish_to_maven:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Build and package the project\n        run: mvn clean install\n      - name: Deploy to Maven Central\n        uses: jfrog/artifactory-deployer@v3\n        with:\n          url: https://oss.jfrog.org/artifactory/maven/\n          username: ${{ secrets.JFROG_USERNAME }}\n          password: ${{ secrets.JFROG_PASSWORD }}\n          repository: maven-releases\n          artifact: target/your-artifact.jar\n          file: target/your-artifact.jar\n          properties:\n            maven.groupId: com.example\n            maven.artifactId: your-artifact\n            maven.version: ${{ github.ref_name }}\n```", "answer": "```yaml name: Publish to Maven Repository\non:\n  release:\n    types: [published]\n\njobs:\n  publish_to_maven:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          java-version: '8'\n          distribution: 'adopt'\n      - name: Grant execute permission for gradlew\n        run: chmod +x gradlew\n      - name: Publish package to Maven Repository\n        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository\n        env:\n          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}\n          SONATYPE_KEY: ${{ secrets.SONATYPE_KEY }}\n          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}\n          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}\n          SIGNING_KEY_AMORED: ${{ secrets.SIGNING_KEY_AMORED }}\n          SONATYPE_STAGING_PROFILE: ${{ secrets.SONATYPE_STAGING_PROFILE }}\n```"}
{"llm_response": "```yaml reviewdog\n\nname: Reviewdog\n\non:\n  pull_request:\n    branches:\n      - main\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref }}\n  cancel-in-progress: true\n\njobs:\n  reviewdog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: github/codeql-action/setup@v2\n        with:\n          codeql-version: 'latest'\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run Reviewdog\n        uses: github/codeql-action/reviewdog@v2\n        env:\n          CODEQL_DATABASE: ./codeql-database\n          CODEQL_QUERY_PATHS: .github/workflows/reviewdog-query.yml\n          REVIEWDOG_OPTIONS: --reporter=cli\n          REVIEWDOG_FILTERS: '.github/workflows/reviewdog-filter.yml'\n```", "answer": "```yaml name: reviewdog\non:\n  pull_request:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref }}\n  cancel-in-progress: true\n\njobs:\n  reviewdog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: reviewdog/action-setup@v1\n        with:\n          reviewdog_version: latest\n\n      - uses: actions/setup-python@v3\n        with:\n          python-version: \"3.10\"\n\n      - name: Install deps\n        run: pip install \".[ci]\"\n\n      - name: Reviewdog\n        env:\n          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: make reviewdog\n```"}
{"llm_response": "```yaml lint-pr:\n  on:\n    pull_request:\n      types: [opened, edited, synchronize, reopened]\n      branches-ignore: [main]\n\n  jobs:\n    validate:\n      runs-on: ubuntu-latest\n\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Install dependencies\n          run: bundle install\n\n        - name: Run linter\n          run: bundle exec rubocop\n```", "answer": "```yaml name: Lint PR\non:\n  pull_request_target:\n    types: [ opened, edited, synchronize, reopened ]\n\njobs:\n  validate:\n    name: Validate title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        with:\n          types: chore docs fix feat test misc\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Slack release notifications\n\non:\n  release:\n    types: [published, prereleased, draft]\n\njobs:\n  slack-release-notifier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Release notification\n        uses: slackapi/slack-github-action@v3\n        with:\n          token: ${{ secrets.SLACK_TOKEN }}\n          channel: '#release-notify'\n          message: \"A new release has been published: {{ github.release.tag_name }}\"\n```", "answer": "```yaml name: \"Slack release notifications\"\non:\n  release:\n    types: [published]\njobs:\n  slack-release-notifier:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n      - uses: ./tools/slack-release-notifier/\n        with:\n          repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_RELEASE_BOT_TEST }}\n```"}
{"llm_response": "```yaml\nname: Clang-Format\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  fork:\n    branches:\n      - main\n    tags:\n      - v*\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        sudo apt-get update && \\\n        sudo apt-get install clang-format\n\n    - name: Format code\n      run: |\n        clang-format -i --style=file .\n```", "answer": "```yaml name: Clang-Format\n\non: [push]\n\njobs:\n  build:\n    name: Format\n    runs-on: ubuntu-20.04\n    \n    steps:\n    - uses: actions/checkout@v1\n      with:\n          fetch-depth: 1\n    - uses: DoozyX/clang-format-lint-action@v0.11\n      with:\n        source: 'enzyme/Enzyme'\n        exclude: './CMakeLists.txt enzyme/Enzyme/SCEV'\n        style: 'llvm'\n        clangFormatVersion: 11```"}
{"llm_response": "```yaml\nname: Publish Docker image\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  repository_dispatch:\n    types: [ \"repo_dispatch\" ]\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build Docker image\n        run: |\n          docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}\n          docker build -t your-repo-name:latest .\n      - name: Push Docker image to Docker Hub\n        run: |\n          docker push your-repo-name:latest\n```", "answer": "```yaml name: Publish Docker image\n\non: push\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}\n          # generate Docker tags based on the following events/attributes\n          tags: |\n            type=ref,event=branch\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n\n      # Required if building multi-arch images\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n\n      - id: buildx\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          buildkitd-flags: --debug\n          install: true\n\n      - name: Login to DockerHub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          platforms: linux/amd64,linux/arm64,linux/386\n          push: true\n          labels: ${{ steps.meta.outputs.labels }}\n          tags: ${{ steps.meta.outputs.tags }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```"}
{"llm_response": "```yaml\nname: Add Issues and PRs to Triage\n\non:\n  issues:\n    types: [opened, reopened]\n  pull_request:\n    types: [opened, reopened]\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Create issue label if not exists\n        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}\n        run: |\n          gh issue create --repo owner/repo --title \"New issue\" --body \"This is a new issue.\"\n          gh issue add-label --repo owner/repo --issue-number <issue_number> \"Triage\"\n        env:\n          issue_number: ${{ github.event.issue.number }}\n\n      - name: Create PR label if not exists\n        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}\n        run: |\n          gh pr create --repo owner/repo --title \"New PR\" --body \"This is a new PR.\"\n          gh pr add-label --repo owner/repo --pr-number <pr_number> \"Triage\"\n        env:\n          pr_number: ${{ github.event.pull_request.number }}\n```", "answer": "```yaml name: Add Issues and PRs to Triage\n\non:\n  issues:\n    types:\n      - opened\n      - reopened\n  pull_request_target:\n    types:\n      - opened\n      - reopened\n\njobs:\n  triage:\n    uses: smallstep/workflows/.github/workflows/triage.yml@main\n    secrets: inherit\n```"}
{"llm_response": "```yaml\nname: Repo Lockdown\n\non:\n  pull_request:\n    types: [opened]\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Grant GITHUB_TOKEN write access in pull-requests scope\n        run: |\n          echo \"GITHUB_TOKEN=write\" >> ~/.bashrc\n          source ~/.bashrc\n```", "answer": "```yaml name: 'Repo Lockdown'\non:\n  pull_request_target:\n    types: opened\n\npermissions:\n  pull-requests: write\n\njobs:\n  action:\n    runs-on: ubuntu-latest\n    if: github.repository == 'llvm/llvm-project'\n    steps:\n      - uses: dessant/repo-lockdown@v2\n        with:\n          process-only: 'prs'\n          pr-comment: >\n            This repository does not accept pull requests.\n            Please follow http://llvm.org/docs/Contributing.html#how-to-submit-a-patch for contribution to LLVM.\n```"}
{"llm_response": "```yaml Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run stale command\n        run: |\n          # Install stale command if not already installed\n          go get github.com/google/stale/cmd/stale\n          # Check for stale issues and pull requests\n          stale --path . --days 30 --label \"Stale\"\n```", "answer": "```yaml name: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.githubToken }}\n        days-before-stale: 30\n\n        stale-issue-message: >\n          There has not been any activity to this issue in the last 30 days.\n          It will automatically be closed after 7 more days. Remove the `stale` label to prevent this.\n        stale-issue-label: 'stale'\n        exempt-issue-labels: 'confirmed,help-wanted'\n\n        stale-pr-message: >\n          There has not been any activity to this pull request in the last 30 days.\n          It will automatically be closed after 7 more days. Remove the `stale` label to prevent this.\n        stale-pr-label: 'stale'\n        exempt-pr-labels: 'awaiting-approval,work-in-progress'\n```"}
{"llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    tags:\n      - '.*'\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip setuptools wheel\n        pip install -r requirements.txt\n\n    - name: Publish package to PyPI\n      run: |\n        python setup.py sdist bdist_wheel\n        twine upload dist/*\n```", "answer": "```yaml name: Deploy\n\non:\n  push:\n    tags:\n      - '*'\n\njobs:\n  deploy:\n    name: Publish package to PyPI\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install poetry\n        run: pipx install poetry\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3\"\n          cache: \"poetry\"\n\n      - name: Install Dev dependencies\n        run: poetry install\n\n      - name: Wait for tests to succeed\n        uses: fountainhead/action-wait-for-check@v1.1.0\n        id: wait-for-ci\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          checkName: success\n\n      - name: Exit if CI did not succeed\n        if: steps.wait-for-ci.outputs.conclusion != 'success'\n        run: exit 1\n\n      - name: Publish on PyPI\n        run: scripts/publish\n        env:\n          PYPI_TOKEN: \"${{ secrets.PYPI_TOKEN }}\"\n```"}
{"llm_response": "```yaml\nname: Backport\n\non:\n  - pull_request: [closed, labeled]\n\njobs:\n  backport:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: pytest\n\n      - name: Backport to stable branch\n        if: github.event.pull_request.action == 'closed'\n          run: |\n            git checkout stable\n            git cherry-pick HEAD~<number_of_commits>\n            git push origin stable\n\n      - name: Add backport label\n        if: github.event.pull_request.action == 'labeled'\n          run: |\n            gh issue edit <issue_number> --add-label \"backport\"\n```", "answer": "```yaml name: Backport\non:\n  pull_request_target:\n    types:\n      - closed\n      - labeled\n\njobs:\n  backport:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n    name: Backport\n    steps:\n      - name: GitHub App token\n        id: github_app_token\n        uses: tibdex/github-app-token@v1.5.0\n        with:\n          app_id: ${{ secrets.APP_ID }}\n          private_key: ${{ secrets.APP_PRIVATE_KEY }}\n          installation_id: 22958780\n\n      - name: Backport\n        uses: VachaShah/backport@v1.1.4\n        with:\n          github_token: ${{ steps.github_app_token.outputs.token }}\n          branch_name: backport/backport-${{ github.event.number }}\n```"}
{"llm_response": "```yaml Nightly - Linux distributions:\n  name: Nightly - Linux Distributions\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n      branches:\n        - main\n      paths-ignore:\n        - '*.md'\n    schedule:\n      - cron: '0 4 * * *'\n  jobs:\n    distros:\n      runs-on: ubuntu-latest\n      concurrency:\n        group: ${{ github.workflow }}-${{ github.ref }}\n        parallelism: 1\n      steps:\n        - uses: actions/checkout@v2\n        - name: Build and Test\n          run: |\n            # Add your build and test commands here\n            echo \"Building and testing...\"\n```", "answer": "```yaml on:\n  pull_request:\n    paths-ignore:\n      - \"*.md\"\n  workflow_dispatch:\n  schedule:\n  - cron: 0 4 * * *\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nname: Nightly - Linux distributions\n\njobs:\n  distros:\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # arch suffering this issue: https://github.com/abseil/abseil-cpp/issues/709\n        container_image: [\"fedora:latest\", \"debian:10\", \"archlinux:base\", \"ubuntu:20.04\", \"tgagor/centos-stream:2.0.11\", \"alpine:3.13\"]\n        compiler: [g++, clang++]\n        build_type: [Release, Debug]\n        shared_libraries: [ON, OFF]\n    container:\n      image: ${{ matrix.container_image }}\n      env:\n        CMAKE_FLAGS: -DEXIV2_TEAM_EXTRA_WARNINGS=OFF -DEXIV2_ENABLE_WEBREADY=ON -DEXIV2_ENABLE_CURL=ON -DEXIV2_BUILD_UNIT_TESTS=OFF -DEXIV2_ENABLE_BMFF=ON -DEXIV2_TEAM_WARNINGS_AS_ERRORS=OFF -DEXIV2_ENABLE_PNG=ON -DCMAKE_INSTALL_PREFIX=install\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: install dependencies\n      run: ./ci/install_dependencies.sh\n    - name: build and compile\n      run: |\n        mkdir build && cd build\n        cmake $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SHARED_LIBS=${{ matrix.shared_libraries }} -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} ..\n        cmake --build . --parallel\n        cmake --install .\n```"}
{"llm_response": "```yaml postgresql-build-and-push-ghcr\n\nname: PostgreSQL Build and Push to GHCR\n\non:\n  push:\n    branches-ignore: ['main', 'development']\n    paths-ignore: ['**/Dockerfile*', '**/shared/bin/*', '.trigger_workflow_build']\n    paths:\n      - Dockerfiles/postgresql.Dockerfile\n      - shared/bin/*\n  workflow_dispatch:\n  pull_request:\n    branches-ignore: ['main', 'development']\n    paths-ignore: ['**/Dockerfile*', '**/shared/bin/*', '.trigger_workflow_build']\n    paths:\n      - Dockerfiles/postgresql.Dockerfile\n      - shared/bin/*\n\njobs:\n  docker:\n    name: Build and Push PostgreSQL Image to GHCR\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      - name: Login to GHCR\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.GHCR_USERNAME }}\n          password: ${{ secrets.GHCR_PASSWORD }}\n      - name: Build PostgreSQL Image\n        run: |\n          docker build --platform linux/amd64 -t postgresql-image .\n      - name: Tag PostgreSQL Image\n        run: |\n          docker tag postgresql-image postgresql-image:$GITHUB_REF_NAME\n      - name: Push PostgreSQL Image to GHCR\n        run: |\n          docker push postgresql-image:$GITHUB_REF_NAME\n```", "answer": "```yaml name: postgresql-build-and-push-ghcr\n\non:\n  push:\n    branches:\n      - main\n      - development\n    paths:\n      - 'Dockerfiles/postgresql.Dockerfile'\n      - 'shared/bin/*'\n      - '.trigger_workflow_build'\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  docker:\n    runs-on: ubuntu-22.04\n    permissions:\n      actions: write\n      packages: write\n      contents: read\n    steps:\n      -\n        name: Cancel previous run in progress\n        uses: styfle/cancel-workflow-action@0.11.0\n        with:\n          ignore_sha: true\n          all_but_latest: true\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Extract branch name\n        shell: bash\n        run: echo \"branch=$(echo ${GITHUB_REF#refs/heads/})\" >> $GITHUB_OUTPUT\n        id: extract_branch\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n        with:\n          driver-opts: |\n            image=moby/buildkit:master\n      -\n        name: Log in to registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          file: ./Dockerfiles/postgresql.Dockerfile\n          push: true\n          tags: ghcr.io/${{ github.repository_owner }}/malcolmnetsec/postgresql:${{ steps.extract_branch.outputs.branch }}\n```"}
{"llm_response": "```yaml update:\n  runs-on: ubuntu-latest\n\n  steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n\n    - name: Update Changelog\n      run: |\n        # Add your changelog update logic here\n        echo \"Changelog updated successfully\"\n```", "answer": "```yaml name: \"Update Changelog\"\n\non:\n  release:\n    types: [ released ]\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: main\n\n      - name: Update Changelog\n        uses: stefanzweifel/changelog-updater-action@v1\n        with:\n          latest-version: ${{ github.event.release.name }}\n          release-notes: ${{ github.event.release.body }}\n\n      - name: Commit updated CHANGELOG\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          branch: main\n          commit_message: Update CHANGELOG\n          file_pattern: CHANGELOG.md\n```"}
{"llm_response": "```yaml add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v2\n        - name: Add mockup-required or mockup-available labels\n          run: |\n            if [[ \"$GITHUB_EVENT_LABELS\" == *\"mockup-required\"* ]]; then\n              echo \"Adding mockup-required label\"\n              gh issue create --repo openfoodfacts/openfoodfacts-design --title \"Mockup Required\" --body \"Please provide a mockup for this issue.\"\n            elif [[ \"$GITHUB_EVENT_LABELS\" == *\"mockup-available\"* ]]; then\n              echo \"Adding mockup-available label\"\n              gh issue create --repo openfoodfacts/openfoodfacts-design --title \"Mockup Available\" --body \"This issue now has a mockup available.\"\n            fi\n```", "answer": "```yaml name: Add mockup-required and mockup-available issues to the openfoodfacts-design project\n\non:\n  issues:\n    types:\n      - labeled\n\njobs:\n  add-to-project:\n    name: Add issue to the openfoodfacts-design project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        with:\n          project-url: https://github.com/orgs/openfoodfacts/projects/11\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}\n          labeled: mockups available, needs mockup\n          label-operator: OR\n```"}
{"llm_response": "```yaml\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - 'pylib'\n      - 'requirements.txt'\n      - '.github/workflows/python3.10.yaml'\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - 'pylib'\n      - 'requirements.txt'\n      - '.github/workflows/python3.10.yaml'\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    concurrency:\n      group: ${{ github.ref }}-${{ github.workflow }}\n      cancel-in-progress: true\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.10\n      - name: Install dependencies\n        run: pip install --upgrade pip && pip install -r requirements.txt\n      - name: Run tests\n        run: pytest\n```", "answer": "```yaml #\n#  Author: Hari Sekhon\n#  Date: 2020-02-04 21:40:04 +0000 (Tue, 04 Feb 2020)\n#\n#  vim:ts=2:sts=2:sw=2:et\n#\n#  https://github.com/HariSekhon/DevOps-Bash-tools\n#\n#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback\n#\n#  https://www.linkedin.com/in/HariSekhon\n#\n\n---\nname: Python 3.10\n\non:\n  push:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '**/*.py'\n      - pylib\n      - requirements.txt\n      - .github/workflows/python3.10.yaml\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        required: false\n        default: false\n  schedule:\n    - cron: '0 7 * * *'\n\npermissions:\n  contents: read\n\nconcurrency:\n  group: ${{ github.ref }}-${{ github.workflow }}\n  cancel-in-progress: true\n\njobs:\n  build:\n    # github.event.repository context not available in scheduled workflows\n    #if: github.event.repository.fork == false\n    if: github.repository_owner == 'HariSekhon'\n    name: Python 3.10\n    uses: HariSekhon/GitHub-Actions/.github/workflows/make.yaml@master\n    with:\n      python-version: \"3.10\"\n      caches: apt pip\n      debug: ${{ github.event.inputs.debug }}\n```"}
{"llm_response": "```yaml\nname: npm audit\n\non:\n  - pull_request:\n      branches:\n        - dev\n    - push:\n      branches:\n        - master\n        - npm-audit\n        - fix-node-extension-audit\n\njobs:\n  audit-root:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run npm audit\n        run: npm audit\n\n  audit-extensions:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run npm audit\n        run: npm audit --exts=extension\n\n  audit-lib:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run npm audit\n        run: npm audit --exts=lib\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: npm audit\n\non:\n  pull_request:\n    branches:  \n      - dev\n    paths:\n      - 'lib/**/*'\n      - 'extensions/**/*'\n      - '**/package-lock.json'\n      - '!**.md'\n      - '.github/workflows/npm-audit.yml'\n  push:\n    branches:\n      - 'master'\n      - 'npm-audit'\n      - 'fix-node-extension-audit'\n\nconcurrency:\n  group: audit-${{github.ref}}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  audit-root:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n\n    - name: npm audit (root)\n      run: npm audit --production\n\n  audit-extensions:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n\n    - name: npm audit (node-extensions)\n      working-directory: extensions/msal-node-extensions\n      run: npm audit --production\n\n  audit-lib:\n    runs-on: ubuntu-latest\n    strategy:\n        fail-fast: false\n        matrix:\n          library:\n            - msal-core\n            - msal-common\n            - msal-browser\n            - msal-node\n            - msal-angular\n            - msal-react\n  \n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n\n    - name: npm audit (lib)\n      working-directory: lib/${{ matrix.library }}\n      run: npm audit --production\n```"}
{"llm_response": "```yaml\nname: Build and GH-Page Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Build the project\n        run: npm run build\n      - name: Deploy to GitHub Pages\n        uses: github-pages-deploy-action@v3\n        with:\n          draft: false\n          publish_dir: ./dist\n```", "answer": "```yaml name: Build and GH-Page Deploy\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: ./svelte\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: \"3.9\"\n\n      - name: Install Python Dependencies\n        run: pip install -r requirements.txt\n        working-directory: ./data-collection\n\n      - name: Run data pipeline\n        env:\n          MAL_KEY: ${{ secrets.MAL_KEY }}\n        run: |\n          npm ci\n          npm run layout\n        working-directory: ./data-collection\n\n      - name: Install\n        run: npm ci\n        working-directory: ./svelte\n\n      - name: Build\n        run: |\n          npm run build\n        working-directory: ./svelte\n\n      - name: Deploy to GH Page\n        uses: JamesIves/github-pages-deploy-action@4.1.1\n        with:\n          branch: gh-pages\n          folder: svelte/public\n```"}
{"llm_response": "```yaml changelog-<github.head_ref>-01\nname: Changelog Generator\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  changelog:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: ${{ github.workflow }}-${{ github.head_ref }}\n      parallelism: 1\n      cancel-in-progress: true\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Generate changelog\n      run: ./generate-changelog.sh\n```", "answer": "```yaml # This action requires that any PR targeting the main branch should touch at\n# least one CHANGELOG file. If a CHANGELOG entry is not required, add the \"Skip\n# Changelog\" label to disable this action.\n\nname: changelog\n\non:\n  pull_request:\n    types: [opened, ready_for_review, synchronize, reopened, labeled, unlabeled]\n    branches:\n      - main\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref }}\n  cancel-in-progress: true\n\njobs:\n  changelog:\n    runs-on: ubuntu-latest\n    if: ${{ !contains(github.event.pull_request.labels.*.name, 'dependencies') && !contains(github.event.pull_request.labels.*.name, 'Skip Changelog') && !contains(github.event.pull_request.title, '[chore]')}}\n\n    steps:\n      - name: Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Setup Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19\n      - name: Cache Go\n        id: go-cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/go/bin\n            ~/go/pkg/mod\n          key: changelog-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n\n      - name: Ensure no changes to the CHANGELOG\n        run: |\n          if [[ $(git diff --name-only $(git merge-base origin/main ${{ github.event.pull_request.head.sha }}) ${{ github.event.pull_request.head.sha }} ./CHANGELOG.md) ]]\n          then\n            echo \"The CHANGELOG should not be directly modified.\"\n            echo \"Please add a .yaml file to the ./.chloggen/ directory.\"\n            echo \"See CONTRIBUTING.md for more details.\"\n            echo \"Alternately, add either \\\"[chore]\\\" to the title of the pull request or add the \\\"Skip Changelog\\\" label if this job should be skipped.\"\n            false\n          else\n            echo \"The CHANGELOG was not modified.\"\n          fi\n\n      - name: Ensure ./.chloggen/*.yaml addition(s)\n        run: |\n          if [[ 1 -gt $(git diff --diff-filter=A --name-only $(git merge-base origin/main ${{ github.event.pull_request.head.sha }}) ${{ github.event.pull_request.head.sha }} ./.chloggen | grep -c \\\\.yaml) ]]\n          then\n            echo \"No changelog entry was added to the ./.chloggen/ directory.\"\n            echo \"Please add a .yaml file to the ./.chloggen/ directory.\"\n            echo \"See CONTRIBUTING.md for more details.\"\n            echo \"Alternately, add either \\\"[chore]\\\" to the title of the pull request or add the \\\"Skip Changelog\\\" label if this job should be skipped.\"\n            false\n          else\n            echo \"A changelog entry was added to the ./.chloggen/ directory.\"\n          fi\n\n      - name: Validate ./.chloggen/*.yaml changes\n        run: |\n          make chlog-validate \\\n            || { echo \"New ./.chloggen/*.yaml file failed validation.\"; exit 1; }\n\n      # In order to validate any links in the yaml file, render the config to markdown\n      - name: Render .chloggen changelog entries\n        run: make chlog-preview > changelog_preview.md\n      - name: Install markdown-link-check\n        run: npm install -g markdown-link-check\n      - name: Run markdown-link-check\n        run: |\n          markdown-link-check \\\n            --verbose \\\n            --config .github/workflows/check_links_config.json \\\n            changelog_preview.md \\\n            || { echo \"Check that anchor links are lowercase\"; exit 1; }\n```"}
{"llm_response": "```yaml\nname: Release notes\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Update release draft\n        run: |\n          # Add your commands here to update the release draft\n          echo \"Updating release draft...\"\n```", "answer": "```yaml name: Release notes\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Labeling new issue\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/labeler@v2\n        with:\n          labels: 'bug'\n```", "answer": "```yaml name: Labeling new issue\non:\n  issues:\n      types: ['opened']\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: Renato66/auto-label@v2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          labels-not-allowed: '[\"Falta Informa\u00e7\u00f5es\",\"Request changes\",\"stale\"]'\n```"}
{"llm_response": "```yaml\nname: size\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Check package size\n      run: npm list --depth=0 | grep -oP '\\b\\d+\\.\\d+(\\.\\d+)?' | awk '{total += $1} END {print total}'\n    - name: Output size\n      run: echo \"Total size of packages in this project: ${{ steps.check_package_size.outputs.total }} bytes\"\n```", "answer": "```yaml name: \"size\"\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm install\n    - run: npm test\n    - name: Build and publish package\n      run: |\n        npm run build\n        npm publish --registry=https://registry.npmjs.org/\n```", "answer": "```yaml name: Release\non: push\n\njobs:\n  build:\n    name: Release\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main' && github.repository == 'styled-icons/styled-icons'\n    steps:\n      - uses: actions/checkout@v3.0.2\n        with:\n          fetch-depth: 0\n          persist-credentials: false\n      - uses: pnpm/action-setup@v2.2.2\n        with:\n          version: 6.10.0\n      - uses: actions/setup-node@v3.5.0\n        with:\n          node-version: '14'\n          cache: 'pnpm'\n      - run: pnpm install --frozen-lockfile\n      - uses: changesets/action@master\n        with:\n          publish: pnpm release\n          version: pnpm changeset version\n        env:\n          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}\n          GITHUB_USERNAME: icon-bot\n          GITHUB_EMAIL: ${{ secrets.BOT_GITHUB_EMAIL }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: dependabot-auto-merge\n\non:\n  pull_request:\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Grant GITHUB_TOKEN write access to pull-requests and contents scopes\n        run: |\n          echo \"::set-output name=GITHUB_TOKEN::$(echo $GITHUB_TOKEN | base64)\"\n          echo \"export GITHUB_TOKEN=$(echo $GITHUB_TOKEN | base64)\"\n          echo \"export GITHUB_TOKEN=$(echo $GITHUB_TOKEN | tr -d '\\n')\"\n          echo \"chmod +x ~/.bashrc\"\n          source ~/.bashrc\n          echo \"git config --global user.name 'Dependabot'\"\n          echo \"git config --global user.email 'github-actions[bot]@users.noreply.github.com'\"\n          echo \"git config --global credential.helper store\"\n          git config --global credential.helper cache --timeout=3600\"\n          git config --global push.default simple\n          git config --global url.\"https://github.com/$GITHUB_REPOSITORY.git\".insteadOf \"https://$GITHUB_SERVER:$GITHUB_TOKEN@$GITHUB_SERVER/$GITHUB_REPOSITORY.git\"\n\n      - name: Update dependencies\n        uses: dependabot/action-update-dependencies@v2\n        with:\n          package_manager: composer\n          directory: .\n```", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n\n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"llm_response": "```yaml\nname: Check for incomplete submissions\n\non:\n  issues:\n    types: [opened, labeled, unlabeled]\n\njobs:\n  reaction:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: 'Check for incomplete submissions'\n\non:\n  issues:\n    types: [labeled, unlabeled]\n\njobs:\n  reaction:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/label-actions@v2\n        with:\n          github-token: ${{ github.token }}\n          process-only: 'issues'\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 28 * ? Wed'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Setup CodeQL\n      uses: github/codeql-action/setup-codeql@v2\n      with:\n        version: '2.7.0'\n\n    - name: Create CodeQL database\n      uses: github/codeql-action/create-codeql-database@v2\n      with:\n        path-to-repo: .\n        database-location: ./codeql-results/database\n\n    - name: Analyze with CodeQL\n      uses: github/codeql-action/run-scan@v2\n      with:\n        database-location: ./codeql-results/database\n        output-dir: ./codeql-results/sarif\n\n    - name: Upload SARIF report\n      uses: github/codeql-action/upload-sarif@v2\n      with:\n        sarif-path: ./codeql-results/sarif/sarif-report.sarif\n        target-url: https://github.com/<username>/<repository>/blob/main/.github/workflows/CodeQL.yml\n        title: CodeQL Analysis\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '28 12 * * 3'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml bot:\n  jobs:\n    merge:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Node.js\n          uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - run: npm install\n        - run: npm test\n```", "answer": "```yaml name: bot\n\non:\n  pull_request:\n    types: [labeled]\n\njobs:\n  merge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jacogr/action-merge@3b4b49af8a8644bf5cbb5409ee236abe04eeb1b0\n        with:\n          checks: build,lint,test\n          labels: -auto\n          strategy: squash\n          token: ${{ secrets.GH_PAT_BOT }}\n```"}
{"llm_response": "```yaml\nname: Lint PR\n\non:\n  pull_request:\n    types: [created, edited, opened, reopened]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Validate title\n        run: |\n          if [[ ! $GITHUB_EVENT_TITLE =~ ^[A-Z][a-z]* ]]; then\n            echo \"Title must start with a capital letter.\"\n            exit 1\n          fi\n```", "answer": "```yaml name: Lint PR\non:\n  pull_request_target:\n    types: [ opened, edited, synchronize, reopened ]\n\njobs:\n  validate:\n    name: Validate title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        with:\n          types: chore docs fix feat test misc\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml release-please:\non:\n  push:\n    branches:\n      - main\n\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run release-please\n        run: npx release-please\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - main\nname: release-please\njobs:\n  release-please:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: GoogleCloudPlatform/release-please-action@v2\n        id: release\n        with:\n          release-type: node\n          package-name: test-release-please\n      # The logic below handles the npm publication:\n      - uses: actions/checkout@v3\n        # these if statements ensure that a publication only occurs when\n        # a new release is created:\n        if: ${{ steps.release.outputs.release_created }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 12\n          registry-url: 'https://registry.npmjs.org'\n        if: ${{ steps.release.outputs.release_created }}\n      - run: npm ci\n        if: ${{ steps.release.outputs.release_created }}\n      - run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n        if: ${{ steps.release.outputs.release_created }}\n\n      # Tweets out release announcement\n      - run: 'npx @humanwhocodes/tweet \"Config Array v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }} has been released!\\n\\nhttps://github.com/humanwhocodes/config-array/releases/tag/v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}\"'\n        if: ${{ steps.release.outputs.release_created }}\n        env:\n          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}\n          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}\n          TWITTER_ACCESS_TOKEN_KEY: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}\n          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}\n```"}
{"llm_response": "```yaml update_pr:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v2\n        - name: Update Pull Request with Preview Link\n          run: |\n            # Ensure that the preview link is up-to-date\n            gh pr edit ${{ github.event.pull_request.number }} --base main --title \"Updated PR Title\" --body \"This PR has been updated with a new preview link.\"\n            # Generate the preview link\n            gh pr view --web\n            # Optionally, save the preview link for later use\n            gh pr view --web > preview_link.txt\n```", "answer": "```yaml name: \"Update Pull Request with Preview Link\"\n\non: pull_request_target\n\njobs:\n  update_pr:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: tzkhan/pr-update-action@v2\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        head-branch-regex: '.*'\n        title-template: ''\n        body-template: '[Preview Tests](https://deploy-preview-${{ github.event.pull_request.number }}--aria-at.netlify.app)'\n        body-update-action: prefix\n        body-uppercase-head-match: false\n```"}
{"llm_response": "```yaml\nname: Release Drafter\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Update release draft\n      uses: github-actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n      run: |\n        pip install --upgrade pip\n        pip install release-drafter\n        ./release-drafter --draft-file .github/release/draft.md --repo-url https://github.com/<username>/<repository>\n```", "answer": "```yaml name: Release Drafter\n\non:\n  push:\n    # branches to consider in the event; optional, defaults to all\n    branches:\n      - main\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      # Drafts your next Release notes as Pull Requests are merged into \"main\"\n      - uses: release-drafter/release-drafter@v5.15.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: daily\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup Julia\n        uses: julia-language/julia-action@v1\n\n      - name: Run Julia script\n        run: |\n          julia --project=. your_script.jl\n```", "answer": "```yaml name: daily\non:\n  schedule:\n    - cron: '00 00 * * *'\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: julia-actions/setup-julia@latest\n        with:\n          version: 1.3\n      - run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - run: julia -e 'using CompatHelper; CompatHelper.main()'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Delete PR documentation\n\non:\n  pull_request_closed:\n\njobs:\n  delete:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n\n      - name: Delete PR documentation\n        run: |\n          python delete_pr_documentation.py\n```", "answer": "```yaml name: Delete PR documentation\n\non:\n  pull_request:\n    types: [ closed ]\n\n\njobs:\n  delete:\n    uses: huggingface/doc-builder/.github/workflows/delete_doc_comment.yml@main\n    with:\n      pr_number: ${{ github.event.number }}\n      package: optimum\n```"}
{"llm_response": "```yaml WIP:\non:\n  - pull_request: open | labeled\n    branches:\n      - main\n\njobs:\n  wip:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: pip install --upgrade pip && pip install -r requirements.txt\n      - name: Run tests\n        run: pytest\n```", "answer": "```yaml name: WIP\non:\n  pull_request:\n    types: [ opened, synchronize, reopened, edited ]\n\njobs:\n  wip:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    steps:\n      - uses: wip/action@v1.1.0\n```"}
{"llm_response": "```yaml UploadReports:\non:\n  push:\n    branches:\n      - main\n\njobs:\n  upload:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install dependencies\n      run: |\n        stack setup\n        stack install\n    - name: Upload reports\n      run: |\n        ./scripts/upload-reports.sh\n```", "answer": "```yaml name: Upload Reports\n\non:\n  workflow_run:\n    workflows: [\"Loadtest\"]\n    types:\n      - completed\n\njobs:\n  upload:\n    name: Loadtest\n    permissions:\n      checks: write\n    runs-on: ubuntu-latest\n    if: ${{ github.event.workflow_run.conclusion == 'success' }}\n    steps:\n      - name: Download from Artifacts\n        uses: dawidd6/action-download-artifact@v2\n        with:\n          workflow: ${{ github.event.workflow.name }}\n          run_id: ${{github.event.workflow_run.id }}\n          name: loadtest.md\n          path: artifacts\n      - name: Upload to GitHub Checks\n        uses: LouisBrunner/checks-action@v1.5.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          sha: ${{ github.event.workflow_run.head_sha }}\n          name: Loadtest Results\n          conclusion: neutral\n          output: |\n            {\"summary\":\"\"}\n          output_text_description_file: artifacts/loadtest.md\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 10 * * Fri'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up CodeQL\n        uses: github/codeql-action/setup@v1\n\n      - name: Initialize CodeQL database\n        uses: github/codeql-action/init@v1\n\n      - name: Analyze with CodeQL\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n  schedule:\n    - cron: '0 10 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Override automatic language detection by changing the below list\n        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']\n        language: ['python']\n        # Learn more...\n        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file. \n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda https://git.io/JvXDl\n\n    # \u270f\ufe0f If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml R-CMD-check\non:\n  push:\n    branches:\n      - main\n      - master\n      - v2-branch\n  pull_request:\n    branches:\n      - main\n      - master\n      - v2-branch\n\njobs:\n  R-CMD-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          npm install\n      - name: Run R CMD check\n        run: |\n          Rscript -e \"devtools::check()\"\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master, v2-branch]\n  pull_request:\n    branches: [main, master, v2-branch]\n\nname: R-CMD-check\n\njobs:\n  R-CMD-check:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n      R_KEEP_PKG_SOURCE: yes\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: ./setup-r\n        with:\n          use-public-rspm: true\n\n      - uses: ./setup-r-dependencies\n        with:\n          extra-packages: any::rcmdcheck\n          needs: check\n\n      - uses: ./check-r-package\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v[0-9]+.*'\n\njobs:\n  create-release:\n    runs-on: ubuntu-latest\n    defaults:\n      shell: bash\n\n    env:\n      CARGO_INCREMENTAL: \"0\"\n      CARGO_NET_RETRY: \"10\"\n      CARGO_TERM_COLOR: \"always\"\n      RUST_BACKTRACE: \"1\"\n      RUSTFLAGS: \"-D warnings\"\n      RUSTUP_MAX_RETRIES: \"10\"\n\n    steps:\n      # Add your release steps here\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    tags: ['v[0-9]+.*']\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  CARGO_TERM_COLOR: always\n  RUST_BACKTRACE: 1\n  RUSTFLAGS: -D warnings\n  RUSTUP_MAX_RETRIES: 10\n\ndefaults:\n  run:\n    shell: bash\n\njobs:\n  create-release:\n    if: github.repository_owner == 'openrr'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dtolnay/rust-toolchain@stable\n      - run: cargo package\n      - uses: taiki-e/create-gh-release-action@v1\n        with:\n          branch: main\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      - run: cargo publish\n        env:\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n```"}
{"llm_response": "```yaml Auto Start CI:\non:\n  schedule:\n    - cron: '*/5 * * *'\njobs:\n  get-prs-for-ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n  start-ci:\n    runs-on: ubuntu-latest\n    env:\n      NODE_VERSION: 16\n    needs: get-prs-for-ci\n    strategy:\n      max-concurrent: 1\n    steps:\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Auto Start CI\n\non:\n  schedule:\n    # Runs every five minutes (fastest the scheduler can run). Five minutes is\n    # optimistic, it can take longer to run.\n    # To understand why `schedule` is used instead of other events, refer to\n    # ./doc/contributing/commit-queue.md\n    - cron: '*/5 * * * *'\n\nconcurrency: ${{ github.workflow }}\n\n# todo (node-fetch not working on 18, waiting for node-core-utils to fix)\nenv:\n  NODE_VERSION: 16\n\npermissions:\n  contents: read\n\njobs:\n  get-prs-for-ci:\n    permissions:\n      pull-requests: read\n    if: github.repository == 'nodejs/node'\n    runs-on: ubuntu-latest\n    outputs:\n      numbers: ${{ steps.get_prs_for_ci.outputs.numbers }}\n    steps:\n      - name: Get Pull Requests\n        id: get_prs_for_ci\n        run: >\n          numbers=$(gh pr list \\\n                  --repo ${{ github.repository }} \\\n                  --label 'request-ci' \\\n                  --json 'number' \\\n                  -t '{{ range . }}{{ .number }} {{ end }}' \\\n                  --limit 100)\n          echo \"numbers=$numbers\" >> $GITHUB_OUTPUT\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n  start-ci:\n    permissions:\n      contents: read\n      pull-requests: write\n    needs: get-prs-for-ci\n    if: needs.get-prs-for-ci.outputs.numbers != ''\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Install node-core-utils\n        run: npm install -g node-core-utils\n\n      - name: Setup node-core-utils\n        run: |\n          ncu-config set username ${{ secrets.JENKINS_USER }}\n          ncu-config set token \"${{ secrets.GH_USER_TOKEN }}\"\n          ncu-config set jenkins_token ${{ secrets.JENKINS_TOKEN }}\n          ncu-config set owner \"${{ github.repository_owner }}\"\n          ncu-config set repo \"$(echo ${{ github.repository }} | cut -d/ -f2)\"\n\n      - name: Start the CI\n        run: ./tools/actions/start-ci.sh ${{ needs.get-prs-for-ci.outputs.numbers }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Deploy\n\non:\n  push:\n    branches: [ main ]\n  tags:\n    tags: [ v* ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build project\n        run: npm run build\n\n      - name: Upload artifacts\n        if: always()\n        uses: actions/upload-artifact@v2\n        with:\n          name: build-artifacts\n          path: dist\n```", "answer": "```yaml name: Deploy\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Dashboard code\n      uses: actions/checkout@v3\n    - uses: pnpm/action-setup@v2\n      with:\n        version: latest\n    - name: Setup Nodejs\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18.x'\n        cache: pnpm\n    - name: Install package and build\n      run: |\n        pnpm install --frozen-lockfile\n        pnpm build\n    - name: Deploy\n      uses: crazy-max/ghaction-github-pages@v3\n      with:\n        target_branch: gh-pages\n        build_dir: dist\n        fqdn: clash.razord.top\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Backport Pull Request\n\non:\n  - push:\n      branches: [ main ]\n  - pull_request:\n      types: [ opened, labeled, merged ]\n\njobs:\n  backport:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v2\n      with:\n        ruby-version: '3.0'\n    - name: Install dependencies\n      run: bundle install\n    - name: Backport PR\n      run: ./scripts/backport_pr.sh\n```", "answer": "```yaml on:\n  pull_request_target:\n    types: [\"labeled\", \"closed\"]\n\njobs:\n  backport:\n    name: Backport PR\n    runs-on: ubuntu-latest\n    if: |\n      github.event.pull_request.merged == true\n      && contains(github.event.pull_request.labels.*.name, 'Needs Backport')\n      && (\n        (github.event.action == 'labeled' && github.event.label.name == 'Needs Backport')\n        || (github.event.action == 'closed')\n      )\n    steps:\n      - name: Backport Action\n        uses: sqren/backport-github-action@v8.9.3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          auto_backport_label_prefix: Needs Backport-\n          add_original_reviewers: true\n\n      - name: Info log\n        if: ${{ success() }}\n        run: cat ~/.backport/backport.info.log\n\n      - name: Debug log\n        if: ${{ failure() }}\n        run: cat ~/.backport/backport.debug.log\n```"}
{"llm_response": "```yaml\nname: Pull Request\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  buildTest:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java_version: [8, 11]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK ${{ matrix.java_version }}\"\n        uses: actions/setup-java@v2\n        with:\n          java-version: ${{ matrix.java_version }}\n      - name: Build project\n        run: mvn clean install\n\n  Check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run tests\n        run: mvn test\n```", "answer": "```yaml name: PullRequest\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  buildTest:\n    name: Build & Test JDK ${{ matrix.java_version }}\n    runs-on: macOS-latest\n    strategy:\n      matrix:\n        java_version: [ 11 ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install JDK ${{ matrix.java_version }}\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: ${{ matrix.java_version }}\n      - name: Install Android SDK\n        uses: malinskiy/action-android/install-sdk@release/0.1.2\n      - name: Build project\n        run: ./gradlew assembleDebug\n\n  Check:\n    name: Check\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        java_version: [ 11 ]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Install JDK ${{ matrix.java_version }}\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: ${{ matrix.java_version }}\n      - name: Install Android SDK\n        uses: malinskiy/action-android/install-sdk@release/0.1.2\n      - name: Code checks\n        run: ./gradlew check\n```"}
{"llm_response": "```yaml\nname: NodeJS\n\non:\n  push:\n    branches: [ main ]\n    tags: [ v* ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  Build:\n    runs-on: ubuntu-latest\n    env:\n      BUILD_TYPE: Release\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install\n      - run: npm test\n```", "answer": "```yaml name: NodeJS\non: [push, pull_request]\nenv:\n  BUILD_TYPE: Release \njobs:\n  Build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Latest Swig\n        run: git clone https://github.com/swig/swig.git && cd swig && ./autogen.sh && ./configure && make -j3 && sudo make install && sudo rm -rf /usr/bin/swig*\n      - name: Setup cmake \n        uses: jwlawson/actions-setup-cmake@v1.12\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14\n      - name: NPM Install\n        run: npm install\n      - name: NPM Test\n        run: npm test\n```"}
{"llm_response": "```yaml\nname: Clang format linting\n\non:\n  pull_request:\n    branches:\n      - develop\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up clang-format\n      uses: vijayavishwanath/setup-clangformat@v0.3.1\n      with:\n        version: '14'\n    - name: Run clang-format\n      run: |\n        clang-format -i --style=file .\n```", "answer": "```yaml # Action to allow clang format linting at the files changed in the PR\n\non:\n  pull_request:\n    branches:\n    - develop\n\nname: Clang format linting\njobs:\n\n# Checkout OpenMS\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n# Get files changed in the PR\n    - name: Get changed files\n      id: changed_files\n      uses: tj-actions/changed-files@v33\n      with:\n          path: .\n          files: |\n            **/*.h\n            **/*.cpp\n\n# Perform linting\n    - name: Use clang format linting\n      if: steps.changed_files.outputs.any_modified == 'true'\n      uses: DoozyX/clang-format-lint-action@v0.14\n      with:\n        source: ${{ steps.changed_files.outputs.all_changed_files }}\n        clangFormatVersion: 13\n```"}
{"llm_response": "```yaml\nname: Update Product Schema\n\non:\n  - push\n  - pull_request\n  - schedule\n\njobs:\n  update-fonts:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    env:\n      GIT_AUTHOR_EMAIL: \"94923726+googleforcreators-bot@users.noreply.github.com\"\n      GIT_AUTHOR_NAME: \"googleforcreators-bot\"\n      GIT_COMMITTER_EMAIL: \"94923726+googleforcreators-bot@users.noreply.github.com\"\n      GIT_COMMITTER_NAME: \"googleforcreators-bot\"\n\n    steps:\n      # Add your steps here\n```", "answer": "```yaml name: Update Product Schema\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 12 * * 1'\n\npermissions:\n  contents: read\n\nenv:\n  GIT_AUTHOR_EMAIL: 94923726+googleforcreators-bot@users.noreply.github.com\n  GIT_AUTHOR_NAME: googleforcreators-bot\n  GIT_COMMITTER_EMAIL: 94923726+googleforcreators-bot@users.noreply.github.com\n  GIT_COMMITTER_NAME: googleforcreators-bot\n\njobs:\n  update-fonts:\n    name: Update Product Schema\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n        with:\n          token: ${{ secrets.GOOGLEFORCREATORS_BOT_TOKEN }}\n\n      - name: Update Product Schema\n        run: |\n          curl -O -f https://raw.githubusercontent.com/ampproject/amphtml/main/examples/amp-story/shopping/product.schema.json\n          cp product.schema.json packages/e2e-tests/src/specs/editor/shopping/schema.json\n          mv product.schema.json tests/phpunit/integration/data/schema.json\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@ad43dccb4d726ca8514126628bec209b8354b6dd\n        with:\n          token: ${{ secrets.GOOGLEFORCREATORS_BOT_TOKEN }}\n          commit-message: Update Product Schema\n          title: Update Product Schema\n          body: |\n            Fetched the current [product JSON schema](https://github.com/ampproject/amphtml/blob/main/examples/amp-story/shopping/product.schema.json) for `<amp-story-shopping>` to update it in the project.\n          branch: update/product-schema\n          labels: Dependencies\n```"}
{"llm_response": "```yaml ASF-docker-publish-latest:\n  on:\n    push:\n      tags:\n        - latest\n      branches-ignore:\n        - main\n    pull_request:\n      labels:\n        - 'release'\n  jobs:\n    main:\n      runs-on: ubuntu-latest\n      env:\n        ASF_PRIVATE_SNK: ${{ secrets.ASF_PRIVATE_SNK }}\n        PLATFORMS: linux/amd64,linux/arm,linux/arm64\n        TAG: latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Set up Docker buildx\n          uses: docker/setup-buildx-action@v2\n        - name: Build Docker image\n          run: |\n            docker buildx create --name mybuilder\n            docker buildx build --platforms ${{ env.PLATFORMS }} --tag ${{ env.TAG }} . --build-arg ASF_PRIVATE_SNK=${{ env.ASF_PRIVATE_SNK }}\n        - name: Push Docker image\n          run: |\n            docker login --username=your_username --password-stdin your_password\n            docker push ${{ env.TAG }}\n```", "answer": "```yaml name: ASF-docker-publish-latest\n\non:\n  release:\n    types: [released]\n\nenv:\n  ASF_PRIVATE_SNK: ${{ secrets.ASF_PRIVATE_SNK }}\n  PLATFORMS: linux/amd64,linux/arm,linux/arm64\n  TAG: latest\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v3.1.0\n      with:\n        submodules: recursive\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v2.2.1\n\n    - name: Login to ghcr.io\n      uses: docker/login-action@v2.1.0\n      with:\n        registry: ghcr.io\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Login to DockerHub\n      uses: docker/login-action@v2.1.0\n      with:\n        username: ${{ secrets.DOCKERHUB_USERNAME }}\n        password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n    - name: Prepare private key for signing\n      shell: sh\n      run: |\n        set -eu\n\n        if [ -n \"${ASF_PRIVATE_SNK-}\" ]; then\n            echo \"$ASF_PRIVATE_SNK\" | base64 -d > \"resources/ArchiSteamFarm.snk\"\n        fi\n\n    - name: Prepare environment outputs\n      shell: sh\n      run: |\n        set -eu\n\n        echo \"FIXED_TAG=$(echo ${{ github.ref }} | cut -d '/' -f 3)\" >> \"$GITHUB_ENV\"\n        echo \"DATE_ISO8601=$(date --iso-8601=seconds --utc)\" >> \"$GITHUB_ENV\"\n        echo \"GHCR_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')\" >> \"$GITHUB_ENV\"\n        echo \"DH_REPOSITORY=$(echo ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')\" >> \"$GITHUB_ENV\"\n\n    - name: Build and publish Docker image from Dockerfile.Service\n      uses: docker/build-push-action@v3.2.0\n      with:\n        context: .\n        file: Dockerfile.Service\n        platforms: ${{ env.PLATFORMS }}\n        build-args: STEAM_TOKEN_DUMPER_TOKEN=${{ secrets.STEAM_TOKEN_DUMPER_TOKEN }}\n        labels: |\n          org.opencontainers.image.created=${{ env.DATE_ISO8601 }}\n          org.opencontainers.image.version=${{ env.FIXED_TAG }}\n          org.opencontainers.image.revision=${{ github.sha }}\n        tags: |\n          ghcr.io/${{ env.GHCR_REPOSITORY }}:${{ env.TAG }}\n          ${{ env.DH_REPOSITORY }}:${{ env.TAG }}\n        push: true\n```"}
{"llm_response": "```yaml version:\n  on:\n    push:\n      branches-ignore:\n        - main\n    pull_request:\n      branches-ignore:\n        - main\n    workflow_dispatch:\n  jobs:\n    version:\n      runs-on: ubuntu-latest\n      steps:\n      - uses: actions/checkout@v2\n      - name: Set up C++\n        run: |\n          sudo apt-get update && sudo apt-get install build-essential cmake g++ libssl-dev zlib1g-dev -y\n      - name: Create directory\n        run: mkdir version\n      - name: Change directory\n        run: cd version\n      - name: Checkout code\n        run: git clone https://github.com/<username>/<repository>.git .\n      - name: Get release type\n        run: echo ${{ github.event.inputs.type-this-input }} > release_type.txt\n      - name: Update version\n        run: |\n          if [ \"$release_type\" == \"major\" ]; then\n            echo \"Incrementing major version\"\n            sed -i 's/\\([0-9]\\+\\)\\.\\([0-9]\\+\\)\\.\\([0-9]\\+\\)/\\1+\\1/' version.cpp\n          elif [ \"$release_type\" == \"minor\" ]; then\n            echo \"Incrementing minor version\"\n            sed -i 's/\\([0-9]\\+\\)\\.\\([0-9]\\+\\)\\.\\([0-9]\\+\\)/\\1.\\2+\\1/' version.cpp\n          else\n            echo \"Incrementing patch version\"\n            sed -i 's/\\([0-9]\\+\\)\\.\\([0-9]\\+\\)\\.\\([0-9]\\+\\)/\\1.\\2.\\3+\\1/' version.cpp\n          fi\n      - name: Commit changes\n        run: |\n          git add version.cpp\n          git commit -m \"Update version to $release_type\"\n      - name: Push changes\n        run: |\n          git push origin main\n```", "answer": "```yaml name: version\non:\n  workflow_dispatch:\n    inputs:\n      type:\n        description: 'Release Type'\n        required: true\n        default: 'patch'\n        type: choice\n        options:\n          - major\n          - minor\n          - patch\njobs:\n  version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GH_PAT }}\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '16'\n      - name: Set Git user\n        run: |\n          git config user.name 'github-actions[bot]'\n          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'\n      - run: npm version ${{ github.event.inputs.type }}\n      - run: git push --follow-tags\n      - run: echo \"VERSION=$(npm -s run env echo '$npm_package_version')\" >> $GITHUB_ENV\n      - name: Create Release Notes\n        uses: actions/github-script@v6\n        with:\n          script: |\n            await github.request(`POST /repos/${{ github.repository }}/releases`, {\n              draft: true,\n              generate_release_notes: true,\n              name: \"${{ env.VERSION }}\",\n              tag_name: \"v${{ env.VERSION }}\"\n            });\n```"}
{"llm_response": "```yaml\nname: Pull Request Docs Check\n\non:\n  push:\n    branches:\n      - master\n      - release/*\n  pull_request:\n    branches:\n      - master\n      - release/*\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Maven\n        run: |\n          sudo apt update && sudo apt install -y maven\n      - name: Run Javadoc\n        run: mvn javadoc:javadoc\n```", "answer": "```yaml name: \"Pull Request Docs Check\"\non:\n  push:\n    branches:\n    - master\n    - release/*\n  pull_request:\n    branches:\n    - master\n    - release/*\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3\n    - uses: ammaraskar/sphinx-action@8b4f60114d7fd1faeba1a712269168508d4750d2 # tag=0.4\n      with:\n        docs-folder: \"docs/\"\n```"}
{"llm_response": "```yaml SwiftLint:\n  name: SwiftLint\n  on:\n    pull_request:\n      paths-ignore:\n        - '**/.gitignore'\n        - '**/Podfile.lock'\n      paths:\n        - '**/*.swift'\n  jobs:\n    SwiftLint:\n      runs-on: macOS-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Xcode\n          uses: actions/setup-xcode@v2\n          with:\n            xcode-version: '13.4'\n        - name: Install dependencies\n          run: swift package resolve\n        - name: Run SwiftLint\n          run: swiftlint lint\n```", "answer": "```yaml name: SwiftLint\n\non:\n  pull_request:\n    paths:\n      - '.github/workflows/swiftlint.yml'\n      - '.swiftlint.yml'\n      - '**/*.swift'\n\njobs:\n  SwiftLint:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v1\n        - name: GitHub Action for SwiftLint\n          uses: norio-nomura/action-swiftlint@3.2.1\n\n```"}
{"llm_response": "```yaml\nname: Rust\n\non:\n  push:\n    branches-ignore: [main]\n  pull_request:\n    paths:\n      - .github/workflows/rust.yml\n      - Cargo.lock\n      - **/Cargo.toml\n      - justfile\n      - deny.toml\n      - **/*.rs\n      - policy-*/*.dockerfile\n      - rust-toolchain\n\npermissions:\n  contents: read\n\nenv:\n  CARGO_INCREMENTAL: \"0\"\n  CARGO_NET_RETRY: \"10\"\n  PROTOC_NO_VENDOR: \"1\"\n  RUST_BACKTRACE: \"short\"\n  RUSTUP_MAX_RETRIES: \"10\"\n\njobs:\n  audit:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n  fmt:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Apply formatting changes\n        run: cargo fmt --all\n\n  clippy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Apply Clippy checks\n        run: cargo clippy --all\n\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Check code quality\n        run: cargo check\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run tests\n        run: cargo test\n\n  rust-toolchain:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Rust toolchain\n        run: curl https://sh.rustup.rs | sh -s $(cat rust-toolchain)\n```", "answer": "```yaml name: Rust\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/rust.yml\n      - Cargo.lock\n      - '**/Cargo.toml'\n      - justfile\n      - deny.toml\n      - '**/*.rs'\n      - policy-*/*.dockerfile\n      - rust-toolchain\n\npermissions:\n  contents: read\n\nenv:\n  CARGO_INCREMENTAL: 0\n  CARGO_NET_RETRY: 10\n  PROTOC_NO_VENDOR: 1\n  RUST_BACKTRACE: short\n  RUSTUP_MAX_RETRIES: 10\n\njobs:\n  audit:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        checks:\n          - advisories\n          - bans licenses sources\n    # Prevent sudden announcement of a new advisory from failing Ci.\n    continue-on-error: ${{ matrix.checks == 'advisories' }}\n    steps:\n    - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n    - uses: EmbarkStudios/cargo-deny-action@7257a18a9c2fe3f92b85d41ae473520dff953c97\n      with:\n        command: check ${{ matrix.checks }}\n\n  fmt:\n    timeout-minutes: 5\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just rs-check-fmt\n\n  clippy:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just rs-fetch\n      - run: just rs-clippy\n      - run: just rs-doc --no-deps\n\n  check:\n    timeout-minutes: 20\n    runs-on: ubuntu-latest\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just rs-fetch\n      - run: just rs-check-dirs\n\n  test:\n    name: test\n    runs-on: ubuntu-latest\n    timeout-minutes: 15\n    container: ghcr.io/linkerd/dev:v30-rust\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: just rs-fetch\n      - run: just rs-test-build\n      - run: just rs-test\n\n  rust-toolchain:\n    name: rust toolchain\n    runs-on: ubuntu-latest\n    timeout-minutes: 2\n    steps:\n      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - run: |\n          ex=0\n\n          # Check this workflow against the version in rust-toolchain.\n          versions=$(sed -nE 's|.*docker://(.*/)?rust:([^ #]+).*|\\2|p' .github/workflows/*)\n          for mismatch in $(echo \"$versions\" | grep -vF \"$(cat rust-toolchain)\" || true) ; do\n            echo \"::error file=.github/workflows/rust.yml::Workflow uses incorrect rust version(s): $mismatch\"\n            ex=$((ex + 1))\n          done\n\n          # Check the policy-controller dockerfiles workflow against the version\n          # in rust-toolchain.\n          for f in policy-controller/*.dockerfile ; do\n            versions=$(sed -nE 's|ARG RUST_IMAGE=(.*/)?rust:([^ #]+).*|\\2|p' \"$f\")\n            for mismatch in $(echo \"$versions\" | grep -vF \"$(cat rust-toolchain)\" || true) ; do\n              echo \"::error file=\\\"$f\\\"::$f uses incorrect rust version(s): $mismatch\"\n              ex=$((ex + 1))\n            done\n          done\n\n          exit $ex\n```"}
{"llm_response": "```yaml\nname: Bot Changelog\n\non:\n  pull_request:\n    labels:\n      - \"bot-changelog\"\n\njobs:\n  generate_changelog:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip setuptools wheel\n        pip install requests\n\n    - name: Generate changelog\n      run: |\n        python generate_changelog.py\n        git add CHANGELOG.md\n        git commit -m \"Update changelog\"\n        git push origin main\n\n    - name: Grant permissions\n      run: |\n        gh auth login --github-token ${{ secrets.GITHUB_TOKEN }}\n        gh repo set-permissions my-repo --all --write --read --public\n```", "answer": "```yaml # **what?**\n# When bots create a PR, this action will add a corresponding changie yaml file to that\n# PR when a specific label is added.\n#\n# The file is created off a template:\n#\n# kind: <per action matrix>\n# body: <PR title>\n# time: <current timestamp>\n# custom:\n#   Author: <PR User Login (generally the bot)>\n#   Issue: 4904\n#   PR: <PR number>\n#\n# **why?**\n# Automate changelog generation for more visability with automated bot PRs.\n#\n# **when?**\n# Once a PR is created, label should be added to PR before or after creation. You can also\n#  manually trigger this by adding the appropriate label at any time.\n#\n# **how to add another bot?**\n# Add the label and changie kind to the include matrix.  That's it!\n#\n\nname: Bot Changelog\n\non:\n  pull_request:\n    # catch when the PR is opened with the label or when the label is added\n    types: [labeled]\n\npermissions:\n  contents: write\n  pull-requests: read\n\njobs:\n  generate_changelog:\n    strategy:\n      matrix:\n        include:\n          - label: \"dependencies\"\n            changie_kind: \"Dependency\"\n          - label: \"snyk\"\n            changie_kind: \"Security\"\n    runs-on: ubuntu-latest\n\n    steps:\n\n    - name: Create and commit changelog on bot PR\n      if: ${{ contains(github.event.pull_request.labels.*.name, matrix.label) }}\n      id: bot_changelog\n      uses: emmyoop/changie_bot@v1.0.1\n      with:\n        GITHUB_TOKEN: ${{ secrets.FISHTOWN_BOT_PAT }}\n        commit_author_name: \"Github Build Bot\"\n        commit_author_email: \"<buildbot@fishtownanalytics.com>\"\n        commit_message: \"Add automated changelog yaml from template for bot PR\"\n        changie_kind: ${{ matrix.changie_kind }}\n        label: ${{ matrix.label }}\n        custom_changelog_string: \"custom:\\n  Author: ${{ github.event.pull_request.user.login }}\\n  Issue: 4904\\n  PR: ${{ github.event.pull_request.number }}\"\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - v*\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Composer\n      uses: shivammathur/setup-composer@v2\n      with:\n        composer-version: '3.6'\n\n    - name: Install dependencies\n      run: composer install --prefer-dist --optimize-autoloader\n\n    - name: Run tests\n      run: vendor/bin/phpunit\n\n    - name: Create release\n      uses: github-actions/create-release@v4\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tag_name: ${{ github.ref }}\n        release_name: \"Version ${{ github.ref }}\"\n        body: \"This is a release.\"\n        draft: false\n        prerelease: false\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - \"v*\"\n\njobs:\n  release:\n    name: Prepare & Create Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v1\n\n      - name: Setup PHP\n        uses: shivammathur/setup-php@v2\n        with:\n          php-version: 8.1\n          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick\n          tools: composer:v2\n\n      - name: Install NPM Dependencies\n        run: npm install\n\n      - name: Install Composer Dependencies\n        run: composer install\n\n      - name: Compile assets\n        run: npm run production\n\n      - name: Create zip\n        run: cd resources && tar -czvf dist.tar.gz dist\n\n      - name: Get Changelog\n        id: changelog\n        uses: statamic/changelog-action@v1\n        with:\n          version: ${{ github.ref }}\n\n      - name: Create release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          body: ${{ steps.changelog.outputs.text }}\n          prerelease: ${{ contains(github.ref, '-beta') }}\n\n      - name: Upload zip to release\n        uses: actions/upload-release-asset@v1.0.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./resources/dist.tar.gz\n          asset_name: dist.tar.gz\n          asset_content_type: application/tar+gz\n\n      - name: Comment on related issues\n        uses: duncanmcclean/post-release-comments@v1.0.6\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          version: ${{ github.ref }}\n          changelog: ${{ steps.changelog.outputs.text }}\n```"}
{"llm_response": "```yaml system-tests:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.15'\n    - name: Build and test\n      run: |\n        go build -o ./bin/system_tests\n        ./bin/system_tests\n```", "answer": "```yaml name: System Tests\non:\n  push:\n    branches: [ 'master', 'dev', 'hotfix/*', 'release/*', 'feature/*', 'fix/*' ]\njobs:\n  # Run system tests when the PR is no longer a draft\n  system-tests:\n    if: github.event.pull_request.draft == false\n    name: System Tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run System Tests\n        uses: felixp8/dispatch-and-wait@v0.1.0\n        with:\n          token: ${{ secrets.GH_TOKEN }}\n          owner: sqreen\n          repo: AgentGoTests\n          event_type: go-agent-commit\n          client_payload: '{\"ref\": \"${{ github.ref }}\", \"sha\": \"${{ github.sha }}\"}'\n          wait_time: 10\n          max_time: 600```"}
{"llm_response": "```yaml\nname: Warn and close stale issues\n\non:\n  schedule:\n    - cron: '0 3 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run linting and tests\n        run: npm test\n\n      - name: Check for stale issues\n        uses: actions/labeler@v2\n        with:\n          labels-to-add: stale\n          labels-to-remove: open\n\n      - name: Close stale issues\n        if: github.event.schedule.event_type == 'cron'\n        run: |\n          gh issue list --labels stale --state closed --json number | xargs gh issue close\n```", "answer": "```yaml name: Warn and close stale issues\n\non:\n  schedule:\n    - cron: 0 15 * * *\n\njobs:\n  stale:\n    name: Warn and close stale issues\n\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/stale@v5\n        with:\n          days-before-issue-stale: 30\n          days-before-pr-stale: -1\n          days-before-issue-close: 7\n          days-before-pr-close: -1\n          stale-issue-message: This issue is stale because it has been open for 30 days with no activity.\n          close-issue-message: This issue was closed because it has been inactive for 7 days since being marked as stale.\n          stale-issue-label: stale\n          exempt-issue-labels: bug, in progress, to do\n```"}
{"llm_response": "```yaml\nname: Update dependencies\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * Sun'\n\njobs:\n  update_deps:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Disable GITHUB_TOKEN permissions\n        run: |\n          echo \"Disabling GITHUB_TOKEN permissions...\"\n          echo \"GITHUB_TOKEN=disable\" >> $GITHUB_ENV\n\n      - name: Build and publish package\n        run: |\n          npm install\n          npm run build\n          # Add commands to publish the package here\n```", "answer": "```yaml name: Update dependencies\non:\n  workflow_dispatch:\n  schedule:\n  - cron: \"0 0 * * 0\"\n\npermissions: {}\njobs:\n  update_deps:\n    permissions:\n      contents: write  #  to create branch (peter-evans/create-pull-request)\n      pull-requests: write  #  to create a PR (peter-evans/create-pull-request)\n\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 16\n    - run: npm install\n    - run: npm ls --depth 0 --prod --parseable | tail -n +2 | xargs -I '{}' basename \"{}\" | xargs -I '{}' npm install '{}'@latest\n    - run: rm -rf node_modules package-lock.json && npm install\n    - uses: peter-evans/create-pull-request@v4\n      with:\n        commit-message: Update dependencies\n        branch: \"update_deps\"\n        title: Update dependencies\n```"}
{"llm_response": "```yaml\nname: Assign issues with 'Passed Internal QA' label to QA project\n\non:\n  issue_label:\n    types:\n      - Passed Internal QA\n\njobs:\n  assign_one_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Java\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Run tests\n        run: mvn test\n      - name: Assign issue to QA Project\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          curl --request POST \\\n            --url https://api.github.com/repos/<username>/<repository>/issues/<issue_number>/labels \\\n            --header \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            --header \"Content-Type: application/json\" \\\n            --data '{\"labels\":[\"QA\"]}'\n\n```", "answer": "```yaml name: Assign issues with `Passed Internal QA` label to QA project\non:\n  issues:\n    types: [labeled]\njobs:\n  assign_one_project:\n    runs-on: ubuntu-latest\n    name: Assign to QA Project\n    env:\n      QA_PROJECT_ID: 6\n      COLUMN_NAME: Backlog\n      MY_GITHUB_TOKEN: ${{ secrets.PROJECT_GITHUB_TOKEN }}\n    steps:\n      - name: Assign issues with `Passed Internal QA` label to QA project\n        uses: srggrs/assign-one-project-github-action@1.3.1\n        if: |\n          contains(github.event.issue.labels.*.name, 'Passed Internal QA')\n        with:\n          project: 'https://github.com/orgs/dotCMS/projects/${{ env.QA_PROJECT_ID }}'\n          column_name: ${{ env.COLUMN_NAME }}\n```"}
{"llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  repository_dispatch:\n    types:\n      - workflow_dispatch\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: \"CI\"\non: [push, pull_request]\njobs:\n  build:\n    name: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code\n        uses: actions/checkout@v1\n\n      - name: shellcheck\n        uses: ludeeus/action-shellcheck@0.1.0\n        \n      - name: Install BATS\n        run: sudo npm install -g bats\n        \n      - name: Test\n        run: cd tests && bats *.bats\n```"}
{"llm_response": "```yaml Pull request check\n\non:\n  pull_request:\n    types: [opened, edited]\n\njobs:\n  format:\n    runs-on: ubuntu-latest\n\n  block-fixup:\n    runs-on: ubuntu-latest\n```", "answer": "```yaml name: Pull request check\n\non:\n    pull_request:\n\njobs:\n    format:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - uses: JohnnyMorganz/stylua-action@v1\n              with:\n                  token: ${{ secrets.GITHUB_TOKEN }}\n                  args: --check .\n\n    block-fixup:\n        runs-on: ubuntu-latest\n\n        steps:\n            - uses: actions/checkout@v3\n            - name: Block Fixup Commit Merge\n              uses: 13rac1/block-fixup-merge-action@v2.0.0\n```"}
{"llm_response": "```yaml update:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - name: Update Changelog\n      run: |\n        php vendor/bin/update-changelog --release-type ${{ github.event.release.type }}\n```", "answer": "```yaml name: update changelog\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    uses: laravel/.github/.github/workflows/update-changelog.yml@main\n```"}
{"llm_response": "```yaml\nname: e2e Test Manual (macOS CLI)\n\non:\n  push:\n    branches-ignore:\n      - main\n\njobs:\n  build-bootstrapper-linux:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Login to Azure Container Registry\n      uses: azure/login@v0.9\n      with:\n        client-id: ${{ secrets.AZURE_E2E_CLIENT_ID }}\n        client-secret: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}\n        subscription-id: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}\n        tenant-id: ${{ secrets.AZURE_E2E_TENANT_ID }}\n\n    - name: Build bootstrapper\n      run: |\n        make build-bootstrapper\n\n  e2e-test-manual-darwin:\n    runs-on: macos-latest\n\n    env:\n      ARM_CLIENT_ID: ${{ secrets.AZURE_E2E_CLIENT_ID }}\n      ARM_CLIENT_SECRET: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}\n      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}\n      ARM_TENANT_ID: ${{ secrets.AZURE_E2E_TENANT_ID }}\n\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n\n    - name: Login to Azure Container Registry\n      uses: azure/login@v0.9\n      with:\n        client-id: ${{ secrets.AZURE_E2E_CLIENT_ID }}\n        client-secret: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}\n        subscription-id: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}\n        tenant-id: ${{ secrets.AZURE_E2E_TENANT_ID }}\n\n    - name: Run e2e tests\n      run: |\n        ./bootstrap.sh --workerNodesCount=${{ github.event.inputs.workerNodesCount }} --controlNodesCount=${{ github.event.inputs.controlNodesCount }} --cloudProvider=${{ github.event.inputs.cloudProvider }} --test=${{ github.event.inputs.test }} --kubernetesVersion=${{ github.event.inputs.kubernetesVersion }} --osImage=${{ github.event.inputs.osImage }} --isDebugImage=${{ github.event.inputs.isDebugImage }} --machineType=${{ github.event.inputs.machineType }}\n```", "answer": "```yaml name: e2e Test Manual (macOS CLI)\n\non:\n  workflow_dispatch:\n    inputs:\n      workerNodesCount:\n        description: \"Number of worker nodes to spawn.\"\n        default: \"2\"\n        required: true\n      controlNodesCount:\n        description: \"Number of control-plane nodes to spawn.\"\n        default: \"3\"\n        required: true\n      cloudProvider:\n        description: \"Which cloud provider to use.\"\n        type: choice\n        options:\n          - \"gcp\"\n          - \"azure\"\n        default: \"azure\"\n        required: true\n      test:\n        description: \"The test to run.\"\n        type: choice\n        options:\n          - \"sonobuoy quick\"\n          - \"sonobuoy full\"\n          - \"autoscaling\"\n          - \"k-bench\"\n          - \"nop\"\n        required: true\n      kubernetesVersion:\n        description: \"Kubernetes version to create the cluster from.\"\n        default: \"1.24\"\n        required: true\n      osImage:\n        description: \"OS image (full path). Examples are in internal/config/config.go.\"\n        default: \"debug-latest\"\n        type: string\n        required: true\n      isDebugImage:\n        description: \"Is OS image a debug image?\"\n        type: boolean\n        default: true\n        required: false\n      machineType:\n        description: \"Override VM machine type. Leave as 'default' or empty to use the default VM type for the selected cloud provider.\"\n        type: string\n        default: \"default\"\n        required: false\n\nenv:\n  ARM_CLIENT_ID: ${{ secrets.AZURE_E2E_CLIENT_ID }}\n  ARM_CLIENT_SECRET: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}\n  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}\n  ARM_TENANT_ID: ${{ secrets.AZURE_E2E_TENANT_ID }}\n\njobs:\n  build-bootstrapper-linux:\n    name: \"Build bootstrapper (debug image)\"\n    runs-on: ubuntu-latest\n    if: ${{ github.event.inputs.isDebugImage == 'true' }}\n    steps:\n      - name: Setup Go environment\n        uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f # tag=v3.3.1\n        if: ${{ github.event.steps.check-bootstrapper-cache.cache-hit != 'true'}}\n        with:\n          go-version: \"1.19.3\"\n\n      - name: Check out repository\n        if: ${{ github.event.steps.check-bootstrapper-cache.cache-hit != 'true'}}\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n\n      - name: Build bootstrapper\n        if: ${{ github.event.steps.check-bootstrapper-cache.cache-hit != 'true'}}\n        uses: ./.github/actions/build_bootstrapper\n\n      - name: Upload bootstrapper to cache\n        if: ${{ github.event.steps.check-bootstrapper-cache.cache-hit != 'true'}}\n        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # tag=v3.0.11\n        with:\n          key: bootstrapper-${{ github.sha }}\n          path: \"build/bootstrapper\"\n\n  e2e-test-manual-darwin:\n    name: \"e2e Test Manual (macOS)\"\n    runs-on: macos-12\n    needs: build-bootstrapper-linux\n    if: ${{ always() && !cancelled() && (needs.build-bootstrapper-linux.result == 'success' || needs.build-bootstrapper-linux.result == 'skipped') }}\n    steps:\n      - name: Install the basics\n        shell: bash\n        run: brew install coreutils kubectl bash\n\n      - name: Check out repository\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0\n\n      - name: Setup Go environment\n        uses: actions/setup-go@c4a742cab115ed795e34d4513e2cf7d472deb55f # tag=v3.3.1\n        with:\n          go-version: \"1.19.3\"\n\n      - name: Login to Azure\n        if: ${{ github.event.inputs.cloudProvider == 'azure' }}\n        uses: ./.github/actions/azure_login\n        with:\n          azure_credentials: ${{ secrets.AZURE_E2E_CREDENTIALS }}\n\n      - name: Create Azure resource group\n        id: az_resource_group_gen\n        if: ${{ github.event.inputs.cloudProvider == 'azure' }}\n        shell: bash\n        run: |\n          uuid=$(uuidgen)\n          name=e2e-test-${uuid%%-*}\n          az group create --location westus --name $name --tags e2e\n          echo \"res_group_name=$name\" >> $GITHUB_OUTPUT\n\n      - name: Set up gcloud CLI\n        if: ${{ github.event.inputs.cloudProvider == 'gcp' }}\n        uses: google-github-actions/setup-gcloud@ee9693ff89cdf73862b8a13988f6a71070e8fc58 # tag=v0.6.2\n\n      - name: Run manual E2E test\n        uses: ./.github/actions/e2e_test\n        with:\n          workerNodesCount: ${{ github.event.inputs.workerNodesCount }}\n          controlNodesCount: ${{ github.event.inputs.controlNodesCount }}\n          cloudProvider: ${{ github.event.inputs.cloudProvider }}\n          machineType: ${{ github.event.inputs.machineType }}\n          gcpProject: ${{ secrets.GCP_E2E_PROJECT }}\n          gcp_service_account_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}\n          gcpClusterServiceAccountKey: ${{ secrets.GCP_CLUSTER_SERVICE_ACCOUNT }}\n          test: ${{ github.event.inputs.test }}\n          kubernetesVersion: ${{ github.event.inputs.kubernetesVersion }}\n          azureSubscription: ${{ secrets.AZURE_E2E_SUBSCRIPTION_ID }}\n          azureTenant: ${{ secrets.AZURE_E2E_TENANT_ID }}\n          azureClientID: ${{ secrets.AZURE_E2E_CLIENT_ID }}\n          azureClientSecret: ${{ secrets.AZURE_E2E_CLIENT_SECRET }}\n          azureUserAssignedIdentity: ${{ secrets.AZURE_E2E_USER_ASSIGNED_IDENTITY }}\n          azureResourceGroup: ${{ steps.az_resource_group_gen.outputs.res_group_name }}\n          osImage: ${{ github.event.inputs.osImage }}\n          isDebugImage: ${{ github.event.inputs.isDebugImage }}\n\n      - name: Always terminate cluster\n        if: always()\n        continue-on-error: true\n        uses: ./.github/actions/constellation_destroy\n\n      - name: Notify teams channel\n        if: ${{ failure() && github.ref == 'refs/heads/main' }}\n        run: |\n          brew install gettext && brew link --force gettext\n          export TEAMS_JOB_NAME=\"${{ github.event.inputs.cloudProvider }} (macOS, manual)\"\n          export TEAMS_RUN_ID=${{ github.run_id }}\n          envsubst < teams-payload.json > to-be-send.json\n          curl                                          \\\n            -H \"Content-Type: application/json\"         \\\n            -d @to-be-send.json                         \\\n            \"${{  secrets.MS_TEAMS_WEBHOOK_URI }}\"\n        shell: bash\n        working-directory: .github/actions/e2e_test\n\n      - name: Always destroy Azure resource group\n        if: ${{ always() && github.event.inputs.cloudProvider == 'azure' }}\n        shell: bash\n        run: |\n          az group delete \\\n            --name ${{ steps.az_resource_group_gen.outputs.res_group_name }} \\\n            --force-deletion-types Microsoft.Compute/virtualMachineScaleSets \\\n            --force-deletion-types Microsoft.Compute/virtualMachines \\\n            --no-wait \\\n            --yes\n```"}
{"llm_response": "```yaml\nname: Build Docs\n\non:\n  - release\n  - prerelease\n  - draft_release\n\njobs:\n  dokka:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Dokka\n        uses: jetified/dokka-action@v4\n        with:\n          source-dir: src/main/kotlin\n          output-dir: docs\n          include: README.md\n      - name: Grant Write Access to GITHUB_TOKEN\n        run: |\n          chmod +x ./set_permissions.sh\n          ./set_permissions.sh\n      - name: Publish Docs\n        run: |\n          gh pages --remote origin --push --branch gh-pages --target main\n```", "answer": "```yaml name: Build Docs\n\non:\n  release:\n    types: [ published ]\n\npermissions:\n  contents: write\n\njobs:\n  dokka:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout latest code\n        uses: actions/checkout@v3\n\n      - name: Set up JDK 11\n        uses: actions/setup-java@v3\n        with:\n          java-version: 11\n          distribution: 'zulu'\n          cache: 'gradle'\n\n      - name: Get the tag name\n        run: echo \"VERSION=${GITHUB_REF/refs\\/tags\\//}\" >> $GITHUB_ENV\n\n      - name: Build Dokka\n        run: ./gradlew dokkaHtm -Pversion=${{ env.VERSION }}\n\n      - name: Publish documentation\n        uses: JamesIves/github-pages-deploy-action@v4.4.1\n        with:\n          branch: gh-pages\n          folder: build/dokka/html\n          target-folder: docs\n          commit-message: \"doc: Add documentation for latest release: ${{ env.VERSION }}\"\n```"}
{"llm_response": "```yaml\nname: build\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - '!*'\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    env:\n      TURBO_TEAM: ${{ secrets.TURBOREPO_REMOTE_CACHING_TEAM }}\n      TURBO_TOKEN: ${{ secrets.TURBOREPO_REMOTE_CACHING_TOKEN }}\n```", "answer": "```yaml name: build\n\non:\n  push:\n    branches:\n    - main\n    tags:\n    - '!*'\n  pull_request:\n\nenv:\n  TURBO_TEAM: ${{ secrets.TURBOREPO_REMOTE_CACHING_TEAM }}\n  TURBO_TOKEN: ${{ secrets.TURBOREPO_REMOTE_CACHING_TOKEN }}\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: pnpm/action-setup@v2.2.2\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: 'pnpm'\n      - run: pnpm install\n      - run: pnpm test\n```"}
{"llm_response": "```yaml Merge Ready PRs:\n  on:\n    push:\n      branches:\n        - main\n\n  jobs:\n    execute:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.15'\n        - name: Run tests\n          run: go test ./...\n        - name: Grant GITHUB_TOKEN write access to issues\n          run: echo \"GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\" >> ~/.bashrc && source ~/.bashrc\n          env:\n            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          run: gh api -X PATCH /repos/<username>/<repository>/permissions/issues --input=.github/workflows/give-write-access-to-issues.yml\n        - name: Grant GITHUB_TOKEN write access to pull requests\n          run: echo \"GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\" >> ~/.bashrc && source ~/.bashrc\n          env:\n            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          run: gh api -X PATCH /repos/<username>/<repository>/permissions/pull-requests --input=.github/workflows/give-write-access-to-pull-requests.yml\n```", "answer": "```yaml # https://github.com/jpmcb/prow-github-actions\n\n# This will check all pull requests that have the lgtm label, and if GitHub thinks it is mergeable, then the PR is merged.\nname: \"Merge Ready PRs\"\non: [pull_request]\npermissions:\n  issues: write # give permission to apply the lgtm label\n  pull-requests: write # give permission to approve the PR\n\njobs:\n  execute:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jpmcb/prow-github-actions@2ac4434b3ce3d523fc3e28a879ec671c4a7750fa # main\n        with:\n          jobs: \"lgtm\"\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"llm_response": "```yaml\nname: gomod2nix.toml up to date\n\non:\n  pull_request:\n    branches-ignore:\n      - main\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n      - name: Install dependencies\n        run: go mod download\n      - name: Run tests\n        run: go test ./...\n```", "answer": "```yaml name: gomod2nix.toml up to date\n\non:\n  pull_request:\n  push:\n    branches: master\n\njobs:\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v1\n\n    - uses: cachix/install-nix-action@v12\n      with:\n        nix_path: nixpkgs=channel:nixos-unstable\n\n    - uses: cachix/cachix-action@v10\n      with:\n        name: nix-community\n        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'\n\n    - name: gomod2nix\n      run: nix-shell --run \"./checks/gomod2nix\"\n```"}
{"llm_response": "```yaml\nname: Dependabot auto-merge\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n```", "answer": "```yaml name: Dependabot auto-merge\non: pull_request\n\npermissions:\n  contents: write\n  pull-requests: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n\n      - name: Approve a PR\n        if: ${{ steps.metadata.outputs.update-type != 'version-update:semver-major' && !startswith(steps.metadata.outputs.new_version, '0.') }}\n        run: gh pr review --approve \"$PR_URL\"\n        env:\n          PR_URL: ${{ github.event.pull_request.html_url }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Enable auto-merge for Dependabot PRs\n        if: ${{ steps.metadata.outputs.update-type != 'version-update:semver-major' && !startswith(steps.metadata.outputs.new_version, '0.') }}\n        run: gh pr merge --auto --squash \"$PR_URL\"\n        env:\n          PR_URL: ${{ github.event.pull_request.html_url }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml weblate_automerge:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.x'\n      - name: Build and publish\n        run: dotnet build --configuration Release\n        working-directory: ./src/YourProjectName\n      - name: Push to Weblate\n        uses: weblate/actions/push-to-weblate@v3\n        with:\n          token: ${{ secrets.WEBLATE_TOKEN }}\n          project-id: YourProjectID\n          translation-file-name: \"path/to/your/file.po\"\n          commit-message: \"Automerged pull request #${{ github.event.number }}\"\n```", "answer": "```yaml \nname: Automerge\n\non:\n  pull_request_target:\n    types: opened\n\njobs:\n  weblate_automerge:\n    runs-on: ubuntu-latest\n    name: Weblate automerge\n    if: github.actor == 'weblate' || github.actor == 'pre-commit-ci[bot]' || github.actor == 'allcontributors[bot]'\n    steps:\n      - uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          labels: \"ship it!\"\n```"}
{"llm_response": "```yaml\nname: General\n\non:\n  push:\n    branches:\n      - main\n      tags:\n        - v*\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run tests\n        run: npm install && npm run test\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: [test]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Deploy to production\n        run: npm install && npm run deploy\n```", "answer": "```yaml name: general\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*.*.*\n  pull_request:\n    branches:\n      - main\n\njobs:\n\n  # Test\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v1\n    - name: Configure\n      run: npm install\n    - name: Build\n      run: npm run build\n\n  # Deploy\n\n  deploy:\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    needs: [test]\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v1\n    - name: Configure\n      run: npm install\n    - name: Build\n      run: npm run build\n    - name: Deploy\n      uses: JamesIves/github-pages-deploy-action@4.1.4\n      with:\n        branch: site\n        folder: site/.vuepress/dist\n```"}
{"llm_response": "```yaml spell-check-differential:\n  on:\n    push:\n      branches:\n        - main\n\n  jobs:\n    spell-check-differential:\n      runs-on: ubuntu-latest\n\n      steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Spell check\n        run: |\n          # Add your spell checking command here, e.g.,:\n          # python -m spellchecker .\n```", "answer": "```yaml name: spell-check-differential\n\non:\n  pull_request:\n\njobs:\n  spell-check-differential:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Run spell-check\n        uses: autowarefoundation/autoware-github-actions/spell-check@v1\n        with:\n          cspell-json-url: https://raw.githubusercontent.com/tier4/autoware-spell-check-dict/main/.cspell.json\n```"}
{"llm_response": "```yaml\nname: golangci-lint\n\non:\n  push:\n    branches:\n      - main\n  tag_dispatch:\n    branches:\n      - main\n  fork:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  golangci-lint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Run golangci-lint\n      run: go run github.com/golangci/golangci-lint/cmd/golangci-lint --timeout=30m\n```", "answer": "```yaml name: golangci-lint\non: [push, pull_request]\n\njobs:\n  golangci-lint:\n    name: lint\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read  # for actions/checkout to fetch code\n      pull-requests: read  # for golangci/golangci-lint-action to fetch pull requests\n    steps:\n      - uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@537aa1903e5d359d0b27dbc19ddd22c5087f3fbc\n        with:\n          only-new-issues: true\n```"}
{"llm_response": "```yaml update:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up PHP\n        uses: shivammathur/setup-php@v3\n        with:\n          php-version: '8.1'\n\n      - name: Install dependencies\n        run: composer install --prefer-dist\n\n      - name: Update changelog\n        run: ./vendor/bin/update-changelog\n```", "answer": "```yaml name: \"Update Changelog\"\n\non:\n  release:\n    types: [released]\n\njobs:\n  update:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n        with:\n          ref: main\n\n      - name: Update Changelog\n        uses: stefanzweifel/changelog-updater-action@v1\n        with:\n          latest-version: ${{ github.event.release.name }}\n          release-notes: ${{ github.event.release.body }}\n\n      - name: Commit updated CHANGELOG\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          branch: main\n          commit_message: Update CHANGELOG\n          file_pattern: CHANGELOG.md\n```"}
{"llm_response": "```yaml\nname: aarch64-test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  repo_dispatch:\n    types: [push]\n\njobs:\n  aarch64_job:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up GCC 11.7\n      uses: conda-incubator/setup-miniconda@v3\n      with:\n        python-version: 3.8\n        channels: conda-forge\n        dependencies: |\n          gcc-11.7\n          g++\n          make\n          cmake\n    - name: Build project\n      run: |\n        mkdir build\n        cd build\n        cmake ..\n        make\n```", "answer": "```yaml name: aarch64-test\n\non: [push]\n\njobs:\n  aarch64_job:\n    # The host should always be Linux\n    runs-on: [self-hosted, linux, ARM64]\n    name: Build on gcc117 aarch64\n    steps:\n    - uses: actions/checkout@v1\n    - name: make test\n      run: |\n         uname -a\n         make test\n```"}
{"llm_response": "```yaml\nname: Func Check Source\n\non:\n  pull_request:\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run func check source\n        run: |\n          # Add your func check source commands here\n          go get github.com/example/project\n          go test ./...\n```", "answer": "```yaml name: Func Check Source\n\non: [pull_request]\n\njobs:\n  check:\n    name: Check Source\n    strategy:\n      matrix:\n        go: [1.18.x]\n        os: [\"ubuntu-latest\"]\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Check\n        run: make check\n\n```"}
{"llm_response": "```yaml sync_labels:\n  on:\n    push:\n      branches:\n        - dev\n      paths:\n        - .github/labels.yml\n\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Use Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n        - name: Install dependencies\n          run: go mod download\n        - name: Run tests\n          run: go test ./...\n```", "answer": "```yaml name: Sync labels\non:\n  push:\n    branches:\n      - dev\n    paths:\n      - .github/labels.yml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # pin@v2\n      - uses: micnncim/action-label-syncer@3abd5ab72fda571e69fffd97bd4e0033dd5f495c # pin@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          manifest: .github/labels.yml\n```"}
{"llm_response": "```yaml test-website:\n  on:\n    push:\n      branches:\n        - master\n        - stable-*\n    pull_request:\n      branches:\n        - master\n        - stable-*\n\n  jobs:\n    tests:\n      runs-on: ubuntu-latest\n\n      steps:\n        - uses: actions/checkout@v2\n        - uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - name: Install dependencies\n          run: npm install\n        - name: Run tests\n          run: npm test\n        - name: Check for security vulnerabilities\n          uses: fossa-io/fossa-action@master\n          with:\n            token: ${{ secrets.FOSSA_TOKEN }}\n```", "answer": "```yaml name: test-website\n\non:\n  push:\n    branches: [master, stable-*]\n  pull_request:\n    branches: [master, stable-*]\n\njobs:\n  tests:\n    name: Test Website and FOSSA\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2.4.0\n\n      - uses: actions/setup-node@v2.4.1\n        with:\n          node-version: '16'\n\n      - name: Install FOSSA\n        run: |\n          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash\n\n      - name: Test Website Build\n        working-directory: website\n        run: |\n          yarn\n          yarn build\n\n      - name: Submit FOSSA report\n        run: if [ -n \"${{ secrets.FOSSA_API_KEY }}\" ]; then fossa; fi\n```"}
{"llm_response": "```yaml coverage:\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n      branches:\n        - main\n\n  jobs:\n    coverage:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Rust\n          uses: actions-rs/setup-rust@v1\n          with:\n            rust-version: 'stable'\n        - name: Build and test\n          run: cargo build --release\n        - name: Generate code coverage report\n          run: cargo test --verbose --lib --features=profile --release --codegen-coverage=true --target-dir=target/release\n        - name: Upload coverage report to Codecov\n          uses: codecov/upload@v3\n          with:\n            token: ${{ secrets.CODECOV_TOKEN }}\n            directory: target/release/deps/lib*.gcda\n            fail-on-error: false\n            path-pattern: '**/*.gcda'\n```", "answer": "```yaml name: Coverage\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Rust\n        run: rustup toolchain install nightly --profile minimal --component llvm-tools-preview\n      - uses: Swatinem/rust-cache@v2\n      - uses: taiki-e/install-action@cargo-llvm-cov\n      - name: Generate code coverage\n        run: cargo +nightly llvm-cov --all-features --workspace --lcov --output-path lcov.info\n      - name: Upload coverage to Codecov\n        uses: codecov/codecov-action@v3\n        continue-on-error: true\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos\n          files: lcov.info\n          fail_ci_if_error: true\n```"}
{"llm_response": "```yaml\nname: Sync workflows\n\non:\n  schedule:\n    - cron: '0 4 * * 4'\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run sync workflows\n        run: node sync-workflows.js\n```", "answer": "```yaml on:\n  schedule:\n    - cron: 0 16 * * 4\n  repository_dispatch:\n    types: [sync-workflows]\n  workflow_dispatch:\n\nname: Sync workflows\njobs:\n  release:\n    name: Sync workflows\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - name: Sync workflows\n        uses: technote-space/create-pr-action@v2\n        with:\n          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n          EXECUTE_COMMANDS: |\n            rm -rdf .github/workflows/.tmp\n            mkdir -p .github/workflows/.tmp\n            git clone --depth=1 https://github.com/technote-space/github-actions-workflows.git .github/workflows/.tmp/workflows\n\n            bash .github/workflows/.tmp/workflows/gh-actions/copy.sh\n            sed -i 's/cron:.\\+$/cron: 0 3 * * 2,6/' .github/workflows/update-dependencies.yml\n\n            rm -rdf .github/workflows/.tmp\n          COMMIT_MESSAGE: 'chore: sync workflows'\n          PR_BRANCH_PREFIX: chore/\n          PR_BRANCH_NAME: 'chore-sync-workflows'\n          PR_TITLE: 'chore: sync workflows'\n          ONLY_DEFAULT_BRANCH: true\n```"}
{"llm_response": "```yaml Update translations:\n  on:\n    push:\n      branches-ignore:\n        - main\n      paths:\n        - src/i18n/*.json\n    pull_request:\n      branches-ignore:\n        - main\n      paths:\n        - src/i18n/*.json\n  concurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n  jobs:\n    translate:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Install dependencies\n          run: npm install\n        - name: Run translation script\n          run: node scripts/translate.js\n```", "answer": "```yaml name: Update translations\n\non:\n    workflow_dispatch:\n    push:\n        paths:\n            - \"src/i18n/*.json\"\n    pull_request:\n        paths:\n            - \"src/i18n/*.json\"\n\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\njobs:\n    translate:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: actions/checkout@v3\n            - name: Update translations\n              run: |\n                  sudo npm i -g prettier\n                  bash ./lang.sh\n                  sed -ri 's/\"version\": \"'\"([[:digit:]]+)\\.([[:digit:]]+)\\.([[:digit:]]+)\"'\",/echo \\\\\"version\\\\\": \\\\\"\\1.\\2.$((\\3+1))\\\\\",/e' package.json\n                  prettier --write package.json\n                  git config user.name github-actions\n                  git config user.email github-actions@github.com\n                  git add -A\n                  git commit -m \"chore: update translations\"\n                  git push\n```"}
{"llm_response": "```yaml\nname: Semantic PR Check\n\non:\n  pull_request:\n    types: [created, edited, opened]\n    branches:\n      - main\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Validate PR title\n        run: |\n          if [[ ! \"$GITHUB_EVENT_TITLE\" =~ ^[A-Za-z0-9]+ ]]; then\n            echo \"Error: Pull request title must start with a letter or number.\"\n            exit 1\n          fi\n          echo \"PR title is valid.\"\n```", "answer": "```yaml name: \"Semantic PR Check\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml Move labled issues to Project (Beta):\n\non:\n  - issue_opened\n  - issue_commented\n  - pull_request_labeled\n  - pull_request_review_requested\n\njobs:\n  add-to-project-beta:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n\n      - name: Run script to move issue to project (beta)\n        run: |\n          # Add your script here to move issues to the project (beta)\n          echo \"Moving issue to project (beta)\"\n```", "answer": "```yaml name: Move labled issues to Project (Beta)\n\non:\n  issues:\n    types:\n      - opened\n      - labeled\n      - transferred\n\njobs:\n  add-to-project-beta:\n    name: Add issue to project (beta)\n    runs-on: ubuntu-latest\n    steps:\n      - name: Move team/devops or team/cloud issues\n        uses: actions/add-to-project@main\n        with:\n          project-url: https://github.com/orgs/sourcegraph/projects/264\n          github-token: ${{ secrets.GH_PROJECTS_ACTION_TOKEN }}\n          labeled: team/cloud\n          label-operator: OR\n          \n      - name: Move team/repo-management issues\n        uses: actions/add-to-project@main\n        with:\n          project-url: https://github.com/orgs/sourcegraph/projects/209\n          github-token: ${{ secrets.GH_PROJECTS_ACTION_TOKEN }}\n          labeled: team/repo-management\n          label-operator: OR\n          \n      - name: Move design issues\n        uses: actions/add-to-project@main\n        with:\n          project-url: https://github.com/orgs/sourcegraph/projects/278\n          github-token: ${{ secrets.GH_PROJECTS_ACTION_TOKEN }}\n          labeled: design, needs-design\n          label-operator: OR\n          \n#       - name: Move team/CHANGEME issues\n#         uses: actions/add-to-project@main\n#         with:\n#           project-url: https://github.com/orgs/sourcegraph/projects/CHANGEME\n#           github-token: ${{ secrets.GH_PROJECTS_ACTION_TOKEN }}\n#           labeled: team/CHANGEME\n#           label-operator: OR\n```"}
{"llm_response": "```yaml\nname: Tests\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n        os: [ubuntu-latest]\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python ${{ matrix.python-version }}\"\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip setuptools wheel\n        pip install pytest\n\n    - name: Run tests\n      run: pytest\n```", "answer": "```yaml name: Tests\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\njobs:\n  tests:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [\"3.6\", \"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11-dev\"]\n    env:\n      OS: ${{ matrix.os }}\n      PYTHON: ${{ matrix.python-version }}\n\n    name: Python ${{ matrix.python-version }} on OS ${{ matrix.os }}\n    steps:\n\n    - name: Acquire sources\n      uses: actions/checkout@v3\n\n    # https://github.com/docker-practice/actions-setup-docker\n    # - name: Install Docker\n    #   if: runner.os == 'Linux'\n    #   uses: docker-practice/actions-setup-docker@master\n\n    - name: Display Docker version\n      if: runner.os == 'Linux'\n      run: |\n        docker version\n\n    - name: Setup Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n        architecture: x64\n        cache: 'pip'\n        cache-dependency-path: 'setup.py'\n\n    - name: Setup project\n      run: |\n        # Install package in editable mode.\n        pip install --editable=.[test,develop]\n\n    - name: Check code style\n      if: matrix.python-version != '3.6'\n      run: |\n        poe check-style\n\n    - name: Run tests\n      run: |\n        pytest\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        files: ./coverage.xml\n        flags: unittests\n        env_vars: OS,PYTHON\n        name: codecov-umbrella\n        fail_ci_if_error: false\n```"}
{"llm_response": "```yaml\nname: CM(CK2) script automation test\n\non:\n  pull_request:\n    branches:\n      - master\n      - dev\n    paths:\n      - cm-mlops/**\n      - .github/workflows/test-cm-scripts.yml\n      - !**.md\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Run tests\n        run: pytest\n```", "answer": "```yaml # This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: CM(CK2) script automation test\n\non:\n  pull_request:\n    branches: [ \"master\", \"dev\" ]\n    paths:\n      - cm-mlops/**\n      - .github/workflows/test-cm-scripts.yml\n      - '!**.md'\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        python-version: [\"3.9\"]\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v3\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install cmind\n        cm pull repo octoml@ck\n        cm run script --quiet --tags=get,sys-utils-cm\n    - name: Test CM Script Automation\n      run: |\n        python tests/script/test_deps.py\n```"}
{"llm_response": "```yaml update_dependencies:\n  trigger:\n    schedule:\n      - cron: '0 3 * * 6'\n  jobs:\n    - name: Update dependencies\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Install dependencies\n          run: pip install --upgrade pip && pip install -r requirements.txt\n```", "answer": "```yaml name: Update dependencies\non:\n  schedule:\n    - cron: '0 3 * * 6'  # Run every saturday at 3 am.\njobs:\n  update_dependencies:\n    name: Update dependencies\n    if: github.repository_owner == 'galaxyproject'\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.7']\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Cache pip dir\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/pip\n          key: pip-cache-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}\n      - name: Update dependencies\n        run: | \n          python -m venv .venv\n          make update-dependencies\n      - name: Create pull request\n        uses: peter-evans/create-pull-request@v4\n        with:\n          author: galaxybot <galaxybot@users.noreply.github.com>\n          token: ${{ secrets.GALAXYBOT_PAT }}\n          commit-message: Update Python dependencies\n          branch: dev_auto_update_dependencies\n          delete-branch: true\n          push-to-fork: galaxybot/galaxy\n          title: Update Python dependencies\n          body: Run `make update-dependencies`.\n          labels: |\n            area/dependencies\n            kind/enhancement\n```"}
{"llm_response": "```yaml\nname: Daily Test\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14, 16]\n        os: [ubuntu-latest]\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm install\n    - run: npm test\n```", "answer": "```yaml name: Daily Test\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  test:\n    name: Test on node ${{ matrix.node-version }} and ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        node-version: [16.x]\n        os: [ubuntu-latest]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n\n    - name: npm install, build, and test\n      run: |\n        npm install\n        npm run build --if-present\n        npm run test:irl\n```"}
{"llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '16 04 * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up GitHub Token with necessary scopes\n        run: |\n          echo \"::set-output name=permissions::write:issues,write:pull-requests\"\n      - name: List open issues and pull requests\n        run: |\n          gh issue list --state open --per-page 100 --jq '.[].number' | xargs -I {} gh issue edit {} --label stale\n          gh pr list --state open --per-page 100 --jq '.[].number' | xargs -I {} gh pr edit {} --label stale\n```", "answer": "```yaml # This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\npermissions:\n  issues: write\n  pull-requests: write\n\non:\n  schedule:\n  - cron: '16 16 * * 0'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v5\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'Stale: no activity'\n        stale-pr-message: 'Stale: no activity'\n        stale-issue-label: 'stale'\n        stale-pr-label: 'stale'\n        days-before-issue-stale: 7\n        days-before-close: 7\n        close-issue-message: 'Close: no response'\n        exempt-issue-labels: todo, help wanted\n        exempt-pr-labels: todo, help wanted\n```"}
{"llm_response": "```yaml\nname: Close stale issues/pull requests\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Grant read access to GITHUB_TOKEN in the contents scope\n        run: |\n          echo \"::set-output name=permissions::read-access\"\n        id: permissions\n\n      - name: Check if the workflow was triggered by a schedule\n        run: |\n          if [ \"$GITHUB_EVENT_NAME\" == \"schedule\" ]; then\n            echo \"Workflow triggered by a schedule.\"\n          else\n            echo \"Workflow triggered by another event.\"\n          fi\n\n      - name: List open issues and pull requests\n        uses: actions/github-script@v5\n        with:\n          script: |\n            const octokit = new github.GitHub(process.env.GITHUB_TOKEN);\n            const { data } = await octokit.rest.issues.listForRepo({\n              owner: process.env.GITHUB_REPOSITORY_OWNER,\n              repo: process.env.GITHUB_REPOSITORY_NAME,\n              state: 'open',\n            });\n\n            const { data: prs } = await octokit.rest.pulls.listForRepo({\n              owner: process.env.GITHUB_REPOSITORY_OWNER,\n              repo: process.env.GITHUB_REPOSITORY_NAME,\n              state: 'open',\n            });\n\n            console.log('Open issues:', data.map(issue => issue.title));\n            console.log('Open pull requests:', prs.map(pr => pr.title));\n\n      - name: Close stale issues and pull requests\n        if: ${{ contains(data, 'Stale') || contains(prs, 'Stale') }}\n        run: |\n          echo \"Closing stale issues and pull requests...\"\n          # Add your logic here to close stale issues and pull requests\n```", "answer": "```yaml name: \"Close stale issues/pull requests\"\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n  workflow_dispatch:\n\npermissions:\n  contents: read\n\njobs:\n  stale:\n    permissions:\n      issues: write  # for actions/stale to close stale issues\n      pull-requests: write  # for actions/stale to close stale PRs\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/stale@v6\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 7 days'\n        stale-pr-message: 'This pull request is stale because it has been open 30 days with no activity. Remove stale label or comment or this will be closed in 7 days'\n        days-before-stale: 30\n        days-before-close: 7\n        operations-per-run: 500\n        exempt-issue-labels: dont-stale\n```"}
{"llm_response": "```yaml\nname: Ansible Lint\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n\njobs:\n  ansible-lint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        pip install ansible-lint\n\n    - name: Run ansible-lint\n      run: ansible-lint .\n```", "answer": "```yaml ---\nname: Ansible Lint  # feel free to pick your own name\n\non:  # yamllint disable-line rule:truthy\n  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests\n  push:\n    branches: [master]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [master]\n\njobs:\n  ansible-lint:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Important: This sets up your GITHUB_WORKSPACE environment variable\n      - uses: actions/checkout@v3\n\n      - name: Lint Ansible Playbook\n        # replace \"master\" with any valid ref\n        uses: ansible/ansible-lint-action@main\n        with:\n          path: \"roles/\"\n```"}
{"llm_response": "```yaml Danger JS:\n  runs-on: ubuntu-latest\n  jobs:\n    danger:\n      steps:\n        - uses: actions/checkout@v2\n        - name: Install dependencies\n          run: composer install\n        - name: Run Danger JS\n          run: danger\n```", "answer": "```yaml name: \"Danger JS\"\non: [pull_request]\n\njobs:\n  danger:\n    name: Danger JS\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n      - name: Danger\n        uses: docker://ghcr.io/danger/danger-js:10.6.6\n        env:\n          DANGER_DISABLE_TRANSPILATION: true\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml Compile Examples:\n  on:\n    push:\n      branches-ignore:\n        - main\n        - develop\n      paths-ignore:\n        - node_modules/\n        - dist/\n    pull_request:\n      branches-ignore:\n        - main\n        - develop\n      paths-ignore:\n        - node_modules/\n        - dist/\n    schedule:\n      - cron: '0 8 * * Tue'\n    workflow_dispatch:\n      inputs:\n        board:\n          required: true\n          description: Board FQBN\n    jobs:\n      build:\n        name: ${{ matrix.board.fqbn }}\n        runs-on: ubuntu-latest\n        strategy:\n          matrix:\n            board:\n              - arduino:avr\n              - arduino:mega\n              - esp32:esp32\n              - esp8266:esp8266\n              - stm32f10x:stm32f10x\n              - stm32f4xx:stm32f4xx\n        steps:\n          - uses: actions/checkout@v2\n          - run: make\n```", "answer": "```yaml name: Compile Examples\n\n# See: https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\non:\n  push:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  pull_request:\n    paths:\n      - \".github/workflows/compile-examples.yml\"\n      - \"examples/**\"\n      - \"src/**\"\n  schedule:\n    # Run every Tuesday at 8 AM UTC to catch breakage caused by changes to external resources (libraries, platforms).\n    - cron: \"0 8 * * TUE\"\n  workflow_dispatch:\n  repository_dispatch:\n\njobs:\n  build:\n    name: ${{ matrix.board.fqbn }}\n    runs-on: ubuntu-latest\n\n    env:\n      SKETCHES_REPORTS_PATH: sketches-reports\n\n    strategy:\n      fail-fast: false\n\n      matrix:\n        board:\n          - fqbn: arduino:avr:nano\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:mega\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:avr:leonardo\n            platforms: |\n              - name: arduino:avr\n          - fqbn: arduino:megaavr:nona4809\n            platforms: |\n              - name: arduino:megaavr\n          - fqbn: arduino:sam:arduino_due_x_dbg\n            platforms: |\n              - name: arduino:sam\n          - fqbn: arduino:samd:mkrzero\n            platforms: |\n              - name: arduino:samd\n          - fqbn: arduino:mbed_portenta:envie_m4\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_portenta:envie_m7\n            platforms: |\n              - name: arduino:mbed_portenta\n          - fqbn: arduino:mbed_nano:nano33ble\n            platforms: |\n              - name: arduino:mbed_nano\n          - fqbn: arduino:mbed_nano:nanorp2040connect\n            platforms: |\n              - name: arduino:mbed_nano\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Compile examples\n        uses: arduino/compile-sketches@v1\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          fqbn: ${{ matrix.board.fqbn }}\n          platforms: ${{ matrix.board.platforms }}\n          libraries: |\n            # Install the library from the local path.\n            - source-path: ./\n            # Additional library dependencies can be listed here.\n            # See: https://github.com/arduino/compile-sketches#libraries\n          sketch-paths: |\n            - examples\n          enable-deltas-report: true\n          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}\n\n      - name: Save sketches report as workflow artifact\n        uses: actions/upload-artifact@v3\n        with:\n          if-no-files-found: error\n          path: ${{ env.SKETCHES_REPORTS_PATH }}\n          name: ${{ env.SKETCHES_REPORTS_PATH }}\n```"}
{"llm_response": "```yaml dependabot-auto-merge\n\nname: Dependabot Auto Merge\n\non:\n  pull_request:\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up dependencies\n        run: |\n          composer install --prefer-dist\n          npm install\n\n      - name: Run tests\n        run: |\n          phpunit\n```", "answer": "```yaml name: dependabot-auto-merge\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    steps:\n    \n      - name: Dependabot metadata\n        id: metadata\n        uses: dependabot/fetch-metadata@v1.3.4\n        with:\n          github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n          \n      - name: Auto-merge Dependabot PRs for semver-minor updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n          \n      - name: Auto-merge Dependabot PRs for semver-patch updates\n        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"llm_response": "```yaml\nname: Static analysis\n\non:\n  push:\n    branches-ignore:\n      - master\n      - dev\n      - '**/*.tag'\n\njobs:\n  run_static_analysis:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run static analysis\n        run: |\n          go get golang.org/x/tools/cmd/goimports\n          gofmt -s -w .\n          go vet ./...\n```", "answer": "```yaml name: Static analysis\non:\n  push:\n    tags-ignore:\n      - \"*\" # Ignores all tags\n    branches-ignore:\n      - master\n      - dev\n\njobs:\n  run_static_analysis:\n    name: Static analysis\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '1.18'\n          check-latest: true\n      - name: Run static analysis tests\n        shell: bash\n        run: scripts/lint.sh\n```"}
{"llm_response": "```yaml\nname: Changelog Release Drafter\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '17'\n\n      - name: Install dependencies\n        run: mvn clean install\n\n      - name: Generate changelog\n        run: ./gradlew generateChangeLog\n\n      - name: Create release draft\n        run: ./gradlew createReleaseDraft\n```", "answer": "```yaml name: Changelog Release Drafter\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: release-drafter/release-drafter@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml Greetings:\n  jobs:\n    greeting:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Print a greeting\n          run: echo \"Hello, World!\"\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        pr-message:  'Hello @${{ github.actor }}, thank you for submitting a PR! We will respond as soon as possible.'\n        issue-message: |\n          Hello @${{ github.actor }}, thank you for your interest in our work!\n\n          If this is a bug report, please provide screenshots and **minimum viable code to reproduce your issue**, otherwise we can not help you.\n```"}
{"llm_response": "```yaml\nname: End to End Tests - release-18.0\n\non:\n  push:\n    branches:\n      - release-18.0\n  pull_request:\n    branches:\n      - release-18.0\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Run tests\n      run: pytest\n```", "answer": "```yaml name: End to End Tests - release-18.0\n\non:\n  push:\n    branches:\n      - release-18.0\n  pull_request:\n    branches:\n      - release-18.0\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.6, 3.7, 3.8, 3.9]\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        submodules: true\n    - name: Create Kind Cluster\n      uses: helm/kind-action@v1.4.0\n      with:\n        cluster_name: kubernetes-python-e2e-release-18.0-${{ matrix.python-version }}\n        # The kind version to be used to spin the cluster up\n        # this needs to be updated whenever a new Kind version is released\n        version: v0.11.1\n        # Update the config here whenever a new client snapshot is performed\n        # This would eventually point to cluster with the latest Kubernetes version\n        # as we sync with Kubernetes upstream\n        config: .github/workflows/kind-configs/cluster-1.18.yaml\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        python -m pip install -r requirements.txt\n        python -m pip install -r test-requirements.txt\n    - name: Install package\n      run: python -m pip install -e .\n    - name: Run End to End tests\n      run: pytest -vvv -s kubernetes/e2e_test\n```"}
{"llm_response": "```yaml\nname: Code-coverage\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n      - development\n      - 'feat/*'\n      - 'rc/*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.14'\n      - name: Install dependencies\n        run: go mod download\n      - name: Run tests\n        run: go test ./...\n      - name: Generate code coverage report\n        run: go tool cover -html -o coverage.html\n      - name: Upload coverage report to Codecov\n        uses: codecov/codecov-action@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          directory: coverage.html\n```", "answer": "```yaml name: Code-coverage\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches: [ master, development, feat/*, rc/* ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    strategy:\n      matrix:\n        runs-on: [ubuntu-latest]\n    runs-on: ${{ matrix.runs-on }}\n    name: Build\n    steps:\n      - name: Set up Go 1.17.6\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17.6\n        id: go\n\n      - name: Check out code into the Go module directory\n        uses: actions/checkout@v3\n\n      - name: Get dependencies\n        run: |\n          go get -v -t -d ./...\n          if [ -f Gopkg.toml ]; then\n              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n              dep ensure\n          fi\n      - name: Run unit tests\n        run: |\n          export ARWEN_PATH=${GITHUB_WORKSPACE}/arwen\n          make test-coverage\n\n      - name: Upload coverage\n        run: bash <(curl -s https://codecov.io/bash) -f coverage.txt -y codecov.yml\n```"}
{"llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9, 3.10]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: pytest\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install flake8\n\n      - name: Lint code\n        run: flake8 .\n\n  packaging:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.8\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install setuptools wheel\n\n      - name: Build package\n        run: python setup.py sdist bdist_wheel\n```", "answer": "```yaml name: CI\non: [push, pull_request]\njobs:\n  test:\n    name: Test - ${{ matrix.python-version }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"pypy-3.7\", \"3.7\", \"3.8\", \"3.9\", \"3.10\"]\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{ matrix.python-version }}\n          check-latest: true\n      - name: Install dependencies\n        run: python -m pip install tox\n      - name: Run tests\n        run: python -m tox -e py\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n          check-latest: true\n      - name: Install dependencies\n        run: python -m pip install tox\n      - name: Run linting\n        run: python -m tox -e pep8\n      - name: Run mypy\n        run: python -m tox -e mypy\n  packaging:\n    name: Packaging\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n      - name: Install Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n          check-latest: true\n      - name: Install dependencies\n        run: python -m pip install tox\n      - name: Test packaging\n        run: python -m tox -e packaging\n```"}
{"llm_response": "```yaml\nname: stats\n\non:\n  push:\n    branches:\n      - m\n      - a\n      - s\n      - t\n      - e\n      - r\n\njobs:\n  manual:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Generate statistics\n        run: |\n          # Add your commands here to generate and distribute statistics\n          echo \"Generating statistics...\"\n          # Example command to run Emacs Lisp code\n          emacs --batch --eval \"(generate-stats)\"\n          # Optionally, add a step to send the results to a remote server\n          echo \"Distributing statistics...\"\n          # Example command to upload files\n          curl -T /path/to/stats.txt https://example.com/upload\n```", "answer": "```yaml name: stats\non:\n  push:\n    branches: master\njobs:\n  manual:\n    name: \"Generate and distribute statistics\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install gitstats\n        uses: magit/actions/install-gitstats@main\n      - name: Generate statistics\n        uses: magit/actions/stats-generate@main\n      - name: Publish statistics\n        uses: magit/actions/stats-publish@main\n        with:\n          key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          secret: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```"}
{"llm_response": "```yaml\nname: Jira Issue Transition\n\non:\n  issues:\n    - type: closed\n    - type: deleted\n    - type: reopened\n\njobs:\n  call-label-action:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Call Label Action\n        uses: your-username/call-label-action@main\n        with:\n          jira-url: https://your-jira-instance.atlassian.net/rest/api/3\n          username: your-jira-username\n          password: your-jira-password\n          jql: \"issue = $ISSUE\"\n          label: \"new-label\"\n```", "answer": "```yaml # **what?**\n# Transition a Jira issue to a new state\n# Only supports these GitHub Issue transitions:\n#   closed, deleted, reopened\n\n# **why?**\n# Jira needs to be kept up-to-date\n\n# **when?**\n# On issue closing, deletion, reopened\n\nname: Jira Issue Transition\n\non:\n  issues:\n    types: [closed, deleted, reopened]\n\njobs:\n  call-label-action:\n    uses: dbt-labs/jira-actions/.github/workflows/jira-transition.yml@main\n    secrets:\n      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}\n      JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}\n      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Welcome New Contributor\n\non:\n  pull_request:\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: Welcome New Contributor\n\non:\n  pull_request_target:\n    types: [opened]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n\n    steps:\n      - name: Welcome Message\n        uses: actions/first-interaction@v1\n        continue-on-error: true\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: |-\n            Congrats on making your first PR and thank you for contributing to Superset! :tada: :heart:\n            We hope to see you in our [Slack](https://apache-superset.slack.com/) community too!\n```"}
{"llm_response": "```yaml\nname: Vint\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  fork:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  vint:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        sudo apt-get update\n        sudo apt-get install vim\n\n    - name: Run Vint\n      run: |\n        vint\n```", "answer": "```yaml name: Vint\non: [push, pull_request]\njobs:\n  vint:\n    strategy:\n      fail-fast: false\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@master\n    - name: Run vint with reviewdog\n      uses: reviewdog/action-vint@v1.0.1\n      with:\n        github_token: ${{ secrets.github_token }}\n        reporter: github-pr-review\n```"}
{"llm_response": "```yaml\nname: cffconvert\n\non:\n  push:\n    paths-ignore:\n      - 'docs/**'\n    paths:\n      - '**/CITATION.cff'\n\njobs:\n  validate:\n    name: Validate CITATION.cff\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install setuptools wheel\n      - name: Run validation script\n        run: |\n          python setup.py check-citation\n```", "answer": "```yaml name: cffconvert\n\non:\n  push:\n    paths:\n      - CITATION.cff\n\njobs:\n  validate:\n    name: \"validate\"\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out a copy of the repository\n        uses: actions/checkout@v3\n\n      - name: Check whether the citation metadata from CITATION.cff is valid\n        uses: citation-file-format/cffconvert-github-action@2.0.0\n        with:\n          args: \"--validate\"\n```"}
{"llm_response": "```yaml CompatHelper:\n  jobs:\n    CompatHelper:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Setup Julia\n          uses: julia/setup-julia@v1\n          with:\n            version: '1.7'\n        - name: Run compatibility checks\n          run: |\n            # Add your compatibility check commands here\n            # For example, you can use Julia packages like JuliaTesting to test Julia packages\n            julia --project=. -e \"using Test; @testset \\\"Compatibility Tests\\\" begin include(\\\"src/test.jl\\\") end\"\n```", "answer": "```yaml name: CompatHelper\non:\n  schedule:\n    - cron: 0 0 * * *\n  workflow_dispatch:\njobs:\n  CompatHelper:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Pkg.add(\"CompatHelper\")\n        run: julia -e 'using Pkg; Pkg.add(\"CompatHelper\")'\n      - name: CompatHelper.main()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          COMPATHELPER_PRIV: ${{ secrets.DOCUMENTER_KEY }}\n        run: julia -e 'using CompatHelper; CompatHelper.main()'\n```"}
{"llm_response": "```yaml\nname: Build\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Install dependencies\n      run: go mod download\n\n    - name: Build project\n      run: go build -o myapp\n```", "answer": "```yaml name: Build\n\non:\n  pull_request:\n    branches: ['main']\n\njobs:\n\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        go-version: [1.18] # TODO: add 1.19\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go-version }}\n          check-latest: true\n\n      - run: |\n          go build ./...\n          go test -run=^$ ./...\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  schedule:\n    - cron: '0 12 * ? Wed'\n  push:\n    branches:\n      - main\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run release script\n        run: ./release.sh\n```", "answer": "```yaml name: release\non:\n  schedule:\n    - cron: '0 12 * * 3' # At 12:00, every Wednesday\n  workflow_dispatch:\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  release:\n    name: Release\n    if: github.repository_owner == 'spaceship-prompt'\n    runs-on: ubuntu-latest\n    steps:\n      - name: \u2b07\ufe0f Checkout Repo\n        uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          submodules: true\n\n      - name: \ud83d\ude80 Release\n        uses: cycjimmy/semantic-release-action@v3\n        id: semantic\n        with:\n          extra_plugins: |\n            @google/semantic-release-replace-plugin\n            @semantic-release/changelog\n            @semantic-release/git\n            semantic-release-license\n        env:\n          # Using PAT here, because published release should trigger a workflow\n          # See: https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token\n          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          # GIT_AUTHOR_NAME: Denys Dovhan\n          # GIT_AUTHOR_EMAIL: denysdovhan@gmail.com\n          # GIT_COMMITTER_NAME: Denys Dovhan\n          # GIT_COMMITTER_EMAIL: denysdovhan@gmail.com\n```"}
{"llm_response": "```yaml\nname: Stale\n\non:\n  schedule:\n    - cron: '0 9-23 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run PHP code analysis\n        run: php /path/to/php/script.php\n```", "answer": "```yaml # DO NOT EDIT THIS FILE!\n#\n# It's auto-generated by sonata-project/dev-kit package.\n\n# https://github.com/actions/stale\n\nname: Stale\n\non:\n  schedule:\n    - cron: 0 9-18 * * *\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Close stale issues and pull requests\n        uses: actions/stale@v1.1.0\n        with:\n          days-before-close: 7\n          days-before-stale: 180\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          exempt-issue-label: keep\n          stale-issue-label: stale\n          stale-issue-message: >\n            This issue has been automatically marked as stale because it has not had\n            recent activity. It will be closed if no further activity occurs. Thank you\n            for your contributions.\n          stale-pr-label: stale\n          stale-pr-message: >\n            This PR has been automatically marked as stale because it has not had\n            recent activity. It will be closed if no further activity occurs. Thank you\n            for your contributions.\n```"}
{"llm_response": "```yaml auto-tag\n\nname: Auto Tag\n\non:\n  pull_request:\n    types: [opened, synchronize, reopened]\n  pull_request_target:\n    branches-ignore: [main]\n    paths-filter: debian/changelog\n\njobs:\n  auto_tag:\n    concurrency:\n      group: ${{ github.workflow }}-pull/${{ github.event.number }}\n      parallelism: 1\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up C++\n        uses: actions/setup-cpp@v2\n        with:\n          c++: '11'\n      - name: Build and Tag\n        run: |\n          mkdir build && cd build\n          cmake ..\n          make\n          git tag -a v$(cat debian/changelog | grep \"Version:\" | awk '{print $2}')\n          git push origin v$(cat debian/changelog | grep \"Version:\" | awk '{print $2}')\n```", "answer": "```yaml name: auto tag\n\non:\n  pull_request_target:\n    types: [opened, synchronize, closed]\n    paths:\n      - \"debian/changelog\"\n\nconcurrency:\n  group: ${{ github.workflow }}-pull/${{ github.event.number }}\n  cancel-in-progress: true\n\njobs:\n  auto_tag:\n    uses: linuxdeepin/.github/.github/workflows/auto-tag.yml@master\n    secrets: inherit\n```"}
{"llm_response": "```yaml breakingChangeDetectionBot:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run API extraction script\n        run: npx api-extractor\n```", "answer": "```yaml on:\n  pull_request:\n    types: [opened, synchronize, reopened]\nname: API extractor\njobs:\n  breakingChangeDetectionBot:\n    name: Breaking change detection bot\n    runs-on: ubuntu-latest\n    steps:\n      - name: Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@0.8.0\n        with:\n          access_token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: actions/checkout@master\n      - name: Breaking change detection bot\n        uses: ./.github/api-extractor-action\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml dependabot\n\nname: Dependabot\n\non:\n  pull_request:\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Grant GITHUB_TOKEN write access to contents scope\n        run: |\n          echo \"GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\" >> $GITHUB_ENV\n          chmod +x <<-'EOF'\n          #!/bin/bash\n          curl --request PUT \\\n            https://api.github.com/repos/${{ github.repository }}/settings/permissions/repositories \\\n            -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n            -H \"Content-Type: application/json\" \\\n            --data '{\n              \"permission\": \"write\",\n              \"scope\": [\"contents\"]\n            }'\n          EOF\n```", "answer": "```yaml # Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nname: Dependabot\non: pull_request\n\npermissions:\n  contents: write\n\njobs:\n  dependabot:\n    runs-on: ubuntu-latest\n    if: ${{ github.actor == 'dependabot[bot]' }}\n    env:\n      PR_URL: ${{github.event.pull_request.html_url}}\n      GITHUB_TOKEN: ${{secrets.SYNCED_GITHUB_TOKEN_REPO}}\n    steps:\n      - name: approve\n        run: gh pr review --approve \"$PR_URL\"\n      - name: merge\n        run: gh pr merge --auto --squash --delete-branch \"$PR_URL\"\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '18 10 * * 1'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup CodeQL\n        uses: github/codeql-action/setup-codeql@v2\n      - name: Run CodeQL Analysis\n        uses: github/codeql-action/run@v2\n```", "answer": "```yaml # For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"master\" ]\n  pull_request:\n    # The branches below must be a subset of the branches above\n    branches: [ \"master\" ]\n  schedule:\n    - cron: '18 10 * * 1'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'python' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]\n        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        \n        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n        \n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    # \u2139\ufe0f Command-line programs to run using the OS shell.\n    # \ud83d\udcda See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n\n    #   If the Autobuild fails above, remove it and uncomment the following three lines. \n    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.\n\n    # - run: |\n    #   echo \"Run, Build Application using script\"\n    #   ./location_of_script_within_repo/buildscript.sh\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: labeler\n\non:\n  pull_request:\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Label pull request\n        run: |\n          python label.py\n```", "answer": "```yaml name: \"labeler\"\non:\n- pull_request_target\n\njobs:\n  label:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@v4.0.2\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        sync-labels: true\n```"}
{"llm_response": "```yaml basebuild\nname: BaseBuild\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build and release\n        run: |\n          go build -o ./bin/baseapp\n          goreleaser --rm-dist\n```", "answer": "```yaml name: basebuild\n\non:\n  pull_request:\n  push:\n\njobs:\n  goreleaser:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: latest\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: '>=1.19.0'\n\n      # This step usually is not needed because the /ui/dist is pregenerated locally\n      # but its here to ensure that each release embeds the latest admin ui artifacts.\n      # If the artificats differs, a \"dirty error\" is thrown - https://goreleaser.com/errors/dirty/\n      - name: Build Admin dashboard UI\n        run: npm --prefix=./ui ci && npm --prefix=./ui run build\n\n      # The prebuilt golangci-lint doesn't support go 1.18+ yet\n      # https://github.com/golangci/golangci-lint/issues/2649\n      # - name: Run linter\n      #   uses: golangci/golangci-lint-action@v3\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          distribution: goreleaser\n          version: latest\n          args: release --rm-dist\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml build-ami:\n  on:\n    push:\n      branches:\n        - master\n      paths:\n        - environment/**\n  jobs:\n    build-ami:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n        - name: Build AMI\n          run: |\n            go build -o my-amd64-ami image.go\n            aws ec2 create-image \\\n              --instance-id i-1234567890abcdef \\\n              --name \"My AMI\" \\\n              --description \"My AMI description\" \\\n              --block-device-mappings file://device-mapping.json\n```\n\nThis YAML file defines a GitHub Workflow named `build-ami` that triggers on pushes to the `master` branch and only runs if at least one path of the push event matches `environment/**`. It uses the `actions/checkout@v2` action to checkout the code, sets up Go using `actions/setup-go@v2`, builds the AMI using Go, and creates an EC2 AMI using AWS CLI commands.", "answer": "```yaml name: build-ami\non:\n  push:\n    branches: [master]\n    paths: [environment/**]\njobs:\n  build-ami:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: |\n          packer init environment\n          packer build environment\n        env:\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n```"}
{"llm_response": "```yaml\nname: Autofix\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  autofix:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Run autofix script\n        run: ./path/to/autofix.sh\n```", "answer": "```yaml ---\nname: Autofix\n\"on\":\n  push:\n    # Only targets main branch to avoid amplification effects of auto-fixing\n    # the exact same stuff in multiple non-rebased branches.\n    branches:\n      - main\n\njobs:\n\n  autofix:\n    uses: kdeldycke/workflows/.github/workflows/autofix.yaml@v1.1.0```"}
{"llm_response": "```yaml Add branch preview link to a PR comment\nname Add branch preview link to a PR comment\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  add_branch_preview_links_to_a_PR_comment:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run script to add branch preview link\n      run: npx add-branch-preview-link-to-pr-comment\n```", "answer": "```yaml name: Add branch preview link to a PR comment\n\n# Note about \"status\" events:\n# - The workflow must be merged to master, a status on a commit in any branch will still run the workflow found on master\n# - \"status\" events (like those from buildkite) are different to \"check\" events from Github actions.\n# - You can check for a specific status using it's context. Find it using the API:\n#     curl \\\n#       --header \"Accept: application/vnd.github.v3+json\" \\\n#       --header 'Authorization: token ${PERSONAL_API_TOKEN}' \\\n#       https://api.github.com/repos/${ORG}/${REPO}/commits/${SHA}/status\n# - You can trigger a \"status\" event manually for testing:\n#     curl -request POST --url \"https://api.github.com/repos/${ORG}/${REPO}/statuses/${SHA}\" \\\n#      --header \"Authorization: token ${PERSONAL_API_TOKEN}\" \\\n#      --header 'content-type: application/json' \\\n#      --data '{\"state\": \"success\", \"description\": \"my status\", \"context\": \"some/unique/identifier\", \"target_url\": \"http://link-in-status/\"}'\n\non:\n  - status\n\njobs:\n  add_branch_preview_links_to_a_PR_comment:\n    runs-on: ubuntu-latest\n    if: github.event.state == 'success' && github.event.context == 'Branch preview'\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Find relevant PR\n        if: github.event.state == 'success'\n        uses: jwalton/gh-find-current-pr@v1\n        id: findPr\n        with:\n          sha: ${{ github.event.sha }}\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n      - run: echo \"Found PR ${PR}\"\n        if: success() && steps.findPr.outputs.number\n        env:\n          PR: ${{ steps.findPr.outputs.number }}\n\n      - name: Check if there is an existing comment\n        if: success() && steps.findPr.outputs.number\n        uses: peter-evans/find-comment@v1\n        id: find_comment\n        with:\n          issue-number: ${{ steps.findPr.outputs.number }}\n          comment-author: \"github-actions[bot]\"\n          body-includes: \":sparkles: Here is your branch preview! :sparkles:\"\n\n      - name: Create a new comment\n        if: success() && steps.find_comment.outputs.comment-id == 0\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ steps.findPr.outputs.number }}\n          body: |\n            :sparkles: Here is your branch preview! :sparkles:\n\n            - [Storybook][1]\n\n            Last updated for commit ${{ github.event.sha }}: ${{ github.event.commit.commit.message }}\n\n            [1]: https://dev.cultureamp.design/${{ github.event.branches[0].name }}\n\n      - name: Update an existing comment\n        if: success() && steps.find_comment.outputs.comment-id != 0\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          comment-id: ${{ steps.find_comment.outputs.comment-id }}\n          edit-mode: replace\n          body: |\n            :sparkles: Here is your branch preview! :sparkles:\n\n            - [Storybook][1]\n\n            Last updated for commit ${{ github.event.sha }}: ${{ github.event.commit.commit.message }}\n\n            [1]: https://dev.cultureamp.design/${{ github.event.branches[0].name }}\n```"}
{"llm_response": "```yaml\nname: Debug\n\non:\n  push:\n    branches:\n      - '**'\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: mvn clean install\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Test\n        run: mvn test\n```", "answer": "```yaml name: Debug\non:\n  push:\n    branches:\n      - '**'\n  pull_request:\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      # Preparation\n\n      - name: Checkout\n        uses: actions/checkout@v1\n\n      - name: Copy CI gradle.properties\n        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties\n\n      # Debug APK\n\n      - name: Assemble debug APK\n        uses: burrunan/gradle-cache-action@v1.5\n        with:\n          arguments: :app:assembleDebug\n\n      - name: Upload debug APK\n        uses: actions/upload-artifact@master\n        with:\n          name: Dawn Debug APK\n          path: app/build/outputs/apk/debug/app-debug.apk\n\n  test:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n    steps:\n      # Preparation\n\n      - name: Checkout\n        uses: actions/checkout@v1\n\n      - name: Copy CI gradle.properties\n        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties\n\n      # Tests\n\n      - name: Run tests\n        uses: burrunan/gradle-cache-action@v1.5\n        with:\n          arguments: testDebug\n\n      - name: Upload test report\n        if: always()\n        uses: actions/upload-artifact@v1\n        with:\n          name: Test report\n          path: app/build/reports\n\n      - name: Copy test results\n        if: always()\n        run: |\n          mkdir -p junit\n          find . -type f -regex \".*/build/test-results/.*xml\" -exec cp {} junit/ \\;\n\n      - name: Upload raw JUnit results\n        if: always()\n        uses: actions/upload-artifact@v1\n        with:\n          name: Raw JUnit results\n          path: junit\n```"}
{"llm_response": "```yaml\nname: Attach pull request to Asana task\n\non:\n  pull_request:\n\njobs:\n  create-asana-attachment-job:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Rust\n        uses: rust-lang/rustup@v1\n        with:\n          toolchain: stable\n      - name: Install dependencies\n        run: cargo build --release\n      - name: Create Asana attachment\n        run: |\n          # Assuming you have a script or command that generates the Asana attachment\n          ./generate_asana_attachment.sh\n          # Replace the following with the actual command to attach the file to Asana\n          asana_attachments add \"https://app.asana.com/api/v1/workspaces/<workspace_id>/tasks/<task_id>\" \"path/to/your/file\"\n```", "answer": "```yaml name: Attach pull request to Asana task\non: pull_request\n\njobs:\n  create-asana-attachment-job:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: Asana/create-app-attachment-github-action@latest\n        with:\n          asana-secret: ${{ secrets.ASANA_SECRET }}\n```"}
{"llm_response": "```yaml windows-ci:\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n  env:\n    GO_VERSION: 1.18\n  jobs:\n    check-optional-tests:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: ${{ env.GO_VERSION }}\n        - name: Check if needs to run Windows build and tests\n          run: |\n            # Add your checks here\n            echo \"Checking if needs to run Windows build and tests...\"\n            exit 0\n    windows-build:\n      runs-on: windows-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: ${{ env.GO_VERSION }}\n        - name: Build and test Windows\n          run: |\n            # Add your build and test commands here\n            echo \"Building and testing Windows...\"\n            exit 0\n```", "answer": "```yaml name: Windows CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\nenv:\n  GO_VERSION: 1.18\n\njobs:\n  check-optional-tests:\n    name: Check if needs to run Windows build and tests\n    runs-on: ubuntu-latest\n    outputs:\n      trigger-windows: ${{steps.runwindowstest.outputs.triggered}}\n    steps:\n      - uses: khan/pull-request-comment-trigger@master\n        name: Check if test Windows\n        if: github.event_name == 'pull_request'\n        id: runwindowstest\n        with:\n          trigger: '/test-windows'\n\n  windows-build:\n    name: Windows Build\n    runs-on: windows-latest\n    env:\n      GO111MODULE: \"on\"\n    needs: check-optional-tests\n    if: github.ref == 'refs/heads/main' || needs.check-optional-tests.outputs.trigger-windows == 'true'\n    steps:\n      - name: Checkout code into the Go module directory\n        uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache: true\n\n      - name: Setup docker CLI\n        run: |\n          docker version\n          curl -L -o docker.exe https://github.com/StefanScherer/docker-cli-builder/releases/download/20.10.5/docker.exe\n          mv -Force ./docker.exe \"C:\\Program Files\\Docker\\\"\n          docker version\n\n      - name: Test\n        run: make -f builder.Makefile test\n\n      - name: Build\n        env:\n          BUILD_TAGS: e2e\n        run: make -f builder.Makefile cli\n\n      - name: E2E Test\n        run: make e2e-win-ci\n\n      - name: ACI e2e Test\n        env:\n          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}\n          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}\n          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}\n        # need to docker logout on windows nodes, it seems GHActions does a `docker login --user githubactions` specifically on windows nodes\n        run: |\n          docker logout\n          make e2e-aci\n```"}
{"llm_response": "```yaml\nname: 32-bit Oracle\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - docs/**\n      - .github/workflows/**\n      - !.github/workflows/test_32_oracle.yml\n  pull_request:\n\njobs:\n  trick_32bit_oracle:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build and test 32-bit Oracle\n        # Add your build and test commands here\n```", "answer": "```yaml name: 32-bit Oracle\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n    - 'docs/**'\n    - '.github/workflows/**'\n    - '!.github/workflows/test_32_oracle.yml'\n  pull_request:\n\njobs:\n  trick_32bit_oracle:\n    runs-on: ubuntu-latest\n    container: docker://oraclelinux:8\n    steps:\n    - name: Add dnf repo\n      run: dnf -y install epel-release && dnf -y update\n    - name: Install other dependencies\n      run: >\n        dnf install -y tar bison clang clang-devel cmake diffutils\n        expat-devel.i686 expat.i686 flex gcc gcc-c++ git glibc-devel.i686\n        glibc.i686 glibc.x86_64 gsl-devel gsl-devel.i686 java-11-openjdk\n        java-11-openjdk-devel libstdc++-devel libstdc++-devel.i686 libxml2-devel\n        libxml2-devel.i686 llvm llvm-devel llvm-static make maven ncurses-devel\n        ncurses-devel.i686 openmotif openmotif-devel perl perl-Digest-MD5\n        python2-devel python3-devel python3-libs.i686 swig tar udunits2\n        udunits2-devel wget which zip zlib-devel zlib-devel.i686\n    - name: Symlink python\n      run: |\n        ln -s /lib/libpython3.6m.so.1.0 /lib/libpython3.6m.so\n    - name: Install Udunits (32 bit)\n      run: |\n        cd /\n        curl --retry 4 -O https://artifacts.unidata.ucar.edu/repository/downloads-udunits/current/udunits-2.2.28.tar.gz\n        tar xfvz udunits-2.2.28.tar.gz\n        rm -rf udunits-2.2.28.tar.gz\n        cd udunits-2.2.28\n        export CFLAGS=\"-m32\"\n        export CXXFLAGS=\"-m32\"\n        export MAKEFLAGS=-j`nproc`\n        ./configure\n        make\n        make install\n        cd /\n        rm -rf udunit-2.2.28\n    - name: Install GTest \n      run: |\n        dnf config-manager --enable ol8_codeready_builder\n        dnf install -y gtest-devel\n    - name: Install GTest (32 bit)\n      run: |\n        wget https://github.com/google/googletest/archive/release-1.8.0.tar.gz\n        tar xfvz release-1.8.0.tar.gz\n        cd googletest-release-1.8.0/googletest\n        export CFLAGS=\"-m32\"\n        export CXXFLAGS=\"-m32\"\n        export MAKEFLAGS=-j`nproc`\n        cmake .\n        make\n        make install\n    - name: Checkout repository\n      uses: actions/checkout@master\n    - name: Build Trick\n      run: |\n        export CFLAGS=\"-m32\"\n        export CXXFLAGS=\"-m32\"\n        export MAKEFLAGS=-j`nproc`\n        ./configure --without-hdf5 --enable-32bit\n        make\n    - name: Run tests\n      run: |\n        export CFLAGS=\"-m32\"\n        export CXXFLAGS=\"-m32\"\n        export MAKEFLAGS=-j`nproc`\n        make test \n```"}
{"llm_response": "```yaml\nname: Test\n\non:\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**.md'\n\njobs:\n  analyze_and_test_package:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Flutter\n        uses: subosono/flutter-action@v2\n        with:\n          flutter-version: '3.0.5' # You can change this to any version you prefer\n\n      - name: Run tests\n        run: flutter test\n```", "answer": "```yaml # This GitHub action is configured to run \"on\" push to \"master\".\n# Currently, using the \"validate\" workflow instead, this is an older test CI/CD.\n# This workflow:\n#  - Installs dart and flutter\n#  - Uses flutter stable channel.\n#    Consider setting up a matrix later with beta and dev included too.\n#  - Enables flutter web\n#  - Gets package dependencies\n#  - Runs dart analyze.\n#  - Show outdated packages, just added for info.\n#  - Verify that dart format is used by all committed code, fails if not.\n#    Controversial but pub.dev penalizes you if dart format is not used.\n#  - Run all tests with coverage.\n#  - Upload code coverage output to Codecov for analysis.\nname: Test\non:\n  pull_request:\n    branches: [master]\n    paths-ignore:\n      - \"**.md\"\n  push:\n    branches: [master]\n    paths-ignore:\n      - \"**.md\"\njobs:\n  flutter_test:\n    name: \"Analyze and test package\"\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: \"Install Flutter and Dart SDK\"\n        uses: subosito/flutter-action@v2\n        with:\n          channel: \"stable\"\n      - name: \"Show Dart SDK version\"\n        run: dart --version\n      - name: \"Show Flutter SDK version\"\n        run: flutter --version\n      - name: \"Install Flutter package dependencies\"\n        run: flutter pub get\n      - name: \"Analyze Dart source\"\n        run: dart analyze\n      - name: \"Show outdated packages\"\n        run: flutter pub outdated\n      - name: \"Verify that Dart formatting is used, fail if not\"\n        run: dart format --output=none --set-exit-if-changed .\n      - name: \"Test package FlexColorScheme with coverage\"\n        run: flutter test --coverage\n      - name: Upload test coverage to Codecov\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n          file: coverage/lcov.info\n      \n```"}
{"llm_response": "```yaml build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Build the action container\n        run: |\n          docker build -t my-action .\n```", "answer": "```yaml name: \"Build the action container\"\n\non:\n  release:\n    types:\n      - published\n  push:\n    branches:\n      - main\n    paths:\n      - '.github/workflows/action-container.yml'\n      - 'custom_components/**'\n      - 'action/**'\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    permissions:\n      packages: write\n    steps:\n      - uses: actions/checkout@v3.1.0\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2.1.0\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Docker metadata\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: |\n            ghcr.io/${{ github.repository_owner }}/action\n          tags: |\n            type=ref,event=branch\n            type=semver,pattern={{version}}\n            type=sha\n\n      - name: Build and push\n        uses: docker/build-push-action@v3.2.0\n        with:\n          context: ./action\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```"}
{"llm_response": "```yaml\nname: Push\n\non:\n  push:\n    branches:\n      - main\n      - releases/*\n      - stable/*\n\njobs:\n  ack:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - run: python --version\n```", "answer": "```yaml ---\n# See https://github.com/ansible-community/devtools/blob/main/.github/workflows/push.yml\nname: push\non:\n  push:\n    branches:\n      - main\n      - \"releases/**\"\n      - \"stable/**\"\n\njobs:\n  ack:\n    uses: ansible-community/devtools/.github/workflows/push.yml@main\n```"}
{"llm_response": "```yaml\nname: Auto-update Releases JSON file\n\non:\n  schedule:\n    - cron: '0 0 * * 1'\n\njobs:\n  autoupdate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Update releases JSON file\n        run: node update-releases-json.js\n```", "answer": "```yaml name: Auto-update Releases JSON file\non:\n  schedule:\n    - cron: '0 0 * * 1'\njobs:\n  autoupdate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Fetch git branches\n      run: git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n    - uses: actions/setup-node@v3.5.1\n      with:\n        node-version: 16.x\n        cache: yarn\n    - run: yarn --network-timeout 100000\n    - name: Switch to release update branch\n      run: |\n        if git branch --remotes | grep -q origin/update-releases; then\n          git checkout update-releases\n        else\n          git checkout -b update-releases\n        fi\n    - name: Update Releases JSON\n      run: yarn electron-releases\n    - name: Commit Changes to Releases JSON\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      run: |\n        echo \"machine github.com login $GITHUB_ACTOR password $GITHUB_TOKEN\" > ~/.netrc\n        chmod 600 ~/.netrc\n        git add static/releases.json\n        if test -n \"$(git status -s)\"; then\n          git config user.name \"Electron Bot\"\n          git config user.email \"electron-bot@users.noreply.github.com\"\n          git diff --cached\n          git commit -m \"build: update Electron releases JSON\"\n          git push origin update-releases\n          node --unhandled-rejections=strict .github/actions/create_releases_pr.js\n        else\n          echo No update needed\n        fi\n```"}
{"llm_response": "```yaml\nname: Tests\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Build project\n      run: go build -o ./bin/myapp .\n    - name: Test project\n      run: go test ./...\n```", "answer": "```yaml name: Tests\non: [push, pull_request]\njobs:\n  build:\n    name: Build for ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        include:\n          - os: ubuntu-latest\n            asset_name: mergestat-linux-amd64\n          - os: macos-latest\n            asset_name: mergestat-macos-amd64\n\n    steps:\n    - name: Set up Go 1.17\n      uses: actions/setup-go@v3\n      with:\n        go-version: 1.17.5\n      id: go\n\n    - name: Check out source\n      uses: actions/checkout@v3\n      with:\n        submodules: recursive\n\n    - name: Install libgit2\n      run: make libgit2\n\n    - name: Vet\n      run: make vet\n\n    - name: Lint\n      run: |\n        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.50.0\n        make lint-ci\n    \n    - name: Test\n      run: make test-cover\n    \n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n\n  # TODO(patrickdevivo)\n  # lint:\n  #   name: Lint\n  #   runs-on: ubuntu-latest\n  #   steps:\n  #     - uses: actions/checkout@v2\n\n  #     - name: Install libgit2\n  #       run: |\n  #         git clone https://github.com/libgit2/libgit2.git ~/libgit2\n  #         cd ~/libgit2\n  #         git checkout v1.1.0\n  #         mkdir build && cd build\n  #         sudo cmake .. -DBUILD_CLAR=0\n  #         sudo cmake --build . --target install\n\n  #     - name: golangci-lint\n  #       uses: golangci/golangci-lint-action@v2\n  #       with:\n  #         version: v1.29\n  #         args: --build-tags sqlite_vtable,static,system_libgit2\n```"}
{"llm_response": "```yaml add-to-project:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Add issues and PRs to project\n      run: |\n        # Add your script here to add issues and PRs to your project\n        echo \"Adding issues and PRs to project...\"\n        # Example command to add issues\n        git commit -m \"Added issues and PRs\"\n        git push origin main\n```", "answer": "```yaml name: Add to project\non:\n  issues:\n    types: [opened]\n  pull_request_target:\n    types: [opened]\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    name: Add issues and PRs to project\n    steps:\n      - uses: actions/add-to-project@main\n        with:\n          project-url: https://github.com/orgs/honeycombio/projects/11\n          github-token: ${{ secrets.GHPROJECTS_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Update Labels\n\non:\n  - pull_request:\n      branches:\n        - master\n\njobs:\n  update-labels:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Rust\n      uses: actions/setup-rust@v2\n      with:\n        rust-version: 'stable'\n    - name: Build and test\n      run: cargo build --release && cargo test\n```", "answer": "```yaml on:\n  pull_request_target:\n    branches:\n      - master\n    types: [opened, reopened]\n\njobs:\n  update-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions-ecosystem/action-add-labels@v1\n        with:\n          labels: S-waiting-on-review\n```"}
{"llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches-ignore:\n      - release/*\n      - docs\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '!.github/workflows/ci.yml'\n      - '.travis.yml'\n      - '.gitignore'\n      - 'README.md'\n      - 'LICENSE'\n  pull_request:\n    paths:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14.x'\n    - name: Install dependencies\n      run: npm install\n    - name: Run tests\n      run: npm test\n```", "answer": "```yaml name: 'CI'\non:\n  push:\n    branches-ignore:\n      - 'release/**'\n      - 'docs'\n    tags-ignore:\n      - '**'\n    paths-ignore:\n      - '.github/**'\n      - '!.github/workflows/ci.yml'\n      - '.travis.yml'\n      - '.gitignore'\n      - 'README.md'\n      - 'LICENSE'\n  pull_request:\n    paths:\n      - '**'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        ruby: [2.5, 2.6, 2.7, 3]\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0  # for posts's lastmod\n\n      - name: Setup Ruby\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: ${{ matrix.ruby }}\n          bundler-cache: true\n\n      - name: Test Site\n        run: bash tools/test.sh\n```"}
{"llm_response": "```yaml\nname: issue-automation\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  automate-issues-labels:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Rust\n        uses: rust/setup-rust@v1\n        with:\n          rust-version: '1.56'\n\n      - name: Build and run the program\n        run: cargo build && cargo run\n```", "answer": "```yaml name: issue-automation\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  automate-issues-labels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: initial labeling\n        uses: andymckay/labeler@1.0.4\n        with:\n          add-labels: \"needs triage\"\n          ignore-if-assigned: true\n```"}
{"llm_response": "```yaml Create Release\n\nname: Create Release\n\non:\n  push:\n    branches-ignore:\n      - main\n    tags-ignore:\n      - latest\n\njobs:\n  add_release_sources:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install requests\n      - name: Create release from source archives\n        run: |\n          version=$(echo $version-this)\n          curl -sSL https://api.github.com/repos/user/repo/releases/latest | jq .tag_name > /tmp/release_tag.txt\n          if [ \"$version\" != \"$(cat /tmp/release_tag.txt)\" ]; then\n            echo \"New version detected: $version\"\n            curl -X POST \\\n              -H \"Authorization: token $GITHUB_TOKEN\" \\\n              -H \"Content-Type: application/json\" \\\n              -d '{\n                \"tag_name\": \"'\"$version\"'\",\n                \"body\": \"Release created from source archives.\",\n                \"draft\": false,\n                \"prerelease\": false\n              }' \\\n              https://api.github.com/repos/user/repo/releases\n          fi\n      - name: Grant write access to GITHUB_TOKEN in contents scope\n        run: |\n          curl -X PUT \\\n            -H \"Authorization: token $GITHUB_TOKEN\" \\\n            -H \"Content-Type: application/json\" \\\n            -d '{\n              \"scope\": \"contents\",\n              \"permission\": \"write\"\n            }' \\\n            https://api.github.com/users/user/repos/user/repo/permissions/scopes\n\n  add_msw_files:\n    runs-on: windows-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14.x'\n      - name: Install dependencies\n        run: npm install\n      - name: Add MSW files to the release\n        run: |\n          version=$(echo $version-this)\n          curl -sSL https://api.github.com/repos/user/repo/releases/latest | jq .tag_name > /tmp/release_tag.txt\n          if [ \"$version\" != \"$(cat /tmp/release_tag.txt)\" ]; then\n            echo \"New version detected: $version\"\n            curl -X POST \\\n              -H \"Authorization: token $GITHUB_TOKEN\" \\\n              -H \"Content-Type: application/json\" \\\n              -d '{\n                \"tag_name\": \"'\"$version\"'\",\n                \"body\": \"Release created from MSW files.\",\n                \"draft\": false,\n                \"prerelease\": false\n              }' \\\n              https://api.github.com/repos/user/repo/releases\n          fi\n      - name: Grant write access to GITHUB_TOKEN in contents scope\n        run: |\n          curl -X PUT \\\n            -H \"Authorization: token $GITHUB_TOKEN\" \\\n            -H \"Content-Type: application/json\" \\\n            -d '{\n              \"scope\": \"contents\",\n              \"permission\": \"write\"\n            }' \\\n            https://api.github.com/users/user/repos/user/repo/permissions/scopes\n```", "answer": "```yaml # This manually triggered workflow creates a new draft release.\nname: Create Release\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'Release version'\n        required: true\n\npermissions:\n  contents: write\n\njobs:\n  add_release_sources:\n    runs-on: ubuntu-22.04\n    name: Create Release with Source Archives\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: 'recursive'\n\n      - name: Install Required Tools\n        run: |\n            sudo apt-get -q -o=Dpkg::Use-Pty=0 -y install doxygen gettext graphviz\n\n      - name: Create Release Archives\n        run: ./build/tools/release.sh ${{ inputs.version }}\n\n        # This is not very elegant, but we can't update checksums from two\n        # different jobs, so we just append to the release body which then\n        # needs to be edited interactively.\n      - name: Create Archives Checksums\n        working-directory: distrib/release/${{ inputs.version }}\n        run: |\n            printf '\\n# THESE CHECKSUMS MUST BE MOVED ABOVE!\\n\\n````' >> ../../../docs/release.md\n            sha1sum * | tee -a ../../../docs/release.md\n\n      - name: Create Draft Release\n        # Note: use a fork of softprops/action-gh-release which includes\n        # https://github.com/softprops/action-gh-release/pull/254 fixing\n        # updating the body of the draft releases. We should replace the SHA-1\n        # with a tag when an upstream release including this fix is made.\n        uses: vadz/action-gh-release@1460c8b8cca97de38c3557ca4a277b55f4971abc\n        id: create_release\n        with:\n          name: wxWidgets ${{ inputs.version }}\n          body_path: docs/release.md\n          files: |\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}.zip\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}.7z\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}.tar.bz2\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}-headers.7z\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}-docs-html.zip\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}-docs-html.tar.bz2\n          fail_on_unmatched_files: true\n          draft: true\n\n      # We have to store the archive used by the job below as an artifact\n      # because it can't be downloaded from a draft release without\n      # impersonating the same user and I don't know how to do it.\n      - name: Upload Release Archive\n        uses: actions/upload-artifact@v3\n        with:\n          name: wxWidgets-${{ inputs.version }}-source-archive\n          path: distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}.zip\n          retention-days: 1\n\n  add_msw_files:\n    needs: add_release_sources\n    runs-on: windows-2022\n    name: Add MSW Files to the Release\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Download Release Archive\n        uses: actions/download-artifact@v3\n        with:\n          name: wxWidgets-${{ inputs.version }}-source-archive\n\n      - name: Install Prerequisites\n        run: |\n            choco install -y --no-progress graphviz html-help-workshop\n\n      - name: Create MSW Installer and Help File\n        shell: cmd\n        run: |\n            md distrib\\release\n            md distrib\\release\\${{ inputs.version }}\n            move wxWidgets-${{ inputs.version }}.zip distrib\\release\\${{ inputs.version }}\n            set \"PATH=C:\\Program Files (x86)\\HTML Help Workshop;%PATH%\"\n            build\\tools\\release.bat ${{ inputs.version }}\n\n      # This doesn't really decrease the file size but .chm files can't be\n      # uploaded to GitHub, while .zip files can.\n      - name: Pack CHM File\n        working-directory: distrib/release/${{ inputs.version }}\n        run: 7z a wxWidgets-${{ inputs.version }}-docs-chm.zip wxWidgets-${{ inputs.version }}.chm\n\n      - name: Create Archives Checksums\n        working-directory: distrib/release/${{ inputs.version }}\n        shell: cmd\n        run: |\n            sha1sum * > ..\\..\\..\\checksums\n            type ..\\..\\..\\checksums\n\n      - name: Add Files to the Release\n        uses: vadz/action-gh-release@1460c8b8cca97de38c3557ca4a277b55f4971abc\n        with:\n          name: wxWidgets ${{ inputs.version }}\n          body_path: checksums\n          append_body: true\n          files: |\n            distrib/release/${{ inputs.version }}/wxMSW-${{ inputs.version }}-Setup.exe\n            distrib/release/${{ inputs.version }}/wxWidgets-${{ inputs.version }}-docs-chm.zip\n          fail_on_unmatched_files: true\n          draft: true\n```"}
{"llm_response": "```yaml\nname: Dependencies\n\non:\n  schedule:\n    - cron: '0 12 * * *'\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9]\n        redis-version: [5.0, 6.0]\n        redis-py-version: ['4.0', '5.0']\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip\n        pip install -r requirements.txt\n\n  dependency-build:\n    runs-on: ubuntu-latest\n    needs: build\n\n    steps:\n    - name: Check development branches of dependencies\n      run: |\n        git clone https://github.com/user/repo.git\n        cd repo\n        git checkout main\n        git fetch origin\n        git checkout feature-branch\n\n  issue:\n    runs-on: ubuntu-latest\n    needs: dependency-build\n\n    steps:\n    - name: Create failure issue\n      run: |\n        gh issue create \\\n          --title \"Dependency build failed\" \\\n          --body \"The dependency build failed in branch ${{ github.event.ref }}.\"\n```", "answer": "```yaml name: Dependencies\n\non:\n  schedule:\n    # View https://docs.github.com/en/actions/reference/events-that-trigger-workflows#schedule\n    - cron: '0 12 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    if: github.repository == 'rq/rq'\n    name: Python${{ matrix.python-version }}/Redis${{ matrix.redis-version }}/redis-py${{ matrix.redis-py-version }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.6\", \"3.7\", \"3.8.3\", \"3.9\", \"3.10\"]\n        redis-version: [3, 4, 5, 6, 7]\n        redis-py-version: [3.5.0]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4.3.0\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Start Redis\n      uses: supercharge/redis-github-action@1.4.0\n      with:\n        redis-version: ${{ matrix.redis-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install redis==${{ matrix.redis-py-version }}\n        pip install -r requirements.txt -r dev-requirements.txt\n        pip install -e .\n\n    - name: Test with pytest\n      run: |\n        RUN_SLOW_TESTS_TOO=1 pytest --durations=5\n\n  dependency-build:\n    name: Check development branches of dependencies\n    runs-on: ubuntu-latest\n    needs: build\n    if: success()\n\n    strategy:\n      matrix:\n        python-version: [\"3.6\", \"3.7\", \"3.8.3\", \"3.9\", \"3.10\"]\n        redis-version: [3, 4, 5, 6, 7]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4.3.0\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Start Redis\n      uses: supercharge/redis-github-action@1.4.0\n      with:\n        redis-version: ${{ matrix.redis-version }}\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install git+https://github.com/redis/redis-py\n        pip install git+https://github.com/pallets/click\n        pip install -r dev-requirements.txt\n        pip install -e .\n\n    - name: Test with pytest\n      run: RUN_SLOW_TESTS_TOO=1 pytest --durations=5 > log.txt 2>&1\n\n    - uses: actions/upload-artifact@v3\n      with:\n        name: dependencies-error\n        path: log.txt\n      if: failure()\n\n  issue:\n    name: Create failure issue\n    runs-on: ubuntu-latest\n\n    if: failure()\n    needs: dependency-build\n\n    steps:\n    - uses: actions/download-artifact@v3\n      with:\n        name: dependencies-error\n        path: .\n\n    - name: Create failure issue\n      run: |\n        if [[ \"$(curl --url https://api.github.com/repos/${{ github.repository }}/issues?creator=github-actions --request GET)\" != *\"\\\"\"* ]]\n          then curl --request POST \\\n                    --url https://api.github.com/repos/${{ github.repository }}/issues \\\n                    --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \\\n                    --header 'content-type: application/json' \\\n                    --data \"{\n                        \\\"title\\\": \\\"RQ maybe may not work with dependencies in the future\\\",\n                        \\\"body\\\": \\\"This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \\n\\n View log: \\n\\n \\`\\`\\` \\n $(cat log.txt | while read line; do echo -n \"$line\\n\"; done | sed -r 's/\"/\\\\\"/g') \\n \\`\\`\\`\\\"\n                      }\"\n        fi\n```"}
{"llm_response": "```yaml\nname: Invite user to join our group\n\non:\n  issues_comment:\n    types: [created]\n\njobs:\n  invite_user_to_join_group:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n\n    - name: Run tests\n      run: |\n        go test ./...\n```", "answer": "```yaml name: Invite user to join our group\non:\n  issue_comment:\n    types:\n      - created\njobs:\n  issue_comment:\n    name: Invite user to join our group\n    if: ${{ github.event.comment.body == '/invite' }}\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n    steps:\n\n      - name: Invite user to join our group\n        uses: peter-evans/create-or-update-comment@v1\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: |\n            It's my pleasure to invite you to join us :\n            Sealer dingtalk group : 34619594\n            Mail list : sealer@list.alibaba-inc.com\n            Developer please add my dingtalk or wechat : fangnux```"}
{"llm_response": "```yaml\nname: CIFuzz\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"**/node_modules/**\"\n      - \"**/.gitignore\"\n      - \"**/.DS_Store\"\n      - \"**/*.log\"\n\njobs:\n  Fuzzing:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up CI/CD environment\n      uses: actions/setup-python@v3\n      with:\n        python-version: '3.x'\n\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run CIFuzz\n      run: |\n        # Add your CIFuzz command here, e.g., ./cifuzz --target=your_target_program\n        # Example command:\n        ./cifuzz --target=./example.c\n```", "answer": "```yaml name: CIFuzz\non: [pull_request]\njobs:\n Fuzzing:\n   runs-on: ubuntu-latest\n   strategy:\n     fail-fast: false\n     matrix:\n       sanitizer: [address, undefined]\n   steps:\n   - name: Build Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'upb'\n       dry-run: false\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Run Fuzzers (${{ matrix.sanitizer }})\n     uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n     with:\n       oss-fuzz-project-name: 'upb'\n       fuzz-seconds: 600\n       dry-run: false\n       sanitizer: ${{ matrix.sanitizer }}\n   - name: Upload Crash\n     uses: actions/upload-artifact@v1\n     if: failure()\n     with:\n       name: ${{ matrix.sanitizer }}-artifacts\n       path: ./out/artifacts\n```"}
{"llm_response": "```yaml\nname: Tests\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    branches-ignore:\n      - main\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Rust\n        uses: actions-rs/setup-rust@v2\n        with:\n          rust-version: '1.58'\n      - name: Build and test\n        run: cargo build --release && cargo test\n```", "answer": "```yaml name: tests\n\non:\n  push:\n    branches: ['*']\n  pull_request:\n    branches: ['*']\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n    - name: Run tests\n      run: cargo test --verbose\n```"}
{"llm_response": "```yaml\nname: Workflow Linter\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    paths:\n      - .github/workflows/**\n\njobs:\n  call-workflow:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run linter\n        run: npm install && npm lint\n```", "answer": "```yaml ---\nname: Workflow Linter\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/**\n\njobs:\n  call-workflow:\n    uses: bitwarden/gh-actions/.github/workflows/workflow-linter.yml@master\n```"}
{"llm_response": "```yaml update-semgrep-live:\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  do-update:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Update semgrep.dev\n      run: |\n        # Add your command here to update semgrep.dev\n        # For example, if you have a script named update.sh in your repo, you can run it like this:\n        ./update.sh\n```", "answer": "```yaml name: update-semgrep-live\n\non:\n  push:\n    branches:\n    - develop \n\njobs:\n  do-update:\n    if: github.repository == 'returntocorp/semgrep-rules'\n    name: Update semgrep.dev\n    runs-on: ubuntu-latest\n    steps:\n    - name: update dev.semgrep.dev\n      run: curl --fail -X POST -L https://dev.semgrep.dev/api/admin/update-registry\n      continue-on-error: true\n    - name: update staging.semgrep.dev\n      run: curl --fail -X POST -L https://staging.semgrep.dev/api/admin/update-registry\n```"}
{"llm_response": "```yaml\nname: downstream_tests\n\non:\n  - push\n  - pull_request\n  - workflow_dispatch\n  - packages\n\njobs:\n  downstream_tests:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run tests\n        run: pytest\n```", "answer": "```yaml name: downstream_tests\n\non:\n  # Run this workflow after the build workflow has completed.\n  workflow_run:\n    workflows: [packages]\n    types: [completed]\n  # Or by triggering it manually via Github's UI\n  workflow_dispatch:\n    inputs:\n      manual:\n        description: don't change me!\n        type: boolean\n        required: true\n        default: true\n\njobs:\n  downstream_tests:\n    uses: pyviz-dev/holoviz_tasks/.github/workflows/run_downstream_tests.yaml@main\n    with:\n      downstream_repos_as_json: \"{\\\"downstream_repo\\\":[\\\"holoviews\\\", \\\"lumen\\\"]}\"\n    secrets:\n      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Rematch Size Testing\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run size testing\n        run: npm run test:size\n```", "answer": "```yaml name: Rematch Size Testing\non:\n  pull_request:\n\njobs:\n  size:\n    runs-on: ubuntu-latest\n    env:\n      CI_JOB_NUMBER: 1\n    steps:\n      - uses: actions/checkout@v1\n      - uses: andresz1/size-limit-action@v1\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}```"}
{"llm_response": "```yaml tribble:\n  jobs:\n    triage:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Rust\n          run: |\n            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n            rustup toolchain install stable\n            rustup default stable\n        - name: Build and test\n          run: cargo build && cargo test\n```", "answer": "```yaml name: Tribble\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: arctic-hen7/tribble-bot@v0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml Main Building:\n  on:\n    push:\n      branches:\n        - master\n        - main\n    pull_request:\n      branches:\n        - main\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Set up JDK\n          uses: actions/setup-java@v2\n          with:\n            java-version: '11'\n        - name: Build project\n          run: mvn clean install\n```", "answer": "```yaml # setup @see https://help.github.com/en/articles/workflow-syntax-for-github-actions\r\n# environment @see https://help.github.com/en/articles/software-in-virtual-environments-for-github-actions\r\n#                  https://help.github.com/en/articles/virtual-environments-for-github-actions\r\n# example     @see https://github.com/actions/toolkit/blob/master/.github/workflows/workflow.yml\r\nname: Main Building\r\n# This workflow is triggered on pushes to the repository.\r\non: # @see https://help.github.com/en/articles/events-that-trigger-workflows#webhook-events\r\n  push:\r\n    branches: # Array of patterns that match refs/heads\r\n      - master # Push events on master branch\r\n      - main\r\n  pull_request:\r\n    branches:\r\n      - main\r\n  # schedule:\r\n  #  - cron:  0 * * * *\r\n\r\njobs:\r\n  build: # job id, can be any string\r\n    # Job name is Build And Publish\r\n    name: Build\r\n    # This job runs on Linux\r\n    strategy:\r\n      matrix:\r\n        os: [ubuntu-latest]\r\n    runs-on: ${{ matrix.os }}\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v3 # https://github.com/actions/checkout\r\n        with:\r\n          lfs: true\r\n          submodules: true\r\n      - name: Set up JDK 11\r\n        uses: actions/setup-java@v3 # https://github.com/actions/setup-java\r\n        with:\r\n          distribution: temurin\r\n          java-version: \"11\"\r\n          java-package: jdk\r\n          architecture: x64\r\n      - name: Build with Maven\r\n        # uses: .github/action/build-with-maven\r\n        run: |\r\n          cd tools;\r\n          python3 -m pip install --user -r requirements.txt;\r\n          python3 gen_header_v2.py;\r\n          python3 gen_header_v3.py;\r\n          cd .. ;\r\n          mvn package --file pom.xml\r\n          cd sample;\r\n          bash gen_sample_output.sh;\r\n```"}
{"llm_response": "```yaml linters:\n  name: Linters\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n      branches:\n        - main\n  jobs:\n    linters:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Python\n          uses: actions/setup-python@v2\n          with:\n            python-version: '3.x'\n        - name: Install dependencies\n          run: |\n            pip install --upgrade pip\n            pip install flake8\n        - name: Run linters\n          run: flake8 .\n```", "answer": "```yaml name: linters\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  linters:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n      - run: pip install tox\n      - run: tox -e lint\n```"}
{"llm_response": "```yaml\nname: CLA\n\non:\n  issues_comment:\n    types: [created]\n  pull_request:\n    types: [closed, reopened, opened, synchronize]\n\njobs:\n  check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check CLA\n        uses: github-actions/setup-github-cli@v2\n        with:\n          version: v2.40.0\n\n      - name: Run CLA check\n        run: |\n          gh pr review --check-approvals required --approve --comment \"This PR requires CLA signing.\"\n```", "answer": "```yaml name: CLA\n\non:\n  issue_comment:\n    types:\n      - created\n  pull_request_target:\n    types:\n      - reopened\n      - opened\n      - synchronize\n\njobs:\n  check:\n    if: >-\n      !github.event.repository.fork\n      && (\n        github.event.comment.body == '@conda-bot check'\n        || github.event_name == 'pull_request_target'\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check CLA\n        uses: conda/actions/check-cla@v22.6.0\n        with:\n          # [required]\n          # label to add when actor has signed the CLA\n          label: cla-signed\n          # [required]\n          # the GitHub Personal Access Token to comment and label with\n          token: \"${{ secrets.CLA_ACTION_TOKEN }}\"\n```"}
{"llm_response": "```yaml\nname: Auto create PR\n\non:\n  push:\n    branches:\n      - nightly\n\njobs:\n  create_pr:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Create pull request\n        uses: actions/create-pr@v2\n        with:\n          title: Automated Pull Request from Nightly Branch\n          body: |\n            This pull request is automatically created by the GitHub Actions workflow when a new commit is pushed to the 'nightly' branch.\n          base: main\n          head: ${{ github.event.ref }}\n```", "answer": "```yaml ---\n# This action is centrally managed in https://github.com/<organization>/.github/\n# Don't make changes to this file in this repo as they will be overwritten with changes made to the same file in\n# the above-mentioned repo.\n\nname: Auto create PR\n\non:\n  push:\n    branches:\n      - 'nightly'\n\njobs:\n  create_pr:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Create Pull Request\n        uses: repo-sync/pull-request@v2\n        with:\n          source_branch: \"\"  # should be \"nightly\" as it's the triggering branch\n          destination_branch: \"master\"\n          pr_title: \"Pulling ${{ github.ref_name }} into master\"\n          pr_template: \".github/pr_release_template.md\"\n          pr_assignee: \"${{ secrets.GH_BOT_NAME }}\"\n          pr_draft: true\n          pr_allow_empty: false\n          github_token: ${{ secrets.GH_BOT_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Automatic Releases\n\non:\n  - pull_request: closed\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Composer\n        uses: php-actions/setup-composer@v2\n\n      - name: Install dependencies\n        run: composer install --prefer-dist\n\n      - name: Create Git tag\n        run: git tag v$(php -r \"echo shell_exec('git describe --tags --abbrev=0');\")\n\n      - name: Push tag to remote\n        run: git push origin ${{ github.ref }}:refs/tags/v${{ github.ref }}\n\n      - name: Create release\n        uses: actions/create-release@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          tag-name: v${{ github.ref }}\n          title: Release v${{ github.ref }}\n          body: Release notes for v${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Create merge-up PR\n        uses: actions/create-pull-request@v2\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          base-ref: main\n          head-ref: ${{ github.sha }}\n          title: Merge pull request from ${{ github.event.pull_request.head.repo.full_name }}#${{ github.event.pull_request.number }}\n          body: |\n            This pull request was automatically created as part of the automatic release process.\n            It merges the changes from the pull request into the main branch.\n          labels: ['autorelease', 'auto-merge']\n```", "answer": "```yaml # https://help.github.com/en/categories/automating-your-workflow-with-github-actions\n\nname: \"Automatic Releases\"\n\non:\n  milestone:\n    types:\n      - \"closed\"\n\njobs:\n  release:\n    name: \"GIT tag, release & create merge-up PR\"\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: \"Checkout\"\n        uses: \"actions/checkout@v3\"\n\n      - name: \"Release\"\n        uses: \"laminas/automatic-releases@v1\"\n        with:\n          command-name: \"laminas:automatic-releases:release\"\n        env:\n          \"GITHUB_TOKEN\": ${{ secrets.GITHUB_TOKEN }}\n          \"SIGNING_SECRET_KEY\": ${{ secrets.SIGNING_SECRET_KEY }}\n          \"GIT_AUTHOR_NAME\": ${{ secrets.GIT_AUTHOR_NAME }}\n          \"GIT_AUTHOR_EMAIL\": ${{ secrets.GIT_AUTHOR_EMAIL }}\n\n      - name: \"Create Merge-Up Pull Request\"\n        uses: \"laminas/automatic-releases@v1\"\n        with:\n          command-name: \"laminas:automatic-releases:create-merge-up-pull-request\"\n        env:\n          \"GITHUB_TOKEN\": ${{ secrets.GITHUB_TOKEN }}\n          \"SIGNING_SECRET_KEY\": ${{ secrets.SIGNING_SECRET_KEY }}\n          \"GIT_AUTHOR_NAME\": ${{ secrets.GIT_AUTHOR_NAME }}\n          \"GIT_AUTHOR_EMAIL\": ${{ secrets.GIT_AUTHOR_EMAIL }}\n\n      - name: \"Create and/or Switch to new Release Branch\"\n        uses: \"laminas/automatic-releases@v1\"\n        with:\n          command-name: \"laminas:automatic-releases:switch-default-branch-to-next-minor\"\n        env:\n          \"GITHUB_TOKEN\": ${{ secrets.ORGANIZATION_ADMIN_TOKEN }}\n          \"SIGNING_SECRET_KEY\": ${{ secrets.SIGNING_SECRET_KEY }}\n          \"GIT_AUTHOR_NAME\": ${{ secrets.GIT_AUTHOR_NAME }}\n          \"GIT_AUTHOR_EMAIL\": ${{ secrets.GIT_AUTHOR_EMAIL }}\n\n      - name: \"Bump Changelog Version On Originating Release Branch\"\n        uses: \"laminas/automatic-releases@v1\"\n        with:\n          command-name: \"laminas:automatic-releases:bump-changelog\"\n        env:\n          \"GITHUB_TOKEN\": ${{ secrets.GITHUB_TOKEN }}\n          \"SIGNING_SECRET_KEY\": ${{ secrets.SIGNING_SECRET_KEY }}\n          \"GIT_AUTHOR_NAME\": ${{ secrets.GIT_AUTHOR_NAME }}\n          \"GIT_AUTHOR_EMAIL\": ${{ secrets.GIT_AUTHOR_EMAIL }}\n\n      - name: \"Create new milestones\"\n        uses: \"laminas/automatic-releases@v1\"\n        with:\n          command-name: \"laminas:automatic-releases:create-milestones\"\n        env:\n          \"GITHUB_TOKEN\": ${{ secrets.GITHUB_TOKEN }}\n          \"SIGNING_SECRET_KEY\": ${{ secrets.SIGNING_SECRET_KEY }}\n          \"GIT_AUTHOR_NAME\": ${{ secrets.GIT_AUTHOR_NAME }}\n          \"GIT_AUTHOR_EMAIL\": ${{ secrets.GIT_AUTHOR_EMAIL }}\n```"}
{"llm_response": "```yaml Publish Release Assets:\n  on:\n    release:\n      types: [published, prerelease, draft]\n  \n  jobs:\n    build:\n      runs-on: ubuntu-latest\n  \n      steps:\n        - uses: actions/checkout@v2\n          with:\n            fetch-depth: 0\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n        - name: Build\n          run: go build\n        - name: Upload Release Asset\n          uses: actions/upload-artifact@v2\n          with:\n            name: my-release-asset\n            path: ./my-release-file.zip\n```", "answer": "```yaml name: Publish Release Assets\non:\n  release:\n    types: [published]\njobs:\n  build:\n    runs-on: ubuntu-20.04\n    env:\n      DOCKER_CLI_EXPERIMENTAL: \"enabled\"\n      DOCKER_BUILDKIT: 1\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      # https://github.com/actions/setup-go\n      - name: Set up Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.2\n        id: go\n      - name: Install GoReleaser\n        uses: goreleaser/goreleaser-action@v3\n        with:\n          install-only: true\n      - name: Show GoReleaser version\n        run: goreleaser --version\n      - name: Login to DockerHub\n        uses: docker/login-action@v2\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_PASSWORD }}\n      - name: Login to GitHub Docker Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - uses: tibdex/github-app-token@v1.6\n        id: generate_homebrew_token\n        with:\n          app_id: ${{ secrets.UPDATECLIBOT_APP_ID }}\n          private_key: ${{ secrets.UPDATECLIBOT_APP_PRIVKEY }}\n      - name: GoReleaser\n        if: success()\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          HOMEBREW_TAP_GITHUB_TOKEN: ${{ steps.generate_homebrew_token.outputs.token }}\n        run: |\n          make release\n      - name: Clean up\n        run: |\n          rm -f ${HOME}/.docker/config.json\n```"}
{"llm_response": "```yaml Greetings:\n  jobs:\n    greeting:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Run Python script\n          run: python greetings.py\n```", "answer": "```yaml name: Greetings\n\non: [pull_request, issues]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n    steps:\n    - uses: actions/first-interaction@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        issue-message: 'Thank you for submitting an issue to Anubis! Please make sure that your issue is consistent with our contribution guidelines.'\n        pr-message: 'Thank you for contributing to Anubis! Please make sure that your PR is consistent with our contribution guidelines.'\n```"}
{"llm_response": "```yaml\nname: Dependency Review\n\non:\n  pull_request:\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run dependency review tool\n        run: ./dependency_review_tool.py\n```", "answer": "```yaml # Dependency Review Action\n#\n# This Action will scan dependency manifest files that change as part of a Pull Request, surfacing known-vulnerable versions of the packages declared or updated in the PR. Once installed, if the workflow run is marked as required, PRs introducing known-vulnerable packages will be blocked from merging.\n#\n# Source repository: https://github.com/actions/dependency-review-action\n# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement\nname: 'Dependency Review'\non: [pull_request]\n\npermissions:\n  contents: read\n\njobs:\n  dependency-review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout Repository'\n        uses: actions/checkout@v3\n      - name: 'Dependency Review'\n        uses: actions/dependency-review-action@v2\n```"}
{"llm_response": "```yaml azure-staging-build-and-deploy:\n  runs-on: ubuntu-latest\n  concurrency-group: \"github-head-ref-${{ github.head_ref }}\"\n  needs: [pr-number-input, commit-ref-input]\n  steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.inputs.COMMIT_REF }}\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Run tests\n      run: npm test\n    - name: Build project\n      run: npm run build\n    - name: Deploy to Azure App Service\n      uses: azure/webapps-deploy@v2\n      with:\n        app-name: my-app-service\n        resource-group: my-resource-group\n        publish-profile: my-publish-profile\n        package: dist/my-app.zip\n```", "answer": "```yaml name: Azure Staging - Build and Deploy\n\n# **What it does**: Builds and deploys a branch/PR to staging\n# **Why we have it**: To enable us to deploy a branch/PR to staging whenever necessary\n# **Who does it impact**: All contributors.\n\non:\n  workflow_dispatch:\n    inputs:\n      PR_NUMBER:\n        description: 'PR Number'\n        type: string\n        required: true\n      COMMIT_REF:\n        description: 'The commit SHA to build'\n        type: string\n        required: true\n\npermissions:\n  contents: read\n  deployments: write\n\n# This allows a subsequently queued workflow run to take priority over\n# previously queued runs but NOT interrupt currently executing runs\nconcurrency:\n  group: 'staging-env @ ${{ github.head_ref || github.run_id }} for ${{ github.event.number || github.event.inputs.PR_NUMBER }}'\n  cancel-in-progress: true\n\njobs:\n  azure-staging-build-and-deploy:\n    if: ${{ github.repository == 'github/docs-internal' }}\n    runs-on: ubuntu-latest\n    timeout-minutes: 20\n    environment:\n      # TODO: Update name and url to point to a specific slot for the branch/PR\n      name: staging-env\n      url: ${{ env.APP_URL }}\n    env:\n      PR_NUMBER: ${{ github.event.number || github.event.inputs.PR_NUMBER || github.run_id }}\n      COMMIT_REF: ${{ github.event.pull_request.head.sha || github.event.inputs.COMMIT_REF }}\n      IMAGE_REPO: ${{ github.repository }}/pr-${{ github.event.number || github.event.inputs.PR_NUMBER || github.run_id }}\n      RESOURCE_GROUP_NAME: docs-staging\n      APP_SERVICE_NAME: ghdocs-staging\n      SLOT_NAME: canary\n\n    steps:\n      - name: 'Az CLI login'\n        uses: azure/login@1f63701bf3e6892515f1b7ce2d2bf1708b46beaf\n        with:\n          creds: ${{ secrets.PROD_AZURE_CREDENTIALS }}\n\n      - name: 'Docker login'\n        uses: azure/docker-login@81744f9799e7eaa418697cb168452a2882ae844a\n        with:\n          login-server: ${{ secrets.NONPROD_REGISTRY_SERVER }}\n          username: ${{ secrets.NONPROD_REGISTRY_USERNAME }}\n          password: ${{ secrets.NONPROD_REGISTRY_PASSWORD }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@95cb08cb2672c73d4ffd2f422e6d11953d2a9c70\n\n      - name: Check out repo\n        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748\n        with:\n          ref: ${{ env.COMMIT_REF }}\n          # To prevent issues with cloning early access content later\n          persist-credentials: 'false'\n          lfs: 'true'\n\n      - name: Check out LFS objects\n        run: git lfs checkout\n\n      - name: 'Set env vars'\n        run: |\n          # Set APP_URL\n          echo \"APP_URL=${{ secrets.STAGING_APP_URL }}\" >> $GITHUB_ENV\n          # Image tag is unique to each workflow run so that it always triggers a new deployment\n          echo \"DOCKER_IMAGE=${{ secrets.NONPROD_REGISTRY_SERVER }}/${{ env.IMAGE_REPO }}:${{ env.COMMIT_REF }}-${{ github.run_number }}-${{ github.run_attempt }}\" >> $GITHUB_ENV\n\n      - name: Setup node\n        uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048\n        with:\n          node-version: '16.17.0'\n          cache: npm\n\n      - name: Clone docs-early-access\n        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748\n        with:\n          repository: github/docs-early-access\n          token: ${{ secrets.DOCUBOT_REPO_PAT }}\n          path: docs-early-access\n          ref: main\n\n      - name: Merge docs-early-access repo's folders\n        run: .github/actions-scripts/merge-early-access.sh\n\n      - name: 'Build and push image'\n        uses: docker/build-push-action@1cb9d22b932e4832bb29793b7777ec860fc1cde0\n        with:\n          context: .\n          push: true\n          target: production\n          tags: ${{ env.DOCKER_IMAGE }}\n          build-args: |\n            BUILD_SHA=${{ env.COMMIT_REF }}\n\n      - name: 'Update docker-compose.staging.yaml template file'\n        run: |\n          sed 's|#{IMAGE}#|${{ env.DOCKER_IMAGE }}|g' docker-compose.staging.tmpl.yaml > docker-compose.staging.yaml\n\n      - name: 'Apply updated docker-compose.staging.yaml config to deployment slot'\n        run: |\n          az webapp config container set --multicontainer-config-type COMPOSE --multicontainer-config-file docker-compose.staging.yaml --slot ${{ env.SLOT_NAME }} -n ${{ env.APP_SERVICE_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }}\n\n      # Watch deployment slot instances to see when all the instances are ready\n      - name: Check that deployment slot is ready\n        uses: actions/github-script@2b34a689ec86a68d8ab9478298f91d5401337b7d\n        env:\n          CHECK_INTERVAL: 10000\n        with:\n          script: |\n            const { execSync } = require('child_process')\n\n            const slotName = process.env.SLOT_NAME\n            const appServiceName = process.env.APP_SERVICE_NAME\n            const resourceGroupName = process.env.RESOURCE_GROUP_NAME\n\n            const getStatesForSlot = (slot, appService, resourceGroup) => {\n              return JSON.parse(\n                execSync(\n                  `az webapp list-instances --slot ${slot} --query \"[].state\" -n ${appService} -g ${resourceGroup}`,\n                  { encoding: 'utf8' }\n                )\n              )\n            }\n\n            let hasStopped = false\n            const waitDuration = parseInt(process.env.CHECK_INTERVAL, 10) || 10000\n            async function doCheck() {\n              const states = getStatesForSlot(slotName, appServiceName, resourceGroupName)\n              console.log(`Instance states:`, states)\n\n              // We must wait until at-least 1 instance has STOPPED to know we're looking at the \"next\" deployment and not the \"previous\" one\n              // That way we don't immediately succeed just because all the previous instances were READY\n              if (!hasStopped) {\n                hasStopped = states.some((s) => s === 'STOPPED')\n              }\n\n              const isAllReady = states.every((s) => s === 'READY')\n\n              if (hasStopped && isAllReady) {\n                process.exit(0) // success\n              }\n\n              console.log(`checking again in ${waitDuration}ms`)\n              setTimeout(doCheck, waitDuration)\n            }\n\n            doCheck()\n\n      - name: 'Swap deployment slot to production'\n        run: |\n          az webapp deployment slot swap --slot ${{ env.SLOT_NAME }} --target-slot production -n ${{ env.APP_SERVICE_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }}\n```"}
{"llm_response": "```yaml\nname: Package Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\nenv:\n  HOME_REPO: usnistgov/OSCAL\n  CONTENT_CONFIG_PATH: src/config\n  SCHEMATRON_HOME: git-content/schematron\n  OSCAL_HOME: git-content/oscal\n  OSCAL_CICD_PATH: git-content/oscal/build/ci-cd\n  OSCAL_WORKING_PATH: git-content/oscal\n  OSCAL_WEBSITE_PATH: git-content/oscal/docs\n  OSCAL_SCRATCH_PATH: oscal-scratch\n\njobs:\n  tagged-release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        pip install setuptools wheel twine\n    - name: Build package\n      run: |\n        python setup.py sdist bdist_wheel\n    - name: Upload package to PyPI\n      run: |\n        twine upload dist/*\n```", "answer": "```yaml on:\n  push:\n    tags:\n      - v*\nname: Package Release\nenv:\n  # the name of the repo\n  HOME_REPO: usnistgov/OSCAL\n  # build-specific environment\n  CONTENT_CONFIG_PATH: src/config\n  SCHEMATRON_HOME: git-content/schematron\n  OSCAL_HOME: git-content/oscal\n  OSCAL_CICD_PATH: git-content/oscal/build/ci-cd\n  OSCAL_WORKING_PATH: git-content/oscal\n  OSCAL_WEBSITE_PATH: git-content/oscal/docs\n  OSCAL_SCRATCH_PATH: oscal-scratch\njobs:\n  tagged-release:\n    name: Package GitHub Release\n    runs-on: ubuntu-20.04\n    steps:\n      # use this for main repo master builds\n      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b\n        with:\n          path: ${{ env.OSCAL_HOME }}\n          submodules: recursive\n          token: ${{ secrets.COMMIT_TOKEN }}\n      - name: Set env\n        run: |\n          RELEASE_TAG=\"${GITHUB_REF#refs/*/}\"\n          RELEASE_VERSION=\"${RELEASE_TAG#\"v\"}\"\n          RELEASE_NAME=\"oscal-${RELEASE_VERSION}\"\n          echo \"RELEASE_TAG=${RELEASE_TAG}\" >> $GITHUB_ENV\n          echo \"RELEASE_VERSION=${RELEASE_VERSION}\" >> $GITHUB_ENV\n          echo \"RELEASE_NAME=${RELEASE_NAME}\" >> $GITHUB_ENV\n      - name: Package Release\n        run: |\n          bash \"${OSCAL_CICD_PATH}/package-release.sh\" \"${OSCAL_WORKING_PATH}\"\n          tar -jcvf \"${OSCAL_WORKING_PATH}/${RELEASE_NAME}.tar.bz2\" -C \"${OSCAL_WORKING_PATH}/archive\" .\n          (cd \"${OSCAL_WORKING_PATH}/archive\" && zip -r \"../${RELEASE_NAME}.zip\" .)\n      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8\n        with:\n          name: release-artifacts\n          path: |\n            ${{ env.OSCAL_WORKING_PATH }}/${{ env.RELEASE_NAME }}.tar.bz2\n            ${{ env.OSCAL_WORKING_PATH }}/${{ env.RELEASE_NAME }}.zip\n          retention-days: 5\n      - uses: ncipollo/release-action@58ae73b360456532aafd58ee170c045abbeaee37\n        with:\n          name: OSCAL ${{ env.RELEASE_VERSION }} Release\n          allowUpdates: false\n          draft: true\n          generateReleaseNotes: true\n          token: ${{ secrets.COMMIT_TOKEN }}\n          artifacts: \"${{ env.OSCAL_WORKING_PATH }}/*.zip,${{ env.OSCAL_WORKING_PATH }}/*.tar.bz2\"\n```"}
{"llm_response": "```yaml Buf\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Run proto lint/breaking\n        working-directory: .\n        command: ./build.sh lint/breaking\n        env:\n          PATH: $PATH:/path/to/proto/linter/bin\n```", "answer": "```yaml name: Buf\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"deploy/**\"\n      - \"examples/**\"\n      - \"logos/**\"\n      - \"**.md\"\n      - \"**.txt\"\n      - \"**.ya?ml\"\n  pull_request:\n    paths-ignore:\n      - \"deploy/**\"\n      - \"examples/**\"\n      - \"logos/**\"\n      - \"**.md\"\n      - \"**.txt\"\n      - \"**.ya?ml\"\n\njobs:\n  lint:\n    name: Proto Lint/Breaking\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: bufbuild/buf-setup-action@v1.7.0\n        with:\n          version: \"latest\"\n\n      - uses: bufbuild/buf-lint-action@v1\n        with:\n          input: \"rpc/flipt\"\n\n      - uses: bufbuild/buf-breaking-action@v1\n        with:\n          input: \"rpc/flipt\"\n          against: \"https://github.com/${GITHUB_REPOSITORY}.git#branch=main\"\n```"}
{"llm_response": "```yaml Stale Bot:\n  jobs:\n    stale:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Run stale command\n          run: |\n            docker pull node:lts\n            docker run -it --rm node:lts npm install -g @octokit/rest\n            npm install\n            npx stale-cli --owner <username> --repo <repository-name>\n```", "answer": "```yaml name: Stale Bot\n\non:\n  schedule:\n#            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n#            \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n#            \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the month (1 - 31)\n#            \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12 or JAN-DEC)\n#            \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of the week (0 - 6 or SUN-SAT)\n    - cron: '0 5 * * *' # Every day at 05:00 UTC\n\njobs:\n  stale:\n    permissions:\n      issues: write\n      pull-requests: write\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/stale@v5\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        operations-per-run: 50\n        days-before-issue-stale: 99999999 # Never mark issues as stale\n        days-before-pr-stale: 150\n        days-before-close: 30\n        stale-pr-label: 'Stale'\n        stale-pr-message: >-\n          Hello :wave:,\n          Thanks for your contribution to sunpy!\n\n          I have marked this pull request as stale because there hasn't had any activity in five months.\n          If you are still working on this, or if it's waiting on a maintainer to look at it then please let us know and we will keep it open.\n          Please add a comment with: @sunpy/sunpy-developers to get someone's attention.\n\n          If nobody comments on this pull request for another month, it will be closed.\n        close-pr-message: >-\n          Hello again :wave:,\n          We want to thank you again for your contribution to sunpy!\n\n          This pull request has had no activity since my last reminder, so I am going to close it.\n          If at any time you want to come back to this please feel free to reopen it!\n          If you want to discuss this, please add a comment with: @sunpy/sunpy-developers and someone will get back to you soon.\n        exempt-pr-labels:  'Keep Open'\n```"}
{"llm_response": "```yaml\nname: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16.x'\n      - name: Build and test\n        run: |\n          make build\n          make test\n      - name: Create a release\n        uses: github-actions/create-release@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          tag-name: ${{ github.ref }}\n          target-commitish: ${{ github.sha }}\n          body: \"This is a release.\"\n          draft: false\n          prerelease: true\n```", "answer": "```yaml name: Create a Release\n\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v*rc*'\n\njobs:\n  release:\n    runs-on: ubuntu-20.04\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Get the version\n        id: get_version\n        run: |\n          echo \"VERSION=${GITHUB_REF#refs/tags/}\" >> $GITHUB_OUTPUT\n          echo \"TRIMMED_VERSION=${GITHUB_REF#refs/tags/v}\" >> $GITHUB_OUTPUT\n\n      - name: REUSE Compliance Check\n        uses: fsfe/reuse-action@v1\n        with:\n          args: spdx -o zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: upload-results\n        uses: actions/upload-artifact@v3\n        continue-on-error: True\n        with:\n          name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n\n      - name: Create empty release notes body\n        run: |\n          echo \"TODO: add release overview and notes link\" > release-notes.txt\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: Zephyr ${{ steps.get_version.outputs.TRIMMED_VERSION }}\n          body_path: release-notes.txt\n          draft: true\n          prerelease: true\n\n      - name: Upload Release Assets\n        id: upload-release-asset\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_name: zephyr-${{ steps.get_version.outputs.VERSION }}.spdx\n          asset_content_type: text/plain\n```"}
{"llm_response": "```yaml\nname: Pull request labeler\n\non:\n  schedule:\n    - cron: '*/5 * * *'\n\njobs:\n  labeler:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Label pull requests\n        run: |\n          # Add your logic to label pull requests here\n          echo \"Labeling pull requests...\"\n          # Example: Labeling pull requests with 'feature'\n          git add .github/workflows/pull-request-labeler.yml\n          git commit -m \"Add pull request labeler\"\n          git push origin main\n```", "answer": "```yaml ---\nname: Pull request labeler\non:\n  schedule:\n    - cron: \"*/5 * * * *\"\njobs:\n  labeler:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: paulfantom/periodic-labeler@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          GITHUB_REPOSITORY: ${{ github.repository }}\n          LABEL_MAPPINGS_FILE: .github/labeler.yml\n```"}
{"llm_response": "```yaml Molecule - Kernel\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    branches-ignore:\n      - main\n    paths:\n      - '.github/workflows/molecule.kernel.yml'\n      - '.config/molecule/config.yml'\n      - 'molecule/Dockerfile.*'\n      - 'molecule/kernel/**'\n      - 'roles/kernel/**'\n\njobs:\n  kernel:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        debug: [false, true]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.x\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n\n      - name: Run Molecule tests\n        run: |\n          molecule test --debug ${{ matrix.debug }}\n```", "answer": "```yaml name: Molecule - Kernel\n\non:\n  pull_request:\n    paths:\n      - .github/workflows/molecule.kernel.yml\n      - .config/molecule/config.yml\n      - molecule/Dockerfile.*\n      - molecule/kernel/**\n      - roles/kernel/**\n  workflow_dispatch:\n    inputs:\n      debug:\n        type: boolean\n        description: Run with tmate debugging\n        required: false\n        default: false\n\njobs:\n  kernel:\n    uses: ./.github/workflows/molecule.yaml\n    with:\n      debug: ${{ inputs.debug == true }}\n      scenario: kernel\n```"}
{"llm_response": "```yaml\nname: Auto Assign\n\non:\n  issues_opened:\n\njobs:\n  auto-assign:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run linter\n        run: npm run lint\n\n      - name: Assign issue to author\n        if: ${{ github.event.issue.assignee }}\n        run: |\n          echo \"Assigning issue to ${github.event.issue.assignee.login}\"\n          gh issue assign --issue ${github.event.issue.number} --assignee ${github.event.issue.assignee.login}\n```", "answer": "```yaml name: Auto Assign\non:\n  issues:\n    types: [opened]\njobs:\n  auto-assign:\n    runs-on: ubuntu-latest\n    steps:\n    - name: 'Auto Assign Issues'\n      uses: pozil/auto-assign-issue@v1\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        assignees: wopian\n```"}
{"llm_response": "```yaml PublishRelease\n\nname: Publish Release\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up JDK 11\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Set Gradle options\n        env:\n          GRADLE_OPTS: '-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false -Dkotlin.incremental=false -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8'\n      - name: Build and publish\n        run: ./gradlew clean build --no-daemon --parallel\n```", "answer": "```yaml name: Publish Release\n\non:\n  release:\n    types: [ published ]\n\nenv:\n  GRADLE_OPTS: \"-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false -Dkotlin.incremental=false -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8\"\n\njobs:\n  publish:\n    strategy:\n      matrix:\n        os: [ macos-11 ]\n      # run sequentially to avoid conflicts for closeAndReleaseRepository\n      # max-parallel: 1\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up JDK\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'zulu'\n          java-version: '11'\n\n      - name: Cache gradle, wrapper and buildSrc\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.gradle/caches\n            ~/.gradle/wrapper\n          key: ${{ matrix.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}\n          restore-keys: |\n            ${{ matrix.os }}-gradle-\n\n      - name: Cache konan\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.konan/cache\n            ~/.konan/dependencies\n            ~/.konan/kotlin-native-macos*\n            ~/.konan/kotlin-native-mingw*\n            ~/.konan/kotlin-native-windows*\n            ~/.konan/kotlin-native-linux*\n            ~/.konan/kotlin-native-prebuilt-macos*\n            ~/.konan/kotlin-native-prebuilt-mingw*\n            ~/.konan/kotlin-native-prebuilt-windows*\n            ~/.konan/kotlin-native-prebuilt-linux*\n          key: ${{ matrix.os }}-konan-${{ hashFiles('**/*.gradle*') }}\n          restore-keys: |\n            ${{ matrix.os }}-konan-\n\n      - name: Make gradlew executable\n        run: chmod +x ./gradlew\n\n      - name: Build release\n        run: ./gradlew assemble\n\n      - name: Publish release\n        run: ./gradlew publish --no-parallel --stacktrace\n        if: matrix.os == 'macos-11'\n        env:\n          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}\n          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}\n          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MAVEN_SIGNING_PRIVATE_KEY }}\n          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MAVEN_SIGNING_PASSWORD }}\n\n      # - name: Publish release (Windows)\n      #   run: ./gradlew build publishMingwX64PublicationToMavenCentralRepository --no-parallel --stacktrace\n      #   if: matrix.os == 'windows-latest'\n      #   env:\n      #     ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}\n      #     ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}\n      #     ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MAVEN_SIGNING_PRIVATE_KEY }}\n      #     ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MAVEN_SIGNING_PASSWORD }}\n\n      - name: Publish release\n        run: ./gradlew closeAndReleaseRepository --no-parallel\n        env:\n          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}\n          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}\n\n      - name: Generate docs\n        run: ./gradlew dokkaHtml --no-parallel --stacktrace\n\n      - name: Deploy docs \ud83d\ude80 to website\n        if: ${{ matrix.os == 'macos-11' }}\n        uses: JamesIves/github-pages-deploy-action@v4.4.1\n        with:\n          branch: gh-pages # The branch the action should deploy to.\n          folder: build/dokka/html # The folder the action should deploy.\n          target-folder: docs/0.x/\n          clean: true\n```"}
{"llm_response": "```yaml\nname: Commit Check\n\non:\n  push:\n    branches: [ main ]\n    tags: [ v* ]\n  clone:\n\njobs:\n  check-commit-message:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Check commit message\n      run: |\n        if [[ $GITHUB_EVENT_NAME == \"push\" || $GITHUB_EVENT_NAME == \"tag\" ]]; then\n          echo \"Commit message: ${{ github.event.head_commit.message }}\"\n          # Add your commit message validation logic here\n        fi\n```", "answer": "```yaml name: 'Commit Check'\non:\n  push:\n\njobs:\n  check-commit-message:\n    name: Check Commit\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check Commit Format\n        uses: gsactions/commit-message-checker@v1\n        with:\n          pattern: '^((Merge pull request(.*))|(Release(.*))|(\\[(feature|fix|doc|optimize|refactor|perf|test|chore)((\\|)?(feature|fix|doc|optimize|refactor|perf|test|chore))?\\][^\\[\\]]+))$'\n          flags: 'gm'\n          error: 'Please follow the commit style that the project.'```"}
{"llm_response": "```yaml docs-builds:\n  on:\n    push:\n      branches:\n        - main\n        - develop\n      paths-ignore:\n        - locale/**\n    pull_request:\n      branches:\n        - main\n        - develop\n      paths-ignore:\n        - locale/**\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Set up Python\n          uses: actions/setup-python@v2\n          with:\n            python-version: '3.x'\n        - name: Install dependencies\n          run: |\n            pip install --upgrade pip\n            pip install -r requirements.txt\n        - name: Build documentation\n          run: |\n            make html\n        - name: Upload artifacts\n          uses: actions/upload-artifact@v2\n          with:\n            name: Docs\n            path: ./docs/build/html\n```", "answer": "```yaml name: Docs builds\n\non: \n  push:\n    paths-ignore:\n      - 'locale/**'\n\n  pull_request:\n    paths-ignore:\n      - 'locale/**'\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        format: [html, pdf]\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 1\n    - name: Set up Python 3.7\n      uses: actions/setup-python@v3\n      with:\n        python-version: 3.7\n    - name: Install Requirements\n      run: |\n        if [[ ${{ matrix.format }} != \"html\" ]]; then\n          sudo apt-get update && sudo apt-get install -y texlive-xetex fonts-freefont-otf\n        fi\n\n        python -m pip install --upgrade pip\n        pip install -r REQUIREMENTS.txt\n\n    - name: Build English ${{ matrix.format }} documentation\n      run: |\n          make ${{ matrix.format }}\n    - name: Upload ${{ matrix.format }} build artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: ${{ matrix.format }} build\n        path: build/${{ matrix.format }}\n        retention-days: 15\n\n```"}
{"llm_response": "```yaml\nname: Buildkite\n\non:\n  issues:\n    types: [created]\n  pull_request:\n    types: [opened, edited]\n\njobs:\n  add_ci_label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add CI label to pull request\n        uses: actions/label@v3\n        with:\n          labels: 'ci'\n\n  build_containers:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v2\n        with:\n          ruby-version: '3.0'\n          bundler-cache: true\n\n      - name: Install dependencies\n        run: bundle install\n\n      - name: Run tests\n        run: bundle exec rake test\n```", "answer": "```yaml name: Buildkite\non:\n  issue_comment:\n    types: [created]\njobs:\n  add_ci_label:\n    name: \"Add CI label to pull request\"\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/ci') && (github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'CONTRIBUTOR')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions-ecosystem/action-add-labels@v1\n        with:\n          github_token: ${{ secrets.github_token }}\n          labels: ci\n\n  build_containers:\n    name: \"Run forem/build-containers pipeline\"\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '/ci') && (github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'CONTRIBUTOR')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: ./scripts/create_buildkite_pr_build.sh\n        env:\n          BUILDKITE_API_ACCESS_TOKEN: ${{ secrets.buildkite_api_access_token }}\n          PIPELINE: \"forem/build-containers\"\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PULL_REQUEST_ID: ${{ github.event.issue.number }}\n```"}
{"llm_response": "```yaml\nname: Publish Release\n\non:\n  release:\n    types: [published, prerelease, draft]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '17'\n\n      - name: Build project\n        run: mvn clean install\n\n      - name: Upload release to Nexus\n        uses: sonatype/github-action@v3\n        with:\n          username: ${{ secrets.GITHUB_USERNAME }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n          nexus-url: https://oss.sonatype.org/service/local/staging/deploy/maven2/\n          staging-repo-id: my-staging-repo\n          skip-nexus-staging-check: true\n          maven-settings-file: .m2/settings.xml\n```", "answer": "```yaml name: Publish release\n\non:\n  release:\n    types: [published]\n\njobs:\n  build:\n    name: Build and upload release\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.4\n      - name: Set up JDK 1.11\n        uses: actions/setup-java@v2.3.0\n        with:\n          distribution: 'adopt'\n          java-version: '11'\n          check-latest: true\n          cache: 'maven'\n      - name: Build with Maven\n        run: mvn -B package --file pom.xml\n      - name: Upload release artifact\n        uses: shogo82148/actions-upload-release-asset@v1.3.1\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: sonar-flutter-plugin/target/sonar-flutter-plugin-*.jar\n```"}
{"llm_response": "```yaml\nname: GQL generation\n\non:\n  - push:\n      branches:\n        - main\n  - pull_request:\n      branches:\n        - main\n  - release:\n\njobs:\n  gqlgen:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '1.16'\n    - name: Install dependencies\n      run: go mod download\n    - name: Generate GraphQL schema\n      run: ./generate-gql.sh\n```", "answer": "```yaml name: \"GQL generation\"\n\n# Validate gqlgen works\n# Validate there are no uncommitted changes after running gqlgen\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches: [main]\n  release:\n    types:\n      - published\n\npermissions: read-all\n\njobs:\n  gqlgen:\n    name: Check GQL generation\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.19.x\n      - name: Install dependencies\n        run: |\n          cd $GITHUB_WORKSPACE\n          go mod download\n      - name: Run gqlgen\n        run: |\n            make gqlgen\n      - name: Verify uncommitted files\n        run: |\n            make verify-gql-committed\n```"}
{"llm_response": "```yaml\nname: Deploy to PyPI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n    types:\n      - \"manual\"\n      - \"release\"\n\njobs:\n  dist:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel twine\n      - name: Build distribution\n        run: |\n          python setup.py sdist bdist_wheel\n      - name: Upload distributions to PyPI\n        run: |\n          twine upload dist/*\n\n  publish:\n    needs: dist\n    runs-on: ubuntu-latest\n    steps:\n      - name: Log in to PyPI\n        uses: pypa/gh-actions-pypi-publish@v2\n        with:\n          token: ${{ secrets.PYPI_TOKEN }}\n      - name: Verify PyPI login\n        run: |\n          pip show pypa-gh-actions-pypi-publish\n```", "answer": "```yaml name: Deploy to PyPI\n\non:\n  workflow_dispatch:\n  release:\n    types:\n    - published\n\njobs:\n  dist:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build wheel and SDist\n      run: pipx run build\n\n    - name: Check metadata\n      run: pipx run twine check dist/*\n\n    - uses: actions/upload-artifact@v3\n      with:\n        path: dist/*\n\n\n  publish:\n    needs: [dist]\n    runs-on: ubuntu-latest\n    if: github.event_name == 'release' && github.event.action == 'published'\n\n    steps:\n    - uses: actions/download-artifact@v3\n      with:\n        name: artifact\n        path: dist\n\n    - uses: pypa/gh-action-pypi-publish@v1.5.1\n      with:\n        password: ${{ secrets.pypi_password }}\n```"}
{"llm_response": "```yaml delivery/release-dispatch:\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n      branches:\n        - main\n    release:\n      types:\n        - published\n        - prerelease\n    workflow_dispatch:\n      types:\n        - release\n    schedule:\n      - cron: '0 2 * * *' # Trigger every day at 2 AM\n\n  jobs:\n    send-release-dispatch:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n\n        - name: Set up Go\n          uses: actions/setup-go@v2\n          with:\n            go-version: '1.16'\n\n        - name: Install dependencies\n          run: go mod download\n\n        - name: Build the project\n          run: go build -o app .\n\n        - name: Dispatch the release\n          run: |\n            curl -X POST \\\n              https://api.github.com/repos/<owner>/<repo>/dispatches \\\n              -H \"Accept: application/vnd.github.v4+json\" \\\n              -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n              -d '\n                {\n                  \"event_type\": \"release\",\n                  \"client_payload\": {\n                    \"ref\": \"${{ github.ref }}\",\n                    \"tag_name\": \"${{ github.release.tag_name }}\"\n                  }\n                }'\n```", "answer": "```yaml name: delivery / release-dispatch\n\non:\n  release:\n    types:\n      - released\n\njobs:\n  send-release-dispatch:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        repo: ['buildpacks/docs', 'buildpacks/samples', 'buildpacks/pack-orb', 'buildpacks/github-actions']\n    steps:\n      - name: Repository Dispatch\n        uses: peter-evans/repository-dispatch@v2\n        with:\n          token: ${{ secrets.PLATFORM_GITHUB_TOKEN }}\n          event-type: pack-release\n          repository: ${{ matrix.repo }}\n```"}
{"llm_response": "```yaml\nname: Lighthouse Review Requested\n\non:\n  pull_request_review_requested:\n    branches:\n      - main\n\njobs:\n  add_review_label:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Add P2 label and project\n        run: |\n          # Add P2 label to the PR\n          gitlab-ci-lint add-labels --label=p2\n\n          # Set project for the PR\n          gitlab-ci-lint set-project --project=your-project-id\n```", "answer": "```yaml name: Lighthouse Review Requested\n\non:\n  pull_request:\n    types: [review_requested]\n\njobs:\n  add_review_label:\n    runs-on: ubuntu-latest\n    name: Add P2 labels and project\n    steps:\n      - name: Add label \"Needs Review\"\n        if: ${{ contains(github.event.pull_request.requested_teams.*.name, 'Lighthouse') }}\n        run: |\n          curl --request POST \\\n          --url 'https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels' \\\n          --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \\\n          --header 'Accept: application/vnd.github.v3+json' \\\n          --data-raw '{\"labels\":[\"[Status] Needs Review\"]}'\n\n      - name: Add author as assignee\n        if: ${{ contains(github.event.pull_request.requested_teams.*.name, 'Lighthouse') }}\n        run: |\n          curl --request PATCH \\\n          --url 'https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}' \\\n          --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \\\n          --header 'Accept: application/vnd.github.v3+json' \\\n          --data-raw '{\"assignees\": [ \"${{ github.event.pull_request.user.login }}\" ]}'\n\n      - name: Add to P2 project board\n        if: ${{ contains(github.event.pull_request.requested_teams.*.name, 'Lighthouse') }}\n        run: |\n          curl --request POST \\\n            --url 'https://api.github.com/projects/columns/8374542/cards' \\\n            --header 'Accept: application/vnd.github.inertia-preview+json' \\\n            --header 'Authorization: token ${{ secrets.AUTOMATTIC_FINANCE }}' \\\n            --header 'Content-Type: application/json; charset=utf-8' \\\n            --data-raw '{\"content_type\": \"PullRequest\", \"content_id\": ${{ github.event.pull_request.id }}}'\n```"}
{"llm_response": "```yaml\nname: First Interaction\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  first-interaction:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: 'First Interaction'\n\non:\n  pull_request:\n\njobs:\n  first-interaction:\n    name: First Interaction\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/first-interaction@v1\n        with:\n          repo-token: ${{ secrets.GITHUB_TOKEN }}\n          pr-message: 'Welcome to Vega. Since this is your first contribution, please make sure to read the [contributing guide](https://github.com/vega/vega-lite/blob/next/CONTRIBUTING.md).'\n```"}
{"llm_response": "```yaml\nname: C++\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  clang-format:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        sudo apt-get update && \\\n        sudo apt-get install -y clang-format-10\n\n    - name: Format code with Clang-format\n      run: |\n        clang-format --version\n        clang-format -i --style=Google *.cpp *.h\n\n  cpplint:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        sudo apt-get update && \\\n        sudo apt-get install -y cpplint\n\n    - name: Run CPPLint\n      run: |\n        cpplint .\n```", "answer": "```yaml name: C++\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n\njobs:\n  clang-format:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        path:\n          - \"include\"\n          - \"lib\"\n          - \"src\"\n          - \"tests\"\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Run clang-format style check\n        uses: jidicula/clang-format-action@v4.9.0\n        with:\n          clang-format-version: '14'\n          check-path: ${{ matrix.path }}\n\n  cpplint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install cpplint\n        run: pip install cpplint\n\n      - name: Run cpplint\n        run: cpplint --recursive .\n```"}
{"llm_response": "```yaml CI\n\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *' # Runs daily at midnight\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up .NET SDK\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.x'\n      - name: Restore NuGet packages\n        run: dotnet restore\n      - name: Build solution\n        run: dotnet build --configuration Release\n      - name: Test solution\n        run: dotnet test --configuration Release\n```", "answer": "```yaml name: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup .Net Core\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '6.0.x'\n      - name: Install Dependencies\n        run: dotnet restore\n      - name: Build\n        run: dotnet build --configuration Release --no-restore\n      - name: Run Tests\n        run: dotnet test --no-restore\n```"}
{"llm_response": "```yaml\nname: Upload Python Package\n\non:\n  release:\n    types: [published, prerelease, draft]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel twine\n      - name: Build package\n        run: |\n          python setup.py sdist bdist_wheel\n      - name: Upload to PyPI\n        run: |\n          twine upload dist/*\n```", "answer": "```yaml name: Upload Python Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.x\"\n      - name: Install dependencies\n        run: |\n          pip install setuptools wheel twine\n      - name: Build and publish\n        run: |\n          python setup.py sdist bdist_wheel\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Upload Python package\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n    types:\n      - save-draft\n      - publish\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.6, 3.7, 3.8]\n        os: [ubuntu-latest]\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python }}\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip setuptools wheel\n        python -m pip install pytest\n    - name: Run tests\n      run: pytest\n```", "answer": "```yaml name: Upload Python package\non:\n  release:\n    types: [created]\n\n# Required shell entrypoint to have properly activated conda environments\ndefaults:\n  run:\n    shell: bash -l {0}\n\njobs:\n  build:\n    name: build py3.${{ matrix.python }} on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        python: [\"8\", \"9\", \"10\"] # 3.x\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set up QEMU for linux aarch64\n        if: contains(matrix.os, 'ubuntu')\n        uses: docker/setup-qemu-action@v2\n        with:\n          platforms: arm64\n      - name: Add arm64 target for macos\n        if: contains(matrix.os, 'macos')\n        run: rustup target add aarch64-apple-darwin\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.10.2\n        env:\n          CIBW_BUILD: 'cp3${{ matrix.python }}-*'\n          CIBW_SKIP: '*musllinux*'\n          CIBW_ARCHS_LINUX: 'aarch64 x86_64'\n          CIBW_ARCHS_WINDOWS: 'AMD64'\n          CIBW_ARCHS_MACOS: 'x86_64 arm64'\n          CIBW_ENVIRONMENT_LINUX: 'CARGO_NET_GIT_FETCH_WITH_CLI=\"true\" PATH=\"$HOME/.cargo/bin:$PATH\"'\n          # Without CARGO_NET_GIT_FETCH_WITH_CLI we oom (https://github.com/rust-lang/cargo/issues/10583)\n          CIBW_ENVIRONMENT_WINDOWS: 'PATH=\"$UserProfile\\.cargo\\bin;$PATH\"'\n          CIBW_BEFORE_BUILD: 'pip install -U setuptools-rust'\n          CIBW_BEFORE_BUILD_LINUX: >\n            pip install -U setuptools-rust &&\n            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y &&\n            rustup show\n        with:\n          package-dir: .\n          output-dir: dist\n          config-file: \"dask_planner/pyproject.toml\"\n      - name: Set up Python\n        uses: conda-incubator/setup-miniconda@v2\n        with:\n          miniforge-variant: Mambaforge\n          use-mamba: true\n          python-version: \"3.8\"\n          channel-priority: strict\n      - name: Build source distribution\n        if: contains(matrix.os, 'ubuntu') && matrix.python == '8'\n        run: |\n          mamba install setuptools-rust\n\n          python setup.py sdist\n      - name: Check dist files\n        run: |\n          mamba install twine\n\n          twine check dist/*\n          ls -lh dist/\n      - name: Upload binary wheels\n        uses: actions/upload-artifact@v3\n        with:\n          name: wheels for py3.${{ matrix.python }} on ${{ matrix.os }}\n          path: dist/*\n      - name: Publish package\n        env:\n          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}\n          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\n        run: twine upload dist/*\n```"}
{"llm_response": "```yaml\nname: License\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - main\n\njobs:\n  license-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Grant GITHUB_TOKEN read access to contents scope\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          echo \"::set-output name=permissions::read\"\n      - name: Check if README.md exists\n        run: |\n          if [ ! -f \"README.md\" ]; then\n            echo \"README.md not found\"\n            exit 1\n          fi\n      - name: Display README.md content\n        run: cat README.md\n```", "answer": "```yaml #\n# Copyright (c) 2019 Red Hat, Inc.\n# This program and the accompanying materials are made\n# available under the terms of the Eclipse Public License 2.0\n# which is available at:\n#\n#     https://www.eclipse.org/legal/epl-2.0/\n#\n# SPDX-License-Identifier: EPL-2.0\n#\n# Contributors:\n#   Red Hat, Inc. - initial API and implementation\n#\n\nname: License\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\npermissions:  # added using https://github.com/step-security/secure-workflows\n  contents: read\n\njobs:\n  license-check:\n    name: License Check\n    runs-on: ubuntu-latest\n    steps:\n      - name: Harden Runner\n        uses: step-security/harden-runner@2e205a28d0e1da00c5f53b161f4067b052c61f34\n        with:\n          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs\n\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n      - name: Setup Java 11\n        uses: actions/setup-java@a18c333f3f14249953dab3e186e5e21bf3390f1d\n        with:\n          java-version: '11'\n          distribution: 'adopt'\n      - name: Check License Headers\n        run: mvn -N license:check\n```"}
{"llm_response": "```yaml CodeQL\n\nname: CodeQL\n\non:\n  schedule:\n    - cron: '0 2 * * *'\n\nenv:\n  NODE_VERSION: 18\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n\n      - name: Run CodeQL analysis\n        run: |\n          npx codeql query run --repository=my-repo --commit-hash=main\n```", "answer": "```yaml name: CodeQL\non:\n  schedule:\n    - cron: \"0 2 * * *\"\nenv:\n  NODE_VERSION: 18\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: javascript\n\n      - name: Set up Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          check-latest: true\n          cache: npm\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run build task\n        run: npm run build --workspace=admin-ui\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Build\n\non:\n  push:\n    branches:\n      - main\n      - release\n      - releases/*\n  pull_request:\n    branches:\n      - main\n      - release\n      - releases/*\n\njobs:\n  build_wheels:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Build wheels\n        run: python setup.py bdist_wheel\n\n  make_sdist:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Make source distribution\n        run: python setup.py sdist\n\n  upload_all:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: sdists\n          path: dist/\n```", "answer": "```yaml name: Build\n\non:\n  push:\n    branches:\n      - main\n      - release\n      - 'releases/**'\n  pull_request:\n    branches:\n      - main\n      - release\n      - 'releases/**'\n  \njobs:\n\n  build_wheels:\n    name: Build wheels on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, windows-2019, macOS-11]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      # Used to host cibuildwheel\n      - uses: actions/setup-python@v3\n\n      - name: Install cibuildwheel\n        run: python -m pip install cibuildwheel==2.8.1\n\n      - name: Build wheels\n        run: python -m cibuildwheel --output-dir wheelhouse\n        # to supply options, put them in 'env', like:\n        # env:\n        #   CIBW_SOME_OPTION: value\n        # Disable building PyPy wheels on all platforms\n        env:\n            CIBW_ARCHS_LINUX: auto aarch64\n            CIBW_ARCHS_MACOS: x86_64 universal2 arm64\n            CIBW_SKIP: pp*\n\n      - uses: actions/upload-artifact@v3\n        with:\n          path: ./wheelhouse/*.whl\n\n  make_sdist:\n    name: Make SDist\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        fetch-depth: 0  # Optional, use if you use setuptools_scm\n        submodules: true  # Optional, use if you have submodules\n\n    - name: Build SDist\n      run: pipx run build --sdist\n\n    - uses: actions/upload-artifact@v3\n      with:\n        path: dist/*.tar.gz\n\n  upload_all:\n    needs: [build_wheels, make_sdist]\n    runs-on: ubuntu-latest\n    if: github.event_name == 'release' && github.event.action == 'published'\n    steps:\n    - uses: actions/download-artifact@v3\n      with:\n        name: artifact\n        path: dist\n\n    - uses: pypa/gh-action-pypi-publish@v1.5.0\n      with:\n        user: __token__\n        password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Closed Issue Message\n\non:\n  issues:\n    types:\n      - closed\n\njobs:\n  auto_comment:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up C++\n        uses: actions/setup-cpp@v2\n        with:\n          c++-version: '11'\n\n      - name: Build and run tests\n        run: |\n          mkdir build\n          cd build\n          cmake ..\n          make\n          ./test\n\n      - name: Send message to closed issue\n        if: ${{ github.event.issue.state == 'closed' }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          curl -X POST \\\n            https://api.github.com/repos/<username>/<repository>/issues/${{ github.event.issue.number }}/comments \\\n            -H \"Authorization: token $GITHUB_TOKEN\" \\\n            -d '{\"body\": \"Thank you for closing this issue! We appreciate your contribution.\"}'\n```", "answer": "```yaml name: Closed Issue Message\non:\n    issues:\n       types: [closed]\njobs:\n    auto_comment:\n        runs-on: ubuntu-latest\n        permissions:\n          issues: write\n        steps:\n        - uses: aws-actions/closed-issue-message@v1\n          with:\n            # These inputs are both required\n            repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n            message: |\n                     ### \u26a0\ufe0fCOMMENT VISIBILITY WARNING\u26a0\ufe0f \n                     Comments on closed issues are hard for our team to see. \n                     If you need more assistance, please either tag a team member or open a new issue that references this one. \n                     If you wish to keep having a conversation with other community members under this issue feel free to do so.\n```"}
{"llm_response": "```yaml\nname: IntelliJ Plugin Verifier\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - '**'\n  pull_request:\n    branches:\n      - master\n    paths-ignore:\n      - '**'\n\njobs:\n  ij-verify:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Java\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n    - name: Run IntelliJ Plugin Verifier\n      run: |\n        ./mvnw verify\n```", "answer": "```yaml name: Intellij Plugin Verifier\n\non:\n  push:\n    branches: [ master ]\n    paths: extension-intellij/**\n  pull_request:\n    branches: [ master ]\n    paths: extension-intellij/**\n\njobs:\n  ij-verify:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ./.github/setup\n      - run: bb -m tasks.ijverify/verify\n```"}
{"llm_response": "```yaml\nname: build\n\non:\n  push:\n    branches:\n      - main\n      - release/*\n  pull_request:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '3.x'\n      - name: Restore dependencies\n        run: dotnet restore\n      - name: Build\n        run: dotnet build --configuration Release\n```", "answer": "```yaml name: build\n\non:\n  push:\n    branches:\n      - main\n      - release/*\n  pull_request:\n\njobs:\n  build:\n    name: ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      fail-fast: false\n      matrix:\n        # Using macos-12 because we need Xcode 13.3 or later to build Sentry.Samples.Maui. (macos-latest currently points at macos-11 which uses Xcode 13.2)\n        # Using windows-2019 because windows-latest is much slower and we don't need anything in particular from it.\n        os: [ubuntu-latest, windows-2019, macos-12]\n\n    steps:\n      - name: Cancel Previous Runs\n        uses: styfle/cancel-workflow-action@b173b6ec0100793626c2d9e6b90435061f4fc3e5 # Tag: 0.11.0\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: recursive\n\n      - name: Setup Environment\n        uses: ./.github/actions/environment\n\n      - name: Build Native Dependencies\n        uses: ./.github/actions/buildnative\n\n      - name: Restore .NET Dependencies\n        run: dotnet restore Sentry-CI-Build-${{ runner.os }}.slnf --nologo\n\n      - name: Build\n        run: dotnet build Sentry-CI-Build-${{ runner.os }}.slnf -c Release --no-restore --nologo /p:CopyLocalLockFileAssemblies=true\n\n      - name: Test\n        run: dotnet test Sentry-CI-Test.slnf -c Release --no-build --nologo -l GitHubActions -l \"trx;LogFilePrefix=testresults_${{ runner.os }}\"\n\n      - name: Upload Verify Results\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: verify-test-results\n          path: \"**/*.received.*\"\n\n      # To save time and disk space, we only create and archive the Nuget packages when we're actually releasing.\n      # We use macOS for that so we we get all the iOS/macCatalyst targets in the packages\n\n      - name: Create Nuget Packages (release only)\n        if: startsWith(matrix.os, 'macos') && startsWith(github.ref_name, 'release/')\n        run: dotnet pack Sentry-CI-Pack.slnf -c Release --no-build --nologo\n\n      - name: Archive Nuget Packages (release only)\n        if: startsWith(matrix.os, 'macos') && startsWith(github.ref_name, 'release/')\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ github.sha }}\n          if-no-files-found: error\n          path: |\n            ${{ github.workspace }}/src/**/Release/*.nupkg\n```"}
{"llm_response": "```yaml\nname: Renovate\n\non:\n  pull_request:\n    branches-ignore:\n      - main\n    types:\n      - opened\n      - edited\n      - closed\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - .gitignore\n      - .travis.yml\n    events:\n      - schedule\n      - workflow_dispatch\n  issues:\n    labels:\n      - 'bug'\n    types:\n      - created\n      - opened\n      - assigned\n      - unassigned\n      - labeled\n      - unlabeled\n      - ready_for_review\n      - reopened\n      - synchronize\n      - closed\njobs:\n  renovate:\n    runs-on: ubuntu-latest\n    env:\n      LOG_LEVEL: info\n      RENOVATE_CONFIG_FILE: .github/renovate.json5\n      RENOVATE_DRY_RUN: False\n      RENOVATE_REPOSITORIES: ${{ github.repository }}\n      RENOVATE_USERNAME: ${{ github.repository_owner }}\n      RENOVATE_GIT_AUTHOR: Renovate Bot <bot@renovateapp.com>\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run Renovate\n        run: ./node_modules/.bin/renovate --config .github/renovate.json5 --dry-run=${{ inputs.dryRun }} --log-level=${{ inputs.logLevel }}\n```", "answer": "```yaml name: Renovate\n\non:\n  workflow_dispatch:\n    inputs:\n      dryRun:\n        type: choice\n        description: \"Dry-Run\"\n        default: \"false\"\n        options:\n          - true\n          - false\n      logLevel:\n        type: choice\n        description: \"Log-Level\"\n        default: \"debug\"\n        options:\n          - info\n          - debug\n          - trace\n  push:\n    branches:\n      - main\n    paths:\n      - \".github/renovate.json5\"\n  schedule:\n    - cron: \"3,13,23,33 3 * * 0\"\n\nenv:\n  LOG_LEVEL: info\n  RENOVATE_CONFIG_FILE: .github/renovate.json5\n  RENOVATE_DRY_RUN: false\n  RENOVATE_REPOSITORIES: ${{ github.repository }}\n  RENOVATE_USERNAME: ${{ github.repository_owner }}\n  RENOVATE_GIT_AUTHOR: \"Renovate Bot <bot@renovateapp.com>\"\n\njobs:\n  renovate:\n    runs-on: ubuntu-latest\n    concurrency:\n      group: renovate\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Generate Token\n        uses: tibdex/github-app-token@v1\n        id: generate-token\n        with:\n          app_id: ${{ secrets.MY_RENOVATE_GITHUB_APP_ID }}\n          private_key: \"${{ secrets.MY_RENOVATE_GITHUB_PRIVATE_KEY }}\"\n\n      - name: Override default config from dispatch variables\n        run: |\n          echo \"RENOVATE_DRY_RUN=${{ github.event.inputs.dryRun || env.RENOVATE_DRY_RUN }}\" | tee -a \"${GITHUB_ENV}\"\n          echo \"LOG_LEVEL=${{ github.event.inputs.logLevel || env.LOG_LEVEL }}\" | tee -a \"${GITHUB_ENV}\"\n          echo \"RENOVATE_BASE_BRANCHES=${GITHUB_REF##*/}\" | tee -a \"${GITHUB_ENV}\"\n\n      - name: Self-hosted Renovate\n        uses: renovatebot/github-action@v32.238.3\n        with:\n          configurationFile: \"${{ env.RENOVATE_CONFIG_FILE }}\"\n          token: \"x-access-token:${{ steps.generate-token.outputs.token }}\"\n```"}
{"llm_response": "```yaml Publish\n\nname: Publish\n\non:\n  - release\n  - pull_request\n  - push\n    branches:\n      - main\n\njobs:\n  publish_hacs_zip_file:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: pip install setuptools wheel\n\n      - name: Build package\n        run: python setup.py sdist bdist_wheel\n\n      - name: Upload package to HACS\n        uses: hacs/actions/upload-package@v1\n        with:\n          username: ${{ secrets.HACS_USERNAME }}\n          password: ${{ secrets.HACS_PASSWORD }}\n          package_name: your_package_name\n          version: ${{ github.tag_name }}\n          filename: dist/your_package_name-*.tar.gz\n```", "answer": "```yaml name: Publish\n\non:\n  release:\n    types:\n      - published\n  push:\n    branches:\n      - main\n\njobs:\n  release_zip_file:\n    name: Publish HACS zip file asset\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: \ud83d\udce5 Checkout the repository\n        uses: actions/checkout@v3.1.0\n\n      - name: \ud83d\udee0\ufe0f Set up Python\n        uses: actions/setup-python@v4.3.0\n        with:\n          python-version: \"3.x\"\n          cache: 'pip'\n\n      - name: \ud83d\udd22 Get version\n        id: version\n        uses: home-assistant/actions/helpers/version@master\n\n      - name: \ud83d\udd22 Set version number\n        run: |\n          sed -i \"/MINIMUM_HA_VERSION = /c\\MINIMUM_HA_VERSION = \\\"$(jq .homeassistant -r ${{ github.workspace }}/hacs.json)\\\"\" ${{ github.workspace }}/custom_components/hacs/const.py\n          python3 ${{ github.workspace }}/manage/update_manifest.py --version ${{ steps.version.outputs.version }}\n\n      - name: \u23ec Download HACS frontend\n        run: ${{ github.workspace }}/manage/install_frontend\n\n      - name: \ud83d\udce4 Upload zip to action\n        uses: actions/upload-artifact@v3.1.0\n        if: ${{ github.event_name == 'push' }}\n        with:\n          name: hacs\n          path: ${{ github.workspace }}/custom_components/hacs\n\n      # Pack the HACS dir as a zip and upload to the release\n      - name: \ud83d\udce6 ZIP HACS Dir\n        if: ${{ github.event_name == 'release' }}\n        run: |\n          cd ${{ github.workspace }}/custom_components/hacs\n          zip hacs.zip -r ./\n\n      - name: \ud83d\udce4 Upload zip to release\n        uses: softprops/action-gh-release@v0.1.14\n        if: ${{ github.event_name == 'release' }}\n        with:\n          files: ${{ github.workspace }}/custom_components/hacs/hacs.zip\n\n```"}
{"llm_response": "```yaml\nname: iOS app\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    paths-ignore:\n      - main\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  check-formatting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Format Swift files\n        run: swiftfmt . --style Apple --skip-stdin\n\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run unit tests\n        run: swift test\n```", "answer": "```yaml name: iOS app\non:\n    pull_request:\n        paths:\n            - \".github/workflows/ios.yml\"\n            - \"ios/.swiftformat\"\n            - \"ios/**/*.swift\"\n    # Build if requested manually from the Actions tab\n    workflow_dispatch:\njobs:\n    check-formatting:\n        name: Check formatting\n        runs-on: macos-11\n        steps:\n            - name: Install SwiftFormat\n              run: |\n                brew update\n                brew upgrade swiftformat\n\n            - name: Checkout repository\n              uses: actions/checkout@v3\n\n            - name: Check formatting\n              run: |\n                swiftformat --version\n                swiftformat --lint .\n\n    test:\n        name: Unit tests\n        runs-on: macos-11\n        strategy:\n            matrix:\n                destination: ['platform=iOS Simulator,OS=13.7,name=iPhone 8']\n        env:\n            source_packages_dir: .spm\n        steps:\n            - name: Checkout repository\n              uses: actions/checkout@v3\n\n            - name: Configure cache\n              uses: actions/cache@v3\n              with:\n                path: ios/${{ env.source_packages_dir }}\n                key: ${{ runner.os }}-spm-${{ hashFiles('ios/**/Package.resolved') }}\n                restore-keys: |\n                  ${{ runner.os }}-spm-\n\n            - name: Setup go-lang\n              uses: actions/setup-go@v3\n              with:\n                  go-version: 1.18.5\n\n            - name: Prepare iOS simulator\n              run: |\n                  sudo mkdir -p /Library/Developer/CoreSimulator/Profiles/Runtimes\n                  sudo ln -s /Applications/Xcode_11.7.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\\ 13.7.simruntime\n\n            - name: Configure Xcode project\n              run: |\n                  cp Base.xcconfig.template Base.xcconfig\n                  cp App.xcconfig.template App.xcconfig\n                  cp PacketTunnel.xcconfig.template PacketTunnel.xcconfig\n                  cp Screenshots.xcconfig.template Screenshots.xcconfig\n              working-directory: ios/Configurations\n\n            - name: Convert Package.resolved v2 -> v1\n              run: |\n                  jq '{\n                    \"object\": {\n                      \"pins\": .pins | map({\n                        \"package\": .identity,\n                        \"repositoryURL\": .location,\n                        \"state\": .state\n                      })\n                    },\n                    \"version\": 1\n                  }' Package.resolved > Package.resolved.out\n                  mv Package.resolved.out Package.resolved\n              working-directory: ios/MullvadVPN.xcodeproj/project.xcworkspace/xcshareddata/swiftpm\n\n            - name: Run MullvadVPNTests\n              run: |\n                  xcodebuild test \\\n                      -project MullvadVPN.xcodeproj \\\n                      -scheme MullvadVPNTests \\\n                      -destination \"${destination}\" \\\n                      -clonedSourcePackagesDirPath \"${SOURCE_PACKAGES_PATH}\" \\\n                      CODE_SIGN_IDENTITY=\"\" \\\n                      CODE_SIGNING_REQUIRED=NO \\\n                      ONLY_ACTIVE_ARCH=YES\n              working-directory: ios\n              env:\n                  destination: ${{ matrix.destination }}\n                  SOURCE_PACKAGES_PATH: ${{ env.source_packages_dir }}\n\n            - name: Run OperationsTests\n              run: |\n                  xcodebuild test \\\n                      -project MullvadVPN.xcodeproj \\\n                      -scheme OperationsTests \\\n                      -destination \"${destination}\" \\\n                      -clonedSourcePackagesDirPath \"${SOURCE_PACKAGES_PATH}\" \\\n                      CODE_SIGN_IDENTITY=\"\" \\\n                      CODE_SIGNING_REQUIRED=NO \\\n                      ONLY_ACTIVE_ARCH=YES\n              working-directory: ios\n              env:\n                  destination: ${{ matrix.destination }}\n                  SOURCE_PACKAGES_PATH: ${{ env.source_packages_dir }}\n```"}
{"llm_response": "```yaml\nname: Unit Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up .NET SDK\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.x'\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build solution\n      run: dotnet build --configuration Release\n\n    - name: Run unit tests\n      run: dotnet test --configuration Release --verbosity normal\n```", "answer": "```yaml name: Unit Test\n\non:\n  push:\n    branch: [\"dev\",\"ci-net5\"]\n  pull_request:\n    branch: [\"dev\",\"master\"]\n\njobs:\n  build:\n    runs-on: windows-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n      \n    - name: Setup .NET\n      uses: actions/setup-dotnet@v1\n      with:\n        dotnet-version: 5.0.*\n    - name: Install dependencies\n      run: dotnet restore src/\n    \n    - name: Download adb binaries.\n      run: ./scripts/get_adb.ps1\n      \n    - name: Building with script\n      run: ./scripts/build_canary.ps1\n\n    - name: Unit Test\n      run: dotnet test src/\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@v2\n      with:\n        name: Canary-Artifact\n        path: AutumnBox-Canary # or path/to/artifact```"}
{"llm_response": "```yaml\nname: Files Existence\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    types:\n      - opened\n      - edited\n      - closed\n      - rebase\n      - synchronize\n\njobs:\n  file_existence:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Check if necessary files exist\n      run: |\n        go mod download\n        go test ./...\n      shell: bash\n```", "answer": "```yaml name: Files existence\n\non:\n  pull_request:\n    types: [ opened, edited, synchronize, reopened ]\n\njobs:\n  file_existence:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Check if important files exist\n        id: check_files\n        uses: andstor/file-existence-action@v2\n        with:\n          files: \"pkg/defaultRules/defaultRules.yaml, pkg/defaultPolicies/defaultPolicies.yaml\"\n          fail: true\n```"}
{"llm_response": "```yaml\nname: Sync to Gitee\n\non:\n  push:\n    branches:\n      - main\n      - '2.x'\n      - '3.x'\n      - gh-pages\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build project\n      run: npm run build\n\n    - name: Push to Gitee\n      uses: jakejarvis/gitee-action@v0.16.0\n      with:\n        repo-token: ${{ secrets.GITEE_TOKEN }}\n        source-dir: dist\n        target-repo: your-gitee-username/your-repo-name\n        target-path: dist\n```", "answer": "```yaml name: Sync to Gitee\n\non:\n  push:\n    branches: [main, 2.x, 3.x, gh-pages]\n\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Sync to Gitee\n        uses: wearerequired/git-mirror-action@master\n        env:\n          # \u5728 Settings->Secrets \u914d\u7f6e GITEE_RSA_PRIVATE_KEY\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n        with:\n          # GitHub \u6e90\u4ed3\u5e93\u5730\u5740\n          source-repo: git@github.com:vant-ui/vant.git\n          # Gitee \u76ee\u6807\u4ed3\u5e93\u5730\u5740\n          destination-repo: git@gitee.com:vant-contrib/vant.git\n```"}
{"llm_response": "```yaml Cleaning:\non:\n  schedule:\n    - cron: '0 1 * * 1'\n      if: github.event.starred\n  push:\n    branches-ignore: [main]\njobs:\n  Cleanup-Old-Releases:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Delete old releases\n        run: |\n          # Add your command to delete old releases here\n          echo \"Deleting old releases...\"\n  Cleanup-Old-Artifacts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Delete old artifacts\n        run: |\n          # Add your command to delete old artifacts here\n          echo \"Deleting old artifacts...\"\n  Cleanup-Workflow-Logs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Delete workflow logs\n        run: |\n          # Add your command to delete workflow logs here\n          echo \"Deleting workflow logs...\"\n```", "answer": "```yaml name: Cleaning\n\non:\n  schedule:\n    - cron: 1 1 * * 1\n  watch:\n    types: started\n\njobs:\n  \n  Cleanup-Old-Releases:\n    runs-on: ubuntu-20.04\n    if: github.event.repository.owner.id == github.event.sender.id\n    steps:  \n    - name: Delete Older Releases\n      uses: dev-drprasad/delete-older-releases@master\n      with:\n        keep_latest: 9\n        delete_tags: true\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  Cleanup-Old-Artifacts:\n    runs-on: ubuntu-20.04\n    if: github.event.repository.owner.id == github.event.sender.id\n    steps:\n    - name: Cleanup Old Action Artifacts\n      uses: heidi-pay/gha-delete-artifacts@main\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        days: 3\n        max-artifacts-to-delete: 100\n        dry-run: no\n        \n  Cleanup-Workflow-Logs:\n    runs-on: ubuntu-20.04\n    if: github.event.repository.owner.id == github.event.sender.id\n    steps:\n      - name: Cleanup Workflow Logs\n        uses: Mattraks/delete-workflow-runs@main\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n          repository: ${{ github.repository }}\n          retain_days: 3\n```"}
{"llm_response": "```yaml build-publish:\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  release:\n    types:\n      - prerelease\n      - draft\n\njobs:\n  build-wheels:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Build wheels\n        run: |\n          python setup.py bdist_wheel\n\n  publish:\n    runs-on: ubuntu-latest\n    needs: [build-wheels]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Publish to PyPI\n        run: |\n          twine upload dist/*\n```", "answer": "```yaml # This workflow will build and (if release) publish Python distributions to PyPI\n# For more information see:\n#   - https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n#   - https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/\n#\n\n---\nname: build-publish\n\non:\n  push:\n    branches: [master]\n  pull_request:\n    branches: [master]\n  release:\n    types: [published]\n\njobs:\n  build-wheels:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install pypa/build\n        run: >-\n          python -m\n          pip install -U\n          build\n      - name: Build a binary wheel and a source tarball\n        run: >-\n          python -m\n          build\n          --sdist\n          --wheel\n          --outdir dist/\n          .\n      - name: Store wheels\n        uses: actions/upload-artifact@v3\n        with:\n          path: dist\n\n  publish:\n    runs-on: ubuntu-latest\n    needs:\n      - build-wheels\n    if: github.event_name == 'release' && github.event.action == 'published'\n    steps:\n      - name: Download dists\n        uses: actions/download-artifact@v3\n        with:\n          name: artifact\n          path: dist\n      - name: Publish\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Android Instrumentation Tests\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - packages/@expo/cli/**\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - packages/@expo/cli/**\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      # Add your test commands here\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up JDK\n        uses: actions/setup-java@v2\n        with:\n          java-version: '11'\n      - name: Install dependencies\n        run: |\n          ./gradlew build\n      - name: Run tests\n        run: |\n          ./gradlew test\n```", "answer": "```yaml name: Android Instrumentation Tests\n\non:\n  workflow_dispatch: {}\n  push:\n    branches: [main]\n    paths:\n      - .github/workflows/android-instrumentation-tests.yml\n      - android/**\n      - fastlane/**\n      # - packages/**/android/**\n      - packages/expo-eas-client/android/**\n      - packages/expo-json-utils/android/**\n      - packages/expo-manifests/android/**\n      - packages/expo-updates/android/**\n      - yarn.lock\n      - '!packages/@expo/cli/**'\n  pull_request:\n    paths:\n      - .github/workflows/android-instrumentation-tests.yml\n      - android/**\n      - fastlane/**\n      # - packages/**/android/**\n      - packages/expo-eas-client/android/**\n      - packages/expo-json-utils/android/**\n      - packages/expo-manifests/android/**\n      - packages/expo-updates/android/**\n      - yarn.lock\n      - '!packages/@expo/cli/**'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  test:\n    runs-on: macos-11\n    timeout-minutes: 120\n    env:\n      ORG_GRADLE_PROJECT_reactNativeArchitectures: x86_64\n      GRADLE_OPTS: -Dorg.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=1024m\n    strategy:\n      matrix:\n        api-level: [31]\n    steps:\n      - name: \u2b22 Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: '14.17'\n      - name: \ud83d\udc40 Check out repository\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n      - name: \ud83d\udd28 Use JDK 11\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '11'\n      - name: \u267b\ufe0f Restore caches\n        uses: ./.github/actions/expo-caches\n        id: expo-caches\n        with:\n          yarn-workspace: 'true'\n          yarn-tools: 'true'\n          avd: 'true'\n          avd-api: ${{ matrix.api-level }}\n          hermes-engine-aar: 'true'\n          react-native-gradle-downloads: 'true'\n      - name: \u2795 Add `bin` to GITHUB_PATH\n        run: echo \"$(pwd)/bin\" >> $GITHUB_PATH\n      - name: \ud83e\uddf6 Install node modules in root dir\n        if: steps.expo-caches.outputs.yarn-workspace-hit != 'true'\n        run: yarn install --frozen-lockfile\n      - name: \ud83d\udcf1 Run instrumented unit tests\n        timeout-minutes: 80\n        uses: reactivecircus/android-emulator-runner@v2\n        with:\n          api-level: ${{ matrix.api-level }}\n          avd-name: avd-${{ matrix.api-level }}\n          arch: x86_64\n          force-avd-creation: false\n          script: expotools android-native-unit-tests --type instrumented\n          disk-size: 2048M\n      - name: \ud83d\udcbe Save test results\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: test-results\n          path: packages/**/build/outputs/androidTest-results/**/*\n```"}
{"llm_response": "```yaml workflows/\u2699\ufe0f\n\non:\n  push:\n    branches:\n      - main\n      - 'v*'\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.8, 3.9]\n        experimental-format: ['standard', 'legacy']\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install pytest\n      - name: Run tests\n        run: |\n          pytest\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install pytest\n      - name: Build package\n        run: |\n          python setup.py sdist bdist_wheel\n\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install pytest\n      - name: Publish package to PyPI\n        run: |\n          twine upload dist/*\n```", "answer": "```yaml name: \u2699\ufe0f\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - 'v*'\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    continue-on-error: ${{ matrix.experimental }}\n    strategy:\n      matrix:\n        experimental: [false]\n        python-version:\n          - \"3.7\"\n          - \"3.8\"\n          - \"3.9\"\n          - \"3.10\"\n          - \"pypy-3.7\"\n          - \"pypy-3.8\"\n          - \"pypy-3.9\"\n        include:\n        - python-version: \"3.11-dev\"\n          experimental: true\n          experimental-format: (\ud83e\uddea)\n\n    name: Test with Python ${{ matrix.python-version }} ${{ matrix.experimental-format }}\n\n    steps:\n    - uses: actions/checkout@master\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install tox\n      run: python -m pip install --upgrade tox tox-gh-actions\n    - name: Run tox\n      run: tox\n    - name: Publish coverage\n      run:\n        rm -rf ./.mypy_cache/;\n        bash <(curl https://codecov.io/bash)\n  build:\n    needs: [test]\n\n    name: Build package\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@master\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v4\n      with:\n        python-version: \"3.10\"\n\n    - name: Install build dependencies\n      run: pip install build twine\n\n    - name: Build the package\n      run: python -m build\n\n    - name: Check the package\n      run: twine check dist/*\n\n  publish:\n    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')\n    needs: [build]\n\n    name: Publish package to PyPI\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@master\n      - name: Set up Python 3.10\n        uses: actions/setup-python@v4\n        with:\n          python-version: \"3.10\"\n\n      - name: Install build dependencies\n        run: pip install build\n\n      - name: Build (again) the package\n        run: python -m build\n\n      - name: Publish package \ud83d\udce6 to PyPI \ud83c\udf89\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml Auto Merge:\n\non:\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  enable-auto-merge:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Enable auto merge\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          curl --request PUT \\\n            https://api.github.com/repos/<username>/<repository>/settings/pull_requests/auto_merge \\\n            -H \"Authorization: token $GITHUB_TOKEN\" \\\n            -d '{\"enabled\": true}'\n```", "answer": "```yaml name: Auto Merge\n\non: pull_request_target\n\npermissions:\n  pull-requests: write\n  contents: write\n\njobs:\n  enable-auto-merge:\n    runs-on: ubuntu-latest\n    if: ${{ github.repository == 'mraible/infoq-mini-book' && github.event.pull_request.user.login == 'dependabot[bot]' }}\n    steps:\n      - name: Dependabot metadata\n        id: dependabot-metadata\n        uses: dependabot/fetch-metadata@v1.3.5\n      - name: Enable auto-merge for Dependabot PRs\n        if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' }}\n        run: gh pr merge --auto --merge \"$PR_URL\"\n        env:\n          PR_URL: ${{github.event.pull_request.html_url}}\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"llm_response": "```yaml\nname: Java CI with Maven\n\non:\n  push:\n    branches:\n      - main\n    tags:\n      - v*\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n    - name: Build with Maven\n      run: mvn clean install\n```", "answer": "```yaml name: Java CI with Maven\n\non: [push, pull_request]\n\njobs:\n  build:\n\n    runs-on: ubuntu-22.04\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up JDK 11\n      uses: actions/setup-java@v3\n      with:\n        distribution: 'temurin'\n        java-version: 11\n    - name: Build with Maven\n      run: mvn install\n    - uses: actions/upload-artifact@v3\n      with:\n        name: artifact\n        path: all/target\n```"}
{"llm_response": "```yaml Publish Alpha:\n  jobs:\n    publish_alpha:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Set up Dart SDK\n          uses: dart/setup-dart@v3\n        - name: Run build script\n          run: dart pub get && dart build --release\n        - name: Upload artifact\n          uses: actions/upload-artifact@v2\n          with:\n            name: alpha-builds\n            path: build/web/\n```", "answer": "```yaml name: Publish Alpha\non:\n  push:\n    branches:\n      - master\n\njobs:\n  publish_alpha:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Install Flutter\n        uses: subosito/flutter-action@v1\n        with:\n          channel: beta\n      - name: Activate melos\n        run: |\n          echo \"$HOME/.pub-cache/bin\" >> $GITHUB_PATH\n          dart pub global activate melos\n      - name: Bootstrap melos\n        run: melos bs\n      - name: Configure git user\n        run: |\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n      - run: melos version --yes -p\n      - name: Setup Pub Credentials\n        shell: bash\n        env:\n          CREDENTIALS_JSON: ${{ secrets.CREDENTIALS_JSON }}\n        run: |\n          mkdir -p $XDG_CONFIG_HOME/dart/\n          echo $CREDENTIALS_JSON > $XDG_CONFIG_HOME/dart/pub-credentials.json\n      - run: melos publish --yes --dry-run --ignore=\"*pokemon*\" --ignore=\"ferry_test_graphql\"\n      - run: melos publish --yes --no-dry-run --ignore=\"*pokemon*\" --ignore=\"ferry_test_graphql\"\n      - name: Push back version bumps\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: master\n          tags: true\n```"}
{"llm_response": "```yaml syncbb:\n    runs-on: ubuntu-latest\n    steps:\n        - uses: actions/checkout@v2\n        - name: Setup SSH Key\n          uses: cyprienco/bitbucket-ssh-key-action@v0.4.0\n          with:\n            ssh_key: ${{ secrets.BITBUCKET_SSH_KEY }}\n        - name: Sync from Github to Bitbucket\n          run: |\n            git config --global user.email \"your-email@example.com\"\n            git config --global user.name \"Your Name\"\n            git remote add bitbucket git@bitbucket.org:cypress-io/cypress.io.git\n            git fetch origin develop\n            git checkout develop\n            git merge origin/develop\n            git push bitbucket develop\n```", "answer": "```yaml # This action mirrors the cypress-realworld-app github repo into a Bitbucket Repo\n# github.com/cypress-io/cypress-realworld-app -> bitbucket.org/cypress-io/cypress-realworld-app\n\nname: Sync Bitbucket over SSH\n\non:\n  push:\n    branches:\n      - develop\n\n# set the BB_REPO variable to the destination bitbucket workspace name\nenv:\n  BB_ROOT: git@bitbucket.org:cypress-io\n\njobs:\n  syncbb:\n    name: Synch from Github to Bitbucket using SSH\n    runs-on: ubuntu-latest\n    steps:\n      - name: Clone the github repo\n        uses: actions/checkout@v3\n\n      - name: Install SSH key\n        uses: shimataro/ssh-key-action@v2\n        with:\n          key: ${{ secrets.BITBUCKET_SSH_KEY }}\n          name: id_rsa # optional\n          known_hosts: ${{ secrets.BITBUCKET_KNOWN_HOSTS }}\n          config: \n            Host bitbucket.org\n              User git\n              IdentityFile ~/.ssh/id_rsa\n              IdentitiesOnly yes \n\n      - uses: franzdiebold/github-env-vars-action@v2\n      - name: sync with bitbucket\n        run: |\n          cd $GITHUB_WORKSPACE\n          # update the entire repo including tags/branches; prune out deleted items\n          echo sync with $BB_ROOT/$CI_REPOSITORY_NAME\n          git fetch --prune --unshallow \n          # make the bitbucket repo a remote called sync\n          git remote add sync $BB_ROOT/$CI_REPOSITORY_NAME\n          # force push the sync remote with all changes.\n          git push --force --set-upstream -v --all sync```"}
{"llm_response": "```yaml nightly-release:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n      with:\n        fetch-depth: 0\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Build project\n      run: npm run build\n\n    - name: Run tests\n      run: npm test\n\n    - name: Create release\n      if: github.event.name == 'schedule' && github.event.time >= '2023-07-01T11:00:00Z'\n      uses: actions/create-release@v5\n      with:\n        tag-name: v${GITHUB_REF#refs/tags/}\n        commit-sha: ${{ github.sha }}\n        prerelease: false\n        draft: true\n        title: Release ${GITHUB_REF#refs/tags/}\n        body: |\n          ### Changes\n\n          - Added new feature\n          - Fixed bug\n```", "answer": "```yaml name: nightly-release\n\non:\n  schedule:\n    # 11:00 UTC is 03:00 in Pacific standard time (UTC-8), which is well\n    # after nightly TensorFlow wheels are released (around 1--2 AM).\n    # (cron syntax: minute hour day-of-month month day-of-week)\n    - cron: '0 11 * * *'\n\njobs:\n  ci:\n    uses: ./.github/workflows/ci.yml\n\n  nightly-release:\n    runs-on: ubuntu-20.04\n    needs: ci\n    if: github.repository == 'tensorflow/tensorboard'\n    steps:\n      - name: Download pip package\n        uses: actions/download-artifact@v3\n        with:\n          name: tb-nightly\n          path: wheels\n      - name: Install Twine\n        run: pip install twine\n      - name: Publish the package\n        run: |\n          twine check tb_nightly*.whl\n          twine upload tb_nightly*.whl\n        working-directory: wheels\n        env:\n          TWINE_USERNAME: __token__\n          TWINE_PASSWORD: ${{ secrets.NIGHTLY_PYPI_PASSWORD }}\n```"}
{"llm_response": "```yaml docs-test:\n  on:\n    push:\n      branches-ignore:\n        - main\n      paths:\n        - documentation/**\n    pull_request:\n      branches-ignore:\n        - main\n      paths:\n        - documentation/**\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up JDK 11\n          uses: actions/setup-java@v2\n          with:\n            java-version: '11'\n        - name: Build with Gradle\n          run: ./gradlew build\n```", "answer": "```yaml name: docs-test\n\non:\n   pull_request:\n      paths:\n         - 'documentation/**'\n\npermissions:\n   contents: read\n\njobs:\n   build:\n      permissions:\n         contents: write  # for Git to git push\n      runs-on: ubuntu-latest\n      steps:\n         -  uses: actions/checkout@v3\n         -  uses: actions/setup-node@v3\n            with:\n               node-version: '16.x'\n         -  name: Build static docusaurus pages\n            run: |\n               npm --prefix documentation ci\n               npm --prefix documentation run build\n```"}
{"llm_response": "```yaml lock_closed_threads:\n  jobs:\n    lock:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Lock closed threads\n          uses: actions/labeler@v3\n          with:\n            labels:\n              - 'locked'\n              - 'closed'\n```", "answer": "```yaml name: 'Lock Closed Threads'\n\non:\n  schedule:\n    - cron: '8 4 * * *'\n    - cron: '42 17 * * *'\n\njobs:\n  lock:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: dessant/lock-threads@v3.0.0\n        with:\n          github-token: ${{ github.token }}\n          issue-inactive-days: '7'\n          issue-lock-reason: ''\n          pr-inactive-days: '7'\n          pr-lock-reason: ''\n```"}
{"llm_response": "```yaml build-test:\n  on:\n    push:\n      branches:\n        - main\n        - master\n      paths-ignore:\n        - CHANGELOG.md\n        - README.md\n    pull_request:\n      branches:\n        - main\n        - master\n      paths-ignore:\n        - CHANGELOG.md\n        - README.md\n  jobs:\n    build-test:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Node.js\n          uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - name: Install dependencies\n          run: npm install\n        - name: Build project\n          run: npm run build\n    test-output:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Run tests\n          run: npm test\n        - name: Upload test results\n          uses: actions/upload-artifact@v2\n          with:\n            name: test-results\n            path: ./coverage/\n```", "answer": "```yaml name: 'build-test'\non: # rebuild any PRs and main branch changes\n  pull_request:\n    paths-ignore:\n      - 'CHANGELOG.md'\n      - 'README.md'\n  push:\n    branches:\n      - main\n      - master\n    paths-ignore:\n      - 'CHANGELOG.md'\n      - 'README.md'\n\njobs:\n  build-test: # make sure build/ci work properly\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14.x\n          cache: yarn\n      - run: yarn install\n      - run: yarn build\n      - run: yarn test\n  test-output: # make sure the action works on a clean machine without building\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '^1.13.1'\n      - run: |\n          pulumi login --local\n          pulumi stack init dev\n        working-directory: .github/test-stacks/golang\n        env:\n          PULUMI_CONFIG_PASSPHRASE: not-a-secret\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 14.x\n          cache: yarn\n      - run: yarn install\n      - run: yarn build\n      - uses: ./\n        if: always()\n        id: pulumi\n        env:\n          PULUMI_CONFIG_PASSPHRASE: not-a-secret\n        with:\n          command: up\n          cloud-url: file://~\n          stack-name: dev\n          upsert: true\n          work-dir: .github/test-stacks/golang\n          config-map: \"{name: {value: test, secret: false}}\"\n      - run: echo 'The random string is `${{ steps.pulumi.outputs.name }}`'\n```"}
{"llm_response": "```yaml\nname: Issue Assigner\n\non:\n  issues:\n    types: [labeled]\n  pull_request:\n    types: [labeled]\n\njobs:\n  assign:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip\n          pip install jupyterlab\n\n      - name: Run JupyterLab\n        run: jupyter lab\n```", "answer": "```yaml # This workflow will triage pull requests and apply a label based on the\n# paths that are modified in the pull request.\n#\n# To use this workflow, you will need to set up a .github/labeler.yml\n# file with configuration.  For more information, see:\n# https://github.com/actions/labeler/blob/master/README.md\n\nname: Issue Assigner\non:\n  issues:\n    types:\n      - labeled\n  pull_request_target:\n    types:\n      - labeled\n\njobs:\n  assign:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Assign\n      uses: ./.github/actions/assigner\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n        config-path: .github/code-owners.yml\n```"}
{"llm_response": "```yaml CLAssistant:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Install dependencies\n      run: |\n        # Add any necessary dependencies here\n        pip install --upgrade pip setuptools wheel\n        pip install pygithub\n\n    - name: Verify CLA status\n      run: |\n        # Replace 'username' and 'repository' with your actual GitHub username and repository name\n        gh api repos/{owner}/{repo}/pulls/:number/comments | jq '.[] | select(.body == \"I agree to the Contributor License Agreement (CLA)\")'\n        if [ $? -eq 0 ]; then\n          echo \"CLA accepted\"\n        else\n          echo \"CLA not accepted\"\n        fi\n\n    - name: Create comment if CLA is not accepted\n      if [ $? -ne 0 ]; then\n        gh api repos/{owner}/{repo}/issues/:issue_number/comments -X POST -F body=\"I agree to the Contributor License Agreement (CLA)\"\n      fi\n```", "answer": "```yaml name: \"CLA Assistant\"\non:\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened,closed,synchronize]\n\njobs:\n  CLAssistant:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \"CLA Assistant\"\n        if: (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'\n        uses: contributor-assistant/github-action@v2.2.1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          PERSONAL_ACCESS_TOKEN : ${{ secrets.REPO_SCOPE }}\n        with:\n          path-to-signatures: 'signatures.json'\n          path-to-document: 'https://github.com/BloodHoundAD/CLA/blob/main/ICLA.md'\n          branch: 'main'\n          remote-organization-name: BloodHoundAD\n          remote-repository-name:  CLA\n```"}
{"llm_response": "```yaml\nname: Code quality - linting\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, edited, synchronize]\n\njobs:\n  linting:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Run linter\n      run: npm run lint\n```", "answer": "```yaml name: Code quality - linting\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    types: [opened, synchronize]\n\njobs:\n  linting:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: \"14\"\n          cache: \"yarn\"\n\n      - run: yarn install\n\n      - name: Linting\n        run: yarn lint:js\n\n      - name: Prettier\n        run: yarn format\n```"}
{"llm_response": "```yaml\nname: Deploy GAP manual to Pages\n\non:\n  push:\n    branches:\n      - master\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install gap-utils\n      - name: Run tests\n        run: |\n          gap-utils test\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install gap-utils\n      - name: Build documentation\n        run: |\n          gap-utils doc\n      - name: Deploy to GitHub Pages\n        uses: actions/deploy-to-github-pages@v4\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          BRANCH_NAME: master\n```", "answer": "```yaml # For information about the parts of this workflow,\n# see <https://github.blog/changelog/2022-07-27-github-pages-custom-github-actions-workflows-beta/>\n# and <https://github.com/actions/starter-workflows/tree/main/pages>\nname: Deploy GAP manual to Pages\n\non:\n  # Runs on pushes targeting the default branch\n  push:\n    branches: [master]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# Allow one concurrent deployment\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: true\n\njobs:\n  # Build job\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install dependencies\n        run: |\n          packages=(\n              libgmp-dev\n              libreadline-dev\n              zlib1g-dev\n              texlive-latex-base\n              texlive-latex-recommended\n              texlive-latex-extra\n              texlive-fonts-recommended\n          )\n          sudo apt-get update\n          sudo apt-get install --no-install-recommends \"${packages[@]}\"\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Configure GAP\n        run: |\n          ./autogen.sh && ./configure\n      - name: Build GAP\n        run: |\n          make -j4\n      - name: Download minimal packages\n        run: |\n          make bootstrap-pkg-minimal\n      - name: Setup Pages\n        id: pages\n        uses: actions/configure-pages@v2\n      - name: Build GAP manuals\n        run: |\n          make html # we are only interested in the HTML version\n      - name: Bundling GAP manuals for deployment\n        run: |\n          set -e\n          for book in dev hpc ref tut ; do\n            mkdir -p public/doc/$book/\n            mv doc/$book/*.{html,css,js} public/doc/$book/\n          done\n          mv doc/dev/bigpic.* public/doc/dev/\n          cp dev/index.html public/\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v1\n        with:\n          path: ./public\n\n  # Deployment job\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v1\n```"}
{"llm_response": "```yaml Deploy snapshot builds\n\non:\n  push:\n    branches:\n      - develop\n\njobs:\n  deploy-release-snapshot:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n\n    - name: Build and test\n      run: |\n        ./gradlew clean build\n\n    - name: Upload artifact\n      uses: actions/upload-artifact@v2\n      with:\n        name: snapshot-builds\n        path: build/libs/*.jar\n```", "answer": "```yaml on:\n  push:\n    branches:\n      - develop\n\nname: Deploy snapshot builds\njobs:\n  deploy-release-snapshot:\n    runs-on: ubuntu-latest\n    if: \"!contains(github.event.head_commit.message, '[ci skip]')\"\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3.1.0\n      with:\n        fetch-depth: 0\n\n    - name: Set up JDK\n      uses: actions/setup-java@v3.6.0\n      with:\n        distribution: temurin\n        java-version: 18\n\n    - name: Decrypt secrets\n      run: scripts/signing-setup.sh \"$ENCRYPT_KEY\"\n      env:\n        ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}\n\n    - name: Copy CI gradle.properties\n      run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties\n\n    - name: Build release app\n      uses: gradle/gradle-build-action@v2.3.3\n      env:\n        SNAPSHOT: \"true\"\n        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}\n        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}\n      with:\n        arguments: collectFreeReleaseApks collectNonFreeReleaseApks collectFreeReleaseBundle collectNonFreeReleaseBundle -PsentryUploadMappings\n        gradle-home-cache-cleanup: true\n\n    - name: Clean secrets\n      run: scripts/signing-cleanup.sh\n\n    - name: Deploy snapshot\n      run: scripts/deploy-snapshot.sh\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml warn-codegen:\n  on:\n    pull_request:\n      branches:\n        - main\n        - master\n\n  jobs:\n    warn_codegen:\n      runs-on: ubuntu-latest\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml # WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt\n\nenv:\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\njobs:\n  warn_codegen:\n    name: warn_codegen\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout Repo\n      uses: actions/checkout@v3\n    - id: schema_changed\n      name: Check for diff in schema\n      uses: dorny/paths-filter@v2\n      with:\n        filters: \"changed: 'provider/cmd/**/schema.json'\"\n    - id: sdk_changed\n      if: steps.schema_changed.outputs.changed == 'false'\n      name: Check for diff in sdk/**\n      uses: dorny/paths-filter@v2\n      with:\n        filters: \"changed: 'sdk/**'\"\n    - if: steps.sdk_changed.outputs.changed == 'true' &&\n        github.event.pull_request.head.repo.full_name != github.repository\n      name: Send codegen warning as comment on PR\n      uses: thollander/actions-comment-pull-request@v1\n      with:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        message: >\n          Hello and thank you for your pull request! :heart: :sparkles:\n\n          It looks like you're directly modifying files in the language SDKs, many of which are autogenerated.\n\n          Be sure any files you're editing do not begin with a code generation warning.\n\n          For generated files, you will need to make changes in `resources.go` instead, and [generate the code](https://github.com/pulumi/${{ github.event.repository.name }}/blob/master/CONTRIBUTING.md#committing-generated-code).\nname: warn-codegen\non:\n  pull_request_target:\n    branches:\n    - main\n    - master\n    types:\n    - opened\n```"}
{"llm_response": "```yaml oss-fuzz:\non:\n  pull_request:\n    branches:\n      - master\njobs:\n  fuzz:\n    strategy:\n      matrix:\n        target:\n          - c\n          - h\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build and run OSS-Fuzz\n        run: |\n          go get github.com/google/oss-fuzz\n          cd $GITHUB_WORKSPACE/oss-fuzz\n          make build\n          ./bin/fuzzer-runner --target=$target\n```", "answer": "```yaml name: oss-fuzz\n\non:\n  pull_request:\n    branches: [ master ]\n    paths:\n      - '**.c'\n      - '**.h'\n\njobs:\n  fuzz:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Build Fuzzers\n      id: build\n      uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'jansson'\n        dry-run: false\n    - name: Run Fuzzers\n      uses: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers@master\n      with:\n        oss-fuzz-project-name: 'jansson'\n        fuzz-seconds: 600\n        dry-run: false\n    - name: Upload Crash\n      uses: actions/upload-artifact@v1\n      if: failure() && steps.build.outcome == 'success'\n      with:\n        name: artifacts\n        path: ./out/artifacts\n```"}
{"llm_response": "```yaml\nname: Documentation building\n\non:\n  schedule:\n    - cron: '0 0 * * Tue'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths-ignore:\n      - node_modules/**\n      - dist/**\n    paths:\n      - .github/workflows/docs.yml\n      - enaml/**\n      - examples/**\n      - docs/**\n      - setup.py\n      - pyproject.toml\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n\n      - name: Build documentation\n        run: |\n          sphinx-build -b html . _build/html\n```", "answer": "```yaml name: Documentation building\non:\n  schedule:\n    - cron: '0 0 * * 2'\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n    paths:\n      - .github/workflows/docs.yml\n      - \"enaml/**\"\n      - \"examples/**\"\n      - \"docs/**\"\n      - setup.py\n      - pyproject.toml\n\njobs:\n  docs:\n    name: Docs building\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Get history and tags for SCM versioning to work\n        run: |\n          git fetch --prune --unshallow\n          git fetch --depth=1 origin +refs/tags/*:refs/tags/*\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install wheel\n          pip install -r docs/requirements.txt\n      - name: Install project\n        run: |\n          pip install -e .\n      - name: Install graphviz\n        uses: ts-graphviz/setup-graphviz@v1\n      - name: Build documentation\n        run: |\n          mkdir docs_output;\n          sphinx-build docs/source docs_output -W -b html;\n```"}
{"llm_response": "```yaml\nname: jira-issues\n\non:\n  issues:\n    types:\n      - created\n\njobs:\n  jira-action:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Create Jira issue\n      run: |\n        # Replace 'your-jira-instance' with your actual Jira instance URL\n        # Replace 'your-jira-project-key' with your actual Jira project key\n        # Replace 'your-jira-issue-title' with the title of the issue you want to create\n        # Replace 'your-jira-issue-description' with the description of the issue you want to create\n        curl -X POST \\\n          \"https://your-jira-instance/rest/api/3/issue\" \\\n          -H \"Content-Type: application/json\" \\\n          -d '\n            {\n              \"fields\": {\n                \"project\": {\n                  \"key\": \"your-jira-project-key\"\n                },\n                \"summary\": \"your-jira-issue-title\",\n                \"description\": \"your-jira-issue-description\"\n              }\n            }'\n```", "answer": "```yaml name: jira-issues\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  jira-action:\n    runs-on: ubuntu-latest\n    name: Jira create issue\n    steps:\n      - name: Curl to webhook\n        run: |\n          curl --location --request POST '${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue' \\\n          --header 'Authorization: Basic ${{ secrets.JIRA_API_TOKEN }}' \\\n          --header 'Content-Type: application/json' \\\n          --data-raw '{\n              \"fields\": {\n                \"project\":\n                {\n                    \"key\": \"${{ secrets.JIRA_PROJECT }}\"\n                },\n                \"summary\": \"terraform-provider-snowflake issue ${{ github.event.issue.number }}\",\n                \"description\": \"${{ github.event.issue.url }}\",\n                \"issuetype\": {\n                    \"name\": \"Story\"\n                },       \n                \"components\": [{\n                \"id\": \"\"${{ secrets.JIRA_COMPONENT }}\"\"\n              }],\n                \"labels\": [\"${{ secrets.JIRA_LABEL }}\"],\n                \"customfield_11401\": {\"id\": \"${{ secrets.JIRA_AREA }}\"\"},\n                \"customfield_10008\": \"${{ secrets.JIRA_EPIC }}\",\n                \"assignee\": {\"name\": null}\n            }\n          }'```"}
{"llm_response": "```yaml\nname: Greeting\n\non:\n  issues:\n    types: [opened]\n\njobs:\n  greeting:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run Go command\n        run: go run main.go\n```", "answer": "```yaml name: Greeting\n\non:\n  issues:\n    types: [\"opened\"]\n\njobs:\n  greeting:\n    name: Send Greeting\n    runs-on: ubuntu-latest\n    # only send message to users not (yet) associated with repo\n    # https://docs.github.com/en/graphql/reference/enums#commentauthorassociation\n    if: github.event.issue.author_association == 'NONE'\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8\n        with:\n          fetch-depth: 1\n\n      - name: Render template\n        id: template\n        uses: chuhlomin/render-template@204ce622bc2fd5c787ff5ca885ff19fb577e7a41\n        with:\n          template: .github/comment-template.md\n          vars: |\n            author: ${{ github.actor }}\n\n      - name: Create comment\n        uses: peter-evans/create-or-update-comment@5adcb0bb0f9fb3f95ef05400558bdb3f329ee808\n        with:\n          issue-number: ${{ github.event.issue.number }}\n          body: ${{ steps.template.outputs.result }}\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n      - test\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 6:31 * * 1'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up CodeQL\n        uses: github/codeql-action/setup@v2\n      - name: Initialize CodeQL database\n        uses: github/codeql-action/init-db@v2\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/run@v2\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master, test ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '31 6 * * 1'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Set up .NET 7.0\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 7.x\n        dotnet-quality: preview\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v2\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Spglib PyPI Wheel builds for linux\n\non:\n  push:\n    branches:\n      - rc\n      - master\n\njobs:\n  build_wheels:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macOS-latest]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          sudo apt-get update && sudo apt-get install -y python3-pip\n          pip3 install setuptools wheel\n      - name: Build wheels\n        run: |\n          python3 setup.py bdist_wheel --plat-name manylinux1_x86_64\n\n  build_sdist:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          sudo apt-get update && sudo apt-get install -y python3-pip\n          pip3 install setuptools wheel\n      - name: Build source distribution\n        run: |\n          python3 setup.py sdist\n\n  upload_pypi:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python environment\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install twine\n      - name: Upload distributions to PyPI\n        run: |\n          twine upload dist/*\n```", "answer": "```yaml name: Spglib PyPI Wheel builds for linux\n\non:\n  push:\n    branches:\n      - rc\n      - master\n\njobs:\n  build_wheels:\n    name: Build wheels on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-20.04, windows-2019, macOS-11]\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up QEMU\n        if: runner.os == 'Linux'\n        uses: docker/setup-qemu-action@v2\n        with:\n          platforms: all\n\n      - name: Build wheels\n        uses: pypa/cibuildwheel@v2.9.0\n        env:\n          CIBW_ARCHS_LINUX: auto aarch64\n          CIBW_ARCHS_MACOS: x86_64 arm64\n        with:\n          package-dir: python\n          output-dir: wheelhouse\n          config-file: \"{package}/pyproject.toml\"\n\n      - uses: actions/upload-artifact@v3\n        with:\n          path: ./wheelhouse/*.whl\n\n  build_sdist:\n    name: Build source distribution\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build sdist\n        run: |\n          pip install numpy\n          cd python\n          sh pre-build-script.sh\n          python setup.py sdist\n          cd ..\n      - uses: actions/upload-artifact@v3\n        with:\n          path: python/dist/*.tar.gz\n\n  upload_pypi:\n    needs: [build_wheels, build_sdist]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/download-artifact@v3\n        with:\n          name: artifact\n          path: dist\n\n      - name: Publish package to TestPyPI\n        if: startsWith(github.ref, 'refs/heads/rc')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: __token__\n          password: ${{ secrets.TEST_PYPI_API_TOKEN }}\n          repository_url: https://test.pypi.org/legacy/\n\n      - name: Publish package to PyPI\n        if: startsWith(github.ref, 'refs/heads/master')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Checks\n\non:\n  push:\n    branches:\n      - master\n    paths-ignore:\n      - .github/ISSUE_TEMPLATE/**\n      - LICENSE.txt\n  pull_request:\n    branches:\n      - master\n\nconcurrency:\n  groups:\n    - name: check-common\n      max-concurrent: 1\n\njobs:\n  check_common:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Check CI scripts\n        run: |\n          # Add your CI script commands here\n          echo \"CI scripts checked\"\n\n  check_PR_TODOs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Check PR-TODOs\n        run: |\n          # Add your PR-TODOs checking commands here\n          echo \"PR-TODOs checked\"\n\n  check_clang_format:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Check C++ style\n        run: |\n          # Add your clang-format checking commands here\n          echo \"C++ style checked\"\n```", "answer": "```yaml name: Checks\n\non:\n  push:\n    paths-ignore:\n    - '.github/ISSUE_TEMPLATE/**'\n    - 'LICENSE.txt'\n    branches:\n    - master\n  pull_request:\n    branches:\n    - master\n\nconcurrency:\n  group: checks-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  check_common:\n    name: \"Check CI scripts\"\n    runs-on: ubuntu-22.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: \"Checking for common errors in build, deployment, and CI.\"\n      run: ./scripts/check-common.sh\n\n  check_PR_TODOs:\n    name: \"Check PR-TODOs\"\n    runs-on: ubuntu-20.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: \"Checking for open PR-related TODO items\"\n      run: ./scripts/check-pr-todos.sh\n\n  check_clang_format:\n    name: \"Check C++ style\"\n    runs-on: ubuntu-20.04\n    steps:\n    - uses: actions/checkout@v3\n    - name: Run clang-format style check for C/C++/Protobuf programs.\n      uses: jidicula/clang-format-action@v4.4.0\n      with:\n        clang-format-version: '14'\n        check-path: 'src'\n        exclude-regex: 'crispy/sse2neon.h'\n\n\n\n```"}
{"llm_response": "```yaml\nname: \ud83d\udc7b Stale\n\non:\n  schedule:\n    - cron: '0 8 * * *'\n  push:\n    branches-ignore: ['main', 'develop']\n  pull_request:\n    branches-ignore: ['main', 'develop']\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14.x'\n      - name: Install dependencies\n        run: npm install\n      - name: Run Stale\n        run: ./vendor/bin/stale --cron\n```", "answer": "```yaml #\nname: \ud83d\udc7b Stale\n\non:\n    schedule:\n        - cron: \"0 8 * * *\"\n    workflow_dispatch:\n\njobs:\n    stale:\n        name: \ud83e\uddf9 Clean up stale issues and PRs\n        runs-on: ubuntu-latest\n        steps:\n            - name: \ud83e\uddf9 Run stale\n              uses: actions/stale@v6\n              with:\n                  days-before-stale: 14\n                  days-before-close: 7\n                  days-before-pr-stale: 30\n                  days-before-pr-close: 14\n                  remove-stale-when-updated: true\n                  stale-issue-label: 'stale \ud83d\udc7b'\n                  exempt-issue-labels: 'not-stale \ud83d\udd12, feature-request \ud83d\ude4f\ud83c\udffb'\n                  stale-issue-message: >\n                      There hasn't been any activity on this issue recently, and in order to prioritize active issues, it will be\n                      marked as stale. Please make sure to update to the latest version and check if that solves the issue. Let me\n                      know if that works for you by leaving a \ud83d\udc4d. Because this issue is marked as stale, it will be closed and\n                      locked in 7 days if no further activity occurs. Thank you for your contributions!\n                  stale-pr-label: 'stale \ud83d\udc7b'\n                  exempt-pr-labels: 'not-stale \ud83d\udd12'\n                  stale-pr-message: >\n                      There hasn't been any activity on this pull request recently, and in order to prioritize active work, it has\n                      been marked as stale. This PR will be closed and locked in 14 days if no further activity occurs. Thank you\n                      for your contributions!\n                  labels-to-remove-when-unstale: 'stale \ud83d\udc7b'\n```"}
{"llm_response": "```yaml PreCherryPick\n\nname: Pre Cherry Pick\n\non:\n  - pull_request\n\njobs:\n  pre_cherry_pick:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build and test\n        run: |\n          make build\n          make test\n```", "answer": "```yaml name: PreCherryPick\non:\n  pull_request_target:\n    types:\n    - labeled\n    - closed\n    branches:\n    - master\n\njobs:\n  pre_cherry_pick:\n    if: github.event.pull_request.merged == true && ( (github.event.action == 'closed' && contains(join(github.event.pull_request.labels.*.name, ','), 'Approved for 20')) || (github.event.action == 'labeled' && startsWith(github.event.label.name, 'Approved for 20')) )\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n        persist-credentials: false\n    - name: Debug\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n      run: echo $GITHUB_CONTEXT | jq\n    - name: Main\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n        TOKEN: ${{ secrets.TOKEN }}\n      run: |\n        set -e\n\n        sha=$(echo $GITHUB_CONTEXT | jq -r \".event.pull_request.merge_commit_sha\")\n        pr_id=$(echo $GITHUB_CONTEXT | jq -r \".event.number\")\n        pr_url=$(echo $GITHUB_CONTEXT | jq -r \".event.pull_request._links.html.href\")\n        repository=$(echo $GITHUB_CONTEXT | jq -r \".repository\")\n        labels=$(echo $GITHUB_CONTEXT | jq -r \".event.pull_request.labels[].name\")\n        author=$(echo $GITHUB_CONTEXT | jq -r \".event.pull_request.user.login\")\n        branches=$(git branch -a --list 'origin/20????' | awk -F/ '{print$3}' | grep -E \"202[0-9]{3}\")\n        if [[ $(echo $GITHUB_CONTEXT | jq -r \".event.action\") == \"labeled\" ]];then\n          labels=$(echo $GITHUB_CONTEXT | jq -r \".event.label.name\")\n        fi\n        title=$(echo $GITHUB_CONTEXT | jq -r \".event.pull_request.title\")\n        echo =============================\n        echo SHA:           $sha\n        echo PRID:          $pr_id\n        echo pr_url:        $pr_url\n        echo repository:    $repository\n        echo branches:      $branches\n        echo labels:\n        echo \"$labels\"\n        echo ${TOKEN} | gh auth login --with-token\n        echo author:        $author\n        echo title:         $title\n        echo =============================\n\n        git config user.name mssonicbld\n        git config user.email sonicbld@microsoft.com\n        git config credential.https://github.com.username mssonicbld\n        git remote add mssonicbld https://mssonicbld:${TOKEN}@github.com/mssonicbld/sonic-buildimage\n        git fetch mssonicbld\n        git remote -vv\n\n        cherry_pick(){\n          set -e\n          local create_pr=''\n          while read label\n          do\n            echo label: $label\n            if [[ \"$label\" == \"Approved for $branch Branch\" ]];then\n              create_pr=1\n            fi\n            if [[ \"$label\" == \"Created PR to $branch Branch\" ]];then\n              echo \"already has tag: Created PR to $branch Branch, return\"\n              return 0\n            fi\n            if [[ \"$label\" == \"Included in $branch Branch\" ]];then\n              echo \"already has tag: Included in $branch Branch, return\"\n              return 0\n            fi\n            if [[ \"$label\" == \"Cherry Pick Conflict_$branch\" ]];then\n              echo \"already has tag: Cherry Pick Conflict_$branch, return\"\n              return 0\n            fi\n          done <<< \"$labels\"\n\n          if [[ \"$create_pr\" != \"1\" ]];then\n            echo \"Didn't find 'Approved for $branch Branch' tag.\"\n            return 0\n          fi\n          # Begin to cherry-pick PR\n          git cherry-pick --abort 2>/dev/null || true\n          git clean -xdff 2>/dev/null || true\n          git reset HEAD --hard || true\n          git checkout -b $branch --track origin/$branch\n          git status | grep \"working tree clean\"\n\n          if ! git cherry-pick $sha;then\n            echo 'cherry-pick failed.'\n            git cherry-pick --abort\n            git status | grep \"working tree clean\"\n            # Add label\n            gh pr edit $pr_url --add-label \"Cherry Pick Conflict_$branch\"\n            echo 'Add label \"Cherry Pick Conflict_$branch\" success'\n            gh pr comment $pr_url --body \"@${author} PR conflicts with $branch branch\"\n            echo 'Add commnet \"@${author} PR conflicts with $branch branch\"'\n          else\n            # Create PR to release branch\n            git push mssonicbld HEAD:$branch-${pr_id} -f\n            result=$(gh pr create -R ${repository} -H mssonicbld:$branch-${pr_id} -B $branch -t \"[action] [PR:$pr_id] $title\" -b '' 2>&1)\n            echo $result | grep \"already exists\" && { echo $result; return 0; }\n            echo $result | grep github.com || { echo $result; return 1; }\n            new_pr_rul=$(echo $result | grep github.com)\n            echo new_pr_rul:    $new_pr_rul\n\n            # Add label to old PR\n            gh pr edit $pr_url --add-label \"Created PR to $branch Branch\"\n            echo Add label Created PR to $branch Branch\n            # Add comment to old PR\n            gh pr comment $pr_url --body \"Cherry-pick PR to $branch: ${new_pr_rul}\"\n            echo Add comment to old PR\n\n            # Add label to new PR\n            gh pr edit $new_pr_rul --add-label \"automerge\"\n            echo Add label automerge to new PR\n            # Add comment to new PR\n            gh pr comment $new_pr_rul --body \"Original PR: ${pr_url}\"\n            echo Add comment to new PR\n          fi\n        }\n\n        for branch in $branches\n        do\n          echo -------------------------------------------\n          echo Begin to parse Branch: $branch\n          cherry_pick\n        done\n\n```"}
{"llm_response": "```yaml\nname: ignite-cli-repository-statistics\n\non:\n  schedule:\n    - cron: '0 23 * * *'\n  push:\n    branches:\n      - main\n\njobs:\n  j1:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: go get -u github.com/go-ignite/cli\n      - name: Run stats command\n        run: go run github.com/go-ignite/cli/cmd/stats/main.go\n```", "answer": "```yaml on:\n  schedule:\n    # Run this once per day, towards the end of the day for keeping the most\n    # recent data point most meaningful (hours are interpreted in UTC).\n    - cron: \"0 23 * * *\"\n  workflow_dispatch: # Allow for running this manually.\n\njobs:\n  j1:\n    name: Ignite CLI Repository Statistics\n    runs-on: ubuntu-latest\n    steps:\n      - name: run-ghrs\n        uses: jgehrcke/github-repo-stats@v1.4.0\n        with:\n          ghtoken: ${{ secrets.ghrs_github_api_token }}\n\n```"}
{"llm_response": "```yaml\nname: Upload Python Package\n\non:\n  release:\n    types: [published, prerelease, draft]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install .\n      - name: Upload package to PyPI\n        uses: pypa/gh-action-uploader@v5\n        env:\n          TWINE_USERNAME: __token__\n          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}\n        with:\n          files: dist/*\n```", "answer": "```yaml # This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\nname: Upload Python Package\n\non:\n  release:\n    types: [published]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.x\"\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install build\n      - name: Build package\n        run: python -m build\n      - name: Publish package\n        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n        with:\n          user: __token__\n          password: ${{ secrets.PYPI_API_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Publish demo & benchmark pages to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Build and deploy to GitHub Pages\n      run: |\n        npm run build\n        echo \"Deploying to GitHub Pages...\"\n        gh-pages --dist dist\n```", "answer": "```yaml name: \"Publish demo & benchmark pages to GitHub Pages\"\n\non:\n  push:\n    branches: [main]\n\njobs:\n  publish:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n          cache: npm\n      - run: npm ci\n      - name: Configure Git for pushing commits\n        # Embed the access token directly into the remote URL so that the gh-pages library can pick it up\n        run: git remote set-url origin https://git:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git\n      - run: npm run deploy -- -u 'github-actions-bot <support+actions@github.com>'\n```"}
{"llm_response": "```yaml ci\n\nname: CI\n\non:\n  push:\n    branches-ignore:\n      - main\n    paths-ignore:\n      - '**/*.md'\n      - '**/README.md'\n\njobs:\n  semantic-pull-request:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run semantic-release\n        uses: semantic-release/action@v4\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Dart SDK\n        uses: actions/setup-dart@v2\n        with:\n          dart-version: '3.x'\n\n      - name: Run build script\n        run: dart pub get && dart build\n\n  pana:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Dart SDK\n        uses: actions/setup-dart@v2\n        with:\n          dart-version: '3.x'\n\n      - name: Run Pana test\n        run: dart pub get && dart test\n```", "answer": "```yaml name: ci\n\non: pull_request\n\njobs:\n  semantic-pull-request:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.1.0\n      - uses: dart-lang/setup-dart@v1\n\n      - name: Install Dependencies\n        run: dart pub get\n\n      - name: Format\n        run: dart format --set-exit-if-changed .\n\n      - name: Analyze\n        run: dart analyze .\n\n  pana:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/pana.yml@v1\n```"}
{"llm_response": "```yaml github-workflow\nname: Update Docker Hub Description for Grafana\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - grafana/README.md\n      - .github/workflows/grafana-dockerhub-description.yml\n\njobs:\n  dockerHubDescription:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Update Docker Hub description\n        env:\n          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}\n          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}\n        run: |\n          # Assuming you have a script to update the Docker Hub description\n          ./update_docker_hub_description.sh\n```", "answer": "```yaml name: Update Docker Hub Description for Grafana\non:\n  push:\n    branches:\n      - main\n    paths:\n      - grafana/README.md\n      - .github/workflows/grafana-dockerhub-description.yml\njobs:\n  dockerHubDescription:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Docker Hub Description\n      uses: peter-evans/dockerhub-description@v3.1.0\n      with:\n        username: ${{ secrets.DOCKERHUB_USERNAME }}\n        password: ${{ secrets.DOCKERHUB_PASSWORD }}\n        repository: tillsteinbach/vwsfriend-grafana\n        short-description: \"Grafana provisioned for VWsFriend Software. See: https://github.com/tillsteinbach/VWsFriend/\"\n        readme-filepath: ./grafana/README.md\n```"}
{"llm_response": "```yaml\nname: Lint PR\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    branches-ignore:\n      - main\n    labels:\n      - linter\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run linting\n        run: npm run lint\n```", "answer": "```yaml name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      # Please look up the latest version from\n      # https://github.com/amannn/action-semantic-pull-request/releases\n      - uses: amannn/action-semantic-pull-request@v3.4.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          types: |\n            feat\n            fix\n            chore\n            refactor\n            revert\n            test\n            perf\n          scopes: |\n            lib\n            cli\n            hcl2json\n            hcl2cdk\n            provider-generator\n            tests\n            examples\n            readme\n            docs\n            release\n            deps\n          # Configure that a scope must always be provided.\n          requireScope: false\n          # When using \"Squash and merge\" on a PR with only one commit, GitHub\n          # will suggest using that commit message instead of the PR title for the\n          # merge commit, and it's easy to commit this by mistake. Enable this option\n          # to also validate the commit message for one commit PRs.\n          validateSingleCommit: true\n\n          subjectPatternError: |\n            The subject \"{subject}\" found in the pull request title \"{title}\" does not match the required format.\n            The format is \"type(scope): message\", supported types are feat, fix, chore, refactor, revert.\n            The supported scopes are lib, cli, hcl2json, tests, examples, readme, docs, release, deps.\n            Please stick to the format so that our automatic release process picks your commit up and\n            your code makes it into the next release.\n```"}
{"llm_response": "```yaml django-cms-linters.yml\nname: Django CMS Linters\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  flake8:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Run Flake8\n        run: |\n          flake8 .\n\n  isort:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Run Isort\n        run: |\n          isort .\n```", "answer": "```yaml name: django CMS linters.yml\n\non: [push, pull_request]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  flake8:\n    name: flake8\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - run: pip install --upgrade flake8\n      - name: flake8\n        uses: liskin/gh-problem-matcher-wrap@v1\n        with:\n          linters: flake8\n          run: flake8\n\n  isort:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.10\"\n          cache: 'pip'\n      - run: python -m pip install isort\n      - name: isort\n        uses: liskin/gh-problem-matcher-wrap@v1\n        with:\n          linters: isort\n          run: isort --check --diff cms\n```"}
{"llm_response": "```yaml\nname: Checks\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n\njobs:\n  spellchecking:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Spellcheck\n        uses: jupyter-actions/spellchecker@v0.4.3\n        with:\n          config-file: .jupyter/jupyterlab_spellchecker_config.json\n\n  gitlocalize-bug-checking:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run GitLocalize bug checking\n        run: |\n          git localize check --config-file .jupyter/gitlocalize_config.yaml\n```", "answer": "```yaml name: Checks\non:\n  push:\n    branches:\n    - master\n  pull_request:\n\njobs:\n  spellchecking:\n    name: Spellchecking\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2.2.0\n      with:\n        submodules: recursive\n        fetch-depth: 200\n    - run: npm install yaspeller\n    - run: git show -m --name-only -1 --format=\"format:\" | grep --color=never -i '.md' | xargs node_modules/.bin/yaspeller -c common-configs/.yaspellerrc\n  gitlocalize-bug-checking:\n    name: Checking Gitlocalize bugs\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2.2.0\n      with:\n        fetch-depth: 200\n    - uses: rust-lang-ru/simpleinfra/gitocalize-bug-checker@master\n    - uses: rust-lang-ru/simpleinfra/gl-bugs-checker@master\n      if: ${{ github.event_name == 'pull_request' }}\n      with:\n        original_dir: rustbook-en/src\n        translation_dir: rustbook-ru/src\n```"}
{"llm_response": "```yaml Add-tickets-for-triage:\non:\n  issues:\n    types: [opened]\njobs:\n  add-to-project:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Xcode\n        uses: actions/setup-xcode@v2\n        with:\n          xcode-version: '13.0'\n      - name: Install dependencies\n        run: swift package resolve\n      - name: Run tests\n        run: swift test\n```", "answer": "```yaml name: Add ticket for triage\n\non:\n  issues:\n    types:\n      - opened\n\njobs:\n  add-to-project:\n    name: Add for triage\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/add-to-project@main\n        with:\n          project-url: https://github.com/orgs/brave/projects/39/\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}\n          # Note: The Github projects 'workflow' sets up the proper 'needs triage label'\n          # See https://github.com/orgs/brave/projects/39/workflows/371900\n          #\n          # This action only handles project auto-add, there's no label control yet.\n```"}
{"llm_response": "```yaml\nname: Semantic PRs\n\non:\n  pull_request:\n    types: [created, opened, edited, synchronize]\n\njobs:\n  main:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Validate PR title\n        uses: actions/validate-pr-title@v0\n        with:\n          required-regex: '^[A-Z][a-zA-Z0-9-]*$'\n          allow-captions: true\n          allow-prefixes: false\n          message: \"PR titles must start with an uppercase letter and may contain letters, numbers, hyphens, and optionally include captions.\"\n          fail-on-error: true\n```", "answer": "```yaml name: \"Semantic PRs\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n\njobs:\n  main:\n    name: Validate PR title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Typecheck and Lint\n\non:\n  - push:\n      branches:\n        - main\n        - dev\n  - schedule:\n    - cron: '15 9 * * *'\n  - workflow_dispatch:\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Run typechecker\n      run: npx tsc --noEmit\n    - name: Run linter\n      run: npm run lint\n```", "answer": "```yaml name: Typecheck and Lint\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '13 21 * * *'\n  push:\n    branches:\n      - main\n      - dev\n\njobs:\n  Analyze:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n\n      - name: Install Dependencies\n        run: npm i\n\n      - name: Init Project\n        run: node ./tools/copy-config.js\n\n      - name: Lint Project\n        run: npm run lint\n```"}
{"llm_response": "```yaml\nname: Generate Docs\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up .NET SDK\n      uses: actions/setup-dotnet@v2\n      with:\n        dotnet-version: '6.x'\n\n    - name: Restore dependencies\n      run: dotnet restore\n\n    - name: Build project\n      run: dotnet build --configuration Release\n\n    - name: Publish documentation\n      run: dotnet doc --output ./docs --configuration Release\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: 'Generate docs'\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'src/Microsoft.ComponentDetection.Orchestrator/ArgumentSets/*.cs'\n\njobs:\n  gen-docs:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Setup .NET Core\n        uses: actions/setup-dotnet@v3\n\n      - name: Generate docs\n        run: |\n          touch version.json\n          touch version_dev.json\n          \n          # Run CLI\n          dotnet run -p src/Microsoft.ComponentDetection help scan 2> help.txt || true\n          cat <<EOF > docs/detector-arguments.md\n          # Detector arguments\n          \n          \\`\\`\\`shell\n          dotnet run -p './src/Microsoft.ComponentDetection' help scan\n          \\`\\`\\`\n\n          \\`\\`\\`\n          $(tail --lines=+4 help.txt)\n          \\`\\`\\`\n          EOF\n\n      - name: Commit\n        uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: 'Update docs'\n          file_pattern: '*.md'```"}
{"llm_response": "```yaml package-trigger-main\non:\n  push:\n    branches:\n      - main\n\njobs:\n  package-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Build and push image\n        run: |\n          docker build -t your-image-name .\n          docker login -u your-username -p your-password\n          docker push your-image-name\n```", "answer": "```yaml name: Package Trigger Main\n\non:\n  workflow_dispatch:\n\njobs:\n  package-trigger-master:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2.3.3\n\n      - name: Package Trigger\n        if: github.ref == 'refs/heads/master'\n        run: |\n          if [ -n \"${{ secrets.PAUSE_PACKAGE_TRIGGER_HEIMDALL_MASTER }}\" ]; then\n            echo \"**** Github secret PAUSE_PACKAGE_TRIGGER_HEIMDALL_MASTER is set; skipping trigger. ****\"\n            exit 0\n          fi\n          if [ $(curl -s https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-heimdall/job/master/lastBuild/api/json | jq -r '.building') == \"true\" ]; then\n            echo \"**** There already seems to be an active build on Jenkins; skipping package trigger ****\"\n            exit 0\n          fi\n          echo \"**** Package trigger running off of master branch. To disable, set a Github secret named \\\"PAUSE_PACKAGE_TRIGGER_HEIMDALL_MASTER\\\". ****\"\n          response=$(curl -iX POST \\\n            https://ci.linuxserver.io/job/Docker-Pipeline-Builders/job/docker-heimdall/job/master/buildWithParameters?PACKAGE_CHECK=true \\\n            --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} | grep -i location | sed \"s|^[L|l]ocation: \\(.*\\)|\\1|\")\n          echo \"**** Jenkins job queue url: ${response%$'\\r'} ****\"\n          echo \"**** Sleeping 10 seconds until job starts ****\"\n          sleep 10\n          buildurl=$(curl -s \"${response%$'\\r'}api/json\" | jq -r '.executable.url')\n          buildurl=\"${buildurl%$'\\r'}\"\n          echo \"**** Jenkins job build url: ${buildurl} ****\"\n          echo \"**** Attempting to change the Jenkins job description ****\"\n          curl -iX POST \\\n            \"${buildurl}submitDescription\" \\\n            --user ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \\\n            --data-urlencode \"description=GHA package trigger https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\" \\\n            --data-urlencode \"Submit=Submit\"\n```"}
{"llm_response": "```yaml\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n    - cron: '0 7 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Run script to mark stale issues and pull requests\n        run: |\n          # Add your script here to mark stale issues and pull requests\n          # Example:\n          # npm install\n          # node mark-stale.js\n```", "answer": "```yaml # This workflow warns issues and PRs that have had no activity for a specified amount of time.\n#\n# You can adjust the behavior by modifying this file.\n# For more information, see:\n# https://github.com/actions/stale\nname: Mark stale issues and pull requests\n\non:\n  schedule:\n  - cron: '30 7 * * *'\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n      pull-requests: write\n\n    steps:\n    - uses: actions/stale@v5\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        days-before-stale: 30\n        days-before-close: -1\n        operations-per-run: 300\n        stale-issue-message: 'Marking issue as stale since there was no activity for 30 days'\n        stale-pr-message: 'Marking pull request as stale since there was no activity for 30 days'\n        stale-issue-label: 'stale'\n        stale-pr-label: 'stale'\n```"}
{"llm_response": "```yaml\nname: Rebase Trigger\n\non:\n  issues_comment:\n    types: [created]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  launchBackportBuild:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: main\n      - name: Checkout repo\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n      - name: Rebase and push changes\n        run: |\n          git fetch origin\n          git checkout main\n          git rebase origin/main\n          git push origin main\n```", "answer": "```yaml name: Rebase Trigger\n\non:\n  issue_comment:\n    types: [created]\n\njobs:\n  launchBackportBuild:\n    runs-on: ubuntu-latest\n    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, '@vs-mobiletools-engineering-service2 rebase')\n\n    steps:\n      - uses: xamarin/rebase-bot-action@v1.0\n        with:\n          pull_request_url: ${{ github.event.issue.pull_request.url }}\n          comment_author: ${{ github.actor }}\n          github_repository: ${{ github.repository }}\n          ado_organization: ${{ secrets.ADO_PROJECTCOLLECTION }}\n          ado_project: ${{ secrets.ADO_PROJECT }}\n          rebase_pipeline_id: 13926\n          ado_build_pat: ${{ secrets.ADO_BUILDPAT }}\n          github_account_pat: ${{ secrets.SERVICEACCOUNT_PAT }}\n```"}
{"llm_response": "```yaml\nname: ci\n\non:\n  push:\n    branches-ignore:\n      - main\n    tags:\n      - v*\n  pull_request:\n    branches-ignore:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        python-version: ['3.x', '3.7']\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install dependencies\n      run: |\n        pip install --upgrade pip setuptools wheel\n        pip install pytest pytest-cov\n\n    - name: Run tests\n      run: |\n        pytest\n        pytest-cov --cov=src\n```", "answer": "```yaml # Uses https://github.com/ymyzk/tox-gh-actions\nname: ci\n\non: [push, pull_request]\n\njobs:\n  build:\n    name: Running python ${{ matrix.python-version }} on ${{matrix.os}}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        python-version: [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11.0-rc - 3.11\"]\n\n        os: [ubuntu-latest]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Update pip and setuptools\n      run: |\n        python -m pip install --upgrade pip setuptools\n\n    - name: Install tox and tox-gh-actions\n      run: |\n        python -m pip install tox tox-gh-actions\n\n    - name: Run tox\n      run: |\n        tox\n```"}
{"llm_response": "```yaml\nname: Trivy CVE Dependency Scanner\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  trivy-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Run Trivy scan\n        run: |\n          trivy image --format json --output ./trivy-report.json .\n```", "answer": "```yaml name: Trivy CVE Dependency Scanner\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  trivy-scan:\n    uses: vmware-tanzu/carvel-release-scripts/.github/workflows/trivy-scan.yml@main\n    with:\n      repo: vmware-tanzu/carvel-imgpkg\n      tool: imgpkg\n      goVersion: 1.19.1\n    secrets:\n      githubToken: ${{ secrets.GITHUB_TOKEN }}\n      slackWebhookURL: ${{ secrets.SLACK_WEBHOOK_URL }}\n```"}
{"llm_response": "```yaml Danger\n\nname: Danger\n\non:\n  pull_request:\n    types: [opened, synchronize, rebase]\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: bundle install\n      - name: Run Danger\n        run: danger run\n```", "answer": "```yaml name: \"Danger\"\non:\n  pull_request:\n    types: [opened, synchronize, reopened, edited, ready_for_review]\n\njobs:\n  build:\n    name: Changelog\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - run: npx danger ci\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n```"}
{"llm_response": "```yaml\nname: Enterprise Server Release Search Sync\n\non:\n  - push\n  - pull_request:\n    types: [opened, reopened, labeled, unlabeled]\n  - pull_request_target:\n    types: [closed]\n\nconcurrency:\n  group: ${{ github.workflow }}@${{ github.event.pull_request.head.label || github.head_ref || github.ref }}\n  cancel-in-progress: true\n\njobs:\n  updateIndices:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Update English index for new GHES release\n        run: ./scripts/update_indices.sh\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```", "answer": "```yaml name: Enterprise Server Release Search Sync\n\n# **What it does**: This workflow is used during the Enterprise Server release\n# process. The Enterprise release checklist includes a step to add a label in\n# the format `sync-english-index-for-enterprise-server@<RELEASE NUMBER>`. When\n# that label is added, this workflow runs anytime new commits are made to the\n# Enterprise release megabranch. The Docubot user commits the search indexes in\n# the `lib/search/indexes` directory.\n#\n# **Why we have it**: The Lunr index for the next Enterprise release doesn't yet\n# exist, so we need to generate it. Search wouldn't work at all if we shipped\n# the new release without shipping the index for that release at the same time.\n#\n# **Who does it impact**: The DRI for the Enterprise release, the content\n# writers that are a part of the release and the docs-engineering DRI.\n\non:\n  workflow_dispatch:\n  pull_request:\n    types:\n      - labeled\n      - unlabeled\n      - opened\n      - reopened\n      - synchronize\n      - ready_for_review\n      - unlocked\n\npermissions:\n  contents: write\n\n# This allows a subsequently queued workflow run to interrupt previous runs\nconcurrency:\n  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'\n  cancel-in-progress: true\n\n# This workflow requires a label in the format `sync-english-index-for-<PLAN@RELEASE>`\njobs:\n  updateIndices:\n    name: Update English index for new GHES release\n    # Skip this check if the event originated from Docubot, to prevent\n    # infinite runs when Docubot checks in the search indexes in this workflow\n    if: github.repository == 'github/docs-internal' && github.event.sender.login != 'Docubot' && github.actor != 'dependabot[bot]'\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748\n        with:\n          ref: ${{ github.head_ref }}\n          token: ${{ secrets.DOCUBOT_REPO_PAT }}\n\n      - name: Setup Node\n        uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048\n        with:\n          node-version: '16.17.0'\n          cache: npm\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Get GHES release number from search label if present; only continue if the label is found.\n        id: getVersion\n        run: $GITHUB_WORKSPACE/.github/actions-scripts/enterprise-search-label.js\n\n      - name: Cache nextjs build\n        uses: actions/cache@48af2dc4a9e8278b89d7fa154b955c30c6aaab09\n        with:\n          path: .next/cache\n          key: ${{ runner.os }}-nextjs-${{ hashFiles('package*.json') }}\n\n      - name: Generate the search index files\n        if: ${{ steps.getVersion.outputs.versionToSync }}\n        env:\n          VERSION: ${{ steps.getVersion.outputs.versionToSync }}\n          LANGUAGE: 'en'\n        run: |\n          npm run build\n          npm run sync-search\n\n      - name: Commit the index files and push LFS objects\n        if: ${{ steps.getVersion.outputs.versionToSync }}\n        run: |\n          echo 'git config user.name Docubot'\n          git config user.name Docubot\n          echo 'git config user.email 67483024+docubot@users.noreply.github.com'\n          git config user.email 67483024+docubot@users.noreply.github.com\n          echo 'git add lib/search/indexes'\n          git add lib/search/indexes/*\n          echo 'git commit -m \"update search indexes\"'\n          git commit -m 'update search indexes'\n          echo 'git lfs push --all origin'\n          git lfs push --all origin\n          echo 'git push origin' $GITHUB_HEAD_REF '--set-upstream'\n          git push origin $GITHUB_HEAD_REF --set-upstream\n```"}
{"llm_response": "```yaml\nname: Publish Docs\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - '**/node_modules/**'\n      - '**/dist/**'\n    paths:\n      - docs/**\n  workflow_dispatch:\n\njobs:\n  jekyll:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build documentation\n        run: npm run build\n\n      - name: Deploy documentation to GitHub Pages\n        uses: actions/deploy-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./docs\n```", "answer": "```yaml name: Publish Docs\n\non:\n  push:\n    branches: [main]\n    paths:\n      - \"docs/**\"\n  workflow_dispatch:\n\njobs:\n  jekyll:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: \"3.0\"\n          working-directory: docs\n\n      - uses: limjh16/jekyll-action-ts@v2\n        with:\n          jekyll_src: docs\n          gem_src: docs\n          enable_cache: true\n\n      - uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          branch: gh-pages\n          folder: _site\n          git-config-name: ${{ secrets.GIT_AUTHOR_NAME }}\n          git-config-email: ${{ secrets.GIT_AUTHOR_EMAIL }}\n          commit-message: \ud83d\ude80 Deploy docs\n          clean: true\n          clean-exclude: |\n            playground\n          force: false\n```"}
{"llm_response": "```yaml close_threads:\n  name: Close Unconfirmed Threads After Inactivity\n  on:\n    schedule:\n      - cron: '0 1 * * *'\n    push:\n      branches:\n        - main\n    pull_request:\n      types: [opened, synchronize]\n  concurrency:\n    group: lock\n    cancel-in-progress: true\n  jobs:\n    close_unconfirmed_after_inactivity:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Node.js\n          uses: actions/setup-node@v2\n          with:\n            node-version: '14.x'\n        - name: Install dependencies\n          run: npm install\n        - name: Close unconfirmed threads after inactivity\n          run: |\n            # Add your code here to close unconfirmed threads after inactivity\n            echo \"Closing unconfirmed threads after inactivity...\"\n            # Example command to close threads\n            # git push origin --force-with-lease <branch-name>\n```", "answer": "```yaml {\n  \"name\": \"Close Threads\",\n  \"on\": {\n    \"schedule\": [\n      {\n        \"cron\": \"30 1 * * *\"\n      }\n    ],\n    \"workflow_dispatch\": null\n  },\n  \"permissions\": {\n    \"issues\": \"write\",\n    \"pull-requests\": \"write\"\n  },\n  \"concurrency\": {\n    \"group\": \"lock\"\n  },\n  \"jobs\": {\n    \"close_unconfirmed_after_inactivity\": {\n      \"runs-on\": \"ubuntu-latest\",\n      \"steps\": [\n        {\n          \"uses\": \"actions/stale@v5\",\n          \"with\": {\n            \"stale-issue-label\": \"unconfirmed\",\n            \"ignore-updates\": true,\n            \"remove-stale-when-updated\": false,\n            \"days-before-stale\": -1,\n            \"days-before-close\": 45,\n            \"close-issue-message\": \"Closing after being unconfirmed for 45 Days.\"\n          }\n        }\n      ]\n    }\n  }\n}\n```"}
{"llm_response": "```yaml\nname: \ud83d\udcdd Validate GameDB\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - /GameIndex.yaml\n  pull_request:\n    branches:\n      - master\n    paths:\n      - /GameIndex.yaml\n\njobs:\n  lint:\n    name: Lint and Validate GameDB\n    id: lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install dependencies\n        run: |\n          # Add your installation commands here\n          # For example, if you use npm or yarn, you can install them using npm install || yarn install\n      - name: Run linter\n        run: |\n          # Add your linter command here\n          # For example, if you use ESLint, you can run eslint .\n          # If you use Prettier, you can run npx prettier --write .\n```", "answer": "```yaml name: \ud83d\udcdd Validate GameDB\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - '**/GameIndex.yaml'\n  pull_request:\n    branches:\n      - master\n    paths:\n      - '**/GameIndex.yaml'\n\njobs:\n  lint:\n    name: Lint and Validate GameDB\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n\n      - name: Validate Contents\n        env:\n          GAMEDB_PATH: ./bin/resources/GameIndex.yaml\n          SCRIPT_DIR: .github/workflows/scripts/lint/gamedb\n        run: |\n          pip install -r \"${SCRIPT_DIR}/requirements.txt\"\n          python \"${SCRIPT_DIR}/lint.py\"\n\n      - name: Check Formatting\n        run: |\n          npm install -g prettier\n          prettier --check ./bin/resources/GameIndex.yaml\n```"}
{"llm_response": "```yaml manual_deploy:\n  name: Manual Deploy\n  on:\n    push:\n      branches:\n        - main\n    pull_request:\n      branches:\n        - main\n  jobs:\n    build-and-push-to-hub:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Node.js\n          uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - name: Install dependencies\n          run: npm install\n        - name: Build project\n          run: npm run build\n        - name: Push to GitHub\n          uses: actions/upload-artifact@v2\n          with:\n            name: build-artifacts\n            path: dist\n        - name: Trigger deployment\n          uses: jakegarrigues/github-deploy-action@v3\n          with:\n            repo-token: ${{ secrets.GITHUB_TOKEN }}\n            branch: main\n            directory: dist\n            message: \"Deploying ${{ github.event.head_ref }} tagged as ${{ inputs.tag-this }}\"\n            tag: \"${{ inputs.tag-this }}\"\n```", "answer": "```yaml name: manual_deploy\n\non:\n  workflow_dispatch:\n    inputs:\n      tag:\n        description: 'tag'\n        required: true\n        default: 'i-need-this-now'\n\njobs:\n  build-and-push-to-hub:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: build bf image\n        run: |\n          docker build \\\n          -t botfront/botfront:${{github.event.inputs.tag}} \\\n          .\n      - name: log in\n        run: echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin\n      - name: push\n        run: |\n          docker push botfront/botfront:${{github.event.inputs.tag}}\n```"}
{"llm_response": "```yaml\nname: Conventional Commits\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - run: npm install\n      - run: npm run lint\n```", "answer": "```yaml name: Conventional Commits\non:\n  pull_request:\n\n\njobs:\n  lint:\n    name: https://www.conventionalcommits.org\n    runs-on: ubuntu-latest\n    steps:\n    - uses: beemojs/conventional-pr-action@v2\n      with:\n        config-preset: angular\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Mark issues stale and close stale issues\n\non:\n  schedule:\n    - cron: '0 0 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.15'\n\n      - name: Install dependencies\n        run: go get\n\n      - name: Run tests\n        run: go test ./...\n\n      - name: Mark issues stale\n        uses: actions/stale@v3\n        with:\n          days-to-close: 7\n          labels: stale, closed\n```", "answer": "```yaml name: Mark issues stale and close stale issues\n\non:\n  schedule:\n  - cron: \"0 0 * * *\"\n\njobs:\n  stale:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/stale@9c1b1c6e115ca2af09755448e0dbba24e5061cc8\n      with:\n        repo-token: ${{ secrets.GITHUB_TOKEN }}\n        stale-issue-message: 'This issue is being marked as stale due to a long period of inactivity and will be closed in 5 days if there is no response.'\n        stale-issue-label: 'stale'\n        exempt-issue-labels: 'discussion'\n        only-labels: 'carvel-triage'\n        days-before-stale: 40\n        days-before-close: 5\n```"}
{"llm_response": "```yaml\nname: Tests: node.js >= 10\n\non:\n  push:\n    branches-ignore:\n      - master\n  pull_request:\n    branches-ignore:\n      - master\n  workflow_dispatch:\n\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js 10\n        uses: actions/setup-node@v2\n        with:\n          node-version: '10'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n\n  node:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js 10\n        uses: actions/setup-node@v2\n        with:\n          node-version: '10'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: 'Tests: node.js >= 10'\n\non: [pull_request, push]\n\njobs:\n  tests:\n    uses: ljharb/actions/.github/workflows/node.yml@main\n    with:\n      range: '>= 10'\n      type: minors\n      command: npm run tests-only\n\n  node:\n    name: 'node >= 10'\n    needs: [tests]\n    runs-on: ubuntu-latest\n    steps:\n      - run: 'echo tests completed'\n```"}
{"llm_response": "```yaml\nname: PRs against master are not accepted, please target develop branch\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  fail:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Check if PR targets master\n        if: github.event.pull_request.base.ref != 'master'\n        run: echo \"This PR does not target the master branch.\" && exit 1\n```", "answer": "```yaml name: PRs against master are not accepted, please target develop branch\n\non:\n  pull_request:\n    branches: [ master ]\n\njobs:\n  fail:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Fail PRs against master\n        run: |\n          echo \"PRs must be made aginst the develop branch.\"\n          exit 1\n```"}
{"llm_response": "```yaml Testing:\n  on:\n    push:\n      branches:\n        - master\n        - github-actions-test\n      paths-ignore:\n        - docs/**\n        - README.rst\n        - LICENSE.md\n        - .github/workflows/docs.yml\n        - .deepsource.toml\n        - .gitignore\n    pull_request:\n      branches:\n        - master\n      paths-ignore:\n        - docs/**\n        - README.rst\n        - LICENSE.md\n        - .github/workflows/docs.yml\n        - .deepsource.toml\n        - .gitignore\n  jobs:\n    build:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Install dependencies\n          run: pip install -r requirements.txt\n        - name: Run tests\n          run: python -m unittest discover\n```", "answer": "```yaml name: \"Testing\"\n\non:\n  push:\n    branches: [master,github-actions-test]\n    paths-ignore:\n    - 'docs/**'\n    - 'README.rst'\n    - 'LICENSE.md'\n    - '.github/workflows/docs.yml'\n    - '.deepsource.toml'\n    - '.gitignore'\n\n  pull_request:\n    branches: [master]\n    paths-ignore:\n    - 'docs/**'\n    - 'README.rst'\n    - '.github/workflows/docs.yml'\n    - 'LICENSE.md'\n    - '.deepsource.toml'\n    - '.gitignore'\n\n\njobs:\n  build:\n\n    runs-on: ${{matrix.os}}\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        python-version: [3.8]\n        geomstats-backend : ['autograd','numpy','pytorch','tensorflow']\n        test-folder : ['tests/tests_geomstats/' , 'tests/tests_scripts']\n      fail-fast: false\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build using Python ${{matrix.python-version}} and Backend ${{matrix.geomstats-backend}}\n        uses: actions/setup-python@v4\n        with:\n          python-version: ${{matrix.python-version}}\n\n      - name: install dependencies [pip]\n        run:  |\n          pip install --upgrade pip setuptools wheel\n          pip install -e .[opt,test,${{ matrix.geomstats-backend }}]\n\n      - name: Add annotations [pytest]\n        run: pip install pytest-github-actions-annotate-failures\n\n      - name: unit testing [pytest]\n        env:\n          GEOMSTATS_BACKEND : ${{matrix.geomstats-backend}}\n        run: |\n          pytest --cov-report term --cov=geomstats ${{matrix.test-folder}}\n\n      - name: uploading code coverage [codecov]\n        if: ${{matrix.python-version == 3.8 && matrix.test-folder == 'tests/tests_geomstats/'}}\n        run: |\n          bash <(curl -s https://codecov.io/bash) -c -F ${{matrix.geomstats-backend}}\n```"}
{"llm_response": "```yaml GitHub Actions Mirror\n\nname: GitHub Actions Mirror\n\non:\n  push:\n    branches:\n      - main\n  schedule:\n    - cron: '20 8 * *'\n\njobs:\n  mirror_to_gitlab:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  mirror_to_gitlab_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  mirror_to_bitbucket:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n  mirror_to_gitee:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml name: 'GitHub Actions Mirror'\n\non:\n  workflow_dispatch:\n#  push:\n#    branches: \n#      - master\n  schedule:\n    - cron: '20 20 * * *'\n\njobs:\n  mirror_to_gitlab:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v1\n      - name: 'Mirror to gitlab'\n        uses: pixta-dev/repository-mirroring-action@v1\n        with:\n          target_repo_url:\n            git@gitlab.com:fscarmen/warp.git\n          ssh_private_key:\n            ${{ secrets.PRIVATE_KEY }}\n\n  mirror_to_gitlab_project:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v1\n      - name: 'Mirror to gitlab'\n        uses: pixta-dev/repository-mirroring-action@v1\n        with:\n          target_repo_url:\n            git@gitlab.com:ProjectWARP/warp-script.git\n          ssh_private_key:\n            ${{ secrets.PRIVATE_KEY }}\n\n  mirror_to_bitbucket:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v1\n      - name: 'Mirror to bitbucket'\n        uses: pixta-dev/repository-mirroring-action@v1\n        with:\n          target_repo_url:\n            git@bitbucket.org:fscarmen/warp.git\n          ssh_private_key:\n            ${{ secrets.PRIVATE_KEY }}\n\n  mirror_to_gitee:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout'\n        uses: actions/checkout@v1\n      - name: 'Mirror to gitee'\n        uses: pixta-dev/repository-mirroring-action@v1\n        with:\n          target_repo_url:\n            git@gitee.com:fscarmen/warp.git\n          ssh_private_key:\n            ${{ secrets.PRIVATE_KEY }}```"}
{"llm_response": "```yaml\nname: Publish\n\non:\n  push:\n    branches:\n      - main\n    paths-ignore:\n      - \"**.md\"\n\njobs:\n  publish-npm:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Build and publish\n        run: npm publish\n```", "answer": "```yaml name: Publish\non:\n  push:\n    branches:\n      - 'main'\n    paths-ignore:\n      - '**.md'\n\njobs:\n  publish-npm:\n    if: \"!contains(github.event.head_commit.author.name, 'GITHUBACTION')\"\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"$DATA\"\n        env:\n          DATA: ${{ toJson(github.event.head_commit) }}\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN_ACTION }}\n\n      # Workaround for https://github.com/actions/checkout/issues/6#issuecomment-520636057\n      - name: Prepare repository\n        run: git checkout \"${GITHUB_REF:11}\"\n\n      - name: Configure Git\n        run: |\n          git remote rm origin\n          git remote add origin \"https://$USER_NAME:$GITHUB_PAT@github.com/boostercloud/booster.git\"\n          git fetch\n          git config --local user.email \"action@github.com\"\n          git config --local user.name \"GITHUBACTION\"\n        env:\n          USER_NAME: ${{ secrets.DEPLOYING_USER_NAME }}\n          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN_ACTION }} # Token for pushing\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16.x\n          registry-url: https://registry.npmjs.org/\n\n      - name: Rush Install\n        # Pinning to specific commit that has been audited. Only update 3rd party\n        # actions' commit hashes if you've audited them\n        uses: advancedcsg-open/actions-rush@981bd2de50c1c39dbb8a537e646ee0c410da8638\n        with:\n          build: true\n\n      # Discard all changes that might have occurred after change build\n      - run: git stash\n\n      - name: Authenticate with Registry\n        run: npm config set \"//registry.npmjs.org/:_authToken\" \"$NPM_TOKEN\"\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Pack local dependencies for integration tests\n        run: node common/scripts/install-run-rush.js pack-integration-deps\n\n      - name: 'Az CLI login'\n        uses: azure/login@v1.4.0\n        with:\n          creds: '${{ secrets.AZURE_CREDENTIALS }}'\n\n      - name: Running integration tests before release\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.BOT_AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.BOT_AWS_SECRET_ACCESS_KEY }}\n          AWS_REGION: us-east-1\n          AZURE_APP_ID: ${{ secrets.AZURE_CLIENTID }}\n          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}\n          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANTID }}\n          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTIONID }}\n          REGION: East US\n          publisherEmail: noreply@booster.cloud\n          publisherName: Booster App\n          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENTID }}\n          ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}\n          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTIONID }}\n          ARM_TENANT_ID: ${{ secrets.AZURE_TENANTID }}\n        # This is not running the integration tests of other providers. Think how this could be done, as they require some other configuration\n        # (as an example, check the k8s tests in \"integration-test.yml\", it requires a minicube environment)\n        # Maybe running them in different jobs.\n        run: cd packages/framework-integration-tests && node ../../common/scripts/install-run-rushx.js integration -v\n\n      - name: Discard all the changes after integration tests\n        run: git stash\n\n      - name: Bump version using Rush\n        run: node common/scripts/install-run-rush.js version --bump\n\n      - name: Pull before publishing\n        run: git pull --rebase\n\n      - name: Publish using Rush\n        run: node common/scripts/install-run-rush.js publish --apply --publish --include-all --target-branch origin/main --add-commit-details\n\n        env:\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_ACTION }}\n```"}
{"llm_response": "```yaml\nname: Spellcheck CI\n\non:\n  - pull_request:\n      branches:\n        - dev-es\n      paths:\n        - content/es/**/*.md\n    push:\n      branches:\n        - main\n    workflow_dispatch:\n\njobs:\n  check-spanish-spellcheck:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install PySpelling\n        run: |\n          pip install pyspelling\n\n      - name: Run PySpelling\n        run: |\n          pyspelling --ignore-case --ignore-words=ignore.txt content/es/**/*.md\n```", "answer": "```yaml ---\n# SPDX-license-identifier: Apache-2.0\n##############################################################################\n# Copyright (c) 2022\n# All rights reserved. This program and the accompanying materials\n# are made available under the terms of the Apache License, Version 2.0\n# which accompanies this distribution, and is available at\n# http://www.apache.org/licenses/LICENSE-2.0\n##############################################################################\n\nname: Spellcheck CI\n# yamllint disable-line rule:truthy\non:\n  pull_request:\n    paths:\n      - 'content/es/**/*.md'\n    branches:\n      - dev-es\n  workflow_dispatch:\n\njobs:\n  check-spanish-spellcheck:\n    name: Run PySpelling tool to verify spanish spelling issues\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: GitHub Spellcheck Action\n        uses: rojopolis/spellcheck-github-actions@0.27.0\n        with:\n          config_path: content/es/.spellcheck.yml\n```"}
{"llm_response": "```yaml\nname: Test documentation\n\non:\n  - push:\n      branches:\n        - main\n        - test-me-*\n        - !*\n    - pull_request:\n      branches:\n        - **\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    env:\n      CI_FORCE_COLORS_POETRY: --ansi\n      CI_FORCE_COLORS_SPHINX: --color\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Poetry\n        run: |\n          curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python -\n          poetry install\n      - name: Build and test documentation\n        run: |\n          poetry run sphinx-build docs/source docs/build\n```", "answer": "```yaml ---\nname: Test documentation\n\nenv:\n  CI_FORCE_COLORS_POETRY: --ansi\n  CI_FORCE_COLORS_SPHINX: --color\n\non: # yamllint disable-line rule:truthy\n  workflow_dispatch:\n\n  push:\n    tags:\n      - \"!*\"\n    branches:\n      - main\n      - \"test-me-*\"\n\n  pull_request:\n    branches:\n      - \"**\"\n\njobs:\n  build:\n    name: Tests on ${{ matrix.os }} with default python\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [\"ubuntu-latest\", \"windows-latest\", \"macos-latest\"]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Set up Python\n        uses: actions/setup-python@v3\n\n      - name: Display Python version\n        run: python --version\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          python -m pip install tox\n\n      - name: Set up Homebrew\n        if: runner.os == 'macOS'\n        uses: Homebrew/actions/setup-homebrew@master\n\n      - name: Install enchant on macOS\n        if: runner.os == 'macOS'\n        run: |\n          brew update\n          brew install enchant\n\n      - name: Run tests with tox except linkcheck\n        if: runner.os != 'Linux'\n        run: tox -n docs\n        env:\n          TOX_SKIP_ENV: docs-test-linkcheck\n\n      - name: Run all tests with tox\n        if: runner.os == 'Linux'\n        run: tox -n docs\n```"}
{"llm_response": "```yaml sync_issue_comments_to_jira:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Run script to sync issue comments to JIRA\n      run: npx sync-issue-comments-to-jira\n```", "answer": "```yaml name: Sync issue comments to JIRA\n\n# This workflow will be triggered when new issue comment is created (including PR comments)\non: issue_comment\n\njobs:\n  sync_issue_comments_to_jira:\n    name: Sync Issue Comments to Jira\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Sync issue comments to JIRA\n        uses: espressif/github-actions/sync_issues_to_jira@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          JIRA_URL: ${{ secrets.JIRA_URL }}\n          JIRA_PROJECT: VSC\n          JIRA_COMPONENT: GH\n          JIRA_USER: ${{ secrets.JIRA_USER }}\n          JIRA_PASS: ${{ secrets.JIRA_PASS }}\n```"}
{"llm_response": "```yaml test-coverage\nname: Test Coverage\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  test-coverage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up R\n      uses: r-lib/actions/setup-r@v1\n    - name: Install dependencies\n      run: |\n        Rscript -e \"install.packages('devtools')\"\n        devtools::install()\n    - name: Run tests\n      run: |\n        Rscript -e \"library(testthat); testthat::run_tests()\"\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: test-coverage\n\njobs:\n  test-coverage:\n    uses: easystats/workflows/.github/workflows/test-coverage.yaml@main\n```"}
{"llm_response": "```yaml\nworkflow: .deb packaging\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *' # Run daily at midnight\n\njobs:\n  build_job:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        distro: ['ubuntu-20.04', 'ubuntu-22.04']\n        arch: ['amd64', 'arm64']\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up build environment\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y build-essential dpkg-dev\n\n      - name: Build package\n        run: |\n          mkdir deb-package\n          cd deb-package\n          cmake ..\n          make\n          dpkg-deb --build .\n\n      - name: Upload to GitHub Packages\n        uses: docker://ghcr.io/docker/buildx-push-action@v3\n        with:\n          registry-url: ghcr.io\n          username: ${{ secrets.GITHUB_USERNAME }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n          repository: your-repo-name/debian-package\n          tag: \"latest\"\n```", "answer": "```yaml name: .deb packaging\n\non:\n  workflow_dispatch:\n\njobs:\n  build_job:\n    # The host should always be linux\n    runs-on: ubuntu-latest\n    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}\n\n    # Run steps on a matrix of 3 arch/distro combinations\n    strategy:\n      matrix:\n        include:\n          - arch: arm32v7\n            distro: ubuntu16.04\n          - arch: arm32v7\n            distro: ubuntu18.04\n          - arch: arm32v7\n            distro: ubuntu22.04\n          - arch: arm32v7\n            distro: bullseye\n          - arch: aarch64\n            distro: ubuntu16.04\n          - arch: aarch64\n            distro: ubuntu18.04\n          - arch: aarch64\n            distro: ubuntu20.04\n          - arch: aarch64\n            distro: ubuntu22.04\n          - arch: aarch64\n            distro: buster\n          - arch: aarch64\n            distro: bullseye\n          - arch: amd64\n            distro: buster\n          - arch: i386\n            distro: buster\n          - arch: amd64\n            distro: bullseye\n          - arch: i386\n            distro: bullseye\n          - arch: amd64\n            distro: ubuntu16.04\n          - arch: i386\n            distro: ubuntu16.04\n          - arch: amd64\n            distro: ubuntu18.04\n          - arch: i386\n            distro: ubuntu18.04\n          - arch: amd64\n            distro: ubuntu20.04\n          - arch: amd64\n            distro: ubuntu22.04\n\n    steps:\n      - uses: actions/checkout@v2.1.0\n      - uses: allinurl/run-on-arch-action@master\n        name: Build artifact\n        id: build\n        with:\n          arch: ${{ matrix.arch }}\n          distro: ${{ matrix.distro }}\n\n          # Not required, but speeds up builds\n          githubToken: ${{ github.token }}\n\n          # Create an artifacts directory\n          setup: |\n            mkdir -p \"${PWD}/artifacts\"\n\n          # Mount the artifacts directory as /artifacts in the container\n          dockerRunArgs: |\n            --volume \"${PWD}/artifacts:/artifacts\"\n\n          # The shell to run commands with in the container\n          shell: /bin/bash\n\n          # Install some dependencies in the container. This speeds up builds if\n          # you are also using githubToken. Any dependencies installed here will\n          # be part of the container image that gets cached, so subsequent\n          # builds don't have to re-install them. The image layer is cached\n          # publicly in your project's package repository, so it is vital that\n          # no secrets are present in the container state or logs.\n          install: |\n            case \"${{ matrix.distro }}\" in\n              ubuntu*|jessie|stretch|buster|bullseye)\n                apt-get update && apt-get install -y ca-certificates wget curl lsb-release && apt-get clean all\n                ;;\n            esac\n\n          # Produce a binary artifact and place it in the mounted volume\n          run: |\n            ls -lath \"/artifacts\"\n            curl -O https://deb.goaccess.io/provision/provision.sh\n            chmod +x ./provision.sh\n            ./provision.sh\n            echo \"Success!!\"\n\n      - name: Show the artifact\n        # Items placed in /artifacts in the container will be in\n        # ${PWD}/artifacts on the host.\n        run: |\n          pwd\n          ls -lath \"${PWD}/artifacts\"\n\n      - name: 'Upload deb package'\n        uses: actions/upload-artifact@v3\n        with:\n          name: deb-package\n          path: 'artifacts/*.deb'\n          retention-days: 1\n```"}
{"llm_response": "```yaml\nname: factoryinput\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  repository_dispatch:\n    types: [push]\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Build and test\n        run: |\n          go build -o factoryinput .\n          go test ./...\n```", "answer": "```yaml name: factoryinput\non:\n  push\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Login to DockerHub Registry\n        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}\n\n\n\n      - name: Build the tagged Docker image\n        run: docker build . --file deployment/factoryinput/Dockerfile --tag unitedmanufacturinghub/factoryinput:${GITHUB_REF##*/}\n\n      - name: Push the tagged Docker image\n        run: docker push unitedmanufacturinghub/factoryinput:${GITHUB_REF##*/}\n```"}
{"llm_response": "```yaml Nightly Release macOS Apple Silicon\n\non:\n  schedule:\n    - cron: '0 9 * * *'\n\njobs:\n  test-and-build:\n    runs-on: macos-latest-apple-silicon\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Rust\n        uses: actions-rs/setup-rust@v1\n        with:\n          rust-version: stable\n      - name: Build and Package\n        run: cargo build --release && cargo package --release\n```", "answer": "```yaml on:\n  schedule:\n    - cron:  '0 9 * * *'\n\nname: Nightly Release macOS Apple Silicon\n\njobs:\n  test-and-build:\n    name: Rust tests, build and package nightly release\n    runs-on: [self-hosted, macOS, ARM64]\n    timeout-minutes: 90\n    steps:\n      - uses: actions/checkout@v3\n      - name: zig version\n        run: zig version\n      - name: llvm version\n        run: llc --version | grep LLVM\n\n      - name: run tests\n        run: cargo test --locked --release\n        \n      - name: get commit SHA\n        run:  echo \"SHA=$(git rev-parse --short \"$GITHUB_SHA\")\" >> $GITHUB_ENV\n        \n      - name: get date\n        run: echo \"DATE=$(date \"+%Y-%m-%d\")\" >> $GITHUB_ENV\n        \n      - name: build file name\n        env:\n            DATE: ${{ env.DATE }}\n            SHA: ${{ env.SHA }}\n        run: echo \"RELEASE_TAR_FILENAME=roc_nightly-macos_12_apple_silicon-$DATE-$SHA.tar.gz\" >> $GITHUB_ENV  \n\n      - name: write version to file\n        run: ./ci/write_version.sh\n\n      - name: build nightly release\n        run: cargo build --locked --release\n\n      - name: package release\n        run: ./ci/package_release.sh ${{ env.RELEASE_TAR_FILENAME }}\n\n      - name: print short commit SHA\n        run: git rev-parse --short \"$GITHUB_SHA\"\n      - name: print date\n        run: date\n      - name: Upload artifact Actually uploading to github releases has to be done manually\n        uses: actions/upload-artifact@v3\n        with:\n           name: ${{ env.RELEASE_TAR_FILENAME }}\n           path: ${{ env.RELEASE_TAR_FILENAME }}\n           retention-days: 4\n```"}
{"llm_response": "```yaml\nname: Pull Request Labeler\n\non:\n  pull_request:\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install Cython numpy pandas matplotlib scikit-learn tensorflow torch\n\n      - name: Run tests\n        run: |\n          pytest --cov=cuda\n```", "answer": "```yaml name: \"Pull Request Labeler\"\non:\n- pull_request_target\n\njobs:\n  triage:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/labeler@main\n      with:\n        repo-token: \"${{ secrets.GITHUB_TOKEN }}\"\n```"}
{"llm_response": "```yaml\nname: Test upgrade all warehouse platforms\n\non:\n  push:\n    branches-ignore:\n      - main\n  pull_request:\n    branches-ignore:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.x'\n      - name: Install dependencies\n        run: |\n          pip install --upgrade pip setuptools wheel\n          pip install -r requirements.txt\n      - name: Run tests\n        run: |\n          pytest\n```", "answer": "```yaml name: Test upgrade all warehouse platforms\non:\n  workflow_dispatch:\n\njobs:\n  test:\n    strategy:\n      fail-fast: false\n      matrix:\n        warehouse-type: [ snowflake, bigquery, redshift, databricks, spark ]\n    uses: ./.github/workflows/test-upgrade-warehouse.yml\n    with:\n      warehouse-type: ${{ matrix.warehouse-type }}\n    secrets: inherit\n```"}
{"llm_response": "```yaml\nname: Pre-built\n\non:\n  push:\n    branches:\n      - main\n  schedule:\n    - cron: '0 0 * * *'\n  workflow_dispatch:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Nix\n        uses: nixos/nix-action@v4\n        with:\n          channel: nixpkgs-unstable\n      - name: Build project\n        run: |\n          # Add your build commands here\n          echo \"Building project...\"\n          # Example command: nix build . --outPath ./result\n```", "answer": "```yaml name: \"prebuilt\"\n\non:\n  workflow_dispatch: # allows manual triggering\n  schedule:\n    - cron: '0 0 * * *' # runs daily at 00:00\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: cachix/install-nix-action@v17\n    - uses: cachix/cachix-action@v10\n      with:\n        name: microvm\n        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'\n    - run: nix build -L .#prebuilt\n```"}
{"llm_response": "```yaml TagBot:\n  on:\n    issues:\n      types: [comment]\n    pull_request:\n      types: [comment, opened]\n    push:\n      branches:\n        - main\n  jobs:\n    TagBot:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - name: Set up Julia\n          uses: julia/setup-julia@v1\n          with:\n            version: \"1.7\"\n        - name: Run tagbot\n          run: |\n            git config --global user.name \"Your Name\"\n            git config --global user.email \"your.email@example.com\"\n            git tag -a v$(git describe --tags --abbrev=0) -m \"Latest commit\"\n            git push origin v$(git describe --tags --abbrev=0)\n```", "answer": "```yaml name: TagBot\non:\n  issue_comment:\n    types:\n      - created\n  workflow_dispatch:\njobs:\n  TagBot:\n    if: github.event_name == 'workflow_dispatch' || github.actor == 'JuliaTagBot'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: JuliaRegistries/TagBot@v1\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: rebuildMain\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n  workflow_dispatch:\n\njobs:\n  sendRequest:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Build and test\n      run: |\n        # Add your build and test commands here\n        make build\n        make test\n```", "answer": "```yaml name: rebuildMain\n\n# Controls when the workflow will run\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  sendRequest:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Runs a single command using the runners shell\n      - name: Send signal\n        run: |\n          curl -XPOST -u \"${{ secrets.BOT_PAT_USERNAME}}:${{secrets.BOT_PAT_TOKEN}}\" -H \"Accept: application/vnd.github.everest-preview+json\" -H \"Content-Type: application/json\" https://api.github.com/repos/leaningtech/leaningtech.github.io/dispatches --data '{\"event_type\": \"rebuild-documentation\"}'\n\n```"}
{"llm_response": "```yaml\nname: Deploy to AppStore\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  fastlane-deploy:\n    runs-on: ubuntu-latest\n    inputs:\n      lane-this: ${{ github.event.inputs.lane-this }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Ruby\n        uses: ruby/setup-ruby@v2\n        with:\n          ruby-version: '3.0'\n\n      - name: Install dependencies\n        run: |\n          bundle install --without development test\n\n      - name: Run Fastlane\n        run: |\n          bundle exec fastlane deploy\n```", "answer": "```yaml name: Deploy to AppStore\non:\n  workflow_dispatch:\n    # Enable manual run\n    inputs:\n      lane:\n        description: \"Fastlane lane to use (beta)\"\n        required: true\n        default: \"beta\"\n\njobs:\n  fastlane-deploy:\n    runs-on: macos-latest\n    steps:\n      # Set up Flutter.\n      - name: Clone Flutter repository with stable channel\n        uses: subosito/flutter-action@v1\n        with:\n          channel: stable\n      - run: flutter doctor -v\n\n      # Checkout gallery code and get packages.\n      - name: Checkout code\n        uses: actions/checkout@v3\n      - run: flutter packages get\n      - run: pod install\n        working-directory: ios\n\n      # Setup Ruby, Bundler, and Gemfile dependencies\n      - name: Setup Fastlane\n        uses: ruby/setup-ruby@v1\n        with:\n          ruby-version: \"2.7\"\n          bundler-cache: true\n          working-directory: ios\n\n      # Build and deploy with Fastlane (by default, to internal track) \ud83d\ude80.\n      # Naturally, promote_to_production only deploys.\n      - run: bundle exec fastlane ${{ github.event.inputs.lane || 'beta' }}\n        env:\n          FASTLANE_PASSWORD: ${{ secrets.APP_STORE_PASSWORD }}\n          FASTLANE_USER: ${{ secrets.APP_STORE_EMAIL }}\n        working-directory: ios\n```"}
{"llm_response": "```yaml check-readme\n\nname: check-readme\n\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\njobs:\n  check-readme:\n    runs-on: ${{ matrix.config.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macOS-latest]\n        r: ['3.5', '4.0']\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        if: ${{ matrix.r == '3.5' }}\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev zlib1g-dev\n          Rscript -e \"install.packages('devtools')\"\n        env:\n          R_USER: ${{ runner.user.name }}\n\n      - name: Install dependencies\n        if: ${{ matrix.r == '4.0' }}\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev zlib1g-dev\n          Rscript -e \"install.packages('devtools')\"\n        env:\n          R_USER: ${{ runner.user.name }}\n\n      - name: Check README.md\n        run: |\n          Rscript -e \"library(devtools); load_all(); test_package()\"\n```", "answer": "```yaml # Workflow derived from https://github.com/r-lib/actions/tree/v2/examples\n# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help\n\non:\n  push:\n    branches: [main, master]\n  pull_request:\n    branches: [main, master]\n\nname: check-readme\n\njobs:\n  check-readme:\n    runs-on: ${{ matrix.config.os }}\n\n    name: ${{ matrix.config.os }} (${{ matrix.config.r }})\n\n    strategy:\n      fail-fast: false\n      matrix:\n        config:\n          - { os: ubuntu-latest, r: \"release\" }\n          - { os: ubuntu-latest, r: \"devel\" }\n\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      # Always try to use the latest pandoc version\n      # https://github.com/jgm/pandoc/releases\n      - uses: r-lib/actions/setup-pandoc@v2\n        with:\n          pandoc-version: \"2.19.2\"\n\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: ${{ matrix.config.r }}\n          http-user-agent: \"release\"\n          use-public-rspm: true\n\n      - uses: r-lib/actions/setup-r-dependencies@v2\n        with:\n          pak-version: devel\n          extra-packages: |\n            deps::.\n            any::ggstatsplot\n            any::ggthemes\n\n      - name: Render README\n        run: Rscript -e 'rmarkdown::render(\"README.Rmd\")'\n```"}
{"llm_response": "```yaml test:\n  name: Test Workflow\n\n  on:\n    - push\n      branches:\n        - main\n    - pull_request\n      types:\n        - opened\n        - synchronize\n    - workflow_dispatch\n\n  concurrency:\n    group: \"github.workflow-${{ github.event_name }}-${{ github.ref }}\"\n    cancel-in-progress: true\n\n  jobs:\n    lint:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - run: npm install\n        - run: npm run lint\n\n    scripts:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - run: npm install\n        - run: npm run scripts\n\n    bundled:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - run: npm install\n        - run: npm run bundle\n\n    vscode:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v2\n        - uses: actions/setup-node@v2\n          with:\n            node-version: '14'\n        - run: npm install\n        - run: npm run vscode\n```", "answer": "```yaml name: test\n\non:\n  workflow_dispatch:\n  pull_request:\n    types: [opened, synchronize]\n  push:\n    branches: [main]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}\n  cancel-in-progress: true\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \ud83c\udfd7 Setup repo\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Setup project\n        uses: ./.github/actions/setup-project\n\n      - name: \u2705 Lint project\n        run: yarn lint --max-warnings 0\n\n  scripts:\n    runs-on: ubuntu-latest\n    steps:\n      - name: \ud83c\udfd7 Setup repo\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Setup project\n        uses: ./.github/actions/setup-project\n\n      - name: \u2705 Test scripts\n        run: yarn test:scripts\n\n  bundled:\n    # This extension is bundled before publishing to the stores,\n    # it removes the need for vscode to download dependencies, making install fast.\n    # But this version might cause issues with webpack \"hijacking\" `require` statements.\n    runs-on: ubuntu-latest\n    steps:\n      - name: \ud83c\udfd7 Setup repo\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Setup project\n        uses: ./.github/actions/setup-project\n        with:\n          with-fixture: true\n\n      - name: \ud83d\udc77 Build tests\n        run: yarn build\n\n      - name: \ud83d\udce6 Bundle extension\n        run: yarn build:production\n\n      # When bundled, these dependencies aren't available in normal environments.\n      # This kind-of fakes such environments, while keeping the required dev packages.\n      - name: \ud83e\uddf9 Remove Sucrase\n        run: yarn remove sucrase\n\n      - name: \ud83e\uddea Test on Ubuntu\n        run: xvfb-run --auto-servernum --listen-tcp yarn test:vscode\n        env:\n          VSCODE_VERSION: stable\n\n  vscode:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        vscode: [oldest, stable]\n    steps:\n      - name: \ud83c\udfd7 Setup repo\n        uses: actions/checkout@v3\n\n      - name: \ud83c\udfd7 Setup project\n        uses: ./.github/actions/setup-project\n        with:\n          with-fixture: true\n          without-cache: ${{ matrix.os == 'windows-latest' }}\n\n      - name: \ud83d\udc77 Build project\n        run: yarn build\n\n      # This handles the \"oldest\" vscode version by looking up our \"oldest supported version\"\n      - name: \ud83d\udd75\ufe0f Set vscode version\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const { engines } = require('./package.json')\n            const vscode = '${{ matrix.vscode }}'\n            const target = vscode === 'oldest'\n                ? engines.vscode.substring(1)\n                : vscode\n            core.exportVariable('VSCODE_VERSION', target)\n\n      - name: \ud83e\uddea Test on Ubuntu\n        if: ${{ startsWith(matrix.os, 'ubuntu') }}\n        run: xvfb-run --auto-servernum --listen-tcp yarn test:vscode\n\n      - name: \ud83e\uddea Test on Mac/Windows\n        if: ${{ !startsWith(matrix.os, 'ubuntu') }}\n        run: yarn test:vscode\n```"}
{"llm_response": "```yaml\nname: postcss-loader\n\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\n\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        node-version: [14.x, 16.x, 18.x]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Install dependencies\n        run: npm install\n      - name: Lint code\n        run: npm run lint\n\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest]\n        node-version: [14.x, 16.x, 18.x]\n        webpack-version: [5.x, 6.x]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: Set up Webpack\n        uses: actions/setup-webpack@v2\n        with:\n          webpack-version: ${{ matrix.webpack-version }}\n      - name: Install dependencies\n        run: npm install\n      - name: Build project\n        run: npm run build\n      - name: Run tests\n        run: npm test\n```", "answer": "```yaml name: postcss-loader\n\non:\n  push:\n    branches:\n      - master\n      - next\n  pull_request:\n    branches:\n      - master\n      - next\n\npermissions:\n  contents: read\n\njobs:\n  lint:\n    name: Lint - ${{ matrix.os }} - Node v${{ matrix.node-version }}\n\n    env:\n      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node-version: [16.x]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: \"npm\"\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Security audit\n        run: npm run security\n\n      - name: Check commit message\n        uses: wagoid/commitlint-github-action@v5\n\n  test:\n    name: Test - ${{ matrix.os }} - Node v${{ matrix.node-version }}, Webpack ${{ matrix.webpack-version }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        node-version: [14.x, 16.x, 18.x, 19.x]\n        webpack-version: [latest]\n\n    runs-on: ${{ matrix.os }}\n\n    steps:\n      - name: Setup Git\n        if: matrix.os == 'windows-latest'\n        run: git config --global core.autocrlf input\n\n      - uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: \"npm\"\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Install webpack ${{ matrix.webpack-version }}\n        if: matrix.webpack-version != 'latest'\n        run: npm i webpack@${{ matrix.webpack-version }}\n\n      - name: Run tests for webpack version ${{ matrix.webpack-version }}\n        run: npm run test:coverage -- --ci\n\n      - name: Submit coverage data to codecov\n        uses: codecov/codecov-action@v3\n        with:\n          token: ${{ secrets.CODECOV_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Lint\n\non:\n  pull_request:\n    branches-ignore:\n      - main\n  push:\n    paths-ignore:\n      - '**/*.go'\n      - '**/*.md'\n\njobs:\n  golangci:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Install dependencies\n        run: go mod download\n      - name: Run golangci-lint\n        run: ./scripts/lint.sh\n\n  markdown-lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.16'\n      - name: Install dependencies\n        run: go mod download\n      - name: Run markdownlint\n        run: ./scripts/markdownlint.sh\n```", "answer": "```yaml name: Lint\n# Lint runs golangci-lint over the entire ethermint repository This workflow is\n# run on every pull request and push to main The `golangci` will pass without\n# running if no *.{go, mod, sum} files have been changed.\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  golangci:\n    name: Run golangci-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      # Required: setup-go, for all versions v3.0.0+ of golangci-lint\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.18.3\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            **/**.go\n            go.mod\n            go.sum\n      - uses: golangci/golangci-lint-action@v3.3.0\n        with:\n          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.\n          version: v1.46.2\n          args: --timeout 10m\n          github-token: ${{ secrets.github_token }}\n        # Check only if there are differences in the source code\n        if: \"env.GIT_DIFF\"\n  markdown-lint:\n    name: Run markdown-lint\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    steps:\n      - uses: actions/checkout@v3\n      - uses: technote-space/get-diff-action@v6.1.1\n        with:\n          PATTERNS: |\n            docs/**/*.md\n            x/**/*.md\n            README.md\n      - uses: nosborn/github-action-markdown-cli@v3.2.0\n        with:\n          files: .\n          config_file: .markdownlint.yml\n          ignore_path: .markdownlintignore\n        # Check only if there are differences in the source code\n        if: env.GIT_DIFF\n```"}
{"llm_response": "```yaml Build App\n\nname: Build App\n\non:\n  push:\n    branches-ignore:\n      - l10n_main\n      - dependabot/*\n  pull_request:\n    branches-ignore:\n      - l10n_main\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Java\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n    - name: Build app\n      run: ./gradlew build\n```", "answer": "```yaml name: Build App\n\non:\n  push:\n    branches-ignore:\n      - l10n_main\n      - dependabot/*\n  pull_request:\n    branches-ignore:\n      - l10n_main\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'adopt'\n          java-version: 11\n\n      - name: Validate Gradle Wrapper\n        uses: gradle/wrapper-validation-action@v1.0.4\n\n      - name: Configure Gradle\n        run: |\n          mkdir ~/.gradle/\n          echo -e \"org.gradle.jvmargs=-Xmx8192M\\nmapsApiKey=AIzaSyA2t2893e9wccs9EnlnauJRgtqFNYQSp-o\\norg.gradle.daemon=false\" >> ~/.gradle/gradle.properties\n\n      - name: Build (full, beta)\n        run: ./gradlew :mobile:assembleFullBeta\n      - name: Unit Tests (full, beta)\n        run: ./gradlew :mobile:testFullBetaReleaseUnitTest\n      - name: Build (full, stable)\n        run: ./gradlew :mobile:assembleFullStable\n      - name: Unit Tests (full, stable)\n        run: ./gradlew :mobile:testFullStableReleaseUnitTest\n      - name: Build (foss, beta)\n        run: ./gradlew :mobile:assembleFossBeta\n      - name: Unit Tests (foss, beta)\n        run: ./gradlew :mobile:testFossBetaReleaseUnitTest\n      - name: Build (foss, stable)\n        run: ./gradlew :mobile:assembleFossStable\n      - name: Unit Tests (foss, stable)\n        run: ./gradlew :mobile:testFossStableReleaseUnitTest\n```"}
{"llm_response": "```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  mix_test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        otp: [24.0.1]\n        elixir: [1.12.3]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Elixir\n        uses: actions/setup-elixir@v2\n        with:\n          elixir-version: ${{ matrix.elixir }}\n      - name: Install dependencies\n        run: mix deps.get\n      - name: Run tests\n        run: mix test --only ${{ matrix.otp }} --only ${{ matrix.elixir }}\n\n  npm_test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n\n  integration-test-elixir:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Elixir\n        uses: actions/setup-elixir@v2\n        with:\n          elixir-version: ${{ matrix.elixir }}\n      - name: Install dependencies\n        run: mix deps.get\n      - name: Run tests\n        run: mix test --only e2e\n```", "answer": "```yaml name: CI\non: [push, pull_request]\npermissions:\n  contents: read\n\njobs:\n  mix_test:\n    name: mix test (OTP ${{matrix.otp}} | Elixir ${{matrix.elixir}})\n\n    env:\n      MIX_ENV: test\n\n    strategy:\n      matrix:\n        include:\n          - elixir: 1.12.0\n            otp: 22.3\n\n          - elixir: 1.14.0 # TODO: bump to 1.15 to leverage format diffs https://github.com/elixir-lang/elixir/pull/12109\n            otp: 24.3.4\n            lint: true\n            installer: true\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n\n    - name: Set up Elixir\n      uses: erlef/setup-beam@v1\n      with:\n        elixir-version: ${{ matrix.elixir }}\n        otp-version: ${{ matrix.otp }}\n\n    - name: Restore deps and _build cache\n      uses: actions/cache@v3\n      with:\n        path: |\n          deps\n          _build\n        key: deps-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}\n        restore-keys: |\n          deps-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}\n\n    - name: Install dependencies\n      run: mix deps.get --only test\n\n    - name: Remove compiled application files\n      run: mix clean\n\n    - name: Compile & lint dependencies\n      run: mix compile --warnings-as-errors\n      if: ${{ matrix.lint }}\n\n    - name: Run tests\n      run: mix test\n\n    - name: Run installer test\n      run: |\n        cd installer\n        mix test\n      if: ${{ matrix.installer }}\n\n  npm_test:\n    name: npm test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Restore deps and _build cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            deps\n            _build\n          key: deps-${{ runner.os }}-npm-${{ hashFiles('**/mix.lock') }}\n          restore-keys: |\n            deps-${{ runner.os }}-npm\n\n      - name: Set up Node.js 12.x\n        uses: actions/setup-node@v3\n        with:\n          node-version: 12.x\n\n      - name: Restore npm cache\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: npm install and test\n        run: |\n          cd assets\n          npm install\n          npm test\n\n  integration-test-elixir:\n    runs-on: ubuntu-latest\n    env:\n      FORCE_COLOR: 1\n\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - elixir: 1.14.0\n            otp: 24.3.4\n    steps:\n      - uses: actions/checkout@v3\n      - name: Download released earth\n        run: \"sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/download/v0.5.16/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'\"\n      - name: Execute tests\n        run: earthly -P --build-arg ELIXIR=${{ matrix.elixir }} --build-arg OTP=${{ matrix.otp }} +integration-test\n```"}
{"llm_response": "```yaml test_emui:\n  on:\n    push:\n      branches-ignore:\n        - main\n    pull_request:\n      branches-ignore:\n        - main\n\n  jobs:\n    update:\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout code\n          uses: actions/checkout@v2\n        - name: Run tests\n          run: ./run_tests.sh\n```", "answer": "```yaml name: test emui \non:\n  workflow_dispatch:\njobs:\n  update:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n      with:\n        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token\n        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo\n\n    - name: Update Icons\n      run: |\n            dd if=/dev/zero of=test.zip bs=50M count=1\n            curl https://rclone.org/install.sh | sudo bash\n            mkdir -p ~/.config/rclone/\n            cp -rf \"$GITHUB_WORKSPACE\"/.github/rclone.conf ~/.config/rclone/rclone.conf\n            curl -fsSL \"https://nn.ci/alist.sh\" | sudo bash -s install\n            sudo systemctl stop alist\n            echo ${{ secrets.DBEMUI }} > base64.txt\n            base64 --decode base64.txt > \"$GITHUB_WORKSPACE\"/db.zip\n            unzip \"$GITHUB_WORKSPACE\"/db.zip -d \"$GITHUB_WORKSPACE\"\n            sudo cp -f \"$GITHUB_WORKSPACE\"/data.db /opt/alist/data\n            sudo systemctl start alist\n            rclone copy -P test.zip 123pan:/\n```"}
{"llm_response": "```yaml\nname: codespell\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  codespell:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Run codespell\n        run: |\n          pip install codespell\n          codespell .\n```", "answer": "```yaml name: codespell\non: [pull_request, push]\njobs:\n  codespell:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - run: python3 -m pip install codespell\n      - run: codespell --ignore-words-list=\"ba,fo,hel,revered,womens\"\n          --skip=\"./README.*.md,*.svg,*.ai,./benchmarks/snippets.py,./tests,./tools\"\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n  schedule:\n    - cron: '0 2 * * 0'\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup CodeQL\n        uses: github/codeql-action/setup@v1\n      - name: Analyze code\n        uses: github/codeql-action/analyze@v1\n```", "answer": "```yaml name: \"CodeQL\"\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n  schedule:\n    - cron: '36 2 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'javascript' ]\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: ${{ matrix.language }}\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: welcome\n\non:\n  - fork\n  - push:\n    branches:\n      - develop\n  - issue_opened\n  - comment_on_issue\n  - comment_on_pull_request\n  - pull_request\n  - comment_on_pull_request_diff\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n```", "answer": "```yaml on:\n  fork:\n  push:\n    branches: [develop]\n  issues:\n    types: [opened]\n  issue_comment:\n    types: [created]\n  pull_request_target:\n    types: [opened]\n  pull_request_review_comment:\n    types: [created]\n\njobs:\n  welcome:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: EddieHubCommunity/gh-action-community/src/welcome@main\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          issue-message: '<h1>It''s great having you contribute to this project</h1> Welcome to the community :nerd_face:'\n          pr-message: '<h1>It''s great having you contribute to this project</h1> Welcome to the community :nerd_face:'\n          footer: 'If you would like to continue contributing to open source and would like to do it with an awesome inclusive community, you should join our <a href=\"http://discord.eddiehub.org\">Discord Server</a> and our <a href=\"http://github.eddiehub.org\">GitHub Organisation</a> - we help and encourage each other to contribute to open source little and often \ud83e\udd13 . Any questions let us know.'\n  \n```"}
{"llm_response": "```yaml workflows:\n  Icon modern-black-variant:\n    on:\n      push:\n        branches:\n          - master\n        paths-ignore:\n          - '**'\n        paths:\n          - icons/modern-black-variant.icns\n          - .github/workflows/icon-modern-black-variant.yml\n      pull_request:\n        paths-ignore:\n          - '**'\n        paths:\n          - icons/modern-black-variant.icns\n          - .github/workflows/icon-modern-black-variant.yml\n    jobs:\n      build:\n        runs-on: ubuntu-latest\n        steps:\n          - name: Checkout code\n            uses: actions/checkout@v2\n          - name: Set up Ruby\n            uses: ruby/setup-ruby@v2\n            with:\n              ruby-version: '3.0'\n          - name: Install dependencies\n            run: bundle install\n          - name: Build icon\n            run: ./scripts/build_icon.rb\n```", "answer": "```yaml # This file is automatically generated by iconset script.\n#\n# DO NOT MODIFY it manually.\n\nname: Icon modern-black-variant\n\non:\n  push:\n    branches:\n      - master\n    paths:\n      - \"icons/modern-black-variant.icns\"\n      - \".github/workflows/icon-modern-black-variant.yml\"\n  pull_request:\n    paths:\n      - \"icons/modern-black-variant.icns\"\n      - \".github/workflows/icon-modern-black-variant.yml\"\n\njobs:\n  build:\n    runs-on: macos-11\n    env:\n      HOMEBREW_GITHUB_REF: ${{ github.head_ref || github.ref }}\n      HOMEBREW_GITHUB_REPOSITORY: ${{ github.repository }}\n      HOMEBREW_GITHUB_ACTOR: ${{ github.actor }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build emacs-plus with modern-black-variant icon\n        run: brew install Aliases/$(readlink Aliases/emacs-plus) --with-modern-black-variant-icon\n\n      - name: Test installation\n        run: $(brew --prefix)/bin/emacs --batch --eval='(print (+ 2 2))'\n```"}
{"llm_response": "```yaml lint:\n  runs-on: ubuntu-latest\n  permissions:\n    contents: read\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Install dependencies\n      run: npm install\n    - name: Run linter\n      run: npm run lint\n```", "answer": "```yaml # This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Lint\n\non:\n  pull_request:\n    branches:\n    - main\n\npermissions:\n  contents: read\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: \"*\" # latest\n    - run: npm ci\n    - run: npm run lint\n    - run: npm run lint-languages\n```"}
{"llm_response": "```yaml\nname: Ready for docs-content review\n\non:\n  issues:\n    types: [labeled]\n  pull_request_review:\n    types: [requested]\n\njobs:\n  request_doc_review:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Request a review from the docs-content team\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          gh api /repos/:owner/:repo/pulls/${{ github.event.pull_request.number }}/reviews --method POST \\\n            -H \"Authorization: Bearer $GITHUB_TOKEN\" \\\n            -H \"Content-Type: application/json\" \\\n            -d '{\"body\": \"Please review this PR.\"}'\n```", "answer": "```yaml name: Ready for docs-content review\n\n# **What it does**: Adds pull requests in the docs-internal repository to the docs-content review board when the \"ready-for-doc-review\" label is added or when a review by docs-content is requested\n# **Why we have it**: So that other GitHub teams can easily request reviews from the docs-content team, and so that writers can see when a PR is ready for review\n# **Who does it impact**: Writers working in the docs-internal repository\n\non:\n  pull_request_target:\n    types: [labeled, review_requested]\n\npermissions:\n  contents: read\n\njobs:\n  request_doc_review:\n    name: Request a review from the docs-content team\n    if: >-\n      github.repository == 'github/docs-internal' &&\n      (github.event.label.name == 'ready-for-doc-review' || github.event.requested_team.name == 'docs-content')\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repo content\n        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748\n\n      - name: Setup Node\n        uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048\n        with:\n          node-version: '16.17.0'\n          cache: npm\n\n      - name: Install dependencies\n        run: npm install @octokit/graphql\n\n      - name: Run script\n        run: |\n          node .github/actions-scripts/ready-for-docs-review.js\n        env:\n          TOKEN: ${{ secrets.DOCS_BOT_FR }}\n          PROJECT_NUMBER: 2936\n          ORGANIZATION: 'github'\n          ITEM_NODE_ID: ${{ github.event.pull_request.node_id }}\n          AUTHOR_LOGIN: ${{ github.event.pull_request.user.login }}\n          REPO: ${{ github.event.pull_request.base.repo.full_name }}\n\n        # Since the projects API is still in beta, use the old workflow if something fails\n        # so that we don't miss these PRs\n      - name: Backup action (Add pull request to FR project board)\n        if: ${{ failure() }}\n        uses: rachmari/actions-add-new-issue-to-column@1a459ef92308ba7c9c9dc2fcdd72f232495574a9\n        with:\n          action-token: ${{ secrets.DOCUBOT_READORG_REPO_WORKFLOW_SCOPES }}\n          project-url: 'https://github.com/orgs/github/projects/1367'\n          column-name: 'Docs-internal external contributor PRs'\n```"}
{"llm_response": "```yaml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - name: Install dependencies\n      run: npm install\n    - name: Build project\n      run: npm run build\n    - name: Deploy to production\n      uses: actions/deploy-to-github@v3\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        repo-token: ${{ secrets.REPO_TOKEN }}\n        draft: false\n        files: 'dist/**/*'\n```", "answer": "```yaml name: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n\n      - run: npx conventional-github-releaser -p angular\n        env:\n          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```"}
{"llm_response": "```yaml Danger Action\nname: Danger Action\n\non:\n  pull_request:\n    types: [opened, edited, labeled, unlabeled]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Install dependencies\n        run: ./gradlew build\n\n      - name: Run Danger\n        run: ./gradlew danger --reporter=markdown\n```", "answer": "```yaml name: Danger Action\n\non: [pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    name: \"Run Danger\"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Danger\n        uses: danger/kotlin@master\n        with:\n          args: \"--id DangerKotlinAction\"\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```"}
{"llm_response": "```yaml\nname: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run tests\n        run: go test ./...\n\n  test-arm64:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        arch: [arm64]\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Run tests\n        run: go test ./... && go test -c -o myapp myapp.go\n\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: '1.17'\n\n      - name: Build and test\n        run: go build -o myapp && go test ./...\n\n      - name: Generate coverage report\n        run: go tool cover -html=coverage.out -o coverage.html\n```", "answer": "```yaml name: Test\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  test:\n    strategy:\n      fail-fast: false\n      matrix:\n        go: [1.17.x, 1.18.x, 1.19.x]\n        os: [ubuntu-20.04, macos-latest]\n    runs-on: ${{ matrix.os }}\n    env:\n      CGO_ENABLED: 1\n    steps:\n      - name: Install GCC (MacOS)\n        if: startsWith(matrix.os, 'macos')\n        run: |\n          brew update\n          brew install gcc\n      - name: Install GCC (Ubuntu)\n        if: startsWith(matrix.os, 'ubuntu')\n        run: |\n          sudo apt update\n          sudo apt install -y gcc-multilib g++-multilib\n        shell: bash\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Checkout code\n        uses: actions/checkout@v2.5.0\n      - name: Test\n        run: go test -v ./...\n\n  test-arm64:\n    strategy:\n      matrix:\n        go: [1.17.x, 1.18.x, 1.19.x]\n\n    runs-on: ubuntu-20.04\n    env:\n      CGO_ENABLED: 1\n      GOOS: linux\n      GOARCH: arm64\n      CC: \"/usr/bin/aarch64-linux-gnu-gcc\"\n    steps:\n      - name: Install GCC and SQLite for Arm64\n        uses: ryankurte/action-apt@v0.3.0\n        with:\n          arch: arm64\n          packages: \"gcc-10-aarch64-linux-gnu gcc-aarch64-linux-gnu libc6-dev:arm64 linux-libc-dev:arm64 libsqlite3-dev:arm64 gcc-multilib-arm-linux-gnueabihf:arm64 file\"\n      - name: Install Go\n        uses: actions/setup-go@v3\n        with:\n          go-version: ${{ matrix.go }}\n      - name: Checkout code\n        uses: actions/checkout@v2.5.0\n      - name: Build\n        run: go build .\n        shell: bash\n      - name: Verify build\n        run: file mbtileserver\n        shell: bash\n\n  coverage:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install GCC (Ubuntu)\n        run: |\n          sudo apt update\n          sudo apt install -y gcc-multilib g++-multilib\n        shell: bash\n      - name: Install Go\n        if: success()\n        uses: actions/setup-go@v3\n        with:\n          go-version: 1.17.x\n      - name: Checkout code\n        uses: actions/checkout@v2.5.0\n      - name: Calc coverage\n        run: |\n          go test -v -covermode=count -coverprofile=coverage.out ./...\n      - name: Convert coverage.out to coverage.lcov\n        uses: jandelgado/gcov2lcov-action@v1.0.9\n      - name: Coveralls\n        uses: coverallsapp/github-action@1.1.3\n        with:\n          github-token: ${{ secrets.github_token }}\n          path-to-lcov: coverage.lcov\n```"}
{"llm_response": "```yaml\nname: CodeQL\n\non:\n  push:\n    branches:\n      - master\n\npermissions:\n  ghes-token: read\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Setup CodeQL\n        uses: github/codeql-action/setup@v2\n      - name: Run CodeQL analysis\n        uses: github/codeql-action/analyze@v2\n        with:\n          database-dir: ./codeql-results\n          database-name: my-database\n          database-type: sqlite\n          query-repos: .github/codeql-queries\n          entry-point: .\n          languages: typescript\n          threads: auto\n          cache-key: ${{ runner.os }}-${{ hashFiles('**/*') }}\n```", "answer": "```yaml name: CodeQL\non:\n  push:\n    branches: [master]\n\npermissions: read-all\n\njobs:\n  analyze:\n    permissions:\n      security-events: write\n    name: Analyze\n    runs-on: ubuntu-20.04\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [\"go\", \"javascript\"]\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: ${{ matrix.language }}\n          config-file: ./.github/codeql/codeql-config.yml\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@v2\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n```"}
{"llm_response": "```yaml\nname: Backend CI\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14.x'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run tests\n      run: npm test\n```", "answer": "```yaml name: Backend CI\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: \"./packages/backend\"\n\n    strategy:\n      matrix:\n        node-version: [12.x, 14.x, 16.x]\n\n    services:\n      # Label used to access the service container\n      postgres:\n        # Docker Hub image\n        image: postgres\n        # Provide the password for postgres\n        env:\n          POSTGRES_DB: aurora\n          POSTGRES_USER: root\n          POSTGRES_PASSWORD: password\n        # Set health checks to wait until postgres has started\n        options: >-\n          --health-cmd pg_isready --health-interval 10s --health-timeout 5s\n          --health-retries 5\n        ports:\n          # Maps tcp port 5432 on service container to the host\n          - 5432:5432\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: \"npm\"\n          cache-dependency-path: \"./packages/backend/package-lock.json\"\n      - run: npm ci\n      - run: npm run build --if-present\n      - run: npm run db:migrate\n        env:\n          DATABASE_URL: postgres://root:password@localhost:5432/aurora\n      - run: npm test\n        env:\n          JWT_SECRET: impossibletoguess\n          DATABASE_URL: postgres://root:password@localhost:5432/aurora\n```"}
{"llm_response": "```yaml build:\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.x'\n    - name: Install dependencies\n      run: |\n        pip install mkdocs mkdocs-material\n    - name: Build documentation\n      run: mkdocs build\n```", "answer": "```yaml name: Build Documentation using MkDocs\non:\n  push:\n    branches: [ master ]\njobs:\n  build:\n    name: Build and Deploy Documentation\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout Master\n        uses: actions/checkout@v3\n      - name: Set up Python 3.8\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.8'\n      - name: Install dependencies\n        run: |\n          python -m pip install poetry==1.1.11\n          poetry install --extras \"all\"\n        env:\n          POETRY_VIRTUALENVS_CREATE: false\n      - name: Deploy\n        run: |\n          mkdocs gh-deploy --force\n```"}
{"llm_response": "```yaml build-test-publish:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up .NET Core\n        uses: actions/setup-dotnet@v2\n        with:\n          dotnet-version: '3.x'\n      - name: Restore dependencies\n        run: dotnet restore\n      - name: Build the project\n        run: dotnet build --configuration Release\n      - name: Test the project\n        run: dotnet test --configuration Release\n      - name: Publish the project\n        run: dotnet publish -c Release -o ./publish\n```", "answer": "```yaml name: Build, test and publish\non: [ push ]\n\njobs:\n  build-test-publish:\n    name: Build, test and publish\n    uses: HavenDV/workflows/.github/workflows/dotnet_build-test-publish.yml@main\n    with:\n      os: windows-2022\n      use-msbuild: true\n      project-path: \n        # This is required for correct publishing to NuGet\n        /target:libs\\H_NotifyIcon\n        /target:libs\\H_NotifyIcon_Uno\n        /target:libs\\H_NotifyIcon_Uno_WinUI\n        /target:libs\\H_NotifyIcon_WinUI\n        /target:libs\\H_NotifyIcon_Wpf\n    secrets:\n      nuget-key: ${{ secrets.NUGET_KEY }}\n```"}
{"llm_response": "```yaml\nname: Re-usable Workflow - Build UI and Server\n\non:\n  workflow_dispatch:\n\njobs:\n  build-backend:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ secrets.NODE_VERSION }}\n      - name: Install dependencies\n        run: npm install\n      - name: Build backend\n        run: npm run build\n\n  build-ui:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Go\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ secrets.GO_VERSION }}\n      - name: Install dependencies\n        run: go mod download\n      - name: Build UI\n        run: go run cmd/main.go\n```", "answer": "```yaml name: Re-usable Workflow - Build UI and Server\non:\n  workflow_call: \n    secrets: \n      NODE_VERSION:\n        required: true\n      GO_VERSION: \n        required: true\n\njobs:\n  build-backend:\n    name: Backend build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code\n        uses: actions/checkout@master\n        with:\n          repository: meshery/meshery\n          fetch-depth: 1\n      - name: Setup Go\n        uses: actions/setup-go@master\n        with:\n          go-version: \"1.19\"\n      - name: Setup Cache\n        uses: actions/cache@v3\n        with:\n          path: ~/go/pkg/mod\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n      - run: |\n          GOPROXY=https://proxy.golang.org,direct GOSUMDB=off GO111MODULE=on go build -tags draft ./server/cmd/main.go ./server/cmd/error.go\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3.0.0\n        with:\n          name: meshery\n          path: ./main\n  build-ui:\n    name: UI build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out code\n        uses: actions/checkout@master\n        with:\n          repository: meshery/meshery\n          fetch-depth: 1\n      - uses: actions/setup-node@v3.0.0\n        with:\n          node-version: ${{ secrets.NODE_VERSION }}\n      - run: sudo npm i -g npm@7\n      - name: Cache node modules\n        id: node-cache\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/cache\n            ~/.cache\n            /home/runner/.cache\n            !~/cache/exclude\n            **/node_modules\n            /home/runner/.cache/Cypress\n          key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n      - name: Install dependencies\n        run: |\n          cd ui\n          npm i\n          cd ..\n          cd provider-ui\n          npm i\n      - name: build meshery-ui\n        run: |\n          make build-meshery-ui\n      - name: build provider-ui\n        run: |\n          make build-provider-ui\n      - name: upload meshery-ui artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: meshery-ui-build\n          path: ui/out/\n      - name: upload Meshery-provider-ui artifacts\n        uses: actions/upload-artifact@v3\n        with: \n          name: meshery-provider-ui build\n          path: provider-ui/out/\n```"}
