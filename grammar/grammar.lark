# GitHub Actions Workflow GBNF Grammar

# root ::= "```yaml" ws? nl* workflow nl* "```" nl*
root ::= nl* workflow nl*

workflow ::= name nl+ "on:" ws trigger-definition (nl+ (concurrency|root-env|root-permissions|root-defaults))* nl+ "jobs:" (nl job)+

# ########################################
# Trigger Definitions
# ########################################

trigger-definition ::= single-event | multiple-events | event-dict+

event-dict ::= nl indent (workflow-call | push | pull | workflow-dispatch | schedule | event-name-with-types)

workflow-dispatch ::= "workflow_dispatch:" ( nl indent indent "inputs:" nl input-definitions )?

schedule ::= "schedule:" (nl indent indent "- cron:" ws* "'" string "'")+

# ----------------------------------------
# Pull Definitions
# ----------------------------------------

pull ::= ("pull_request"|"pull_request_target") ":" (nl push-params)*

pull-params ::= indent indent pull-options ":" branches-list

pull-options ::= ("branches"|"branches-ignore"|"paths"|"paths-ignore")

# ----------------------------------------
# Push Definitions
# ----------------------------------------

push ::= "push:" (nl push-params)*

push-params ::= indent indent (pull-options|"tags"|"tags-ignore") ":" branches-list

branches-list ::= (ws string) | (ws "[" string ("," string)* "]") | (nl indent indent indent "- " string)*

# ----------------------------------------
# Workflow Call Definitions
# ----------------------------------------

workflow-call ::= "workflow_call:" nl indent indent workflow-call-definition

workflow-call-definition ::= "inputs:" nl input-definitions nl* indent indent "secrets:" nl secret-definitions

input-definitions ::= input-definition (nl input-definition)*

input-definition ::= indent indent indent identifier ":" (nl indent indent indent indent input-definition-value)+

input-definition-value ::= "description:" ws string | "required:" ws boolean | "default:" ws string | "type:" ws string

secret-definitions ::= secret-definition (nl secret-definition)*

secret-definition ::= indent indent indent identifier ":" (nl indent indent indent indent secret-definition-value)+

secret-definition-value ::= "description:" ws string | "required:" ws boolean

# ----------------------------------------

single-event ::= event-name | event-name-with-types

one-line-event ::= event-name ":" ws "[" string "]"

event-name ::= "push" | "pull-request" | "schedule" | "workflow-dispatch" | "branches" | [a-z|_]+

event-name-with-types ::= event-name ":" nl indent indent ( event-type-multiline | event-types-one-line )

event-types-one-line ::= "types:" ws "[" event-type ("," ws event-type)* "]"

event-type-multiline ::= "types:" (nl indent indent indent "- " event-type)+

event-type ::= "created" | "edited" | "opened" | "synchronize" | "closed" | [a-z|_]+

multiple-events ::= "[" event-list "]"

event-list ::= event-name ("," ws event-name)*

# ########################################
# Defaults Definitions
# ########################################

root-defaults ::= "defaults:" (nl* indent "run:")+ (nl root-defaults-values)+

root-defaults-values ::= indent indent (shell|"working-directory:" ws? string)

# ########################################
# Env Definitions
# ########################################

root-env ::= "env:" (nl* env-values)+

env-values ::= indent key-value

# ########################################
# Permissions Definitions
# ########################################

root-permissions ::= "permissions:" ((nl* indent permissions-params)+ | "read-all" | "write-all" | ("{" ws? "}"))

permissions-values ::= "read"|"write"|"none"
permissions-keys ::= "actions"|"attestations"|"checks"|"contents"|"deployments"|"discussions"|"id-token"|"issues"|"packages"|"pages"|"pull-requests"|"repository-projects"|"security-events"|"statuses"

permissions-params ::= permissions-keys ws? ":" ws? permissions-values

# ########################################
# Concurrency Definitions
# ########################################

concurrency ::= "concurrency:" nl concurrency-params+

concurrency-params ::= indent (concurrency-group | cancel-in-progress) (nl indent (concurrency-group | cancel-in-progress))*
concurrency-group ::= "group:" ws string
cancel-in-progress ::= "cancel-in-progress:" ws boolean

# ########################################
# Job Definitions
# ########################################

job ::= string ":" (nl+ indent indent job-options )+

job-options ::= runs-on | if | needs | job-env | steps | name | outputs | timeout | container | strategy | job-permissions | reusable-workflow | environment

environment ::= "environment:" ws? string

strategy ::= "strategy:" ( nl indent indent indent ( matrix | "fail-fast" ws? ":" ws? boolean | "max-parallel:" ws number ) )+

matrix ::= "matrix:" ( nl indent indent indent indent ( key-value | key-array | matrix-include | matrix-exclude) )+
matrix-include ::= "include:" (nl indent indent indent indent indent matrix-include-values)*
matrix-exclude ::= "exclude:" (nl indent indent indent indent indent matrix-include-values)*
matrix-include-values ::= ("- "| indent) (key-value | key-array)

runs-on ::= "runs-on:" ws runner
needs ::= "needs:" ws string
timeout ::= "timeout-minutes:" ws number
job-env ::= "env:" nl indent indent indent key-value
outputs ::= "outputs:" (nl indent indent indent identifier ":" ws string)+

container ::= "container:" (nl container-params) | "container:" ws string
container-params ::= indent indent indent (container-image | volumes) (nl indent indent indent (container-image | volumes))*
container-image ::= "image:" ws string

reusable-workflow ::= "uses:" ws? string

job-permissions ::= "permissions:" ((nl+ indent indent indent permissions-params)+ | "read-all" | "write-all" | ("{" ws? "}"))

volumes ::= "volumes:" (nl indent indent indent indent "- " string)+

runner ::= "ubuntu-" string | "windows-" string | "macos-"("latest"|[1-9]+) | variable

# ########################################
# Step Definitions
# ########################################

steps ::= "steps:" (nl+ step)+

step ::= indent indent indent "- " step-definition (nl indent indent indent indent step-definition)*

step-definition ::= name | "uses:" ws action | with-definition | "id:" ws string | timeout | run | if | "working-directory:" ws? string | shell | step-env | continue-on-error

continue-on-error ::= "continue-on-error:" ws? boolean

shell ::= "shell:" ws? ("bash"|"pwsh"|"python"|"sh"|"cmd"|"pwsh"|"powershell")

step-env ::= "env:" (nl indent indent indent indent indent identifier ws? ":" ws? string)+

action ::= string

with-definition ::= ("with:" nl with-params)?

with-params ::= with-param (nl with-param)*

with-param ::= indent indent indent indent indent string ":" ws string | indent indent indent indent indent string ":" ws "|" (nl indent indent indent indent indent indent string)+

run ::= "run:" ws string | "run:" ws ( "|" | "|-" ) (nl indent indent indent indent indent string)+

# ########################################
# Utility Definitions
# ########################################

string ::= [a-zA-Z0-9| "-" | "_" | "/" | "@" | ";" | "^" | "?" | \u005C | \u005B | \u005D | \u2014 | \uFE31 | \u002D | ws |\u0024|\u007D| "(" | ")" | "'" | "&" | "," | "!" | "*" | "+" | "%" | "~" | "." | "{" | "}" | ":" | "`" | "=" | ">" | "<" ]+

ws ::= [ \t]*

nl ::= (indent|ws)* comment* "\n" ((indent|ws)* comment* "\n")*
# nl ::= "\n"

indent ::= "  "

identifier ::= [a-zA-Z0-9-_]+

boolean ::= "true" | "false"

if ::= "if:" ws string

name ::= "name:" ws string

number ::= [0-9]+

key-value ::= identifier ws? ":" ws? string
key-array ::= identifier ws? ":" ws? "[" string ("," string)* "]"

comment ::= "#" string?

variable ::= "${{" string "}}"
